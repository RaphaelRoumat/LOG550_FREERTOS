
DEMO_FREERTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be50  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  0800c010  0800c010  0000d010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c22c  0800c22c  0000e074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c22c  0800c22c  0000d22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c234  0800c234  0000e074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c234  0800c234  0000d234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c238  0800c238  0000d238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c23c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002044  20000074  0800c2b0  0000e074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020b8  0800c2b0  0000e0b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ca4d  00000000  00000000  0000e0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fb3  00000000  00000000  0003aaf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002500  00000000  00000000  0003faa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ce2  00000000  00000000  00041fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005e28  00000000  00000000  00043c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002aa1b  00000000  00000000  00049ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00133a5e  00000000  00000000  000744cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a7f2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a228  00000000  00000000  001a7f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  001b2198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800bff8 	.word	0x0800bff8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	0800bff8 	.word	0x0800bff8

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96a 	b.w	80004ec <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	460c      	mov	r4, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14e      	bne.n	80002da <__udivmoddi4+0xaa>
 800023c:	4694      	mov	ip, r2
 800023e:	458c      	cmp	ip, r1
 8000240:	4686      	mov	lr, r0
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	d962      	bls.n	800030e <__udivmoddi4+0xde>
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0320 	rsb	r3, r2, #32
 800024e:	4091      	lsls	r1, r2
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	fa0c fc02 	lsl.w	ip, ip, r2
 8000258:	4319      	orrs	r1, r3
 800025a:	fa00 fe02 	lsl.w	lr, r0, r2
 800025e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000262:	fa1f f68c 	uxth.w	r6, ip
 8000266:	fbb1 f4f7 	udiv	r4, r1, r7
 800026a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026e:	fb07 1114 	mls	r1, r7, r4, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb04 f106 	mul.w	r1, r4, r6
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f104 30ff 	add.w	r0, r4, #4294967295
 8000286:	f080 8112 	bcs.w	80004ae <__udivmoddi4+0x27e>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 810f 	bls.w	80004ae <__udivmoddi4+0x27e>
 8000290:	3c02      	subs	r4, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a59      	subs	r1, r3, r1
 8000296:	fa1f f38e 	uxth.w	r3, lr
 800029a:	fbb1 f0f7 	udiv	r0, r1, r7
 800029e:	fb07 1110 	mls	r1, r7, r0, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb00 f606 	mul.w	r6, r0, r6
 80002aa:	429e      	cmp	r6, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x94>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b6:	f080 80fc 	bcs.w	80004b2 <__udivmoddi4+0x282>
 80002ba:	429e      	cmp	r6, r3
 80002bc:	f240 80f9 	bls.w	80004b2 <__udivmoddi4+0x282>
 80002c0:	4463      	add	r3, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	1b9b      	subs	r3, r3, r6
 80002c6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa6>
 80002ce:	40d3      	lsrs	r3, r2
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xba>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb4>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa6>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x150>
 80002f2:	42a3      	cmp	r3, r4
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xcc>
 80002f6:	4290      	cmp	r0, r2
 80002f8:	f0c0 80f0 	bcc.w	80004dc <__udivmoddi4+0x2ac>
 80002fc:	1a86      	subs	r6, r0, r2
 80002fe:	eb64 0303 	sbc.w	r3, r4, r3
 8000302:	2001      	movs	r0, #1
 8000304:	2d00      	cmp	r5, #0
 8000306:	d0e6      	beq.n	80002d6 <__udivmoddi4+0xa6>
 8000308:	e9c5 6300 	strd	r6, r3, [r5]
 800030c:	e7e3      	b.n	80002d6 <__udivmoddi4+0xa6>
 800030e:	2a00      	cmp	r2, #0
 8000310:	f040 8090 	bne.w	8000434 <__udivmoddi4+0x204>
 8000314:	eba1 040c 	sub.w	r4, r1, ip
 8000318:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800031c:	fa1f f78c 	uxth.w	r7, ip
 8000320:	2101      	movs	r1, #1
 8000322:	fbb4 f6f8 	udiv	r6, r4, r8
 8000326:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032a:	fb08 4416 	mls	r4, r8, r6, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb07 f006 	mul.w	r0, r7, r6
 8000336:	4298      	cmp	r0, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x11c>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x11a>
 8000344:	4298      	cmp	r0, r3
 8000346:	f200 80cd 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 800034a:	4626      	mov	r6, r4
 800034c:	1a1c      	subs	r4, r3, r0
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb4 f0f8 	udiv	r0, r4, r8
 8000356:	fb08 4410 	mls	r4, r8, r0, r4
 800035a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035e:	fb00 f707 	mul.w	r7, r0, r7
 8000362:	429f      	cmp	r7, r3
 8000364:	d908      	bls.n	8000378 <__udivmoddi4+0x148>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 34ff 	add.w	r4, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x146>
 8000370:	429f      	cmp	r7, r3
 8000372:	f200 80b0 	bhi.w	80004d6 <__udivmoddi4+0x2a6>
 8000376:	4620      	mov	r0, r4
 8000378:	1bdb      	subs	r3, r3, r7
 800037a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x9c>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000390:	fa04 f301 	lsl.w	r3, r4, r1
 8000394:	ea43 030c 	orr.w	r3, r3, ip
 8000398:	40f4      	lsrs	r4, r6
 800039a:	fa00 f801 	lsl.w	r8, r0, r1
 800039e:	0c38      	lsrs	r0, r7, #16
 80003a0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a4:	fbb4 fef0 	udiv	lr, r4, r0
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	fb00 441e 	mls	r4, r0, lr, r4
 80003b0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b4:	fb0e f90c 	mul.w	r9, lr, ip
 80003b8:	45a1      	cmp	r9, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d90a      	bls.n	80003d6 <__udivmoddi4+0x1a6>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c6:	f080 8084 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80003ca:	45a1      	cmp	r9, r4
 80003cc:	f240 8081 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80003d0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	eba4 0409 	sub.w	r4, r4, r9
 80003da:	fa1f f983 	uxth.w	r9, r3
 80003de:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e2:	fb00 4413 	mls	r4, r0, r3, r4
 80003e6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ea:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ee:	45a4      	cmp	ip, r4
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1d2>
 80003f2:	193c      	adds	r4, r7, r4
 80003f4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f8:	d267      	bcs.n	80004ca <__udivmoddi4+0x29a>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d965      	bls.n	80004ca <__udivmoddi4+0x29a>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000406:	fba0 9302 	umull	r9, r3, r0, r2
 800040a:	eba4 040c 	sub.w	r4, r4, ip
 800040e:	429c      	cmp	r4, r3
 8000410:	46ce      	mov	lr, r9
 8000412:	469c      	mov	ip, r3
 8000414:	d351      	bcc.n	80004ba <__udivmoddi4+0x28a>
 8000416:	d04e      	beq.n	80004b6 <__udivmoddi4+0x286>
 8000418:	b155      	cbz	r5, 8000430 <__udivmoddi4+0x200>
 800041a:	ebb8 030e 	subs.w	r3, r8, lr
 800041e:	eb64 040c 	sbc.w	r4, r4, ip
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	40cb      	lsrs	r3, r1
 8000428:	431e      	orrs	r6, r3
 800042a:	40cc      	lsrs	r4, r1
 800042c:	e9c5 6400 	strd	r6, r4, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e750      	b.n	80002d6 <__udivmoddi4+0xa6>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f103 	lsr.w	r1, r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa24 f303 	lsr.w	r3, r4, r3
 8000444:	4094      	lsls	r4, r2
 8000446:	430c      	orrs	r4, r1
 8000448:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800044c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000450:	fa1f f78c 	uxth.w	r7, ip
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3110 	mls	r1, r8, r0, r3
 800045c:	0c23      	lsrs	r3, r4, #16
 800045e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000462:	fb00 f107 	mul.w	r1, r0, r7
 8000466:	4299      	cmp	r1, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x24c>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000472:	d22c      	bcs.n	80004ce <__udivmoddi4+0x29e>
 8000474:	4299      	cmp	r1, r3
 8000476:	d92a      	bls.n	80004ce <__udivmoddi4+0x29e>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb3 f1f8 	udiv	r1, r3, r8
 8000484:	fb08 3311 	mls	r3, r8, r1, r3
 8000488:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800048c:	fb01 f307 	mul.w	r3, r1, r7
 8000490:	42a3      	cmp	r3, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x276>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f101 36ff 	add.w	r6, r1, #4294967295
 800049c:	d213      	bcs.n	80004c6 <__udivmoddi4+0x296>
 800049e:	42a3      	cmp	r3, r4
 80004a0:	d911      	bls.n	80004c6 <__udivmoddi4+0x296>
 80004a2:	3902      	subs	r1, #2
 80004a4:	4464      	add	r4, ip
 80004a6:	1ae4      	subs	r4, r4, r3
 80004a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ac:	e739      	b.n	8000322 <__udivmoddi4+0xf2>
 80004ae:	4604      	mov	r4, r0
 80004b0:	e6f0      	b.n	8000294 <__udivmoddi4+0x64>
 80004b2:	4608      	mov	r0, r1
 80004b4:	e706      	b.n	80002c4 <__udivmoddi4+0x94>
 80004b6:	45c8      	cmp	r8, r9
 80004b8:	d2ae      	bcs.n	8000418 <__udivmoddi4+0x1e8>
 80004ba:	ebb9 0e02 	subs.w	lr, r9, r2
 80004be:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c2:	3801      	subs	r0, #1
 80004c4:	e7a8      	b.n	8000418 <__udivmoddi4+0x1e8>
 80004c6:	4631      	mov	r1, r6
 80004c8:	e7ed      	b.n	80004a6 <__udivmoddi4+0x276>
 80004ca:	4603      	mov	r3, r0
 80004cc:	e799      	b.n	8000402 <__udivmoddi4+0x1d2>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e7d4      	b.n	800047c <__udivmoddi4+0x24c>
 80004d2:	46d6      	mov	lr, sl
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1a6>
 80004d6:	4463      	add	r3, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e74d      	b.n	8000378 <__udivmoddi4+0x148>
 80004dc:	4606      	mov	r6, r0
 80004de:	4623      	mov	r3, r4
 80004e0:	4608      	mov	r0, r1
 80004e2:	e70f      	b.n	8000304 <__udivmoddi4+0xd4>
 80004e4:	3e02      	subs	r6, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	e730      	b.n	800034c <__udivmoddi4+0x11c>
 80004ea:	bf00      	nop

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f001 fdba 	bl	800206c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f8a4 	bl	8000644 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004fc:	f000 f904 	bl	8000708 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 fc1c 	bl	8000d3c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000504:	f000 f930 	bl	8000768 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000508:	f000 f992 	bl	8000830 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 800050c:	f000 f9c8 	bl	80008a0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000510:	f000 fa06 	bl	8000920 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000514:	f000 fa44 	bl	80009a0 <MX_OCTOSPI1_Init>
  MX_SPI3_Init();
 8000518:	f000 fa98 	bl	8000a4c <MX_SPI3_Init>
  MX_UART4_Init();
 800051c:	f000 fad4 	bl	8000ac8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000520:	f000 fb1e 	bl	8000b60 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000524:	f000 fb68 	bl	8000bf8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000528:	f000 fbb4 	bl	8000c94 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 800052c:	f000 fbfe 	bl	8000d2c <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  BSP_TSENSOR_Init();
 8000530:	f001 fcbe 	bl	8001eb0 <BSP_TSENSOR_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000534:	f007 fea0 	bl	8008278 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 0, &myBinarySem01_attributes);
 8000538:	4a2a      	ldr	r2, [pc, #168]	@ (80005e4 <main+0xf4>)
 800053a:	2100      	movs	r1, #0
 800053c:	2001      	movs	r0, #1
 800053e:	f007 ffd4 	bl	80084ea <osSemaphoreNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a28      	ldr	r2, [pc, #160]	@ (80005e8 <main+0xf8>)
 8000546:	6013      	str	r3, [r2, #0]

  alarmSemaphoreHandle = osSemaphoreNew(1, 0, &alarmSem_attributes);
 8000548:	4a28      	ldr	r2, [pc, #160]	@ (80005ec <main+0xfc>)
 800054a:	2100      	movs	r1, #0
 800054c:	2001      	movs	r0, #1
 800054e:	f007 ffcc 	bl	80084ea <osSemaphoreNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a26      	ldr	r2, [pc, #152]	@ (80005f0 <main+0x100>)
 8000556:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	osSemaphoreRelease(myBinarySem01Handle);
 8000558:	4b23      	ldr	r3, [pc, #140]	@ (80005e8 <main+0xf8>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4618      	mov	r0, r3
 800055e:	f008 f89f 	bl	80086a0 <osSemaphoreRelease>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myDataQueue */
  myDataQueueHandle = osMessageQueueNew (5, sizeof(uint8_t), &myDataQueue_attributes);
 8000562:	4a24      	ldr	r2, [pc, #144]	@ (80005f4 <main+0x104>)
 8000564:	2101      	movs	r1, #1
 8000566:	2005      	movs	r0, #5
 8000568:	f008 f8de 	bl	8008728 <osMessageQueueNew>
 800056c:	4603      	mov	r3, r0
 800056e:	4a22      	ldr	r2, [pc, #136]	@ (80005f8 <main+0x108>)
 8000570:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  myLedTaskHandle = osThreadNew(LED_flash_task_run, NULL, &myLedTask_attributes);
 8000572:	4a22      	ldr	r2, [pc, #136]	@ (80005fc <main+0x10c>)
 8000574:	2100      	movs	r1, #0
 8000576:	4822      	ldr	r0, [pc, #136]	@ (8000600 <main+0x110>)
 8000578:	f007 fec8 	bl	800830c <osThreadNew>
 800057c:	4603      	mov	r3, r0
 800057e:	4a21      	ldr	r2, [pc, #132]	@ (8000604 <main+0x114>)
 8000580:	6013      	str	r3, [r2, #0]

  myUART_RX_TaskHandle = osThreadNew(UART_RX_task_run, NULL, &myUART_RX_TaskHandle_attributes);
 8000582:	4a21      	ldr	r2, [pc, #132]	@ (8000608 <main+0x118>)
 8000584:	2100      	movs	r1, #0
 8000586:	4821      	ldr	r0, [pc, #132]	@ (800060c <main+0x11c>)
 8000588:	f007 fec0 	bl	800830c <osThreadNew>
 800058c:	4603      	mov	r3, r0
 800058e:	4a20      	ldr	r2, [pc, #128]	@ (8000610 <main+0x120>)
 8000590:	6013      	str	r3, [r2, #0]

  myUartSendTaskHandle = osThreadNew(UART_send_task_run, NULL, &myUartSendTask_attributes);
 8000592:	4a20      	ldr	r2, [pc, #128]	@ (8000614 <main+0x124>)
 8000594:	2100      	movs	r1, #0
 8000596:	4820      	ldr	r0, [pc, #128]	@ (8000618 <main+0x128>)
 8000598:	f007 feb8 	bl	800830c <osThreadNew>
 800059c:	4603      	mov	r3, r0
 800059e:	4a1f      	ldr	r2, [pc, #124]	@ (800061c <main+0x12c>)
 80005a0:	6013      	str	r3, [r2, #0]

  myADC_Cmd_TaskHandle = osThreadNew(ADC_CMD_task_run, NULL, &myADC_Cmd__TaskHandle_attributes);
 80005a2:	4a1f      	ldr	r2, [pc, #124]	@ (8000620 <main+0x130>)
 80005a4:	2100      	movs	r1, #0
 80005a6:	481f      	ldr	r0, [pc, #124]	@ (8000624 <main+0x134>)
 80005a8:	f007 feb0 	bl	800830c <osThreadNew>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000628 <main+0x138>)
 80005b0:	6013      	str	r3, [r2, #0]
  myTempReadingTaskHandle = osThreadNew(TEMP_Read,NULL, &myTempReadingTaskHandle_attributes);
 80005b2:	4a1e      	ldr	r2, [pc, #120]	@ (800062c <main+0x13c>)
 80005b4:	2100      	movs	r1, #0
 80005b6:	481e      	ldr	r0, [pc, #120]	@ (8000630 <main+0x140>)
 80005b8:	f007 fea8 	bl	800830c <osThreadNew>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a1d      	ldr	r2, [pc, #116]	@ (8000634 <main+0x144>)
 80005c0:	6013      	str	r3, [r2, #0]

  myAlarm_TaskHandle = osThreadNew(AlarmMsgQ,NULL, &myAlarm__TaskHandle_attributes);
 80005c2:	4a1d      	ldr	r2, [pc, #116]	@ (8000638 <main+0x148>)
 80005c4:	2100      	movs	r1, #0
 80005c6:	481d      	ldr	r0, [pc, #116]	@ (800063c <main+0x14c>)
 80005c8:	f007 fea0 	bl	800830c <osThreadNew>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000640 <main+0x150>)
 80005d0:	6013      	str	r3, [r2, #0]

  osThreadSuspend(myADC_Cmd_TaskHandle);
 80005d2:	4b15      	ldr	r3, [pc, #84]	@ (8000628 <main+0x138>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f007 ff2a 	bl	8008430 <osThreadSuspend>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005dc:	f007 fe70 	bl	80082c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <main+0xf0>
 80005e4:	0800c178 	.word	0x0800c178
 80005e8:	200004f4 	.word	0x200004f4
 80005ec:	0800c188 	.word	0x0800c188
 80005f0:	200004f8 	.word	0x200004f8
 80005f4:	0800c160 	.word	0x0800c160
 80005f8:	200004f0 	.word	0x200004f0
 80005fc:	0800c0ac 	.word	0x0800c0ac
 8000600:	08000fe5 	.word	0x08000fe5
 8000604:	200004dc 	.word	0x200004dc
 8000608:	0800c0f4 	.word	0x0800c0f4
 800060c:	080010d9 	.word	0x080010d9
 8000610:	200004e4 	.word	0x200004e4
 8000614:	0800c0d0 	.word	0x0800c0d0
 8000618:	0800109d 	.word	0x0800109d
 800061c:	200004e0 	.word	0x200004e0
 8000620:	0800c118 	.word	0x0800c118
 8000624:	08001215 	.word	0x08001215
 8000628:	200004e8 	.word	0x200004e8
 800062c:	0800c198 	.word	0x0800c198
 8000630:	08001175 	.word	0x08001175
 8000634:	200004fc 	.word	0x200004fc
 8000638:	0800c13c 	.word	0x0800c13c
 800063c:	080012a1 	.word	0x080012a1
 8000640:	200004ec 	.word	0x200004ec

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b096      	sub	sp, #88	@ 0x58
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	2244      	movs	r2, #68	@ 0x44
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f00b fbe8 	bl	800be28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	463b      	mov	r3, r7
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000666:	2000      	movs	r0, #0
 8000668:	f004 fdd6 	bl	8005218 <HAL_PWREx_ControlVoltageScaling>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000672:	f000 fe3b 	bl	80012ec <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000676:	f004 fd9f 	bl	80051b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800067a:	4b22      	ldr	r3, [pc, #136]	@ (8000704 <SystemClock_Config+0xc0>)
 800067c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000680:	4a20      	ldr	r2, [pc, #128]	@ (8000704 <SystemClock_Config+0xc0>)
 8000682:	f023 0318 	bic.w	r3, r3, #24
 8000686:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800068a:	2314      	movs	r3, #20
 800068c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800068e:	2301      	movs	r3, #1
 8000690:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000692:	2301      	movs	r3, #1
 8000694:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800069a:	2360      	movs	r3, #96	@ 0x60
 800069c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006a2:	2301      	movs	r3, #1
 80006a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80006aa:	233c      	movs	r3, #60	@ 0x3c
 80006ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4618      	mov	r0, r3
 80006c0:	f004 fe4e 	bl	8005360 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006ca:	f000 fe0f 	bl	80012ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2303      	movs	r3, #3
 80006d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e2:	463b      	mov	r3, r7
 80006e4:	2105      	movs	r1, #5
 80006e6:	4618      	mov	r0, r3
 80006e8:	f005 fa54 	bl	8005b94 <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006f2:	f000 fdfb 	bl	80012ec <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006f6:	f006 f86d 	bl	80067d4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006fa:	bf00      	nop
 80006fc:	3758      	adds	r7, #88	@ 0x58
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000

08000708 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b0a6      	sub	sp, #152	@ 0x98
 800070c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2294      	movs	r2, #148	@ 0x94
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f00b fb87 	bl	800be28 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800071a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800071e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000720:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000724:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000728:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800072c:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800072e:	2301      	movs	r3, #1
 8000730:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000732:	2301      	movs	r3, #1
 8000734:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000736:	2318      	movs	r3, #24
 8000738:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800073a:	2302      	movs	r3, #2
 800073c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800073e:	2302      	movs	r3, #2
 8000740:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000742:	2302      	movs	r3, #2
 8000744:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000746:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 800074a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	4618      	mov	r0, r3
 8000750:	f005 fd10 	bl	8006174 <HAL_RCCEx_PeriphCLKConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800075a:	f000 fdc7 	bl	80012ec <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3798      	adds	r7, #152	@ 0x98
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
 800077c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800077e:	4b29      	ldr	r3, [pc, #164]	@ (8000824 <MX_ADC1_Init+0xbc>)
 8000780:	4a29      	ldr	r2, [pc, #164]	@ (8000828 <MX_ADC1_Init+0xc0>)
 8000782:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000784:	4b27      	ldr	r3, [pc, #156]	@ (8000824 <MX_ADC1_Init+0xbc>)
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800078a:	4b26      	ldr	r3, [pc, #152]	@ (8000824 <MX_ADC1_Init+0xbc>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000790:	4b24      	ldr	r3, [pc, #144]	@ (8000824 <MX_ADC1_Init+0xbc>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000796:	4b23      	ldr	r3, [pc, #140]	@ (8000824 <MX_ADC1_Init+0xbc>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800079c:	4b21      	ldr	r3, [pc, #132]	@ (8000824 <MX_ADC1_Init+0xbc>)
 800079e:	2204      	movs	r2, #4
 80007a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007a2:	4b20      	ldr	r3, [pc, #128]	@ (8000824 <MX_ADC1_Init+0xbc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000824 <MX_ADC1_Init+0xbc>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000824 <MX_ADC1_Init+0xbc>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <MX_ADC1_Init+0xbc>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007bc:	4b19      	ldr	r3, [pc, #100]	@ (8000824 <MX_ADC1_Init+0xbc>)
 80007be:	2200      	movs	r2, #0
 80007c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c2:	4b18      	ldr	r3, [pc, #96]	@ (8000824 <MX_ADC1_Init+0xbc>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007c8:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <MX_ADC1_Init+0xbc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007d0:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <MX_ADC1_Init+0xbc>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007d6:	4b13      	ldr	r3, [pc, #76]	@ (8000824 <MX_ADC1_Init+0xbc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007de:	4811      	ldr	r0, [pc, #68]	@ (8000824 <MX_ADC1_Init+0xbc>)
 80007e0:	f001 fe56 	bl	8002490 <HAL_ADC_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80007ea:	f000 fd7f 	bl	80012ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007ee:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <MX_ADC1_Init+0xc4>)
 80007f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f2:	2306      	movs	r3, #6
 80007f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007fa:	237f      	movs	r3, #127	@ 0x7f
 80007fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007fe:	2304      	movs	r3, #4
 8000800:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000806:	463b      	mov	r3, r7
 8000808:	4619      	mov	r1, r3
 800080a:	4806      	ldr	r0, [pc, #24]	@ (8000824 <MX_ADC1_Init+0xbc>)
 800080c:	f002 f886 	bl	800291c <HAL_ADC_ConfigChannel>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000816:	f000 fd69 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000090 	.word	0x20000090
 8000828:	50040000 	.word	0x50040000
 800082c:	04300002 	.word	0x04300002

08000830 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000834:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <MX_DFSDM1_Init+0x68>)
 8000836:	4a19      	ldr	r2, [pc, #100]	@ (800089c <MX_DFSDM1_Init+0x6c>)
 8000838:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800083a:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <MX_DFSDM1_Init+0x68>)
 800083c:	2201      	movs	r2, #1
 800083e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000840:	4b15      	ldr	r3, [pc, #84]	@ (8000898 <MX_DFSDM1_Init+0x68>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000846:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_DFSDM1_Init+0x68>)
 8000848:	2202      	movs	r2, #2
 800084a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <MX_DFSDM1_Init+0x68>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_DFSDM1_Init+0x68>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_DFSDM1_Init+0x68>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_DFSDM1_Init+0x68>)
 8000860:	2200      	movs	r2, #0
 8000862:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_DFSDM1_Init+0x68>)
 8000866:	2204      	movs	r2, #4
 8000868:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <MX_DFSDM1_Init+0x68>)
 800086c:	2200      	movs	r2, #0
 800086e:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_DFSDM1_Init+0x68>)
 8000872:	2201      	movs	r2, #1
 8000874:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <MX_DFSDM1_Init+0x68>)
 8000878:	2200      	movs	r2, #0
 800087a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_DFSDM1_Init+0x68>)
 800087e:	2200      	movs	r2, #0
 8000880:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	@ (8000898 <MX_DFSDM1_Init+0x68>)
 8000884:	f002 fdae 	bl	80033e4 <HAL_DFSDM_ChannelInit>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 800088e:	f000 fd2d 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000f8 	.word	0x200000f8
 800089c:	40016040 	.word	0x40016040

080008a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000918 <MX_I2C1_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008ac:	4a1b      	ldr	r2, [pc, #108]	@ (800091c <MX_I2C1_Init+0x7c>)
 80008ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008b0:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b6:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008bc:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008c2:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008da:	480e      	ldr	r0, [pc, #56]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008dc:	f003 f94d 	bl	8003b7a <HAL_I2C_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008e6:	f000 fd01 	bl	80012ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ea:	2100      	movs	r1, #0
 80008ec:	4809      	ldr	r0, [pc, #36]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008ee:	f003 fef5 	bl	80046dc <HAL_I2CEx_ConfigAnalogFilter>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008f8:	f000 fcf8 	bl	80012ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008fc:	2100      	movs	r1, #0
 80008fe:	4805      	ldr	r0, [pc, #20]	@ (8000914 <MX_I2C1_Init+0x74>)
 8000900:	f003 ff37 	bl	8004772 <HAL_I2CEx_ConfigDigitalFilter>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800090a:	f000 fcef 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000130 	.word	0x20000130
 8000918:	40005400 	.word	0x40005400
 800091c:	307075b1 	.word	0x307075b1

08000920 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000924:	4b1b      	ldr	r3, [pc, #108]	@ (8000994 <MX_I2C2_Init+0x74>)
 8000926:	4a1c      	ldr	r2, [pc, #112]	@ (8000998 <MX_I2C2_Init+0x78>)
 8000928:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800092a:	4b1a      	ldr	r3, [pc, #104]	@ (8000994 <MX_I2C2_Init+0x74>)
 800092c:	4a1b      	ldr	r2, [pc, #108]	@ (800099c <MX_I2C2_Init+0x7c>)
 800092e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000930:	4b18      	ldr	r3, [pc, #96]	@ (8000994 <MX_I2C2_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000936:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <MX_I2C2_Init+0x74>)
 8000938:	2201      	movs	r2, #1
 800093a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800093c:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <MX_I2C2_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000942:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <MX_I2C2_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000948:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <MX_I2C2_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800094e:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <MX_I2C2_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000954:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <MX_I2C2_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800095a:	480e      	ldr	r0, [pc, #56]	@ (8000994 <MX_I2C2_Init+0x74>)
 800095c:	f003 f90d 	bl	8003b7a <HAL_I2C_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000966:	f000 fcc1 	bl	80012ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800096a:	2100      	movs	r1, #0
 800096c:	4809      	ldr	r0, [pc, #36]	@ (8000994 <MX_I2C2_Init+0x74>)
 800096e:	f003 feb5 	bl	80046dc <HAL_I2CEx_ConfigAnalogFilter>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000978:	f000 fcb8 	bl	80012ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800097c:	2100      	movs	r1, #0
 800097e:	4805      	ldr	r0, [pc, #20]	@ (8000994 <MX_I2C2_Init+0x74>)
 8000980:	f003 fef7 	bl	8004772 <HAL_I2CEx_ConfigDigitalFilter>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800098a:	f000 fcaf 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000184 	.word	0x20000184
 8000998:	40005800 	.word	0x40005800
 800099c:	307075b1 	.word	0x307075b1

080009a0 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80009b4:	4b23      	ldr	r3, [pc, #140]	@ (8000a44 <MX_OCTOSPI1_Init+0xa4>)
 80009b6:	4a24      	ldr	r2, [pc, #144]	@ (8000a48 <MX_OCTOSPI1_Init+0xa8>)
 80009b8:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80009ba:	4b22      	ldr	r3, [pc, #136]	@ (8000a44 <MX_OCTOSPI1_Init+0xa4>)
 80009bc:	2201      	movs	r2, #1
 80009be:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80009c0:	4b20      	ldr	r3, [pc, #128]	@ (8000a44 <MX_OCTOSPI1_Init+0xa4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80009c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a44 <MX_OCTOSPI1_Init+0xa4>)
 80009c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80009cc:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80009ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000a44 <MX_OCTOSPI1_Init+0xa4>)
 80009d0:	2220      	movs	r2, #32
 80009d2:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a44 <MX_OCTOSPI1_Init+0xa4>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80009da:	4b1a      	ldr	r3, [pc, #104]	@ (8000a44 <MX_OCTOSPI1_Init+0xa4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80009e0:	4b18      	ldr	r3, [pc, #96]	@ (8000a44 <MX_OCTOSPI1_Init+0xa4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 80009e6:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <MX_OCTOSPI1_Init+0xa4>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80009ec:	4b15      	ldr	r3, [pc, #84]	@ (8000a44 <MX_OCTOSPI1_Init+0xa4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80009f2:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <MX_OCTOSPI1_Init+0xa4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 80009f8:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <MX_OCTOSPI1_Init+0xa4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80009fe:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <MX_OCTOSPI1_Init+0xa4>)
 8000a00:	2208      	movs	r2, #8
 8000a02:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000a04:	480f      	ldr	r0, [pc, #60]	@ (8000a44 <MX_OCTOSPI1_Init+0xa4>)
 8000a06:	f003 ff01 	bl	800480c <HAL_OSPI_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000a10:	f000 fc6c 	bl	80012ec <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000a14:	2301      	movs	r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000a1c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000a20:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4806      	ldr	r0, [pc, #24]	@ (8000a44 <MX_OCTOSPI1_Init+0xa4>)
 8000a2c:	f003 ffa8 	bl	8004980 <HAL_OSPIM_Config>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000a36:	f000 fc59 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200001d8 	.word	0x200001d8
 8000a48:	a0001000 	.word	0xa0001000

08000a4c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <MX_SPI3_Init+0x74>)
 8000a52:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac4 <MX_SPI3_Init+0x78>)
 8000a54:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <MX_SPI3_Init+0x74>)
 8000a58:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a5c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <MX_SPI3_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a64:	4b16      	ldr	r3, [pc, #88]	@ (8000ac0 <MX_SPI3_Init+0x74>)
 8000a66:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000a6a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <MX_SPI3_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a72:	4b13      	ldr	r3, [pc, #76]	@ (8000ac0 <MX_SPI3_Init+0x74>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a78:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <MX_SPI3_Init+0x74>)
 8000a7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a7e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <MX_SPI3_Init+0x74>)
 8000a82:	2208      	movs	r2, #8
 8000a84:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <MX_SPI3_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <MX_SPI3_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac0 <MX_SPI3_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a98:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <MX_SPI3_Init+0x74>)
 8000a9a:	2207      	movs	r2, #7
 8000a9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a9e:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <MX_SPI3_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <MX_SPI3_Init+0x74>)
 8000aa6:	2208      	movs	r2, #8
 8000aa8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000aaa:	4805      	ldr	r0, [pc, #20]	@ (8000ac0 <MX_SPI3_Init+0x74>)
 8000aac:	f006 f88a 	bl	8006bc4 <HAL_SPI_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000ab6:	f000 fc19 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000228 	.word	0x20000228
 8000ac4:	40003c00 	.word	0x40003c00

08000ac8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000acc:	4b22      	ldr	r3, [pc, #136]	@ (8000b58 <MX_UART4_Init+0x90>)
 8000ace:	4a23      	ldr	r2, [pc, #140]	@ (8000b5c <MX_UART4_Init+0x94>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	@ (8000b58 <MX_UART4_Init+0x90>)
 8000ad4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	4b1f      	ldr	r3, [pc, #124]	@ (8000b58 <MX_UART4_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b58 <MX_UART4_Init+0x90>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b58 <MX_UART4_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <MX_UART4_Init+0x90>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b19      	ldr	r3, [pc, #100]	@ (8000b58 <MX_UART4_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <MX_UART4_Init+0x90>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afe:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <MX_UART4_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b04:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <MX_UART4_Init+0x90>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <MX_UART4_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b10:	4811      	ldr	r0, [pc, #68]	@ (8000b58 <MX_UART4_Init+0x90>)
 8000b12:	f006 fbad 	bl	8007270 <HAL_UART_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000b1c:	f000 fbe6 	bl	80012ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b20:	2100      	movs	r1, #0
 8000b22:	480d      	ldr	r0, [pc, #52]	@ (8000b58 <MX_UART4_Init+0x90>)
 8000b24:	f007 fa9a 	bl	800805c <HAL_UARTEx_SetTxFifoThreshold>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000b2e:	f000 fbdd 	bl	80012ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b32:	2100      	movs	r1, #0
 8000b34:	4808      	ldr	r0, [pc, #32]	@ (8000b58 <MX_UART4_Init+0x90>)
 8000b36:	f007 facf 	bl	80080d8 <HAL_UARTEx_SetRxFifoThreshold>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000b40:	f000 fbd4 	bl	80012ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <MX_UART4_Init+0x90>)
 8000b46:	f007 fa50 	bl	8007fea <HAL_UARTEx_DisableFifoMode>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000b50:	f000 fbcc 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	2000028c 	.word	0x2000028c
 8000b5c:	40004c00 	.word	0x40004c00

08000b60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b64:	4b22      	ldr	r3, [pc, #136]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000b66:	4a23      	ldr	r2, [pc, #140]	@ (8000bf4 <MX_USART1_UART_Init+0x94>)
 8000b68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b6a:	4b21      	ldr	r3, [pc, #132]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000b6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b72:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b78:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8a:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b90:	4b17      	ldr	r3, [pc, #92]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b96:	4b16      	ldr	r3, [pc, #88]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ba8:	4811      	ldr	r0, [pc, #68]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000baa:	f006 fb61 	bl	8007270 <HAL_UART_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bb4:	f000 fb9a 	bl	80012ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb8:	2100      	movs	r1, #0
 8000bba:	480d      	ldr	r0, [pc, #52]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000bbc:	f007 fa4e 	bl	800805c <HAL_UARTEx_SetTxFifoThreshold>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bc6:	f000 fb91 	bl	80012ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4808      	ldr	r0, [pc, #32]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000bce:	f007 fa83 	bl	80080d8 <HAL_UARTEx_SetRxFifoThreshold>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bd8:	f000 fb88 	bl	80012ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000bde:	f007 fa04 	bl	8007fea <HAL_UARTEx_DisableFifoMode>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000be8:	f000 fb80 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000320 	.word	0x20000320
 8000bf4:	40013800 	.word	0x40013800

08000bf8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bfc:	4b23      	ldr	r3, [pc, #140]	@ (8000c8c <MX_USART2_UART_Init+0x94>)
 8000bfe:	4a24      	ldr	r2, [pc, #144]	@ (8000c90 <MX_USART2_UART_Init+0x98>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c02:	4b22      	ldr	r3, [pc, #136]	@ (8000c8c <MX_USART2_UART_Init+0x94>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0a:	4b20      	ldr	r3, [pc, #128]	@ (8000c8c <MX_USART2_UART_Init+0x94>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c10:	4b1e      	ldr	r3, [pc, #120]	@ (8000c8c <MX_USART2_UART_Init+0x94>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c16:	4b1d      	ldr	r3, [pc, #116]	@ (8000c8c <MX_USART2_UART_Init+0x94>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c8c <MX_USART2_UART_Init+0x94>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000c22:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <MX_USART2_UART_Init+0x94>)
 8000c24:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c28:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2a:	4b18      	ldr	r3, [pc, #96]	@ (8000c8c <MX_USART2_UART_Init+0x94>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c30:	4b16      	ldr	r3, [pc, #88]	@ (8000c8c <MX_USART2_UART_Init+0x94>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c36:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <MX_USART2_UART_Init+0x94>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c3c:	4b13      	ldr	r3, [pc, #76]	@ (8000c8c <MX_USART2_UART_Init+0x94>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c42:	4812      	ldr	r0, [pc, #72]	@ (8000c8c <MX_USART2_UART_Init+0x94>)
 8000c44:	f006 fb14 	bl	8007270 <HAL_UART_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000c4e:	f000 fb4d 	bl	80012ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c52:	2100      	movs	r1, #0
 8000c54:	480d      	ldr	r0, [pc, #52]	@ (8000c8c <MX_USART2_UART_Init+0x94>)
 8000c56:	f007 fa01 	bl	800805c <HAL_UARTEx_SetTxFifoThreshold>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000c60:	f000 fb44 	bl	80012ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c64:	2100      	movs	r1, #0
 8000c66:	4809      	ldr	r0, [pc, #36]	@ (8000c8c <MX_USART2_UART_Init+0x94>)
 8000c68:	f007 fa36 	bl	80080d8 <HAL_UARTEx_SetRxFifoThreshold>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000c72:	f000 fb3b 	bl	80012ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c76:	4805      	ldr	r0, [pc, #20]	@ (8000c8c <MX_USART2_UART_Init+0x94>)
 8000c78:	f007 f9b7 	bl	8007fea <HAL_UARTEx_DisableFifoMode>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000c82:	f000 fb33 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200003b4 	.word	0x200003b4
 8000c90:	40004400 	.word	0x40004400

08000c94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c98:	4b22      	ldr	r3, [pc, #136]	@ (8000d24 <MX_USART3_UART_Init+0x90>)
 8000c9a:	4a23      	ldr	r2, [pc, #140]	@ (8000d28 <MX_USART3_UART_Init+0x94>)
 8000c9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c9e:	4b21      	ldr	r3, [pc, #132]	@ (8000d24 <MX_USART3_UART_Init+0x90>)
 8000ca0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ca4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d24 <MX_USART3_UART_Init+0x90>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cac:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <MX_USART3_UART_Init+0x90>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d24 <MX_USART3_UART_Init+0x90>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d24 <MX_USART3_UART_Init+0x90>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	4b19      	ldr	r3, [pc, #100]	@ (8000d24 <MX_USART3_UART_Init+0x90>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	4b17      	ldr	r3, [pc, #92]	@ (8000d24 <MX_USART3_UART_Init+0x90>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cca:	4b16      	ldr	r3, [pc, #88]	@ (8000d24 <MX_USART3_UART_Init+0x90>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cd0:	4b14      	ldr	r3, [pc, #80]	@ (8000d24 <MX_USART3_UART_Init+0x90>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd6:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <MX_USART3_UART_Init+0x90>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cdc:	4811      	ldr	r0, [pc, #68]	@ (8000d24 <MX_USART3_UART_Init+0x90>)
 8000cde:	f006 fac7 	bl	8007270 <HAL_UART_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ce8:	f000 fb00 	bl	80012ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cec:	2100      	movs	r1, #0
 8000cee:	480d      	ldr	r0, [pc, #52]	@ (8000d24 <MX_USART3_UART_Init+0x90>)
 8000cf0:	f007 f9b4 	bl	800805c <HAL_UARTEx_SetTxFifoThreshold>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cfa:	f000 faf7 	bl	80012ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4808      	ldr	r0, [pc, #32]	@ (8000d24 <MX_USART3_UART_Init+0x90>)
 8000d02:	f007 f9e9 	bl	80080d8 <HAL_UARTEx_SetRxFifoThreshold>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d0c:	f000 faee 	bl	80012ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d10:	4804      	ldr	r0, [pc, #16]	@ (8000d24 <MX_USART3_UART_Init+0x90>)
 8000d12:	f007 f96a 	bl	8007fea <HAL_UARTEx_DisableFifoMode>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d1c:	f000 fae6 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000448 	.word	0x20000448
 8000d28:	40004800 	.word	0x40004800

08000d2c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08c      	sub	sp, #48	@ 0x30
 8000d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d52:	4b9f      	ldr	r3, [pc, #636]	@ (8000fd0 <MX_GPIO_Init+0x294>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	4a9e      	ldr	r2, [pc, #632]	@ (8000fd0 <MX_GPIO_Init+0x294>)
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d5e:	4b9c      	ldr	r3, [pc, #624]	@ (8000fd0 <MX_GPIO_Init+0x294>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	61bb      	str	r3, [r7, #24]
 8000d68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	4b99      	ldr	r3, [pc, #612]	@ (8000fd0 <MX_GPIO_Init+0x294>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	4a98      	ldr	r2, [pc, #608]	@ (8000fd0 <MX_GPIO_Init+0x294>)
 8000d70:	f043 0304 	orr.w	r3, r3, #4
 8000d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d76:	4b96      	ldr	r3, [pc, #600]	@ (8000fd0 <MX_GPIO_Init+0x294>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d82:	4b93      	ldr	r3, [pc, #588]	@ (8000fd0 <MX_GPIO_Init+0x294>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d86:	4a92      	ldr	r2, [pc, #584]	@ (8000fd0 <MX_GPIO_Init+0x294>)
 8000d88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8e:	4b90      	ldr	r3, [pc, #576]	@ (8000fd0 <MX_GPIO_Init+0x294>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b8d      	ldr	r3, [pc, #564]	@ (8000fd0 <MX_GPIO_Init+0x294>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9e:	4a8c      	ldr	r2, [pc, #560]	@ (8000fd0 <MX_GPIO_Init+0x294>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da6:	4b8a      	ldr	r3, [pc, #552]	@ (8000fd0 <MX_GPIO_Init+0x294>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4b87      	ldr	r3, [pc, #540]	@ (8000fd0 <MX_GPIO_Init+0x294>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db6:	4a86      	ldr	r2, [pc, #536]	@ (8000fd0 <MX_GPIO_Init+0x294>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dbe:	4b84      	ldr	r3, [pc, #528]	@ (8000fd0 <MX_GPIO_Init+0x294>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dca:	4b81      	ldr	r3, [pc, #516]	@ (8000fd0 <MX_GPIO_Init+0x294>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dce:	4a80      	ldr	r2, [pc, #512]	@ (8000fd0 <MX_GPIO_Init+0x294>)
 8000dd0:	f043 0308 	orr.w	r3, r3, #8
 8000dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd6:	4b7e      	ldr	r3, [pc, #504]	@ (8000fd0 <MX_GPIO_Init+0x294>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dda:	f003 0308 	and.w	r3, r3, #8
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f240 1105 	movw	r1, #261	@ 0x105
 8000de8:	487a      	ldr	r0, [pc, #488]	@ (8000fd4 <MX_GPIO_Init+0x298>)
 8000dea:	f002 fe8b 	bl	8003b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|GPIO_PIN_5
 8000dee:	2200      	movs	r2, #0
 8000df0:	f248 113c 	movw	r1, #33084	@ 0x813c
 8000df4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df8:	f002 fe84 	bl	8003b04 <HAL_GPIO_WritePin>
                          |SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f24f 0134 	movw	r1, #61492	@ 0xf034
 8000e02:	4875      	ldr	r0, [pc, #468]	@ (8000fd8 <MX_GPIO_Init+0x29c>)
 8000e04:	f002 fe7e 	bl	8003b04 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f242 0183 	movw	r1, #8323	@ 0x2083
 8000e0e:	4873      	ldr	r0, [pc, #460]	@ (8000fdc <MX_GPIO_Init+0x2a0>)
 8000e10:	f002 fe78 	bl	8003b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000e1a:	4871      	ldr	r0, [pc, #452]	@ (8000fe0 <MX_GPIO_Init+0x2a4>)
 8000e1c:	f002 fe72 	bl	8003b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000e20:	f240 1305 	movw	r3, #261	@ 0x105
 8000e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	4619      	mov	r1, r3
 8000e38:	4866      	ldr	r0, [pc, #408]	@ (8000fd4 <MX_GPIO_Init+0x298>)
 8000e3a:	f002 fbdf 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8000e3e:	237a      	movs	r3, #122	@ 0x7a
 8000e40:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e42:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4619      	mov	r1, r3
 8000e52:	4860      	ldr	r0, [pc, #384]	@ (8000fd4 <MX_GPIO_Init+0x298>)
 8000e54:	f002 fbd2 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000e58:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 8000e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e5e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	485c      	ldr	r0, [pc, #368]	@ (8000fe0 <MX_GPIO_Init+0x2a4>)
 8000e70:	f002 fbc4 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin PA5
                           SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|GPIO_PIN_5
 8000e74:	f248 133c 	movw	r3, #33084	@ 0x813c
 8000e78:	61fb      	str	r3, [r7, #28]
                          |SPBTLE_RF_RST_Pin|ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e90:	f002 fbb4 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000e94:	23c0      	movs	r3, #192	@ 0xc0
 8000e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ea4:	2305      	movs	r3, #5
 8000ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4619      	mov	r1, r3
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb2:	f002 fba3 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ebe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4843      	ldr	r0, [pc, #268]	@ (8000fd8 <MX_GPIO_Init+0x29c>)
 8000ecc:	f002 fb96 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	4619      	mov	r1, r3
 8000eea:	483b      	ldr	r0, [pc, #236]	@ (8000fd8 <MX_GPIO_Init+0x29c>)
 8000eec:	f002 fb86 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ef0:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000ef4:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	4833      	ldr	r0, [pc, #204]	@ (8000fd8 <MX_GPIO_Init+0x29c>)
 8000f0a:	f002 fb77 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8000f0e:	f64d 4304 	movw	r3, #56324	@ 0xdc04
 8000f12:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f14:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4619      	mov	r1, r3
 8000f24:	482d      	ldr	r0, [pc, #180]	@ (8000fdc <MX_GPIO_Init+0x2a0>)
 8000f26:	f002 fb69 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000f2a:	f242 0383 	movw	r3, #8323	@ 0x2083
 8000f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	4826      	ldr	r0, [pc, #152]	@ (8000fdc <MX_GPIO_Init+0x2a0>)
 8000f44:	f002 fb5a 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000f48:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	4619      	mov	r1, r3
 8000f60:	481f      	ldr	r0, [pc, #124]	@ (8000fe0 <MX_GPIO_Init+0x2a4>)
 8000f62:	f002 fb4b 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000f66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f7e:	f002 fb3d 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000f82:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f94:	230a      	movs	r3, #10
 8000f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa2:	f002 fb2b 	bl	80035fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2105      	movs	r1, #5
 8000faa:	2017      	movs	r0, #23
 8000fac:	f002 f9f0 	bl	8003390 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fb0:	2017      	movs	r0, #23
 8000fb2:	f002 fa09 	bl	80033c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2105      	movs	r1, #5
 8000fba:	2028      	movs	r0, #40	@ 0x28
 8000fbc:	f002 f9e8 	bl	8003390 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fc0:	2028      	movs	r0, #40	@ 0x28
 8000fc2:	f002 fa01 	bl	80033c8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fc6:	bf00      	nop
 8000fc8:	3730      	adds	r7, #48	@ 0x30
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	48001000 	.word	0x48001000
 8000fd8:	48000400 	.word	0x48000400
 8000fdc:	48000c00 	.word	0x48000c00
 8000fe0:	48000800 	.word	0x48000800

08000fe4 <LED_flash_task_run>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMyLedTask */
void LED_flash_task_run(void *argument)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2120      	movs	r1, #32
 8000ff0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff4:	f002 fd86 	bl	8003b04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ffe:	4821      	ldr	r0, [pc, #132]	@ (8001084 <LED_flash_task_run+0xa0>)
 8001000:	f002 fd80 	bl	8003b04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800100a:	481f      	ldr	r0, [pc, #124]	@ (8001088 <LED_flash_task_run+0xa4>)
 800100c:	f002 fd7a 	bl	8003b04 <HAL_GPIO_WritePin>
  static GPIO_PinState led_1_2_state = GPIO_PIN_RESET;
  for(;;)
  {

  if(led_1_2_state == GPIO_PIN_SET)
 8001010:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <LED_flash_task_run+0xa8>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d103      	bne.n	8001020 <LED_flash_task_run+0x3c>
	  led_1_2_state = GPIO_PIN_RESET;
 8001018:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <LED_flash_task_run+0xa8>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
 800101e:	e002      	b.n	8001026 <LED_flash_task_run+0x42>
  else led_1_2_state = GPIO_PIN_SET;
 8001020:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <LED_flash_task_run+0xa8>)
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]

	osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 8001026:	4b1a      	ldr	r3, [pc, #104]	@ (8001090 <LED_flash_task_run+0xac>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f04f 31ff 	mov.w	r1, #4294967295
 800102e:	4618      	mov	r0, r3
 8001030:	f007 fae4 	bl	80085fc <osSemaphoreAcquire>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, led_1_2_state); // Toggle
 8001034:	4b15      	ldr	r3, [pc, #84]	@ (800108c <LED_flash_task_run+0xa8>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	2120      	movs	r1, #32
 800103c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001040:	f002 fd60 	bl	8003b04 <HAL_GPIO_WritePin>
	if(acquisition_activated == 0)
 8001044:	4b13      	ldr	r3, [pc, #76]	@ (8001094 <LED_flash_task_run+0xb0>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d107      	bne.n	800105c <LED_flash_task_run+0x78>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, led_1_2_state); // Toggle LED 2
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <LED_flash_task_run+0xa8>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001056:	480c      	ldr	r0, [pc, #48]	@ (8001088 <LED_flash_task_run+0xa4>)
 8001058:	f002 fd54 	bl	8003b04 <HAL_GPIO_WritePin>

	if(queue_overflow_detected == 0)
 800105c:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <LED_flash_task_run+0xb4>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d105      	bne.n	8001070 <LED_flash_task_run+0x8c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800106a:	4806      	ldr	r0, [pc, #24]	@ (8001084 <LED_flash_task_run+0xa0>)
 800106c:	f002 fd4a 	bl	8003b04 <HAL_GPIO_WritePin>

	osSemaphoreRelease(myBinarySem01Handle);
 8001070:	4b07      	ldr	r3, [pc, #28]	@ (8001090 <LED_flash_task_run+0xac>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f007 fb13 	bl	80086a0 <osSemaphoreRelease>

	osDelay(100);  //100ms delay
 800107a:	2064      	movs	r0, #100	@ 0x64
 800107c:	f007 fa1a 	bl	80084b4 <osDelay>
  if(led_1_2_state == GPIO_PIN_SET)
 8001080:	e7c6      	b.n	8001010 <LED_flash_task_run+0x2c>
 8001082:	bf00      	nop
 8001084:	48000800 	.word	0x48000800
 8001088:	48000400 	.word	0x48000400
 800108c:	20000504 	.word	0x20000504
 8001090:	200004f4 	.word	0x200004f4
 8001094:	20000000 	.word	0x20000000
 8001098:	20000001 	.word	0x20000001

0800109c <UART_send_task_run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMyUartTask */
void UART_send_task_run(void *argument)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMyUartTask */
  /* Infinite loop */
  for(;;)
  {
	uint8_t dataOut;
	osStatus_t result = osMessageQueueGet(myDataQueueHandle, &dataOut, NULL, osWaitForever);
 80010a4:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <UART_send_task_run+0x34>)
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	f107 010b 	add.w	r1, r7, #11
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295
 80010b0:	2200      	movs	r2, #0
 80010b2:	f007 fc0d 	bl	80088d0 <osMessageQueueGet>
 80010b6:	60f8      	str	r0, [r7, #12]
	if(result == osOK)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f2      	bne.n	80010a4 <UART_send_task_run+0x8>
	{
		HAL_UART_Transmit (&huart1, (uint8_t *) &dataOut, sizeof(dataOut), 10);
 80010be:	f107 010b 	add.w	r1, r7, #11
 80010c2:	230a      	movs	r3, #10
 80010c4:	2201      	movs	r2, #1
 80010c6:	4803      	ldr	r0, [pc, #12]	@ (80010d4 <UART_send_task_run+0x38>)
 80010c8:	f006 f922 	bl	8007310 <HAL_UART_Transmit>
  {
 80010cc:	e7ea      	b.n	80010a4 <UART_send_task_run+0x8>
 80010ce:	bf00      	nop
 80010d0:	200004f0 	.word	0x200004f0
 80010d4:	20000320 	.word	0x20000320

080010d8 <UART_RX_task_run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMyCounterTask */
void UART_RX_task_run(void *argument)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMyCounterTask */
  /* Infinite loop */
  for(;;)
  {
	uint8_t received_data;
	HAL_UART_Receive(&huart1, &received_data, 1, 10);
 80010e0:	f107 010f 	add.w	r1, r7, #15
 80010e4:	230a      	movs	r3, #10
 80010e6:	2201      	movs	r2, #1
 80010e8:	481d      	ldr	r0, [pc, #116]	@ (8001160 <UART_RX_task_run+0x88>)
 80010ea:	f006 f99f 	bl	800742c <HAL_UART_Receive>
	if(received_data == 's')
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	2b73      	cmp	r3, #115	@ 0x73
 80010f2:	d113      	bne.n	800111c <UART_RX_task_run+0x44>
	{
		osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 80010f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <UART_RX_task_run+0x8c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	4618      	mov	r0, r3
 80010fe:	f007 fa7d 	bl	80085fc <osSemaphoreAcquire>
		acquisition_activated = 0;
 8001102:	4b19      	ldr	r3, [pc, #100]	@ (8001168 <UART_RX_task_run+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
		osSemaphoreRelease(myBinarySem01Handle);
 8001108:	4b16      	ldr	r3, [pc, #88]	@ (8001164 <UART_RX_task_run+0x8c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f007 fac7 	bl	80086a0 <osSemaphoreRelease>
		osThreadResume(myADC_Cmd_TaskHandle);
 8001112:	4b16      	ldr	r3, [pc, #88]	@ (800116c <UART_RX_task_run+0x94>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f007 f9ab 	bl	8008472 <osThreadResume>
	}
	if(received_data == 'x')
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	2b78      	cmp	r3, #120	@ 0x78
 8001120:	d119      	bne.n	8001156 <UART_RX_task_run+0x7e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001128:	4811      	ldr	r0, [pc, #68]	@ (8001170 <UART_RX_task_run+0x98>)
 800112a:	f002 fceb 	bl	8003b04 <HAL_GPIO_WritePin>
		osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 800112e:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <UART_RX_task_run+0x8c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f04f 31ff 	mov.w	r1, #4294967295
 8001136:	4618      	mov	r0, r3
 8001138:	f007 fa60 	bl	80085fc <osSemaphoreAcquire>
		acquisition_activated = 1;
 800113c:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <UART_RX_task_run+0x90>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
		osSemaphoreRelease(myBinarySem01Handle);
 8001142:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <UART_RX_task_run+0x8c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f007 faaa 	bl	80086a0 <osSemaphoreRelease>
		osThreadSuspend(myADC_Cmd_TaskHandle);
 800114c:	4b07      	ldr	r3, [pc, #28]	@ (800116c <UART_RX_task_run+0x94>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f007 f96d 	bl	8008430 <osThreadSuspend>
	}
	osDelay(200);
 8001156:	20c8      	movs	r0, #200	@ 0xc8
 8001158:	f007 f9ac 	bl	80084b4 <osDelay>
  {
 800115c:	e7c0      	b.n	80010e0 <UART_RX_task_run+0x8>
 800115e:	bf00      	nop
 8001160:	20000320 	.word	0x20000320
 8001164:	200004f4 	.word	0x200004f4
 8001168:	20000000 	.word	0x20000000
 800116c:	200004e8 	.word	0x200004e8
 8001170:	48000400 	.word	0x48000400

08001174 <TEMP_Read>:
  /* USER CODE END StartMyCounterTask */
}


void TEMP_Read(void *argument)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	for(;;){
		temp_value = BSP_TSENSOR_ReadTemp();
 800117c:	f000 feb4 	bl	8001ee8 <BSP_TSENSOR_ReadTemp>
 8001180:	eef0 7a40 	vmov.f32	s15, s0
 8001184:	4b20      	ldr	r3, [pc, #128]	@ (8001208 <TEMP_Read+0x94>)
 8001186:	edc3 7a00 	vstr	s15, [r3]
		uint8_t encoded_temp = (uint8_t) (temp_value/2);
 800118a:	4b1f      	ldr	r3, [pc, #124]	@ (8001208 <TEMP_Read+0x94>)
 800118c:	ed93 7a00 	vldr	s14, [r3]
 8001190:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001194:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001198:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800119c:	edc7 7a00 	vstr	s15, [r7]
 80011a0:	783b      	ldrb	r3, [r7, #0]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	72fb      	strb	r3, [r7, #11]
		encoded_temp |= TEMPERATURE_CHANNEL_MASK;
 80011a6:	7afb      	ldrb	r3, [r7, #11]
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	72fb      	strb	r3, [r7, #11]
		osMessageQueuePut(myDataQueueHandle, &encoded_temp, 1, 10);
 80011b0:	4b16      	ldr	r3, [pc, #88]	@ (800120c <TEMP_Read+0x98>)
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	f107 010b 	add.w	r1, r7, #11
 80011b8:	230a      	movs	r3, #10
 80011ba:	2201      	movs	r2, #1
 80011bc:	f007 fb28 	bl	8008810 <osMessageQueuePut>

		if(osMessageQueueGetSpace(myDataQueueHandle) == 0)
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <TEMP_Read+0x98>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f007 fbe1 	bl	800898c <osMessageQueueGetSpace>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d105      	bne.n	80011dc <TEMP_Read+0x68>
		  {
			osSemaphoreRelease(alarmSemaphoreHandle);
 80011d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <TEMP_Read+0x9c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f007 fa63 	bl	80086a0 <osSemaphoreRelease>
 80011da:	e010      	b.n	80011fe <TEMP_Read+0x8a>
		  }
		  else
		  {
			osStatus_t result = osMessageQueuePut(myDataQueueHandle, &encoded_temp, 1, 10);
 80011dc:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <TEMP_Read+0x98>)
 80011de:	6818      	ldr	r0, [r3, #0]
 80011e0:	f107 010b 	add.w	r1, r7, #11
 80011e4:	230a      	movs	r3, #10
 80011e6:	2201      	movs	r2, #1
 80011e8:	f007 fb12 	bl	8008810 <osMessageQueuePut>
 80011ec:	60f8      	str	r0, [r7, #12]
			if(result != osOK)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d004      	beq.n	80011fe <TEMP_Read+0x8a>
			{
				osSemaphoreRelease(alarmSemaphoreHandle);
 80011f4:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <TEMP_Read+0x9c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f007 fa51 	bl	80086a0 <osSemaphoreRelease>
			}
		  }
		osDelay(500);
 80011fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001202:	f007 f957 	bl	80084b4 <osDelay>
	for(;;){
 8001206:	e7b9      	b.n	800117c <TEMP_Read+0x8>
 8001208:	20000500 	.word	0x20000500
 800120c:	200004f0 	.word	0x200004f0
 8001210:	200004f8 	.word	0x200004f8

08001214 <ADC_CMD_task_run>:
	}
}

#define SOUND_CHANNEL_MASK  0xFE  // 1111 1110
void ADC_CMD_task_run(void *argument)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  for(;;)
  {
      HAL_ADC_Start(&hadc1);
 800121c:	481d      	ldr	r0, [pc, #116]	@ (8001294 <ADC_CMD_task_run+0x80>)
 800121e:	f001 fa7d 	bl	800271c <HAL_ADC_Start>

      // Wait for conversion to complete (blocking)
      if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001222:	f04f 31ff 	mov.w	r1, #4294967295
 8001226:	481b      	ldr	r0, [pc, #108]	@ (8001294 <ADC_CMD_task_run+0x80>)
 8001228:	f001 fadb 	bl	80027e2 <HAL_ADC_PollForConversion>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d12b      	bne.n	800128a <ADC_CMD_task_run+0x76>
          // Read ADC value
          uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 8001232:	4818      	ldr	r0, [pc, #96]	@ (8001294 <ADC_CMD_task_run+0x80>)
 8001234:	f001 fb64 	bl	8002900 <HAL_ADC_GetValue>
 8001238:	6178      	str	r0, [r7, #20]
          uint8_t encoded_sound = (uint8_t) (adc_value/2);
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	085b      	lsrs	r3, r3, #1
 800123e:	b2db      	uxtb	r3, r3
 8001240:	73fb      	strb	r3, [r7, #15]
          encoded_sound &= SOUND_CHANNEL_MASK;
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	f023 0301 	bic.w	r3, r3, #1
 8001248:	b2db      	uxtb	r3, r3
 800124a:	73fb      	strb	r3, [r7, #15]
          if(osMessageQueueGetSpace(myDataQueueHandle) == 0)
 800124c:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <ADC_CMD_task_run+0x84>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f007 fb9b 	bl	800898c <osMessageQueueGetSpace>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d105      	bne.n	8001268 <ADC_CMD_task_run+0x54>
          {
        	  osSemaphoreRelease(alarmSemaphoreHandle);
 800125c:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <ADC_CMD_task_run+0x88>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f007 fa1d 	bl	80086a0 <osSemaphoreRelease>
 8001266:	e010      	b.n	800128a <ADC_CMD_task_run+0x76>
          }
          else
          {
        	 osStatus_t result = osMessageQueuePut(myDataQueueHandle, &encoded_sound, 1, 10);
 8001268:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <ADC_CMD_task_run+0x84>)
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	f107 010f 	add.w	r1, r7, #15
 8001270:	230a      	movs	r3, #10
 8001272:	2201      	movs	r2, #1
 8001274:	f007 facc 	bl	8008810 <osMessageQueuePut>
 8001278:	6138      	str	r0, [r7, #16]
        	 if(result != osOK)
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d004      	beq.n	800128a <ADC_CMD_task_run+0x76>
        	 {
        		 osSemaphoreRelease(alarmSemaphoreHandle);
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <ADC_CMD_task_run+0x88>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f007 fa0b 	bl	80086a0 <osSemaphoreRelease>

        	 }
          }
      }
	osDelay(2);
 800128a:	2002      	movs	r0, #2
 800128c:	f007 f912 	bl	80084b4 <osDelay>
      HAL_ADC_Start(&hadc1);
 8001290:	e7c4      	b.n	800121c <ADC_CMD_task_run+0x8>
 8001292:	bf00      	nop
 8001294:	20000090 	.word	0x20000090
 8001298:	200004f0 	.word	0x200004f0
 800129c:	200004f8 	.word	0x200004f8

080012a0 <AlarmMsgQ>:
  }
}

void AlarmMsgQ(void *argument) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
    for (;;) {

        osSemaphoreAcquire(alarmSemaphoreHandle, osWaitForever);
 80012a8:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <AlarmMsgQ+0x20>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295
 80012b0:	4618      	mov	r0, r3
 80012b2:	f007 f9a3 	bl	80085fc <osSemaphoreAcquire>

        queue_overflow_detected = 0;
 80012b6:	4b03      	ldr	r3, [pc, #12]	@ (80012c4 <AlarmMsgQ+0x24>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
        osSemaphoreAcquire(alarmSemaphoreHandle, osWaitForever);
 80012bc:	bf00      	nop
 80012be:	e7f3      	b.n	80012a8 <AlarmMsgQ+0x8>
 80012c0:	200004f8 	.word	0x200004f8
 80012c4:	20000001 	.word	0x20000001

080012c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a04      	ldr	r2, [pc, #16]	@ (80012e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d101      	bne.n	80012de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012da:	f000 fedf 	bl	800209c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40001000 	.word	0x40001000

080012ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f0:	b672      	cpsid	i
}
 80012f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <Error_Handler+0x8>

080012f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <HAL_MspInit+0x4c>)
 8001300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001302:	4a10      	ldr	r2, [pc, #64]	@ (8001344 <HAL_MspInit+0x4c>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6613      	str	r3, [r2, #96]	@ 0x60
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <HAL_MspInit+0x4c>)
 800130c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <HAL_MspInit+0x4c>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131a:	4a0a      	ldr	r2, [pc, #40]	@ (8001344 <HAL_MspInit+0x4c>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001320:	6593      	str	r3, [r2, #88]	@ 0x58
 8001322:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <HAL_MspInit+0x4c>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	210f      	movs	r1, #15
 8001332:	f06f 0001 	mvn.w	r0, #1
 8001336:	f002 f82b 	bl	8003390 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000

08001348 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	@ 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a15      	ldr	r2, [pc, #84]	@ (80013bc <HAL_ADC_MspInit+0x74>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d123      	bne.n	80013b2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800136a:	4b15      	ldr	r3, [pc, #84]	@ (80013c0 <HAL_ADC_MspInit+0x78>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	4a14      	ldr	r2, [pc, #80]	@ (80013c0 <HAL_ADC_MspInit+0x78>)
 8001370:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001376:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <HAL_ADC_MspInit+0x78>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <HAL_ADC_MspInit+0x78>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	4a0e      	ldr	r2, [pc, #56]	@ (80013c0 <HAL_ADC_MspInit+0x78>)
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138e:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <HAL_ADC_MspInit+0x78>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800139a:	233f      	movs	r3, #63	@ 0x3f
 800139c:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800139e:	230b      	movs	r3, #11
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <HAL_ADC_MspInit+0x7c>)
 80013ae:	f002 f925 	bl	80035fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013b2:	bf00      	nop
 80013b4:	3728      	adds	r7, #40	@ 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	50040000 	.word	0x50040000
 80013c0:	40021000 	.word	0x40021000
 80013c4:	48000800 	.word	0x48000800

080013c8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b0ae      	sub	sp, #184	@ 0xb8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	2294      	movs	r2, #148	@ 0x94
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f00a fd1d 	bl	800be28 <memset>
  if(DFSDM1_Init == 0)
 80013ee:	4b25      	ldr	r3, [pc, #148]	@ (8001484 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d142      	bne.n	800147c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80013f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4618      	mov	r0, r3
 8001408:	f004 feb4 	bl	8006174 <HAL_RCCEx_PeriphCLKConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001412:	f7ff ff6b 	bl	80012ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001416:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141a:	4a1b      	ldr	r2, [pc, #108]	@ (8001488 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800141c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001420:	6613      	str	r3, [r2, #96]	@ 0x60
 8001422:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001426:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800142e:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001432:	4a15      	ldr	r2, [pc, #84]	@ (8001488 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001434:	f043 0310 	orr.w	r3, r3, #16
 8001438:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143a:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	f003 0310 	and.w	r3, r3, #16
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001446:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800144a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001460:	2306      	movs	r3, #6
 8001462:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001466:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800146a:	4619      	mov	r1, r3
 800146c:	4807      	ldr	r0, [pc, #28]	@ (800148c <HAL_DFSDM_ChannelMspInit+0xc4>)
 800146e:	f002 f8c5 	bl	80035fc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001472:	4b04      	ldr	r3, [pc, #16]	@ (8001484 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	4a02      	ldr	r2, [pc, #8]	@ (8001484 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800147a:	6013      	str	r3, [r2, #0]
  }

}
 800147c:	bf00      	nop
 800147e:	37b8      	adds	r7, #184	@ 0xb8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000508 	.word	0x20000508
 8001488:	40021000 	.word	0x40021000
 800148c:	48001000 	.word	0x48001000

08001490 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b0b0      	sub	sp, #192	@ 0xc0
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a8:	f107 0318 	add.w	r3, r7, #24
 80014ac:	2294      	movs	r2, #148	@ 0x94
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f00a fcb9 	bl	800be28 <memset>
  if(hi2c->Instance==I2C1)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a42      	ldr	r2, [pc, #264]	@ (80015c4 <HAL_I2C_MspInit+0x134>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d13c      	bne.n	800153a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014c0:	2340      	movs	r3, #64	@ 0x40
 80014c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c8:	f107 0318 	add.w	r3, r7, #24
 80014cc:	4618      	mov	r0, r3
 80014ce:	f004 fe51 	bl	8006174 <HAL_RCCEx_PeriphCLKConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80014d8:	f7ff ff08 	bl	80012ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014dc:	4b3a      	ldr	r3, [pc, #232]	@ (80015c8 <HAL_I2C_MspInit+0x138>)
 80014de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e0:	4a39      	ldr	r2, [pc, #228]	@ (80015c8 <HAL_I2C_MspInit+0x138>)
 80014e2:	f043 0302 	orr.w	r3, r3, #2
 80014e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e8:	4b37      	ldr	r3, [pc, #220]	@ (80015c8 <HAL_I2C_MspInit+0x138>)
 80014ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80014f4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fc:	2312      	movs	r3, #18
 80014fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001502:	2301      	movs	r3, #1
 8001504:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800150e:	2304      	movs	r3, #4
 8001510:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001518:	4619      	mov	r1, r3
 800151a:	482c      	ldr	r0, [pc, #176]	@ (80015cc <HAL_I2C_MspInit+0x13c>)
 800151c:	f002 f86e 	bl	80035fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001520:	4b29      	ldr	r3, [pc, #164]	@ (80015c8 <HAL_I2C_MspInit+0x138>)
 8001522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001524:	4a28      	ldr	r2, [pc, #160]	@ (80015c8 <HAL_I2C_MspInit+0x138>)
 8001526:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800152a:	6593      	str	r3, [r2, #88]	@ 0x58
 800152c:	4b26      	ldr	r3, [pc, #152]	@ (80015c8 <HAL_I2C_MspInit+0x138>)
 800152e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001530:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001538:	e040      	b.n	80015bc <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a24      	ldr	r2, [pc, #144]	@ (80015d0 <HAL_I2C_MspInit+0x140>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d13b      	bne.n	80015bc <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001544:	2380      	movs	r3, #128	@ 0x80
 8001546:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001548:	2300      	movs	r3, #0
 800154a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800154c:	f107 0318 	add.w	r3, r7, #24
 8001550:	4618      	mov	r0, r3
 8001552:	f004 fe0f 	bl	8006174 <HAL_RCCEx_PeriphCLKConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 800155c:	f7ff fec6 	bl	80012ec <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001560:	4b19      	ldr	r3, [pc, #100]	@ (80015c8 <HAL_I2C_MspInit+0x138>)
 8001562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001564:	4a18      	ldr	r2, [pc, #96]	@ (80015c8 <HAL_I2C_MspInit+0x138>)
 8001566:	f043 0302 	orr.w	r3, r3, #2
 800156a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156c:	4b16      	ldr	r3, [pc, #88]	@ (80015c8 <HAL_I2C_MspInit+0x138>)
 800156e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001578:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800157c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001580:	2312      	movs	r3, #18
 8001582:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001586:	2301      	movs	r3, #1
 8001588:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158c:	2303      	movs	r3, #3
 800158e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001592:	2304      	movs	r3, #4
 8001594:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001598:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800159c:	4619      	mov	r1, r3
 800159e:	480b      	ldr	r0, [pc, #44]	@ (80015cc <HAL_I2C_MspInit+0x13c>)
 80015a0:	f002 f82c 	bl	80035fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015a4:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <HAL_I2C_MspInit+0x138>)
 80015a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a8:	4a07      	ldr	r2, [pc, #28]	@ (80015c8 <HAL_I2C_MspInit+0x138>)
 80015aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80015b0:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <HAL_I2C_MspInit+0x138>)
 80015b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]
}
 80015bc:	bf00      	nop
 80015be:	37c0      	adds	r7, #192	@ 0xc0
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40005400 	.word	0x40005400
 80015c8:	40021000 	.word	0x40021000
 80015cc:	48000400 	.word	0x48000400
 80015d0:	40005800 	.word	0x40005800

080015d4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a16      	ldr	r2, [pc, #88]	@ (800163c <HAL_I2C_MspDeInit+0x68>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d110      	bne.n	8001608 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80015e6:	4b16      	ldr	r3, [pc, #88]	@ (8001640 <HAL_I2C_MspDeInit+0x6c>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ea:	4a15      	ldr	r2, [pc, #84]	@ (8001640 <HAL_I2C_MspDeInit+0x6c>)
 80015ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80015f0:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 80015f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015f6:	4813      	ldr	r0, [pc, #76]	@ (8001644 <HAL_I2C_MspDeInit+0x70>)
 80015f8:	f002 f992 	bl	8003920 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 80015fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001600:	4810      	ldr	r0, [pc, #64]	@ (8001644 <HAL_I2C_MspDeInit+0x70>)
 8001602:	f002 f98d 	bl	8003920 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001606:	e014      	b.n	8001632 <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0e      	ldr	r2, [pc, #56]	@ (8001648 <HAL_I2C_MspDeInit+0x74>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d10f      	bne.n	8001632 <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001612:	4b0b      	ldr	r3, [pc, #44]	@ (8001640 <HAL_I2C_MspDeInit+0x6c>)
 8001614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <HAL_I2C_MspDeInit+0x6c>)
 8001618:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800161c:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 800161e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001622:	4808      	ldr	r0, [pc, #32]	@ (8001644 <HAL_I2C_MspDeInit+0x70>)
 8001624:	f002 f97c 	bl	8003920 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001628:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800162c:	4805      	ldr	r0, [pc, #20]	@ (8001644 <HAL_I2C_MspDeInit+0x70>)
 800162e:	f002 f977 	bl	8003920 <HAL_GPIO_DeInit>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40005400 	.word	0x40005400
 8001640:	40021000 	.word	0x40021000
 8001644:	48000400 	.word	0x48000400
 8001648:	40005800 	.word	0x40005800

0800164c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b0b0      	sub	sp, #192	@ 0xc0
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001664:	f107 0318 	add.w	r3, r7, #24
 8001668:	2294      	movs	r2, #148	@ 0x94
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f00a fbdb 	bl	800be28 <memset>
  if(hospi->Instance==OCTOSPI1)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a28      	ldr	r2, [pc, #160]	@ (8001718 <HAL_OSPI_MspInit+0xcc>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d149      	bne.n	8001710 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800167c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001680:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001682:	2300      	movs	r3, #0
 8001684:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001688:	f107 0318 	add.w	r3, r7, #24
 800168c:	4618      	mov	r0, r3
 800168e:	f004 fd71 	bl	8006174 <HAL_RCCEx_PeriphCLKConfig>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001698:	f7ff fe28 	bl	80012ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 800169c:	4b1f      	ldr	r3, [pc, #124]	@ (800171c <HAL_OSPI_MspInit+0xd0>)
 800169e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a0:	4a1e      	ldr	r2, [pc, #120]	@ (800171c <HAL_OSPI_MspInit+0xd0>)
 80016a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80016a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016a8:	4b1c      	ldr	r3, [pc, #112]	@ (800171c <HAL_OSPI_MspInit+0xd0>)
 80016aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80016b4:	4b19      	ldr	r3, [pc, #100]	@ (800171c <HAL_OSPI_MspInit+0xd0>)
 80016b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016b8:	4a18      	ldr	r2, [pc, #96]	@ (800171c <HAL_OSPI_MspInit+0xd0>)
 80016ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016be:	6513      	str	r3, [r2, #80]	@ 0x50
 80016c0:	4b16      	ldr	r3, [pc, #88]	@ (800171c <HAL_OSPI_MspInit+0xd0>)
 80016c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016cc:	4b13      	ldr	r3, [pc, #76]	@ (800171c <HAL_OSPI_MspInit+0xd0>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d0:	4a12      	ldr	r2, [pc, #72]	@ (800171c <HAL_OSPI_MspInit+0xd0>)
 80016d2:	f043 0310 	orr.w	r3, r3, #16
 80016d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d8:	4b10      	ldr	r3, [pc, #64]	@ (800171c <HAL_OSPI_MspInit+0xd0>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016dc:	f003 0310 	and.w	r3, r3, #16
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80016e4:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80016e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80016fe:	230a      	movs	r3, #10
 8001700:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001704:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001708:	4619      	mov	r1, r3
 800170a:	4805      	ldr	r0, [pc, #20]	@ (8001720 <HAL_OSPI_MspInit+0xd4>)
 800170c:	f001 ff76 	bl	80035fc <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001710:	bf00      	nop
 8001712:	37c0      	adds	r7, #192	@ 0xc0
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	a0001000 	.word	0xa0001000
 800171c:	40021000 	.word	0x40021000
 8001720:	48001000 	.word	0x48001000

08001724 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	@ 0x28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a17      	ldr	r2, [pc, #92]	@ (80017a0 <HAL_SPI_MspInit+0x7c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d128      	bne.n	8001798 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001746:	4b17      	ldr	r3, [pc, #92]	@ (80017a4 <HAL_SPI_MspInit+0x80>)
 8001748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174a:	4a16      	ldr	r2, [pc, #88]	@ (80017a4 <HAL_SPI_MspInit+0x80>)
 800174c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001750:	6593      	str	r3, [r2, #88]	@ 0x58
 8001752:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <HAL_SPI_MspInit+0x80>)
 8001754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001756:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800175e:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <HAL_SPI_MspInit+0x80>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001762:	4a10      	ldr	r2, [pc, #64]	@ (80017a4 <HAL_SPI_MspInit+0x80>)
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800176a:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <HAL_SPI_MspInit+0x80>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001776:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800177a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001784:	2303      	movs	r3, #3
 8001786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001788:	2306      	movs	r3, #6
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4619      	mov	r1, r3
 8001792:	4805      	ldr	r0, [pc, #20]	@ (80017a8 <HAL_SPI_MspInit+0x84>)
 8001794:	f001 ff32 	bl	80035fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001798:	bf00      	nop
 800179a:	3728      	adds	r7, #40	@ 0x28
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40003c00 	.word	0x40003c00
 80017a4:	40021000 	.word	0x40021000
 80017a8:	48000800 	.word	0x48000800

080017ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b0b4      	sub	sp, #208	@ 0xd0
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017c8:	2294      	movs	r2, #148	@ 0x94
 80017ca:	2100      	movs	r1, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f00a fb2b 	bl	800be28 <memset>
  if(huart->Instance==UART4)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a83      	ldr	r2, [pc, #524]	@ (80019e4 <HAL_UART_MspInit+0x238>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d13c      	bne.n	8001856 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80017dc:	2308      	movs	r3, #8
 80017de:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017e8:	4618      	mov	r0, r3
 80017ea:	f004 fcc3 	bl	8006174 <HAL_RCCEx_PeriphCLKConfig>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017f4:	f7ff fd7a 	bl	80012ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80017f8:	4b7b      	ldr	r3, [pc, #492]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 80017fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fc:	4a7a      	ldr	r2, [pc, #488]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 80017fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001802:	6593      	str	r3, [r2, #88]	@ 0x58
 8001804:	4b78      	ldr	r3, [pc, #480]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 8001806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001808:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800180c:	627b      	str	r3, [r7, #36]	@ 0x24
 800180e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001810:	4b75      	ldr	r3, [pc, #468]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 8001812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001814:	4a74      	ldr	r2, [pc, #464]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800181c:	4b72      	ldr	r3, [pc, #456]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 800181e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	623b      	str	r3, [r7, #32]
 8001826:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001828:	2303      	movs	r3, #3
 800182a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183a:	2303      	movs	r3, #3
 800183c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001840:	2308      	movs	r3, #8
 8001842:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001846:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800184a:	4619      	mov	r1, r3
 800184c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001850:	f001 fed4 	bl	80035fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001854:	e0c2      	b.n	80019dc <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a64      	ldr	r2, [pc, #400]	@ (80019ec <HAL_UART_MspInit+0x240>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d13b      	bne.n	80018d8 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001860:	2301      	movs	r3, #1
 8001862:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001864:	2300      	movs	r3, #0
 8001866:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001868:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800186c:	4618      	mov	r0, r3
 800186e:	f004 fc81 	bl	8006174 <HAL_RCCEx_PeriphCLKConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001878:	f7ff fd38 	bl	80012ec <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800187c:	4b5a      	ldr	r3, [pc, #360]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 800187e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001880:	4a59      	ldr	r2, [pc, #356]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 8001882:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001886:	6613      	str	r3, [r2, #96]	@ 0x60
 8001888:	4b57      	ldr	r3, [pc, #348]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 800188a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800188c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001894:	4b54      	ldr	r3, [pc, #336]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 8001896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001898:	4a53      	ldr	r2, [pc, #332]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 800189a:	f043 0302 	orr.w	r3, r3, #2
 800189e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018a0:	4b51      	ldr	r3, [pc, #324]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 80018a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80018ac:	23c0      	movs	r3, #192	@ 0xc0
 80018ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018be:	2303      	movs	r3, #3
 80018c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018c4:	2307      	movs	r3, #7
 80018c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ca:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80018ce:	4619      	mov	r1, r3
 80018d0:	4847      	ldr	r0, [pc, #284]	@ (80019f0 <HAL_UART_MspInit+0x244>)
 80018d2:	f001 fe93 	bl	80035fc <HAL_GPIO_Init>
}
 80018d6:	e081      	b.n	80019dc <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a45      	ldr	r2, [pc, #276]	@ (80019f4 <HAL_UART_MspInit+0x248>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d13b      	bne.n	800195a <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018e2:	2302      	movs	r3, #2
 80018e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018e6:	2300      	movs	r3, #0
 80018e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018ee:	4618      	mov	r0, r3
 80018f0:	f004 fc40 	bl	8006174 <HAL_RCCEx_PeriphCLKConfig>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_UART_MspInit+0x152>
      Error_Handler();
 80018fa:	f7ff fcf7 	bl	80012ec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018fe:	4b3a      	ldr	r3, [pc, #232]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 8001900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001902:	4a39      	ldr	r2, [pc, #228]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 8001904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001908:	6593      	str	r3, [r2, #88]	@ 0x58
 800190a:	4b37      	ldr	r3, [pc, #220]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 800190c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001916:	4b34      	ldr	r3, [pc, #208]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191a:	4a33      	ldr	r2, [pc, #204]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 800191c:	f043 0308 	orr.w	r3, r3, #8
 8001920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001922:	4b31      	ldr	r3, [pc, #196]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800192e:	2378      	movs	r3, #120	@ 0x78
 8001930:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001946:	2307      	movs	r3, #7
 8001948:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800194c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001950:	4619      	mov	r1, r3
 8001952:	4829      	ldr	r0, [pc, #164]	@ (80019f8 <HAL_UART_MspInit+0x24c>)
 8001954:	f001 fe52 	bl	80035fc <HAL_GPIO_Init>
}
 8001958:	e040      	b.n	80019dc <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a27      	ldr	r2, [pc, #156]	@ (80019fc <HAL_UART_MspInit+0x250>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d13b      	bne.n	80019dc <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001964:	2304      	movs	r3, #4
 8001966:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001968:	2300      	movs	r3, #0
 800196a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800196c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001970:	4618      	mov	r0, r3
 8001972:	f004 fbff 	bl	8006174 <HAL_RCCEx_PeriphCLKConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800197c:	f7ff fcb6 	bl	80012ec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001980:	4b19      	ldr	r3, [pc, #100]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001984:	4a18      	ldr	r2, [pc, #96]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 8001986:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800198a:	6593      	str	r3, [r2, #88]	@ 0x58
 800198c:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 800198e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001990:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001998:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 800199a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199c:	4a12      	ldr	r2, [pc, #72]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 800199e:	f043 0308 	orr.w	r3, r3, #8
 80019a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019a4:	4b10      	ldr	r3, [pc, #64]	@ (80019e8 <HAL_UART_MspInit+0x23c>)
 80019a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80019b0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019b4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c4:	2303      	movs	r3, #3
 80019c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019ca:	2307      	movs	r3, #7
 80019cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019d0:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80019d4:	4619      	mov	r1, r3
 80019d6:	4808      	ldr	r0, [pc, #32]	@ (80019f8 <HAL_UART_MspInit+0x24c>)
 80019d8:	f001 fe10 	bl	80035fc <HAL_GPIO_Init>
}
 80019dc:	bf00      	nop
 80019de:	37d0      	adds	r7, #208	@ 0xd0
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40004c00 	.word	0x40004c00
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40013800 	.word	0x40013800
 80019f0:	48000400 	.word	0x48000400
 80019f4:	40004400 	.word	0x40004400
 80019f8:	48000c00 	.word	0x48000c00
 80019fc:	40004800 	.word	0x40004800

08001a00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08e      	sub	sp, #56	@ 0x38
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ae0 <HAL_InitTick+0xe0>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a12:	4a33      	ldr	r2, [pc, #204]	@ (8001ae0 <HAL_InitTick+0xe0>)
 8001a14:	f043 0310 	orr.w	r3, r3, #16
 8001a18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a1a:	4b31      	ldr	r3, [pc, #196]	@ (8001ae0 <HAL_InitTick+0xe0>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1e:	f003 0310 	and.w	r3, r3, #16
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a26:	f107 0210 	add.w	r2, r7, #16
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f004 faad 	bl	8005f90 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a36:	6a3b      	ldr	r3, [r7, #32]
 8001a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d103      	bne.n	8001a48 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a40:	f004 fa7a 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 8001a44:	6378      	str	r0, [r7, #52]	@ 0x34
 8001a46:	e004      	b.n	8001a52 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a48:	f004 fa76 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a54:	4a23      	ldr	r2, [pc, #140]	@ (8001ae4 <HAL_InitTick+0xe4>)
 8001a56:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5a:	0c9b      	lsrs	r3, r3, #18
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a60:	4b21      	ldr	r3, [pc, #132]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a62:	4a22      	ldr	r2, [pc, #136]	@ (8001aec <HAL_InitTick+0xec>)
 8001a64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a66:	4b20      	ldr	r3, [pc, #128]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a68:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a6c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a72:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a74:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a80:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a86:	4818      	ldr	r0, [pc, #96]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a88:	f005 f93f 	bl	8006d0a <HAL_TIM_Base_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001a92:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d11b      	bne.n	8001ad2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a9a:	4813      	ldr	r0, [pc, #76]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a9c:	f005 f996 	bl	8006dcc <HAL_TIM_Base_Start_IT>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001aa6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d111      	bne.n	8001ad2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001aae:	2036      	movs	r0, #54	@ 0x36
 8001ab0:	f001 fc8a 	bl	80033c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b0f      	cmp	r3, #15
 8001ab8:	d808      	bhi.n	8001acc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001aba:	2200      	movs	r2, #0
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	2036      	movs	r0, #54	@ 0x36
 8001ac0:	f001 fc66 	bl	8003390 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8001af0 <HAL_InitTick+0xf0>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	e002      	b.n	8001ad2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ad2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3738      	adds	r7, #56	@ 0x38
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	431bde83 	.word	0x431bde83
 8001ae8:	2000050c 	.word	0x2000050c
 8001aec:	40001000 	.word	0x40001000
 8001af0:	20000018 	.word	0x20000018

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <NMI_Handler+0x4>

08001afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <HardFault_Handler+0x4>

08001b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <MemManage_Handler+0x4>

08001b0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <BusFault_Handler+0x4>

08001b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <UsageFault_Handler+0x4>

08001b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001b2e:	2020      	movs	r0, #32
 8001b30:	f002 f800 	bl	8003b34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001b34:	2040      	movs	r0, #64	@ 0x40
 8001b36:	f001 fffd 	bl	8003b34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001b3a:	2080      	movs	r0, #128	@ 0x80
 8001b3c:	f001 fffa 	bl	8003b34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001b40:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001b44:	f001 fff6 	bl	8003b34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8001b50:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001b54:	f001 ffee 	bl	8003b34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001b58:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001b5c:	f001 ffea 	bl	8003b34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8001b60:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001b64:	f001 ffe6 	bl	8003b34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001b68:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b6c:	f001 ffe2 	bl	8003b34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001b70:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001b74:	f001 ffde 	bl	8003b34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001b78:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001b7c:	f001 ffda 	bl	8003b34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b88:	4802      	ldr	r0, [pc, #8]	@ (8001b94 <TIM6_DAC_IRQHandler+0x10>)
 8001b8a:	f005 f98f 	bl	8006eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	2000050c 	.word	0x2000050c

08001b98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <SystemInit+0x20>)
 8001b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ba2:	4a05      	ldr	r2, [pc, #20]	@ (8001bb8 <SystemInit+0x20>)
 8001ba4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ba8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bf4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bc0:	f7ff ffea 	bl	8001b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc4:	480c      	ldr	r0, [pc, #48]	@ (8001bf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bc6:	490d      	ldr	r1, [pc, #52]	@ (8001bfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c00 <LoopForever+0xe>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bcc:	e002      	b.n	8001bd4 <LoopCopyDataInit>

08001bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd2:	3304      	adds	r3, #4

08001bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd8:	d3f9      	bcc.n	8001bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bda:	4a0a      	ldr	r2, [pc, #40]	@ (8001c04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bdc:	4c0a      	ldr	r4, [pc, #40]	@ (8001c08 <LoopForever+0x16>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be0:	e001      	b.n	8001be6 <LoopFillZerobss>

08001be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be4:	3204      	adds	r2, #4

08001be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be8:	d3fb      	bcc.n	8001be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bea:	f00a f97b 	bl	800bee4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bee:	f7fe fc7f 	bl	80004f0 <main>

08001bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bf2:	e7fe      	b.n	8001bf2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bf4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bfc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c00:	0800c23c 	.word	0x0800c23c
  ldr r2, =_sbss
 8001c04:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001c08:	200020b8 	.word	0x200020b8

08001c0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c0c:	e7fe      	b.n	8001c0c <ADC1_IRQHandler>
	...

08001c10 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	@ 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001c18:	4b27      	ldr	r3, [pc, #156]	@ (8001cb8 <I2Cx_MspInit+0xa8>)
 8001c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1c:	4a26      	ldr	r2, [pc, #152]	@ (8001cb8 <I2Cx_MspInit+0xa8>)
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c24:	4b24      	ldr	r3, [pc, #144]	@ (8001cb8 <I2Cx_MspInit+0xa8>)
 8001c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001c30:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001c34:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001c36:	2312      	movs	r3, #18
 8001c38:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001c42:	2304      	movs	r3, #4
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	481b      	ldr	r0, [pc, #108]	@ (8001cbc <I2Cx_MspInit+0xac>)
 8001c4e:	f001 fcd5 	bl	80035fc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	4619      	mov	r1, r3
 8001c58:	4818      	ldr	r0, [pc, #96]	@ (8001cbc <I2Cx_MspInit+0xac>)
 8001c5a:	f001 fccf 	bl	80035fc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001c5e:	4b16      	ldr	r3, [pc, #88]	@ (8001cb8 <I2Cx_MspInit+0xa8>)
 8001c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c62:	4a15      	ldr	r2, [pc, #84]	@ (8001cb8 <I2Cx_MspInit+0xa8>)
 8001c64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c68:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c6a:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <I2Cx_MspInit+0xa8>)
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001c76:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <I2Cx_MspInit+0xa8>)
 8001c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb8 <I2Cx_MspInit+0xa8>)
 8001c7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c80:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001c82:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb8 <I2Cx_MspInit+0xa8>)
 8001c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c86:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb8 <I2Cx_MspInit+0xa8>)
 8001c88:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001c8c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	210f      	movs	r1, #15
 8001c92:	2021      	movs	r0, #33	@ 0x21
 8001c94:	f001 fb7c 	bl	8003390 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001c98:	2021      	movs	r0, #33	@ 0x21
 8001c9a:	f001 fb95 	bl	80033c8 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	210f      	movs	r1, #15
 8001ca2:	2022      	movs	r0, #34	@ 0x22
 8001ca4:	f001 fb74 	bl	8003390 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001ca8:	2022      	movs	r0, #34	@ 0x22
 8001caa:	f001 fb8d 	bl	80033c8 <HAL_NVIC_EnableIRQ>
}
 8001cae:	bf00      	nop
 8001cb0:	3728      	adds	r7, #40	@ 0x28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	48000400 	.word	0x48000400

08001cc0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a12      	ldr	r2, [pc, #72]	@ (8001d14 <I2Cx_Init+0x54>)
 8001ccc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a11      	ldr	r2, [pc, #68]	@ (8001d18 <I2Cx_Init+0x58>)
 8001cd2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ff89 	bl	8001c10 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f001 ff3b 	bl	8003b7a <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001d04:	2100      	movs	r1, #0
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f002 fce8 	bl	80046dc <HAL_I2CEx_ConfigAnalogFilter>
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40005800 	.word	0x40005800
 8001d18:	00702681 	.word	0x00702681

08001d1c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	@ 0x28
 8001d20:	af04      	add	r7, sp, #16
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	4608      	mov	r0, r1
 8001d26:	4611      	mov	r1, r2
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	72fb      	strb	r3, [r7, #11]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	813b      	strh	r3, [r7, #8]
 8001d32:	4613      	mov	r3, r2
 8001d34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d3a:	7afb      	ldrb	r3, [r7, #11]
 8001d3c:	b299      	uxth	r1, r3
 8001d3e:	88f8      	ldrh	r0, [r7, #6]
 8001d40:	893a      	ldrh	r2, [r7, #8]
 8001d42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d46:	9302      	str	r3, [sp, #8]
 8001d48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	4603      	mov	r3, r0
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f002 f8f0 	bl	8003f38 <HAL_I2C_Mem_Read>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001d5c:	7dfb      	ldrb	r3, [r7, #23]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d004      	beq.n	8001d6c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001d62:	7afb      	ldrb	r3, [r7, #11]
 8001d64:	4619      	mov	r1, r3
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 f832 	bl	8001dd0 <I2Cx_Error>
  }
  return status;
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b08a      	sub	sp, #40	@ 0x28
 8001d7a:	af04      	add	r7, sp, #16
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	4608      	mov	r0, r1
 8001d80:	4611      	mov	r1, r2
 8001d82:	461a      	mov	r2, r3
 8001d84:	4603      	mov	r3, r0
 8001d86:	72fb      	strb	r3, [r7, #11]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	813b      	strh	r3, [r7, #8]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d94:	7afb      	ldrb	r3, [r7, #11]
 8001d96:	b299      	uxth	r1, r3
 8001d98:	88f8      	ldrh	r0, [r7, #6]
 8001d9a:	893a      	ldrh	r2, [r7, #8]
 8001d9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001da0:	9302      	str	r3, [sp, #8]
 8001da2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	4603      	mov	r3, r0
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f001 ffaf 	bl	8003d10 <HAL_I2C_Mem_Write>
 8001db2:	4603      	mov	r3, r0
 8001db4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001db6:	7dfb      	ldrb	r3, [r7, #23]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d004      	beq.n	8001dc6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001dbc:	7afb      	ldrb	r3, [r7, #11]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 f805 	bl	8001dd0 <I2Cx_Error>
  }
  return status;
 8001dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f001 ff67 	bl	8003cb0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ff6c 	bl	8001cc0 <I2Cx_Init>
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001df4:	4802      	ldr	r0, [pc, #8]	@ (8001e00 <SENSOR_IO_Init+0x10>)
 8001df6:	f7ff ff63 	bl	8001cc0 <I2Cx_Init>
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000558 	.word	0x20000558

08001e04 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af02      	add	r7, sp, #8
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	71bb      	strb	r3, [r7, #6]
 8001e12:	4613      	mov	r3, r2
 8001e14:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001e16:	79bb      	ldrb	r3, [r7, #6]
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	79f9      	ldrb	r1, [r7, #7]
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	9301      	str	r3, [sp, #4]
 8001e20:	1d7b      	adds	r3, r7, #5
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	2301      	movs	r3, #1
 8001e26:	4803      	ldr	r0, [pc, #12]	@ (8001e34 <SENSOR_IO_Write+0x30>)
 8001e28:	f7ff ffa5 	bl	8001d76 <I2Cx_WriteMultiple>
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000558 	.word	0x20000558

08001e38 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af02      	add	r7, sp, #8
 8001e3e:	4603      	mov	r3, r0
 8001e40:	460a      	mov	r2, r1
 8001e42:	71fb      	strb	r3, [r7, #7]
 8001e44:	4613      	mov	r3, r2
 8001e46:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001e4c:	79bb      	ldrb	r3, [r7, #6]
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	79f9      	ldrb	r1, [r7, #7]
 8001e52:	2301      	movs	r3, #1
 8001e54:	9301      	str	r3, [sp, #4]
 8001e56:	f107 030f 	add.w	r3, r7, #15
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	4804      	ldr	r0, [pc, #16]	@ (8001e70 <SENSOR_IO_Read+0x38>)
 8001e60:	f7ff ff5c 	bl	8001d1c <I2Cx_ReadMultiple>

  return read_value;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000558 	.word	0x20000558

08001e74 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af02      	add	r7, sp, #8
 8001e7a:	603a      	str	r2, [r7, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
 8001e82:	460b      	mov	r3, r1
 8001e84:	71bb      	strb	r3, [r7, #6]
 8001e86:	4613      	mov	r3, r2
 8001e88:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001e8a:	79bb      	ldrb	r3, [r7, #6]
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	79f9      	ldrb	r1, [r7, #7]
 8001e90:	88bb      	ldrh	r3, [r7, #4]
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	2301      	movs	r3, #1
 8001e9a:	4804      	ldr	r0, [pc, #16]	@ (8001eac <SENSOR_IO_ReadMultiple+0x38>)
 8001e9c:	f7ff ff3e 	bl	8001d1c <I2Cx_ReadMultiple>
 8001ea0:	4603      	mov	r3, r0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000558 	.word	0x20000558

08001eb0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001eba:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <BSP_TSENSOR_Init+0x30>)
 8001ebc:	4a09      	ldr	r2, [pc, #36]	@ (8001ee4 <BSP_TSENSOR_Init+0x34>)
 8001ebe:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001ec0:	f7ff ff96 	bl	8001df0 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <BSP_TSENSOR_Init+0x30>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2100      	movs	r1, #0
 8001ecc:	20be      	movs	r0, #190	@ 0xbe
 8001ece:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200005ac 	.word	0x200005ac
 8001ee4:	20000008 	.word	0x20000008

08001ee8 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001eec:	4b04      	ldr	r3, [pc, #16]	@ (8001f00 <BSP_TSENSOR_ReadTemp+0x18>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	20be      	movs	r0, #190	@ 0xbe
 8001ef4:	4798      	blx	r3
 8001ef6:	eef0 7a40 	vmov.f32	s15, s0
}
 8001efa:	eeb0 0a67 	vmov.f32	s0, s15
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	200005ac 	.word	0x200005ac

08001f04 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	6039      	str	r1, [r7, #0]
 8001f0e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2120      	movs	r1, #32
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ff8e 	bl	8001e38 <SENSOR_IO_Read>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	f023 0304 	bic.w	r3, r3, #4
 8001f26:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	f043 0304 	orr.w	r3, r3, #4
 8001f2e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	f023 0303 	bic.w	r3, r3, #3
 8001f36:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f46:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	2120      	movs	r1, #32
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff ff57 	bl	8001e04 <SENSOR_IO_Write>
}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b088      	sub	sp, #32
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	4603      	mov	r3, r0
 8001f66:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	b2d8      	uxtb	r0, r3
 8001f6c:	f107 0208 	add.w	r2, r7, #8
 8001f70:	2302      	movs	r3, #2
 8001f72:	21b2      	movs	r1, #178	@ 0xb2
 8001f74:	f7ff ff7e 	bl	8001e74 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2135      	movs	r1, #53	@ 0x35
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ff5a 	bl	8001e38 <SENSOR_IO_Read>
 8001f84:	4603      	mov	r3, r0
 8001f86:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001f88:	7ffb      	ldrb	r3, [r7, #31]
 8001f8a:	021b      	lsls	r3, r3, #8
 8001f8c:	b21b      	sxth	r3, r3
 8001f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f92:	b21a      	sxth	r2, r3
 8001f94:	7a3b      	ldrb	r3, [r7, #8]
 8001f96:	b21b      	sxth	r3, r3
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001f9c:	7ffb      	ldrb	r3, [r7, #31]
 8001f9e:	019b      	lsls	r3, r3, #6
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fa6:	b21a      	sxth	r2, r3
 8001fa8:	7a7b      	ldrb	r3, [r7, #9]
 8001faa:	b21b      	sxth	r3, r3
 8001fac:	4313      	orrs	r3, r2
 8001fae:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001fb0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fb4:	10db      	asrs	r3, r3, #3
 8001fb6:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001fb8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001fbc:	10db      	asrs	r3, r3, #3
 8001fbe:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001fc0:	88fb      	ldrh	r3, [r7, #6]
 8001fc2:	b2d8      	uxtb	r0, r3
 8001fc4:	f107 0208 	add.w	r2, r7, #8
 8001fc8:	2304      	movs	r3, #4
 8001fca:	21bc      	movs	r1, #188	@ 0xbc
 8001fcc:	f7ff ff52 	bl	8001e74 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001fd0:	7a7b      	ldrb	r3, [r7, #9]
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	b21a      	sxth	r2, r3
 8001fd6:	7a3b      	ldrb	r3, [r7, #8]
 8001fd8:	b21b      	sxth	r3, r3
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001fde:	7afb      	ldrb	r3, [r7, #11]
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	b21a      	sxth	r2, r3
 8001fe4:	7abb      	ldrb	r3, [r7, #10]
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001fec:	88fb      	ldrh	r3, [r7, #6]
 8001fee:	b2d8      	uxtb	r0, r3
 8001ff0:	f107 0208 	add.w	r2, r7, #8
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	21aa      	movs	r1, #170	@ 0xaa
 8001ff8:	f7ff ff3c 	bl	8001e74 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001ffc:	7a7b      	ldrb	r3, [r7, #9]
 8001ffe:	021b      	lsls	r3, r3, #8
 8002000:	b21a      	sxth	r2, r3
 8002002:	7a3b      	ldrb	r3, [r7, #8]
 8002004:	b21b      	sxth	r3, r3
 8002006:	4313      	orrs	r3, r2
 8002008:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800200a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800200e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	ee07 3a90 	vmov	s15, r3
 8002018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800201c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002020:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800202e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002032:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002036:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	ee07 3a90 	vmov	s15, r3
 8002040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002044:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002048:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800204c:	ee07 3a90 	vmov	s15, r3
 8002050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002058:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	ee07 3a90 	vmov	s15, r3
}
 8002062:	eeb0 0a67 	vmov.f32	s0, s15
 8002066:	3720      	adds	r7, #32
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002076:	2003      	movs	r0, #3
 8002078:	f001 f97f 	bl	800337a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800207c:	200f      	movs	r0, #15
 800207e:	f7ff fcbf 	bl	8001a00 <HAL_InitTick>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	71fb      	strb	r3, [r7, #7]
 800208c:	e001      	b.n	8002092 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800208e:	f7ff f933 	bl	80012f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002092:	79fb      	ldrb	r3, [r7, #7]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020a0:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <HAL_IncTick+0x20>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <HAL_IncTick+0x24>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	4a04      	ldr	r2, [pc, #16]	@ (80020c0 <HAL_IncTick+0x24>)
 80020ae:	6013      	str	r3, [r2, #0]
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	2000001c 	.word	0x2000001c
 80020c0:	200005b0 	.word	0x200005b0

080020c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return uwTick;
 80020c8:	4b03      	ldr	r3, [pc, #12]	@ (80020d8 <HAL_GetTick+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	200005b0 	.word	0x200005b0

080020dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	609a      	str	r2, [r3, #8]
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	609a      	str	r2, [r3, #8]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3360      	adds	r3, #96	@ 0x60
 8002156:	461a      	mov	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b08      	ldr	r3, [pc, #32]	@ (8002188 <LL_ADC_SetOffset+0x44>)
 8002166:	4013      	ands	r3, r2
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	4313      	orrs	r3, r2
 8002174:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800217c:	bf00      	nop
 800217e:	371c      	adds	r7, #28
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	03fff000 	.word	0x03fff000

0800218c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3360      	adds	r3, #96	@ 0x60
 800219a:	461a      	mov	r2, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	3360      	adds	r3, #96	@ 0x60
 80021c8:	461a      	mov	r2, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	431a      	orrs	r2, r3
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021e2:	bf00      	nop
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	615a      	str	r2, [r3, #20]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800223a:	b480      	push	{r7}
 800223c:	b087      	sub	sp, #28
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3330      	adds	r3, #48	@ 0x30
 800224a:	461a      	mov	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	0a1b      	lsrs	r3, r3, #8
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	4413      	add	r3, r2
 8002258:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f003 031f 	and.w	r3, r3, #31
 8002264:	211f      	movs	r1, #31
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	401a      	ands	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	0e9b      	lsrs	r3, r3, #26
 8002272:	f003 011f 	and.w	r1, r3, #31
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	fa01 f303 	lsl.w	r3, r1, r3
 8002280:	431a      	orrs	r2, r3
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002286:	bf00      	nop
 8002288:	371c      	adds	r7, #28
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002292:	b480      	push	{r7}
 8002294:	b087      	sub	sp, #28
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	3314      	adds	r3, #20
 80022a2:	461a      	mov	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	0e5b      	lsrs	r3, r3, #25
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	4413      	add	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	0d1b      	lsrs	r3, r3, #20
 80022ba:	f003 031f 	and.w	r3, r3, #31
 80022be:	2107      	movs	r1, #7
 80022c0:	fa01 f303 	lsl.w	r3, r1, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	401a      	ands	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	0d1b      	lsrs	r3, r3, #20
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	fa01 f303 	lsl.w	r3, r1, r3
 80022d6:	431a      	orrs	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022dc:	bf00      	nop
 80022de:	371c      	adds	r7, #28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002300:	43db      	mvns	r3, r3
 8002302:	401a      	ands	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f003 0318 	and.w	r3, r3, #24
 800230a:	4908      	ldr	r1, [pc, #32]	@ (800232c <LL_ADC_SetChannelSingleDiff+0x44>)
 800230c:	40d9      	lsrs	r1, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	400b      	ands	r3, r1
 8002312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002316:	431a      	orrs	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	0007ffff 	.word	0x0007ffff

08002330 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002340:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6093      	str	r3, [r2, #8]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002368:	d101      	bne.n	800236e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800238c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002390:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023b8:	d101      	bne.n	80023be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023e0:	f043 0201 	orr.w	r2, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <LL_ADC_IsEnabled+0x18>
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <LL_ADC_IsEnabled+0x1a>
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800242a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800242e:	f043 0204 	orr.w	r2, r3, #4
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b04      	cmp	r3, #4
 8002454:	d101      	bne.n	800245a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b08      	cmp	r3, #8
 800247a:	d101      	bne.n	8002480 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800247c:	2301      	movs	r3, #1
 800247e:	e000      	b.n	8002482 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e129      	b.n	80026fe <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d109      	bne.n	80024cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7fe ff45 	bl	8001348 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff3f 	bl	8002354 <LL_ADC_IsDeepPowerDownEnabled>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d004      	beq.n	80024e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff ff25 	bl	8002330 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff ff5a 	bl	80023a4 <LL_ADC_IsInternalRegulatorEnabled>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d115      	bne.n	8002522 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff ff3e 	bl	800237c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002500:	4b81      	ldr	r3, [pc, #516]	@ (8002708 <HAL_ADC_Init+0x278>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	099b      	lsrs	r3, r3, #6
 8002506:	4a81      	ldr	r2, [pc, #516]	@ (800270c <HAL_ADC_Init+0x27c>)
 8002508:	fba2 2303 	umull	r2, r3, r2, r3
 800250c:	099b      	lsrs	r3, r3, #6
 800250e:	3301      	adds	r3, #1
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002514:	e002      	b.n	800251c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	3b01      	subs	r3, #1
 800251a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f9      	bne.n	8002516 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff ff3c 	bl	80023a4 <LL_ADC_IsInternalRegulatorEnabled>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10d      	bne.n	800254e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002536:	f043 0210 	orr.w	r2, r3, #16
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002542:	f043 0201 	orr.w	r2, r3, #1
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff ff75 	bl	8002442 <LL_ADC_REG_IsConversionOngoing>
 8002558:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255e:	f003 0310 	and.w	r3, r3, #16
 8002562:	2b00      	cmp	r3, #0
 8002564:	f040 80c2 	bne.w	80026ec <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	f040 80be 	bne.w	80026ec <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002574:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002578:	f043 0202 	orr.w	r2, r3, #2
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff35 	bl	80023f4 <LL_ADC_IsEnabled>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10b      	bne.n	80025a8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002590:	485f      	ldr	r0, [pc, #380]	@ (8002710 <HAL_ADC_Init+0x280>)
 8002592:	f7ff ff2f 	bl	80023f4 <LL_ADC_IsEnabled>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d105      	bne.n	80025a8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	4619      	mov	r1, r3
 80025a2:	485c      	ldr	r0, [pc, #368]	@ (8002714 <HAL_ADC_Init+0x284>)
 80025a4:	f7ff fd9a 	bl	80020dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	7e5b      	ldrb	r3, [r3, #25]
 80025ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80025b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80025be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d106      	bne.n	80025e4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025da:	3b01      	subs	r3, #1
 80025dc:	045b      	lsls	r3, r3, #17
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d009      	beq.n	8002600 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	4b44      	ldr	r3, [pc, #272]	@ (8002718 <HAL_ADC_Init+0x288>)
 8002608:	4013      	ands	r3, r2
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	69b9      	ldr	r1, [r7, #24]
 8002610:	430b      	orrs	r3, r1
 8002612:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff25 	bl	8002468 <LL_ADC_INJ_IsConversionOngoing>
 800261e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d140      	bne.n	80026a8 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d13d      	bne.n	80026a8 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	7e1b      	ldrb	r3, [r3, #24]
 8002634:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002636:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800263e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800264e:	f023 0306 	bic.w	r3, r3, #6
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	69b9      	ldr	r1, [r7, #24]
 8002658:	430b      	orrs	r3, r1
 800265a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002662:	2b01      	cmp	r3, #1
 8002664:	d118      	bne.n	8002698 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002670:	f023 0304 	bic.w	r3, r3, #4
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800267c:	4311      	orrs	r1, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002682:	4311      	orrs	r1, r2
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002688:	430a      	orrs	r2, r1
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 0201 	orr.w	r2, r2, #1
 8002694:	611a      	str	r2, [r3, #16]
 8002696:	e007      	b.n	80026a8 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691a      	ldr	r2, [r3, #16]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0201 	bic.w	r2, r2, #1
 80026a6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d10c      	bne.n	80026ca <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	f023 010f 	bic.w	r1, r3, #15
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	1e5a      	subs	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80026c8:	e007      	b.n	80026da <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 020f 	bic.w	r2, r2, #15
 80026d8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026de:	f023 0303 	bic.w	r3, r3, #3
 80026e2:	f043 0201 	orr.w	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80026ea:	e007      	b.n	80026fc <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f0:	f043 0210 	orr.w	r2, r3, #16
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3720      	adds	r7, #32
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000004 	.word	0x20000004
 800270c:	053e2d63 	.word	0x053e2d63
 8002710:	50040000 	.word	0x50040000
 8002714:	50040300 	.word	0x50040300
 8002718:	fff0c007 	.word	0xfff0c007

0800271c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fe8a 	bl	8002442 <LL_ADC_REG_IsConversionOngoing>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d14f      	bne.n	80027d4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_ADC_Start+0x26>
 800273e:	2302      	movs	r3, #2
 8002740:	e04b      	b.n	80027da <HAL_ADC_Start+0xbe>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fce2 	bl	8003114 <ADC_Enable>
 8002750:	4603      	mov	r3, r0
 8002752:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d137      	bne.n	80027ca <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002762:	f023 0301 	bic.w	r3, r3, #1
 8002766:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002772:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800277a:	d106      	bne.n	800278a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002780:	f023 0206 	bic.w	r2, r3, #6
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002788:	e002      	b.n	8002790 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	221c      	movs	r2, #28
 8002796:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d007      	beq.n	80027be <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fe29 	bl	800241a <LL_ADC_REG_StartConversion>
 80027c8:	e006      	b.n	80027d8 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80027d2:	e001      	b.n	80027d8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027d4:	2302      	movs	r3, #2
 80027d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b086      	sub	sp, #24
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d102      	bne.n	80027fa <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80027f4:	2308      	movs	r3, #8
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	e010      	b.n	800281c <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d007      	beq.n	8002818 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280c:	f043 0220 	orr.w	r2, r3, #32
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e06f      	b.n	80028f8 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002818:	2304      	movs	r3, #4
 800281a:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800281c:	f7ff fc52 	bl	80020c4 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002822:	e021      	b.n	8002868 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282a:	d01d      	beq.n	8002868 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800282c:	f7ff fc4a 	bl	80020c4 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d302      	bcc.n	8002842 <HAL_ADC_PollForConversion+0x60>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d112      	bne.n	8002868 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10b      	bne.n	8002868 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002854:	f043 0204 	orr.w	r2, r3, #4
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e047      	b.n	80028f8 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	4013      	ands	r3, r2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0d6      	beq.n	8002824 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff fcc4 	bl	8002214 <LL_ADC_REG_IsTriggerSourceSWStart>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d01c      	beq.n	80028cc <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	7e5b      	ldrb	r3, [r3, #25]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d118      	bne.n	80028cc <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d111      	bne.n	80028cc <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d105      	bne.n	80028cc <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d104      	bne.n	80028e4 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2208      	movs	r2, #8
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	e008      	b.n	80028f6 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d103      	bne.n	80028f6 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	220c      	movs	r2, #12
 80028f4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b0b6      	sub	sp, #216	@ 0xd8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800292c:	2300      	movs	r3, #0
 800292e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_ADC_ConfigChannel+0x22>
 800293a:	2302      	movs	r3, #2
 800293c:	e3d5      	b.n	80030ea <HAL_ADC_ConfigChannel+0x7ce>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fd79 	bl	8002442 <LL_ADC_REG_IsConversionOngoing>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	f040 83ba 	bne.w	80030cc <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b05      	cmp	r3, #5
 8002966:	d824      	bhi.n	80029b2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	3b02      	subs	r3, #2
 800296e:	2b03      	cmp	r3, #3
 8002970:	d81b      	bhi.n	80029aa <HAL_ADC_ConfigChannel+0x8e>
 8002972:	a201      	add	r2, pc, #4	@ (adr r2, 8002978 <HAL_ADC_ConfigChannel+0x5c>)
 8002974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002978:	08002989 	.word	0x08002989
 800297c:	08002991 	.word	0x08002991
 8002980:	08002999 	.word	0x08002999
 8002984:	080029a1 	.word	0x080029a1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002988:	230c      	movs	r3, #12
 800298a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800298e:	e010      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002990:	2312      	movs	r3, #18
 8002992:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002996:	e00c      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002998:	2318      	movs	r3, #24
 800299a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800299e:	e008      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80029a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80029a8:	e003      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80029aa:	2306      	movs	r3, #6
 80029ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80029b0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80029c0:	f7ff fc3b 	bl	800223a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fd3a 	bl	8002442 <LL_ADC_REG_IsConversionOngoing>
 80029ce:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fd46 	bl	8002468 <LL_ADC_INJ_IsConversionOngoing>
 80029dc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f040 81bf 	bne.w	8002d68 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f040 81ba 	bne.w	8002d68 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029fc:	d10f      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2200      	movs	r2, #0
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f7ff fc42 	bl	8002292 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fbe9 	bl	80021ee <LL_ADC_SetSamplingTimeCommonConfig>
 8002a1c:	e00e      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6818      	ldr	r0, [r3, #0]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	6819      	ldr	r1, [r3, #0]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f7ff fc31 	bl	8002292 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2100      	movs	r1, #0
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fbd9 	bl	80021ee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	695a      	ldr	r2, [r3, #20]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	08db      	lsrs	r3, r3, #3
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d00a      	beq.n	8002a74 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6818      	ldr	r0, [r3, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	6919      	ldr	r1, [r3, #16]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a6e:	f7ff fb69 	bl	8002144 <LL_ADC_SetOffset>
 8002a72:	e179      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fb86 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10a      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x184>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fb7b 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002a96:	4603      	mov	r3, r0
 8002a98:	0e9b      	lsrs	r3, r3, #26
 8002a9a:	f003 021f 	and.w	r2, r3, #31
 8002a9e:	e01e      	b.n	8002ade <HAL_ADC_ConfigChannel+0x1c2>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fb70 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002abe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ac2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ac6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002ace:	2320      	movs	r3, #32
 8002ad0:	e004      	b.n	8002adc <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002ad2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ad6:	fab3 f383 	clz	r3, r3
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d105      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x1da>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	0e9b      	lsrs	r3, r3, #26
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	e018      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x20c>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b02:	fa93 f3a3 	rbit	r3, r3
 8002b06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002b0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002b12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002b1a:	2320      	movs	r3, #32
 8002b1c:	e004      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002b1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d106      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2200      	movs	r2, #0
 8002b32:	2100      	movs	r1, #0
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fb3f 	bl	80021b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2101      	movs	r1, #1
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fb23 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002b46:	4603      	mov	r3, r0
 8002b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10a      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x24a>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2101      	movs	r1, #1
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff fb18 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	0e9b      	lsrs	r3, r3, #26
 8002b60:	f003 021f 	and.w	r2, r3, #31
 8002b64:	e01e      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x288>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fb0d 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002b84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002b8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002b94:	2320      	movs	r3, #32
 8002b96:	e004      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002b98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b9c:	fab3 f383 	clz	r3, r3
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d105      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x2a0>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	0e9b      	lsrs	r3, r3, #26
 8002bb6:	f003 031f 	and.w	r3, r3, #31
 8002bba:	e018      	b.n	8002bee <HAL_ADC_ConfigChannel+0x2d2>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002bd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002bd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002be0:	2320      	movs	r3, #32
 8002be2:	e004      	b.n	8002bee <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002be4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d106      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff fadc 	bl	80021b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2102      	movs	r1, #2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fac0 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10a      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x310>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2102      	movs	r1, #2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff fab5 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002c22:	4603      	mov	r3, r0
 8002c24:	0e9b      	lsrs	r3, r3, #26
 8002c26:	f003 021f 	and.w	r2, r3, #31
 8002c2a:	e01e      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x34e>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2102      	movs	r1, #2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff faaa 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c42:	fa93 f3a3 	rbit	r3, r3
 8002c46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002c4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002c5a:	2320      	movs	r3, #32
 8002c5c:	e004      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d105      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x366>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	0e9b      	lsrs	r3, r3, #26
 8002c7c:	f003 031f 	and.w	r3, r3, #31
 8002c80:	e014      	b.n	8002cac <HAL_ADC_ConfigChannel+0x390>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002c90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002c96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002c9e:	2320      	movs	r3, #32
 8002ca0:	e004      	b.n	8002cac <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002ca2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d106      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2102      	movs	r1, #2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fa7d 	bl	80021b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2103      	movs	r1, #3
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fa61 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10a      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x3ce>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2103      	movs	r1, #3
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fa56 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	0e9b      	lsrs	r3, r3, #26
 8002ce4:	f003 021f 	and.w	r2, r3, #31
 8002ce8:	e017      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x3fe>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2103      	movs	r1, #3
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fa4b 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cfc:	fa93 f3a3 	rbit	r3, r3
 8002d00:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002d02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d04:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002d06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002d0c:	2320      	movs	r3, #32
 8002d0e:	e003      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002d10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d105      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x416>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	0e9b      	lsrs	r3, r3, #26
 8002d2c:	f003 031f 	and.w	r3, r3, #31
 8002d30:	e011      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x43a>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d3a:	fa93 f3a3 	rbit	r3, r3
 8002d3e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002d40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d42:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002d44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002d4a:	2320      	movs	r3, #32
 8002d4c:	e003      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002d4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d50:	fab3 f383 	clz	r3, r3
 8002d54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d106      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2103      	movs	r1, #3
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fa28 	bl	80021b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fb41 	bl	80023f4 <LL_ADC_IsEnabled>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f040 813f 	bne.w	8002ff8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6819      	ldr	r1, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	461a      	mov	r2, r3
 8002d88:	f7ff faae 	bl	80022e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	4a8e      	ldr	r2, [pc, #568]	@ (8002fcc <HAL_ADC_ConfigChannel+0x6b0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	f040 8130 	bne.w	8002ff8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10b      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x4a4>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	0e9b      	lsrs	r3, r3, #26
 8002dae:	3301      	adds	r3, #1
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	2b09      	cmp	r3, #9
 8002db6:	bf94      	ite	ls
 8002db8:	2301      	movls	r3, #1
 8002dba:	2300      	movhi	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	e019      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x4d8>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dc8:	fa93 f3a3 	rbit	r3, r3
 8002dcc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002dd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002dd8:	2320      	movs	r3, #32
 8002dda:	e003      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002ddc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dde:	fab3 f383 	clz	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	3301      	adds	r3, #1
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	2b09      	cmp	r3, #9
 8002dec:	bf94      	ite	ls
 8002dee:	2301      	movls	r3, #1
 8002df0:	2300      	movhi	r3, #0
 8002df2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d079      	beq.n	8002eec <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d107      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x4f8>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	0e9b      	lsrs	r3, r3, #26
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	069b      	lsls	r3, r3, #26
 8002e0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e12:	e015      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x524>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002e22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e24:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002e26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002e2c:	2320      	movs	r3, #32
 8002e2e:	e003      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002e30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	3301      	adds	r3, #1
 8002e3a:	069b      	lsls	r3, r3, #26
 8002e3c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d109      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x544>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	0e9b      	lsrs	r3, r3, #26
 8002e52:	3301      	adds	r3, #1
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	2101      	movs	r1, #1
 8002e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5e:	e017      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x574>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e70:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002e72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002e78:	2320      	movs	r3, #32
 8002e7a:	e003      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	3301      	adds	r3, #1
 8002e86:	f003 031f 	and.w	r3, r3, #31
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	ea42 0103 	orr.w	r1, r2, r3
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10a      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x59a>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	0e9b      	lsrs	r3, r3, #26
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f003 021f 	and.w	r2, r3, #31
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	051b      	lsls	r3, r3, #20
 8002eb4:	e018      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x5cc>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002ece:	2320      	movs	r3, #32
 8002ed0:	e003      	b.n	8002eda <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed4:	fab3 f383 	clz	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	3301      	adds	r3, #1
 8002edc:	f003 021f 	and.w	r2, r3, #31
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	4413      	add	r3, r2
 8002ee6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	e080      	b.n	8002fee <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d107      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x5ec>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	0e9b      	lsrs	r3, r3, #26
 8002efe:	3301      	adds	r3, #1
 8002f00:	069b      	lsls	r3, r3, #26
 8002f02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f06:	e015      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x618>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f10:	fa93 f3a3 	rbit	r3, r3
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002f20:	2320      	movs	r3, #32
 8002f22:	e003      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	069b      	lsls	r3, r3, #26
 8002f30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d109      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x638>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	0e9b      	lsrs	r3, r3, #26
 8002f46:	3301      	adds	r3, #1
 8002f48:	f003 031f 	and.w	r3, r3, #31
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f52:	e017      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x668>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	fa93 f3a3 	rbit	r3, r3
 8002f60:	61bb      	str	r3, [r7, #24]
  return result;
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002f6c:	2320      	movs	r3, #32
 8002f6e:	e003      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	3301      	adds	r3, #1
 8002f7a:	f003 031f 	and.w	r3, r3, #31
 8002f7e:	2101      	movs	r1, #1
 8002f80:	fa01 f303 	lsl.w	r3, r1, r3
 8002f84:	ea42 0103 	orr.w	r1, r2, r3
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10d      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x694>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	0e9b      	lsrs	r3, r3, #26
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	f003 021f 	and.w	r2, r3, #31
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3b1e      	subs	r3, #30
 8002fa8:	051b      	lsls	r3, r3, #20
 8002faa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fae:	e01d      	b.n	8002fec <HAL_ADC_ConfigChannel+0x6d0>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	fa93 f3a3 	rbit	r3, r3
 8002fbc:	60fb      	str	r3, [r7, #12]
  return result;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d103      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002fc8:	2320      	movs	r3, #32
 8002fca:	e005      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x6bc>
 8002fcc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	3301      	adds	r3, #1
 8002fda:	f003 021f 	and.w	r2, r3, #31
 8002fde:	4613      	mov	r3, r2
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3b1e      	subs	r3, #30
 8002fe6:	051b      	lsls	r3, r3, #20
 8002fe8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	f7ff f94d 	bl	8002292 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4b3d      	ldr	r3, [pc, #244]	@ (80030f4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d06c      	beq.n	80030de <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003004:	483c      	ldr	r0, [pc, #240]	@ (80030f8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003006:	f7ff f88f 	bl	8002128 <LL_ADC_GetCommonPathInternalCh>
 800300a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a3a      	ldr	r2, [pc, #232]	@ (80030fc <HAL_ADC_ConfigChannel+0x7e0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d127      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003018:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800301c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d121      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a35      	ldr	r2, [pc, #212]	@ (8003100 <HAL_ADC_ConfigChannel+0x7e4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d157      	bne.n	80030de <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800302e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003032:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003036:	4619      	mov	r1, r3
 8003038:	482f      	ldr	r0, [pc, #188]	@ (80030f8 <HAL_ADC_ConfigChannel+0x7dc>)
 800303a:	f7ff f862 	bl	8002102 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800303e:	4b31      	ldr	r3, [pc, #196]	@ (8003104 <HAL_ADC_ConfigChannel+0x7e8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	099b      	lsrs	r3, r3, #6
 8003044:	4a30      	ldr	r2, [pc, #192]	@ (8003108 <HAL_ADC_ConfigChannel+0x7ec>)
 8003046:	fba2 2303 	umull	r2, r3, r2, r3
 800304a:	099b      	lsrs	r3, r3, #6
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	4613      	mov	r3, r2
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003058:	e002      	b.n	8003060 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	3b01      	subs	r3, #1
 800305e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f9      	bne.n	800305a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003066:	e03a      	b.n	80030de <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a27      	ldr	r2, [pc, #156]	@ (800310c <HAL_ADC_ConfigChannel+0x7f0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d113      	bne.n	800309a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003072:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003076:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10d      	bne.n	800309a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1f      	ldr	r2, [pc, #124]	@ (8003100 <HAL_ADC_ConfigChannel+0x7e4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d12a      	bne.n	80030de <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003088:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800308c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003090:	4619      	mov	r1, r3
 8003092:	4819      	ldr	r0, [pc, #100]	@ (80030f8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003094:	f7ff f835 	bl	8002102 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003098:	e021      	b.n	80030de <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1c      	ldr	r2, [pc, #112]	@ (8003110 <HAL_ADC_ConfigChannel+0x7f4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d11c      	bne.n	80030de <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d116      	bne.n	80030de <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a12      	ldr	r2, [pc, #72]	@ (8003100 <HAL_ADC_ConfigChannel+0x7e4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d111      	bne.n	80030de <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030c2:	4619      	mov	r1, r3
 80030c4:	480c      	ldr	r0, [pc, #48]	@ (80030f8 <HAL_ADC_ConfigChannel+0x7dc>)
 80030c6:	f7ff f81c 	bl	8002102 <LL_ADC_SetCommonPathInternalCh>
 80030ca:	e008      	b.n	80030de <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d0:	f043 0220 	orr.w	r2, r3, #32
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80030e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	37d8      	adds	r7, #216	@ 0xd8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	80080000 	.word	0x80080000
 80030f8:	50040300 	.word	0x50040300
 80030fc:	c7520000 	.word	0xc7520000
 8003100:	50040000 	.word	0x50040000
 8003104:	20000004 	.word	0x20000004
 8003108:	053e2d63 	.word	0x053e2d63
 800310c:	cb840000 	.word	0xcb840000
 8003110:	80000001 	.word	0x80000001

08003114 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800311c:	2300      	movs	r3, #0
 800311e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff f965 	bl	80023f4 <LL_ADC_IsEnabled>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d169      	bne.n	8003204 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	4b36      	ldr	r3, [pc, #216]	@ (8003210 <ADC_Enable+0xfc>)
 8003138:	4013      	ands	r3, r2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00d      	beq.n	800315a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003142:	f043 0210 	orr.w	r2, r3, #16
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314e:	f043 0201 	orr.w	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e055      	b.n	8003206 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff f934 	bl	80023cc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003164:	482b      	ldr	r0, [pc, #172]	@ (8003214 <ADC_Enable+0x100>)
 8003166:	f7fe ffdf 	bl	8002128 <LL_ADC_GetCommonPathInternalCh>
 800316a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800316c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003170:	2b00      	cmp	r3, #0
 8003172:	d013      	beq.n	800319c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003174:	4b28      	ldr	r3, [pc, #160]	@ (8003218 <ADC_Enable+0x104>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	099b      	lsrs	r3, r3, #6
 800317a:	4a28      	ldr	r2, [pc, #160]	@ (800321c <ADC_Enable+0x108>)
 800317c:	fba2 2303 	umull	r2, r3, r2, r3
 8003180:	099b      	lsrs	r3, r3, #6
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800318e:	e002      	b.n	8003196 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	3b01      	subs	r3, #1
 8003194:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1f9      	bne.n	8003190 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800319c:	f7fe ff92 	bl	80020c4 <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031a2:	e028      	b.n	80031f6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff f923 	bl	80023f4 <LL_ADC_IsEnabled>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d104      	bne.n	80031be <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff f907 	bl	80023cc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031be:	f7fe ff81 	bl	80020c4 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d914      	bls.n	80031f6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d00d      	beq.n	80031f6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031de:	f043 0210 	orr.w	r2, r3, #16
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ea:	f043 0201 	orr.w	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e007      	b.n	8003206 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b01      	cmp	r3, #1
 8003202:	d1cf      	bne.n	80031a4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	8000003f 	.word	0x8000003f
 8003214:	50040300 	.word	0x50040300
 8003218:	20000004 	.word	0x20000004
 800321c:	053e2d63 	.word	0x053e2d63

08003220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003230:	4b0c      	ldr	r3, [pc, #48]	@ (8003264 <__NVIC_SetPriorityGrouping+0x44>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800323c:	4013      	ands	r3, r2
 800323e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003248:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800324c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003252:	4a04      	ldr	r2, [pc, #16]	@ (8003264 <__NVIC_SetPriorityGrouping+0x44>)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	60d3      	str	r3, [r2, #12]
}
 8003258:	bf00      	nop
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800326c:	4b04      	ldr	r3, [pc, #16]	@ (8003280 <__NVIC_GetPriorityGrouping+0x18>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	0a1b      	lsrs	r3, r3, #8
 8003272:	f003 0307 	and.w	r3, r3, #7
}
 8003276:	4618      	mov	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	2b00      	cmp	r3, #0
 8003294:	db0b      	blt.n	80032ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	f003 021f 	and.w	r2, r3, #31
 800329c:	4907      	ldr	r1, [pc, #28]	@ (80032bc <__NVIC_EnableIRQ+0x38>)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	2001      	movs	r0, #1
 80032a6:	fa00 f202 	lsl.w	r2, r0, r2
 80032aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	e000e100 	.word	0xe000e100

080032c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	6039      	str	r1, [r7, #0]
 80032ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	db0a      	blt.n	80032ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	490c      	ldr	r1, [pc, #48]	@ (800330c <__NVIC_SetPriority+0x4c>)
 80032da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032de:	0112      	lsls	r2, r2, #4
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	440b      	add	r3, r1
 80032e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032e8:	e00a      	b.n	8003300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	4908      	ldr	r1, [pc, #32]	@ (8003310 <__NVIC_SetPriority+0x50>)
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	3b04      	subs	r3, #4
 80032f8:	0112      	lsls	r2, r2, #4
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	440b      	add	r3, r1
 80032fe:	761a      	strb	r2, [r3, #24]
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	e000e100 	.word	0xe000e100
 8003310:	e000ed00 	.word	0xe000ed00

08003314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003314:	b480      	push	{r7}
 8003316:	b089      	sub	sp, #36	@ 0x24
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f1c3 0307 	rsb	r3, r3, #7
 800332e:	2b04      	cmp	r3, #4
 8003330:	bf28      	it	cs
 8003332:	2304      	movcs	r3, #4
 8003334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3304      	adds	r3, #4
 800333a:	2b06      	cmp	r3, #6
 800333c:	d902      	bls.n	8003344 <NVIC_EncodePriority+0x30>
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	3b03      	subs	r3, #3
 8003342:	e000      	b.n	8003346 <NVIC_EncodePriority+0x32>
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003348:	f04f 32ff 	mov.w	r2, #4294967295
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43da      	mvns	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	401a      	ands	r2, r3
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800335c:	f04f 31ff 	mov.w	r1, #4294967295
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	fa01 f303 	lsl.w	r3, r1, r3
 8003366:	43d9      	mvns	r1, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800336c:	4313      	orrs	r3, r2
         );
}
 800336e:	4618      	mov	r0, r3
 8003370:	3724      	adds	r7, #36	@ 0x24
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff ff4c 	bl	8003220 <__NVIC_SetPriorityGrouping>
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033a2:	f7ff ff61 	bl	8003268 <__NVIC_GetPriorityGrouping>
 80033a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	68b9      	ldr	r1, [r7, #8]
 80033ac:	6978      	ldr	r0, [r7, #20]
 80033ae:	f7ff ffb1 	bl	8003314 <NVIC_EncodePriority>
 80033b2:	4602      	mov	r2, r0
 80033b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b8:	4611      	mov	r1, r2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff ff80 	bl	80032c0 <__NVIC_SetPriority>
}
 80033c0:	bf00      	nop
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff ff54 	bl	8003284 <__NVIC_EnableIRQ>
}
 80033dc:	bf00      	nop
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e0ac      	b.n	8003550 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 f8b2 	bl	8003564 <DFSDM_GetChannelFromInstance>
 8003400:	4603      	mov	r3, r0
 8003402:	4a55      	ldr	r2, [pc, #340]	@ (8003558 <HAL_DFSDM_ChannelInit+0x174>)
 8003404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e09f      	b.n	8003550 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7fd ffd9 	bl	80013c8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003416:	4b51      	ldr	r3, [pc, #324]	@ (800355c <HAL_DFSDM_ChannelInit+0x178>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3301      	adds	r3, #1
 800341c:	4a4f      	ldr	r2, [pc, #316]	@ (800355c <HAL_DFSDM_ChannelInit+0x178>)
 800341e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003420:	4b4e      	ldr	r3, [pc, #312]	@ (800355c <HAL_DFSDM_ChannelInit+0x178>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d125      	bne.n	8003474 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003428:	4b4d      	ldr	r3, [pc, #308]	@ (8003560 <HAL_DFSDM_ChannelInit+0x17c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a4c      	ldr	r2, [pc, #304]	@ (8003560 <HAL_DFSDM_ChannelInit+0x17c>)
 800342e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003432:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003434:	4b4a      	ldr	r3, [pc, #296]	@ (8003560 <HAL_DFSDM_ChannelInit+0x17c>)
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	4948      	ldr	r1, [pc, #288]	@ (8003560 <HAL_DFSDM_ChannelInit+0x17c>)
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003442:	4b47      	ldr	r3, [pc, #284]	@ (8003560 <HAL_DFSDM_ChannelInit+0x17c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a46      	ldr	r2, [pc, #280]	@ (8003560 <HAL_DFSDM_ChannelInit+0x17c>)
 8003448:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800344c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	791b      	ldrb	r3, [r3, #4]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d108      	bne.n	8003468 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003456:	4b42      	ldr	r3, [pc, #264]	@ (8003560 <HAL_DFSDM_ChannelInit+0x17c>)
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	3b01      	subs	r3, #1
 8003460:	041b      	lsls	r3, r3, #16
 8003462:	493f      	ldr	r1, [pc, #252]	@ (8003560 <HAL_DFSDM_ChannelInit+0x17c>)
 8003464:	4313      	orrs	r3, r2
 8003466:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003468:	4b3d      	ldr	r3, [pc, #244]	@ (8003560 <HAL_DFSDM_ChannelInit+0x17c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a3c      	ldr	r2, [pc, #240]	@ (8003560 <HAL_DFSDM_ChannelInit+0x17c>)
 800346e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003472:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003482:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6819      	ldr	r1, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003492:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003498:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 020f 	bic.w	r2, r2, #15
 80034b0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6819      	ldr	r1, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80034d8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6899      	ldr	r1, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e8:	3b01      	subs	r3, #1
 80034ea:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f002 0207 	and.w	r2, r2, #7
 8003504:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6859      	ldr	r1, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003510:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003516:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003530:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 f810 	bl	8003564 <DFSDM_GetChannelFromInstance>
 8003544:	4602      	mov	r2, r0
 8003546:	4904      	ldr	r1, [pc, #16]	@ (8003558 <HAL_DFSDM_ChannelInit+0x174>)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	200005b8 	.word	0x200005b8
 800355c:	200005b4 	.word	0x200005b4
 8003560:	40016000 	.word	0x40016000

08003564 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a1c      	ldr	r2, [pc, #112]	@ (80035e0 <DFSDM_GetChannelFromInstance+0x7c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d102      	bne.n	800357a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	e02b      	b.n	80035d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a19      	ldr	r2, [pc, #100]	@ (80035e4 <DFSDM_GetChannelFromInstance+0x80>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d102      	bne.n	8003588 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003582:	2301      	movs	r3, #1
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	e024      	b.n	80035d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a17      	ldr	r2, [pc, #92]	@ (80035e8 <DFSDM_GetChannelFromInstance+0x84>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d102      	bne.n	8003596 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003590:	2302      	movs	r3, #2
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	e01d      	b.n	80035d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a14      	ldr	r2, [pc, #80]	@ (80035ec <DFSDM_GetChannelFromInstance+0x88>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d102      	bne.n	80035a4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800359e:	2304      	movs	r3, #4
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	e016      	b.n	80035d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a12      	ldr	r2, [pc, #72]	@ (80035f0 <DFSDM_GetChannelFromInstance+0x8c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d102      	bne.n	80035b2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80035ac:	2305      	movs	r3, #5
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	e00f      	b.n	80035d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a0f      	ldr	r2, [pc, #60]	@ (80035f4 <DFSDM_GetChannelFromInstance+0x90>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d102      	bne.n	80035c0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80035ba:	2306      	movs	r3, #6
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	e008      	b.n	80035d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a0d      	ldr	r2, [pc, #52]	@ (80035f8 <DFSDM_GetChannelFromInstance+0x94>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d102      	bne.n	80035ce <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80035c8:	2307      	movs	r3, #7
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	e001      	b.n	80035d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80035ce:	2303      	movs	r3, #3
 80035d0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80035d2:	68fb      	ldr	r3, [r7, #12]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	40016000 	.word	0x40016000
 80035e4:	40016020 	.word	0x40016020
 80035e8:	40016040 	.word	0x40016040
 80035ec:	40016080 	.word	0x40016080
 80035f0:	400160a0 	.word	0x400160a0
 80035f4:	400160c0 	.word	0x400160c0
 80035f8:	400160e0 	.word	0x400160e0

080035fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800360a:	e166      	b.n	80038da <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	2101      	movs	r1, #1
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	fa01 f303 	lsl.w	r3, r1, r3
 8003618:	4013      	ands	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 8158 	beq.w	80038d4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	2b01      	cmp	r3, #1
 800362e:	d005      	beq.n	800363c <HAL_GPIO_Init+0x40>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d130      	bne.n	800369e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	2203      	movs	r2, #3
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4013      	ands	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003672:	2201      	movs	r2, #1
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4013      	ands	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	091b      	lsrs	r3, r3, #4
 8003688:	f003 0201 	and.w	r2, r3, #1
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d017      	beq.n	80036da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	2203      	movs	r2, #3
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	43db      	mvns	r3, r3
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4013      	ands	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d123      	bne.n	800372e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	08da      	lsrs	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3208      	adds	r2, #8
 80036ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	220f      	movs	r2, #15
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4013      	ands	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	08da      	lsrs	r2, r3, #3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3208      	adds	r2, #8
 8003728:	6939      	ldr	r1, [r7, #16]
 800372a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	2203      	movs	r2, #3
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43db      	mvns	r3, r3
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4013      	ands	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 0203 	and.w	r2, r3, #3
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 80b2 	beq.w	80038d4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003770:	4b61      	ldr	r3, [pc, #388]	@ (80038f8 <HAL_GPIO_Init+0x2fc>)
 8003772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003774:	4a60      	ldr	r2, [pc, #384]	@ (80038f8 <HAL_GPIO_Init+0x2fc>)
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	6613      	str	r3, [r2, #96]	@ 0x60
 800377c:	4b5e      	ldr	r3, [pc, #376]	@ (80038f8 <HAL_GPIO_Init+0x2fc>)
 800377e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003788:	4a5c      	ldr	r2, [pc, #368]	@ (80038fc <HAL_GPIO_Init+0x300>)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	089b      	lsrs	r3, r3, #2
 800378e:	3302      	adds	r3, #2
 8003790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003794:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	220f      	movs	r2, #15
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4013      	ands	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80037b2:	d02b      	beq.n	800380c <HAL_GPIO_Init+0x210>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a52      	ldr	r2, [pc, #328]	@ (8003900 <HAL_GPIO_Init+0x304>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d025      	beq.n	8003808 <HAL_GPIO_Init+0x20c>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a51      	ldr	r2, [pc, #324]	@ (8003904 <HAL_GPIO_Init+0x308>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d01f      	beq.n	8003804 <HAL_GPIO_Init+0x208>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a50      	ldr	r2, [pc, #320]	@ (8003908 <HAL_GPIO_Init+0x30c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d019      	beq.n	8003800 <HAL_GPIO_Init+0x204>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a4f      	ldr	r2, [pc, #316]	@ (800390c <HAL_GPIO_Init+0x310>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d013      	beq.n	80037fc <HAL_GPIO_Init+0x200>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a4e      	ldr	r2, [pc, #312]	@ (8003910 <HAL_GPIO_Init+0x314>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00d      	beq.n	80037f8 <HAL_GPIO_Init+0x1fc>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a4d      	ldr	r2, [pc, #308]	@ (8003914 <HAL_GPIO_Init+0x318>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d007      	beq.n	80037f4 <HAL_GPIO_Init+0x1f8>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a4c      	ldr	r2, [pc, #304]	@ (8003918 <HAL_GPIO_Init+0x31c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d101      	bne.n	80037f0 <HAL_GPIO_Init+0x1f4>
 80037ec:	2307      	movs	r3, #7
 80037ee:	e00e      	b.n	800380e <HAL_GPIO_Init+0x212>
 80037f0:	2308      	movs	r3, #8
 80037f2:	e00c      	b.n	800380e <HAL_GPIO_Init+0x212>
 80037f4:	2306      	movs	r3, #6
 80037f6:	e00a      	b.n	800380e <HAL_GPIO_Init+0x212>
 80037f8:	2305      	movs	r3, #5
 80037fa:	e008      	b.n	800380e <HAL_GPIO_Init+0x212>
 80037fc:	2304      	movs	r3, #4
 80037fe:	e006      	b.n	800380e <HAL_GPIO_Init+0x212>
 8003800:	2303      	movs	r3, #3
 8003802:	e004      	b.n	800380e <HAL_GPIO_Init+0x212>
 8003804:	2302      	movs	r3, #2
 8003806:	e002      	b.n	800380e <HAL_GPIO_Init+0x212>
 8003808:	2301      	movs	r3, #1
 800380a:	e000      	b.n	800380e <HAL_GPIO_Init+0x212>
 800380c:	2300      	movs	r3, #0
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	f002 0203 	and.w	r2, r2, #3
 8003814:	0092      	lsls	r2, r2, #2
 8003816:	4093      	lsls	r3, r2
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800381e:	4937      	ldr	r1, [pc, #220]	@ (80038fc <HAL_GPIO_Init+0x300>)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	089b      	lsrs	r3, r3, #2
 8003824:	3302      	adds	r3, #2
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800382c:	4b3b      	ldr	r3, [pc, #236]	@ (800391c <HAL_GPIO_Init+0x320>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	43db      	mvns	r3, r3
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4013      	ands	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003850:	4a32      	ldr	r2, [pc, #200]	@ (800391c <HAL_GPIO_Init+0x320>)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003856:	4b31      	ldr	r3, [pc, #196]	@ (800391c <HAL_GPIO_Init+0x320>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	43db      	mvns	r3, r3
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4013      	ands	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4313      	orrs	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800387a:	4a28      	ldr	r2, [pc, #160]	@ (800391c <HAL_GPIO_Init+0x320>)
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003880:	4b26      	ldr	r3, [pc, #152]	@ (800391c <HAL_GPIO_Init+0x320>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	43db      	mvns	r3, r3
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4013      	ands	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038a4:	4a1d      	ldr	r2, [pc, #116]	@ (800391c <HAL_GPIO_Init+0x320>)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80038aa:	4b1c      	ldr	r3, [pc, #112]	@ (800391c <HAL_GPIO_Init+0x320>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	43db      	mvns	r3, r3
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4013      	ands	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038ce:	4a13      	ldr	r2, [pc, #76]	@ (800391c <HAL_GPIO_Init+0x320>)
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	3301      	adds	r3, #1
 80038d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f47f ae91 	bne.w	800360c <HAL_GPIO_Init+0x10>
  }
}
 80038ea:	bf00      	nop
 80038ec:	bf00      	nop
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40010000 	.word	0x40010000
 8003900:	48000400 	.word	0x48000400
 8003904:	48000800 	.word	0x48000800
 8003908:	48000c00 	.word	0x48000c00
 800390c:	48001000 	.word	0x48001000
 8003910:	48001400 	.word	0x48001400
 8003914:	48001800 	.word	0x48001800
 8003918:	48001c00 	.word	0x48001c00
 800391c:	40010400 	.word	0x40010400

08003920 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800392e:	e0c9      	b.n	8003ac4 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003930:	2201      	movs	r2, #1
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	4013      	ands	r3, r2
 800393c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80bc 	beq.w	8003abe <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003946:	4a66      	ldr	r2, [pc, #408]	@ (8003ae0 <HAL_GPIO_DeInit+0x1c0>)
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	089b      	lsrs	r3, r3, #2
 800394c:	3302      	adds	r3, #2
 800394e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003952:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	220f      	movs	r2, #15
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4013      	ands	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800396e:	d02b      	beq.n	80039c8 <HAL_GPIO_DeInit+0xa8>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a5c      	ldr	r2, [pc, #368]	@ (8003ae4 <HAL_GPIO_DeInit+0x1c4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d025      	beq.n	80039c4 <HAL_GPIO_DeInit+0xa4>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a5b      	ldr	r2, [pc, #364]	@ (8003ae8 <HAL_GPIO_DeInit+0x1c8>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d01f      	beq.n	80039c0 <HAL_GPIO_DeInit+0xa0>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a5a      	ldr	r2, [pc, #360]	@ (8003aec <HAL_GPIO_DeInit+0x1cc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d019      	beq.n	80039bc <HAL_GPIO_DeInit+0x9c>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a59      	ldr	r2, [pc, #356]	@ (8003af0 <HAL_GPIO_DeInit+0x1d0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d013      	beq.n	80039b8 <HAL_GPIO_DeInit+0x98>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a58      	ldr	r2, [pc, #352]	@ (8003af4 <HAL_GPIO_DeInit+0x1d4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00d      	beq.n	80039b4 <HAL_GPIO_DeInit+0x94>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a57      	ldr	r2, [pc, #348]	@ (8003af8 <HAL_GPIO_DeInit+0x1d8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d007      	beq.n	80039b0 <HAL_GPIO_DeInit+0x90>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a56      	ldr	r2, [pc, #344]	@ (8003afc <HAL_GPIO_DeInit+0x1dc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d101      	bne.n	80039ac <HAL_GPIO_DeInit+0x8c>
 80039a8:	2307      	movs	r3, #7
 80039aa:	e00e      	b.n	80039ca <HAL_GPIO_DeInit+0xaa>
 80039ac:	2308      	movs	r3, #8
 80039ae:	e00c      	b.n	80039ca <HAL_GPIO_DeInit+0xaa>
 80039b0:	2306      	movs	r3, #6
 80039b2:	e00a      	b.n	80039ca <HAL_GPIO_DeInit+0xaa>
 80039b4:	2305      	movs	r3, #5
 80039b6:	e008      	b.n	80039ca <HAL_GPIO_DeInit+0xaa>
 80039b8:	2304      	movs	r3, #4
 80039ba:	e006      	b.n	80039ca <HAL_GPIO_DeInit+0xaa>
 80039bc:	2303      	movs	r3, #3
 80039be:	e004      	b.n	80039ca <HAL_GPIO_DeInit+0xaa>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e002      	b.n	80039ca <HAL_GPIO_DeInit+0xaa>
 80039c4:	2301      	movs	r3, #1
 80039c6:	e000      	b.n	80039ca <HAL_GPIO_DeInit+0xaa>
 80039c8:	2300      	movs	r3, #0
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	f002 0203 	and.w	r2, r2, #3
 80039d0:	0092      	lsls	r2, r2, #2
 80039d2:	4093      	lsls	r3, r2
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d132      	bne.n	8003a40 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80039da:	4b49      	ldr	r3, [pc, #292]	@ (8003b00 <HAL_GPIO_DeInit+0x1e0>)
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	43db      	mvns	r3, r3
 80039e2:	4947      	ldr	r1, [pc, #284]	@ (8003b00 <HAL_GPIO_DeInit+0x1e0>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80039e8:	4b45      	ldr	r3, [pc, #276]	@ (8003b00 <HAL_GPIO_DeInit+0x1e0>)
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	4943      	ldr	r1, [pc, #268]	@ (8003b00 <HAL_GPIO_DeInit+0x1e0>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80039f6:	4b42      	ldr	r3, [pc, #264]	@ (8003b00 <HAL_GPIO_DeInit+0x1e0>)
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	43db      	mvns	r3, r3
 80039fe:	4940      	ldr	r1, [pc, #256]	@ (8003b00 <HAL_GPIO_DeInit+0x1e0>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003a04:	4b3e      	ldr	r3, [pc, #248]	@ (8003b00 <HAL_GPIO_DeInit+0x1e0>)
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	493c      	ldr	r1, [pc, #240]	@ (8003b00 <HAL_GPIO_DeInit+0x1e0>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f003 0303 	and.w	r3, r3, #3
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	220f      	movs	r2, #15
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003a22:	4a2f      	ldr	r2, [pc, #188]	@ (8003ae0 <HAL_GPIO_DeInit+0x1c0>)
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	089b      	lsrs	r3, r3, #2
 8003a28:	3302      	adds	r3, #2
 8003a2a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	43da      	mvns	r2, r3
 8003a32:	482b      	ldr	r0, [pc, #172]	@ (8003ae0 <HAL_GPIO_DeInit+0x1c0>)
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	089b      	lsrs	r3, r3, #2
 8003a38:	400a      	ands	r2, r1
 8003a3a:	3302      	adds	r3, #2
 8003a3c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	2103      	movs	r1, #3
 8003a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	08da      	lsrs	r2, r3, #3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3208      	adds	r2, #8
 8003a5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	220f      	movs	r2, #15
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	08d2      	lsrs	r2, r2, #3
 8003a74:	4019      	ands	r1, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3208      	adds	r2, #8
 8003a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	2103      	movs	r1, #3
 8003a88:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	401a      	ands	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	2101      	movs	r1, #1
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	401a      	ands	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	2103      	movs	r1, #3
 8003ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	401a      	ands	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f47f af2f 	bne.w	8003930 <HAL_GPIO_DeInit+0x10>
  }
}
 8003ad2:	bf00      	nop
 8003ad4:	bf00      	nop
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	40010000 	.word	0x40010000
 8003ae4:	48000400 	.word	0x48000400
 8003ae8:	48000800 	.word	0x48000800
 8003aec:	48000c00 	.word	0x48000c00
 8003af0:	48001000 	.word	0x48001000
 8003af4:	48001400 	.word	0x48001400
 8003af8:	48001800 	.word	0x48001800
 8003afc:	48001c00 	.word	0x48001c00
 8003b00:	40010400 	.word	0x40010400

08003b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	807b      	strh	r3, [r7, #2]
 8003b10:	4613      	mov	r3, r2
 8003b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b14:	787b      	ldrb	r3, [r7, #1]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b1a:	887a      	ldrh	r2, [r7, #2]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b20:	e002      	b.n	8003b28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b22:	887a      	ldrh	r2, [r7, #2]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b3e:	4b08      	ldr	r3, [pc, #32]	@ (8003b60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b40:	695a      	ldr	r2, [r3, #20]
 8003b42:	88fb      	ldrh	r3, [r7, #6]
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d006      	beq.n	8003b58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b4a:	4a05      	ldr	r2, [pc, #20]	@ (8003b60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b4c:	88fb      	ldrh	r3, [r7, #6]
 8003b4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b50:	88fb      	ldrh	r3, [r7, #6]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 f806 	bl	8003b64 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b58:	bf00      	nop
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40010400 	.word	0x40010400

08003b64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e08d      	b.n	8003ca8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d106      	bne.n	8003ba6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7fd fc75 	bl	8001490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2224      	movs	r2, #36	@ 0x24
 8003baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 0201 	bic.w	r2, r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003bca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bda:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d107      	bne.n	8003bf4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bf0:	609a      	str	r2, [r3, #8]
 8003bf2:	e006      	b.n	8003c02 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003c00:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d108      	bne.n	8003c1c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c18:	605a      	str	r2, [r3, #4]
 8003c1a:	e007      	b.n	8003c2c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c2a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6812      	ldr	r2, [r2, #0]
 8003c36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003c3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c3e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c4e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69d9      	ldr	r1, [r3, #28]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1a      	ldr	r2, [r3, #32]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0201 	orr.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e021      	b.n	8003d06 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2224      	movs	r2, #36	@ 0x24
 8003cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0201 	bic.w	r2, r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fd fc7a 	bl	80015d4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	4608      	mov	r0, r1
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4603      	mov	r3, r0
 8003d20:	817b      	strh	r3, [r7, #10]
 8003d22:	460b      	mov	r3, r1
 8003d24:	813b      	strh	r3, [r7, #8]
 8003d26:	4613      	mov	r3, r2
 8003d28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	f040 80f9 	bne.w	8003f2a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <HAL_I2C_Mem_Write+0x34>
 8003d3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d105      	bne.n	8003d50 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d4a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0ed      	b.n	8003f2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_I2C_Mem_Write+0x4e>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e0e6      	b.n	8003f2c <HAL_I2C_Mem_Write+0x21c>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d66:	f7fe f9ad 	bl	80020c4 <HAL_GetTick>
 8003d6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	2319      	movs	r3, #25
 8003d72:	2201      	movs	r2, #1
 8003d74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 fac3 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e0d1      	b.n	8003f2c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2221      	movs	r2, #33	@ 0x21
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2240      	movs	r2, #64	@ 0x40
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a3a      	ldr	r2, [r7, #32]
 8003da2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003da8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003db0:	88f8      	ldrh	r0, [r7, #6]
 8003db2:	893a      	ldrh	r2, [r7, #8]
 8003db4:	8979      	ldrh	r1, [r7, #10]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	9301      	str	r3, [sp, #4]
 8003dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f9d3 	bl	800416c <I2C_RequestMemoryWrite>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0a9      	b.n	8003f2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2bff      	cmp	r3, #255	@ 0xff
 8003de0:	d90e      	bls.n	8003e00 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	22ff      	movs	r2, #255	@ 0xff
 8003de6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	8979      	ldrh	r1, [r7, #10]
 8003df0:	2300      	movs	r3, #0
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 fc3d 	bl	8004678 <I2C_TransferConfig>
 8003dfe:	e00f      	b.n	8003e20 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	8979      	ldrh	r1, [r7, #10]
 8003e12:	2300      	movs	r3, #0
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 fc2c 	bl	8004678 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 fabc 	bl	80043a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e07b      	b.n	8003f2c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e38:	781a      	ldrb	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d034      	beq.n	8003ed8 <HAL_I2C_Mem_Write+0x1c8>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d130      	bne.n	8003ed8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2180      	movs	r1, #128	@ 0x80
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 fa3f 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e04d      	b.n	8003f2c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2bff      	cmp	r3, #255	@ 0xff
 8003e98:	d90e      	bls.n	8003eb8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	22ff      	movs	r2, #255	@ 0xff
 8003e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	8979      	ldrh	r1, [r7, #10]
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 fbe1 	bl	8004678 <I2C_TransferConfig>
 8003eb6:	e00f      	b.n	8003ed8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	8979      	ldrh	r1, [r7, #10]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 fbd0 	bl	8004678 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d19e      	bne.n	8003e20 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 faa2 	bl	8004430 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e01a      	b.n	8003f2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2220      	movs	r2, #32
 8003efc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6859      	ldr	r1, [r3, #4]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	4b0a      	ldr	r3, [pc, #40]	@ (8003f34 <HAL_I2C_Mem_Write+0x224>)
 8003f0a:	400b      	ands	r3, r1
 8003f0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	e000      	b.n	8003f2c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003f2a:	2302      	movs	r3, #2
  }
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	fe00e800 	.word	0xfe00e800

08003f38 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af02      	add	r7, sp, #8
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	4608      	mov	r0, r1
 8003f42:	4611      	mov	r1, r2
 8003f44:	461a      	mov	r2, r3
 8003f46:	4603      	mov	r3, r0
 8003f48:	817b      	strh	r3, [r7, #10]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	813b      	strh	r3, [r7, #8]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	f040 80fd 	bne.w	800415a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_I2C_Mem_Read+0x34>
 8003f66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d105      	bne.n	8003f78 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f72:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0f1      	b.n	800415c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <HAL_I2C_Mem_Read+0x4e>
 8003f82:	2302      	movs	r3, #2
 8003f84:	e0ea      	b.n	800415c <HAL_I2C_Mem_Read+0x224>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f8e:	f7fe f899 	bl	80020c4 <HAL_GetTick>
 8003f92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	2319      	movs	r3, #25
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f9af 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e0d5      	b.n	800415c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2222      	movs	r2, #34	@ 0x22
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2240      	movs	r2, #64	@ 0x40
 8003fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6a3a      	ldr	r2, [r7, #32]
 8003fca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003fd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fd8:	88f8      	ldrh	r0, [r7, #6]
 8003fda:	893a      	ldrh	r2, [r7, #8]
 8003fdc:	8979      	ldrh	r1, [r7, #10]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f913 	bl	8004214 <I2C_RequestMemoryRead>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0ad      	b.n	800415c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004004:	b29b      	uxth	r3, r3
 8004006:	2bff      	cmp	r3, #255	@ 0xff
 8004008:	d90e      	bls.n	8004028 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	22ff      	movs	r2, #255	@ 0xff
 800400e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004014:	b2da      	uxtb	r2, r3
 8004016:	8979      	ldrh	r1, [r7, #10]
 8004018:	4b52      	ldr	r3, [pc, #328]	@ (8004164 <HAL_I2C_Mem_Read+0x22c>)
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 fb29 	bl	8004678 <I2C_TransferConfig>
 8004026:	e00f      	b.n	8004048 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004036:	b2da      	uxtb	r2, r3
 8004038:	8979      	ldrh	r1, [r7, #10]
 800403a:	4b4a      	ldr	r3, [pc, #296]	@ (8004164 <HAL_I2C_Mem_Read+0x22c>)
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 fb18 	bl	8004678 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404e:	2200      	movs	r2, #0
 8004050:	2104      	movs	r1, #4
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 f956 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e07c      	b.n	800415c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407e:	3b01      	subs	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d034      	beq.n	8004108 <HAL_I2C_Mem_Read+0x1d0>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d130      	bne.n	8004108 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ac:	2200      	movs	r2, #0
 80040ae:	2180      	movs	r1, #128	@ 0x80
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f927 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e04d      	b.n	800415c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2bff      	cmp	r3, #255	@ 0xff
 80040c8:	d90e      	bls.n	80040e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	22ff      	movs	r2, #255	@ 0xff
 80040ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	8979      	ldrh	r1, [r7, #10]
 80040d8:	2300      	movs	r3, #0
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 fac9 	bl	8004678 <I2C_TransferConfig>
 80040e6:	e00f      	b.n	8004108 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	8979      	ldrh	r1, [r7, #10]
 80040fa:	2300      	movs	r3, #0
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 fab8 	bl	8004678 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d19a      	bne.n	8004048 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 f98a 	bl	8004430 <I2C_WaitOnSTOPFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e01a      	b.n	800415c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2220      	movs	r2, #32
 800412c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6859      	ldr	r1, [r3, #4]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	4b0b      	ldr	r3, [pc, #44]	@ (8004168 <HAL_I2C_Mem_Read+0x230>)
 800413a:	400b      	ands	r3, r1
 800413c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	e000      	b.n	800415c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800415a:	2302      	movs	r3, #2
  }
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	80002400 	.word	0x80002400
 8004168:	fe00e800 	.word	0xfe00e800

0800416c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af02      	add	r7, sp, #8
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	4608      	mov	r0, r1
 8004176:	4611      	mov	r1, r2
 8004178:	461a      	mov	r2, r3
 800417a:	4603      	mov	r3, r0
 800417c:	817b      	strh	r3, [r7, #10]
 800417e:	460b      	mov	r3, r1
 8004180:	813b      	strh	r3, [r7, #8]
 8004182:	4613      	mov	r3, r2
 8004184:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	b2da      	uxtb	r2, r3
 800418a:	8979      	ldrh	r1, [r7, #10]
 800418c:	4b20      	ldr	r3, [pc, #128]	@ (8004210 <I2C_RequestMemoryWrite+0xa4>)
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 fa6f 	bl	8004678 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	69b9      	ldr	r1, [r7, #24]
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 f8ff 	bl	80043a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e02c      	b.n	8004208 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d105      	bne.n	80041c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041b4:	893b      	ldrh	r3, [r7, #8]
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80041be:	e015      	b.n	80041ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041c0:	893b      	ldrh	r3, [r7, #8]
 80041c2:	0a1b      	lsrs	r3, r3, #8
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	69b9      	ldr	r1, [r7, #24]
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f8e5 	bl	80043a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e012      	b.n	8004208 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041e2:	893b      	ldrh	r3, [r7, #8]
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	2200      	movs	r2, #0
 80041f4:	2180      	movs	r1, #128	@ 0x80
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 f884 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e000      	b.n	8004208 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	80002000 	.word	0x80002000

08004214 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af02      	add	r7, sp, #8
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	4608      	mov	r0, r1
 800421e:	4611      	mov	r1, r2
 8004220:	461a      	mov	r2, r3
 8004222:	4603      	mov	r3, r0
 8004224:	817b      	strh	r3, [r7, #10]
 8004226:	460b      	mov	r3, r1
 8004228:	813b      	strh	r3, [r7, #8]
 800422a:	4613      	mov	r3, r2
 800422c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800422e:	88fb      	ldrh	r3, [r7, #6]
 8004230:	b2da      	uxtb	r2, r3
 8004232:	8979      	ldrh	r1, [r7, #10]
 8004234:	4b20      	ldr	r3, [pc, #128]	@ (80042b8 <I2C_RequestMemoryRead+0xa4>)
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	2300      	movs	r3, #0
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 fa1c 	bl	8004678 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	69b9      	ldr	r1, [r7, #24]
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 f8ac 	bl	80043a2 <I2C_WaitOnTXISFlagUntilTimeout>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e02c      	b.n	80042ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004254:	88fb      	ldrh	r3, [r7, #6]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d105      	bne.n	8004266 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800425a:	893b      	ldrh	r3, [r7, #8]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	629a      	str	r2, [r3, #40]	@ 0x28
 8004264:	e015      	b.n	8004292 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004266:	893b      	ldrh	r3, [r7, #8]
 8004268:	0a1b      	lsrs	r3, r3, #8
 800426a:	b29b      	uxth	r3, r3
 800426c:	b2da      	uxtb	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	69b9      	ldr	r1, [r7, #24]
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f892 	bl	80043a2 <I2C_WaitOnTXISFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e012      	b.n	80042ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004288:	893b      	ldrh	r3, [r7, #8]
 800428a:	b2da      	uxtb	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	2200      	movs	r2, #0
 800429a:	2140      	movs	r1, #64	@ 0x40
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 f831 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	80002000 	.word	0x80002000

080042bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d103      	bne.n	80042da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2200      	movs	r2, #0
 80042d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d007      	beq.n	80042f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	619a      	str	r2, [r3, #24]
  }
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	4613      	mov	r3, r2
 8004312:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004314:	e031      	b.n	800437a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431c:	d02d      	beq.n	800437a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431e:	f7fd fed1 	bl	80020c4 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d302      	bcc.n	8004334 <I2C_WaitOnFlagUntilTimeout+0x30>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d122      	bne.n	800437a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699a      	ldr	r2, [r3, #24]
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	4013      	ands	r3, r2
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	429a      	cmp	r2, r3
 8004342:	bf0c      	ite	eq
 8004344:	2301      	moveq	r3, #1
 8004346:	2300      	movne	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	461a      	mov	r2, r3
 800434c:	79fb      	ldrb	r3, [r7, #7]
 800434e:	429a      	cmp	r2, r3
 8004350:	d113      	bne.n	800437a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004356:	f043 0220 	orr.w	r2, r3, #32
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e00f      	b.n	800439a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699a      	ldr	r2, [r3, #24]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4013      	ands	r3, r2
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	429a      	cmp	r2, r3
 8004388:	bf0c      	ite	eq
 800438a:	2301      	moveq	r3, #1
 800438c:	2300      	movne	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	461a      	mov	r2, r3
 8004392:	79fb      	ldrb	r3, [r7, #7]
 8004394:	429a      	cmp	r2, r3
 8004396:	d0be      	beq.n	8004316 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043ae:	e033      	b.n	8004418 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	68b9      	ldr	r1, [r7, #8]
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 f87f 	bl	80044b8 <I2C_IsErrorOccurred>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e031      	b.n	8004428 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ca:	d025      	beq.n	8004418 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043cc:	f7fd fe7a 	bl	80020c4 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d302      	bcc.n	80043e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d11a      	bne.n	8004418 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d013      	beq.n	8004418 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f4:	f043 0220 	orr.w	r2, r3, #32
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e007      	b.n	8004428 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b02      	cmp	r3, #2
 8004424:	d1c4      	bne.n	80043b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800443c:	e02f      	b.n	800449e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	68b9      	ldr	r1, [r7, #8]
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f838 	bl	80044b8 <I2C_IsErrorOccurred>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e02d      	b.n	80044ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004452:	f7fd fe37 	bl	80020c4 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	429a      	cmp	r2, r3
 8004460:	d302      	bcc.n	8004468 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d11a      	bne.n	800449e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	f003 0320 	and.w	r3, r3, #32
 8004472:	2b20      	cmp	r3, #32
 8004474:	d013      	beq.n	800449e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800447a:	f043 0220 	orr.w	r2, r3, #32
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2220      	movs	r2, #32
 8004486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e007      	b.n	80044ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d1c8      	bne.n	800443e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08a      	sub	sp, #40	@ 0x28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80044d2:	2300      	movs	r3, #0
 80044d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	f003 0310 	and.w	r3, r3, #16
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d068      	beq.n	80045b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2210      	movs	r2, #16
 80044ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044ec:	e049      	b.n	8004582 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f4:	d045      	beq.n	8004582 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044f6:	f7fd fde5 	bl	80020c4 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	429a      	cmp	r2, r3
 8004504:	d302      	bcc.n	800450c <I2C_IsErrorOccurred+0x54>
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d13a      	bne.n	8004582 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004516:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800451e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800452a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800452e:	d121      	bne.n	8004574 <I2C_IsErrorOccurred+0xbc>
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004536:	d01d      	beq.n	8004574 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004538:	7cfb      	ldrb	r3, [r7, #19]
 800453a:	2b20      	cmp	r3, #32
 800453c:	d01a      	beq.n	8004574 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800454c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800454e:	f7fd fdb9 	bl	80020c4 <HAL_GetTick>
 8004552:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004554:	e00e      	b.n	8004574 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004556:	f7fd fdb5 	bl	80020c4 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b19      	cmp	r3, #25
 8004562:	d907      	bls.n	8004574 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	f043 0320 	orr.w	r3, r3, #32
 800456a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004572:	e006      	b.n	8004582 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	2b20      	cmp	r3, #32
 8004580:	d1e9      	bne.n	8004556 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b20      	cmp	r3, #32
 800458e:	d003      	beq.n	8004598 <I2C_IsErrorOccurred+0xe0>
 8004590:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0aa      	beq.n	80044ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004598:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800459c:	2b00      	cmp	r3, #0
 800459e:	d103      	bne.n	80045a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2220      	movs	r2, #32
 80045a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	f043 0304 	orr.w	r3, r3, #4
 80045ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00b      	beq.n	80045e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00b      	beq.n	8004602 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	f043 0308 	orr.w	r3, r3, #8
 80045f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00b      	beq.n	8004624 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	f043 0302 	orr.w	r3, r3, #2
 8004612:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800461c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004624:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01c      	beq.n	8004666 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f7ff fe45 	bl	80042bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6859      	ldr	r1, [r3, #4]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	4b0d      	ldr	r3, [pc, #52]	@ (8004674 <I2C_IsErrorOccurred+0x1bc>)
 800463e:	400b      	ands	r3, r1
 8004640:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	431a      	orrs	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2220      	movs	r2, #32
 8004652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004666:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800466a:	4618      	mov	r0, r3
 800466c:	3728      	adds	r7, #40	@ 0x28
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	fe00e800 	.word	0xfe00e800

08004678 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	607b      	str	r3, [r7, #4]
 8004682:	460b      	mov	r3, r1
 8004684:	817b      	strh	r3, [r7, #10]
 8004686:	4613      	mov	r3, r2
 8004688:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800468a:	897b      	ldrh	r3, [r7, #10]
 800468c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004690:	7a7b      	ldrb	r3, [r7, #9]
 8004692:	041b      	lsls	r3, r3, #16
 8004694:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004698:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80046a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	0d5b      	lsrs	r3, r3, #21
 80046b2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80046b6:	4b08      	ldr	r3, [pc, #32]	@ (80046d8 <I2C_TransferConfig+0x60>)
 80046b8:	430b      	orrs	r3, r1
 80046ba:	43db      	mvns	r3, r3
 80046bc:	ea02 0103 	and.w	r1, r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80046ca:	bf00      	nop
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	03ff63ff 	.word	0x03ff63ff

080046dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b20      	cmp	r3, #32
 80046f0:	d138      	bne.n	8004764 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046fc:	2302      	movs	r3, #2
 80046fe:	e032      	b.n	8004766 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2224      	movs	r2, #36	@ 0x24
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0201 	bic.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800472e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6819      	ldr	r1, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004760:	2300      	movs	r3, #0
 8004762:	e000      	b.n	8004766 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004764:	2302      	movs	r3, #2
  }
}
 8004766:	4618      	mov	r0, r3
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004772:	b480      	push	{r7}
 8004774:	b085      	sub	sp, #20
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b20      	cmp	r3, #32
 8004786:	d139      	bne.n	80047fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004792:	2302      	movs	r3, #2
 8004794:	e033      	b.n	80047fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2224      	movs	r2, #36	@ 0x24
 80047a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0201 	bic.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80047c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	021b      	lsls	r3, r3, #8
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0201 	orr.w	r2, r2, #1
 80047e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	e000      	b.n	80047fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047fc:	2302      	movs	r3, #2
  }
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
	...

0800480c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af02      	add	r7, sp, #8
 8004812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004818:	f7fd fc54 	bl	80020c4 <HAL_GetTick>
 800481c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d102      	bne.n	800482a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	73fb      	strb	r3, [r7, #15]
 8004828:	e092      	b.n	8004950 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004834:	2b00      	cmp	r3, #0
 8004836:	f040 808b 	bne.w	8004950 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7fc ff06 	bl	800164c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004840:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f88b 	bl	8004960 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	4b42      	ldr	r3, [pc, #264]	@ (800495c <HAL_OSPI_Init+0x150>)
 8004852:	4013      	ands	r3, r2
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	68d1      	ldr	r1, [r2, #12]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6912      	ldr	r2, [r2, #16]
 800485c:	3a01      	subs	r2, #1
 800485e:	0412      	lsls	r2, r2, #16
 8004860:	4311      	orrs	r1, r2
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6952      	ldr	r2, [r2, #20]
 8004866:	3a01      	subs	r2, #1
 8004868:	0212      	lsls	r2, r2, #8
 800486a:	4311      	orrs	r1, r2
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004870:	4311      	orrs	r1, r2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	69d2      	ldr	r2, [r2, #28]
 8004876:	4311      	orrs	r1, r2
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	430b      	orrs	r3, r1
 800487e:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	0412      	lsls	r2, r2, #16
 800488a:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	3b01      	subs	r3, #1
 800489c:	021a      	lsls	r2, r3, #8
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2200      	movs	r2, #0
 80048b0:	2120      	movs	r1, #32
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fb98 	bl	8004fe8 <OSPI_WaitFlagStateUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d146      	bne.n	8004950 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	1e5a      	subs	r2, r3, #1
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80048f8:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	2b02      	cmp	r3, #2
 8004926:	d107      	bne.n	8004938 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0202 	orr.w	r2, r2, #2
 8004936:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004940:	d103      	bne.n	800494a <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	645a      	str	r2, [r3, #68]	@ 0x44
 8004948:	e002      	b.n	8004950 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2202      	movs	r2, #2
 800494e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8004950:	7bfb      	ldrb	r3, [r7, #15]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	f8e0f8f4 	.word	0xf8e0f8f4

08004960 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	64da      	str	r2, [r3, #76]	@ 0x4c
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
	...

08004980 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b092      	sub	sp, #72	@ 0x48
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a08      	ldr	r2, [pc, #32]	@ (80049c0 <HAL_OSPIM_Config+0x40>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d105      	bne.n	80049ae <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 1U;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80049ac:	e004      	b.n	80049b8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80049ae:	2301      	movs	r3, #1
 80049b0:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80049b8:	2300      	movs	r3, #0
 80049ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80049be:	e01f      	b.n	8004a00 <HAL_OSPIM_Config+0x80>
 80049c0:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80049c4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80049c8:	3301      	adds	r3, #1
 80049ca:	b2d8      	uxtb	r0, r3
 80049cc:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80049d0:	f107 0114 	add.w	r1, r7, #20
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	4619      	mov	r1, r3
 80049e0:	f000 fb3a 	bl	8005058 <OSPIM_GetConfig>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d005      	beq.n	80049f6 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2208      	movs	r2, #8
 80049f4:	649a      	str	r2, [r3, #72]	@ 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80049f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80049fa:	3301      	adds	r3, #1
 80049fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004a00:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d9dd      	bls.n	80049c4 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8004a08:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f040 82de 	bne.w	8004fce <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8004a12:	4bc6      	ldr	r3, [pc, #792]	@ (8004d2c <HAL_OSPIM_Config+0x3ac>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00b      	beq.n	8004a36 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004a1e:	4bc3      	ldr	r3, [pc, #780]	@ (8004d2c <HAL_OSPIM_Config+0x3ac>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4ac2      	ldr	r2, [pc, #776]	@ (8004d2c <HAL_OSPIM_Config+0x3ac>)
 8004a24:	f023 0301 	bic.w	r3, r3, #1
 8004a28:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8004a2a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004a2e:	f043 0301 	orr.w	r3, r3, #1
 8004a32:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8004a36:	4bbe      	ldr	r3, [pc, #760]	@ (8004d30 <HAL_OSPIM_Config+0x3b0>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00b      	beq.n	8004a5a <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004a42:	4bbb      	ldr	r3, [pc, #748]	@ (8004d30 <HAL_OSPIM_Config+0x3b0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4aba      	ldr	r2, [pc, #744]	@ (8004d30 <HAL_OSPIM_Config+0x3b0>)
 8004a48:	f023 0301 	bic.w	r3, r3, #1
 8004a4c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8004a4e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004a52:	f043 0302 	orr.w	r3, r3, #2
 8004a56:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004a5a:	49b6      	ldr	r1, [pc, #728]	@ (8004d34 <HAL_OSPIM_Config+0x3b4>)
 8004a5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a5e:	4613      	mov	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	3348      	adds	r3, #72	@ 0x48
 8004a68:	443b      	add	r3, r7
 8004a6a:	3b2c      	subs	r3, #44	@ 0x2c
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	440b      	add	r3, r1
 8004a74:	6859      	ldr	r1, [r3, #4]
 8004a76:	48af      	ldr	r0, [pc, #700]	@ (8004d34 <HAL_OSPIM_Config+0x3b4>)
 8004a78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	3348      	adds	r3, #72	@ 0x48
 8004a84:	443b      	add	r3, r7
 8004a86:	3b2c      	subs	r3, #44	@ 0x2c
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4403      	add	r3, r0
 8004a94:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8004a96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	3348      	adds	r3, #72	@ 0x48
 8004aa2:	443b      	add	r3, r7
 8004aa4:	3b34      	subs	r3, #52	@ 0x34
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 80a1 	beq.w	8004bf0 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004aae:	49a1      	ldr	r1, [pc, #644]	@ (8004d34 <HAL_OSPIM_Config+0x3b4>)
 8004ab0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	3348      	adds	r3, #72	@ 0x48
 8004abc:	443b      	add	r3, r7
 8004abe:	3b34      	subs	r3, #52	@ 0x34
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	440b      	add	r3, r1
 8004ac8:	6859      	ldr	r1, [r3, #4]
 8004aca:	489a      	ldr	r0, [pc, #616]	@ (8004d34 <HAL_OSPIM_Config+0x3b4>)
 8004acc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ace:	4613      	mov	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	3348      	adds	r3, #72	@ 0x48
 8004ad8:	443b      	add	r3, r7
 8004ada:	3b34      	subs	r3, #52	@ 0x34
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	f021 0201 	bic.w	r2, r1, #1
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4403      	add	r3, r0
 8004ae8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004aea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	3348      	adds	r3, #72	@ 0x48
 8004af6:	443b      	add	r3, r7
 8004af8:	3b30      	subs	r3, #48	@ 0x30
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01d      	beq.n	8004b3c <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004b00:	498c      	ldr	r1, [pc, #560]	@ (8004d34 <HAL_OSPIM_Config+0x3b4>)
 8004b02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	3348      	adds	r3, #72	@ 0x48
 8004b0e:	443b      	add	r3, r7
 8004b10:	3b30      	subs	r3, #48	@ 0x30
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3b01      	subs	r3, #1
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	6859      	ldr	r1, [r3, #4]
 8004b1c:	4885      	ldr	r0, [pc, #532]	@ (8004d34 <HAL_OSPIM_Config+0x3b4>)
 8004b1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	3348      	adds	r3, #72	@ 0x48
 8004b2a:	443b      	add	r3, r7
 8004b2c:	3b30      	subs	r3, #48	@ 0x30
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3b01      	subs	r3, #1
 8004b32:	f021 0210 	bic.w	r2, r1, #16
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4403      	add	r3, r0
 8004b3a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004b3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b3e:	4613      	mov	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	3348      	adds	r3, #72	@ 0x48
 8004b48:	443b      	add	r3, r7
 8004b4a:	3b28      	subs	r3, #40	@ 0x28
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d021      	beq.n	8004b96 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004b52:	4978      	ldr	r1, [pc, #480]	@ (8004d34 <HAL_OSPIM_Config+0x3b4>)
 8004b54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b56:	4613      	mov	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	3348      	adds	r3, #72	@ 0x48
 8004b60:	443b      	add	r3, r7
 8004b62:	3b28      	subs	r3, #40	@ 0x28
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	440b      	add	r3, r1
 8004b70:	6859      	ldr	r1, [r3, #4]
 8004b72:	4870      	ldr	r0, [pc, #448]	@ (8004d34 <HAL_OSPIM_Config+0x3b4>)
 8004b74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b76:	4613      	mov	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	3348      	adds	r3, #72	@ 0x48
 8004b80:	443b      	add	r3, r7
 8004b82:	3b28      	subs	r3, #40	@ 0x28
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4403      	add	r3, r0
 8004b94:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004b96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	3348      	adds	r3, #72	@ 0x48
 8004ba2:	443b      	add	r3, r7
 8004ba4:	3b24      	subs	r3, #36	@ 0x24
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d021      	beq.n	8004bf0 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004bac:	4961      	ldr	r1, [pc, #388]	@ (8004d34 <HAL_OSPIM_Config+0x3b4>)
 8004bae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	3348      	adds	r3, #72	@ 0x48
 8004bba:	443b      	add	r3, r7
 8004bbc:	3b24      	subs	r3, #36	@ 0x24
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	6859      	ldr	r1, [r3, #4]
 8004bcc:	4859      	ldr	r0, [pc, #356]	@ (8004d34 <HAL_OSPIM_Config+0x3b4>)
 8004bce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	3348      	adds	r3, #72	@ 0x48
 8004bda:	443b      	add	r3, r7
 8004bdc:	3b24      	subs	r3, #36	@ 0x24
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3b01      	subs	r3, #1
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4403      	add	r3, r0
 8004bee:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	6819      	ldr	r1, [r3, #0]
 8004bf4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	3348      	adds	r3, #72	@ 0x48
 8004c02:	443b      	add	r3, r7
 8004c04:	3b34      	subs	r3, #52	@ 0x34
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4299      	cmp	r1, r3
 8004c0a:	d038      	beq.n	8004c7e <HAL_OSPIM_Config+0x2fe>
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	6859      	ldr	r1, [r3, #4]
 8004c10:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004c14:	4613      	mov	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	3348      	adds	r3, #72	@ 0x48
 8004c1e:	443b      	add	r3, r7
 8004c20:	3b30      	subs	r3, #48	@ 0x30
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4299      	cmp	r1, r3
 8004c26:	d02a      	beq.n	8004c7e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	6899      	ldr	r1, [r3, #8]
 8004c2c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	3348      	adds	r3, #72	@ 0x48
 8004c3a:	443b      	add	r3, r7
 8004c3c:	3b2c      	subs	r3, #44	@ 0x2c
 8004c3e:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004c40:	4299      	cmp	r1, r3
 8004c42:	d01c      	beq.n	8004c7e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	68d9      	ldr	r1, [r3, #12]
 8004c48:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	3348      	adds	r3, #72	@ 0x48
 8004c56:	443b      	add	r3, r7
 8004c58:	3b28      	subs	r3, #40	@ 0x28
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4299      	cmp	r1, r3
 8004c5e:	d00e      	beq.n	8004c7e <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	6919      	ldr	r1, [r3, #16]
 8004c64:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004c68:	4613      	mov	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	3348      	adds	r3, #72	@ 0x48
 8004c72:	443b      	add	r3, r7
 8004c74:	3b24      	subs	r3, #36	@ 0x24
 8004c76:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004c78:	4299      	cmp	r1, r3
 8004c7a:	f040 80d3 	bne.w	8004e24 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004c7e:	492d      	ldr	r1, [pc, #180]	@ (8004d34 <HAL_OSPIM_Config+0x3b4>)
 8004c80:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	3348      	adds	r3, #72	@ 0x48
 8004c8e:	443b      	add	r3, r7
 8004c90:	3b34      	subs	r3, #52	@ 0x34
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	6859      	ldr	r1, [r3, #4]
 8004c9c:	4825      	ldr	r0, [pc, #148]	@ (8004d34 <HAL_OSPIM_Config+0x3b4>)
 8004c9e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	3348      	adds	r3, #72	@ 0x48
 8004cac:	443b      	add	r3, r7
 8004cae:	3b34      	subs	r3, #52	@ 0x34
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	f021 0201 	bic.w	r2, r1, #1
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4403      	add	r3, r0
 8004cbc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004cbe:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	3348      	adds	r3, #72	@ 0x48
 8004ccc:	443b      	add	r3, r7
 8004cce:	3b30      	subs	r3, #48	@ 0x30
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d01f      	beq.n	8004d16 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004cd6:	4917      	ldr	r1, [pc, #92]	@ (8004d34 <HAL_OSPIM_Config+0x3b4>)
 8004cd8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	3348      	adds	r3, #72	@ 0x48
 8004ce6:	443b      	add	r3, r7
 8004ce8:	3b30      	subs	r3, #48	@ 0x30
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3b01      	subs	r3, #1
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	6859      	ldr	r1, [r3, #4]
 8004cf4:	480f      	ldr	r0, [pc, #60]	@ (8004d34 <HAL_OSPIM_Config+0x3b4>)
 8004cf6:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	3348      	adds	r3, #72	@ 0x48
 8004d04:	443b      	add	r3, r7
 8004d06:	3b30      	subs	r3, #48	@ 0x30
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	f021 0210 	bic.w	r2, r1, #16
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4403      	add	r3, r0
 8004d14:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004d16:	4907      	ldr	r1, [pc, #28]	@ (8004d34 <HAL_OSPIM_Config+0x3b4>)
 8004d18:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	3348      	adds	r3, #72	@ 0x48
 8004d26:	443b      	add	r3, r7
 8004d28:	3b2c      	subs	r3, #44	@ 0x2c
 8004d2a:	e005      	b.n	8004d38 <HAL_OSPIM_Config+0x3b8>
 8004d2c:	a0001000 	.word	0xa0001000
 8004d30:	a0001400 	.word	0xa0001400
 8004d34:	50061c00 	.word	0x50061c00
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	6859      	ldr	r1, [r3, #4]
 8004d42:	48a6      	ldr	r0, [pc, #664]	@ (8004fdc <HAL_OSPIM_Config+0x65c>)
 8004d44:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	3348      	adds	r3, #72	@ 0x48
 8004d52:	443b      	add	r3, r7
 8004d54:	3b2c      	subs	r3, #44	@ 0x2c
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4403      	add	r3, r0
 8004d62:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004d64:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	3348      	adds	r3, #72	@ 0x48
 8004d72:	443b      	add	r3, r7
 8004d74:	3b28      	subs	r3, #40	@ 0x28
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d023      	beq.n	8004dc4 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004d7c:	4997      	ldr	r1, [pc, #604]	@ (8004fdc <HAL_OSPIM_Config+0x65c>)
 8004d7e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004d82:	4613      	mov	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	3348      	adds	r3, #72	@ 0x48
 8004d8c:	443b      	add	r3, r7
 8004d8e:	3b28      	subs	r3, #40	@ 0x28
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	6859      	ldr	r1, [r3, #4]
 8004d9e:	488f      	ldr	r0, [pc, #572]	@ (8004fdc <HAL_OSPIM_Config+0x65c>)
 8004da0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	3348      	adds	r3, #72	@ 0x48
 8004dae:	443b      	add	r3, r7
 8004db0:	3b28      	subs	r3, #40	@ 0x28
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3b01      	subs	r3, #1
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4403      	add	r3, r0
 8004dc2:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004dc4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	3348      	adds	r3, #72	@ 0x48
 8004dd2:	443b      	add	r3, r7
 8004dd4:	3b24      	subs	r3, #36	@ 0x24
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d023      	beq.n	8004e24 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004ddc:	497f      	ldr	r1, [pc, #508]	@ (8004fdc <HAL_OSPIM_Config+0x65c>)
 8004dde:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004de2:	4613      	mov	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	3348      	adds	r3, #72	@ 0x48
 8004dec:	443b      	add	r3, r7
 8004dee:	3b24      	subs	r3, #36	@ 0x24
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	440b      	add	r3, r1
 8004dfc:	6859      	ldr	r1, [r3, #4]
 8004dfe:	4877      	ldr	r0, [pc, #476]	@ (8004fdc <HAL_OSPIM_Config+0x65c>)
 8004e00:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	3348      	adds	r3, #72	@ 0x48
 8004e0e:	443b      	add	r3, r7
 8004e10:	3b24      	subs	r3, #36	@ 0x24
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3b01      	subs	r3, #1
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4403      	add	r3, r0
 8004e22:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004e24:	4a6d      	ldr	r2, [pc, #436]	@ (8004fdc <HAL_OSPIM_Config+0x65c>)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e38:	025b      	lsls	r3, r3, #9
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	4967      	ldr	r1, [pc, #412]	@ (8004fdc <HAL_OSPIM_Config+0x65c>)
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004e4e:	4a63      	ldr	r2, [pc, #396]	@ (8004fdc <HAL_OSPIM_Config+0x65c>)
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3b01      	subs	r3, #1
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f023 0203 	bic.w	r2, r3, #3
 8004e60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	431a      	orrs	r2, r3
 8004e66:	495d      	ldr	r1, [pc, #372]	@ (8004fdc <HAL_OSPIM_Config+0x65c>)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	f042 0201 	orr.w	r2, r2, #1
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d014      	beq.n	8004eaa <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004e80:	4a56      	ldr	r2, [pc, #344]	@ (8004fdc <HAL_OSPIM_Config+0x65c>)
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e94:	015b      	lsls	r3, r3, #5
 8004e96:	431a      	orrs	r2, r3
 8004e98:	4950      	ldr	r1, [pc, #320]	@ (8004fdc <HAL_OSPIM_Config+0x65c>)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	f042 0210 	orr.w	r2, r2, #16
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	440b      	add	r3, r1
 8004ea8:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d019      	beq.n	8004eea <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004eb6:	4a49      	ldr	r2, [pc, #292]	@ (8004fdc <HAL_OSPIM_Config+0x65c>)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004ecc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ece:	049b      	lsls	r3, r3, #18
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	4942      	ldr	r1, [pc, #264]	@ (8004fdc <HAL_OSPIM_Config+0x65c>)
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	605a      	str	r2, [r3, #4]
 8004ee8:	e01c      	b.n	8004f24 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d018      	beq.n	8004f24 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004ef2:	4a3a      	ldr	r2, [pc, #232]	@ (8004fdc <HAL_OSPIM_Config+0x65c>)
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8004f08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f0a:	069b      	lsls	r3, r3, #26
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	4933      	ldr	r1, [pc, #204]	@ (8004fdc <HAL_OSPIM_Config+0x65c>)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	440b      	add	r3, r1
 8004f22:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d019      	beq.n	8004f64 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004f30:	4a2a      	ldr	r2, [pc, #168]	@ (8004fdc <HAL_OSPIM_Config+0x65c>)
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004f46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f48:	049b      	lsls	r3, r3, #18
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	4923      	ldr	r1, [pc, #140]	@ (8004fdc <HAL_OSPIM_Config+0x65c>)
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	440b      	add	r3, r1
 8004f60:	605a      	str	r2, [r3, #4]
 8004f62:	e01c      	b.n	8004f9e <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d018      	beq.n	8004f9e <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8004fdc <HAL_OSPIM_Config+0x65c>)
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8004f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f84:	069b      	lsls	r3, r3, #26
 8004f86:	431a      	orrs	r2, r3
 8004f88:	4914      	ldr	r1, [pc, #80]	@ (8004fdc <HAL_OSPIM_Config+0x65c>)
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004f9e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004faa:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe0 <HAL_OSPIM_Config+0x660>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a0c      	ldr	r2, [pc, #48]	@ (8004fe0 <HAL_OSPIM_Config+0x660>)
 8004fb0:	f043 0301 	orr.w	r3, r3, #1
 8004fb4:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004fb6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d005      	beq.n	8004fce <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004fc2:	4b08      	ldr	r3, [pc, #32]	@ (8004fe4 <HAL_OSPIM_Config+0x664>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a07      	ldr	r2, [pc, #28]	@ (8004fe4 <HAL_OSPIM_Config+0x664>)
 8004fc8:	f043 0301 	orr.w	r3, r3, #1
 8004fcc:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004fce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3748      	adds	r7, #72	@ 0x48
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	50061c00 	.word	0x50061c00
 8004fe0:	a0001000 	.word	0xa0001000
 8004fe4:	a0001400 	.word	0xa0001400

08004fe8 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004ff8:	e01a      	b.n	8005030 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005000:	d016      	beq.n	8005030 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005002:	f7fd f85f 	bl	80020c4 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	429a      	cmp	r2, r3
 8005010:	d302      	bcc.n	8005018 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10b      	bne.n	8005030 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800501e:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005024:	f043 0201 	orr.w	r2, r3, #1
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	649a      	str	r2, [r3, #72]	@ 0x48

        return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e00e      	b.n	800504e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6a1a      	ldr	r2, [r3, #32]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	4013      	ands	r3, r2
 800503a:	2b00      	cmp	r3, #0
 800503c:	bf14      	ite	ne
 800503e:	2301      	movne	r3, #1
 8005040:	2300      	moveq	r3, #0
 8005042:	b2db      	uxtb	r3, r3
 8005044:	461a      	mov	r2, r3
 8005046:	79fb      	ldrb	r3, [r7, #7]
 8005048:	429a      	cmp	r2, r3
 800504a:	d1d6      	bne.n	8004ffa <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	4603      	mov	r3, r0
 8005060:	6039      	str	r1, [r7, #0]
 8005062:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8005064:	2300      	movs	r3, #0
 8005066:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800506c:	79fb      	ldrb	r3, [r7, #7]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <OSPIM_GetConfig+0x26>
 8005072:	79fb      	ldrb	r3, [r7, #7]
 8005074:	2b02      	cmp	r3, #2
 8005076:	d802      	bhi.n	800507e <OSPIM_GetConfig+0x26>
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d102      	bne.n	8005084 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	75fb      	strb	r3, [r7, #23]
 8005082:	e08e      	b.n	80051a2 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2200      	movs	r2, #0
 8005088:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2200      	movs	r2, #0
 800508e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2200      	movs	r2, #0
 8005094:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2200      	movs	r2, #0
 800509a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	2200      	movs	r2, #0
 80050a0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80050a2:	79fb      	ldrb	r3, [r7, #7]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d101      	bne.n	80050ac <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80050a8:	4b41      	ldr	r3, [pc, #260]	@ (80051b0 <OSPIM_GetConfig+0x158>)
 80050aa:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	e074      	b.n	800519c <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 80050b2:	4a40      	ldr	r2, [pc, #256]	@ (80051b4 <OSPIM_GetConfig+0x15c>)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00a      	beq.n	80050de <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	4053      	eors	r3, r2
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d103      	bne.n	80050de <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	4053      	eors	r3, r2
 80050ee:	f003 0320 	and.w	r3, r3, #32
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d103      	bne.n	80050fe <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	4053      	eors	r3, r2
 800510e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005112:	2b00      	cmp	r3, #0
 8005114:	d103      	bne.n	800511e <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d018      	beq.n	800515a <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	4053      	eors	r3, r2
 800512e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d111      	bne.n	800515a <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d106      	bne.n	800514e <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	3301      	adds	r3, #1
 8005144:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	60da      	str	r2, [r3, #12]
 800514c:	e005      	b.n	800515a <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	3301      	adds	r3, #1
 8005152:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d018      	beq.n	8005196 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	4053      	eors	r3, r2
 800516a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d111      	bne.n	8005196 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d106      	bne.n	800518a <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	3301      	adds	r3, #1
 8005180:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	611a      	str	r2, [r3, #16]
 8005188:	e005      	b.n	8005196 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	3301      	adds	r3, #1
 800518e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3301      	adds	r3, #1
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d987      	bls.n	80050b2 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80051a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	04040222 	.word	0x04040222
 80051b4:	50061c00 	.word	0x50061c00

080051b8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051bc:	4b05      	ldr	r3, [pc, #20]	@ (80051d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a04      	ldr	r2, [pc, #16]	@ (80051d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80051c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051c6:	6013      	str	r3, [r2, #0]
}
 80051c8:	bf00      	nop
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40007000 	.word	0x40007000

080051d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005214 <HAL_PWREx_GetVoltageRange+0x3c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051e8:	d102      	bne.n	80051f0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80051ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051ee:	e00b      	b.n	8005208 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80051f0:	4b08      	ldr	r3, [pc, #32]	@ (8005214 <HAL_PWREx_GetVoltageRange+0x3c>)
 80051f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051fe:	d102      	bne.n	8005206 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005200:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005204:	e000      	b.n	8005208 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005206:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005208:	4618      	mov	r0, r3
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40007000 	.word	0x40007000

08005218 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d141      	bne.n	80052aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005226:	4b4b      	ldr	r3, [pc, #300]	@ (8005354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800522e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005232:	d131      	bne.n	8005298 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005234:	4b47      	ldr	r3, [pc, #284]	@ (8005354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800523a:	4a46      	ldr	r2, [pc, #280]	@ (8005354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800523c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005240:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005244:	4b43      	ldr	r3, [pc, #268]	@ (8005354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800524c:	4a41      	ldr	r2, [pc, #260]	@ (8005354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800524e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005252:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005254:	4b40      	ldr	r3, [pc, #256]	@ (8005358 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2232      	movs	r2, #50	@ 0x32
 800525a:	fb02 f303 	mul.w	r3, r2, r3
 800525e:	4a3f      	ldr	r2, [pc, #252]	@ (800535c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005260:	fba2 2303 	umull	r2, r3, r2, r3
 8005264:	0c9b      	lsrs	r3, r3, #18
 8005266:	3301      	adds	r3, #1
 8005268:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800526a:	e002      	b.n	8005272 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	3b01      	subs	r3, #1
 8005270:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005272:	4b38      	ldr	r3, [pc, #224]	@ (8005354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800527a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800527e:	d102      	bne.n	8005286 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f2      	bne.n	800526c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005286:	4b33      	ldr	r3, [pc, #204]	@ (8005354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800528e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005292:	d158      	bne.n	8005346 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e057      	b.n	8005348 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005298:	4b2e      	ldr	r3, [pc, #184]	@ (8005354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800529a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800529e:	4a2d      	ldr	r2, [pc, #180]	@ (8005354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80052a8:	e04d      	b.n	8005346 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052b0:	d141      	bne.n	8005336 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052b2:	4b28      	ldr	r3, [pc, #160]	@ (8005354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80052ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052be:	d131      	bne.n	8005324 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052c0:	4b24      	ldr	r3, [pc, #144]	@ (8005354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052c6:	4a23      	ldr	r2, [pc, #140]	@ (8005354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052d0:	4b20      	ldr	r3, [pc, #128]	@ (8005354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80052d8:	4a1e      	ldr	r2, [pc, #120]	@ (8005354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80052de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80052e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005358 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2232      	movs	r2, #50	@ 0x32
 80052e6:	fb02 f303 	mul.w	r3, r2, r3
 80052ea:	4a1c      	ldr	r2, [pc, #112]	@ (800535c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052ec:	fba2 2303 	umull	r2, r3, r2, r3
 80052f0:	0c9b      	lsrs	r3, r3, #18
 80052f2:	3301      	adds	r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052f6:	e002      	b.n	80052fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052fe:	4b15      	ldr	r3, [pc, #84]	@ (8005354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800530a:	d102      	bne.n	8005312 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f2      	bne.n	80052f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005312:	4b10      	ldr	r3, [pc, #64]	@ (8005354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800531a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800531e:	d112      	bne.n	8005346 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e011      	b.n	8005348 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005324:	4b0b      	ldr	r3, [pc, #44]	@ (8005354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800532a:	4a0a      	ldr	r2, [pc, #40]	@ (8005354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800532c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005330:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005334:	e007      	b.n	8005346 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005336:	4b07      	ldr	r3, [pc, #28]	@ (8005354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800533e:	4a05      	ldr	r2, [pc, #20]	@ (8005354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005340:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005344:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	40007000 	.word	0x40007000
 8005358:	20000004 	.word	0x20000004
 800535c:	431bde83 	.word	0x431bde83

08005360 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b088      	sub	sp, #32
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d102      	bne.n	8005374 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	f000 bc08 	b.w	8005b84 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005374:	4b96      	ldr	r3, [pc, #600]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f003 030c 	and.w	r3, r3, #12
 800537c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800537e:	4b94      	ldr	r3, [pc, #592]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0310 	and.w	r3, r3, #16
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 80e4 	beq.w	800555e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d007      	beq.n	80053ac <HAL_RCC_OscConfig+0x4c>
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	2b0c      	cmp	r3, #12
 80053a0:	f040 808b 	bne.w	80054ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	f040 8087 	bne.w	80054ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053ac:	4b88      	ldr	r3, [pc, #544]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_RCC_OscConfig+0x64>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e3df      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a1a      	ldr	r2, [r3, #32]
 80053c8:	4b81      	ldr	r3, [pc, #516]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0308 	and.w	r3, r3, #8
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d004      	beq.n	80053de <HAL_RCC_OscConfig+0x7e>
 80053d4:	4b7e      	ldr	r3, [pc, #504]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053dc:	e005      	b.n	80053ea <HAL_RCC_OscConfig+0x8a>
 80053de:	4b7c      	ldr	r3, [pc, #496]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 80053e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053e4:	091b      	lsrs	r3, r3, #4
 80053e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d223      	bcs.n	8005436 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fdfe 	bl	8005ff4 <RCC_SetFlashLatencyFromMSIRange>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e3c0      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005402:	4b73      	ldr	r3, [pc, #460]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a72      	ldr	r2, [pc, #456]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 8005408:	f043 0308 	orr.w	r3, r3, #8
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	4b70      	ldr	r3, [pc, #448]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	496d      	ldr	r1, [pc, #436]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 800541c:	4313      	orrs	r3, r2
 800541e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005420:	4b6b      	ldr	r3, [pc, #428]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	021b      	lsls	r3, r3, #8
 800542e:	4968      	ldr	r1, [pc, #416]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 8005430:	4313      	orrs	r3, r2
 8005432:	604b      	str	r3, [r1, #4]
 8005434:	e025      	b.n	8005482 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005436:	4b66      	ldr	r3, [pc, #408]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a65      	ldr	r2, [pc, #404]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 800543c:	f043 0308 	orr.w	r3, r3, #8
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	4b63      	ldr	r3, [pc, #396]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	4960      	ldr	r1, [pc, #384]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 8005450:	4313      	orrs	r3, r2
 8005452:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005454:	4b5e      	ldr	r3, [pc, #376]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	021b      	lsls	r3, r3, #8
 8005462:	495b      	ldr	r1, [pc, #364]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 8005464:	4313      	orrs	r3, r2
 8005466:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d109      	bne.n	8005482 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fdbe 	bl	8005ff4 <RCC_SetFlashLatencyFromMSIRange>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e380      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005482:	f000 fcc1 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8005486:	4602      	mov	r2, r0
 8005488:	4b51      	ldr	r3, [pc, #324]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	091b      	lsrs	r3, r3, #4
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	4950      	ldr	r1, [pc, #320]	@ (80055d4 <HAL_RCC_OscConfig+0x274>)
 8005494:	5ccb      	ldrb	r3, [r1, r3]
 8005496:	f003 031f 	and.w	r3, r3, #31
 800549a:	fa22 f303 	lsr.w	r3, r2, r3
 800549e:	4a4e      	ldr	r2, [pc, #312]	@ (80055d8 <HAL_RCC_OscConfig+0x278>)
 80054a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80054a2:	4b4e      	ldr	r3, [pc, #312]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fc faaa 	bl	8001a00 <HAL_InitTick>
 80054ac:	4603      	mov	r3, r0
 80054ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d052      	beq.n	800555c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80054b6:	7bfb      	ldrb	r3, [r7, #15]
 80054b8:	e364      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d032      	beq.n	8005528 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80054c2:	4b43      	ldr	r3, [pc, #268]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a42      	ldr	r2, [pc, #264]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 80054c8:	f043 0301 	orr.w	r3, r3, #1
 80054cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054ce:	f7fc fdf9 	bl	80020c4 <HAL_GetTick>
 80054d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054d4:	e008      	b.n	80054e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054d6:	f7fc fdf5 	bl	80020c4 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e34d      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054e8:	4b39      	ldr	r3, [pc, #228]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0f0      	beq.n	80054d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054f4:	4b36      	ldr	r3, [pc, #216]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a35      	ldr	r2, [pc, #212]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 80054fa:	f043 0308 	orr.w	r3, r3, #8
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	4b33      	ldr	r3, [pc, #204]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	4930      	ldr	r1, [pc, #192]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 800550e:	4313      	orrs	r3, r2
 8005510:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005512:	4b2f      	ldr	r3, [pc, #188]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	021b      	lsls	r3, r3, #8
 8005520:	492b      	ldr	r1, [pc, #172]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 8005522:	4313      	orrs	r3, r2
 8005524:	604b      	str	r3, [r1, #4]
 8005526:	e01a      	b.n	800555e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005528:	4b29      	ldr	r3, [pc, #164]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a28      	ldr	r2, [pc, #160]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 800552e:	f023 0301 	bic.w	r3, r3, #1
 8005532:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005534:	f7fc fdc6 	bl	80020c4 <HAL_GetTick>
 8005538:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800553c:	f7fc fdc2 	bl	80020c4 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e31a      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800554e:	4b20      	ldr	r3, [pc, #128]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1f0      	bne.n	800553c <HAL_RCC_OscConfig+0x1dc>
 800555a:	e000      	b.n	800555e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800555c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d073      	beq.n	8005652 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	2b08      	cmp	r3, #8
 800556e:	d005      	beq.n	800557c <HAL_RCC_OscConfig+0x21c>
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	2b0c      	cmp	r3, #12
 8005574:	d10e      	bne.n	8005594 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2b03      	cmp	r3, #3
 800557a:	d10b      	bne.n	8005594 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800557c:	4b14      	ldr	r3, [pc, #80]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d063      	beq.n	8005650 <HAL_RCC_OscConfig+0x2f0>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d15f      	bne.n	8005650 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e2f7      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800559c:	d106      	bne.n	80055ac <HAL_RCC_OscConfig+0x24c>
 800559e:	4b0c      	ldr	r3, [pc, #48]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a0b      	ldr	r2, [pc, #44]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 80055a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	e025      	b.n	80055f8 <HAL_RCC_OscConfig+0x298>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055b4:	d114      	bne.n	80055e0 <HAL_RCC_OscConfig+0x280>
 80055b6:	4b06      	ldr	r3, [pc, #24]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a05      	ldr	r2, [pc, #20]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 80055bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055c0:	6013      	str	r3, [r2, #0]
 80055c2:	4b03      	ldr	r3, [pc, #12]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a02      	ldr	r2, [pc, #8]	@ (80055d0 <HAL_RCC_OscConfig+0x270>)
 80055c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	e013      	b.n	80055f8 <HAL_RCC_OscConfig+0x298>
 80055d0:	40021000 	.word	0x40021000
 80055d4:	0800c1bc 	.word	0x0800c1bc
 80055d8:	20000004 	.word	0x20000004
 80055dc:	20000018 	.word	0x20000018
 80055e0:	4ba0      	ldr	r3, [pc, #640]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a9f      	ldr	r2, [pc, #636]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 80055e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055ea:	6013      	str	r3, [r2, #0]
 80055ec:	4b9d      	ldr	r3, [pc, #628]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a9c      	ldr	r2, [pc, #624]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 80055f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d013      	beq.n	8005628 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005600:	f7fc fd60 	bl	80020c4 <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005608:	f7fc fd5c 	bl	80020c4 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b64      	cmp	r3, #100	@ 0x64
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e2b4      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800561a:	4b92      	ldr	r3, [pc, #584]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0f0      	beq.n	8005608 <HAL_RCC_OscConfig+0x2a8>
 8005626:	e014      	b.n	8005652 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005628:	f7fc fd4c 	bl	80020c4 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005630:	f7fc fd48 	bl	80020c4 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b64      	cmp	r3, #100	@ 0x64
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e2a0      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005642:	4b88      	ldr	r3, [pc, #544]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f0      	bne.n	8005630 <HAL_RCC_OscConfig+0x2d0>
 800564e:	e000      	b.n	8005652 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d060      	beq.n	8005720 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	2b04      	cmp	r3, #4
 8005662:	d005      	beq.n	8005670 <HAL_RCC_OscConfig+0x310>
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	2b0c      	cmp	r3, #12
 8005668:	d119      	bne.n	800569e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2b02      	cmp	r3, #2
 800566e:	d116      	bne.n	800569e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005670:	4b7c      	ldr	r3, [pc, #496]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005678:	2b00      	cmp	r3, #0
 800567a:	d005      	beq.n	8005688 <HAL_RCC_OscConfig+0x328>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e27d      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005688:	4b76      	ldr	r3, [pc, #472]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	061b      	lsls	r3, r3, #24
 8005696:	4973      	ldr	r1, [pc, #460]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 8005698:	4313      	orrs	r3, r2
 800569a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800569c:	e040      	b.n	8005720 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d023      	beq.n	80056ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056a6:	4b6f      	ldr	r3, [pc, #444]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a6e      	ldr	r2, [pc, #440]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 80056ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b2:	f7fc fd07 	bl	80020c4 <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ba:	f7fc fd03 	bl	80020c4 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e25b      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056cc:	4b65      	ldr	r3, [pc, #404]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0f0      	beq.n	80056ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d8:	4b62      	ldr	r3, [pc, #392]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	061b      	lsls	r3, r3, #24
 80056e6:	495f      	ldr	r1, [pc, #380]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	604b      	str	r3, [r1, #4]
 80056ec:	e018      	b.n	8005720 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ee:	4b5d      	ldr	r3, [pc, #372]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a5c      	ldr	r2, [pc, #368]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 80056f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fa:	f7fc fce3 	bl	80020c4 <HAL_GetTick>
 80056fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005700:	e008      	b.n	8005714 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005702:	f7fc fcdf 	bl	80020c4 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e237      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005714:	4b53      	ldr	r3, [pc, #332]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1f0      	bne.n	8005702 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0308 	and.w	r3, r3, #8
 8005728:	2b00      	cmp	r3, #0
 800572a:	d03c      	beq.n	80057a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01c      	beq.n	800576e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005734:	4b4b      	ldr	r3, [pc, #300]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 8005736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800573a:	4a4a      	ldr	r2, [pc, #296]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 800573c:	f043 0301 	orr.w	r3, r3, #1
 8005740:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005744:	f7fc fcbe 	bl	80020c4 <HAL_GetTick>
 8005748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800574a:	e008      	b.n	800575e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800574c:	f7fc fcba 	bl	80020c4 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b02      	cmp	r3, #2
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e212      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800575e:	4b41      	ldr	r3, [pc, #260]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 8005760:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0ef      	beq.n	800574c <HAL_RCC_OscConfig+0x3ec>
 800576c:	e01b      	b.n	80057a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800576e:	4b3d      	ldr	r3, [pc, #244]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 8005770:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005774:	4a3b      	ldr	r2, [pc, #236]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 8005776:	f023 0301 	bic.w	r3, r3, #1
 800577a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577e:	f7fc fca1 	bl	80020c4 <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005784:	e008      	b.n	8005798 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005786:	f7fc fc9d 	bl	80020c4 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e1f5      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005798:	4b32      	ldr	r3, [pc, #200]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 800579a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1ef      	bne.n	8005786 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0304 	and.w	r3, r3, #4
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 80a6 	beq.w	8005900 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057b4:	2300      	movs	r3, #0
 80057b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80057b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 80057ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10d      	bne.n	80057e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057c4:	4b27      	ldr	r3, [pc, #156]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 80057c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c8:	4a26      	ldr	r2, [pc, #152]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 80057ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80057d0:	4b24      	ldr	r3, [pc, #144]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 80057d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057d8:	60bb      	str	r3, [r7, #8]
 80057da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057dc:	2301      	movs	r3, #1
 80057de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057e0:	4b21      	ldr	r3, [pc, #132]	@ (8005868 <HAL_RCC_OscConfig+0x508>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d118      	bne.n	800581e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057ec:	4b1e      	ldr	r3, [pc, #120]	@ (8005868 <HAL_RCC_OscConfig+0x508>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005868 <HAL_RCC_OscConfig+0x508>)
 80057f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057f8:	f7fc fc64 	bl	80020c4 <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005800:	f7fc fc60 	bl	80020c4 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e1b8      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005812:	4b15      	ldr	r3, [pc, #84]	@ (8005868 <HAL_RCC_OscConfig+0x508>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0f0      	beq.n	8005800 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d108      	bne.n	8005838 <HAL_RCC_OscConfig+0x4d8>
 8005826:	4b0f      	ldr	r3, [pc, #60]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 8005828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800582c:	4a0d      	ldr	r2, [pc, #52]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 800582e:	f043 0301 	orr.w	r3, r3, #1
 8005832:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005836:	e029      	b.n	800588c <HAL_RCC_OscConfig+0x52c>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	2b05      	cmp	r3, #5
 800583e:	d115      	bne.n	800586c <HAL_RCC_OscConfig+0x50c>
 8005840:	4b08      	ldr	r3, [pc, #32]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 8005842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005846:	4a07      	ldr	r2, [pc, #28]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 8005848:	f043 0304 	orr.w	r3, r3, #4
 800584c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005850:	4b04      	ldr	r3, [pc, #16]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 8005852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005856:	4a03      	ldr	r2, [pc, #12]	@ (8005864 <HAL_RCC_OscConfig+0x504>)
 8005858:	f043 0301 	orr.w	r3, r3, #1
 800585c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005860:	e014      	b.n	800588c <HAL_RCC_OscConfig+0x52c>
 8005862:	bf00      	nop
 8005864:	40021000 	.word	0x40021000
 8005868:	40007000 	.word	0x40007000
 800586c:	4b9d      	ldr	r3, [pc, #628]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 800586e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005872:	4a9c      	ldr	r2, [pc, #624]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 8005874:	f023 0301 	bic.w	r3, r3, #1
 8005878:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800587c:	4b99      	ldr	r3, [pc, #612]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 800587e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005882:	4a98      	ldr	r2, [pc, #608]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 8005884:	f023 0304 	bic.w	r3, r3, #4
 8005888:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d016      	beq.n	80058c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005894:	f7fc fc16 	bl	80020c4 <HAL_GetTick>
 8005898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800589a:	e00a      	b.n	80058b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800589c:	f7fc fc12 	bl	80020c4 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e168      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058b2:	4b8c      	ldr	r3, [pc, #560]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 80058b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0ed      	beq.n	800589c <HAL_RCC_OscConfig+0x53c>
 80058c0:	e015      	b.n	80058ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c2:	f7fc fbff 	bl	80020c4 <HAL_GetTick>
 80058c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058c8:	e00a      	b.n	80058e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ca:	f7fc fbfb 	bl	80020c4 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058d8:	4293      	cmp	r3, r2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e151      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058e0:	4b80      	ldr	r3, [pc, #512]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 80058e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1ed      	bne.n	80058ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058ee:	7ffb      	ldrb	r3, [r7, #31]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d105      	bne.n	8005900 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058f4:	4b7b      	ldr	r3, [pc, #492]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 80058f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f8:	4a7a      	ldr	r2, [pc, #488]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 80058fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058fe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0320 	and.w	r3, r3, #32
 8005908:	2b00      	cmp	r3, #0
 800590a:	d03c      	beq.n	8005986 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005910:	2b00      	cmp	r3, #0
 8005912:	d01c      	beq.n	800594e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005914:	4b73      	ldr	r3, [pc, #460]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 8005916:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800591a:	4a72      	ldr	r2, [pc, #456]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 800591c:	f043 0301 	orr.w	r3, r3, #1
 8005920:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005924:	f7fc fbce 	bl	80020c4 <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800592c:	f7fc fbca 	bl	80020c4 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e122      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800593e:	4b69      	ldr	r3, [pc, #420]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 8005940:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0ef      	beq.n	800592c <HAL_RCC_OscConfig+0x5cc>
 800594c:	e01b      	b.n	8005986 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800594e:	4b65      	ldr	r3, [pc, #404]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 8005950:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005954:	4a63      	ldr	r2, [pc, #396]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 8005956:	f023 0301 	bic.w	r3, r3, #1
 800595a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800595e:	f7fc fbb1 	bl	80020c4 <HAL_GetTick>
 8005962:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005964:	e008      	b.n	8005978 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005966:	f7fc fbad 	bl	80020c4 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d901      	bls.n	8005978 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e105      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005978:	4b5a      	ldr	r3, [pc, #360]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 800597a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1ef      	bne.n	8005966 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 80f9 	beq.w	8005b82 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005994:	2b02      	cmp	r3, #2
 8005996:	f040 80cf 	bne.w	8005b38 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800599a:	4b52      	ldr	r3, [pc, #328]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f003 0203 	and.w	r2, r3, #3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d12c      	bne.n	8005a08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b8:	3b01      	subs	r3, #1
 80059ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059bc:	429a      	cmp	r2, r3
 80059be:	d123      	bne.n	8005a08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d11b      	bne.n	8005a08 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059dc:	429a      	cmp	r2, r3
 80059de:	d113      	bne.n	8005a08 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ea:	085b      	lsrs	r3, r3, #1
 80059ec:	3b01      	subs	r3, #1
 80059ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d109      	bne.n	8005a08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fe:	085b      	lsrs	r3, r3, #1
 8005a00:	3b01      	subs	r3, #1
 8005a02:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d071      	beq.n	8005aec <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	2b0c      	cmp	r3, #12
 8005a0c:	d068      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a0e:	4b35      	ldr	r3, [pc, #212]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d105      	bne.n	8005a26 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005a1a:	4b32      	ldr	r3, [pc, #200]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e0ac      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a2a:	4b2e      	ldr	r3, [pc, #184]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a2d      	ldr	r2, [pc, #180]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 8005a30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a34:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a36:	f7fc fb45 	bl	80020c4 <HAL_GetTick>
 8005a3a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a3c:	e008      	b.n	8005a50 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a3e:	f7fc fb41 	bl	80020c4 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e099      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a50:	4b24      	ldr	r3, [pc, #144]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1f0      	bne.n	8005a3e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a5c:	4b21      	ldr	r3, [pc, #132]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 8005a5e:	68da      	ldr	r2, [r3, #12]
 8005a60:	4b21      	ldr	r3, [pc, #132]	@ (8005ae8 <HAL_RCC_OscConfig+0x788>)
 8005a62:	4013      	ands	r3, r2
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005a6c:	3a01      	subs	r2, #1
 8005a6e:	0112      	lsls	r2, r2, #4
 8005a70:	4311      	orrs	r1, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a76:	0212      	lsls	r2, r2, #8
 8005a78:	4311      	orrs	r1, r2
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a7e:	0852      	lsrs	r2, r2, #1
 8005a80:	3a01      	subs	r2, #1
 8005a82:	0552      	lsls	r2, r2, #21
 8005a84:	4311      	orrs	r1, r2
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005a8a:	0852      	lsrs	r2, r2, #1
 8005a8c:	3a01      	subs	r2, #1
 8005a8e:	0652      	lsls	r2, r2, #25
 8005a90:	4311      	orrs	r1, r2
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a96:	06d2      	lsls	r2, r2, #27
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	4912      	ldr	r1, [pc, #72]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005aa0:	4b10      	ldr	r3, [pc, #64]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a0f      	ldr	r2, [pc, #60]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 8005aa6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005aaa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005aac:	4b0d      	ldr	r3, [pc, #52]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	4a0c      	ldr	r2, [pc, #48]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 8005ab2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ab6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ab8:	f7fc fb04 	bl	80020c4 <HAL_GetTick>
 8005abc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005abe:	e008      	b.n	8005ad2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac0:	f7fc fb00 	bl	80020c4 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e058      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ad2:	4b04      	ldr	r3, [pc, #16]	@ (8005ae4 <HAL_RCC_OscConfig+0x784>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0f0      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ade:	e050      	b.n	8005b82 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e04f      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
 8005ae4:	40021000 	.word	0x40021000
 8005ae8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aec:	4b27      	ldr	r3, [pc, #156]	@ (8005b8c <HAL_RCC_OscConfig+0x82c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d144      	bne.n	8005b82 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005af8:	4b24      	ldr	r3, [pc, #144]	@ (8005b8c <HAL_RCC_OscConfig+0x82c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a23      	ldr	r2, [pc, #140]	@ (8005b8c <HAL_RCC_OscConfig+0x82c>)
 8005afe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b04:	4b21      	ldr	r3, [pc, #132]	@ (8005b8c <HAL_RCC_OscConfig+0x82c>)
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	4a20      	ldr	r2, [pc, #128]	@ (8005b8c <HAL_RCC_OscConfig+0x82c>)
 8005b0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b10:	f7fc fad8 	bl	80020c4 <HAL_GetTick>
 8005b14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b18:	f7fc fad4 	bl	80020c4 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e02c      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b2a:	4b18      	ldr	r3, [pc, #96]	@ (8005b8c <HAL_RCC_OscConfig+0x82c>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0f0      	beq.n	8005b18 <HAL_RCC_OscConfig+0x7b8>
 8005b36:	e024      	b.n	8005b82 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	2b0c      	cmp	r3, #12
 8005b3c:	d01f      	beq.n	8005b7e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b3e:	4b13      	ldr	r3, [pc, #76]	@ (8005b8c <HAL_RCC_OscConfig+0x82c>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a12      	ldr	r2, [pc, #72]	@ (8005b8c <HAL_RCC_OscConfig+0x82c>)
 8005b44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4a:	f7fc fabb 	bl	80020c4 <HAL_GetTick>
 8005b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b50:	e008      	b.n	8005b64 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b52:	f7fc fab7 	bl	80020c4 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d901      	bls.n	8005b64 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e00f      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b64:	4b09      	ldr	r3, [pc, #36]	@ (8005b8c <HAL_RCC_OscConfig+0x82c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1f0      	bne.n	8005b52 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005b70:	4b06      	ldr	r3, [pc, #24]	@ (8005b8c <HAL_RCC_OscConfig+0x82c>)
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	4905      	ldr	r1, [pc, #20]	@ (8005b8c <HAL_RCC_OscConfig+0x82c>)
 8005b76:	4b06      	ldr	r3, [pc, #24]	@ (8005b90 <HAL_RCC_OscConfig+0x830>)
 8005b78:	4013      	ands	r3, r2
 8005b7a:	60cb      	str	r3, [r1, #12]
 8005b7c:	e001      	b.n	8005b82 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e000      	b.n	8005b84 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3720      	adds	r7, #32
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	feeefffc 	.word	0xfeeefffc

08005b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e11d      	b.n	8005de8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bac:	4b90      	ldr	r3, [pc, #576]	@ (8005df0 <HAL_RCC_ClockConfig+0x25c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 030f 	and.w	r3, r3, #15
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d910      	bls.n	8005bdc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bba:	4b8d      	ldr	r3, [pc, #564]	@ (8005df0 <HAL_RCC_ClockConfig+0x25c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f023 020f 	bic.w	r2, r3, #15
 8005bc2:	498b      	ldr	r1, [pc, #556]	@ (8005df0 <HAL_RCC_ClockConfig+0x25c>)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bca:	4b89      	ldr	r3, [pc, #548]	@ (8005df0 <HAL_RCC_ClockConfig+0x25c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 030f 	and.w	r3, r3, #15
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d001      	beq.n	8005bdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e105      	b.n	8005de8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d010      	beq.n	8005c0a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	4b81      	ldr	r3, [pc, #516]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d908      	bls.n	8005c0a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bf8:	4b7e      	ldr	r3, [pc, #504]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	497b      	ldr	r1, [pc, #492]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d079      	beq.n	8005d0a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d11e      	bne.n	8005c5c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c1e:	4b75      	ldr	r3, [pc, #468]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e0dc      	b.n	8005de8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005c2e:	f000 fa3b 	bl	80060a8 <RCC_GetSysClockFreqFromPLLSource>
 8005c32:	4603      	mov	r3, r0
 8005c34:	4a70      	ldr	r2, [pc, #448]	@ (8005df8 <HAL_RCC_ClockConfig+0x264>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d946      	bls.n	8005cc8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005c3a:	4b6e      	ldr	r3, [pc, #440]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d140      	bne.n	8005cc8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c46:	4b6b      	ldr	r3, [pc, #428]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c4e:	4a69      	ldr	r2, [pc, #420]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005c50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c56:	2380      	movs	r3, #128	@ 0x80
 8005c58:	617b      	str	r3, [r7, #20]
 8005c5a:	e035      	b.n	8005cc8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d107      	bne.n	8005c74 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c64:	4b63      	ldr	r3, [pc, #396]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d115      	bne.n	8005c9c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e0b9      	b.n	8005de8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d107      	bne.n	8005c8c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c7c:	4b5d      	ldr	r3, [pc, #372]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d109      	bne.n	8005c9c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e0ad      	b.n	8005de8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c8c:	4b59      	ldr	r3, [pc, #356]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e0a5      	b.n	8005de8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005c9c:	f000 f8b4 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	4a55      	ldr	r2, [pc, #340]	@ (8005df8 <HAL_RCC_ClockConfig+0x264>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d90f      	bls.n	8005cc8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005ca8:	4b52      	ldr	r3, [pc, #328]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d109      	bne.n	8005cc8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005cb4:	4b4f      	ldr	r3, [pc, #316]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cbc:	4a4d      	ldr	r2, [pc, #308]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cc2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005cc4:	2380      	movs	r3, #128	@ 0x80
 8005cc6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cc8:	4b4a      	ldr	r3, [pc, #296]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f023 0203 	bic.w	r2, r3, #3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	4947      	ldr	r1, [pc, #284]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cda:	f7fc f9f3 	bl	80020c4 <HAL_GetTick>
 8005cde:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ce0:	e00a      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ce2:	f7fc f9ef 	bl	80020c4 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e077      	b.n	8005de8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cf8:	4b3e      	ldr	r3, [pc, #248]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f003 020c 	and.w	r2, r3, #12
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d1eb      	bne.n	8005ce2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2b80      	cmp	r3, #128	@ 0x80
 8005d0e:	d105      	bne.n	8005d1c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d10:	4b38      	ldr	r3, [pc, #224]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	4a37      	ldr	r2, [pc, #220]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005d16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d1a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d010      	beq.n	8005d4a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	4b31      	ldr	r3, [pc, #196]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d208      	bcs.n	8005d4a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d38:	4b2e      	ldr	r3, [pc, #184]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	492b      	ldr	r1, [pc, #172]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d4a:	4b29      	ldr	r3, [pc, #164]	@ (8005df0 <HAL_RCC_ClockConfig+0x25c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d210      	bcs.n	8005d7a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d58:	4b25      	ldr	r3, [pc, #148]	@ (8005df0 <HAL_RCC_ClockConfig+0x25c>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f023 020f 	bic.w	r2, r3, #15
 8005d60:	4923      	ldr	r1, [pc, #140]	@ (8005df0 <HAL_RCC_ClockConfig+0x25c>)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d68:	4b21      	ldr	r3, [pc, #132]	@ (8005df0 <HAL_RCC_ClockConfig+0x25c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 030f 	and.w	r3, r3, #15
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d001      	beq.n	8005d7a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e036      	b.n	8005de8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0304 	and.w	r3, r3, #4
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d008      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d86:	4b1b      	ldr	r3, [pc, #108]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	4918      	ldr	r1, [pc, #96]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0308 	and.w	r3, r3, #8
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d009      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005da4:	4b13      	ldr	r3, [pc, #76]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	00db      	lsls	r3, r3, #3
 8005db2:	4910      	ldr	r1, [pc, #64]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005db8:	f000 f826 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	091b      	lsrs	r3, r3, #4
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	490c      	ldr	r1, [pc, #48]	@ (8005dfc <HAL_RCC_ClockConfig+0x268>)
 8005dca:	5ccb      	ldrb	r3, [r1, r3]
 8005dcc:	f003 031f 	and.w	r3, r3, #31
 8005dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8005e00 <HAL_RCC_ClockConfig+0x26c>)
 8005dd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8005e04 <HAL_RCC_ClockConfig+0x270>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fb fe0f 	bl	8001a00 <HAL_InitTick>
 8005de2:	4603      	mov	r3, r0
 8005de4:	73fb      	strb	r3, [r7, #15]

  return status;
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3718      	adds	r7, #24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40022000 	.word	0x40022000
 8005df4:	40021000 	.word	0x40021000
 8005df8:	04c4b400 	.word	0x04c4b400
 8005dfc:	0800c1bc 	.word	0x0800c1bc
 8005e00:	20000004 	.word	0x20000004
 8005e04:	20000018 	.word	0x20000018

08005e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b089      	sub	sp, #36	@ 0x24
 8005e0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	61fb      	str	r3, [r7, #28]
 8005e12:	2300      	movs	r3, #0
 8005e14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e16:	4b3e      	ldr	r3, [pc, #248]	@ (8005f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f003 030c 	and.w	r3, r3, #12
 8005e1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e20:	4b3b      	ldr	r3, [pc, #236]	@ (8005f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	f003 0303 	and.w	r3, r3, #3
 8005e28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d005      	beq.n	8005e3c <HAL_RCC_GetSysClockFreq+0x34>
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	2b0c      	cmp	r3, #12
 8005e34:	d121      	bne.n	8005e7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d11e      	bne.n	8005e7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e3c:	4b34      	ldr	r3, [pc, #208]	@ (8005f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0308 	and.w	r3, r3, #8
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d107      	bne.n	8005e58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e48:	4b31      	ldr	r3, [pc, #196]	@ (8005f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e4e:	0a1b      	lsrs	r3, r3, #8
 8005e50:	f003 030f 	and.w	r3, r3, #15
 8005e54:	61fb      	str	r3, [r7, #28]
 8005e56:	e005      	b.n	8005e64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e58:	4b2d      	ldr	r3, [pc, #180]	@ (8005f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	091b      	lsrs	r3, r3, #4
 8005e5e:	f003 030f 	and.w	r3, r3, #15
 8005e62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e64:	4a2b      	ldr	r2, [pc, #172]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10d      	bne.n	8005e90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e78:	e00a      	b.n	8005e90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	2b04      	cmp	r3, #4
 8005e7e:	d102      	bne.n	8005e86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e80:	4b25      	ldr	r3, [pc, #148]	@ (8005f18 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e82:	61bb      	str	r3, [r7, #24]
 8005e84:	e004      	b.n	8005e90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d101      	bne.n	8005e90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e8c:	4b23      	ldr	r3, [pc, #140]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0x114>)
 8005e8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	2b0c      	cmp	r3, #12
 8005e94:	d134      	bne.n	8005f00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e96:	4b1e      	ldr	r3, [pc, #120]	@ (8005f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d003      	beq.n	8005eae <HAL_RCC_GetSysClockFreq+0xa6>
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	d003      	beq.n	8005eb4 <HAL_RCC_GetSysClockFreq+0xac>
 8005eac:	e005      	b.n	8005eba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005eae:	4b1a      	ldr	r3, [pc, #104]	@ (8005f18 <HAL_RCC_GetSysClockFreq+0x110>)
 8005eb0:	617b      	str	r3, [r7, #20]
      break;
 8005eb2:	e005      	b.n	8005ec0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005eb4:	4b19      	ldr	r3, [pc, #100]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0x114>)
 8005eb6:	617b      	str	r3, [r7, #20]
      break;
 8005eb8:	e002      	b.n	8005ec0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	617b      	str	r3, [r7, #20]
      break;
 8005ebe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ec0:	4b13      	ldr	r3, [pc, #76]	@ (8005f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	091b      	lsrs	r3, r3, #4
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	3301      	adds	r3, #1
 8005ecc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005ece:	4b10      	ldr	r3, [pc, #64]	@ (8005f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	0a1b      	lsrs	r3, r3, #8
 8005ed4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	fb03 f202 	mul.w	r2, r3, r2
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8005f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	0e5b      	lsrs	r3, r3, #25
 8005eec:	f003 0303 	and.w	r3, r3, #3
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f00:	69bb      	ldr	r3, [r7, #24]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3724      	adds	r7, #36	@ 0x24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	40021000 	.word	0x40021000
 8005f14:	0800c1d4 	.word	0x0800c1d4
 8005f18:	00f42400 	.word	0x00f42400
 8005f1c:	007a1200 	.word	0x007a1200

08005f20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f24:	4b03      	ldr	r3, [pc, #12]	@ (8005f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f26:	681b      	ldr	r3, [r3, #0]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	20000004 	.word	0x20000004

08005f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f3c:	f7ff fff0 	bl	8005f20 <HAL_RCC_GetHCLKFreq>
 8005f40:	4602      	mov	r2, r0
 8005f42:	4b06      	ldr	r3, [pc, #24]	@ (8005f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	0a1b      	lsrs	r3, r3, #8
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	4904      	ldr	r1, [pc, #16]	@ (8005f60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f4e:	5ccb      	ldrb	r3, [r1, r3]
 8005f50:	f003 031f 	and.w	r3, r3, #31
 8005f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	40021000 	.word	0x40021000
 8005f60:	0800c1cc 	.word	0x0800c1cc

08005f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f68:	f7ff ffda 	bl	8005f20 <HAL_RCC_GetHCLKFreq>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	4b06      	ldr	r3, [pc, #24]	@ (8005f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	0adb      	lsrs	r3, r3, #11
 8005f74:	f003 0307 	and.w	r3, r3, #7
 8005f78:	4904      	ldr	r1, [pc, #16]	@ (8005f8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f7a:	5ccb      	ldrb	r3, [r1, r3]
 8005f7c:	f003 031f 	and.w	r3, r3, #31
 8005f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	0800c1cc 	.word	0x0800c1cc

08005f90 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	220f      	movs	r2, #15
 8005f9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005fa0:	4b12      	ldr	r3, [pc, #72]	@ (8005fec <HAL_RCC_GetClockConfig+0x5c>)
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f003 0203 	and.w	r2, r3, #3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005fac:	4b0f      	ldr	r3, [pc, #60]	@ (8005fec <HAL_RCC_GetClockConfig+0x5c>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8005fec <HAL_RCC_GetClockConfig+0x5c>)
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005fc4:	4b09      	ldr	r3, [pc, #36]	@ (8005fec <HAL_RCC_GetClockConfig+0x5c>)
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	08db      	lsrs	r3, r3, #3
 8005fca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005fd2:	4b07      	ldr	r3, [pc, #28]	@ (8005ff0 <HAL_RCC_GetClockConfig+0x60>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 020f 	and.w	r2, r3, #15
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	601a      	str	r2, [r3, #0]
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	40021000 	.word	0x40021000
 8005ff0:	40022000 	.word	0x40022000

08005ff4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006000:	4b27      	ldr	r3, [pc, #156]	@ (80060a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d003      	beq.n	8006014 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800600c:	f7ff f8e4 	bl	80051d8 <HAL_PWREx_GetVoltageRange>
 8006010:	6178      	str	r0, [r7, #20]
 8006012:	e014      	b.n	800603e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006014:	4b22      	ldr	r3, [pc, #136]	@ (80060a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006018:	4a21      	ldr	r2, [pc, #132]	@ (80060a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800601a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800601e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006020:	4b1f      	ldr	r3, [pc, #124]	@ (80060a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006024:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800602c:	f7ff f8d4 	bl	80051d8 <HAL_PWREx_GetVoltageRange>
 8006030:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006032:	4b1b      	ldr	r3, [pc, #108]	@ (80060a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006036:	4a1a      	ldr	r2, [pc, #104]	@ (80060a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006038:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800603c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006044:	d10b      	bne.n	800605e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b80      	cmp	r3, #128	@ 0x80
 800604a:	d913      	bls.n	8006074 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006050:	d902      	bls.n	8006058 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006052:	2302      	movs	r3, #2
 8006054:	613b      	str	r3, [r7, #16]
 8006056:	e00d      	b.n	8006074 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006058:	2301      	movs	r3, #1
 800605a:	613b      	str	r3, [r7, #16]
 800605c:	e00a      	b.n	8006074 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b7f      	cmp	r3, #127	@ 0x7f
 8006062:	d902      	bls.n	800606a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006064:	2302      	movs	r3, #2
 8006066:	613b      	str	r3, [r7, #16]
 8006068:	e004      	b.n	8006074 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b70      	cmp	r3, #112	@ 0x70
 800606e:	d101      	bne.n	8006074 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006070:	2301      	movs	r3, #1
 8006072:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006074:	4b0b      	ldr	r3, [pc, #44]	@ (80060a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f023 020f 	bic.w	r2, r3, #15
 800607c:	4909      	ldr	r1, [pc, #36]	@ (80060a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	4313      	orrs	r3, r2
 8006082:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006084:	4b07      	ldr	r3, [pc, #28]	@ (80060a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 030f 	and.w	r3, r3, #15
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	429a      	cmp	r2, r3
 8006090:	d001      	beq.n	8006096 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e000      	b.n	8006098 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	40021000 	.word	0x40021000
 80060a4:	40022000 	.word	0x40022000

080060a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80060ae:	4b2d      	ldr	r3, [pc, #180]	@ (8006164 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f003 0303 	and.w	r3, r3, #3
 80060b6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	d00b      	beq.n	80060d6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2b03      	cmp	r3, #3
 80060c2:	d825      	bhi.n	8006110 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d008      	beq.n	80060dc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d11f      	bne.n	8006110 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80060d0:	4b25      	ldr	r3, [pc, #148]	@ (8006168 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80060d2:	613b      	str	r3, [r7, #16]
    break;
 80060d4:	e01f      	b.n	8006116 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80060d6:	4b25      	ldr	r3, [pc, #148]	@ (800616c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80060d8:	613b      	str	r3, [r7, #16]
    break;
 80060da:	e01c      	b.n	8006116 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80060dc:	4b21      	ldr	r3, [pc, #132]	@ (8006164 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0308 	and.w	r3, r3, #8
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d107      	bne.n	80060f8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80060e8:	4b1e      	ldr	r3, [pc, #120]	@ (8006164 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060ee:	0a1b      	lsrs	r3, r3, #8
 80060f0:	f003 030f 	and.w	r3, r3, #15
 80060f4:	617b      	str	r3, [r7, #20]
 80060f6:	e005      	b.n	8006104 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80060f8:	4b1a      	ldr	r3, [pc, #104]	@ (8006164 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	091b      	lsrs	r3, r3, #4
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006104:	4a1a      	ldr	r2, [pc, #104]	@ (8006170 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800610c:	613b      	str	r3, [r7, #16]
    break;
 800610e:	e002      	b.n	8006116 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006110:	2300      	movs	r3, #0
 8006112:	613b      	str	r3, [r7, #16]
    break;
 8006114:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006116:	4b13      	ldr	r3, [pc, #76]	@ (8006164 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	091b      	lsrs	r3, r3, #4
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	3301      	adds	r3, #1
 8006122:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006124:	4b0f      	ldr	r3, [pc, #60]	@ (8006164 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	0a1b      	lsrs	r3, r3, #8
 800612a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	fb03 f202 	mul.w	r2, r3, r2
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	fbb2 f3f3 	udiv	r3, r2, r3
 800613a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800613c:	4b09      	ldr	r3, [pc, #36]	@ (8006164 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	0e5b      	lsrs	r3, r3, #25
 8006142:	f003 0303 	and.w	r3, r3, #3
 8006146:	3301      	adds	r3, #1
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	fbb2 f3f3 	udiv	r3, r2, r3
 8006154:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006156:	683b      	ldr	r3, [r7, #0]
}
 8006158:	4618      	mov	r0, r3
 800615a:	371c      	adds	r7, #28
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	40021000 	.word	0x40021000
 8006168:	00f42400 	.word	0x00f42400
 800616c:	007a1200 	.word	0x007a1200
 8006170:	0800c1d4 	.word	0x0800c1d4

08006174 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800617c:	2300      	movs	r3, #0
 800617e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006180:	2300      	movs	r3, #0
 8006182:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800618c:	2b00      	cmp	r3, #0
 800618e:	d040      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006194:	2b80      	cmp	r3, #128	@ 0x80
 8006196:	d02a      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006198:	2b80      	cmp	r3, #128	@ 0x80
 800619a:	d825      	bhi.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800619c:	2b60      	cmp	r3, #96	@ 0x60
 800619e:	d026      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80061a0:	2b60      	cmp	r3, #96	@ 0x60
 80061a2:	d821      	bhi.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80061a4:	2b40      	cmp	r3, #64	@ 0x40
 80061a6:	d006      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80061a8:	2b40      	cmp	r3, #64	@ 0x40
 80061aa:	d81d      	bhi.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d009      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	d010      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80061b4:	e018      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80061b6:	4b89      	ldr	r3, [pc, #548]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	4a88      	ldr	r2, [pc, #544]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061c0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061c2:	e015      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3304      	adds	r3, #4
 80061c8:	2100      	movs	r1, #0
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fb12 	bl	80067f4 <RCCEx_PLLSAI1_Config>
 80061d0:	4603      	mov	r3, r0
 80061d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061d4:	e00c      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	3320      	adds	r3, #32
 80061da:	2100      	movs	r1, #0
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 fbfd 	bl	80069dc <RCCEx_PLLSAI2_Config>
 80061e2:	4603      	mov	r3, r0
 80061e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061e6:	e003      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	74fb      	strb	r3, [r7, #19]
      break;
 80061ec:	e000      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80061ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061f0:	7cfb      	ldrb	r3, [r7, #19]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10b      	bne.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061f6:	4b79      	ldr	r3, [pc, #484]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061fc:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006204:	4975      	ldr	r1, [pc, #468]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800620c:	e001      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800620e:	7cfb      	ldrb	r3, [r7, #19]
 8006210:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d047      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006226:	d030      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006228:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800622c:	d82a      	bhi.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800622e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006232:	d02a      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006234:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006238:	d824      	bhi.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800623a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800623e:	d008      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006244:	d81e      	bhi.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800624a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800624e:	d010      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006250:	e018      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006252:	4b62      	ldr	r3, [pc, #392]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	4a61      	ldr	r2, [pc, #388]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800625c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800625e:	e015      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	3304      	adds	r3, #4
 8006264:	2100      	movs	r1, #0
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fac4 	bl	80067f4 <RCCEx_PLLSAI1_Config>
 800626c:	4603      	mov	r3, r0
 800626e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006270:	e00c      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3320      	adds	r3, #32
 8006276:	2100      	movs	r1, #0
 8006278:	4618      	mov	r0, r3
 800627a:	f000 fbaf 	bl	80069dc <RCCEx_PLLSAI2_Config>
 800627e:	4603      	mov	r3, r0
 8006280:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006282:	e003      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	74fb      	strb	r3, [r7, #19]
      break;
 8006288:	e000      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800628a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800628c:	7cfb      	ldrb	r3, [r7, #19]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10b      	bne.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006292:	4b52      	ldr	r3, [pc, #328]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006294:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006298:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062a0:	494e      	ldr	r1, [pc, #312]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80062a8:	e001      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062aa:	7cfb      	ldrb	r3, [r7, #19]
 80062ac:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 809f 	beq.w	80063fa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062bc:	2300      	movs	r3, #0
 80062be:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80062c0:	4b46      	ldr	r3, [pc, #280]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80062cc:	2301      	movs	r3, #1
 80062ce:	e000      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80062d0:	2300      	movs	r3, #0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00d      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062d6:	4b41      	ldr	r3, [pc, #260]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062da:	4a40      	ldr	r2, [pc, #256]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80062e2:	4b3e      	ldr	r3, [pc, #248]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062ea:	60bb      	str	r3, [r7, #8]
 80062ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062ee:	2301      	movs	r3, #1
 80062f0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062f2:	4b3b      	ldr	r3, [pc, #236]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a3a      	ldr	r2, [pc, #232]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80062f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062fe:	f7fb fee1 	bl	80020c4 <HAL_GetTick>
 8006302:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006304:	e009      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006306:	f7fb fedd 	bl	80020c4 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	2b02      	cmp	r3, #2
 8006312:	d902      	bls.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	74fb      	strb	r3, [r7, #19]
        break;
 8006318:	e005      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800631a:	4b31      	ldr	r3, [pc, #196]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0ef      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006326:	7cfb      	ldrb	r3, [r7, #19]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d15b      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800632c:	4b2b      	ldr	r3, [pc, #172]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800632e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006336:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d01f      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	429a      	cmp	r2, r3
 8006348:	d019      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800634a:	4b24      	ldr	r3, [pc, #144]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800634c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006350:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006354:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006356:	4b21      	ldr	r3, [pc, #132]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800635c:	4a1f      	ldr	r2, [pc, #124]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800635e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006362:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006366:	4b1d      	ldr	r3, [pc, #116]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800636c:	4a1b      	ldr	r2, [pc, #108]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800636e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006372:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006376:	4a19      	ldr	r2, [pc, #100]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	d016      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006388:	f7fb fe9c 	bl	80020c4 <HAL_GetTick>
 800638c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800638e:	e00b      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006390:	f7fb fe98 	bl	80020c4 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800639e:	4293      	cmp	r3, r2
 80063a0:	d902      	bls.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	74fb      	strb	r3, [r7, #19]
            break;
 80063a6:	e006      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063a8:	4b0c      	ldr	r3, [pc, #48]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d0ec      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80063b6:	7cfb      	ldrb	r3, [r7, #19]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10c      	bne.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063bc:	4b07      	ldr	r3, [pc, #28]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063cc:	4903      	ldr	r1, [pc, #12]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80063d4:	e008      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063d6:	7cfb      	ldrb	r3, [r7, #19]
 80063d8:	74bb      	strb	r3, [r7, #18]
 80063da:	e005      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80063dc:	40021000 	.word	0x40021000
 80063e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e4:	7cfb      	ldrb	r3, [r7, #19]
 80063e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063e8:	7c7b      	ldrb	r3, [r7, #17]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d105      	bne.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ee:	4ba0      	ldr	r3, [pc, #640]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063f2:	4a9f      	ldr	r2, [pc, #636]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00a      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006406:	4b9a      	ldr	r3, [pc, #616]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800640c:	f023 0203 	bic.w	r2, r3, #3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006414:	4996      	ldr	r1, [pc, #600]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006416:	4313      	orrs	r3, r2
 8006418:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00a      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006428:	4b91      	ldr	r3, [pc, #580]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800642a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800642e:	f023 020c 	bic.w	r2, r3, #12
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006436:	498e      	ldr	r1, [pc, #568]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006438:	4313      	orrs	r3, r2
 800643a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0304 	and.w	r3, r3, #4
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00a      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800644a:	4b89      	ldr	r3, [pc, #548]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800644c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006450:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006458:	4985      	ldr	r1, [pc, #532]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800645a:	4313      	orrs	r3, r2
 800645c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0308 	and.w	r3, r3, #8
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00a      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800646c:	4b80      	ldr	r3, [pc, #512]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800646e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006472:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800647a:	497d      	ldr	r1, [pc, #500]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800647c:	4313      	orrs	r3, r2
 800647e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0310 	and.w	r3, r3, #16
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00a      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800648e:	4b78      	ldr	r3, [pc, #480]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006494:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800649c:	4974      	ldr	r1, [pc, #464]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0320 	and.w	r3, r3, #32
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00a      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064b0:	4b6f      	ldr	r3, [pc, #444]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064be:	496c      	ldr	r1, [pc, #432]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064d2:	4b67      	ldr	r3, [pc, #412]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064e0:	4963      	ldr	r1, [pc, #396]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00a      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064f4:	4b5e      	ldr	r3, [pc, #376]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006502:	495b      	ldr	r1, [pc, #364]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006504:	4313      	orrs	r3, r2
 8006506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006516:	4b56      	ldr	r3, [pc, #344]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800651c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006524:	4952      	ldr	r1, [pc, #328]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006526:	4313      	orrs	r3, r2
 8006528:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00a      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006538:	4b4d      	ldr	r3, [pc, #308]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800653a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800653e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006546:	494a      	ldr	r1, [pc, #296]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006548:	4313      	orrs	r3, r2
 800654a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800655a:	4b45      	ldr	r3, [pc, #276]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800655c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006560:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006568:	4941      	ldr	r1, [pc, #260]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800656a:	4313      	orrs	r3, r2
 800656c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00a      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800657c:	4b3c      	ldr	r3, [pc, #240]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800657e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006582:	f023 0203 	bic.w	r2, r3, #3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800658a:	4939      	ldr	r1, [pc, #228]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800658c:	4313      	orrs	r3, r2
 800658e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d028      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800659e:	4b34      	ldr	r3, [pc, #208]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ac:	4930      	ldr	r1, [pc, #192]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065bc:	d106      	bne.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065be:	4b2c      	ldr	r3, [pc, #176]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	4a2b      	ldr	r2, [pc, #172]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065c8:	60d3      	str	r3, [r2, #12]
 80065ca:	e011      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065d4:	d10c      	bne.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	3304      	adds	r3, #4
 80065da:	2101      	movs	r1, #1
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 f909 	bl	80067f4 <RCCEx_PLLSAI1_Config>
 80065e2:	4603      	mov	r3, r0
 80065e4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80065e6:	7cfb      	ldrb	r3, [r7, #19]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80065ec:	7cfb      	ldrb	r3, [r7, #19]
 80065ee:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d04d      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006600:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006604:	d108      	bne.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006606:	4b1a      	ldr	r3, [pc, #104]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006608:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800660c:	4a18      	ldr	r2, [pc, #96]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800660e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006612:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006616:	e012      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006618:	4b15      	ldr	r3, [pc, #84]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800661a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800661e:	4a14      	ldr	r2, [pc, #80]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006620:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006624:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006628:	4b11      	ldr	r3, [pc, #68]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800662a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800662e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006636:	490e      	ldr	r1, [pc, #56]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006638:	4313      	orrs	r3, r2
 800663a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006642:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006646:	d106      	bne.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006648:	4b09      	ldr	r3, [pc, #36]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	4a08      	ldr	r2, [pc, #32]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800664e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006652:	60d3      	str	r3, [r2, #12]
 8006654:	e020      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800665a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800665e:	d109      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006660:	4b03      	ldr	r3, [pc, #12]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	4a02      	ldr	r2, [pc, #8]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006666:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800666a:	60d3      	str	r3, [r2, #12]
 800666c:	e014      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800666e:	bf00      	nop
 8006670:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006678:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800667c:	d10c      	bne.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3304      	adds	r3, #4
 8006682:	2101      	movs	r1, #1
 8006684:	4618      	mov	r0, r3
 8006686:	f000 f8b5 	bl	80067f4 <RCCEx_PLLSAI1_Config>
 800668a:	4603      	mov	r3, r0
 800668c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800668e:	7cfb      	ldrb	r3, [r7, #19]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006694:	7cfb      	ldrb	r3, [r7, #19]
 8006696:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d028      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066a4:	4b4a      	ldr	r3, [pc, #296]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066b2:	4947      	ldr	r1, [pc, #284]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066c2:	d106      	bne.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066c4:	4b42      	ldr	r3, [pc, #264]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	4a41      	ldr	r2, [pc, #260]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066ce:	60d3      	str	r3, [r2, #12]
 80066d0:	e011      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80066da:	d10c      	bne.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	3304      	adds	r3, #4
 80066e0:	2101      	movs	r1, #1
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 f886 	bl	80067f4 <RCCEx_PLLSAI1_Config>
 80066e8:	4603      	mov	r3, r0
 80066ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066ec:	7cfb      	ldrb	r3, [r7, #19]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80066f2:	7cfb      	ldrb	r3, [r7, #19]
 80066f4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d01e      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006702:	4b33      	ldr	r3, [pc, #204]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006708:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006712:	492f      	ldr	r1, [pc, #188]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006714:	4313      	orrs	r3, r2
 8006716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006720:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006724:	d10c      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3304      	adds	r3, #4
 800672a:	2102      	movs	r1, #2
 800672c:	4618      	mov	r0, r3
 800672e:	f000 f861 	bl	80067f4 <RCCEx_PLLSAI1_Config>
 8006732:	4603      	mov	r3, r0
 8006734:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006736:	7cfb      	ldrb	r3, [r7, #19]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800673c:	7cfb      	ldrb	r3, [r7, #19]
 800673e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00b      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800674c:	4b20      	ldr	r3, [pc, #128]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800674e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006752:	f023 0204 	bic.w	r2, r3, #4
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800675c:	491c      	ldr	r1, [pc, #112]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800675e:	4313      	orrs	r3, r2
 8006760:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00b      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006770:	4b17      	ldr	r3, [pc, #92]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006772:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006776:	f023 0218 	bic.w	r2, r3, #24
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006780:	4913      	ldr	r1, [pc, #76]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006782:	4313      	orrs	r3, r2
 8006784:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d017      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006794:	4b0e      	ldr	r3, [pc, #56]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006796:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800679a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067a4:	490a      	ldr	r1, [pc, #40]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067b6:	d105      	bne.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067b8:	4b05      	ldr	r3, [pc, #20]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	4a04      	ldr	r2, [pc, #16]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80067c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	40021000 	.word	0x40021000

080067d4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80067d4:	b480      	push	{r7}
 80067d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80067d8:	4b05      	ldr	r3, [pc, #20]	@ (80067f0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a04      	ldr	r2, [pc, #16]	@ (80067f0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80067de:	f043 0304 	orr.w	r3, r3, #4
 80067e2:	6013      	str	r3, [r2, #0]
}
 80067e4:	bf00      	nop
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	40021000 	.word	0x40021000

080067f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006802:	4b72      	ldr	r3, [pc, #456]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f003 0303 	and.w	r3, r3, #3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00e      	beq.n	800682c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800680e:	4b6f      	ldr	r3, [pc, #444]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f003 0203 	and.w	r2, r3, #3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d103      	bne.n	8006826 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
       ||
 8006822:	2b00      	cmp	r3, #0
 8006824:	d142      	bne.n	80068ac <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	73fb      	strb	r3, [r7, #15]
 800682a:	e03f      	b.n	80068ac <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b03      	cmp	r3, #3
 8006832:	d018      	beq.n	8006866 <RCCEx_PLLSAI1_Config+0x72>
 8006834:	2b03      	cmp	r3, #3
 8006836:	d825      	bhi.n	8006884 <RCCEx_PLLSAI1_Config+0x90>
 8006838:	2b01      	cmp	r3, #1
 800683a:	d002      	beq.n	8006842 <RCCEx_PLLSAI1_Config+0x4e>
 800683c:	2b02      	cmp	r3, #2
 800683e:	d009      	beq.n	8006854 <RCCEx_PLLSAI1_Config+0x60>
 8006840:	e020      	b.n	8006884 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006842:	4b62      	ldr	r3, [pc, #392]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d11d      	bne.n	800688a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006852:	e01a      	b.n	800688a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006854:	4b5d      	ldr	r3, [pc, #372]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800685c:	2b00      	cmp	r3, #0
 800685e:	d116      	bne.n	800688e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006864:	e013      	b.n	800688e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006866:	4b59      	ldr	r3, [pc, #356]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10f      	bne.n	8006892 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006872:	4b56      	ldr	r3, [pc, #344]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d109      	bne.n	8006892 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006882:	e006      	b.n	8006892 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	73fb      	strb	r3, [r7, #15]
      break;
 8006888:	e004      	b.n	8006894 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800688a:	bf00      	nop
 800688c:	e002      	b.n	8006894 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800688e:	bf00      	nop
 8006890:	e000      	b.n	8006894 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006892:	bf00      	nop
    }

    if(status == HAL_OK)
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d108      	bne.n	80068ac <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800689a:	4b4c      	ldr	r3, [pc, #304]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	f023 0203 	bic.w	r2, r3, #3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4949      	ldr	r1, [pc, #292]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f040 8086 	bne.w	80069c0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80068b4:	4b45      	ldr	r3, [pc, #276]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a44      	ldr	r2, [pc, #272]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80068ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068c0:	f7fb fc00 	bl	80020c4 <HAL_GetTick>
 80068c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068c6:	e009      	b.n	80068dc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068c8:	f7fb fbfc 	bl	80020c4 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d902      	bls.n	80068dc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	73fb      	strb	r3, [r7, #15]
        break;
 80068da:	e005      	b.n	80068e8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068dc:	4b3b      	ldr	r3, [pc, #236]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1ef      	bne.n	80068c8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d168      	bne.n	80069c0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d113      	bne.n	800691c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068f4:	4b35      	ldr	r3, [pc, #212]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80068f6:	691a      	ldr	r2, [r3, #16]
 80068f8:	4b35      	ldr	r3, [pc, #212]	@ (80069d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80068fa:	4013      	ands	r3, r2
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	6892      	ldr	r2, [r2, #8]
 8006900:	0211      	lsls	r1, r2, #8
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	68d2      	ldr	r2, [r2, #12]
 8006906:	06d2      	lsls	r2, r2, #27
 8006908:	4311      	orrs	r1, r2
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	6852      	ldr	r2, [r2, #4]
 800690e:	3a01      	subs	r2, #1
 8006910:	0112      	lsls	r2, r2, #4
 8006912:	430a      	orrs	r2, r1
 8006914:	492d      	ldr	r1, [pc, #180]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006916:	4313      	orrs	r3, r2
 8006918:	610b      	str	r3, [r1, #16]
 800691a:	e02d      	b.n	8006978 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d115      	bne.n	800694e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006922:	4b2a      	ldr	r3, [pc, #168]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006924:	691a      	ldr	r2, [r3, #16]
 8006926:	4b2b      	ldr	r3, [pc, #172]	@ (80069d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006928:	4013      	ands	r3, r2
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	6892      	ldr	r2, [r2, #8]
 800692e:	0211      	lsls	r1, r2, #8
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6912      	ldr	r2, [r2, #16]
 8006934:	0852      	lsrs	r2, r2, #1
 8006936:	3a01      	subs	r2, #1
 8006938:	0552      	lsls	r2, r2, #21
 800693a:	4311      	orrs	r1, r2
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6852      	ldr	r2, [r2, #4]
 8006940:	3a01      	subs	r2, #1
 8006942:	0112      	lsls	r2, r2, #4
 8006944:	430a      	orrs	r2, r1
 8006946:	4921      	ldr	r1, [pc, #132]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006948:	4313      	orrs	r3, r2
 800694a:	610b      	str	r3, [r1, #16]
 800694c:	e014      	b.n	8006978 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800694e:	4b1f      	ldr	r3, [pc, #124]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006950:	691a      	ldr	r2, [r3, #16]
 8006952:	4b21      	ldr	r3, [pc, #132]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006954:	4013      	ands	r3, r2
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	6892      	ldr	r2, [r2, #8]
 800695a:	0211      	lsls	r1, r2, #8
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6952      	ldr	r2, [r2, #20]
 8006960:	0852      	lsrs	r2, r2, #1
 8006962:	3a01      	subs	r2, #1
 8006964:	0652      	lsls	r2, r2, #25
 8006966:	4311      	orrs	r1, r2
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	6852      	ldr	r2, [r2, #4]
 800696c:	3a01      	subs	r2, #1
 800696e:	0112      	lsls	r2, r2, #4
 8006970:	430a      	orrs	r2, r1
 8006972:	4916      	ldr	r1, [pc, #88]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006974:	4313      	orrs	r3, r2
 8006976:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006978:	4b14      	ldr	r3, [pc, #80]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a13      	ldr	r2, [pc, #76]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 800697e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006982:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006984:	f7fb fb9e 	bl	80020c4 <HAL_GetTick>
 8006988:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800698a:	e009      	b.n	80069a0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800698c:	f7fb fb9a 	bl	80020c4 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	2b02      	cmp	r3, #2
 8006998:	d902      	bls.n	80069a0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	73fb      	strb	r3, [r7, #15]
          break;
 800699e:	e005      	b.n	80069ac <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80069a0:	4b0a      	ldr	r3, [pc, #40]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0ef      	beq.n	800698c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d106      	bne.n	80069c0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80069b2:	4b06      	ldr	r3, [pc, #24]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80069b4:	691a      	ldr	r2, [r3, #16]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	4904      	ldr	r1, [pc, #16]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	40021000 	.word	0x40021000
 80069d0:	07ff800f 	.word	0x07ff800f
 80069d4:	ff9f800f 	.word	0xff9f800f
 80069d8:	f9ff800f 	.word	0xf9ff800f

080069dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80069ea:	4b72      	ldr	r3, [pc, #456]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00e      	beq.n	8006a14 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80069f6:	4b6f      	ldr	r3, [pc, #444]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	f003 0203 	and.w	r2, r3, #3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d103      	bne.n	8006a0e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
       ||
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d142      	bne.n	8006a94 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	73fb      	strb	r3, [r7, #15]
 8006a12:	e03f      	b.n	8006a94 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b03      	cmp	r3, #3
 8006a1a:	d018      	beq.n	8006a4e <RCCEx_PLLSAI2_Config+0x72>
 8006a1c:	2b03      	cmp	r3, #3
 8006a1e:	d825      	bhi.n	8006a6c <RCCEx_PLLSAI2_Config+0x90>
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d002      	beq.n	8006a2a <RCCEx_PLLSAI2_Config+0x4e>
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d009      	beq.n	8006a3c <RCCEx_PLLSAI2_Config+0x60>
 8006a28:	e020      	b.n	8006a6c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a2a:	4b62      	ldr	r3, [pc, #392]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d11d      	bne.n	8006a72 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a3a:	e01a      	b.n	8006a72 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a3c:	4b5d      	ldr	r3, [pc, #372]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d116      	bne.n	8006a76 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a4c:	e013      	b.n	8006a76 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a4e:	4b59      	ldr	r3, [pc, #356]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10f      	bne.n	8006a7a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a5a:	4b56      	ldr	r3, [pc, #344]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d109      	bne.n	8006a7a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a6a:	e006      	b.n	8006a7a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a70:	e004      	b.n	8006a7c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a72:	bf00      	nop
 8006a74:	e002      	b.n	8006a7c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a76:	bf00      	nop
 8006a78:	e000      	b.n	8006a7c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d108      	bne.n	8006a94 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006a82:	4b4c      	ldr	r3, [pc, #304]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	f023 0203 	bic.w	r2, r3, #3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4949      	ldr	r1, [pc, #292]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f040 8086 	bne.w	8006ba8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006a9c:	4b45      	ldr	r3, [pc, #276]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a44      	ldr	r2, [pc, #272]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006aa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006aa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aa8:	f7fb fb0c 	bl	80020c4 <HAL_GetTick>
 8006aac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006aae:	e009      	b.n	8006ac4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006ab0:	f7fb fb08 	bl	80020c4 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d902      	bls.n	8006ac4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	73fb      	strb	r3, [r7, #15]
        break;
 8006ac2:	e005      	b.n	8006ad0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006ac4:	4b3b      	ldr	r3, [pc, #236]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1ef      	bne.n	8006ab0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d168      	bne.n	8006ba8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d113      	bne.n	8006b04 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006adc:	4b35      	ldr	r3, [pc, #212]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ade:	695a      	ldr	r2, [r3, #20]
 8006ae0:	4b35      	ldr	r3, [pc, #212]	@ (8006bb8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	6892      	ldr	r2, [r2, #8]
 8006ae8:	0211      	lsls	r1, r2, #8
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	68d2      	ldr	r2, [r2, #12]
 8006aee:	06d2      	lsls	r2, r2, #27
 8006af0:	4311      	orrs	r1, r2
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	6852      	ldr	r2, [r2, #4]
 8006af6:	3a01      	subs	r2, #1
 8006af8:	0112      	lsls	r2, r2, #4
 8006afa:	430a      	orrs	r2, r1
 8006afc:	492d      	ldr	r1, [pc, #180]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	614b      	str	r3, [r1, #20]
 8006b02:	e02d      	b.n	8006b60 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d115      	bne.n	8006b36 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b0c:	695a      	ldr	r2, [r3, #20]
 8006b0e:	4b2b      	ldr	r3, [pc, #172]	@ (8006bbc <RCCEx_PLLSAI2_Config+0x1e0>)
 8006b10:	4013      	ands	r3, r2
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	6892      	ldr	r2, [r2, #8]
 8006b16:	0211      	lsls	r1, r2, #8
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	6912      	ldr	r2, [r2, #16]
 8006b1c:	0852      	lsrs	r2, r2, #1
 8006b1e:	3a01      	subs	r2, #1
 8006b20:	0552      	lsls	r2, r2, #21
 8006b22:	4311      	orrs	r1, r2
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6852      	ldr	r2, [r2, #4]
 8006b28:	3a01      	subs	r2, #1
 8006b2a:	0112      	lsls	r2, r2, #4
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	4921      	ldr	r1, [pc, #132]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	614b      	str	r3, [r1, #20]
 8006b34:	e014      	b.n	8006b60 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b36:	4b1f      	ldr	r3, [pc, #124]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b38:	695a      	ldr	r2, [r3, #20]
 8006b3a:	4b21      	ldr	r3, [pc, #132]	@ (8006bc0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	6892      	ldr	r2, [r2, #8]
 8006b42:	0211      	lsls	r1, r2, #8
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6952      	ldr	r2, [r2, #20]
 8006b48:	0852      	lsrs	r2, r2, #1
 8006b4a:	3a01      	subs	r2, #1
 8006b4c:	0652      	lsls	r2, r2, #25
 8006b4e:	4311      	orrs	r1, r2
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6852      	ldr	r2, [r2, #4]
 8006b54:	3a01      	subs	r2, #1
 8006b56:	0112      	lsls	r2, r2, #4
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	4916      	ldr	r1, [pc, #88]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006b60:	4b14      	ldr	r3, [pc, #80]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a13      	ldr	r2, [pc, #76]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b6c:	f7fb faaa 	bl	80020c4 <HAL_GetTick>
 8006b70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b72:	e009      	b.n	8006b88 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b74:	f7fb faa6 	bl	80020c4 <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d902      	bls.n	8006b88 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	73fb      	strb	r3, [r7, #15]
          break;
 8006b86:	e005      	b.n	8006b94 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b88:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d0ef      	beq.n	8006b74 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d106      	bne.n	8006ba8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006b9a:	4b06      	ldr	r3, [pc, #24]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b9c:	695a      	ldr	r2, [r3, #20]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	4904      	ldr	r1, [pc, #16]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	40021000 	.word	0x40021000
 8006bb8:	07ff800f 	.word	0x07ff800f
 8006bbc:	ff9f800f 	.word	0xff9f800f
 8006bc0:	f9ff800f 	.word	0xf9ff800f

08006bc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e095      	b.n	8006d02 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d108      	bne.n	8006bf0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006be6:	d009      	beq.n	8006bfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	61da      	str	r2, [r3, #28]
 8006bee:	e005      	b.n	8006bfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d106      	bne.n	8006c1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7fa fd84 	bl	8001724 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c3c:	d902      	bls.n	8006c44 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60fb      	str	r3, [r7, #12]
 8006c42:	e002      	b.n	8006c4a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c48:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006c52:	d007      	beq.n	8006c64 <HAL_SPI_Init+0xa0>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c5c:	d002      	beq.n	8006c64 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006c74:	431a      	orrs	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c92:	431a      	orrs	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ca6:	ea42 0103 	orr.w	r1, r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	0c1b      	lsrs	r3, r3, #16
 8006cc0:	f003 0204 	and.w	r2, r3, #4
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc8:	f003 0310 	and.w	r3, r3, #16
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006ce0:	ea42 0103 	orr.w	r1, r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b082      	sub	sp, #8
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e049      	b.n	8006db0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d106      	bne.n	8006d36 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f841 	bl	8006db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2202      	movs	r2, #2
 8006d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3304      	adds	r3, #4
 8006d46:	4619      	mov	r1, r3
 8006d48:	4610      	mov	r0, r2
 8006d4a:	f000 f9d9 	bl	8007100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d001      	beq.n	8006de4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e04f      	b.n	8006e84 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68da      	ldr	r2, [r3, #12]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0201 	orr.w	r2, r2, #1
 8006dfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a23      	ldr	r2, [pc, #140]	@ (8006e90 <HAL_TIM_Base_Start_IT+0xc4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d01d      	beq.n	8006e42 <HAL_TIM_Base_Start_IT+0x76>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e0e:	d018      	beq.n	8006e42 <HAL_TIM_Base_Start_IT+0x76>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a1f      	ldr	r2, [pc, #124]	@ (8006e94 <HAL_TIM_Base_Start_IT+0xc8>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d013      	beq.n	8006e42 <HAL_TIM_Base_Start_IT+0x76>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8006e98 <HAL_TIM_Base_Start_IT+0xcc>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d00e      	beq.n	8006e42 <HAL_TIM_Base_Start_IT+0x76>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a1c      	ldr	r2, [pc, #112]	@ (8006e9c <HAL_TIM_Base_Start_IT+0xd0>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d009      	beq.n	8006e42 <HAL_TIM_Base_Start_IT+0x76>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a1b      	ldr	r2, [pc, #108]	@ (8006ea0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d004      	beq.n	8006e42 <HAL_TIM_Base_Start_IT+0x76>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a19      	ldr	r2, [pc, #100]	@ (8006ea4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d115      	bne.n	8006e6e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689a      	ldr	r2, [r3, #8]
 8006e48:	4b17      	ldr	r3, [pc, #92]	@ (8006ea8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2b06      	cmp	r3, #6
 8006e52:	d015      	beq.n	8006e80 <HAL_TIM_Base_Start_IT+0xb4>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e5a:	d011      	beq.n	8006e80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 0201 	orr.w	r2, r2, #1
 8006e6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e6c:	e008      	b.n	8006e80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f042 0201 	orr.w	r2, r2, #1
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	e000      	b.n	8006e82 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	40012c00 	.word	0x40012c00
 8006e94:	40000400 	.word	0x40000400
 8006e98:	40000800 	.word	0x40000800
 8006e9c:	40000c00 	.word	0x40000c00
 8006ea0:	40013400 	.word	0x40013400
 8006ea4:	40014000 	.word	0x40014000
 8006ea8:	00010007 	.word	0x00010007

08006eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d020      	beq.n	8006f10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d01b      	beq.n	8006f10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f06f 0202 	mvn.w	r2, #2
 8006ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f8e4 	bl	80070c4 <HAL_TIM_IC_CaptureCallback>
 8006efc:	e005      	b.n	8006f0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f8d6 	bl	80070b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f8e7 	bl	80070d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f003 0304 	and.w	r3, r3, #4
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d020      	beq.n	8006f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f003 0304 	and.w	r3, r3, #4
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d01b      	beq.n	8006f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f06f 0204 	mvn.w	r2, #4
 8006f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2202      	movs	r2, #2
 8006f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f8be 	bl	80070c4 <HAL_TIM_IC_CaptureCallback>
 8006f48:	e005      	b.n	8006f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f8b0 	bl	80070b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f8c1 	bl	80070d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f003 0308 	and.w	r3, r3, #8
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d020      	beq.n	8006fa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f003 0308 	and.w	r3, r3, #8
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d01b      	beq.n	8006fa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f06f 0208 	mvn.w	r2, #8
 8006f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2204      	movs	r2, #4
 8006f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	f003 0303 	and.w	r3, r3, #3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f898 	bl	80070c4 <HAL_TIM_IC_CaptureCallback>
 8006f94:	e005      	b.n	8006fa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f88a 	bl	80070b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f89b 	bl	80070d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f003 0310 	and.w	r3, r3, #16
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d020      	beq.n	8006ff4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f003 0310 	and.w	r3, r3, #16
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d01b      	beq.n	8006ff4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f06f 0210 	mvn.w	r2, #16
 8006fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2208      	movs	r2, #8
 8006fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f872 	bl	80070c4 <HAL_TIM_IC_CaptureCallback>
 8006fe0:	e005      	b.n	8006fee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f864 	bl	80070b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f875 	bl	80070d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00c      	beq.n	8007018 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b00      	cmp	r3, #0
 8007006:	d007      	beq.n	8007018 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f06f 0201 	mvn.w	r2, #1
 8007010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7fa f958 	bl	80012c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00c      	beq.n	800703c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007028:	2b00      	cmp	r3, #0
 800702a:	d007      	beq.n	800703c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f906 	bl	8007248 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00c      	beq.n	8007060 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800704c:	2b00      	cmp	r3, #0
 800704e:	d007      	beq.n	8007060 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f8fe 	bl	800725c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00c      	beq.n	8007084 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007070:	2b00      	cmp	r3, #0
 8007072:	d007      	beq.n	8007084 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800707c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f834 	bl	80070ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00c      	beq.n	80070a8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f003 0320 	and.w	r3, r3, #32
 8007094:	2b00      	cmp	r3, #0
 8007096:	d007      	beq.n	80070a8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f06f 0220 	mvn.w	r2, #32
 80070a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f8c6 	bl	8007234 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070a8:	bf00      	nop
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a40      	ldr	r2, [pc, #256]	@ (8007214 <TIM_Base_SetConfig+0x114>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d013      	beq.n	8007140 <TIM_Base_SetConfig+0x40>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800711e:	d00f      	beq.n	8007140 <TIM_Base_SetConfig+0x40>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a3d      	ldr	r2, [pc, #244]	@ (8007218 <TIM_Base_SetConfig+0x118>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d00b      	beq.n	8007140 <TIM_Base_SetConfig+0x40>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a3c      	ldr	r2, [pc, #240]	@ (800721c <TIM_Base_SetConfig+0x11c>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d007      	beq.n	8007140 <TIM_Base_SetConfig+0x40>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a3b      	ldr	r2, [pc, #236]	@ (8007220 <TIM_Base_SetConfig+0x120>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d003      	beq.n	8007140 <TIM_Base_SetConfig+0x40>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a3a      	ldr	r2, [pc, #232]	@ (8007224 <TIM_Base_SetConfig+0x124>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d108      	bne.n	8007152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	4313      	orrs	r3, r2
 8007150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a2f      	ldr	r2, [pc, #188]	@ (8007214 <TIM_Base_SetConfig+0x114>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d01f      	beq.n	800719a <TIM_Base_SetConfig+0x9a>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007160:	d01b      	beq.n	800719a <TIM_Base_SetConfig+0x9a>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a2c      	ldr	r2, [pc, #176]	@ (8007218 <TIM_Base_SetConfig+0x118>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d017      	beq.n	800719a <TIM_Base_SetConfig+0x9a>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a2b      	ldr	r2, [pc, #172]	@ (800721c <TIM_Base_SetConfig+0x11c>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d013      	beq.n	800719a <TIM_Base_SetConfig+0x9a>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a2a      	ldr	r2, [pc, #168]	@ (8007220 <TIM_Base_SetConfig+0x120>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d00f      	beq.n	800719a <TIM_Base_SetConfig+0x9a>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a29      	ldr	r2, [pc, #164]	@ (8007224 <TIM_Base_SetConfig+0x124>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d00b      	beq.n	800719a <TIM_Base_SetConfig+0x9a>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a28      	ldr	r2, [pc, #160]	@ (8007228 <TIM_Base_SetConfig+0x128>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d007      	beq.n	800719a <TIM_Base_SetConfig+0x9a>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a27      	ldr	r2, [pc, #156]	@ (800722c <TIM_Base_SetConfig+0x12c>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d003      	beq.n	800719a <TIM_Base_SetConfig+0x9a>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a26      	ldr	r2, [pc, #152]	@ (8007230 <TIM_Base_SetConfig+0x130>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d108      	bne.n	80071ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	689a      	ldr	r2, [r3, #8]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a10      	ldr	r2, [pc, #64]	@ (8007214 <TIM_Base_SetConfig+0x114>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d00f      	beq.n	80071f8 <TIM_Base_SetConfig+0xf8>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a12      	ldr	r2, [pc, #72]	@ (8007224 <TIM_Base_SetConfig+0x124>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d00b      	beq.n	80071f8 <TIM_Base_SetConfig+0xf8>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a11      	ldr	r2, [pc, #68]	@ (8007228 <TIM_Base_SetConfig+0x128>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d007      	beq.n	80071f8 <TIM_Base_SetConfig+0xf8>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a10      	ldr	r2, [pc, #64]	@ (800722c <TIM_Base_SetConfig+0x12c>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d003      	beq.n	80071f8 <TIM_Base_SetConfig+0xf8>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a0f      	ldr	r2, [pc, #60]	@ (8007230 <TIM_Base_SetConfig+0x130>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d103      	bne.n	8007200 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	691a      	ldr	r2, [r3, #16]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	615a      	str	r2, [r3, #20]
}
 8007206:	bf00      	nop
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	40012c00 	.word	0x40012c00
 8007218:	40000400 	.word	0x40000400
 800721c:	40000800 	.word	0x40000800
 8007220:	40000c00 	.word	0x40000c00
 8007224:	40013400 	.word	0x40013400
 8007228:	40014000 	.word	0x40014000
 800722c:	40014400 	.word	0x40014400
 8007230:	40014800 	.word	0x40014800

08007234 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e042      	b.n	8007308 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007288:	2b00      	cmp	r3, #0
 800728a:	d106      	bne.n	800729a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7fa fa89 	bl	80017ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2224      	movs	r2, #36	@ 0x24
 800729e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 0201 	bic.w	r2, r2, #1
 80072b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fc7c 	bl	8007bb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f97d 	bl	80075c0 <UART_SetConfig>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d101      	bne.n	80072d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e01b      	b.n	8007308 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689a      	ldr	r2, [r3, #8]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80072ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f042 0201 	orr.w	r2, r2, #1
 80072fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fcfb 	bl	8007cfc <UART_CheckIdleState>
 8007306:	4603      	mov	r3, r0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08a      	sub	sp, #40	@ 0x28
 8007314:	af02      	add	r7, sp, #8
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	603b      	str	r3, [r7, #0]
 800731c:	4613      	mov	r3, r2
 800731e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007326:	2b20      	cmp	r3, #32
 8007328:	d17b      	bne.n	8007422 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <HAL_UART_Transmit+0x26>
 8007330:	88fb      	ldrh	r3, [r7, #6]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e074      	b.n	8007424 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2221      	movs	r2, #33	@ 0x21
 8007346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800734a:	f7fa febb 	bl	80020c4 <HAL_GetTick>
 800734e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	88fa      	ldrh	r2, [r7, #6]
 8007354:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	88fa      	ldrh	r2, [r7, #6]
 800735c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007368:	d108      	bne.n	800737c <HAL_UART_Transmit+0x6c>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d104      	bne.n	800737c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007372:	2300      	movs	r3, #0
 8007374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	61bb      	str	r3, [r7, #24]
 800737a:	e003      	b.n	8007384 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007380:	2300      	movs	r3, #0
 8007382:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007384:	e030      	b.n	80073e8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	2200      	movs	r2, #0
 800738e:	2180      	movs	r1, #128	@ 0x80
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 fd5d 	bl	8007e50 <UART_WaitOnFlagUntilTimeout>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d005      	beq.n	80073a8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2220      	movs	r2, #32
 80073a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e03d      	b.n	8007424 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10b      	bne.n	80073c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	881a      	ldrh	r2, [r3, #0]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073ba:	b292      	uxth	r2, r2
 80073bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	3302      	adds	r3, #2
 80073c2:	61bb      	str	r3, [r7, #24]
 80073c4:	e007      	b.n	80073d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	781a      	ldrb	r2, [r3, #0]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	3301      	adds	r3, #1
 80073d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80073dc:	b29b      	uxth	r3, r3
 80073de:	3b01      	subs	r3, #1
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1c8      	bne.n	8007386 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	2200      	movs	r2, #0
 80073fc:	2140      	movs	r1, #64	@ 0x40
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 fd26 	bl	8007e50 <UART_WaitOnFlagUntilTimeout>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d005      	beq.n	8007416 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2220      	movs	r2, #32
 800740e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e006      	b.n	8007424 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2220      	movs	r2, #32
 800741a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	e000      	b.n	8007424 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007422:	2302      	movs	r3, #2
  }
}
 8007424:	4618      	mov	r0, r3
 8007426:	3720      	adds	r7, #32
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b08a      	sub	sp, #40	@ 0x28
 8007430:	af02      	add	r7, sp, #8
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	603b      	str	r3, [r7, #0]
 8007438:	4613      	mov	r3, r2
 800743a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007442:	2b20      	cmp	r3, #32
 8007444:	f040 80b6 	bne.w	80075b4 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d002      	beq.n	8007454 <HAL_UART_Receive+0x28>
 800744e:	88fb      	ldrh	r3, [r7, #6]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e0ae      	b.n	80075b6 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2222      	movs	r2, #34	@ 0x22
 8007464:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800746e:	f7fa fe29 	bl	80020c4 <HAL_GetTick>
 8007472:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	88fa      	ldrh	r2, [r7, #6]
 8007478:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	88fa      	ldrh	r2, [r7, #6]
 8007480:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800748c:	d10e      	bne.n	80074ac <HAL_UART_Receive+0x80>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d105      	bne.n	80074a2 <HAL_UART_Receive+0x76>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800749c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074a0:	e02d      	b.n	80074fe <HAL_UART_Receive+0xd2>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	22ff      	movs	r2, #255	@ 0xff
 80074a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074aa:	e028      	b.n	80074fe <HAL_UART_Receive+0xd2>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10d      	bne.n	80074d0 <HAL_UART_Receive+0xa4>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d104      	bne.n	80074c6 <HAL_UART_Receive+0x9a>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	22ff      	movs	r2, #255	@ 0xff
 80074c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074c4:	e01b      	b.n	80074fe <HAL_UART_Receive+0xd2>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	227f      	movs	r2, #127	@ 0x7f
 80074ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074ce:	e016      	b.n	80074fe <HAL_UART_Receive+0xd2>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074d8:	d10d      	bne.n	80074f6 <HAL_UART_Receive+0xca>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d104      	bne.n	80074ec <HAL_UART_Receive+0xc0>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	227f      	movs	r2, #127	@ 0x7f
 80074e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074ea:	e008      	b.n	80074fe <HAL_UART_Receive+0xd2>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	223f      	movs	r2, #63	@ 0x3f
 80074f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074f4:	e003      	b.n	80074fe <HAL_UART_Receive+0xd2>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007504:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800750e:	d108      	bne.n	8007522 <HAL_UART_Receive+0xf6>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d104      	bne.n	8007522 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007518:	2300      	movs	r3, #0
 800751a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	61bb      	str	r3, [r7, #24]
 8007520:	e003      	b.n	800752a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007526:	2300      	movs	r3, #0
 8007528:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800752a:	e037      	b.n	800759c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	2200      	movs	r2, #0
 8007534:	2120      	movs	r1, #32
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 fc8a 	bl	8007e50 <UART_WaitOnFlagUntilTimeout>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d005      	beq.n	800754e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2220      	movs	r2, #32
 8007546:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e033      	b.n	80075b6 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10c      	bne.n	800756e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800755a:	b29a      	uxth	r2, r3
 800755c:	8a7b      	ldrh	r3, [r7, #18]
 800755e:	4013      	ands	r3, r2
 8007560:	b29a      	uxth	r2, r3
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	3302      	adds	r3, #2
 800756a:	61bb      	str	r3, [r7, #24]
 800756c:	e00d      	b.n	800758a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007574:	b29b      	uxth	r3, r3
 8007576:	b2da      	uxtb	r2, r3
 8007578:	8a7b      	ldrh	r3, [r7, #18]
 800757a:	b2db      	uxtb	r3, r3
 800757c:	4013      	ands	r3, r2
 800757e:	b2da      	uxtb	r2, r3
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	3301      	adds	r3, #1
 8007588:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007590:	b29b      	uxth	r3, r3
 8007592:	3b01      	subs	r3, #1
 8007594:	b29a      	uxth	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1c1      	bne.n	800752c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2220      	movs	r2, #32
 80075ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	e000      	b.n	80075b6 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80075b4:	2302      	movs	r3, #2
  }
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3720      	adds	r7, #32
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
	...

080075c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075c4:	b08c      	sub	sp, #48	@ 0x30
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	689a      	ldr	r2, [r3, #8]
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	431a      	orrs	r2, r3
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	431a      	orrs	r2, r3
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	4baa      	ldr	r3, [pc, #680]	@ (8007898 <UART_SetConfig+0x2d8>)
 80075f0:	4013      	ands	r3, r2
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	6812      	ldr	r2, [r2, #0]
 80075f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075f8:	430b      	orrs	r3, r1
 80075fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a9f      	ldr	r2, [pc, #636]	@ (800789c <UART_SetConfig+0x2dc>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d004      	beq.n	800762c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007628:	4313      	orrs	r3, r2
 800762a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007636:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	6812      	ldr	r2, [r2, #0]
 800763e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007640:	430b      	orrs	r3, r1
 8007642:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800764a:	f023 010f 	bic.w	r1, r3, #15
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	430a      	orrs	r2, r1
 8007658:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a90      	ldr	r2, [pc, #576]	@ (80078a0 <UART_SetConfig+0x2e0>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d125      	bne.n	80076b0 <UART_SetConfig+0xf0>
 8007664:	4b8f      	ldr	r3, [pc, #572]	@ (80078a4 <UART_SetConfig+0x2e4>)
 8007666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800766a:	f003 0303 	and.w	r3, r3, #3
 800766e:	2b03      	cmp	r3, #3
 8007670:	d81a      	bhi.n	80076a8 <UART_SetConfig+0xe8>
 8007672:	a201      	add	r2, pc, #4	@ (adr r2, 8007678 <UART_SetConfig+0xb8>)
 8007674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007678:	08007689 	.word	0x08007689
 800767c:	08007699 	.word	0x08007699
 8007680:	08007691 	.word	0x08007691
 8007684:	080076a1 	.word	0x080076a1
 8007688:	2301      	movs	r3, #1
 800768a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800768e:	e116      	b.n	80078be <UART_SetConfig+0x2fe>
 8007690:	2302      	movs	r3, #2
 8007692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007696:	e112      	b.n	80078be <UART_SetConfig+0x2fe>
 8007698:	2304      	movs	r3, #4
 800769a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800769e:	e10e      	b.n	80078be <UART_SetConfig+0x2fe>
 80076a0:	2308      	movs	r3, #8
 80076a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076a6:	e10a      	b.n	80078be <UART_SetConfig+0x2fe>
 80076a8:	2310      	movs	r3, #16
 80076aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ae:	e106      	b.n	80078be <UART_SetConfig+0x2fe>
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a7c      	ldr	r2, [pc, #496]	@ (80078a8 <UART_SetConfig+0x2e8>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d138      	bne.n	800772c <UART_SetConfig+0x16c>
 80076ba:	4b7a      	ldr	r3, [pc, #488]	@ (80078a4 <UART_SetConfig+0x2e4>)
 80076bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076c0:	f003 030c 	and.w	r3, r3, #12
 80076c4:	2b0c      	cmp	r3, #12
 80076c6:	d82d      	bhi.n	8007724 <UART_SetConfig+0x164>
 80076c8:	a201      	add	r2, pc, #4	@ (adr r2, 80076d0 <UART_SetConfig+0x110>)
 80076ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ce:	bf00      	nop
 80076d0:	08007705 	.word	0x08007705
 80076d4:	08007725 	.word	0x08007725
 80076d8:	08007725 	.word	0x08007725
 80076dc:	08007725 	.word	0x08007725
 80076e0:	08007715 	.word	0x08007715
 80076e4:	08007725 	.word	0x08007725
 80076e8:	08007725 	.word	0x08007725
 80076ec:	08007725 	.word	0x08007725
 80076f0:	0800770d 	.word	0x0800770d
 80076f4:	08007725 	.word	0x08007725
 80076f8:	08007725 	.word	0x08007725
 80076fc:	08007725 	.word	0x08007725
 8007700:	0800771d 	.word	0x0800771d
 8007704:	2300      	movs	r3, #0
 8007706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800770a:	e0d8      	b.n	80078be <UART_SetConfig+0x2fe>
 800770c:	2302      	movs	r3, #2
 800770e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007712:	e0d4      	b.n	80078be <UART_SetConfig+0x2fe>
 8007714:	2304      	movs	r3, #4
 8007716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800771a:	e0d0      	b.n	80078be <UART_SetConfig+0x2fe>
 800771c:	2308      	movs	r3, #8
 800771e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007722:	e0cc      	b.n	80078be <UART_SetConfig+0x2fe>
 8007724:	2310      	movs	r3, #16
 8007726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800772a:	e0c8      	b.n	80078be <UART_SetConfig+0x2fe>
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a5e      	ldr	r2, [pc, #376]	@ (80078ac <UART_SetConfig+0x2ec>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d125      	bne.n	8007782 <UART_SetConfig+0x1c2>
 8007736:	4b5b      	ldr	r3, [pc, #364]	@ (80078a4 <UART_SetConfig+0x2e4>)
 8007738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800773c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007740:	2b30      	cmp	r3, #48	@ 0x30
 8007742:	d016      	beq.n	8007772 <UART_SetConfig+0x1b2>
 8007744:	2b30      	cmp	r3, #48	@ 0x30
 8007746:	d818      	bhi.n	800777a <UART_SetConfig+0x1ba>
 8007748:	2b20      	cmp	r3, #32
 800774a:	d00a      	beq.n	8007762 <UART_SetConfig+0x1a2>
 800774c:	2b20      	cmp	r3, #32
 800774e:	d814      	bhi.n	800777a <UART_SetConfig+0x1ba>
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <UART_SetConfig+0x19a>
 8007754:	2b10      	cmp	r3, #16
 8007756:	d008      	beq.n	800776a <UART_SetConfig+0x1aa>
 8007758:	e00f      	b.n	800777a <UART_SetConfig+0x1ba>
 800775a:	2300      	movs	r3, #0
 800775c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007760:	e0ad      	b.n	80078be <UART_SetConfig+0x2fe>
 8007762:	2302      	movs	r3, #2
 8007764:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007768:	e0a9      	b.n	80078be <UART_SetConfig+0x2fe>
 800776a:	2304      	movs	r3, #4
 800776c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007770:	e0a5      	b.n	80078be <UART_SetConfig+0x2fe>
 8007772:	2308      	movs	r3, #8
 8007774:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007778:	e0a1      	b.n	80078be <UART_SetConfig+0x2fe>
 800777a:	2310      	movs	r3, #16
 800777c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007780:	e09d      	b.n	80078be <UART_SetConfig+0x2fe>
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a4a      	ldr	r2, [pc, #296]	@ (80078b0 <UART_SetConfig+0x2f0>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d125      	bne.n	80077d8 <UART_SetConfig+0x218>
 800778c:	4b45      	ldr	r3, [pc, #276]	@ (80078a4 <UART_SetConfig+0x2e4>)
 800778e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007792:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007796:	2bc0      	cmp	r3, #192	@ 0xc0
 8007798:	d016      	beq.n	80077c8 <UART_SetConfig+0x208>
 800779a:	2bc0      	cmp	r3, #192	@ 0xc0
 800779c:	d818      	bhi.n	80077d0 <UART_SetConfig+0x210>
 800779e:	2b80      	cmp	r3, #128	@ 0x80
 80077a0:	d00a      	beq.n	80077b8 <UART_SetConfig+0x1f8>
 80077a2:	2b80      	cmp	r3, #128	@ 0x80
 80077a4:	d814      	bhi.n	80077d0 <UART_SetConfig+0x210>
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d002      	beq.n	80077b0 <UART_SetConfig+0x1f0>
 80077aa:	2b40      	cmp	r3, #64	@ 0x40
 80077ac:	d008      	beq.n	80077c0 <UART_SetConfig+0x200>
 80077ae:	e00f      	b.n	80077d0 <UART_SetConfig+0x210>
 80077b0:	2300      	movs	r3, #0
 80077b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077b6:	e082      	b.n	80078be <UART_SetConfig+0x2fe>
 80077b8:	2302      	movs	r3, #2
 80077ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077be:	e07e      	b.n	80078be <UART_SetConfig+0x2fe>
 80077c0:	2304      	movs	r3, #4
 80077c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077c6:	e07a      	b.n	80078be <UART_SetConfig+0x2fe>
 80077c8:	2308      	movs	r3, #8
 80077ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ce:	e076      	b.n	80078be <UART_SetConfig+0x2fe>
 80077d0:	2310      	movs	r3, #16
 80077d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077d6:	e072      	b.n	80078be <UART_SetConfig+0x2fe>
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a35      	ldr	r2, [pc, #212]	@ (80078b4 <UART_SetConfig+0x2f4>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d12a      	bne.n	8007838 <UART_SetConfig+0x278>
 80077e2:	4b30      	ldr	r3, [pc, #192]	@ (80078a4 <UART_SetConfig+0x2e4>)
 80077e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077f0:	d01a      	beq.n	8007828 <UART_SetConfig+0x268>
 80077f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077f6:	d81b      	bhi.n	8007830 <UART_SetConfig+0x270>
 80077f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077fc:	d00c      	beq.n	8007818 <UART_SetConfig+0x258>
 80077fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007802:	d815      	bhi.n	8007830 <UART_SetConfig+0x270>
 8007804:	2b00      	cmp	r3, #0
 8007806:	d003      	beq.n	8007810 <UART_SetConfig+0x250>
 8007808:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800780c:	d008      	beq.n	8007820 <UART_SetConfig+0x260>
 800780e:	e00f      	b.n	8007830 <UART_SetConfig+0x270>
 8007810:	2300      	movs	r3, #0
 8007812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007816:	e052      	b.n	80078be <UART_SetConfig+0x2fe>
 8007818:	2302      	movs	r3, #2
 800781a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800781e:	e04e      	b.n	80078be <UART_SetConfig+0x2fe>
 8007820:	2304      	movs	r3, #4
 8007822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007826:	e04a      	b.n	80078be <UART_SetConfig+0x2fe>
 8007828:	2308      	movs	r3, #8
 800782a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800782e:	e046      	b.n	80078be <UART_SetConfig+0x2fe>
 8007830:	2310      	movs	r3, #16
 8007832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007836:	e042      	b.n	80078be <UART_SetConfig+0x2fe>
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a17      	ldr	r2, [pc, #92]	@ (800789c <UART_SetConfig+0x2dc>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d13a      	bne.n	80078b8 <UART_SetConfig+0x2f8>
 8007842:	4b18      	ldr	r3, [pc, #96]	@ (80078a4 <UART_SetConfig+0x2e4>)
 8007844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007848:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800784c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007850:	d01a      	beq.n	8007888 <UART_SetConfig+0x2c8>
 8007852:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007856:	d81b      	bhi.n	8007890 <UART_SetConfig+0x2d0>
 8007858:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800785c:	d00c      	beq.n	8007878 <UART_SetConfig+0x2b8>
 800785e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007862:	d815      	bhi.n	8007890 <UART_SetConfig+0x2d0>
 8007864:	2b00      	cmp	r3, #0
 8007866:	d003      	beq.n	8007870 <UART_SetConfig+0x2b0>
 8007868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800786c:	d008      	beq.n	8007880 <UART_SetConfig+0x2c0>
 800786e:	e00f      	b.n	8007890 <UART_SetConfig+0x2d0>
 8007870:	2300      	movs	r3, #0
 8007872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007876:	e022      	b.n	80078be <UART_SetConfig+0x2fe>
 8007878:	2302      	movs	r3, #2
 800787a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800787e:	e01e      	b.n	80078be <UART_SetConfig+0x2fe>
 8007880:	2304      	movs	r3, #4
 8007882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007886:	e01a      	b.n	80078be <UART_SetConfig+0x2fe>
 8007888:	2308      	movs	r3, #8
 800788a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800788e:	e016      	b.n	80078be <UART_SetConfig+0x2fe>
 8007890:	2310      	movs	r3, #16
 8007892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007896:	e012      	b.n	80078be <UART_SetConfig+0x2fe>
 8007898:	cfff69f3 	.word	0xcfff69f3
 800789c:	40008000 	.word	0x40008000
 80078a0:	40013800 	.word	0x40013800
 80078a4:	40021000 	.word	0x40021000
 80078a8:	40004400 	.word	0x40004400
 80078ac:	40004800 	.word	0x40004800
 80078b0:	40004c00 	.word	0x40004c00
 80078b4:	40005000 	.word	0x40005000
 80078b8:	2310      	movs	r3, #16
 80078ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4aae      	ldr	r2, [pc, #696]	@ (8007b7c <UART_SetConfig+0x5bc>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	f040 8097 	bne.w	80079f8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80078ce:	2b08      	cmp	r3, #8
 80078d0:	d823      	bhi.n	800791a <UART_SetConfig+0x35a>
 80078d2:	a201      	add	r2, pc, #4	@ (adr r2, 80078d8 <UART_SetConfig+0x318>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	080078fd 	.word	0x080078fd
 80078dc:	0800791b 	.word	0x0800791b
 80078e0:	08007905 	.word	0x08007905
 80078e4:	0800791b 	.word	0x0800791b
 80078e8:	0800790b 	.word	0x0800790b
 80078ec:	0800791b 	.word	0x0800791b
 80078f0:	0800791b 	.word	0x0800791b
 80078f4:	0800791b 	.word	0x0800791b
 80078f8:	08007913 	.word	0x08007913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078fc:	f7fe fb1c 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 8007900:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007902:	e010      	b.n	8007926 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007904:	4b9e      	ldr	r3, [pc, #632]	@ (8007b80 <UART_SetConfig+0x5c0>)
 8007906:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007908:	e00d      	b.n	8007926 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800790a:	f7fe fa7d 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 800790e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007910:	e009      	b.n	8007926 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007912:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007916:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007918:	e005      	b.n	8007926 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800791a:	2300      	movs	r3, #0
 800791c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007924:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007928:	2b00      	cmp	r3, #0
 800792a:	f000 8130 	beq.w	8007b8e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007932:	4a94      	ldr	r2, [pc, #592]	@ (8007b84 <UART_SetConfig+0x5c4>)
 8007934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007938:	461a      	mov	r2, r3
 800793a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007940:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	4613      	mov	r3, r2
 8007948:	005b      	lsls	r3, r3, #1
 800794a:	4413      	add	r3, r2
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	429a      	cmp	r2, r3
 8007950:	d305      	bcc.n	800795e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007958:	69ba      	ldr	r2, [r7, #24]
 800795a:	429a      	cmp	r2, r3
 800795c:	d903      	bls.n	8007966 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007964:	e113      	b.n	8007b8e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007968:	2200      	movs	r2, #0
 800796a:	60bb      	str	r3, [r7, #8]
 800796c:	60fa      	str	r2, [r7, #12]
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007972:	4a84      	ldr	r2, [pc, #528]	@ (8007b84 <UART_SetConfig+0x5c4>)
 8007974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007978:	b29b      	uxth	r3, r3
 800797a:	2200      	movs	r2, #0
 800797c:	603b      	str	r3, [r7, #0]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007984:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007988:	f7f8 fc3a 	bl	8000200 <__aeabi_uldivmod>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	4610      	mov	r0, r2
 8007992:	4619      	mov	r1, r3
 8007994:	f04f 0200 	mov.w	r2, #0
 8007998:	f04f 0300 	mov.w	r3, #0
 800799c:	020b      	lsls	r3, r1, #8
 800799e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80079a2:	0202      	lsls	r2, r0, #8
 80079a4:	6979      	ldr	r1, [r7, #20]
 80079a6:	6849      	ldr	r1, [r1, #4]
 80079a8:	0849      	lsrs	r1, r1, #1
 80079aa:	2000      	movs	r0, #0
 80079ac:	460c      	mov	r4, r1
 80079ae:	4605      	mov	r5, r0
 80079b0:	eb12 0804 	adds.w	r8, r2, r4
 80079b4:	eb43 0905 	adc.w	r9, r3, r5
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	469a      	mov	sl, r3
 80079c0:	4693      	mov	fp, r2
 80079c2:	4652      	mov	r2, sl
 80079c4:	465b      	mov	r3, fp
 80079c6:	4640      	mov	r0, r8
 80079c8:	4649      	mov	r1, r9
 80079ca:	f7f8 fc19 	bl	8000200 <__aeabi_uldivmod>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	4613      	mov	r3, r2
 80079d4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079dc:	d308      	bcc.n	80079f0 <UART_SetConfig+0x430>
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079e4:	d204      	bcs.n	80079f0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6a3a      	ldr	r2, [r7, #32]
 80079ec:	60da      	str	r2, [r3, #12]
 80079ee:	e0ce      	b.n	8007b8e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80079f6:	e0ca      	b.n	8007b8e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	69db      	ldr	r3, [r3, #28]
 80079fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a00:	d166      	bne.n	8007ad0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007a02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a06:	2b08      	cmp	r3, #8
 8007a08:	d827      	bhi.n	8007a5a <UART_SetConfig+0x49a>
 8007a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a10 <UART_SetConfig+0x450>)
 8007a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a10:	08007a35 	.word	0x08007a35
 8007a14:	08007a3d 	.word	0x08007a3d
 8007a18:	08007a45 	.word	0x08007a45
 8007a1c:	08007a5b 	.word	0x08007a5b
 8007a20:	08007a4b 	.word	0x08007a4b
 8007a24:	08007a5b 	.word	0x08007a5b
 8007a28:	08007a5b 	.word	0x08007a5b
 8007a2c:	08007a5b 	.word	0x08007a5b
 8007a30:	08007a53 	.word	0x08007a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a34:	f7fe fa80 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 8007a38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a3a:	e014      	b.n	8007a66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a3c:	f7fe fa92 	bl	8005f64 <HAL_RCC_GetPCLK2Freq>
 8007a40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a42:	e010      	b.n	8007a66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a44:	4b4e      	ldr	r3, [pc, #312]	@ (8007b80 <UART_SetConfig+0x5c0>)
 8007a46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a48:	e00d      	b.n	8007a66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a4a:	f7fe f9dd 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8007a4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a50:	e009      	b.n	8007a66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a58:	e005      	b.n	8007a66 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 8090 	beq.w	8007b8e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a72:	4a44      	ldr	r2, [pc, #272]	@ (8007b84 <UART_SetConfig+0x5c4>)
 8007a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a80:	005a      	lsls	r2, r3, #1
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	085b      	lsrs	r3, r3, #1
 8007a88:	441a      	add	r2, r3
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a92:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	2b0f      	cmp	r3, #15
 8007a98:	d916      	bls.n	8007ac8 <UART_SetConfig+0x508>
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007aa0:	d212      	bcs.n	8007ac8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007aa2:	6a3b      	ldr	r3, [r7, #32]
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	f023 030f 	bic.w	r3, r3, #15
 8007aaa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	085b      	lsrs	r3, r3, #1
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	f003 0307 	and.w	r3, r3, #7
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	8bfb      	ldrh	r3, [r7, #30]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	8bfa      	ldrh	r2, [r7, #30]
 8007ac4:	60da      	str	r2, [r3, #12]
 8007ac6:	e062      	b.n	8007b8e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007ace:	e05e      	b.n	8007b8e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ad0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ad4:	2b08      	cmp	r3, #8
 8007ad6:	d828      	bhi.n	8007b2a <UART_SetConfig+0x56a>
 8007ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ae0 <UART_SetConfig+0x520>)
 8007ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ade:	bf00      	nop
 8007ae0:	08007b05 	.word	0x08007b05
 8007ae4:	08007b0d 	.word	0x08007b0d
 8007ae8:	08007b15 	.word	0x08007b15
 8007aec:	08007b2b 	.word	0x08007b2b
 8007af0:	08007b1b 	.word	0x08007b1b
 8007af4:	08007b2b 	.word	0x08007b2b
 8007af8:	08007b2b 	.word	0x08007b2b
 8007afc:	08007b2b 	.word	0x08007b2b
 8007b00:	08007b23 	.word	0x08007b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b04:	f7fe fa18 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 8007b08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b0a:	e014      	b.n	8007b36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b0c:	f7fe fa2a 	bl	8005f64 <HAL_RCC_GetPCLK2Freq>
 8007b10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b12:	e010      	b.n	8007b36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b14:	4b1a      	ldr	r3, [pc, #104]	@ (8007b80 <UART_SetConfig+0x5c0>)
 8007b16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b18:	e00d      	b.n	8007b36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b1a:	f7fe f975 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8007b1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b20:	e009      	b.n	8007b36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b28:	e005      	b.n	8007b36 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007b34:	bf00      	nop
    }

    if (pclk != 0U)
 8007b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d028      	beq.n	8007b8e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b40:	4a10      	ldr	r2, [pc, #64]	@ (8007b84 <UART_SetConfig+0x5c4>)
 8007b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b46:	461a      	mov	r2, r3
 8007b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	085b      	lsrs	r3, r3, #1
 8007b54:	441a      	add	r2, r3
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b5e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b60:	6a3b      	ldr	r3, [r7, #32]
 8007b62:	2b0f      	cmp	r3, #15
 8007b64:	d910      	bls.n	8007b88 <UART_SetConfig+0x5c8>
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b6c:	d20c      	bcs.n	8007b88 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b6e:	6a3b      	ldr	r3, [r7, #32]
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	60da      	str	r2, [r3, #12]
 8007b78:	e009      	b.n	8007b8e <UART_SetConfig+0x5ce>
 8007b7a:	bf00      	nop
 8007b7c:	40008000 	.word	0x40008000
 8007b80:	00f42400 	.word	0x00f42400
 8007b84:	0800c204 	.word	0x0800c204
      }
      else
      {
        ret = HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007baa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3730      	adds	r7, #48	@ 0x30
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007bb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc4:	f003 0308 	and.w	r3, r3, #8
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00a      	beq.n	8007be2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00a      	beq.n	8007c26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2a:	f003 0304 	and.w	r3, r3, #4
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	430a      	orrs	r2, r1
 8007c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c4c:	f003 0310 	and.w	r3, r3, #16
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00a      	beq.n	8007c6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c6e:	f003 0320 	and.w	r3, r3, #32
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00a      	beq.n	8007c8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d01a      	beq.n	8007cce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cb6:	d10a      	bne.n	8007cce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	430a      	orrs	r2, r1
 8007cee:	605a      	str	r2, [r3, #4]
  }
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b098      	sub	sp, #96	@ 0x60
 8007d00:	af02      	add	r7, sp, #8
 8007d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d0c:	f7fa f9da 	bl	80020c4 <HAL_GetTick>
 8007d10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0308 	and.w	r3, r3, #8
 8007d1c:	2b08      	cmp	r3, #8
 8007d1e:	d12f      	bne.n	8007d80 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d24:	9300      	str	r3, [sp, #0]
 8007d26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f88e 	bl	8007e50 <UART_WaitOnFlagUntilTimeout>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d022      	beq.n	8007d80 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d42:	e853 3f00 	ldrex	r3, [r3]
 8007d46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	461a      	mov	r2, r3
 8007d56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d58:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d5a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d60:	e841 2300 	strex	r3, r2, [r1]
 8007d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1e6      	bne.n	8007d3a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2220      	movs	r2, #32
 8007d70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e063      	b.n	8007e48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 0304 	and.w	r3, r3, #4
 8007d8a:	2b04      	cmp	r3, #4
 8007d8c:	d149      	bne.n	8007e22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d8e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d92:	9300      	str	r3, [sp, #0]
 8007d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d96:	2200      	movs	r2, #0
 8007d98:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f857 	bl	8007e50 <UART_WaitOnFlagUntilTimeout>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d03c      	beq.n	8007e22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db0:	e853 3f00 	ldrex	r3, [r3]
 8007db4:	623b      	str	r3, [r7, #32]
   return(result);
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dce:	e841 2300 	strex	r3, r2, [r1]
 8007dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1e6      	bne.n	8007da8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3308      	adds	r3, #8
 8007de0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	e853 3f00 	ldrex	r3, [r3]
 8007de8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f023 0301 	bic.w	r3, r3, #1
 8007df0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3308      	adds	r3, #8
 8007df8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007dfa:	61fa      	str	r2, [r7, #28]
 8007dfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfe:	69b9      	ldr	r1, [r7, #24]
 8007e00:	69fa      	ldr	r2, [r7, #28]
 8007e02:	e841 2300 	strex	r3, r2, [r1]
 8007e06:	617b      	str	r3, [r7, #20]
   return(result);
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1e5      	bne.n	8007dda <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2220      	movs	r2, #32
 8007e12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e012      	b.n	8007e48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2220      	movs	r2, #32
 8007e26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2220      	movs	r2, #32
 8007e2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3758      	adds	r7, #88	@ 0x58
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	603b      	str	r3, [r7, #0]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e60:	e049      	b.n	8007ef6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e68:	d045      	beq.n	8007ef6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e6a:	f7fa f92b 	bl	80020c4 <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	69ba      	ldr	r2, [r7, #24]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d302      	bcc.n	8007e80 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d101      	bne.n	8007e84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e048      	b.n	8007f16 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0304 	and.w	r3, r3, #4
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d031      	beq.n	8007ef6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	69db      	ldr	r3, [r3, #28]
 8007e98:	f003 0308 	and.w	r3, r3, #8
 8007e9c:	2b08      	cmp	r3, #8
 8007e9e:	d110      	bne.n	8007ec2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2208      	movs	r2, #8
 8007ea6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f000 f838 	bl	8007f1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2208      	movs	r2, #8
 8007eb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e029      	b.n	8007f16 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	69db      	ldr	r3, [r3, #28]
 8007ec8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ecc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ed0:	d111      	bne.n	8007ef6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007eda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 f81e 	bl	8007f1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e00f      	b.n	8007f16 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	69da      	ldr	r2, [r3, #28]
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	4013      	ands	r3, r2
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	bf0c      	ite	eq
 8007f06:	2301      	moveq	r3, #1
 8007f08:	2300      	movne	r3, #0
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	79fb      	ldrb	r3, [r7, #7]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d0a6      	beq.n	8007e62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b095      	sub	sp, #84	@ 0x54
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f2e:	e853 3f00 	ldrex	r3, [r3]
 8007f32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	461a      	mov	r2, r3
 8007f42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f44:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f46:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f4c:	e841 2300 	strex	r3, r2, [r1]
 8007f50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1e6      	bne.n	8007f26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	3308      	adds	r3, #8
 8007f5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f60:	6a3b      	ldr	r3, [r7, #32]
 8007f62:	e853 3f00 	ldrex	r3, [r3]
 8007f66:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f6e:	f023 0301 	bic.w	r3, r3, #1
 8007f72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	3308      	adds	r3, #8
 8007f7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f84:	e841 2300 	strex	r3, r2, [r1]
 8007f88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1e3      	bne.n	8007f58 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d118      	bne.n	8007fca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	e853 3f00 	ldrex	r3, [r3]
 8007fa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	f023 0310 	bic.w	r3, r3, #16
 8007fac:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fb6:	61bb      	str	r3, [r7, #24]
 8007fb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fba:	6979      	ldr	r1, [r7, #20]
 8007fbc:	69ba      	ldr	r2, [r7, #24]
 8007fbe:	e841 2300 	strex	r3, r2, [r1]
 8007fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1e6      	bne.n	8007f98 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007fde:	bf00      	nop
 8007fe0:	3754      	adds	r7, #84	@ 0x54
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b085      	sub	sp, #20
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d101      	bne.n	8008000 <HAL_UARTEx_DisableFifoMode+0x16>
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	e027      	b.n	8008050 <HAL_UARTEx_DisableFifoMode+0x66>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2224      	movs	r2, #36	@ 0x24
 800800c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 0201 	bic.w	r2, r2, #1
 8008026:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800802e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2220      	movs	r2, #32
 8008042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3714      	adds	r7, #20
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800806c:	2b01      	cmp	r3, #1
 800806e:	d101      	bne.n	8008074 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008070:	2302      	movs	r3, #2
 8008072:	e02d      	b.n	80080d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2224      	movs	r2, #36	@ 0x24
 8008080:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f022 0201 	bic.w	r2, r2, #1
 800809a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	430a      	orrs	r2, r1
 80080ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 f84f 	bl	8008154 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2220      	movs	r2, #32
 80080c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d101      	bne.n	80080f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80080ec:	2302      	movs	r3, #2
 80080ee:	e02d      	b.n	800814c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2224      	movs	r2, #36	@ 0x24
 80080fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f022 0201 	bic.w	r2, r2, #1
 8008116:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	430a      	orrs	r2, r1
 800812a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f811 	bl	8008154 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2220      	movs	r2, #32
 800813e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008160:	2b00      	cmp	r3, #0
 8008162:	d108      	bne.n	8008176 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008174:	e031      	b.n	80081da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008176:	2308      	movs	r3, #8
 8008178:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800817a:	2308      	movs	r3, #8
 800817c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	0e5b      	lsrs	r3, r3, #25
 8008186:	b2db      	uxtb	r3, r3
 8008188:	f003 0307 	and.w	r3, r3, #7
 800818c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	0f5b      	lsrs	r3, r3, #29
 8008196:	b2db      	uxtb	r3, r3
 8008198:	f003 0307 	and.w	r3, r3, #7
 800819c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800819e:	7bbb      	ldrb	r3, [r7, #14]
 80081a0:	7b3a      	ldrb	r2, [r7, #12]
 80081a2:	4911      	ldr	r1, [pc, #68]	@ (80081e8 <UARTEx_SetNbDataToProcess+0x94>)
 80081a4:	5c8a      	ldrb	r2, [r1, r2]
 80081a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80081aa:	7b3a      	ldrb	r2, [r7, #12]
 80081ac:	490f      	ldr	r1, [pc, #60]	@ (80081ec <UARTEx_SetNbDataToProcess+0x98>)
 80081ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081bc:	7bfb      	ldrb	r3, [r7, #15]
 80081be:	7b7a      	ldrb	r2, [r7, #13]
 80081c0:	4909      	ldr	r1, [pc, #36]	@ (80081e8 <UARTEx_SetNbDataToProcess+0x94>)
 80081c2:	5c8a      	ldrb	r2, [r1, r2]
 80081c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80081c8:	7b7a      	ldrb	r2, [r7, #13]
 80081ca:	4908      	ldr	r1, [pc, #32]	@ (80081ec <UARTEx_SetNbDataToProcess+0x98>)
 80081cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80081da:	bf00      	nop
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	0800c21c 	.word	0x0800c21c
 80081ec:	0800c224 	.word	0x0800c224

080081f0 <__NVIC_SetPriority>:
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	4603      	mov	r3, r0
 80081f8:	6039      	str	r1, [r7, #0]
 80081fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008200:	2b00      	cmp	r3, #0
 8008202:	db0a      	blt.n	800821a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	b2da      	uxtb	r2, r3
 8008208:	490c      	ldr	r1, [pc, #48]	@ (800823c <__NVIC_SetPriority+0x4c>)
 800820a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800820e:	0112      	lsls	r2, r2, #4
 8008210:	b2d2      	uxtb	r2, r2
 8008212:	440b      	add	r3, r1
 8008214:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008218:	e00a      	b.n	8008230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	b2da      	uxtb	r2, r3
 800821e:	4908      	ldr	r1, [pc, #32]	@ (8008240 <__NVIC_SetPriority+0x50>)
 8008220:	79fb      	ldrb	r3, [r7, #7]
 8008222:	f003 030f 	and.w	r3, r3, #15
 8008226:	3b04      	subs	r3, #4
 8008228:	0112      	lsls	r2, r2, #4
 800822a:	b2d2      	uxtb	r2, r2
 800822c:	440b      	add	r3, r1
 800822e:	761a      	strb	r2, [r3, #24]
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	e000e100 	.word	0xe000e100
 8008240:	e000ed00 	.word	0xe000ed00

08008244 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008244:	b580      	push	{r7, lr}
 8008246:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008248:	4b05      	ldr	r3, [pc, #20]	@ (8008260 <SysTick_Handler+0x1c>)
 800824a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800824c:	f002 fc6c 	bl	800ab28 <xTaskGetSchedulerState>
 8008250:	4603      	mov	r3, r0
 8008252:	2b01      	cmp	r3, #1
 8008254:	d001      	beq.n	800825a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008256:	f003 fb67 	bl	800b928 <xPortSysTickHandler>
  }
}
 800825a:	bf00      	nop
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	e000e010 	.word	0xe000e010

08008264 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008264:	b580      	push	{r7, lr}
 8008266:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008268:	2100      	movs	r1, #0
 800826a:	f06f 0004 	mvn.w	r0, #4
 800826e:	f7ff ffbf 	bl	80081f0 <__NVIC_SetPriority>
#endif
}
 8008272:	bf00      	nop
 8008274:	bd80      	pop	{r7, pc}
	...

08008278 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800827e:	f3ef 8305 	mrs	r3, IPSR
 8008282:	603b      	str	r3, [r7, #0]
  return(result);
 8008284:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800828a:	f06f 0305 	mvn.w	r3, #5
 800828e:	607b      	str	r3, [r7, #4]
 8008290:	e00c      	b.n	80082ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008292:	4b0a      	ldr	r3, [pc, #40]	@ (80082bc <osKernelInitialize+0x44>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d105      	bne.n	80082a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800829a:	4b08      	ldr	r3, [pc, #32]	@ (80082bc <osKernelInitialize+0x44>)
 800829c:	2201      	movs	r2, #1
 800829e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80082a0:	2300      	movs	r3, #0
 80082a2:	607b      	str	r3, [r7, #4]
 80082a4:	e002      	b.n	80082ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80082a6:	f04f 33ff 	mov.w	r3, #4294967295
 80082aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80082ac:	687b      	ldr	r3, [r7, #4]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	200005d8 	.word	0x200005d8

080082c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082c6:	f3ef 8305 	mrs	r3, IPSR
 80082ca:	603b      	str	r3, [r7, #0]
  return(result);
 80082cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <osKernelStart+0x1a>
    stat = osErrorISR;
 80082d2:	f06f 0305 	mvn.w	r3, #5
 80082d6:	607b      	str	r3, [r7, #4]
 80082d8:	e010      	b.n	80082fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80082da:	4b0b      	ldr	r3, [pc, #44]	@ (8008308 <osKernelStart+0x48>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d109      	bne.n	80082f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80082e2:	f7ff ffbf 	bl	8008264 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80082e6:	4b08      	ldr	r3, [pc, #32]	@ (8008308 <osKernelStart+0x48>)
 80082e8:	2202      	movs	r2, #2
 80082ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80082ec:	f001 ffb8 	bl	800a260 <vTaskStartScheduler>
      stat = osOK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	607b      	str	r3, [r7, #4]
 80082f4:	e002      	b.n	80082fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80082f6:	f04f 33ff 	mov.w	r3, #4294967295
 80082fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80082fc:	687b      	ldr	r3, [r7, #4]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	200005d8 	.word	0x200005d8

0800830c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800830c:	b580      	push	{r7, lr}
 800830e:	b08e      	sub	sp, #56	@ 0x38
 8008310:	af04      	add	r7, sp, #16
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008318:	2300      	movs	r3, #0
 800831a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800831c:	f3ef 8305 	mrs	r3, IPSR
 8008320:	617b      	str	r3, [r7, #20]
  return(result);
 8008322:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008324:	2b00      	cmp	r3, #0
 8008326:	d17e      	bne.n	8008426 <osThreadNew+0x11a>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d07b      	beq.n	8008426 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800832e:	2380      	movs	r3, #128	@ 0x80
 8008330:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008332:	2318      	movs	r3, #24
 8008334:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008336:	2300      	movs	r3, #0
 8008338:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800833a:	f04f 33ff 	mov.w	r3, #4294967295
 800833e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d045      	beq.n	80083d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d002      	beq.n	8008354 <osThreadNew+0x48>
        name = attr->name;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d002      	beq.n	8008362 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d008      	beq.n	800837a <osThreadNew+0x6e>
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	2b38      	cmp	r3, #56	@ 0x38
 800836c:	d805      	bhi.n	800837a <osThreadNew+0x6e>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	f003 0301 	and.w	r3, r3, #1
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <osThreadNew+0x72>
        return (NULL);
 800837a:	2300      	movs	r3, #0
 800837c:	e054      	b.n	8008428 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d003      	beq.n	800838e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	089b      	lsrs	r3, r3, #2
 800838c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00e      	beq.n	80083b4 <osThreadNew+0xa8>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	2ba7      	cmp	r3, #167	@ 0xa7
 800839c:	d90a      	bls.n	80083b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d006      	beq.n	80083b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d002      	beq.n	80083b4 <osThreadNew+0xa8>
        mem = 1;
 80083ae:	2301      	movs	r3, #1
 80083b0:	61bb      	str	r3, [r7, #24]
 80083b2:	e010      	b.n	80083d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10c      	bne.n	80083d6 <osThreadNew+0xca>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d108      	bne.n	80083d6 <osThreadNew+0xca>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d104      	bne.n	80083d6 <osThreadNew+0xca>
          mem = 0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	61bb      	str	r3, [r7, #24]
 80083d0:	e001      	b.n	80083d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80083d2:	2300      	movs	r3, #0
 80083d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d110      	bne.n	80083fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083e4:	9202      	str	r2, [sp, #8]
 80083e6:	9301      	str	r3, [sp, #4]
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	6a3a      	ldr	r2, [r7, #32]
 80083f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f001 fc38 	bl	8009c68 <xTaskCreateStatic>
 80083f8:	4603      	mov	r3, r0
 80083fa:	613b      	str	r3, [r7, #16]
 80083fc:	e013      	b.n	8008426 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d110      	bne.n	8008426 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	b29a      	uxth	r2, r3
 8008408:	f107 0310 	add.w	r3, r7, #16
 800840c:	9301      	str	r3, [sp, #4]
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f001 fc86 	bl	8009d28 <xTaskCreate>
 800841c:	4603      	mov	r3, r0
 800841e:	2b01      	cmp	r3, #1
 8008420:	d001      	beq.n	8008426 <osThreadNew+0x11a>
            hTask = NULL;
 8008422:	2300      	movs	r3, #0
 8008424:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008426:	693b      	ldr	r3, [r7, #16]
}
 8008428:	4618      	mov	r0, r3
 800842a:	3728      	adds	r7, #40	@ 0x28
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800843c:	f3ef 8305 	mrs	r3, IPSR
 8008440:	60fb      	str	r3, [r7, #12]
  return(result);
 8008442:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008444:	2b00      	cmp	r3, #0
 8008446:	d003      	beq.n	8008450 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8008448:	f06f 0305 	mvn.w	r3, #5
 800844c:	617b      	str	r3, [r7, #20]
 800844e:	e00b      	b.n	8008468 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d103      	bne.n	800845e <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8008456:	f06f 0303 	mvn.w	r3, #3
 800845a:	617b      	str	r3, [r7, #20]
 800845c:	e004      	b.n	8008468 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 800845e:	2300      	movs	r3, #0
 8008460:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8008462:	6938      	ldr	r0, [r7, #16]
 8008464:	f001 fdf4 	bl	800a050 <vTaskSuspend>
  }

  return (stat);
 8008468:	697b      	ldr	r3, [r7, #20]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3718      	adds	r7, #24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8008472:	b580      	push	{r7, lr}
 8008474:	b086      	sub	sp, #24
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800847e:	f3ef 8305 	mrs	r3, IPSR
 8008482:	60fb      	str	r3, [r7, #12]
  return(result);
 8008484:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008486:	2b00      	cmp	r3, #0
 8008488:	d003      	beq.n	8008492 <osThreadResume+0x20>
    stat = osErrorISR;
 800848a:	f06f 0305 	mvn.w	r3, #5
 800848e:	617b      	str	r3, [r7, #20]
 8008490:	e00b      	b.n	80084aa <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d103      	bne.n	80084a0 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8008498:	f06f 0303 	mvn.w	r3, #3
 800849c:	617b      	str	r3, [r7, #20]
 800849e:	e004      	b.n	80084aa <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80084a4:	6938      	ldr	r0, [r7, #16]
 80084a6:	f001 fe7b 	bl	800a1a0 <vTaskResume>
  }

  return (stat);
 80084aa:	697b      	ldr	r3, [r7, #20]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3718      	adds	r7, #24
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084bc:	f3ef 8305 	mrs	r3, IPSR
 80084c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80084c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d003      	beq.n	80084d0 <osDelay+0x1c>
    stat = osErrorISR;
 80084c8:	f06f 0305 	mvn.w	r3, #5
 80084cc:	60fb      	str	r3, [r7, #12]
 80084ce:	e007      	b.n	80084e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d002      	beq.n	80084e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f001 fd82 	bl	8009fe4 <vTaskDelay>
    }
  }

  return (stat);
 80084e0:	68fb      	ldr	r3, [r7, #12]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b08a      	sub	sp, #40	@ 0x28
 80084ee:	af02      	add	r7, sp, #8
 80084f0:	60f8      	str	r0, [r7, #12]
 80084f2:	60b9      	str	r1, [r7, #8]
 80084f4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80084f6:	2300      	movs	r3, #0
 80084f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084fa:	f3ef 8305 	mrs	r3, IPSR
 80084fe:	613b      	str	r3, [r7, #16]
  return(result);
 8008500:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008502:	2b00      	cmp	r3, #0
 8008504:	d175      	bne.n	80085f2 <osSemaphoreNew+0x108>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d072      	beq.n	80085f2 <osSemaphoreNew+0x108>
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	429a      	cmp	r2, r3
 8008512:	d86e      	bhi.n	80085f2 <osSemaphoreNew+0x108>
    mem = -1;
 8008514:	f04f 33ff 	mov.w	r3, #4294967295
 8008518:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d015      	beq.n	800854c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d006      	beq.n	8008536 <osSemaphoreNew+0x4c>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	2b4f      	cmp	r3, #79	@ 0x4f
 800852e:	d902      	bls.n	8008536 <osSemaphoreNew+0x4c>
        mem = 1;
 8008530:	2301      	movs	r3, #1
 8008532:	61bb      	str	r3, [r7, #24]
 8008534:	e00c      	b.n	8008550 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d108      	bne.n	8008550 <osSemaphoreNew+0x66>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d104      	bne.n	8008550 <osSemaphoreNew+0x66>
          mem = 0;
 8008546:	2300      	movs	r3, #0
 8008548:	61bb      	str	r3, [r7, #24]
 800854a:	e001      	b.n	8008550 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800854c:	2300      	movs	r3, #0
 800854e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008556:	d04c      	beq.n	80085f2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d128      	bne.n	80085b0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d10a      	bne.n	800857a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	2203      	movs	r2, #3
 800856a:	9200      	str	r2, [sp, #0]
 800856c:	2200      	movs	r2, #0
 800856e:	2100      	movs	r1, #0
 8008570:	2001      	movs	r0, #1
 8008572:	f000 fb93 	bl	8008c9c <xQueueGenericCreateStatic>
 8008576:	61f8      	str	r0, [r7, #28]
 8008578:	e005      	b.n	8008586 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800857a:	2203      	movs	r2, #3
 800857c:	2100      	movs	r1, #0
 800857e:	2001      	movs	r0, #1
 8008580:	f000 fc09 	bl	8008d96 <xQueueGenericCreate>
 8008584:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d022      	beq.n	80085d2 <osSemaphoreNew+0xe8>
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d01f      	beq.n	80085d2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008592:	2300      	movs	r3, #0
 8008594:	2200      	movs	r2, #0
 8008596:	2100      	movs	r1, #0
 8008598:	69f8      	ldr	r0, [r7, #28]
 800859a:	f000 fcc9 	bl	8008f30 <xQueueGenericSend>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d016      	beq.n	80085d2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80085a4:	69f8      	ldr	r0, [r7, #28]
 80085a6:	f001 f98b 	bl	80098c0 <vQueueDelete>
            hSemaphore = NULL;
 80085aa:	2300      	movs	r3, #0
 80085ac:	61fb      	str	r3, [r7, #28]
 80085ae:	e010      	b.n	80085d2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d108      	bne.n	80085c8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	461a      	mov	r2, r3
 80085bc:	68b9      	ldr	r1, [r7, #8]
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f000 fc47 	bl	8008e52 <xQueueCreateCountingSemaphoreStatic>
 80085c4:	61f8      	str	r0, [r7, #28]
 80085c6:	e004      	b.n	80085d2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80085c8:	68b9      	ldr	r1, [r7, #8]
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f000 fc7a 	bl	8008ec4 <xQueueCreateCountingSemaphore>
 80085d0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00c      	beq.n	80085f2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	617b      	str	r3, [r7, #20]
 80085e4:	e001      	b.n	80085ea <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80085e6:	2300      	movs	r3, #0
 80085e8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80085ea:	6979      	ldr	r1, [r7, #20]
 80085ec:	69f8      	ldr	r0, [r7, #28]
 80085ee:	f001 fab3 	bl	8009b58 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80085f2:	69fb      	ldr	r3, [r7, #28]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3720      	adds	r7, #32
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800860a:	2300      	movs	r3, #0
 800860c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d103      	bne.n	800861c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008614:	f06f 0303 	mvn.w	r3, #3
 8008618:	617b      	str	r3, [r7, #20]
 800861a:	e039      	b.n	8008690 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800861c:	f3ef 8305 	mrs	r3, IPSR
 8008620:	60fb      	str	r3, [r7, #12]
  return(result);
 8008622:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008624:	2b00      	cmp	r3, #0
 8008626:	d022      	beq.n	800866e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d003      	beq.n	8008636 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800862e:	f06f 0303 	mvn.w	r3, #3
 8008632:	617b      	str	r3, [r7, #20]
 8008634:	e02c      	b.n	8008690 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008636:	2300      	movs	r3, #0
 8008638:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800863a:	f107 0308 	add.w	r3, r7, #8
 800863e:	461a      	mov	r2, r3
 8008640:	2100      	movs	r1, #0
 8008642:	6938      	ldr	r0, [r7, #16]
 8008644:	f001 f896 	bl	8009774 <xQueueReceiveFromISR>
 8008648:	4603      	mov	r3, r0
 800864a:	2b01      	cmp	r3, #1
 800864c:	d003      	beq.n	8008656 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800864e:	f06f 0302 	mvn.w	r3, #2
 8008652:	617b      	str	r3, [r7, #20]
 8008654:	e01c      	b.n	8008690 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d019      	beq.n	8008690 <osSemaphoreAcquire+0x94>
 800865c:	4b0f      	ldr	r3, [pc, #60]	@ (800869c <osSemaphoreAcquire+0xa0>)
 800865e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	e010      	b.n	8008690 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800866e:	6839      	ldr	r1, [r7, #0]
 8008670:	6938      	ldr	r0, [r7, #16]
 8008672:	f000 ff6f 	bl	8009554 <xQueueSemaphoreTake>
 8008676:	4603      	mov	r3, r0
 8008678:	2b01      	cmp	r3, #1
 800867a:	d009      	beq.n	8008690 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008682:	f06f 0301 	mvn.w	r3, #1
 8008686:	617b      	str	r3, [r7, #20]
 8008688:	e002      	b.n	8008690 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800868a:	f06f 0302 	mvn.w	r3, #2
 800868e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008690:	697b      	ldr	r3, [r7, #20]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3718      	adds	r7, #24
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	e000ed04 	.word	0xe000ed04

080086a0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d103      	bne.n	80086be <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80086b6:	f06f 0303 	mvn.w	r3, #3
 80086ba:	617b      	str	r3, [r7, #20]
 80086bc:	e02c      	b.n	8008718 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086be:	f3ef 8305 	mrs	r3, IPSR
 80086c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80086c4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d01a      	beq.n	8008700 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80086ca:	2300      	movs	r3, #0
 80086cc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80086ce:	f107 0308 	add.w	r3, r7, #8
 80086d2:	4619      	mov	r1, r3
 80086d4:	6938      	ldr	r0, [r7, #16]
 80086d6:	f000 fdcb 	bl	8009270 <xQueueGiveFromISR>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d003      	beq.n	80086e8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80086e0:	f06f 0302 	mvn.w	r3, #2
 80086e4:	617b      	str	r3, [r7, #20]
 80086e6:	e017      	b.n	8008718 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d014      	beq.n	8008718 <osSemaphoreRelease+0x78>
 80086ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008724 <osSemaphoreRelease+0x84>)
 80086f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	e00b      	b.n	8008718 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008700:	2300      	movs	r3, #0
 8008702:	2200      	movs	r2, #0
 8008704:	2100      	movs	r1, #0
 8008706:	6938      	ldr	r0, [r7, #16]
 8008708:	f000 fc12 	bl	8008f30 <xQueueGenericSend>
 800870c:	4603      	mov	r3, r0
 800870e:	2b01      	cmp	r3, #1
 8008710:	d002      	beq.n	8008718 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008712:	f06f 0302 	mvn.w	r3, #2
 8008716:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008718:	697b      	ldr	r3, [r7, #20]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3718      	adds	r7, #24
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	e000ed04 	.word	0xe000ed04

08008728 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008728:	b580      	push	{r7, lr}
 800872a:	b08a      	sub	sp, #40	@ 0x28
 800872c:	af02      	add	r7, sp, #8
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008734:	2300      	movs	r3, #0
 8008736:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008738:	f3ef 8305 	mrs	r3, IPSR
 800873c:	613b      	str	r3, [r7, #16]
  return(result);
 800873e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008740:	2b00      	cmp	r3, #0
 8008742:	d15f      	bne.n	8008804 <osMessageQueueNew+0xdc>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d05c      	beq.n	8008804 <osMessageQueueNew+0xdc>
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d059      	beq.n	8008804 <osMessageQueueNew+0xdc>
    mem = -1;
 8008750:	f04f 33ff 	mov.w	r3, #4294967295
 8008754:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d029      	beq.n	80087b0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d012      	beq.n	800878a <osMessageQueueNew+0x62>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	2b4f      	cmp	r3, #79	@ 0x4f
 800876a:	d90e      	bls.n	800878a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00a      	beq.n	800878a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	695a      	ldr	r2, [r3, #20]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	68b9      	ldr	r1, [r7, #8]
 800877c:	fb01 f303 	mul.w	r3, r1, r3
 8008780:	429a      	cmp	r2, r3
 8008782:	d302      	bcc.n	800878a <osMessageQueueNew+0x62>
        mem = 1;
 8008784:	2301      	movs	r3, #1
 8008786:	61bb      	str	r3, [r7, #24]
 8008788:	e014      	b.n	80087b4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d110      	bne.n	80087b4 <osMessageQueueNew+0x8c>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d10c      	bne.n	80087b4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d108      	bne.n	80087b4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d104      	bne.n	80087b4 <osMessageQueueNew+0x8c>
          mem = 0;
 80087aa:	2300      	movs	r3, #0
 80087ac:	61bb      	str	r3, [r7, #24]
 80087ae:	e001      	b.n	80087b4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80087b0:	2300      	movs	r3, #0
 80087b2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d10b      	bne.n	80087d2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	691a      	ldr	r2, [r3, #16]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	2100      	movs	r1, #0
 80087c4:	9100      	str	r1, [sp, #0]
 80087c6:	68b9      	ldr	r1, [r7, #8]
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f000 fa67 	bl	8008c9c <xQueueGenericCreateStatic>
 80087ce:	61f8      	str	r0, [r7, #28]
 80087d0:	e008      	b.n	80087e4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d105      	bne.n	80087e4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80087d8:	2200      	movs	r2, #0
 80087da:	68b9      	ldr	r1, [r7, #8]
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f000 fada 	bl	8008d96 <xQueueGenericCreate>
 80087e2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00c      	beq.n	8008804 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d003      	beq.n	80087f8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	617b      	str	r3, [r7, #20]
 80087f6:	e001      	b.n	80087fc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80087f8:	2300      	movs	r3, #0
 80087fa:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80087fc:	6979      	ldr	r1, [r7, #20]
 80087fe:	69f8      	ldr	r0, [r7, #28]
 8008800:	f001 f9aa 	bl	8009b58 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008804:	69fb      	ldr	r3, [r7, #28]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3720      	adds	r7, #32
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
	...

08008810 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008810:	b580      	push	{r7, lr}
 8008812:	b088      	sub	sp, #32
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	603b      	str	r3, [r7, #0]
 800881c:	4613      	mov	r3, r2
 800881e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008824:	2300      	movs	r3, #0
 8008826:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008828:	f3ef 8305 	mrs	r3, IPSR
 800882c:	617b      	str	r3, [r7, #20]
  return(result);
 800882e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008830:	2b00      	cmp	r3, #0
 8008832:	d028      	beq.n	8008886 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d005      	beq.n	8008846 <osMessageQueuePut+0x36>
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d002      	beq.n	8008846 <osMessageQueuePut+0x36>
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d003      	beq.n	800884e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008846:	f06f 0303 	mvn.w	r3, #3
 800884a:	61fb      	str	r3, [r7, #28]
 800884c:	e038      	b.n	80088c0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800884e:	2300      	movs	r3, #0
 8008850:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008852:	f107 0210 	add.w	r2, r7, #16
 8008856:	2300      	movs	r3, #0
 8008858:	68b9      	ldr	r1, [r7, #8]
 800885a:	69b8      	ldr	r0, [r7, #24]
 800885c:	f000 fc6a 	bl	8009134 <xQueueGenericSendFromISR>
 8008860:	4603      	mov	r3, r0
 8008862:	2b01      	cmp	r3, #1
 8008864:	d003      	beq.n	800886e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008866:	f06f 0302 	mvn.w	r3, #2
 800886a:	61fb      	str	r3, [r7, #28]
 800886c:	e028      	b.n	80088c0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d025      	beq.n	80088c0 <osMessageQueuePut+0xb0>
 8008874:	4b15      	ldr	r3, [pc, #84]	@ (80088cc <osMessageQueuePut+0xbc>)
 8008876:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	f3bf 8f6f 	isb	sy
 8008884:	e01c      	b.n	80088c0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d002      	beq.n	8008892 <osMessageQueuePut+0x82>
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d103      	bne.n	800889a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008892:	f06f 0303 	mvn.w	r3, #3
 8008896:	61fb      	str	r3, [r7, #28]
 8008898:	e012      	b.n	80088c0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800889a:	2300      	movs	r3, #0
 800889c:	683a      	ldr	r2, [r7, #0]
 800889e:	68b9      	ldr	r1, [r7, #8]
 80088a0:	69b8      	ldr	r0, [r7, #24]
 80088a2:	f000 fb45 	bl	8008f30 <xQueueGenericSend>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d009      	beq.n	80088c0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d003      	beq.n	80088ba <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80088b2:	f06f 0301 	mvn.w	r3, #1
 80088b6:	61fb      	str	r3, [r7, #28]
 80088b8:	e002      	b.n	80088c0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80088ba:	f06f 0302 	mvn.w	r3, #2
 80088be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80088c0:	69fb      	ldr	r3, [r7, #28]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3720      	adds	r7, #32
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	e000ed04 	.word	0xe000ed04

080088d0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b088      	sub	sp, #32
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	607a      	str	r2, [r7, #4]
 80088dc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088e6:	f3ef 8305 	mrs	r3, IPSR
 80088ea:	617b      	str	r3, [r7, #20]
  return(result);
 80088ec:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d028      	beq.n	8008944 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d005      	beq.n	8008904 <osMessageQueueGet+0x34>
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d002      	beq.n	8008904 <osMessageQueueGet+0x34>
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d003      	beq.n	800890c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008904:	f06f 0303 	mvn.w	r3, #3
 8008908:	61fb      	str	r3, [r7, #28]
 800890a:	e037      	b.n	800897c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800890c:	2300      	movs	r3, #0
 800890e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008910:	f107 0310 	add.w	r3, r7, #16
 8008914:	461a      	mov	r2, r3
 8008916:	68b9      	ldr	r1, [r7, #8]
 8008918:	69b8      	ldr	r0, [r7, #24]
 800891a:	f000 ff2b 	bl	8009774 <xQueueReceiveFromISR>
 800891e:	4603      	mov	r3, r0
 8008920:	2b01      	cmp	r3, #1
 8008922:	d003      	beq.n	800892c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008924:	f06f 0302 	mvn.w	r3, #2
 8008928:	61fb      	str	r3, [r7, #28]
 800892a:	e027      	b.n	800897c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d024      	beq.n	800897c <osMessageQueueGet+0xac>
 8008932:	4b15      	ldr	r3, [pc, #84]	@ (8008988 <osMessageQueueGet+0xb8>)
 8008934:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008938:	601a      	str	r2, [r3, #0]
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	e01b      	b.n	800897c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d002      	beq.n	8008950 <osMessageQueueGet+0x80>
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d103      	bne.n	8008958 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008950:	f06f 0303 	mvn.w	r3, #3
 8008954:	61fb      	str	r3, [r7, #28]
 8008956:	e011      	b.n	800897c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008958:	683a      	ldr	r2, [r7, #0]
 800895a:	68b9      	ldr	r1, [r7, #8]
 800895c:	69b8      	ldr	r0, [r7, #24]
 800895e:	f000 fd17 	bl	8009390 <xQueueReceive>
 8008962:	4603      	mov	r3, r0
 8008964:	2b01      	cmp	r3, #1
 8008966:	d009      	beq.n	800897c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d003      	beq.n	8008976 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800896e:	f06f 0301 	mvn.w	r3, #1
 8008972:	61fb      	str	r3, [r7, #28]
 8008974:	e002      	b.n	800897c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008976:	f06f 0302 	mvn.w	r3, #2
 800897a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800897c:	69fb      	ldr	r3, [r7, #28]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3720      	adds	r7, #32
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	e000ed04 	.word	0xe000ed04

0800898c <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800898c:	b580      	push	{r7, lr}
 800898e:	b08a      	sub	sp, #40	@ 0x28
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 8008998:	6a3b      	ldr	r3, [r7, #32]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d102      	bne.n	80089a4 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800899e:	2300      	movs	r3, #0
 80089a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80089a2:	e023      	b.n	80089ec <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089a4:	f3ef 8305 	mrs	r3, IPSR
 80089a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80089aa:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d019      	beq.n	80089e4 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089b0:	f3ef 8211 	mrs	r2, BASEPRI
 80089b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b8:	f383 8811 	msr	BASEPRI, r3
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	613a      	str	r2, [r7, #16]
 80089c6:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089c8:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 80089ca:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80089e2:	e003      	b.n	80089ec <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 80089e4:	6a38      	ldr	r0, [r7, #32]
 80089e6:	f000 ff47 	bl	8009878 <uxQueueSpacesAvailable>
 80089ea:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return (space);
 80089ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3728      	adds	r7, #40	@ 0x28
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
	...

080089f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	4a07      	ldr	r2, [pc, #28]	@ (8008a24 <vApplicationGetIdleTaskMemory+0x2c>)
 8008a08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	4a06      	ldr	r2, [pc, #24]	@ (8008a28 <vApplicationGetIdleTaskMemory+0x30>)
 8008a0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2280      	movs	r2, #128	@ 0x80
 8008a14:	601a      	str	r2, [r3, #0]
}
 8008a16:	bf00      	nop
 8008a18:	3714      	adds	r7, #20
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	200005dc 	.word	0x200005dc
 8008a28:	20000684 	.word	0x20000684

08008a2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	4a07      	ldr	r2, [pc, #28]	@ (8008a58 <vApplicationGetTimerTaskMemory+0x2c>)
 8008a3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	4a06      	ldr	r2, [pc, #24]	@ (8008a5c <vApplicationGetTimerTaskMemory+0x30>)
 8008a42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a4a:	601a      	str	r2, [r3, #0]
}
 8008a4c:	bf00      	nop
 8008a4e:	3714      	adds	r7, #20
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr
 8008a58:	20000884 	.word	0x20000884
 8008a5c:	2000092c 	.word	0x2000092c

08008a60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f103 0208 	add.w	r2, r3, #8
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f04f 32ff 	mov.w	r2, #4294967295
 8008a78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f103 0208 	add.w	r2, r3, #8
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f103 0208 	add.w	r2, r3, #8
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008aae:	bf00      	nop
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008aba:	b480      	push	{r7}
 8008abc:	b085      	sub	sp, #20
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	689a      	ldr	r2, [r3, #8]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	683a      	ldr	r2, [r7, #0]
 8008ade:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	1c5a      	adds	r2, r3, #1
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	601a      	str	r2, [r3, #0]
}
 8008af6:	bf00      	nop
 8008af8:	3714      	adds	r7, #20
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b02:	b480      	push	{r7}
 8008b04:	b085      	sub	sp, #20
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b18:	d103      	bne.n	8008b22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	60fb      	str	r3, [r7, #12]
 8008b20:	e00c      	b.n	8008b3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	3308      	adds	r3, #8
 8008b26:	60fb      	str	r3, [r7, #12]
 8008b28:	e002      	b.n	8008b30 <vListInsert+0x2e>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	60fb      	str	r3, [r7, #12]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d2f6      	bcs.n	8008b2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	685a      	ldr	r2, [r3, #4]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	683a      	ldr	r2, [r7, #0]
 8008b4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	683a      	ldr	r2, [r7, #0]
 8008b56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	1c5a      	adds	r2, r3, #1
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	601a      	str	r2, [r3, #0]
}
 8008b68:	bf00      	nop
 8008b6a:	3714      	adds	r7, #20
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008b74:	b480      	push	{r7}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	6892      	ldr	r2, [r2, #8]
 8008b8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	6852      	ldr	r2, [r2, #4]
 8008b94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d103      	bne.n	8008ba8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	689a      	ldr	r2, [r3, #8]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	1e5a      	subs	r2, r3, #1
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3714      	adds	r7, #20
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10b      	bne.n	8008bf4 <xQueueGenericReset+0x2c>
	__asm volatile
 8008bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be0:	f383 8811 	msr	BASEPRI, r3
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	f3bf 8f4f 	dsb	sy
 8008bec:	60bb      	str	r3, [r7, #8]
}
 8008bee:	bf00      	nop
 8008bf0:	bf00      	nop
 8008bf2:	e7fd      	b.n	8008bf0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008bf4:	f002 fe08 	bl	800b808 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c00:	68f9      	ldr	r1, [r7, #12]
 8008c02:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008c04:	fb01 f303 	mul.w	r3, r1, r3
 8008c08:	441a      	add	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2200      	movs	r2, #0
 8008c12:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c24:	3b01      	subs	r3, #1
 8008c26:	68f9      	ldr	r1, [r7, #12]
 8008c28:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008c2a:	fb01 f303 	mul.w	r3, r1, r3
 8008c2e:	441a      	add	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	22ff      	movs	r2, #255	@ 0xff
 8008c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	22ff      	movs	r2, #255	@ 0xff
 8008c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d114      	bne.n	8008c74 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d01a      	beq.n	8008c88 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	3310      	adds	r3, #16
 8008c56:	4618      	mov	r0, r3
 8008c58:	f001 fda0 	bl	800a79c <xTaskRemoveFromEventList>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d012      	beq.n	8008c88 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008c62:	4b0d      	ldr	r3, [pc, #52]	@ (8008c98 <xQueueGenericReset+0xd0>)
 8008c64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	e009      	b.n	8008c88 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	3310      	adds	r3, #16
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7ff fef1 	bl	8008a60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	3324      	adds	r3, #36	@ 0x24
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7ff feec 	bl	8008a60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008c88:	f002 fdf0 	bl	800b86c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008c8c:	2301      	movs	r3, #1
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	e000ed04 	.word	0xe000ed04

08008c9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b08e      	sub	sp, #56	@ 0x38
 8008ca0:	af02      	add	r7, sp, #8
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
 8008ca8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10b      	bne.n	8008cc8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008cc2:	bf00      	nop
 8008cc4:	bf00      	nop
 8008cc6:	e7fd      	b.n	8008cc4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10b      	bne.n	8008ce6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008ce0:	bf00      	nop
 8008ce2:	bf00      	nop
 8008ce4:	e7fd      	b.n	8008ce2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <xQueueGenericCreateStatic+0x56>
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <xQueueGenericCreateStatic+0x5a>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e000      	b.n	8008cf8 <xQueueGenericCreateStatic+0x5c>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10b      	bne.n	8008d14 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	623b      	str	r3, [r7, #32]
}
 8008d0e:	bf00      	nop
 8008d10:	bf00      	nop
 8008d12:	e7fd      	b.n	8008d10 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d102      	bne.n	8008d20 <xQueueGenericCreateStatic+0x84>
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d101      	bne.n	8008d24 <xQueueGenericCreateStatic+0x88>
 8008d20:	2301      	movs	r3, #1
 8008d22:	e000      	b.n	8008d26 <xQueueGenericCreateStatic+0x8a>
 8008d24:	2300      	movs	r3, #0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d10b      	bne.n	8008d42 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	61fb      	str	r3, [r7, #28]
}
 8008d3c:	bf00      	nop
 8008d3e:	bf00      	nop
 8008d40:	e7fd      	b.n	8008d3e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008d42:	2350      	movs	r3, #80	@ 0x50
 8008d44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	2b50      	cmp	r3, #80	@ 0x50
 8008d4a:	d00b      	beq.n	8008d64 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d50:	f383 8811 	msr	BASEPRI, r3
 8008d54:	f3bf 8f6f 	isb	sy
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	61bb      	str	r3, [r7, #24]
}
 8008d5e:	bf00      	nop
 8008d60:	bf00      	nop
 8008d62:	e7fd      	b.n	8008d60 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008d64:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00d      	beq.n	8008d8c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d78:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	4613      	mov	r3, r2
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	68b9      	ldr	r1, [r7, #8]
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f000 f840 	bl	8008e0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3730      	adds	r7, #48	@ 0x30
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b08a      	sub	sp, #40	@ 0x28
 8008d9a:	af02      	add	r7, sp, #8
 8008d9c:	60f8      	str	r0, [r7, #12]
 8008d9e:	60b9      	str	r1, [r7, #8]
 8008da0:	4613      	mov	r3, r2
 8008da2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d10b      	bne.n	8008dc2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8008daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dae:	f383 8811 	msr	BASEPRI, r3
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	613b      	str	r3, [r7, #16]
}
 8008dbc:	bf00      	nop
 8008dbe:	bf00      	nop
 8008dc0:	e7fd      	b.n	8008dbe <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	fb02 f303 	mul.w	r3, r2, r3
 8008dca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	3350      	adds	r3, #80	@ 0x50
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f002 fe3b 	bl	800ba4c <pvPortMalloc>
 8008dd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d011      	beq.n	8008e02 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	3350      	adds	r3, #80	@ 0x50
 8008de6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008df0:	79fa      	ldrb	r2, [r7, #7]
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	4613      	mov	r3, r2
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	68b9      	ldr	r1, [r7, #8]
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f000 f805 	bl	8008e0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e02:	69bb      	ldr	r3, [r7, #24]
	}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3720      	adds	r7, #32
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
 8008e18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d103      	bne.n	8008e28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	69ba      	ldr	r2, [r7, #24]
 8008e24:	601a      	str	r2, [r3, #0]
 8008e26:	e002      	b.n	8008e2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008e3a:	2101      	movs	r1, #1
 8008e3c:	69b8      	ldr	r0, [r7, #24]
 8008e3e:	f7ff fec3 	bl	8008bc8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	78fa      	ldrb	r2, [r7, #3]
 8008e46:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008e4a:	bf00      	nop
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b08a      	sub	sp, #40	@ 0x28
 8008e56:	af02      	add	r7, sp, #8
 8008e58:	60f8      	str	r0, [r7, #12]
 8008e5a:	60b9      	str	r1, [r7, #8]
 8008e5c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10b      	bne.n	8008e7c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8008e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e68:	f383 8811 	msr	BASEPRI, r3
 8008e6c:	f3bf 8f6f 	isb	sy
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	61bb      	str	r3, [r7, #24]
}
 8008e76:	bf00      	nop
 8008e78:	bf00      	nop
 8008e7a:	e7fd      	b.n	8008e78 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008e7c:	68ba      	ldr	r2, [r7, #8]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d90b      	bls.n	8008e9c <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8008e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e88:	f383 8811 	msr	BASEPRI, r3
 8008e8c:	f3bf 8f6f 	isb	sy
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	617b      	str	r3, [r7, #20]
}
 8008e96:	bf00      	nop
 8008e98:	bf00      	nop
 8008e9a:	e7fd      	b.n	8008e98 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008e9c:	2302      	movs	r3, #2
 8008e9e:	9300      	str	r3, [sp, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f7ff fef8 	bl	8008c9c <xQueueGenericCreateStatic>
 8008eac:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d002      	beq.n	8008eba <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008eba:	69fb      	ldr	r3, [r7, #28]
	}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3720      	adds	r7, #32
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10b      	bne.n	8008eec <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8008ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	613b      	str	r3, [r7, #16]
}
 8008ee6:	bf00      	nop
 8008ee8:	bf00      	nop
 8008eea:	e7fd      	b.n	8008ee8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008eec:	683a      	ldr	r2, [r7, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d90b      	bls.n	8008f0c <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8008ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	60fb      	str	r3, [r7, #12]
}
 8008f06:	bf00      	nop
 8008f08:	bf00      	nop
 8008f0a:	e7fd      	b.n	8008f08 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008f0c:	2202      	movs	r2, #2
 8008f0e:	2100      	movs	r1, #0
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f7ff ff40 	bl	8008d96 <xQueueGenericCreate>
 8008f16:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d002      	beq.n	8008f24 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008f24:	697b      	ldr	r3, [r7, #20]
	}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3718      	adds	r7, #24
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
	...

08008f30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b08e      	sub	sp, #56	@ 0x38
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
 8008f3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10b      	bne.n	8008f64 <xQueueGenericSend+0x34>
	__asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008f5e:	bf00      	nop
 8008f60:	bf00      	nop
 8008f62:	e7fd      	b.n	8008f60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d103      	bne.n	8008f72 <xQueueGenericSend+0x42>
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d101      	bne.n	8008f76 <xQueueGenericSend+0x46>
 8008f72:	2301      	movs	r3, #1
 8008f74:	e000      	b.n	8008f78 <xQueueGenericSend+0x48>
 8008f76:	2300      	movs	r3, #0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10b      	bne.n	8008f94 <xQueueGenericSend+0x64>
	__asm volatile
 8008f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f80:	f383 8811 	msr	BASEPRI, r3
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008f8e:	bf00      	nop
 8008f90:	bf00      	nop
 8008f92:	e7fd      	b.n	8008f90 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d103      	bne.n	8008fa2 <xQueueGenericSend+0x72>
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d101      	bne.n	8008fa6 <xQueueGenericSend+0x76>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e000      	b.n	8008fa8 <xQueueGenericSend+0x78>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10b      	bne.n	8008fc4 <xQueueGenericSend+0x94>
	__asm volatile
 8008fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb0:	f383 8811 	msr	BASEPRI, r3
 8008fb4:	f3bf 8f6f 	isb	sy
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	623b      	str	r3, [r7, #32]
}
 8008fbe:	bf00      	nop
 8008fc0:	bf00      	nop
 8008fc2:	e7fd      	b.n	8008fc0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008fc4:	f001 fdb0 	bl	800ab28 <xTaskGetSchedulerState>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d102      	bne.n	8008fd4 <xQueueGenericSend+0xa4>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d101      	bne.n	8008fd8 <xQueueGenericSend+0xa8>
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e000      	b.n	8008fda <xQueueGenericSend+0xaa>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d10b      	bne.n	8008ff6 <xQueueGenericSend+0xc6>
	__asm volatile
 8008fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	61fb      	str	r3, [r7, #28]
}
 8008ff0:	bf00      	nop
 8008ff2:	bf00      	nop
 8008ff4:	e7fd      	b.n	8008ff2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ff6:	f002 fc07 	bl	800b808 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009002:	429a      	cmp	r2, r3
 8009004:	d302      	bcc.n	800900c <xQueueGenericSend+0xdc>
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	2b02      	cmp	r3, #2
 800900a:	d129      	bne.n	8009060 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	68b9      	ldr	r1, [r7, #8]
 8009010:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009012:	f000 fc91 	bl	8009938 <prvCopyDataToQueue>
 8009016:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800901c:	2b00      	cmp	r3, #0
 800901e:	d010      	beq.n	8009042 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009022:	3324      	adds	r3, #36	@ 0x24
 8009024:	4618      	mov	r0, r3
 8009026:	f001 fbb9 	bl	800a79c <xTaskRemoveFromEventList>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d013      	beq.n	8009058 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009030:	4b3f      	ldr	r3, [pc, #252]	@ (8009130 <xQueueGenericSend+0x200>)
 8009032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009036:	601a      	str	r2, [r3, #0]
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	f3bf 8f6f 	isb	sy
 8009040:	e00a      	b.n	8009058 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009044:	2b00      	cmp	r3, #0
 8009046:	d007      	beq.n	8009058 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009048:	4b39      	ldr	r3, [pc, #228]	@ (8009130 <xQueueGenericSend+0x200>)
 800904a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800904e:	601a      	str	r2, [r3, #0]
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009058:	f002 fc08 	bl	800b86c <vPortExitCritical>
				return pdPASS;
 800905c:	2301      	movs	r3, #1
 800905e:	e063      	b.n	8009128 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d103      	bne.n	800906e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009066:	f002 fc01 	bl	800b86c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800906a:	2300      	movs	r3, #0
 800906c:	e05c      	b.n	8009128 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800906e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009070:	2b00      	cmp	r3, #0
 8009072:	d106      	bne.n	8009082 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009074:	f107 0314 	add.w	r3, r7, #20
 8009078:	4618      	mov	r0, r3
 800907a:	f001 fbf3 	bl	800a864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800907e:	2301      	movs	r3, #1
 8009080:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009082:	f002 fbf3 	bl	800b86c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009086:	f001 f95b 	bl	800a340 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800908a:	f002 fbbd 	bl	800b808 <vPortEnterCritical>
 800908e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009090:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009094:	b25b      	sxtb	r3, r3
 8009096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800909a:	d103      	bne.n	80090a4 <xQueueGenericSend+0x174>
 800909c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80090a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090aa:	b25b      	sxtb	r3, r3
 80090ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b0:	d103      	bne.n	80090ba <xQueueGenericSend+0x18a>
 80090b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80090ba:	f002 fbd7 	bl	800b86c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090be:	1d3a      	adds	r2, r7, #4
 80090c0:	f107 0314 	add.w	r3, r7, #20
 80090c4:	4611      	mov	r1, r2
 80090c6:	4618      	mov	r0, r3
 80090c8:	f001 fbe2 	bl	800a890 <xTaskCheckForTimeOut>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d124      	bne.n	800911c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80090d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090d4:	f000 fd28 	bl	8009b28 <prvIsQueueFull>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d018      	beq.n	8009110 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80090de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e0:	3310      	adds	r3, #16
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	4611      	mov	r1, r2
 80090e6:	4618      	mov	r0, r3
 80090e8:	f001 fb06 	bl	800a6f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80090ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090ee:	f000 fcb3 	bl	8009a58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80090f2:	f001 f933 	bl	800a35c <xTaskResumeAll>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f47f af7c 	bne.w	8008ff6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80090fe:	4b0c      	ldr	r3, [pc, #48]	@ (8009130 <xQueueGenericSend+0x200>)
 8009100:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009104:	601a      	str	r2, [r3, #0]
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	f3bf 8f6f 	isb	sy
 800910e:	e772      	b.n	8008ff6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009110:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009112:	f000 fca1 	bl	8009a58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009116:	f001 f921 	bl	800a35c <xTaskResumeAll>
 800911a:	e76c      	b.n	8008ff6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800911c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800911e:	f000 fc9b 	bl	8009a58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009122:	f001 f91b 	bl	800a35c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009126:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009128:	4618      	mov	r0, r3
 800912a:	3738      	adds	r7, #56	@ 0x38
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	e000ed04 	.word	0xe000ed04

08009134 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b090      	sub	sp, #64	@ 0x40
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
 8009140:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10b      	bne.n	8009164 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800914c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009150:	f383 8811 	msr	BASEPRI, r3
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	f3bf 8f4f 	dsb	sy
 800915c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800915e:	bf00      	nop
 8009160:	bf00      	nop
 8009162:	e7fd      	b.n	8009160 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d103      	bne.n	8009172 <xQueueGenericSendFromISR+0x3e>
 800916a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800916c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800916e:	2b00      	cmp	r3, #0
 8009170:	d101      	bne.n	8009176 <xQueueGenericSendFromISR+0x42>
 8009172:	2301      	movs	r3, #1
 8009174:	e000      	b.n	8009178 <xQueueGenericSendFromISR+0x44>
 8009176:	2300      	movs	r3, #0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10b      	bne.n	8009194 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800917c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009180:	f383 8811 	msr	BASEPRI, r3
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800918e:	bf00      	nop
 8009190:	bf00      	nop
 8009192:	e7fd      	b.n	8009190 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	2b02      	cmp	r3, #2
 8009198:	d103      	bne.n	80091a2 <xQueueGenericSendFromISR+0x6e>
 800919a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d101      	bne.n	80091a6 <xQueueGenericSendFromISR+0x72>
 80091a2:	2301      	movs	r3, #1
 80091a4:	e000      	b.n	80091a8 <xQueueGenericSendFromISR+0x74>
 80091a6:	2300      	movs	r3, #0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10b      	bne.n	80091c4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80091ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	623b      	str	r3, [r7, #32]
}
 80091be:	bf00      	nop
 80091c0:	bf00      	nop
 80091c2:	e7fd      	b.n	80091c0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091c4:	f002 fc00 	bl	800b9c8 <vPortValidateInterruptPriority>
	__asm volatile
 80091c8:	f3ef 8211 	mrs	r2, BASEPRI
 80091cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d0:	f383 8811 	msr	BASEPRI, r3
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	61fa      	str	r2, [r7, #28]
 80091de:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80091e0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091e2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80091e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d302      	bcc.n	80091f6 <xQueueGenericSendFromISR+0xc2>
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	d12f      	bne.n	8009256 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80091f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80091fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009204:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009206:	683a      	ldr	r2, [r7, #0]
 8009208:	68b9      	ldr	r1, [r7, #8]
 800920a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800920c:	f000 fb94 	bl	8009938 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009210:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009218:	d112      	bne.n	8009240 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800921a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800921e:	2b00      	cmp	r3, #0
 8009220:	d016      	beq.n	8009250 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009224:	3324      	adds	r3, #36	@ 0x24
 8009226:	4618      	mov	r0, r3
 8009228:	f001 fab8 	bl	800a79c <xTaskRemoveFromEventList>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00e      	beq.n	8009250 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00b      	beq.n	8009250 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	601a      	str	r2, [r3, #0]
 800923e:	e007      	b.n	8009250 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009240:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009244:	3301      	adds	r3, #1
 8009246:	b2db      	uxtb	r3, r3
 8009248:	b25a      	sxtb	r2, r3
 800924a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800924c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009250:	2301      	movs	r3, #1
 8009252:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009254:	e001      	b.n	800925a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009256:	2300      	movs	r3, #0
 8009258:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800925a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800925c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	f383 8811 	msr	BASEPRI, r3
}
 8009264:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009268:	4618      	mov	r0, r3
 800926a:	3740      	adds	r7, #64	@ 0x40
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b08e      	sub	sp, #56	@ 0x38
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800927e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10b      	bne.n	800929c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8009284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	623b      	str	r3, [r7, #32]
}
 8009296:	bf00      	nop
 8009298:	bf00      	nop
 800929a:	e7fd      	b.n	8009298 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800929c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00b      	beq.n	80092bc <xQueueGiveFromISR+0x4c>
	__asm volatile
 80092a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	61fb      	str	r3, [r7, #28]
}
 80092b6:	bf00      	nop
 80092b8:	bf00      	nop
 80092ba:	e7fd      	b.n	80092b8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80092bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d103      	bne.n	80092cc <xQueueGiveFromISR+0x5c>
 80092c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d101      	bne.n	80092d0 <xQueueGiveFromISR+0x60>
 80092cc:	2301      	movs	r3, #1
 80092ce:	e000      	b.n	80092d2 <xQueueGiveFromISR+0x62>
 80092d0:	2300      	movs	r3, #0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10b      	bne.n	80092ee <xQueueGiveFromISR+0x7e>
	__asm volatile
 80092d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092da:	f383 8811 	msr	BASEPRI, r3
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	61bb      	str	r3, [r7, #24]
}
 80092e8:	bf00      	nop
 80092ea:	bf00      	nop
 80092ec:	e7fd      	b.n	80092ea <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092ee:	f002 fb6b 	bl	800b9c8 <vPortValidateInterruptPriority>
	__asm volatile
 80092f2:	f3ef 8211 	mrs	r2, BASEPRI
 80092f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092fa:	f383 8811 	msr	BASEPRI, r3
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	617a      	str	r2, [r7, #20]
 8009308:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800930a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800930c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800930e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009312:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009318:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800931a:	429a      	cmp	r2, r3
 800931c:	d22b      	bcs.n	8009376 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800931e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009320:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009324:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800932a:	1c5a      	adds	r2, r3, #1
 800932c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009330:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009338:	d112      	bne.n	8009360 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800933a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800933e:	2b00      	cmp	r3, #0
 8009340:	d016      	beq.n	8009370 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009344:	3324      	adds	r3, #36	@ 0x24
 8009346:	4618      	mov	r0, r3
 8009348:	f001 fa28 	bl	800a79c <xTaskRemoveFromEventList>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00e      	beq.n	8009370 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00b      	beq.n	8009370 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	2201      	movs	r2, #1
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	e007      	b.n	8009370 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009364:	3301      	adds	r3, #1
 8009366:	b2db      	uxtb	r3, r3
 8009368:	b25a      	sxtb	r2, r3
 800936a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009370:	2301      	movs	r3, #1
 8009372:	637b      	str	r3, [r7, #52]	@ 0x34
 8009374:	e001      	b.n	800937a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009376:	2300      	movs	r3, #0
 8009378:	637b      	str	r3, [r7, #52]	@ 0x34
 800937a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800937c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f383 8811 	msr	BASEPRI, r3
}
 8009384:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009388:	4618      	mov	r0, r3
 800938a:	3738      	adds	r7, #56	@ 0x38
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b08c      	sub	sp, #48	@ 0x30
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800939c:	2300      	movs	r3, #0
 800939e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80093a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d10b      	bne.n	80093c2 <xQueueReceive+0x32>
	__asm volatile
 80093aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ae:	f383 8811 	msr	BASEPRI, r3
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	623b      	str	r3, [r7, #32]
}
 80093bc:	bf00      	nop
 80093be:	bf00      	nop
 80093c0:	e7fd      	b.n	80093be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d103      	bne.n	80093d0 <xQueueReceive+0x40>
 80093c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d101      	bne.n	80093d4 <xQueueReceive+0x44>
 80093d0:	2301      	movs	r3, #1
 80093d2:	e000      	b.n	80093d6 <xQueueReceive+0x46>
 80093d4:	2300      	movs	r3, #0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10b      	bne.n	80093f2 <xQueueReceive+0x62>
	__asm volatile
 80093da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093de:	f383 8811 	msr	BASEPRI, r3
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	61fb      	str	r3, [r7, #28]
}
 80093ec:	bf00      	nop
 80093ee:	bf00      	nop
 80093f0:	e7fd      	b.n	80093ee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093f2:	f001 fb99 	bl	800ab28 <xTaskGetSchedulerState>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d102      	bne.n	8009402 <xQueueReceive+0x72>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d101      	bne.n	8009406 <xQueueReceive+0x76>
 8009402:	2301      	movs	r3, #1
 8009404:	e000      	b.n	8009408 <xQueueReceive+0x78>
 8009406:	2300      	movs	r3, #0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10b      	bne.n	8009424 <xQueueReceive+0x94>
	__asm volatile
 800940c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009410:	f383 8811 	msr	BASEPRI, r3
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	61bb      	str	r3, [r7, #24]
}
 800941e:	bf00      	nop
 8009420:	bf00      	nop
 8009422:	e7fd      	b.n	8009420 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009424:	f002 f9f0 	bl	800b808 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800942c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800942e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009430:	2b00      	cmp	r3, #0
 8009432:	d01f      	beq.n	8009474 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009434:	68b9      	ldr	r1, [r7, #8]
 8009436:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009438:	f000 fae8 	bl	8009a0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800943c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943e:	1e5a      	subs	r2, r3, #1
 8009440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009442:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009446:	691b      	ldr	r3, [r3, #16]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00f      	beq.n	800946c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800944c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800944e:	3310      	adds	r3, #16
 8009450:	4618      	mov	r0, r3
 8009452:	f001 f9a3 	bl	800a79c <xTaskRemoveFromEventList>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d007      	beq.n	800946c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800945c:	4b3c      	ldr	r3, [pc, #240]	@ (8009550 <xQueueReceive+0x1c0>)
 800945e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009462:	601a      	str	r2, [r3, #0]
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800946c:	f002 f9fe 	bl	800b86c <vPortExitCritical>
				return pdPASS;
 8009470:	2301      	movs	r3, #1
 8009472:	e069      	b.n	8009548 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d103      	bne.n	8009482 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800947a:	f002 f9f7 	bl	800b86c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800947e:	2300      	movs	r3, #0
 8009480:	e062      	b.n	8009548 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009484:	2b00      	cmp	r3, #0
 8009486:	d106      	bne.n	8009496 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009488:	f107 0310 	add.w	r3, r7, #16
 800948c:	4618      	mov	r0, r3
 800948e:	f001 f9e9 	bl	800a864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009492:	2301      	movs	r3, #1
 8009494:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009496:	f002 f9e9 	bl	800b86c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800949a:	f000 ff51 	bl	800a340 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800949e:	f002 f9b3 	bl	800b808 <vPortEnterCritical>
 80094a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80094a8:	b25b      	sxtb	r3, r3
 80094aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ae:	d103      	bne.n	80094b8 <xQueueReceive+0x128>
 80094b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80094be:	b25b      	sxtb	r3, r3
 80094c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c4:	d103      	bne.n	80094ce <xQueueReceive+0x13e>
 80094c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80094ce:	f002 f9cd 	bl	800b86c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094d2:	1d3a      	adds	r2, r7, #4
 80094d4:	f107 0310 	add.w	r3, r7, #16
 80094d8:	4611      	mov	r1, r2
 80094da:	4618      	mov	r0, r3
 80094dc:	f001 f9d8 	bl	800a890 <xTaskCheckForTimeOut>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d123      	bne.n	800952e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094e8:	f000 fb08 	bl	8009afc <prvIsQueueEmpty>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d017      	beq.n	8009522 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80094f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f4:	3324      	adds	r3, #36	@ 0x24
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	4611      	mov	r1, r2
 80094fa:	4618      	mov	r0, r3
 80094fc:	f001 f8fc 	bl	800a6f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009500:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009502:	f000 faa9 	bl	8009a58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009506:	f000 ff29 	bl	800a35c <xTaskResumeAll>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d189      	bne.n	8009424 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009510:	4b0f      	ldr	r3, [pc, #60]	@ (8009550 <xQueueReceive+0x1c0>)
 8009512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009516:	601a      	str	r2, [r3, #0]
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	e780      	b.n	8009424 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009522:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009524:	f000 fa98 	bl	8009a58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009528:	f000 ff18 	bl	800a35c <xTaskResumeAll>
 800952c:	e77a      	b.n	8009424 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800952e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009530:	f000 fa92 	bl	8009a58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009534:	f000 ff12 	bl	800a35c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009538:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800953a:	f000 fadf 	bl	8009afc <prvIsQueueEmpty>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	f43f af6f 	beq.w	8009424 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009546:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009548:	4618      	mov	r0, r3
 800954a:	3730      	adds	r7, #48	@ 0x30
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	e000ed04 	.word	0xe000ed04

08009554 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b08e      	sub	sp, #56	@ 0x38
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800955e:	2300      	movs	r3, #0
 8009560:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009566:	2300      	movs	r3, #0
 8009568:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800956a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10b      	bne.n	8009588 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009574:	f383 8811 	msr	BASEPRI, r3
 8009578:	f3bf 8f6f 	isb	sy
 800957c:	f3bf 8f4f 	dsb	sy
 8009580:	623b      	str	r3, [r7, #32]
}
 8009582:	bf00      	nop
 8009584:	bf00      	nop
 8009586:	e7fd      	b.n	8009584 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800958a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00b      	beq.n	80095a8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	61fb      	str	r3, [r7, #28]
}
 80095a2:	bf00      	nop
 80095a4:	bf00      	nop
 80095a6:	e7fd      	b.n	80095a4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095a8:	f001 fabe 	bl	800ab28 <xTaskGetSchedulerState>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d102      	bne.n	80095b8 <xQueueSemaphoreTake+0x64>
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d101      	bne.n	80095bc <xQueueSemaphoreTake+0x68>
 80095b8:	2301      	movs	r3, #1
 80095ba:	e000      	b.n	80095be <xQueueSemaphoreTake+0x6a>
 80095bc:	2300      	movs	r3, #0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d10b      	bne.n	80095da <xQueueSemaphoreTake+0x86>
	__asm volatile
 80095c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	61bb      	str	r3, [r7, #24]
}
 80095d4:	bf00      	nop
 80095d6:	bf00      	nop
 80095d8:	e7fd      	b.n	80095d6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095da:	f002 f915 	bl	800b808 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80095de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095e2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80095e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d024      	beq.n	8009634 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80095ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ec:	1e5a      	subs	r2, r3, #1
 80095ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095f0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d104      	bne.n	8009604 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80095fa:	f001 fc0f 	bl	800ae1c <pvTaskIncrementMutexHeldCount>
 80095fe:	4602      	mov	r2, r0
 8009600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009602:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00f      	beq.n	800962c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800960c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800960e:	3310      	adds	r3, #16
 8009610:	4618      	mov	r0, r3
 8009612:	f001 f8c3 	bl	800a79c <xTaskRemoveFromEventList>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d007      	beq.n	800962c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800961c:	4b54      	ldr	r3, [pc, #336]	@ (8009770 <xQueueSemaphoreTake+0x21c>)
 800961e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009622:	601a      	str	r2, [r3, #0]
 8009624:	f3bf 8f4f 	dsb	sy
 8009628:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800962c:	f002 f91e 	bl	800b86c <vPortExitCritical>
				return pdPASS;
 8009630:	2301      	movs	r3, #1
 8009632:	e098      	b.n	8009766 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d112      	bne.n	8009660 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800963a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00b      	beq.n	8009658 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	617b      	str	r3, [r7, #20]
}
 8009652:	bf00      	nop
 8009654:	bf00      	nop
 8009656:	e7fd      	b.n	8009654 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009658:	f002 f908 	bl	800b86c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800965c:	2300      	movs	r3, #0
 800965e:	e082      	b.n	8009766 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009662:	2b00      	cmp	r3, #0
 8009664:	d106      	bne.n	8009674 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009666:	f107 030c 	add.w	r3, r7, #12
 800966a:	4618      	mov	r0, r3
 800966c:	f001 f8fa 	bl	800a864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009670:	2301      	movs	r3, #1
 8009672:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009674:	f002 f8fa 	bl	800b86c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009678:	f000 fe62 	bl	800a340 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800967c:	f002 f8c4 	bl	800b808 <vPortEnterCritical>
 8009680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009682:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009686:	b25b      	sxtb	r3, r3
 8009688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968c:	d103      	bne.n	8009696 <xQueueSemaphoreTake+0x142>
 800968e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009690:	2200      	movs	r2, #0
 8009692:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009698:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800969c:	b25b      	sxtb	r3, r3
 800969e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a2:	d103      	bne.n	80096ac <xQueueSemaphoreTake+0x158>
 80096a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80096ac:	f002 f8de 	bl	800b86c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096b0:	463a      	mov	r2, r7
 80096b2:	f107 030c 	add.w	r3, r7, #12
 80096b6:	4611      	mov	r1, r2
 80096b8:	4618      	mov	r0, r3
 80096ba:	f001 f8e9 	bl	800a890 <xTaskCheckForTimeOut>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d132      	bne.n	800972a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80096c6:	f000 fa19 	bl	8009afc <prvIsQueueEmpty>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d026      	beq.n	800971e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80096d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d109      	bne.n	80096ec <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80096d8:	f002 f896 	bl	800b808 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80096dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	4618      	mov	r0, r3
 80096e2:	f001 fa3f 	bl	800ab64 <xTaskPriorityInherit>
 80096e6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80096e8:	f002 f8c0 	bl	800b86c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ee:	3324      	adds	r3, #36	@ 0x24
 80096f0:	683a      	ldr	r2, [r7, #0]
 80096f2:	4611      	mov	r1, r2
 80096f4:	4618      	mov	r0, r3
 80096f6:	f000 ffff 	bl	800a6f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80096fc:	f000 f9ac 	bl	8009a58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009700:	f000 fe2c 	bl	800a35c <xTaskResumeAll>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	f47f af67 	bne.w	80095da <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800970c:	4b18      	ldr	r3, [pc, #96]	@ (8009770 <xQueueSemaphoreTake+0x21c>)
 800970e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009712:	601a      	str	r2, [r3, #0]
 8009714:	f3bf 8f4f 	dsb	sy
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	e75d      	b.n	80095da <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800971e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009720:	f000 f99a 	bl	8009a58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009724:	f000 fe1a 	bl	800a35c <xTaskResumeAll>
 8009728:	e757      	b.n	80095da <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800972a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800972c:	f000 f994 	bl	8009a58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009730:	f000 fe14 	bl	800a35c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009734:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009736:	f000 f9e1 	bl	8009afc <prvIsQueueEmpty>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	f43f af4c 	beq.w	80095da <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00d      	beq.n	8009764 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009748:	f002 f85e 	bl	800b808 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800974c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800974e:	f000 f8db 	bl	8009908 <prvGetDisinheritPriorityAfterTimeout>
 8009752:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800975a:	4618      	mov	r0, r3
 800975c:	f001 fada 	bl	800ad14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009760:	f002 f884 	bl	800b86c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009764:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009766:	4618      	mov	r0, r3
 8009768:	3738      	adds	r7, #56	@ 0x38
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	e000ed04 	.word	0xe000ed04

08009774 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b08e      	sub	sp, #56	@ 0x38
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10b      	bne.n	80097a2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800978a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978e:	f383 8811 	msr	BASEPRI, r3
 8009792:	f3bf 8f6f 	isb	sy
 8009796:	f3bf 8f4f 	dsb	sy
 800979a:	623b      	str	r3, [r7, #32]
}
 800979c:	bf00      	nop
 800979e:	bf00      	nop
 80097a0:	e7fd      	b.n	800979e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d103      	bne.n	80097b0 <xQueueReceiveFromISR+0x3c>
 80097a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <xQueueReceiveFromISR+0x40>
 80097b0:	2301      	movs	r3, #1
 80097b2:	e000      	b.n	80097b6 <xQueueReceiveFromISR+0x42>
 80097b4:	2300      	movs	r3, #0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10b      	bne.n	80097d2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80097ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097be:	f383 8811 	msr	BASEPRI, r3
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	61fb      	str	r3, [r7, #28]
}
 80097cc:	bf00      	nop
 80097ce:	bf00      	nop
 80097d0:	e7fd      	b.n	80097ce <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097d2:	f002 f8f9 	bl	800b9c8 <vPortValidateInterruptPriority>
	__asm volatile
 80097d6:	f3ef 8211 	mrs	r2, BASEPRI
 80097da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097de:	f383 8811 	msr	BASEPRI, r3
 80097e2:	f3bf 8f6f 	isb	sy
 80097e6:	f3bf 8f4f 	dsb	sy
 80097ea:	61ba      	str	r2, [r7, #24]
 80097ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80097ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80097f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097f6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d02f      	beq.n	800985e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80097fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009800:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009804:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009808:	68b9      	ldr	r1, [r7, #8]
 800980a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800980c:	f000 f8fe 	bl	8009a0c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009812:	1e5a      	subs	r2, r3, #1
 8009814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009816:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009818:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800981c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009820:	d112      	bne.n	8009848 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d016      	beq.n	8009858 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800982a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800982c:	3310      	adds	r3, #16
 800982e:	4618      	mov	r0, r3
 8009830:	f000 ffb4 	bl	800a79c <xTaskRemoveFromEventList>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00e      	beq.n	8009858 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00b      	beq.n	8009858 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	601a      	str	r2, [r3, #0]
 8009846:	e007      	b.n	8009858 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009848:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800984c:	3301      	adds	r3, #1
 800984e:	b2db      	uxtb	r3, r3
 8009850:	b25a      	sxtb	r2, r3
 8009852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009858:	2301      	movs	r3, #1
 800985a:	637b      	str	r3, [r7, #52]	@ 0x34
 800985c:	e001      	b.n	8009862 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800985e:	2300      	movs	r3, #0
 8009860:	637b      	str	r3, [r7, #52]	@ 0x34
 8009862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009864:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	f383 8811 	msr	BASEPRI, r3
}
 800986c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800986e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009870:	4618      	mov	r0, r3
 8009872:	3738      	adds	r7, #56	@ 0x38
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b086      	sub	sp, #24
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d10b      	bne.n	80098a2 <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	60fb      	str	r3, [r7, #12]
}
 800989c:	bf00      	nop
 800989e:	bf00      	nop
 80098a0:	e7fd      	b.n	800989e <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 80098a2:	f001 ffb1 	bl	800b808 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80098b2:	f001 ffdb 	bl	800b86c <vPortExitCritical>

	return uxReturn;
 80098b6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80098b8:	4618      	mov	r0, r3
 80098ba:	3718      	adds	r7, #24
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d10b      	bne.n	80098ea <vQueueDelete+0x2a>
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	60bb      	str	r3, [r7, #8]
}
 80098e4:	bf00      	nop
 80098e6:	bf00      	nop
 80098e8:	e7fd      	b.n	80098e6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f000 f95e 	bl	8009bac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d102      	bne.n	8009900 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f002 f974 	bl	800bbe8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009900:	bf00      	nop
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009914:	2b00      	cmp	r3, #0
 8009916:	d006      	beq.n	8009926 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009922:	60fb      	str	r3, [r7, #12]
 8009924:	e001      	b.n	800992a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009926:	2300      	movs	r3, #0
 8009928:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800992a:	68fb      	ldr	r3, [r7, #12]
	}
 800992c:	4618      	mov	r0, r3
 800992e:	3714      	adds	r7, #20
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b086      	sub	sp, #24
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009944:	2300      	movs	r3, #0
 8009946:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800994c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009952:	2b00      	cmp	r3, #0
 8009954:	d10d      	bne.n	8009972 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d14d      	bne.n	80099fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	4618      	mov	r0, r3
 8009964:	f001 f966 	bl	800ac34 <xTaskPriorityDisinherit>
 8009968:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	609a      	str	r2, [r3, #8]
 8009970:	e043      	b.n	80099fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d119      	bne.n	80099ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6858      	ldr	r0, [r3, #4]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009980:	461a      	mov	r2, r3
 8009982:	68b9      	ldr	r1, [r7, #8]
 8009984:	f002 fad4 	bl	800bf30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	685a      	ldr	r2, [r3, #4]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009990:	441a      	add	r2, r3
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d32b      	bcc.n	80099fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	605a      	str	r2, [r3, #4]
 80099aa:	e026      	b.n	80099fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	68d8      	ldr	r0, [r3, #12]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099b4:	461a      	mov	r2, r3
 80099b6:	68b9      	ldr	r1, [r7, #8]
 80099b8:	f002 faba 	bl	800bf30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	68da      	ldr	r2, [r3, #12]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099c4:	425b      	negs	r3, r3
 80099c6:	441a      	add	r2, r3
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	68da      	ldr	r2, [r3, #12]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d207      	bcs.n	80099e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	689a      	ldr	r2, [r3, #8]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e0:	425b      	negs	r3, r3
 80099e2:	441a      	add	r2, r3
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d105      	bne.n	80099fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d002      	beq.n	80099fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	3b01      	subs	r3, #1
 80099f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	1c5a      	adds	r2, r3, #1
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009a02:	697b      	ldr	r3, [r7, #20]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3718      	adds	r7, #24
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d018      	beq.n	8009a50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	68da      	ldr	r2, [r3, #12]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a26:	441a      	add	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	68da      	ldr	r2, [r3, #12]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d303      	bcc.n	8009a40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	68d9      	ldr	r1, [r3, #12]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a48:	461a      	mov	r2, r3
 8009a4a:	6838      	ldr	r0, [r7, #0]
 8009a4c:	f002 fa70 	bl	800bf30 <memcpy>
	}
}
 8009a50:	bf00      	nop
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009a60:	f001 fed2 	bl	800b808 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a6c:	e011      	b.n	8009a92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d012      	beq.n	8009a9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	3324      	adds	r3, #36	@ 0x24
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f000 fe8e 	bl	800a79c <xTaskRemoveFromEventList>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d001      	beq.n	8009a8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009a86:	f000 ff67 	bl	800a958 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009a8a:	7bfb      	ldrb	r3, [r7, #15]
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	dce9      	bgt.n	8009a6e <prvUnlockQueue+0x16>
 8009a9a:	e000      	b.n	8009a9e <prvUnlockQueue+0x46>
					break;
 8009a9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	22ff      	movs	r2, #255	@ 0xff
 8009aa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009aa6:	f001 fee1 	bl	800b86c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009aaa:	f001 fead 	bl	800b808 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ab4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ab6:	e011      	b.n	8009adc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d012      	beq.n	8009ae6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	3310      	adds	r3, #16
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f000 fe69 	bl	800a79c <xTaskRemoveFromEventList>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d001      	beq.n	8009ad4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009ad0:	f000 ff42 	bl	800a958 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009ad4:	7bbb      	ldrb	r3, [r7, #14]
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009adc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	dce9      	bgt.n	8009ab8 <prvUnlockQueue+0x60>
 8009ae4:	e000      	b.n	8009ae8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009ae6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	22ff      	movs	r2, #255	@ 0xff
 8009aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009af0:	f001 febc 	bl	800b86c <vPortExitCritical>
}
 8009af4:	bf00      	nop
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b04:	f001 fe80 	bl	800b808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d102      	bne.n	8009b16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b10:	2301      	movs	r3, #1
 8009b12:	60fb      	str	r3, [r7, #12]
 8009b14:	e001      	b.n	8009b1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b16:	2300      	movs	r3, #0
 8009b18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b1a:	f001 fea7 	bl	800b86c <vPortExitCritical>

	return xReturn;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b30:	f001 fe6a 	bl	800b808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d102      	bne.n	8009b46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009b40:	2301      	movs	r3, #1
 8009b42:	60fb      	str	r3, [r7, #12]
 8009b44:	e001      	b.n	8009b4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009b46:	2300      	movs	r3, #0
 8009b48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b4a:	f001 fe8f 	bl	800b86c <vPortExitCritical>

	return xReturn;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b62:	2300      	movs	r3, #0
 8009b64:	60fb      	str	r3, [r7, #12]
 8009b66:	e014      	b.n	8009b92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009b68:	4a0f      	ldr	r2, [pc, #60]	@ (8009ba8 <vQueueAddToRegistry+0x50>)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10b      	bne.n	8009b8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009b74:	490c      	ldr	r1, [pc, #48]	@ (8009ba8 <vQueueAddToRegistry+0x50>)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	683a      	ldr	r2, [r7, #0]
 8009b7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8009ba8 <vQueueAddToRegistry+0x50>)
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	00db      	lsls	r3, r3, #3
 8009b84:	4413      	add	r3, r2
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009b8a:	e006      	b.n	8009b9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	60fb      	str	r3, [r7, #12]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2b07      	cmp	r3, #7
 8009b96:	d9e7      	bls.n	8009b68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009b98:	bf00      	nop
 8009b9a:	bf00      	nop
 8009b9c:	3714      	adds	r7, #20
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	20000d2c 	.word	0x20000d2c

08009bac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	60fb      	str	r3, [r7, #12]
 8009bb8:	e016      	b.n	8009be8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009bba:	4a10      	ldr	r2, [pc, #64]	@ (8009bfc <vQueueUnregisterQueue+0x50>)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	00db      	lsls	r3, r3, #3
 8009bc0:	4413      	add	r3, r2
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d10b      	bne.n	8009be2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009bca:	4a0c      	ldr	r2, [pc, #48]	@ (8009bfc <vQueueUnregisterQueue+0x50>)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2100      	movs	r1, #0
 8009bd0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009bd4:	4a09      	ldr	r2, [pc, #36]	@ (8009bfc <vQueueUnregisterQueue+0x50>)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	00db      	lsls	r3, r3, #3
 8009bda:	4413      	add	r3, r2
 8009bdc:	2200      	movs	r2, #0
 8009bde:	605a      	str	r2, [r3, #4]
				break;
 8009be0:	e006      	b.n	8009bf0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	3301      	adds	r3, #1
 8009be6:	60fb      	str	r3, [r7, #12]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2b07      	cmp	r3, #7
 8009bec:	d9e5      	bls.n	8009bba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009bee:	bf00      	nop
 8009bf0:	bf00      	nop
 8009bf2:	3714      	adds	r7, #20
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr
 8009bfc:	20000d2c 	.word	0x20000d2c

08009c00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b086      	sub	sp, #24
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c10:	f001 fdfa 	bl	800b808 <vPortEnterCritical>
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c1a:	b25b      	sxtb	r3, r3
 8009c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c20:	d103      	bne.n	8009c2a <vQueueWaitForMessageRestricted+0x2a>
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c30:	b25b      	sxtb	r3, r3
 8009c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c36:	d103      	bne.n	8009c40 <vQueueWaitForMessageRestricted+0x40>
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c40:	f001 fe14 	bl	800b86c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d106      	bne.n	8009c5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	3324      	adds	r3, #36	@ 0x24
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	68b9      	ldr	r1, [r7, #8]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f000 fd75 	bl	800a744 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009c5a:	6978      	ldr	r0, [r7, #20]
 8009c5c:	f7ff fefc 	bl	8009a58 <prvUnlockQueue>
	}
 8009c60:	bf00      	nop
 8009c62:	3718      	adds	r7, #24
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b08e      	sub	sp, #56	@ 0x38
 8009c6c:	af04      	add	r7, sp, #16
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	607a      	str	r2, [r7, #4]
 8009c74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10b      	bne.n	8009c94 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	623b      	str	r3, [r7, #32]
}
 8009c8e:	bf00      	nop
 8009c90:	bf00      	nop
 8009c92:	e7fd      	b.n	8009c90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d10b      	bne.n	8009cb2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c9e:	f383 8811 	msr	BASEPRI, r3
 8009ca2:	f3bf 8f6f 	isb	sy
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	61fb      	str	r3, [r7, #28]
}
 8009cac:	bf00      	nop
 8009cae:	bf00      	nop
 8009cb0:	e7fd      	b.n	8009cae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009cb2:	23a8      	movs	r3, #168	@ 0xa8
 8009cb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	2ba8      	cmp	r3, #168	@ 0xa8
 8009cba:	d00b      	beq.n	8009cd4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc0:	f383 8811 	msr	BASEPRI, r3
 8009cc4:	f3bf 8f6f 	isb	sy
 8009cc8:	f3bf 8f4f 	dsb	sy
 8009ccc:	61bb      	str	r3, [r7, #24]
}
 8009cce:	bf00      	nop
 8009cd0:	bf00      	nop
 8009cd2:	e7fd      	b.n	8009cd0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009cd4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d01e      	beq.n	8009d1a <xTaskCreateStatic+0xb2>
 8009cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d01b      	beq.n	8009d1a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009cea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cee:	2202      	movs	r2, #2
 8009cf0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	9303      	str	r3, [sp, #12]
 8009cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cfa:	9302      	str	r3, [sp, #8]
 8009cfc:	f107 0314 	add.w	r3, r7, #20
 8009d00:	9301      	str	r3, [sp, #4]
 8009d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	68b9      	ldr	r1, [r7, #8]
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f000 f851 	bl	8009db4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d14:	f000 f8f6 	bl	8009f04 <prvAddNewTaskToReadyList>
 8009d18:	e001      	b.n	8009d1e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d1e:	697b      	ldr	r3, [r7, #20]
	}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3728      	adds	r7, #40	@ 0x28
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b08c      	sub	sp, #48	@ 0x30
 8009d2c:	af04      	add	r7, sp, #16
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	603b      	str	r3, [r7, #0]
 8009d34:	4613      	mov	r3, r2
 8009d36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d38:	88fb      	ldrh	r3, [r7, #6]
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f001 fe85 	bl	800ba4c <pvPortMalloc>
 8009d42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00e      	beq.n	8009d68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d4a:	20a8      	movs	r0, #168	@ 0xa8
 8009d4c:	f001 fe7e 	bl	800ba4c <pvPortMalloc>
 8009d50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d003      	beq.n	8009d60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	697a      	ldr	r2, [r7, #20]
 8009d5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8009d5e:	e005      	b.n	8009d6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d60:	6978      	ldr	r0, [r7, #20]
 8009d62:	f001 ff41 	bl	800bbe8 <vPortFree>
 8009d66:	e001      	b.n	8009d6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d017      	beq.n	8009da2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d7a:	88fa      	ldrh	r2, [r7, #6]
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	9303      	str	r3, [sp, #12]
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	9302      	str	r3, [sp, #8]
 8009d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d86:	9301      	str	r3, [sp, #4]
 8009d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d8a:	9300      	str	r3, [sp, #0]
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	68b9      	ldr	r1, [r7, #8]
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f000 f80f 	bl	8009db4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d96:	69f8      	ldr	r0, [r7, #28]
 8009d98:	f000 f8b4 	bl	8009f04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	61bb      	str	r3, [r7, #24]
 8009da0:	e002      	b.n	8009da8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009da2:	f04f 33ff 	mov.w	r3, #4294967295
 8009da6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009da8:	69bb      	ldr	r3, [r7, #24]
	}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3720      	adds	r7, #32
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
	...

08009db4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b088      	sub	sp, #32
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
 8009dc0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	461a      	mov	r2, r3
 8009dcc:	21a5      	movs	r1, #165	@ 0xa5
 8009dce:	f002 f82b 	bl	800be28 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009de4:	69bb      	ldr	r3, [r7, #24]
 8009de6:	f023 0307 	bic.w	r3, r3, #7
 8009dea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	f003 0307 	and.w	r3, r3, #7
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d00b      	beq.n	8009e0e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dfa:	f383 8811 	msr	BASEPRI, r3
 8009dfe:	f3bf 8f6f 	isb	sy
 8009e02:	f3bf 8f4f 	dsb	sy
 8009e06:	617b      	str	r3, [r7, #20]
}
 8009e08:	bf00      	nop
 8009e0a:	bf00      	nop
 8009e0c:	e7fd      	b.n	8009e0a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d01f      	beq.n	8009e54 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e14:	2300      	movs	r3, #0
 8009e16:	61fb      	str	r3, [r7, #28]
 8009e18:	e012      	b.n	8009e40 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e1a:	68ba      	ldr	r2, [r7, #8]
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	4413      	add	r3, r2
 8009e20:	7819      	ldrb	r1, [r3, #0]
 8009e22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	4413      	add	r3, r2
 8009e28:	3334      	adds	r3, #52	@ 0x34
 8009e2a:	460a      	mov	r2, r1
 8009e2c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	4413      	add	r3, r2
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d006      	beq.n	8009e48 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	61fb      	str	r3, [r7, #28]
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	2b0f      	cmp	r3, #15
 8009e44:	d9e9      	bls.n	8009e1a <prvInitialiseNewTask+0x66>
 8009e46:	e000      	b.n	8009e4a <prvInitialiseNewTask+0x96>
			{
				break;
 8009e48:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009e52:	e003      	b.n	8009e5c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e5e:	2b37      	cmp	r3, #55	@ 0x37
 8009e60:	d901      	bls.n	8009e66 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e62:	2337      	movs	r3, #55	@ 0x37
 8009e64:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e70:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e74:	2200      	movs	r2, #0
 8009e76:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7a:	3304      	adds	r3, #4
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7fe fe0f 	bl	8008aa0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e84:	3318      	adds	r3, #24
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7fe fe0a 	bl	8008aa0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e90:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e94:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e9a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ea0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eac:	2200      	movs	r2, #0
 8009eae:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb4:	3354      	adds	r3, #84	@ 0x54
 8009eb6:	224c      	movs	r2, #76	@ 0x4c
 8009eb8:	2100      	movs	r1, #0
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f001 ffb4 	bl	800be28 <memset>
 8009ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec2:	4a0d      	ldr	r2, [pc, #52]	@ (8009ef8 <prvInitialiseNewTask+0x144>)
 8009ec4:	659a      	str	r2, [r3, #88]	@ 0x58
 8009ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec8:	4a0c      	ldr	r2, [pc, #48]	@ (8009efc <prvInitialiseNewTask+0x148>)
 8009eca:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ece:	4a0c      	ldr	r2, [pc, #48]	@ (8009f00 <prvInitialiseNewTask+0x14c>)
 8009ed0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ed2:	683a      	ldr	r2, [r7, #0]
 8009ed4:	68f9      	ldr	r1, [r7, #12]
 8009ed6:	69b8      	ldr	r0, [r7, #24]
 8009ed8:	f001 fb62 	bl	800b5a0 <pxPortInitialiseStack>
 8009edc:	4602      	mov	r2, r0
 8009ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d002      	beq.n	8009eee <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009eec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009eee:	bf00      	nop
 8009ef0:	3720      	adds	r7, #32
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	20001f78 	.word	0x20001f78
 8009efc:	20001fe0 	.word	0x20001fe0
 8009f00:	20002048 	.word	0x20002048

08009f04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f0c:	f001 fc7c 	bl	800b808 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f10:	4b2d      	ldr	r3, [pc, #180]	@ (8009fc8 <prvAddNewTaskToReadyList+0xc4>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	3301      	adds	r3, #1
 8009f16:	4a2c      	ldr	r2, [pc, #176]	@ (8009fc8 <prvAddNewTaskToReadyList+0xc4>)
 8009f18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8009fcc <prvAddNewTaskToReadyList+0xc8>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d109      	bne.n	8009f36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f22:	4a2a      	ldr	r2, [pc, #168]	@ (8009fcc <prvAddNewTaskToReadyList+0xc8>)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f28:	4b27      	ldr	r3, [pc, #156]	@ (8009fc8 <prvAddNewTaskToReadyList+0xc4>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d110      	bne.n	8009f52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f30:	f000 fd36 	bl	800a9a0 <prvInitialiseTaskLists>
 8009f34:	e00d      	b.n	8009f52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f36:	4b26      	ldr	r3, [pc, #152]	@ (8009fd0 <prvAddNewTaskToReadyList+0xcc>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d109      	bne.n	8009f52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f3e:	4b23      	ldr	r3, [pc, #140]	@ (8009fcc <prvAddNewTaskToReadyList+0xc8>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d802      	bhi.n	8009f52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8009fcc <prvAddNewTaskToReadyList+0xc8>)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f52:	4b20      	ldr	r3, [pc, #128]	@ (8009fd4 <prvAddNewTaskToReadyList+0xd0>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	3301      	adds	r3, #1
 8009f58:	4a1e      	ldr	r2, [pc, #120]	@ (8009fd4 <prvAddNewTaskToReadyList+0xd0>)
 8009f5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8009fd4 <prvAddNewTaskToReadyList+0xd0>)
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f68:	4b1b      	ldr	r3, [pc, #108]	@ (8009fd8 <prvAddNewTaskToReadyList+0xd4>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d903      	bls.n	8009f78 <prvAddNewTaskToReadyList+0x74>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f74:	4a18      	ldr	r2, [pc, #96]	@ (8009fd8 <prvAddNewTaskToReadyList+0xd4>)
 8009f76:	6013      	str	r3, [r2, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4413      	add	r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4a15      	ldr	r2, [pc, #84]	@ (8009fdc <prvAddNewTaskToReadyList+0xd8>)
 8009f86:	441a      	add	r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	4610      	mov	r0, r2
 8009f90:	f7fe fd93 	bl	8008aba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f94:	f001 fc6a 	bl	800b86c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f98:	4b0d      	ldr	r3, [pc, #52]	@ (8009fd0 <prvAddNewTaskToReadyList+0xcc>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d00e      	beq.n	8009fbe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8009fcc <prvAddNewTaskToReadyList+0xc8>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d207      	bcs.n	8009fbe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009fae:	4b0c      	ldr	r3, [pc, #48]	@ (8009fe0 <prvAddNewTaskToReadyList+0xdc>)
 8009fb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fb4:	601a      	str	r2, [r3, #0]
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fbe:	bf00      	nop
 8009fc0:	3708      	adds	r7, #8
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	20001240 	.word	0x20001240
 8009fcc:	20000d6c 	.word	0x20000d6c
 8009fd0:	2000124c 	.word	0x2000124c
 8009fd4:	2000125c 	.word	0x2000125c
 8009fd8:	20001248 	.word	0x20001248
 8009fdc:	20000d70 	.word	0x20000d70
 8009fe0:	e000ed04 	.word	0xe000ed04

08009fe4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009fec:	2300      	movs	r3, #0
 8009fee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d018      	beq.n	800a028 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009ff6:	4b14      	ldr	r3, [pc, #80]	@ (800a048 <vTaskDelay+0x64>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00b      	beq.n	800a016 <vTaskDelay+0x32>
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	60bb      	str	r3, [r7, #8]
}
 800a010:	bf00      	nop
 800a012:	bf00      	nop
 800a014:	e7fd      	b.n	800a012 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a016:	f000 f993 	bl	800a340 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a01a:	2100      	movs	r1, #0
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 ff11 	bl	800ae44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a022:	f000 f99b 	bl	800a35c <xTaskResumeAll>
 800a026:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d107      	bne.n	800a03e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a02e:	4b07      	ldr	r3, [pc, #28]	@ (800a04c <vTaskDelay+0x68>)
 800a030:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a034:	601a      	str	r2, [r3, #0]
 800a036:	f3bf 8f4f 	dsb	sy
 800a03a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a03e:	bf00      	nop
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	20001268 	.word	0x20001268
 800a04c:	e000ed04 	.word	0xe000ed04

0800a050 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a058:	f001 fbd6 	bl	800b808 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d102      	bne.n	800a068 <vTaskSuspend+0x18>
 800a062:	4b30      	ldr	r3, [pc, #192]	@ (800a124 <vTaskSuspend+0xd4>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	e000      	b.n	800a06a <vTaskSuspend+0x1a>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	3304      	adds	r3, #4
 800a070:	4618      	mov	r0, r3
 800a072:	f7fe fd7f 	bl	8008b74 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d004      	beq.n	800a088 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	3318      	adds	r3, #24
 800a082:	4618      	mov	r0, r3
 800a084:	f7fe fd76 	bl	8008b74 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	3304      	adds	r3, #4
 800a08c:	4619      	mov	r1, r3
 800a08e:	4826      	ldr	r0, [pc, #152]	@ (800a128 <vTaskSuspend+0xd8>)
 800a090:	f7fe fd13 	bl	8008aba <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d103      	bne.n	800a0a8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a0a8:	f001 fbe0 	bl	800b86c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a0ac:	4b1f      	ldr	r3, [pc, #124]	@ (800a12c <vTaskSuspend+0xdc>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d005      	beq.n	800a0c0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a0b4:	f001 fba8 	bl	800b808 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a0b8:	f000 fd16 	bl	800aae8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a0bc:	f001 fbd6 	bl	800b86c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a0c0:	4b18      	ldr	r3, [pc, #96]	@ (800a124 <vTaskSuspend+0xd4>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d128      	bne.n	800a11c <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800a0ca:	4b18      	ldr	r3, [pc, #96]	@ (800a12c <vTaskSuspend+0xdc>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d018      	beq.n	800a104 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a0d2:	4b17      	ldr	r3, [pc, #92]	@ (800a130 <vTaskSuspend+0xe0>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00b      	beq.n	800a0f2 <vTaskSuspend+0xa2>
	__asm volatile
 800a0da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	60bb      	str	r3, [r7, #8]
}
 800a0ec:	bf00      	nop
 800a0ee:	bf00      	nop
 800a0f0:	e7fd      	b.n	800a0ee <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800a0f2:	4b10      	ldr	r3, [pc, #64]	@ (800a134 <vTaskSuspend+0xe4>)
 800a0f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0f8:	601a      	str	r2, [r3, #0]
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a102:	e00b      	b.n	800a11c <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a104:	4b08      	ldr	r3, [pc, #32]	@ (800a128 <vTaskSuspend+0xd8>)
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	4b0b      	ldr	r3, [pc, #44]	@ (800a138 <vTaskSuspend+0xe8>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d103      	bne.n	800a118 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800a110:	4b04      	ldr	r3, [pc, #16]	@ (800a124 <vTaskSuspend+0xd4>)
 800a112:	2200      	movs	r2, #0
 800a114:	601a      	str	r2, [r3, #0]
	}
 800a116:	e001      	b.n	800a11c <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800a118:	f000 fa88 	bl	800a62c <vTaskSwitchContext>
	}
 800a11c:	bf00      	nop
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	20000d6c 	.word	0x20000d6c
 800a128:	2000122c 	.word	0x2000122c
 800a12c:	2000124c 	.word	0x2000124c
 800a130:	20001268 	.word	0x20001268
 800a134:	e000ed04 	.word	0xe000ed04
 800a138:	20001240 	.word	0x20001240

0800a13c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a13c:	b480      	push	{r7}
 800a13e:	b087      	sub	sp, #28
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a144:	2300      	movs	r3, #0
 800a146:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d10b      	bne.n	800a16a <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800a152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a156:	f383 8811 	msr	BASEPRI, r3
 800a15a:	f3bf 8f6f 	isb	sy
 800a15e:	f3bf 8f4f 	dsb	sy
 800a162:	60fb      	str	r3, [r7, #12]
}
 800a164:	bf00      	nop
 800a166:	bf00      	nop
 800a168:	e7fd      	b.n	800a166 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	695b      	ldr	r3, [r3, #20]
 800a16e:	4a0a      	ldr	r2, [pc, #40]	@ (800a198 <prvTaskIsTaskSuspended+0x5c>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d10a      	bne.n	800a18a <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a178:	4a08      	ldr	r2, [pc, #32]	@ (800a19c <prvTaskIsTaskSuspended+0x60>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d005      	beq.n	800a18a <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a182:	2b00      	cmp	r3, #0
 800a184:	d101      	bne.n	800a18a <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800a186:	2301      	movs	r3, #1
 800a188:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a18a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a18c:	4618      	mov	r0, r3
 800a18e:	371c      	adds	r7, #28
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	2000122c 	.word	0x2000122c
 800a19c:	20001200 	.word	0x20001200

0800a1a0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d10b      	bne.n	800a1ca <vTaskResume+0x2a>
	__asm volatile
 800a1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b6:	f383 8811 	msr	BASEPRI, r3
 800a1ba:	f3bf 8f6f 	isb	sy
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	60bb      	str	r3, [r7, #8]
}
 800a1c4:	bf00      	nop
 800a1c6:	bf00      	nop
 800a1c8:	e7fd      	b.n	800a1c6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800a1ca:	4b21      	ldr	r3, [pc, #132]	@ (800a250 <vTaskResume+0xb0>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d038      	beq.n	800a246 <vTaskResume+0xa6>
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d035      	beq.n	800a246 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800a1da:	f001 fb15 	bl	800b808 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f7ff ffac 	bl	800a13c <prvTaskIsTaskSuspended>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d02b      	beq.n	800a242 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	3304      	adds	r3, #4
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fe fcc0 	bl	8008b74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1f8:	4b16      	ldr	r3, [pc, #88]	@ (800a254 <vTaskResume+0xb4>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d903      	bls.n	800a208 <vTaskResume+0x68>
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a204:	4a13      	ldr	r2, [pc, #76]	@ (800a254 <vTaskResume+0xb4>)
 800a206:	6013      	str	r3, [r2, #0]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a20c:	4613      	mov	r3, r2
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	4413      	add	r3, r2
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	4a10      	ldr	r2, [pc, #64]	@ (800a258 <vTaskResume+0xb8>)
 800a216:	441a      	add	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	3304      	adds	r3, #4
 800a21c:	4619      	mov	r1, r3
 800a21e:	4610      	mov	r0, r2
 800a220:	f7fe fc4b 	bl	8008aba <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a228:	4b09      	ldr	r3, [pc, #36]	@ (800a250 <vTaskResume+0xb0>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a22e:	429a      	cmp	r2, r3
 800a230:	d307      	bcc.n	800a242 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a232:	4b0a      	ldr	r3, [pc, #40]	@ (800a25c <vTaskResume+0xbc>)
 800a234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a238:	601a      	str	r2, [r3, #0]
 800a23a:	f3bf 8f4f 	dsb	sy
 800a23e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a242:	f001 fb13 	bl	800b86c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a246:	bf00      	nop
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	20000d6c 	.word	0x20000d6c
 800a254:	20001248 	.word	0x20001248
 800a258:	20000d70 	.word	0x20000d70
 800a25c:	e000ed04 	.word	0xe000ed04

0800a260 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b08a      	sub	sp, #40	@ 0x28
 800a264:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a266:	2300      	movs	r3, #0
 800a268:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a26a:	2300      	movs	r3, #0
 800a26c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a26e:	463a      	mov	r2, r7
 800a270:	1d39      	adds	r1, r7, #4
 800a272:	f107 0308 	add.w	r3, r7, #8
 800a276:	4618      	mov	r0, r3
 800a278:	f7fe fbbe 	bl	80089f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a27c:	6839      	ldr	r1, [r7, #0]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	9202      	str	r2, [sp, #8]
 800a284:	9301      	str	r3, [sp, #4]
 800a286:	2300      	movs	r3, #0
 800a288:	9300      	str	r3, [sp, #0]
 800a28a:	2300      	movs	r3, #0
 800a28c:	460a      	mov	r2, r1
 800a28e:	4924      	ldr	r1, [pc, #144]	@ (800a320 <vTaskStartScheduler+0xc0>)
 800a290:	4824      	ldr	r0, [pc, #144]	@ (800a324 <vTaskStartScheduler+0xc4>)
 800a292:	f7ff fce9 	bl	8009c68 <xTaskCreateStatic>
 800a296:	4603      	mov	r3, r0
 800a298:	4a23      	ldr	r2, [pc, #140]	@ (800a328 <vTaskStartScheduler+0xc8>)
 800a29a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a29c:	4b22      	ldr	r3, [pc, #136]	@ (800a328 <vTaskStartScheduler+0xc8>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d002      	beq.n	800a2aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	617b      	str	r3, [r7, #20]
 800a2a8:	e001      	b.n	800a2ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d102      	bne.n	800a2ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a2b4:	f000 fe1a 	bl	800aeec <xTimerCreateTimerTask>
 800a2b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d11b      	bne.n	800a2f8 <vTaskStartScheduler+0x98>
	__asm volatile
 800a2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c4:	f383 8811 	msr	BASEPRI, r3
 800a2c8:	f3bf 8f6f 	isb	sy
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	613b      	str	r3, [r7, #16]
}
 800a2d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a2d4:	4b15      	ldr	r3, [pc, #84]	@ (800a32c <vTaskStartScheduler+0xcc>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	3354      	adds	r3, #84	@ 0x54
 800a2da:	4a15      	ldr	r2, [pc, #84]	@ (800a330 <vTaskStartScheduler+0xd0>)
 800a2dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a2de:	4b15      	ldr	r3, [pc, #84]	@ (800a334 <vTaskStartScheduler+0xd4>)
 800a2e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a2e6:	4b14      	ldr	r3, [pc, #80]	@ (800a338 <vTaskStartScheduler+0xd8>)
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a2ec:	4b13      	ldr	r3, [pc, #76]	@ (800a33c <vTaskStartScheduler+0xdc>)
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a2f2:	f001 f9e5 	bl	800b6c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a2f6:	e00f      	b.n	800a318 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2fe:	d10b      	bne.n	800a318 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a304:	f383 8811 	msr	BASEPRI, r3
 800a308:	f3bf 8f6f 	isb	sy
 800a30c:	f3bf 8f4f 	dsb	sy
 800a310:	60fb      	str	r3, [r7, #12]
}
 800a312:	bf00      	nop
 800a314:	bf00      	nop
 800a316:	e7fd      	b.n	800a314 <vTaskStartScheduler+0xb4>
}
 800a318:	bf00      	nop
 800a31a:	3718      	adds	r7, #24
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	0800c094 	.word	0x0800c094
 800a324:	0800a971 	.word	0x0800a971
 800a328:	20001264 	.word	0x20001264
 800a32c:	20000d6c 	.word	0x20000d6c
 800a330:	20000024 	.word	0x20000024
 800a334:	20001260 	.word	0x20001260
 800a338:	2000124c 	.word	0x2000124c
 800a33c:	20001244 	.word	0x20001244

0800a340 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a340:	b480      	push	{r7}
 800a342:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a344:	4b04      	ldr	r3, [pc, #16]	@ (800a358 <vTaskSuspendAll+0x18>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	3301      	adds	r3, #1
 800a34a:	4a03      	ldr	r2, [pc, #12]	@ (800a358 <vTaskSuspendAll+0x18>)
 800a34c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a34e:	bf00      	nop
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr
 800a358:	20001268 	.word	0x20001268

0800a35c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a362:	2300      	movs	r3, #0
 800a364:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a366:	2300      	movs	r3, #0
 800a368:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a36a:	4b42      	ldr	r3, [pc, #264]	@ (800a474 <xTaskResumeAll+0x118>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10b      	bne.n	800a38a <xTaskResumeAll+0x2e>
	__asm volatile
 800a372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	603b      	str	r3, [r7, #0]
}
 800a384:	bf00      	nop
 800a386:	bf00      	nop
 800a388:	e7fd      	b.n	800a386 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a38a:	f001 fa3d 	bl	800b808 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a38e:	4b39      	ldr	r3, [pc, #228]	@ (800a474 <xTaskResumeAll+0x118>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	3b01      	subs	r3, #1
 800a394:	4a37      	ldr	r2, [pc, #220]	@ (800a474 <xTaskResumeAll+0x118>)
 800a396:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a398:	4b36      	ldr	r3, [pc, #216]	@ (800a474 <xTaskResumeAll+0x118>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d162      	bne.n	800a466 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a3a0:	4b35      	ldr	r3, [pc, #212]	@ (800a478 <xTaskResumeAll+0x11c>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d05e      	beq.n	800a466 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3a8:	e02f      	b.n	800a40a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3aa:	4b34      	ldr	r3, [pc, #208]	@ (800a47c <xTaskResumeAll+0x120>)
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	3318      	adds	r3, #24
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fe fbdc 	bl	8008b74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	3304      	adds	r3, #4
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7fe fbd7 	bl	8008b74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3ca:	4b2d      	ldr	r3, [pc, #180]	@ (800a480 <xTaskResumeAll+0x124>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d903      	bls.n	800a3da <xTaskResumeAll+0x7e>
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3d6:	4a2a      	ldr	r2, [pc, #168]	@ (800a480 <xTaskResumeAll+0x124>)
 800a3d8:	6013      	str	r3, [r2, #0]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3de:	4613      	mov	r3, r2
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	4413      	add	r3, r2
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	4a27      	ldr	r2, [pc, #156]	@ (800a484 <xTaskResumeAll+0x128>)
 800a3e8:	441a      	add	r2, r3
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	4610      	mov	r0, r2
 800a3f2:	f7fe fb62 	bl	8008aba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3fa:	4b23      	ldr	r3, [pc, #140]	@ (800a488 <xTaskResumeAll+0x12c>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a400:	429a      	cmp	r2, r3
 800a402:	d302      	bcc.n	800a40a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a404:	4b21      	ldr	r3, [pc, #132]	@ (800a48c <xTaskResumeAll+0x130>)
 800a406:	2201      	movs	r2, #1
 800a408:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a40a:	4b1c      	ldr	r3, [pc, #112]	@ (800a47c <xTaskResumeAll+0x120>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1cb      	bne.n	800a3aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d001      	beq.n	800a41c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a418:	f000 fb66 	bl	800aae8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a41c:	4b1c      	ldr	r3, [pc, #112]	@ (800a490 <xTaskResumeAll+0x134>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d010      	beq.n	800a44a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a428:	f000 f846 	bl	800a4b8 <xTaskIncrementTick>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d002      	beq.n	800a438 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a432:	4b16      	ldr	r3, [pc, #88]	@ (800a48c <xTaskResumeAll+0x130>)
 800a434:	2201      	movs	r2, #1
 800a436:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	3b01      	subs	r3, #1
 800a43c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1f1      	bne.n	800a428 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a444:	4b12      	ldr	r3, [pc, #72]	@ (800a490 <xTaskResumeAll+0x134>)
 800a446:	2200      	movs	r2, #0
 800a448:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a44a:	4b10      	ldr	r3, [pc, #64]	@ (800a48c <xTaskResumeAll+0x130>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d009      	beq.n	800a466 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a452:	2301      	movs	r3, #1
 800a454:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a456:	4b0f      	ldr	r3, [pc, #60]	@ (800a494 <xTaskResumeAll+0x138>)
 800a458:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a45c:	601a      	str	r2, [r3, #0]
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a466:	f001 fa01 	bl	800b86c <vPortExitCritical>

	return xAlreadyYielded;
 800a46a:	68bb      	ldr	r3, [r7, #8]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	20001268 	.word	0x20001268
 800a478:	20001240 	.word	0x20001240
 800a47c:	20001200 	.word	0x20001200
 800a480:	20001248 	.word	0x20001248
 800a484:	20000d70 	.word	0x20000d70
 800a488:	20000d6c 	.word	0x20000d6c
 800a48c:	20001254 	.word	0x20001254
 800a490:	20001250 	.word	0x20001250
 800a494:	e000ed04 	.word	0xe000ed04

0800a498 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a49e:	4b05      	ldr	r3, [pc, #20]	@ (800a4b4 <xTaskGetTickCount+0x1c>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a4a4:	687b      	ldr	r3, [r7, #4]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	370c      	adds	r7, #12
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop
 800a4b4:	20001244 	.word	0x20001244

0800a4b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4c2:	4b4f      	ldr	r3, [pc, #316]	@ (800a600 <xTaskIncrementTick+0x148>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f040 8090 	bne.w	800a5ec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a4cc:	4b4d      	ldr	r3, [pc, #308]	@ (800a604 <xTaskIncrementTick+0x14c>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a4d4:	4a4b      	ldr	r2, [pc, #300]	@ (800a604 <xTaskIncrementTick+0x14c>)
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d121      	bne.n	800a524 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a4e0:	4b49      	ldr	r3, [pc, #292]	@ (800a608 <xTaskIncrementTick+0x150>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00b      	beq.n	800a502 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a4ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ee:	f383 8811 	msr	BASEPRI, r3
 800a4f2:	f3bf 8f6f 	isb	sy
 800a4f6:	f3bf 8f4f 	dsb	sy
 800a4fa:	603b      	str	r3, [r7, #0]
}
 800a4fc:	bf00      	nop
 800a4fe:	bf00      	nop
 800a500:	e7fd      	b.n	800a4fe <xTaskIncrementTick+0x46>
 800a502:	4b41      	ldr	r3, [pc, #260]	@ (800a608 <xTaskIncrementTick+0x150>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	60fb      	str	r3, [r7, #12]
 800a508:	4b40      	ldr	r3, [pc, #256]	@ (800a60c <xTaskIncrementTick+0x154>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a3e      	ldr	r2, [pc, #248]	@ (800a608 <xTaskIncrementTick+0x150>)
 800a50e:	6013      	str	r3, [r2, #0]
 800a510:	4a3e      	ldr	r2, [pc, #248]	@ (800a60c <xTaskIncrementTick+0x154>)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6013      	str	r3, [r2, #0]
 800a516:	4b3e      	ldr	r3, [pc, #248]	@ (800a610 <xTaskIncrementTick+0x158>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	3301      	adds	r3, #1
 800a51c:	4a3c      	ldr	r2, [pc, #240]	@ (800a610 <xTaskIncrementTick+0x158>)
 800a51e:	6013      	str	r3, [r2, #0]
 800a520:	f000 fae2 	bl	800aae8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a524:	4b3b      	ldr	r3, [pc, #236]	@ (800a614 <xTaskIncrementTick+0x15c>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	693a      	ldr	r2, [r7, #16]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d349      	bcc.n	800a5c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a52e:	4b36      	ldr	r3, [pc, #216]	@ (800a608 <xTaskIncrementTick+0x150>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d104      	bne.n	800a542 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a538:	4b36      	ldr	r3, [pc, #216]	@ (800a614 <xTaskIncrementTick+0x15c>)
 800a53a:	f04f 32ff 	mov.w	r2, #4294967295
 800a53e:	601a      	str	r2, [r3, #0]
					break;
 800a540:	e03f      	b.n	800a5c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a542:	4b31      	ldr	r3, [pc, #196]	@ (800a608 <xTaskIncrementTick+0x150>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a552:	693a      	ldr	r2, [r7, #16]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	429a      	cmp	r2, r3
 800a558:	d203      	bcs.n	800a562 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a55a:	4a2e      	ldr	r2, [pc, #184]	@ (800a614 <xTaskIncrementTick+0x15c>)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a560:	e02f      	b.n	800a5c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	3304      	adds	r3, #4
 800a566:	4618      	mov	r0, r3
 800a568:	f7fe fb04 	bl	8008b74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a570:	2b00      	cmp	r3, #0
 800a572:	d004      	beq.n	800a57e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	3318      	adds	r3, #24
 800a578:	4618      	mov	r0, r3
 800a57a:	f7fe fafb 	bl	8008b74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a582:	4b25      	ldr	r3, [pc, #148]	@ (800a618 <xTaskIncrementTick+0x160>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	429a      	cmp	r2, r3
 800a588:	d903      	bls.n	800a592 <xTaskIncrementTick+0xda>
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a58e:	4a22      	ldr	r2, [pc, #136]	@ (800a618 <xTaskIncrementTick+0x160>)
 800a590:	6013      	str	r3, [r2, #0]
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a596:	4613      	mov	r3, r2
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	4413      	add	r3, r2
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	4a1f      	ldr	r2, [pc, #124]	@ (800a61c <xTaskIncrementTick+0x164>)
 800a5a0:	441a      	add	r2, r3
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	3304      	adds	r3, #4
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	4610      	mov	r0, r2
 800a5aa:	f7fe fa86 	bl	8008aba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5b2:	4b1b      	ldr	r3, [pc, #108]	@ (800a620 <xTaskIncrementTick+0x168>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d3b8      	bcc.n	800a52e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5c0:	e7b5      	b.n	800a52e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a5c2:	4b17      	ldr	r3, [pc, #92]	@ (800a620 <xTaskIncrementTick+0x168>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5c8:	4914      	ldr	r1, [pc, #80]	@ (800a61c <xTaskIncrementTick+0x164>)
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	4413      	add	r3, r2
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	440b      	add	r3, r1
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d901      	bls.n	800a5de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a5de:	4b11      	ldr	r3, [pc, #68]	@ (800a624 <xTaskIncrementTick+0x16c>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d007      	beq.n	800a5f6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	617b      	str	r3, [r7, #20]
 800a5ea:	e004      	b.n	800a5f6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a5ec:	4b0e      	ldr	r3, [pc, #56]	@ (800a628 <xTaskIncrementTick+0x170>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	4a0d      	ldr	r2, [pc, #52]	@ (800a628 <xTaskIncrementTick+0x170>)
 800a5f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a5f6:	697b      	ldr	r3, [r7, #20]
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3718      	adds	r7, #24
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	20001268 	.word	0x20001268
 800a604:	20001244 	.word	0x20001244
 800a608:	200011f8 	.word	0x200011f8
 800a60c:	200011fc 	.word	0x200011fc
 800a610:	20001258 	.word	0x20001258
 800a614:	20001260 	.word	0x20001260
 800a618:	20001248 	.word	0x20001248
 800a61c:	20000d70 	.word	0x20000d70
 800a620:	20000d6c 	.word	0x20000d6c
 800a624:	20001254 	.word	0x20001254
 800a628:	20001250 	.word	0x20001250

0800a62c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a62c:	b480      	push	{r7}
 800a62e:	b085      	sub	sp, #20
 800a630:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a632:	4b2b      	ldr	r3, [pc, #172]	@ (800a6e0 <vTaskSwitchContext+0xb4>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d003      	beq.n	800a642 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a63a:	4b2a      	ldr	r3, [pc, #168]	@ (800a6e4 <vTaskSwitchContext+0xb8>)
 800a63c:	2201      	movs	r2, #1
 800a63e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a640:	e047      	b.n	800a6d2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a642:	4b28      	ldr	r3, [pc, #160]	@ (800a6e4 <vTaskSwitchContext+0xb8>)
 800a644:	2200      	movs	r2, #0
 800a646:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a648:	4b27      	ldr	r3, [pc, #156]	@ (800a6e8 <vTaskSwitchContext+0xbc>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	60fb      	str	r3, [r7, #12]
 800a64e:	e011      	b.n	800a674 <vTaskSwitchContext+0x48>
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d10b      	bne.n	800a66e <vTaskSwitchContext+0x42>
	__asm volatile
 800a656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a65a:	f383 8811 	msr	BASEPRI, r3
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f3bf 8f4f 	dsb	sy
 800a666:	607b      	str	r3, [r7, #4]
}
 800a668:	bf00      	nop
 800a66a:	bf00      	nop
 800a66c:	e7fd      	b.n	800a66a <vTaskSwitchContext+0x3e>
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	3b01      	subs	r3, #1
 800a672:	60fb      	str	r3, [r7, #12]
 800a674:	491d      	ldr	r1, [pc, #116]	@ (800a6ec <vTaskSwitchContext+0xc0>)
 800a676:	68fa      	ldr	r2, [r7, #12]
 800a678:	4613      	mov	r3, r2
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	4413      	add	r3, r2
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	440b      	add	r3, r1
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d0e3      	beq.n	800a650 <vTaskSwitchContext+0x24>
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	4613      	mov	r3, r2
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	4413      	add	r3, r2
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	4a16      	ldr	r2, [pc, #88]	@ (800a6ec <vTaskSwitchContext+0xc0>)
 800a694:	4413      	add	r3, r2
 800a696:	60bb      	str	r3, [r7, #8]
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	685a      	ldr	r2, [r3, #4]
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	605a      	str	r2, [r3, #4]
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	685a      	ldr	r2, [r3, #4]
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	3308      	adds	r3, #8
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d104      	bne.n	800a6b8 <vTaskSwitchContext+0x8c>
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	685a      	ldr	r2, [r3, #4]
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	605a      	str	r2, [r3, #4]
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	4a0c      	ldr	r2, [pc, #48]	@ (800a6f0 <vTaskSwitchContext+0xc4>)
 800a6c0:	6013      	str	r3, [r2, #0]
 800a6c2:	4a09      	ldr	r2, [pc, #36]	@ (800a6e8 <vTaskSwitchContext+0xbc>)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a6c8:	4b09      	ldr	r3, [pc, #36]	@ (800a6f0 <vTaskSwitchContext+0xc4>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	3354      	adds	r3, #84	@ 0x54
 800a6ce:	4a09      	ldr	r2, [pc, #36]	@ (800a6f4 <vTaskSwitchContext+0xc8>)
 800a6d0:	6013      	str	r3, [r2, #0]
}
 800a6d2:	bf00      	nop
 800a6d4:	3714      	adds	r7, #20
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	20001268 	.word	0x20001268
 800a6e4:	20001254 	.word	0x20001254
 800a6e8:	20001248 	.word	0x20001248
 800a6ec:	20000d70 	.word	0x20000d70
 800a6f0:	20000d6c 	.word	0x20000d6c
 800a6f4:	20000024 	.word	0x20000024

0800a6f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10b      	bne.n	800a720 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70c:	f383 8811 	msr	BASEPRI, r3
 800a710:	f3bf 8f6f 	isb	sy
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	60fb      	str	r3, [r7, #12]
}
 800a71a:	bf00      	nop
 800a71c:	bf00      	nop
 800a71e:	e7fd      	b.n	800a71c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a720:	4b07      	ldr	r3, [pc, #28]	@ (800a740 <vTaskPlaceOnEventList+0x48>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	3318      	adds	r3, #24
 800a726:	4619      	mov	r1, r3
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f7fe f9ea 	bl	8008b02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a72e:	2101      	movs	r1, #1
 800a730:	6838      	ldr	r0, [r7, #0]
 800a732:	f000 fb87 	bl	800ae44 <prvAddCurrentTaskToDelayedList>
}
 800a736:	bf00      	nop
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	20000d6c 	.word	0x20000d6c

0800a744 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a744:	b580      	push	{r7, lr}
 800a746:	b086      	sub	sp, #24
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d10b      	bne.n	800a76e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75a:	f383 8811 	msr	BASEPRI, r3
 800a75e:	f3bf 8f6f 	isb	sy
 800a762:	f3bf 8f4f 	dsb	sy
 800a766:	617b      	str	r3, [r7, #20]
}
 800a768:	bf00      	nop
 800a76a:	bf00      	nop
 800a76c:	e7fd      	b.n	800a76a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a76e:	4b0a      	ldr	r3, [pc, #40]	@ (800a798 <vTaskPlaceOnEventListRestricted+0x54>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	3318      	adds	r3, #24
 800a774:	4619      	mov	r1, r3
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f7fe f99f 	bl	8008aba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d002      	beq.n	800a788 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a782:	f04f 33ff 	mov.w	r3, #4294967295
 800a786:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a788:	6879      	ldr	r1, [r7, #4]
 800a78a:	68b8      	ldr	r0, [r7, #8]
 800a78c:	f000 fb5a 	bl	800ae44 <prvAddCurrentTaskToDelayedList>
	}
 800a790:	bf00      	nop
 800a792:	3718      	adds	r7, #24
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	20000d6c 	.word	0x20000d6c

0800a79c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b086      	sub	sp, #24
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d10b      	bne.n	800a7ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	60fb      	str	r3, [r7, #12]
}
 800a7c4:	bf00      	nop
 800a7c6:	bf00      	nop
 800a7c8:	e7fd      	b.n	800a7c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	3318      	adds	r3, #24
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fe f9d0 	bl	8008b74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7d4:	4b1d      	ldr	r3, [pc, #116]	@ (800a84c <xTaskRemoveFromEventList+0xb0>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d11d      	bne.n	800a818 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	3304      	adds	r3, #4
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7fe f9c7 	bl	8008b74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7ea:	4b19      	ldr	r3, [pc, #100]	@ (800a850 <xTaskRemoveFromEventList+0xb4>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d903      	bls.n	800a7fa <xTaskRemoveFromEventList+0x5e>
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7f6:	4a16      	ldr	r2, [pc, #88]	@ (800a850 <xTaskRemoveFromEventList+0xb4>)
 800a7f8:	6013      	str	r3, [r2, #0]
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7fe:	4613      	mov	r3, r2
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	4413      	add	r3, r2
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	4a13      	ldr	r2, [pc, #76]	@ (800a854 <xTaskRemoveFromEventList+0xb8>)
 800a808:	441a      	add	r2, r3
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	3304      	adds	r3, #4
 800a80e:	4619      	mov	r1, r3
 800a810:	4610      	mov	r0, r2
 800a812:	f7fe f952 	bl	8008aba <vListInsertEnd>
 800a816:	e005      	b.n	800a824 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	3318      	adds	r3, #24
 800a81c:	4619      	mov	r1, r3
 800a81e:	480e      	ldr	r0, [pc, #56]	@ (800a858 <xTaskRemoveFromEventList+0xbc>)
 800a820:	f7fe f94b 	bl	8008aba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a828:	4b0c      	ldr	r3, [pc, #48]	@ (800a85c <xTaskRemoveFromEventList+0xc0>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a82e:	429a      	cmp	r2, r3
 800a830:	d905      	bls.n	800a83e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a832:	2301      	movs	r3, #1
 800a834:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a836:	4b0a      	ldr	r3, [pc, #40]	@ (800a860 <xTaskRemoveFromEventList+0xc4>)
 800a838:	2201      	movs	r2, #1
 800a83a:	601a      	str	r2, [r3, #0]
 800a83c:	e001      	b.n	800a842 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a83e:	2300      	movs	r3, #0
 800a840:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a842:	697b      	ldr	r3, [r7, #20]
}
 800a844:	4618      	mov	r0, r3
 800a846:	3718      	adds	r7, #24
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	20001268 	.word	0x20001268
 800a850:	20001248 	.word	0x20001248
 800a854:	20000d70 	.word	0x20000d70
 800a858:	20001200 	.word	0x20001200
 800a85c:	20000d6c 	.word	0x20000d6c
 800a860:	20001254 	.word	0x20001254

0800a864 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a86c:	4b06      	ldr	r3, [pc, #24]	@ (800a888 <vTaskInternalSetTimeOutState+0x24>)
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a874:	4b05      	ldr	r3, [pc, #20]	@ (800a88c <vTaskInternalSetTimeOutState+0x28>)
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	605a      	str	r2, [r3, #4]
}
 800a87c:	bf00      	nop
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr
 800a888:	20001258 	.word	0x20001258
 800a88c:	20001244 	.word	0x20001244

0800a890 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b088      	sub	sp, #32
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d10b      	bne.n	800a8b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8a4:	f383 8811 	msr	BASEPRI, r3
 800a8a8:	f3bf 8f6f 	isb	sy
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	613b      	str	r3, [r7, #16]
}
 800a8b2:	bf00      	nop
 800a8b4:	bf00      	nop
 800a8b6:	e7fd      	b.n	800a8b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d10b      	bne.n	800a8d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	60fb      	str	r3, [r7, #12]
}
 800a8d0:	bf00      	nop
 800a8d2:	bf00      	nop
 800a8d4:	e7fd      	b.n	800a8d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a8d6:	f000 ff97 	bl	800b808 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a8da:	4b1d      	ldr	r3, [pc, #116]	@ (800a950 <xTaskCheckForTimeOut+0xc0>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	69ba      	ldr	r2, [r7, #24]
 800a8e6:	1ad3      	subs	r3, r2, r3
 800a8e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f2:	d102      	bne.n	800a8fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	61fb      	str	r3, [r7, #28]
 800a8f8:	e023      	b.n	800a942 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	4b15      	ldr	r3, [pc, #84]	@ (800a954 <xTaskCheckForTimeOut+0xc4>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	429a      	cmp	r2, r3
 800a904:	d007      	beq.n	800a916 <xTaskCheckForTimeOut+0x86>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	69ba      	ldr	r2, [r7, #24]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d302      	bcc.n	800a916 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a910:	2301      	movs	r3, #1
 800a912:	61fb      	str	r3, [r7, #28]
 800a914:	e015      	b.n	800a942 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	697a      	ldr	r2, [r7, #20]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d20b      	bcs.n	800a938 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	1ad2      	subs	r2, r2, r3
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f7ff ff99 	bl	800a864 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a932:	2300      	movs	r3, #0
 800a934:	61fb      	str	r3, [r7, #28]
 800a936:	e004      	b.n	800a942 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	2200      	movs	r2, #0
 800a93c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a93e:	2301      	movs	r3, #1
 800a940:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a942:	f000 ff93 	bl	800b86c <vPortExitCritical>

	return xReturn;
 800a946:	69fb      	ldr	r3, [r7, #28]
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3720      	adds	r7, #32
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	20001244 	.word	0x20001244
 800a954:	20001258 	.word	0x20001258

0800a958 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a958:	b480      	push	{r7}
 800a95a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a95c:	4b03      	ldr	r3, [pc, #12]	@ (800a96c <vTaskMissedYield+0x14>)
 800a95e:	2201      	movs	r2, #1
 800a960:	601a      	str	r2, [r3, #0]
}
 800a962:	bf00      	nop
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	20001254 	.word	0x20001254

0800a970 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a978:	f000 f852 	bl	800aa20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a97c:	4b06      	ldr	r3, [pc, #24]	@ (800a998 <prvIdleTask+0x28>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b01      	cmp	r3, #1
 800a982:	d9f9      	bls.n	800a978 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a984:	4b05      	ldr	r3, [pc, #20]	@ (800a99c <prvIdleTask+0x2c>)
 800a986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a98a:	601a      	str	r2, [r3, #0]
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a994:	e7f0      	b.n	800a978 <prvIdleTask+0x8>
 800a996:	bf00      	nop
 800a998:	20000d70 	.word	0x20000d70
 800a99c:	e000ed04 	.word	0xe000ed04

0800a9a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	607b      	str	r3, [r7, #4]
 800a9aa:	e00c      	b.n	800a9c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4413      	add	r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4a12      	ldr	r2, [pc, #72]	@ (800aa00 <prvInitialiseTaskLists+0x60>)
 800a9b8:	4413      	add	r3, r2
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fe f850 	bl	8008a60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	607b      	str	r3, [r7, #4]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2b37      	cmp	r3, #55	@ 0x37
 800a9ca:	d9ef      	bls.n	800a9ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a9cc:	480d      	ldr	r0, [pc, #52]	@ (800aa04 <prvInitialiseTaskLists+0x64>)
 800a9ce:	f7fe f847 	bl	8008a60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a9d2:	480d      	ldr	r0, [pc, #52]	@ (800aa08 <prvInitialiseTaskLists+0x68>)
 800a9d4:	f7fe f844 	bl	8008a60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a9d8:	480c      	ldr	r0, [pc, #48]	@ (800aa0c <prvInitialiseTaskLists+0x6c>)
 800a9da:	f7fe f841 	bl	8008a60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a9de:	480c      	ldr	r0, [pc, #48]	@ (800aa10 <prvInitialiseTaskLists+0x70>)
 800a9e0:	f7fe f83e 	bl	8008a60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a9e4:	480b      	ldr	r0, [pc, #44]	@ (800aa14 <prvInitialiseTaskLists+0x74>)
 800a9e6:	f7fe f83b 	bl	8008a60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a9ea:	4b0b      	ldr	r3, [pc, #44]	@ (800aa18 <prvInitialiseTaskLists+0x78>)
 800a9ec:	4a05      	ldr	r2, [pc, #20]	@ (800aa04 <prvInitialiseTaskLists+0x64>)
 800a9ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a9f0:	4b0a      	ldr	r3, [pc, #40]	@ (800aa1c <prvInitialiseTaskLists+0x7c>)
 800a9f2:	4a05      	ldr	r2, [pc, #20]	@ (800aa08 <prvInitialiseTaskLists+0x68>)
 800a9f4:	601a      	str	r2, [r3, #0]
}
 800a9f6:	bf00      	nop
 800a9f8:	3708      	adds	r7, #8
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	20000d70 	.word	0x20000d70
 800aa04:	200011d0 	.word	0x200011d0
 800aa08:	200011e4 	.word	0x200011e4
 800aa0c:	20001200 	.word	0x20001200
 800aa10:	20001214 	.word	0x20001214
 800aa14:	2000122c 	.word	0x2000122c
 800aa18:	200011f8 	.word	0x200011f8
 800aa1c:	200011fc 	.word	0x200011fc

0800aa20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa26:	e019      	b.n	800aa5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aa28:	f000 feee 	bl	800b808 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa2c:	4b10      	ldr	r3, [pc, #64]	@ (800aa70 <prvCheckTasksWaitingTermination+0x50>)
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	3304      	adds	r3, #4
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7fe f89b 	bl	8008b74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa3e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa74 <prvCheckTasksWaitingTermination+0x54>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	3b01      	subs	r3, #1
 800aa44:	4a0b      	ldr	r2, [pc, #44]	@ (800aa74 <prvCheckTasksWaitingTermination+0x54>)
 800aa46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa48:	4b0b      	ldr	r3, [pc, #44]	@ (800aa78 <prvCheckTasksWaitingTermination+0x58>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	4a0a      	ldr	r2, [pc, #40]	@ (800aa78 <prvCheckTasksWaitingTermination+0x58>)
 800aa50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa52:	f000 ff0b 	bl	800b86c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 f810 	bl	800aa7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa5c:	4b06      	ldr	r3, [pc, #24]	@ (800aa78 <prvCheckTasksWaitingTermination+0x58>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d1e1      	bne.n	800aa28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa64:	bf00      	nop
 800aa66:	bf00      	nop
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	20001214 	.word	0x20001214
 800aa74:	20001240 	.word	0x20001240
 800aa78:	20001228 	.word	0x20001228

0800aa7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	3354      	adds	r3, #84	@ 0x54
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f001 f9d5 	bl	800be38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d108      	bne.n	800aaaa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f001 f8a3 	bl	800bbe8 <vPortFree>
				vPortFree( pxTCB );
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f001 f8a0 	bl	800bbe8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aaa8:	e019      	b.n	800aade <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d103      	bne.n	800aabc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f001 f897 	bl	800bbe8 <vPortFree>
	}
 800aaba:	e010      	b.n	800aade <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d00b      	beq.n	800aade <prvDeleteTCB+0x62>
	__asm volatile
 800aac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaca:	f383 8811 	msr	BASEPRI, r3
 800aace:	f3bf 8f6f 	isb	sy
 800aad2:	f3bf 8f4f 	dsb	sy
 800aad6:	60fb      	str	r3, [r7, #12]
}
 800aad8:	bf00      	nop
 800aada:	bf00      	nop
 800aadc:	e7fd      	b.n	800aada <prvDeleteTCB+0x5e>
	}
 800aade:	bf00      	nop
 800aae0:	3710      	adds	r7, #16
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
	...

0800aae8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aaee:	4b0c      	ldr	r3, [pc, #48]	@ (800ab20 <prvResetNextTaskUnblockTime+0x38>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d104      	bne.n	800ab02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aaf8:	4b0a      	ldr	r3, [pc, #40]	@ (800ab24 <prvResetNextTaskUnblockTime+0x3c>)
 800aafa:	f04f 32ff 	mov.w	r2, #4294967295
 800aafe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ab00:	e008      	b.n	800ab14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab02:	4b07      	ldr	r3, [pc, #28]	@ (800ab20 <prvResetNextTaskUnblockTime+0x38>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	4a04      	ldr	r2, [pc, #16]	@ (800ab24 <prvResetNextTaskUnblockTime+0x3c>)
 800ab12:	6013      	str	r3, [r2, #0]
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr
 800ab20:	200011f8 	.word	0x200011f8
 800ab24:	20001260 	.word	0x20001260

0800ab28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ab2e:	4b0b      	ldr	r3, [pc, #44]	@ (800ab5c <xTaskGetSchedulerState+0x34>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d102      	bne.n	800ab3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ab36:	2301      	movs	r3, #1
 800ab38:	607b      	str	r3, [r7, #4]
 800ab3a:	e008      	b.n	800ab4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab3c:	4b08      	ldr	r3, [pc, #32]	@ (800ab60 <xTaskGetSchedulerState+0x38>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d102      	bne.n	800ab4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ab44:	2302      	movs	r3, #2
 800ab46:	607b      	str	r3, [r7, #4]
 800ab48:	e001      	b.n	800ab4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ab4e:	687b      	ldr	r3, [r7, #4]
	}
 800ab50:	4618      	mov	r0, r3
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr
 800ab5c:	2000124c 	.word	0x2000124c
 800ab60:	20001268 	.word	0x20001268

0800ab64 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ab70:	2300      	movs	r3, #0
 800ab72:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d051      	beq.n	800ac1e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab7e:	4b2a      	ldr	r3, [pc, #168]	@ (800ac28 <xTaskPriorityInherit+0xc4>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d241      	bcs.n	800ac0c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	699b      	ldr	r3, [r3, #24]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	db06      	blt.n	800ab9e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab90:	4b25      	ldr	r3, [pc, #148]	@ (800ac28 <xTaskPriorityInherit+0xc4>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab96:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	6959      	ldr	r1, [r3, #20]
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aba6:	4613      	mov	r3, r2
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	4413      	add	r3, r2
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4a1f      	ldr	r2, [pc, #124]	@ (800ac2c <xTaskPriorityInherit+0xc8>)
 800abb0:	4413      	add	r3, r2
 800abb2:	4299      	cmp	r1, r3
 800abb4:	d122      	bne.n	800abfc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	3304      	adds	r3, #4
 800abba:	4618      	mov	r0, r3
 800abbc:	f7fd ffda 	bl	8008b74 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800abc0:	4b19      	ldr	r3, [pc, #100]	@ (800ac28 <xTaskPriorityInherit+0xc4>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abce:	4b18      	ldr	r3, [pc, #96]	@ (800ac30 <xTaskPriorityInherit+0xcc>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d903      	bls.n	800abde <xTaskPriorityInherit+0x7a>
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abda:	4a15      	ldr	r2, [pc, #84]	@ (800ac30 <xTaskPriorityInherit+0xcc>)
 800abdc:	6013      	str	r3, [r2, #0]
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abe2:	4613      	mov	r3, r2
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	4413      	add	r3, r2
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	4a10      	ldr	r2, [pc, #64]	@ (800ac2c <xTaskPriorityInherit+0xc8>)
 800abec:	441a      	add	r2, r3
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	3304      	adds	r3, #4
 800abf2:	4619      	mov	r1, r3
 800abf4:	4610      	mov	r0, r2
 800abf6:	f7fd ff60 	bl	8008aba <vListInsertEnd>
 800abfa:	e004      	b.n	800ac06 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800abfc:	4b0a      	ldr	r3, [pc, #40]	@ (800ac28 <xTaskPriorityInherit+0xc4>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ac06:	2301      	movs	r3, #1
 800ac08:	60fb      	str	r3, [r7, #12]
 800ac0a:	e008      	b.n	800ac1e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac10:	4b05      	ldr	r3, [pc, #20]	@ (800ac28 <xTaskPriorityInherit+0xc4>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d201      	bcs.n	800ac1e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
	}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	20000d6c 	.word	0x20000d6c
 800ac2c:	20000d70 	.word	0x20000d70
 800ac30:	20001248 	.word	0x20001248

0800ac34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b086      	sub	sp, #24
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac40:	2300      	movs	r3, #0
 800ac42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d058      	beq.n	800acfc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac4a:	4b2f      	ldr	r3, [pc, #188]	@ (800ad08 <xTaskPriorityDisinherit+0xd4>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	693a      	ldr	r2, [r7, #16]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d00b      	beq.n	800ac6c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ac54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac58:	f383 8811 	msr	BASEPRI, r3
 800ac5c:	f3bf 8f6f 	isb	sy
 800ac60:	f3bf 8f4f 	dsb	sy
 800ac64:	60fb      	str	r3, [r7, #12]
}
 800ac66:	bf00      	nop
 800ac68:	bf00      	nop
 800ac6a:	e7fd      	b.n	800ac68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d10b      	bne.n	800ac8c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ac74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac78:	f383 8811 	msr	BASEPRI, r3
 800ac7c:	f3bf 8f6f 	isb	sy
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	60bb      	str	r3, [r7, #8]
}
 800ac86:	bf00      	nop
 800ac88:	bf00      	nop
 800ac8a:	e7fd      	b.n	800ac88 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac90:	1e5a      	subs	r2, r3, #1
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d02c      	beq.n	800acfc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d128      	bne.n	800acfc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	3304      	adds	r3, #4
 800acae:	4618      	mov	r0, r3
 800acb0:	f7fd ff60 	bl	8008b74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acc0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800accc:	4b0f      	ldr	r3, [pc, #60]	@ (800ad0c <xTaskPriorityDisinherit+0xd8>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d903      	bls.n	800acdc <xTaskPriorityDisinherit+0xa8>
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acd8:	4a0c      	ldr	r2, [pc, #48]	@ (800ad0c <xTaskPriorityDisinherit+0xd8>)
 800acda:	6013      	str	r3, [r2, #0]
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ace0:	4613      	mov	r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4413      	add	r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	4a09      	ldr	r2, [pc, #36]	@ (800ad10 <xTaskPriorityDisinherit+0xdc>)
 800acea:	441a      	add	r2, r3
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	3304      	adds	r3, #4
 800acf0:	4619      	mov	r1, r3
 800acf2:	4610      	mov	r0, r2
 800acf4:	f7fd fee1 	bl	8008aba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800acf8:	2301      	movs	r3, #1
 800acfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800acfc:	697b      	ldr	r3, [r7, #20]
	}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3718      	adds	r7, #24
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	20000d6c 	.word	0x20000d6c
 800ad0c:	20001248 	.word	0x20001248
 800ad10:	20000d70 	.word	0x20000d70

0800ad14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b088      	sub	sp, #32
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ad22:	2301      	movs	r3, #1
 800ad24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d06c      	beq.n	800ae06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d10b      	bne.n	800ad4c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ad34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad38:	f383 8811 	msr	BASEPRI, r3
 800ad3c:	f3bf 8f6f 	isb	sy
 800ad40:	f3bf 8f4f 	dsb	sy
 800ad44:	60fb      	str	r3, [r7, #12]
}
 800ad46:	bf00      	nop
 800ad48:	bf00      	nop
 800ad4a:	e7fd      	b.n	800ad48 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad50:	683a      	ldr	r2, [r7, #0]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d902      	bls.n	800ad5c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	61fb      	str	r3, [r7, #28]
 800ad5a:	e002      	b.n	800ad62 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ad5c:	69bb      	ldr	r3, [r7, #24]
 800ad5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad60:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad66:	69fa      	ldr	r2, [r7, #28]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d04c      	beq.n	800ae06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad70:	697a      	ldr	r2, [r7, #20]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d147      	bne.n	800ae06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ad76:	4b26      	ldr	r3, [pc, #152]	@ (800ae10 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	69ba      	ldr	r2, [r7, #24]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d10b      	bne.n	800ad98 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ad80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad84:	f383 8811 	msr	BASEPRI, r3
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	f3bf 8f4f 	dsb	sy
 800ad90:	60bb      	str	r3, [r7, #8]
}
 800ad92:	bf00      	nop
 800ad94:	bf00      	nop
 800ad96:	e7fd      	b.n	800ad94 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad9c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	69fa      	ldr	r2, [r7, #28]
 800ada2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ada4:	69bb      	ldr	r3, [r7, #24]
 800ada6:	699b      	ldr	r3, [r3, #24]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	db04      	blt.n	800adb6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800adb2:	69bb      	ldr	r3, [r7, #24]
 800adb4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	6959      	ldr	r1, [r3, #20]
 800adba:	693a      	ldr	r2, [r7, #16]
 800adbc:	4613      	mov	r3, r2
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	4413      	add	r3, r2
 800adc2:	009b      	lsls	r3, r3, #2
 800adc4:	4a13      	ldr	r2, [pc, #76]	@ (800ae14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800adc6:	4413      	add	r3, r2
 800adc8:	4299      	cmp	r1, r3
 800adca:	d11c      	bne.n	800ae06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adcc:	69bb      	ldr	r3, [r7, #24]
 800adce:	3304      	adds	r3, #4
 800add0:	4618      	mov	r0, r3
 800add2:	f7fd fecf 	bl	8008b74 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adda:	4b0f      	ldr	r3, [pc, #60]	@ (800ae18 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d903      	bls.n	800adea <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ade2:	69bb      	ldr	r3, [r7, #24]
 800ade4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ade6:	4a0c      	ldr	r2, [pc, #48]	@ (800ae18 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ade8:	6013      	str	r3, [r2, #0]
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adee:	4613      	mov	r3, r2
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	4413      	add	r3, r2
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	4a07      	ldr	r2, [pc, #28]	@ (800ae14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800adf8:	441a      	add	r2, r3
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	3304      	adds	r3, #4
 800adfe:	4619      	mov	r1, r3
 800ae00:	4610      	mov	r0, r2
 800ae02:	f7fd fe5a 	bl	8008aba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae06:	bf00      	nop
 800ae08:	3720      	adds	r7, #32
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	20000d6c 	.word	0x20000d6c
 800ae14:	20000d70 	.word	0x20000d70
 800ae18:	20001248 	.word	0x20001248

0800ae1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ae1c:	b480      	push	{r7}
 800ae1e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ae20:	4b07      	ldr	r3, [pc, #28]	@ (800ae40 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d004      	beq.n	800ae32 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ae28:	4b05      	ldr	r3, [pc, #20]	@ (800ae40 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ae2e:	3201      	adds	r2, #1
 800ae30:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ae32:	4b03      	ldr	r3, [pc, #12]	@ (800ae40 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae34:	681b      	ldr	r3, [r3, #0]
	}
 800ae36:	4618      	mov	r0, r3
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr
 800ae40:	20000d6c 	.word	0x20000d6c

0800ae44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ae4e:	4b21      	ldr	r3, [pc, #132]	@ (800aed4 <prvAddCurrentTaskToDelayedList+0x90>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae54:	4b20      	ldr	r3, [pc, #128]	@ (800aed8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	3304      	adds	r3, #4
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fd fe8a 	bl	8008b74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae66:	d10a      	bne.n	800ae7e <prvAddCurrentTaskToDelayedList+0x3a>
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d007      	beq.n	800ae7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae6e:	4b1a      	ldr	r3, [pc, #104]	@ (800aed8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	3304      	adds	r3, #4
 800ae74:	4619      	mov	r1, r3
 800ae76:	4819      	ldr	r0, [pc, #100]	@ (800aedc <prvAddCurrentTaskToDelayedList+0x98>)
 800ae78:	f7fd fe1f 	bl	8008aba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ae7c:	e026      	b.n	800aecc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ae7e:	68fa      	ldr	r2, [r7, #12]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4413      	add	r3, r2
 800ae84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ae86:	4b14      	ldr	r3, [pc, #80]	@ (800aed8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	68ba      	ldr	r2, [r7, #8]
 800ae8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ae8e:	68ba      	ldr	r2, [r7, #8]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d209      	bcs.n	800aeaa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae96:	4b12      	ldr	r3, [pc, #72]	@ (800aee0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	4b0f      	ldr	r3, [pc, #60]	@ (800aed8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	3304      	adds	r3, #4
 800aea0:	4619      	mov	r1, r3
 800aea2:	4610      	mov	r0, r2
 800aea4:	f7fd fe2d 	bl	8008b02 <vListInsert>
}
 800aea8:	e010      	b.n	800aecc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aeaa:	4b0e      	ldr	r3, [pc, #56]	@ (800aee4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	4b0a      	ldr	r3, [pc, #40]	@ (800aed8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	3304      	adds	r3, #4
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	4610      	mov	r0, r2
 800aeb8:	f7fd fe23 	bl	8008b02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aebc:	4b0a      	ldr	r3, [pc, #40]	@ (800aee8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	68ba      	ldr	r2, [r7, #8]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d202      	bcs.n	800aecc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aec6:	4a08      	ldr	r2, [pc, #32]	@ (800aee8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	6013      	str	r3, [r2, #0]
}
 800aecc:	bf00      	nop
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	20001244 	.word	0x20001244
 800aed8:	20000d6c 	.word	0x20000d6c
 800aedc:	2000122c 	.word	0x2000122c
 800aee0:	200011fc 	.word	0x200011fc
 800aee4:	200011f8 	.word	0x200011f8
 800aee8:	20001260 	.word	0x20001260

0800aeec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b08a      	sub	sp, #40	@ 0x28
 800aef0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aef2:	2300      	movs	r3, #0
 800aef4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aef6:	f000 fb13 	bl	800b520 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aefa:	4b1d      	ldr	r3, [pc, #116]	@ (800af70 <xTimerCreateTimerTask+0x84>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d021      	beq.n	800af46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800af02:	2300      	movs	r3, #0
 800af04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800af06:	2300      	movs	r3, #0
 800af08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800af0a:	1d3a      	adds	r2, r7, #4
 800af0c:	f107 0108 	add.w	r1, r7, #8
 800af10:	f107 030c 	add.w	r3, r7, #12
 800af14:	4618      	mov	r0, r3
 800af16:	f7fd fd89 	bl	8008a2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800af1a:	6879      	ldr	r1, [r7, #4]
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	9202      	str	r2, [sp, #8]
 800af22:	9301      	str	r3, [sp, #4]
 800af24:	2302      	movs	r3, #2
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	2300      	movs	r3, #0
 800af2a:	460a      	mov	r2, r1
 800af2c:	4911      	ldr	r1, [pc, #68]	@ (800af74 <xTimerCreateTimerTask+0x88>)
 800af2e:	4812      	ldr	r0, [pc, #72]	@ (800af78 <xTimerCreateTimerTask+0x8c>)
 800af30:	f7fe fe9a 	bl	8009c68 <xTaskCreateStatic>
 800af34:	4603      	mov	r3, r0
 800af36:	4a11      	ldr	r2, [pc, #68]	@ (800af7c <xTimerCreateTimerTask+0x90>)
 800af38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800af3a:	4b10      	ldr	r3, [pc, #64]	@ (800af7c <xTimerCreateTimerTask+0x90>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d001      	beq.n	800af46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800af42:	2301      	movs	r3, #1
 800af44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d10b      	bne.n	800af64 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800af4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af50:	f383 8811 	msr	BASEPRI, r3
 800af54:	f3bf 8f6f 	isb	sy
 800af58:	f3bf 8f4f 	dsb	sy
 800af5c:	613b      	str	r3, [r7, #16]
}
 800af5e:	bf00      	nop
 800af60:	bf00      	nop
 800af62:	e7fd      	b.n	800af60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800af64:	697b      	ldr	r3, [r7, #20]
}
 800af66:	4618      	mov	r0, r3
 800af68:	3718      	adds	r7, #24
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	2000129c 	.word	0x2000129c
 800af74:	0800c09c 	.word	0x0800c09c
 800af78:	0800b0b9 	.word	0x0800b0b9
 800af7c:	200012a0 	.word	0x200012a0

0800af80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b08a      	sub	sp, #40	@ 0x28
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	607a      	str	r2, [r7, #4]
 800af8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800af8e:	2300      	movs	r3, #0
 800af90:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10b      	bne.n	800afb0 <xTimerGenericCommand+0x30>
	__asm volatile
 800af98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af9c:	f383 8811 	msr	BASEPRI, r3
 800afa0:	f3bf 8f6f 	isb	sy
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	623b      	str	r3, [r7, #32]
}
 800afaa:	bf00      	nop
 800afac:	bf00      	nop
 800afae:	e7fd      	b.n	800afac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800afb0:	4b19      	ldr	r3, [pc, #100]	@ (800b018 <xTimerGenericCommand+0x98>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d02a      	beq.n	800b00e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	2b05      	cmp	r3, #5
 800afc8:	dc18      	bgt.n	800affc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800afca:	f7ff fdad 	bl	800ab28 <xTaskGetSchedulerState>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b02      	cmp	r3, #2
 800afd2:	d109      	bne.n	800afe8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800afd4:	4b10      	ldr	r3, [pc, #64]	@ (800b018 <xTimerGenericCommand+0x98>)
 800afd6:	6818      	ldr	r0, [r3, #0]
 800afd8:	f107 0110 	add.w	r1, r7, #16
 800afdc:	2300      	movs	r3, #0
 800afde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afe0:	f7fd ffa6 	bl	8008f30 <xQueueGenericSend>
 800afe4:	6278      	str	r0, [r7, #36]	@ 0x24
 800afe6:	e012      	b.n	800b00e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800afe8:	4b0b      	ldr	r3, [pc, #44]	@ (800b018 <xTimerGenericCommand+0x98>)
 800afea:	6818      	ldr	r0, [r3, #0]
 800afec:	f107 0110 	add.w	r1, r7, #16
 800aff0:	2300      	movs	r3, #0
 800aff2:	2200      	movs	r2, #0
 800aff4:	f7fd ff9c 	bl	8008f30 <xQueueGenericSend>
 800aff8:	6278      	str	r0, [r7, #36]	@ 0x24
 800affa:	e008      	b.n	800b00e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800affc:	4b06      	ldr	r3, [pc, #24]	@ (800b018 <xTimerGenericCommand+0x98>)
 800affe:	6818      	ldr	r0, [r3, #0]
 800b000:	f107 0110 	add.w	r1, r7, #16
 800b004:	2300      	movs	r3, #0
 800b006:	683a      	ldr	r2, [r7, #0]
 800b008:	f7fe f894 	bl	8009134 <xQueueGenericSendFromISR>
 800b00c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b010:	4618      	mov	r0, r3
 800b012:	3728      	adds	r7, #40	@ 0x28
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}
 800b018:	2000129c 	.word	0x2000129c

0800b01c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b088      	sub	sp, #32
 800b020:	af02      	add	r7, sp, #8
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b026:	4b23      	ldr	r3, [pc, #140]	@ (800b0b4 <prvProcessExpiredTimer+0x98>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	68db      	ldr	r3, [r3, #12]
 800b02e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	3304      	adds	r3, #4
 800b034:	4618      	mov	r0, r3
 800b036:	f7fd fd9d 	bl	8008b74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b040:	f003 0304 	and.w	r3, r3, #4
 800b044:	2b00      	cmp	r3, #0
 800b046:	d023      	beq.n	800b090 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	699a      	ldr	r2, [r3, #24]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	18d1      	adds	r1, r2, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	683a      	ldr	r2, [r7, #0]
 800b054:	6978      	ldr	r0, [r7, #20]
 800b056:	f000 f8d5 	bl	800b204 <prvInsertTimerInActiveList>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d020      	beq.n	800b0a2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b060:	2300      	movs	r3, #0
 800b062:	9300      	str	r3, [sp, #0]
 800b064:	2300      	movs	r3, #0
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	2100      	movs	r1, #0
 800b06a:	6978      	ldr	r0, [r7, #20]
 800b06c:	f7ff ff88 	bl	800af80 <xTimerGenericCommand>
 800b070:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d114      	bne.n	800b0a2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b07c:	f383 8811 	msr	BASEPRI, r3
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	f3bf 8f4f 	dsb	sy
 800b088:	60fb      	str	r3, [r7, #12]
}
 800b08a:	bf00      	nop
 800b08c:	bf00      	nop
 800b08e:	e7fd      	b.n	800b08c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b096:	f023 0301 	bic.w	r3, r3, #1
 800b09a:	b2da      	uxtb	r2, r3
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	6a1b      	ldr	r3, [r3, #32]
 800b0a6:	6978      	ldr	r0, [r7, #20]
 800b0a8:	4798      	blx	r3
}
 800b0aa:	bf00      	nop
 800b0ac:	3718      	adds	r7, #24
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20001294 	.word	0x20001294

0800b0b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b0c0:	f107 0308 	add.w	r3, r7, #8
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f000 f859 	bl	800b17c <prvGetNextExpireTime>
 800b0ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	68f8      	ldr	r0, [r7, #12]
 800b0d2:	f000 f805 	bl	800b0e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b0d6:	f000 f8d7 	bl	800b288 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b0da:	bf00      	nop
 800b0dc:	e7f0      	b.n	800b0c0 <prvTimerTask+0x8>
	...

0800b0e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b0ea:	f7ff f929 	bl	800a340 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b0ee:	f107 0308 	add.w	r3, r7, #8
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f000 f866 	bl	800b1c4 <prvSampleTimeNow>
 800b0f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d130      	bne.n	800b162 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d10a      	bne.n	800b11c <prvProcessTimerOrBlockTask+0x3c>
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d806      	bhi.n	800b11c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b10e:	f7ff f925 	bl	800a35c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b112:	68f9      	ldr	r1, [r7, #12]
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f7ff ff81 	bl	800b01c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b11a:	e024      	b.n	800b166 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d008      	beq.n	800b134 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b122:	4b13      	ldr	r3, [pc, #76]	@ (800b170 <prvProcessTimerOrBlockTask+0x90>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d101      	bne.n	800b130 <prvProcessTimerOrBlockTask+0x50>
 800b12c:	2301      	movs	r3, #1
 800b12e:	e000      	b.n	800b132 <prvProcessTimerOrBlockTask+0x52>
 800b130:	2300      	movs	r3, #0
 800b132:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b134:	4b0f      	ldr	r3, [pc, #60]	@ (800b174 <prvProcessTimerOrBlockTask+0x94>)
 800b136:	6818      	ldr	r0, [r3, #0]
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	1ad3      	subs	r3, r2, r3
 800b13e:	683a      	ldr	r2, [r7, #0]
 800b140:	4619      	mov	r1, r3
 800b142:	f7fe fd5d 	bl	8009c00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b146:	f7ff f909 	bl	800a35c <xTaskResumeAll>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d10a      	bne.n	800b166 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b150:	4b09      	ldr	r3, [pc, #36]	@ (800b178 <prvProcessTimerOrBlockTask+0x98>)
 800b152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b156:	601a      	str	r2, [r3, #0]
 800b158:	f3bf 8f4f 	dsb	sy
 800b15c:	f3bf 8f6f 	isb	sy
}
 800b160:	e001      	b.n	800b166 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b162:	f7ff f8fb 	bl	800a35c <xTaskResumeAll>
}
 800b166:	bf00      	nop
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	20001298 	.word	0x20001298
 800b174:	2000129c 	.word	0x2000129c
 800b178:	e000ed04 	.word	0xe000ed04

0800b17c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b17c:	b480      	push	{r7}
 800b17e:	b085      	sub	sp, #20
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b184:	4b0e      	ldr	r3, [pc, #56]	@ (800b1c0 <prvGetNextExpireTime+0x44>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d101      	bne.n	800b192 <prvGetNextExpireTime+0x16>
 800b18e:	2201      	movs	r2, #1
 800b190:	e000      	b.n	800b194 <prvGetNextExpireTime+0x18>
 800b192:	2200      	movs	r2, #0
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d105      	bne.n	800b1ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b1a0:	4b07      	ldr	r3, [pc, #28]	@ (800b1c0 <prvGetNextExpireTime+0x44>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	60fb      	str	r3, [r7, #12]
 800b1aa:	e001      	b.n	800b1b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3714      	adds	r7, #20
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr
 800b1be:	bf00      	nop
 800b1c0:	20001294 	.word	0x20001294

0800b1c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b1cc:	f7ff f964 	bl	800a498 <xTaskGetTickCount>
 800b1d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b1d2:	4b0b      	ldr	r3, [pc, #44]	@ (800b200 <prvSampleTimeNow+0x3c>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	68fa      	ldr	r2, [r7, #12]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d205      	bcs.n	800b1e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b1dc:	f000 f93a 	bl	800b454 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	601a      	str	r2, [r3, #0]
 800b1e6:	e002      	b.n	800b1ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b1ee:	4a04      	ldr	r2, [pc, #16]	@ (800b200 <prvSampleTimeNow+0x3c>)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	200012a4 	.word	0x200012a4

0800b204 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b086      	sub	sp, #24
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	607a      	str	r2, [r7, #4]
 800b210:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b212:	2300      	movs	r3, #0
 800b214:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	68ba      	ldr	r2, [r7, #8]
 800b21a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	68fa      	ldr	r2, [r7, #12]
 800b220:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b222:	68ba      	ldr	r2, [r7, #8]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	429a      	cmp	r2, r3
 800b228:	d812      	bhi.n	800b250 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	1ad2      	subs	r2, r2, r3
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	699b      	ldr	r3, [r3, #24]
 800b234:	429a      	cmp	r2, r3
 800b236:	d302      	bcc.n	800b23e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b238:	2301      	movs	r3, #1
 800b23a:	617b      	str	r3, [r7, #20]
 800b23c:	e01b      	b.n	800b276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b23e:	4b10      	ldr	r3, [pc, #64]	@ (800b280 <prvInsertTimerInActiveList+0x7c>)
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	3304      	adds	r3, #4
 800b246:	4619      	mov	r1, r3
 800b248:	4610      	mov	r0, r2
 800b24a:	f7fd fc5a 	bl	8008b02 <vListInsert>
 800b24e:	e012      	b.n	800b276 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	429a      	cmp	r2, r3
 800b256:	d206      	bcs.n	800b266 <prvInsertTimerInActiveList+0x62>
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d302      	bcc.n	800b266 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b260:	2301      	movs	r3, #1
 800b262:	617b      	str	r3, [r7, #20]
 800b264:	e007      	b.n	800b276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b266:	4b07      	ldr	r3, [pc, #28]	@ (800b284 <prvInsertTimerInActiveList+0x80>)
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	3304      	adds	r3, #4
 800b26e:	4619      	mov	r1, r3
 800b270:	4610      	mov	r0, r2
 800b272:	f7fd fc46 	bl	8008b02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b276:	697b      	ldr	r3, [r7, #20]
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3718      	adds	r7, #24
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	20001298 	.word	0x20001298
 800b284:	20001294 	.word	0x20001294

0800b288 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b08e      	sub	sp, #56	@ 0x38
 800b28c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b28e:	e0ce      	b.n	800b42e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2b00      	cmp	r3, #0
 800b294:	da19      	bge.n	800b2ca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b296:	1d3b      	adds	r3, r7, #4
 800b298:	3304      	adds	r3, #4
 800b29a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d10b      	bne.n	800b2ba <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a6:	f383 8811 	msr	BASEPRI, r3
 800b2aa:	f3bf 8f6f 	isb	sy
 800b2ae:	f3bf 8f4f 	dsb	sy
 800b2b2:	61fb      	str	r3, [r7, #28]
}
 800b2b4:	bf00      	nop
 800b2b6:	bf00      	nop
 800b2b8:	e7fd      	b.n	800b2b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2c0:	6850      	ldr	r0, [r2, #4]
 800b2c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2c4:	6892      	ldr	r2, [r2, #8]
 800b2c6:	4611      	mov	r1, r2
 800b2c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f2c0 80ae 	blt.w	800b42e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d8:	695b      	ldr	r3, [r3, #20]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d004      	beq.n	800b2e8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e0:	3304      	adds	r3, #4
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7fd fc46 	bl	8008b74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b2e8:	463b      	mov	r3, r7
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7ff ff6a 	bl	800b1c4 <prvSampleTimeNow>
 800b2f0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2b09      	cmp	r3, #9
 800b2f6:	f200 8097 	bhi.w	800b428 <prvProcessReceivedCommands+0x1a0>
 800b2fa:	a201      	add	r2, pc, #4	@ (adr r2, 800b300 <prvProcessReceivedCommands+0x78>)
 800b2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b300:	0800b329 	.word	0x0800b329
 800b304:	0800b329 	.word	0x0800b329
 800b308:	0800b329 	.word	0x0800b329
 800b30c:	0800b39f 	.word	0x0800b39f
 800b310:	0800b3b3 	.word	0x0800b3b3
 800b314:	0800b3ff 	.word	0x0800b3ff
 800b318:	0800b329 	.word	0x0800b329
 800b31c:	0800b329 	.word	0x0800b329
 800b320:	0800b39f 	.word	0x0800b39f
 800b324:	0800b3b3 	.word	0x0800b3b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b32a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b32e:	f043 0301 	orr.w	r3, r3, #1
 800b332:	b2da      	uxtb	r2, r3
 800b334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b336:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b33a:	68ba      	ldr	r2, [r7, #8]
 800b33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b33e:	699b      	ldr	r3, [r3, #24]
 800b340:	18d1      	adds	r1, r2, r3
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b346:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b348:	f7ff ff5c 	bl	800b204 <prvInsertTimerInActiveList>
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d06c      	beq.n	800b42c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b354:	6a1b      	ldr	r3, [r3, #32]
 800b356:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b358:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b35c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b360:	f003 0304 	and.w	r3, r3, #4
 800b364:	2b00      	cmp	r3, #0
 800b366:	d061      	beq.n	800b42c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b368:	68ba      	ldr	r2, [r7, #8]
 800b36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b36c:	699b      	ldr	r3, [r3, #24]
 800b36e:	441a      	add	r2, r3
 800b370:	2300      	movs	r3, #0
 800b372:	9300      	str	r3, [sp, #0]
 800b374:	2300      	movs	r3, #0
 800b376:	2100      	movs	r1, #0
 800b378:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b37a:	f7ff fe01 	bl	800af80 <xTimerGenericCommand>
 800b37e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b380:	6a3b      	ldr	r3, [r7, #32]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d152      	bne.n	800b42c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b38a:	f383 8811 	msr	BASEPRI, r3
 800b38e:	f3bf 8f6f 	isb	sy
 800b392:	f3bf 8f4f 	dsb	sy
 800b396:	61bb      	str	r3, [r7, #24]
}
 800b398:	bf00      	nop
 800b39a:	bf00      	nop
 800b39c:	e7fd      	b.n	800b39a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3a4:	f023 0301 	bic.w	r3, r3, #1
 800b3a8:	b2da      	uxtb	r2, r3
 800b3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b3b0:	e03d      	b.n	800b42e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3b8:	f043 0301 	orr.w	r3, r3, #1
 800b3bc:	b2da      	uxtb	r2, r3
 800b3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b3c4:	68ba      	ldr	r2, [r7, #8]
 800b3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3cc:	699b      	ldr	r3, [r3, #24]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d10b      	bne.n	800b3ea <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d6:	f383 8811 	msr	BASEPRI, r3
 800b3da:	f3bf 8f6f 	isb	sy
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	617b      	str	r3, [r7, #20]
}
 800b3e4:	bf00      	nop
 800b3e6:	bf00      	nop
 800b3e8:	e7fd      	b.n	800b3e6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ec:	699a      	ldr	r2, [r3, #24]
 800b3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f0:	18d1      	adds	r1, r2, r3
 800b3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3f8:	f7ff ff04 	bl	800b204 <prvInsertTimerInActiveList>
					break;
 800b3fc:	e017      	b.n	800b42e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b400:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b404:	f003 0302 	and.w	r3, r3, #2
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d103      	bne.n	800b414 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b40c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b40e:	f000 fbeb 	bl	800bbe8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b412:	e00c      	b.n	800b42e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b416:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b41a:	f023 0301 	bic.w	r3, r3, #1
 800b41e:	b2da      	uxtb	r2, r3
 800b420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b422:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b426:	e002      	b.n	800b42e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b428:	bf00      	nop
 800b42a:	e000      	b.n	800b42e <prvProcessReceivedCommands+0x1a6>
					break;
 800b42c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b42e:	4b08      	ldr	r3, [pc, #32]	@ (800b450 <prvProcessReceivedCommands+0x1c8>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	1d39      	adds	r1, r7, #4
 800b434:	2200      	movs	r2, #0
 800b436:	4618      	mov	r0, r3
 800b438:	f7fd ffaa 	bl	8009390 <xQueueReceive>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	f47f af26 	bne.w	800b290 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b444:	bf00      	nop
 800b446:	bf00      	nop
 800b448:	3730      	adds	r7, #48	@ 0x30
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	2000129c 	.word	0x2000129c

0800b454 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b088      	sub	sp, #32
 800b458:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b45a:	e049      	b.n	800b4f0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b45c:	4b2e      	ldr	r3, [pc, #184]	@ (800b518 <prvSwitchTimerLists+0xc4>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	68db      	ldr	r3, [r3, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b466:	4b2c      	ldr	r3, [pc, #176]	@ (800b518 <prvSwitchTimerLists+0xc4>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	3304      	adds	r3, #4
 800b474:	4618      	mov	r0, r3
 800b476:	f7fd fb7d 	bl	8008b74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	6a1b      	ldr	r3, [r3, #32]
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b488:	f003 0304 	and.w	r3, r3, #4
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d02f      	beq.n	800b4f0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	699b      	ldr	r3, [r3, #24]
 800b494:	693a      	ldr	r2, [r7, #16]
 800b496:	4413      	add	r3, r2
 800b498:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d90e      	bls.n	800b4c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	68ba      	ldr	r2, [r7, #8]
 800b4a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b4ae:	4b1a      	ldr	r3, [pc, #104]	@ (800b518 <prvSwitchTimerLists+0xc4>)
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	3304      	adds	r3, #4
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	4610      	mov	r0, r2
 800b4ba:	f7fd fb22 	bl	8008b02 <vListInsert>
 800b4be:	e017      	b.n	800b4f0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	9300      	str	r3, [sp, #0]
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	693a      	ldr	r2, [r7, #16]
 800b4c8:	2100      	movs	r1, #0
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f7ff fd58 	bl	800af80 <xTimerGenericCommand>
 800b4d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10b      	bne.n	800b4f0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b4d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	603b      	str	r3, [r7, #0]
}
 800b4ea:	bf00      	nop
 800b4ec:	bf00      	nop
 800b4ee:	e7fd      	b.n	800b4ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b4f0:	4b09      	ldr	r3, [pc, #36]	@ (800b518 <prvSwitchTimerLists+0xc4>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1b0      	bne.n	800b45c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b4fa:	4b07      	ldr	r3, [pc, #28]	@ (800b518 <prvSwitchTimerLists+0xc4>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b500:	4b06      	ldr	r3, [pc, #24]	@ (800b51c <prvSwitchTimerLists+0xc8>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a04      	ldr	r2, [pc, #16]	@ (800b518 <prvSwitchTimerLists+0xc4>)
 800b506:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b508:	4a04      	ldr	r2, [pc, #16]	@ (800b51c <prvSwitchTimerLists+0xc8>)
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	6013      	str	r3, [r2, #0]
}
 800b50e:	bf00      	nop
 800b510:	3718      	adds	r7, #24
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	20001294 	.word	0x20001294
 800b51c:	20001298 	.word	0x20001298

0800b520 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b526:	f000 f96f 	bl	800b808 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b52a:	4b15      	ldr	r3, [pc, #84]	@ (800b580 <prvCheckForValidListAndQueue+0x60>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d120      	bne.n	800b574 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b532:	4814      	ldr	r0, [pc, #80]	@ (800b584 <prvCheckForValidListAndQueue+0x64>)
 800b534:	f7fd fa94 	bl	8008a60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b538:	4813      	ldr	r0, [pc, #76]	@ (800b588 <prvCheckForValidListAndQueue+0x68>)
 800b53a:	f7fd fa91 	bl	8008a60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b53e:	4b13      	ldr	r3, [pc, #76]	@ (800b58c <prvCheckForValidListAndQueue+0x6c>)
 800b540:	4a10      	ldr	r2, [pc, #64]	@ (800b584 <prvCheckForValidListAndQueue+0x64>)
 800b542:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b544:	4b12      	ldr	r3, [pc, #72]	@ (800b590 <prvCheckForValidListAndQueue+0x70>)
 800b546:	4a10      	ldr	r2, [pc, #64]	@ (800b588 <prvCheckForValidListAndQueue+0x68>)
 800b548:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b54a:	2300      	movs	r3, #0
 800b54c:	9300      	str	r3, [sp, #0]
 800b54e:	4b11      	ldr	r3, [pc, #68]	@ (800b594 <prvCheckForValidListAndQueue+0x74>)
 800b550:	4a11      	ldr	r2, [pc, #68]	@ (800b598 <prvCheckForValidListAndQueue+0x78>)
 800b552:	2110      	movs	r1, #16
 800b554:	200a      	movs	r0, #10
 800b556:	f7fd fba1 	bl	8008c9c <xQueueGenericCreateStatic>
 800b55a:	4603      	mov	r3, r0
 800b55c:	4a08      	ldr	r2, [pc, #32]	@ (800b580 <prvCheckForValidListAndQueue+0x60>)
 800b55e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b560:	4b07      	ldr	r3, [pc, #28]	@ (800b580 <prvCheckForValidListAndQueue+0x60>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d005      	beq.n	800b574 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b568:	4b05      	ldr	r3, [pc, #20]	@ (800b580 <prvCheckForValidListAndQueue+0x60>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	490b      	ldr	r1, [pc, #44]	@ (800b59c <prvCheckForValidListAndQueue+0x7c>)
 800b56e:	4618      	mov	r0, r3
 800b570:	f7fe faf2 	bl	8009b58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b574:	f000 f97a 	bl	800b86c <vPortExitCritical>
}
 800b578:	bf00      	nop
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	2000129c 	.word	0x2000129c
 800b584:	2000126c 	.word	0x2000126c
 800b588:	20001280 	.word	0x20001280
 800b58c:	20001294 	.word	0x20001294
 800b590:	20001298 	.word	0x20001298
 800b594:	20001348 	.word	0x20001348
 800b598:	200012a8 	.word	0x200012a8
 800b59c:	0800c0a4 	.word	0x0800c0a4

0800b5a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b085      	sub	sp, #20
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	3b04      	subs	r3, #4
 800b5b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b5b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	3b04      	subs	r3, #4
 800b5be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	f023 0201 	bic.w	r2, r3, #1
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	3b04      	subs	r3, #4
 800b5ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b5d0:	4a0c      	ldr	r2, [pc, #48]	@ (800b604 <pxPortInitialiseStack+0x64>)
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	3b14      	subs	r3, #20
 800b5da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b5dc:	687a      	ldr	r2, [r7, #4]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	3b04      	subs	r3, #4
 800b5e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f06f 0202 	mvn.w	r2, #2
 800b5ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	3b20      	subs	r3, #32
 800b5f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3714      	adds	r7, #20
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr
 800b604:	0800b609 	.word	0x0800b609

0800b608 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b608:	b480      	push	{r7}
 800b60a:	b085      	sub	sp, #20
 800b60c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b60e:	2300      	movs	r3, #0
 800b610:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b612:	4b13      	ldr	r3, [pc, #76]	@ (800b660 <prvTaskExitError+0x58>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b61a:	d00b      	beq.n	800b634 <prvTaskExitError+0x2c>
	__asm volatile
 800b61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b620:	f383 8811 	msr	BASEPRI, r3
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	f3bf 8f4f 	dsb	sy
 800b62c:	60fb      	str	r3, [r7, #12]
}
 800b62e:	bf00      	nop
 800b630:	bf00      	nop
 800b632:	e7fd      	b.n	800b630 <prvTaskExitError+0x28>
	__asm volatile
 800b634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b638:	f383 8811 	msr	BASEPRI, r3
 800b63c:	f3bf 8f6f 	isb	sy
 800b640:	f3bf 8f4f 	dsb	sy
 800b644:	60bb      	str	r3, [r7, #8]
}
 800b646:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b648:	bf00      	nop
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d0fc      	beq.n	800b64a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b650:	bf00      	nop
 800b652:	bf00      	nop
 800b654:	3714      	adds	r7, #20
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr
 800b65e:	bf00      	nop
 800b660:	20000020 	.word	0x20000020
	...

0800b670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b670:	4b07      	ldr	r3, [pc, #28]	@ (800b690 <pxCurrentTCBConst2>)
 800b672:	6819      	ldr	r1, [r3, #0]
 800b674:	6808      	ldr	r0, [r1, #0]
 800b676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b67a:	f380 8809 	msr	PSP, r0
 800b67e:	f3bf 8f6f 	isb	sy
 800b682:	f04f 0000 	mov.w	r0, #0
 800b686:	f380 8811 	msr	BASEPRI, r0
 800b68a:	4770      	bx	lr
 800b68c:	f3af 8000 	nop.w

0800b690 <pxCurrentTCBConst2>:
 800b690:	20000d6c 	.word	0x20000d6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b694:	bf00      	nop
 800b696:	bf00      	nop

0800b698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b698:	4808      	ldr	r0, [pc, #32]	@ (800b6bc <prvPortStartFirstTask+0x24>)
 800b69a:	6800      	ldr	r0, [r0, #0]
 800b69c:	6800      	ldr	r0, [r0, #0]
 800b69e:	f380 8808 	msr	MSP, r0
 800b6a2:	f04f 0000 	mov.w	r0, #0
 800b6a6:	f380 8814 	msr	CONTROL, r0
 800b6aa:	b662      	cpsie	i
 800b6ac:	b661      	cpsie	f
 800b6ae:	f3bf 8f4f 	dsb	sy
 800b6b2:	f3bf 8f6f 	isb	sy
 800b6b6:	df00      	svc	0
 800b6b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b6ba:	bf00      	nop
 800b6bc:	e000ed08 	.word	0xe000ed08

0800b6c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b6c6:	4b47      	ldr	r3, [pc, #284]	@ (800b7e4 <xPortStartScheduler+0x124>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a47      	ldr	r2, [pc, #284]	@ (800b7e8 <xPortStartScheduler+0x128>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d10b      	bne.n	800b6e8 <xPortStartScheduler+0x28>
	__asm volatile
 800b6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6d4:	f383 8811 	msr	BASEPRI, r3
 800b6d8:	f3bf 8f6f 	isb	sy
 800b6dc:	f3bf 8f4f 	dsb	sy
 800b6e0:	613b      	str	r3, [r7, #16]
}
 800b6e2:	bf00      	nop
 800b6e4:	bf00      	nop
 800b6e6:	e7fd      	b.n	800b6e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b6e8:	4b3e      	ldr	r3, [pc, #248]	@ (800b7e4 <xPortStartScheduler+0x124>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a3f      	ldr	r2, [pc, #252]	@ (800b7ec <xPortStartScheduler+0x12c>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d10b      	bne.n	800b70a <xPortStartScheduler+0x4a>
	__asm volatile
 800b6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6f6:	f383 8811 	msr	BASEPRI, r3
 800b6fa:	f3bf 8f6f 	isb	sy
 800b6fe:	f3bf 8f4f 	dsb	sy
 800b702:	60fb      	str	r3, [r7, #12]
}
 800b704:	bf00      	nop
 800b706:	bf00      	nop
 800b708:	e7fd      	b.n	800b706 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b70a:	4b39      	ldr	r3, [pc, #228]	@ (800b7f0 <xPortStartScheduler+0x130>)
 800b70c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	b2db      	uxtb	r3, r3
 800b714:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	22ff      	movs	r2, #255	@ 0xff
 800b71a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	b2db      	uxtb	r3, r3
 800b722:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b724:	78fb      	ldrb	r3, [r7, #3]
 800b726:	b2db      	uxtb	r3, r3
 800b728:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b72c:	b2da      	uxtb	r2, r3
 800b72e:	4b31      	ldr	r3, [pc, #196]	@ (800b7f4 <xPortStartScheduler+0x134>)
 800b730:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b732:	4b31      	ldr	r3, [pc, #196]	@ (800b7f8 <xPortStartScheduler+0x138>)
 800b734:	2207      	movs	r2, #7
 800b736:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b738:	e009      	b.n	800b74e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b73a:	4b2f      	ldr	r3, [pc, #188]	@ (800b7f8 <xPortStartScheduler+0x138>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	3b01      	subs	r3, #1
 800b740:	4a2d      	ldr	r2, [pc, #180]	@ (800b7f8 <xPortStartScheduler+0x138>)
 800b742:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b744:	78fb      	ldrb	r3, [r7, #3]
 800b746:	b2db      	uxtb	r3, r3
 800b748:	005b      	lsls	r3, r3, #1
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b74e:	78fb      	ldrb	r3, [r7, #3]
 800b750:	b2db      	uxtb	r3, r3
 800b752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b756:	2b80      	cmp	r3, #128	@ 0x80
 800b758:	d0ef      	beq.n	800b73a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b75a:	4b27      	ldr	r3, [pc, #156]	@ (800b7f8 <xPortStartScheduler+0x138>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f1c3 0307 	rsb	r3, r3, #7
 800b762:	2b04      	cmp	r3, #4
 800b764:	d00b      	beq.n	800b77e <xPortStartScheduler+0xbe>
	__asm volatile
 800b766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b76a:	f383 8811 	msr	BASEPRI, r3
 800b76e:	f3bf 8f6f 	isb	sy
 800b772:	f3bf 8f4f 	dsb	sy
 800b776:	60bb      	str	r3, [r7, #8]
}
 800b778:	bf00      	nop
 800b77a:	bf00      	nop
 800b77c:	e7fd      	b.n	800b77a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b77e:	4b1e      	ldr	r3, [pc, #120]	@ (800b7f8 <xPortStartScheduler+0x138>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	021b      	lsls	r3, r3, #8
 800b784:	4a1c      	ldr	r2, [pc, #112]	@ (800b7f8 <xPortStartScheduler+0x138>)
 800b786:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b788:	4b1b      	ldr	r3, [pc, #108]	@ (800b7f8 <xPortStartScheduler+0x138>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b790:	4a19      	ldr	r2, [pc, #100]	@ (800b7f8 <xPortStartScheduler+0x138>)
 800b792:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	b2da      	uxtb	r2, r3
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b79c:	4b17      	ldr	r3, [pc, #92]	@ (800b7fc <xPortStartScheduler+0x13c>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a16      	ldr	r2, [pc, #88]	@ (800b7fc <xPortStartScheduler+0x13c>)
 800b7a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b7a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b7a8:	4b14      	ldr	r3, [pc, #80]	@ (800b7fc <xPortStartScheduler+0x13c>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a13      	ldr	r2, [pc, #76]	@ (800b7fc <xPortStartScheduler+0x13c>)
 800b7ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b7b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b7b4:	f000 f8da 	bl	800b96c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b7b8:	4b11      	ldr	r3, [pc, #68]	@ (800b800 <xPortStartScheduler+0x140>)
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b7be:	f000 f8f9 	bl	800b9b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b7c2:	4b10      	ldr	r3, [pc, #64]	@ (800b804 <xPortStartScheduler+0x144>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a0f      	ldr	r2, [pc, #60]	@ (800b804 <xPortStartScheduler+0x144>)
 800b7c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b7cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b7ce:	f7ff ff63 	bl	800b698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b7d2:	f7fe ff2b 	bl	800a62c <vTaskSwitchContext>
	prvTaskExitError();
 800b7d6:	f7ff ff17 	bl	800b608 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3718      	adds	r7, #24
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	e000ed00 	.word	0xe000ed00
 800b7e8:	410fc271 	.word	0x410fc271
 800b7ec:	410fc270 	.word	0x410fc270
 800b7f0:	e000e400 	.word	0xe000e400
 800b7f4:	20001398 	.word	0x20001398
 800b7f8:	2000139c 	.word	0x2000139c
 800b7fc:	e000ed20 	.word	0xe000ed20
 800b800:	20000020 	.word	0x20000020
 800b804:	e000ef34 	.word	0xe000ef34

0800b808 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
	__asm volatile
 800b80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	607b      	str	r3, [r7, #4]
}
 800b820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b822:	4b10      	ldr	r3, [pc, #64]	@ (800b864 <vPortEnterCritical+0x5c>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	3301      	adds	r3, #1
 800b828:	4a0e      	ldr	r2, [pc, #56]	@ (800b864 <vPortEnterCritical+0x5c>)
 800b82a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b82c:	4b0d      	ldr	r3, [pc, #52]	@ (800b864 <vPortEnterCritical+0x5c>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d110      	bne.n	800b856 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b834:	4b0c      	ldr	r3, [pc, #48]	@ (800b868 <vPortEnterCritical+0x60>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00b      	beq.n	800b856 <vPortEnterCritical+0x4e>
	__asm volatile
 800b83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b842:	f383 8811 	msr	BASEPRI, r3
 800b846:	f3bf 8f6f 	isb	sy
 800b84a:	f3bf 8f4f 	dsb	sy
 800b84e:	603b      	str	r3, [r7, #0]
}
 800b850:	bf00      	nop
 800b852:	bf00      	nop
 800b854:	e7fd      	b.n	800b852 <vPortEnterCritical+0x4a>
	}
}
 800b856:	bf00      	nop
 800b858:	370c      	adds	r7, #12
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
 800b862:	bf00      	nop
 800b864:	20000020 	.word	0x20000020
 800b868:	e000ed04 	.word	0xe000ed04

0800b86c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b86c:	b480      	push	{r7}
 800b86e:	b083      	sub	sp, #12
 800b870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b872:	4b12      	ldr	r3, [pc, #72]	@ (800b8bc <vPortExitCritical+0x50>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d10b      	bne.n	800b892 <vPortExitCritical+0x26>
	__asm volatile
 800b87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b87e:	f383 8811 	msr	BASEPRI, r3
 800b882:	f3bf 8f6f 	isb	sy
 800b886:	f3bf 8f4f 	dsb	sy
 800b88a:	607b      	str	r3, [r7, #4]
}
 800b88c:	bf00      	nop
 800b88e:	bf00      	nop
 800b890:	e7fd      	b.n	800b88e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b892:	4b0a      	ldr	r3, [pc, #40]	@ (800b8bc <vPortExitCritical+0x50>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	3b01      	subs	r3, #1
 800b898:	4a08      	ldr	r2, [pc, #32]	@ (800b8bc <vPortExitCritical+0x50>)
 800b89a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b89c:	4b07      	ldr	r3, [pc, #28]	@ (800b8bc <vPortExitCritical+0x50>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d105      	bne.n	800b8b0 <vPortExitCritical+0x44>
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	f383 8811 	msr	BASEPRI, r3
}
 800b8ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b8b0:	bf00      	nop
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr
 800b8bc:	20000020 	.word	0x20000020

0800b8c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b8c0:	f3ef 8009 	mrs	r0, PSP
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	4b15      	ldr	r3, [pc, #84]	@ (800b920 <pxCurrentTCBConst>)
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	f01e 0f10 	tst.w	lr, #16
 800b8d0:	bf08      	it	eq
 800b8d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b8d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8da:	6010      	str	r0, [r2, #0]
 800b8dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b8e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b8e4:	f380 8811 	msr	BASEPRI, r0
 800b8e8:	f3bf 8f4f 	dsb	sy
 800b8ec:	f3bf 8f6f 	isb	sy
 800b8f0:	f7fe fe9c 	bl	800a62c <vTaskSwitchContext>
 800b8f4:	f04f 0000 	mov.w	r0, #0
 800b8f8:	f380 8811 	msr	BASEPRI, r0
 800b8fc:	bc09      	pop	{r0, r3}
 800b8fe:	6819      	ldr	r1, [r3, #0]
 800b900:	6808      	ldr	r0, [r1, #0]
 800b902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b906:	f01e 0f10 	tst.w	lr, #16
 800b90a:	bf08      	it	eq
 800b90c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b910:	f380 8809 	msr	PSP, r0
 800b914:	f3bf 8f6f 	isb	sy
 800b918:	4770      	bx	lr
 800b91a:	bf00      	nop
 800b91c:	f3af 8000 	nop.w

0800b920 <pxCurrentTCBConst>:
 800b920:	20000d6c 	.word	0x20000d6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b924:	bf00      	nop
 800b926:	bf00      	nop

0800b928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
	__asm volatile
 800b92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b932:	f383 8811 	msr	BASEPRI, r3
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	607b      	str	r3, [r7, #4]
}
 800b940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b942:	f7fe fdb9 	bl	800a4b8 <xTaskIncrementTick>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d003      	beq.n	800b954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b94c:	4b06      	ldr	r3, [pc, #24]	@ (800b968 <xPortSysTickHandler+0x40>)
 800b94e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b952:	601a      	str	r2, [r3, #0]
 800b954:	2300      	movs	r3, #0
 800b956:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	f383 8811 	msr	BASEPRI, r3
}
 800b95e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b960:	bf00      	nop
 800b962:	3708      	adds	r7, #8
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	e000ed04 	.word	0xe000ed04

0800b96c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b96c:	b480      	push	{r7}
 800b96e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b970:	4b0b      	ldr	r3, [pc, #44]	@ (800b9a0 <vPortSetupTimerInterrupt+0x34>)
 800b972:	2200      	movs	r2, #0
 800b974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b976:	4b0b      	ldr	r3, [pc, #44]	@ (800b9a4 <vPortSetupTimerInterrupt+0x38>)
 800b978:	2200      	movs	r2, #0
 800b97a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b97c:	4b0a      	ldr	r3, [pc, #40]	@ (800b9a8 <vPortSetupTimerInterrupt+0x3c>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a0a      	ldr	r2, [pc, #40]	@ (800b9ac <vPortSetupTimerInterrupt+0x40>)
 800b982:	fba2 2303 	umull	r2, r3, r2, r3
 800b986:	099b      	lsrs	r3, r3, #6
 800b988:	4a09      	ldr	r2, [pc, #36]	@ (800b9b0 <vPortSetupTimerInterrupt+0x44>)
 800b98a:	3b01      	subs	r3, #1
 800b98c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b98e:	4b04      	ldr	r3, [pc, #16]	@ (800b9a0 <vPortSetupTimerInterrupt+0x34>)
 800b990:	2207      	movs	r2, #7
 800b992:	601a      	str	r2, [r3, #0]
}
 800b994:	bf00      	nop
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	e000e010 	.word	0xe000e010
 800b9a4:	e000e018 	.word	0xe000e018
 800b9a8:	20000004 	.word	0x20000004
 800b9ac:	10624dd3 	.word	0x10624dd3
 800b9b0:	e000e014 	.word	0xe000e014

0800b9b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b9b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b9c4 <vPortEnableVFP+0x10>
 800b9b8:	6801      	ldr	r1, [r0, #0]
 800b9ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b9be:	6001      	str	r1, [r0, #0]
 800b9c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b9c2:	bf00      	nop
 800b9c4:	e000ed88 	.word	0xe000ed88

0800b9c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b085      	sub	sp, #20
 800b9cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b9ce:	f3ef 8305 	mrs	r3, IPSR
 800b9d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2b0f      	cmp	r3, #15
 800b9d8:	d915      	bls.n	800ba06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b9da:	4a18      	ldr	r2, [pc, #96]	@ (800ba3c <vPortValidateInterruptPriority+0x74>)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	4413      	add	r3, r2
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b9e4:	4b16      	ldr	r3, [pc, #88]	@ (800ba40 <vPortValidateInterruptPriority+0x78>)
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	7afa      	ldrb	r2, [r7, #11]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d20b      	bcs.n	800ba06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9f2:	f383 8811 	msr	BASEPRI, r3
 800b9f6:	f3bf 8f6f 	isb	sy
 800b9fa:	f3bf 8f4f 	dsb	sy
 800b9fe:	607b      	str	r3, [r7, #4]
}
 800ba00:	bf00      	nop
 800ba02:	bf00      	nop
 800ba04:	e7fd      	b.n	800ba02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ba06:	4b0f      	ldr	r3, [pc, #60]	@ (800ba44 <vPortValidateInterruptPriority+0x7c>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ba0e:	4b0e      	ldr	r3, [pc, #56]	@ (800ba48 <vPortValidateInterruptPriority+0x80>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d90b      	bls.n	800ba2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ba16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba1a:	f383 8811 	msr	BASEPRI, r3
 800ba1e:	f3bf 8f6f 	isb	sy
 800ba22:	f3bf 8f4f 	dsb	sy
 800ba26:	603b      	str	r3, [r7, #0]
}
 800ba28:	bf00      	nop
 800ba2a:	bf00      	nop
 800ba2c:	e7fd      	b.n	800ba2a <vPortValidateInterruptPriority+0x62>
	}
 800ba2e:	bf00      	nop
 800ba30:	3714      	adds	r7, #20
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	e000e3f0 	.word	0xe000e3f0
 800ba40:	20001398 	.word	0x20001398
 800ba44:	e000ed0c 	.word	0xe000ed0c
 800ba48:	2000139c 	.word	0x2000139c

0800ba4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b08a      	sub	sp, #40	@ 0x28
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ba54:	2300      	movs	r3, #0
 800ba56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ba58:	f7fe fc72 	bl	800a340 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ba5c:	4b5c      	ldr	r3, [pc, #368]	@ (800bbd0 <pvPortMalloc+0x184>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d101      	bne.n	800ba68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ba64:	f000 f924 	bl	800bcb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ba68:	4b5a      	ldr	r3, [pc, #360]	@ (800bbd4 <pvPortMalloc+0x188>)
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	4013      	ands	r3, r2
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f040 8095 	bne.w	800bba0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d01e      	beq.n	800baba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ba7c:	2208      	movs	r2, #8
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	4413      	add	r3, r2
 800ba82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f003 0307 	and.w	r3, r3, #7
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d015      	beq.n	800baba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f023 0307 	bic.w	r3, r3, #7
 800ba94:	3308      	adds	r3, #8
 800ba96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f003 0307 	and.w	r3, r3, #7
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d00b      	beq.n	800baba <pvPortMalloc+0x6e>
	__asm volatile
 800baa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baa6:	f383 8811 	msr	BASEPRI, r3
 800baaa:	f3bf 8f6f 	isb	sy
 800baae:	f3bf 8f4f 	dsb	sy
 800bab2:	617b      	str	r3, [r7, #20]
}
 800bab4:	bf00      	nop
 800bab6:	bf00      	nop
 800bab8:	e7fd      	b.n	800bab6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d06f      	beq.n	800bba0 <pvPortMalloc+0x154>
 800bac0:	4b45      	ldr	r3, [pc, #276]	@ (800bbd8 <pvPortMalloc+0x18c>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d86a      	bhi.n	800bba0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800baca:	4b44      	ldr	r3, [pc, #272]	@ (800bbdc <pvPortMalloc+0x190>)
 800bacc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bace:	4b43      	ldr	r3, [pc, #268]	@ (800bbdc <pvPortMalloc+0x190>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bad4:	e004      	b.n	800bae0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bad8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d903      	bls.n	800baf2 <pvPortMalloc+0xa6>
 800baea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d1f1      	bne.n	800bad6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800baf2:	4b37      	ldr	r3, [pc, #220]	@ (800bbd0 <pvPortMalloc+0x184>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d051      	beq.n	800bba0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bafc:	6a3b      	ldr	r3, [r7, #32]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2208      	movs	r2, #8
 800bb02:	4413      	add	r3, r2
 800bb04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	6a3b      	ldr	r3, [r7, #32]
 800bb0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb10:	685a      	ldr	r2, [r3, #4]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	1ad2      	subs	r2, r2, r3
 800bb16:	2308      	movs	r3, #8
 800bb18:	005b      	lsls	r3, r3, #1
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d920      	bls.n	800bb60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bb1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	4413      	add	r3, r2
 800bb24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	f003 0307 	and.w	r3, r3, #7
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d00b      	beq.n	800bb48 <pvPortMalloc+0xfc>
	__asm volatile
 800bb30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb34:	f383 8811 	msr	BASEPRI, r3
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	f3bf 8f4f 	dsb	sy
 800bb40:	613b      	str	r3, [r7, #16]
}
 800bb42:	bf00      	nop
 800bb44:	bf00      	nop
 800bb46:	e7fd      	b.n	800bb44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bb48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb4a:	685a      	ldr	r2, [r3, #4]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	1ad2      	subs	r2, r2, r3
 800bb50:	69bb      	ldr	r3, [r7, #24]
 800bb52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bb54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb56:	687a      	ldr	r2, [r7, #4]
 800bb58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bb5a:	69b8      	ldr	r0, [r7, #24]
 800bb5c:	f000 f90a 	bl	800bd74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bb60:	4b1d      	ldr	r3, [pc, #116]	@ (800bbd8 <pvPortMalloc+0x18c>)
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	1ad3      	subs	r3, r2, r3
 800bb6a:	4a1b      	ldr	r2, [pc, #108]	@ (800bbd8 <pvPortMalloc+0x18c>)
 800bb6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bb6e:	4b1a      	ldr	r3, [pc, #104]	@ (800bbd8 <pvPortMalloc+0x18c>)
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	4b1b      	ldr	r3, [pc, #108]	@ (800bbe0 <pvPortMalloc+0x194>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d203      	bcs.n	800bb82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bb7a:	4b17      	ldr	r3, [pc, #92]	@ (800bbd8 <pvPortMalloc+0x18c>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a18      	ldr	r2, [pc, #96]	@ (800bbe0 <pvPortMalloc+0x194>)
 800bb80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bb82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb84:	685a      	ldr	r2, [r3, #4]
 800bb86:	4b13      	ldr	r3, [pc, #76]	@ (800bbd4 <pvPortMalloc+0x188>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	431a      	orrs	r2, r3
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bb90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb92:	2200      	movs	r2, #0
 800bb94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bb96:	4b13      	ldr	r3, [pc, #76]	@ (800bbe4 <pvPortMalloc+0x198>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	4a11      	ldr	r2, [pc, #68]	@ (800bbe4 <pvPortMalloc+0x198>)
 800bb9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bba0:	f7fe fbdc 	bl	800a35c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	f003 0307 	and.w	r3, r3, #7
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d00b      	beq.n	800bbc6 <pvPortMalloc+0x17a>
	__asm volatile
 800bbae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb2:	f383 8811 	msr	BASEPRI, r3
 800bbb6:	f3bf 8f6f 	isb	sy
 800bbba:	f3bf 8f4f 	dsb	sy
 800bbbe:	60fb      	str	r3, [r7, #12]
}
 800bbc0:	bf00      	nop
 800bbc2:	bf00      	nop
 800bbc4:	e7fd      	b.n	800bbc2 <pvPortMalloc+0x176>
	return pvReturn;
 800bbc6:	69fb      	ldr	r3, [r7, #28]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3728      	adds	r7, #40	@ 0x28
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	20001f60 	.word	0x20001f60
 800bbd4:	20001f74 	.word	0x20001f74
 800bbd8:	20001f64 	.word	0x20001f64
 800bbdc:	20001f58 	.word	0x20001f58
 800bbe0:	20001f68 	.word	0x20001f68
 800bbe4:	20001f6c 	.word	0x20001f6c

0800bbe8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b086      	sub	sp, #24
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d04f      	beq.n	800bc9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bbfa:	2308      	movs	r3, #8
 800bbfc:	425b      	negs	r3, r3
 800bbfe:	697a      	ldr	r2, [r7, #20]
 800bc00:	4413      	add	r3, r2
 800bc02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	685a      	ldr	r2, [r3, #4]
 800bc0c:	4b25      	ldr	r3, [pc, #148]	@ (800bca4 <vPortFree+0xbc>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4013      	ands	r3, r2
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d10b      	bne.n	800bc2e <vPortFree+0x46>
	__asm volatile
 800bc16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc1a:	f383 8811 	msr	BASEPRI, r3
 800bc1e:	f3bf 8f6f 	isb	sy
 800bc22:	f3bf 8f4f 	dsb	sy
 800bc26:	60fb      	str	r3, [r7, #12]
}
 800bc28:	bf00      	nop
 800bc2a:	bf00      	nop
 800bc2c:	e7fd      	b.n	800bc2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d00b      	beq.n	800bc4e <vPortFree+0x66>
	__asm volatile
 800bc36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc3a:	f383 8811 	msr	BASEPRI, r3
 800bc3e:	f3bf 8f6f 	isb	sy
 800bc42:	f3bf 8f4f 	dsb	sy
 800bc46:	60bb      	str	r3, [r7, #8]
}
 800bc48:	bf00      	nop
 800bc4a:	bf00      	nop
 800bc4c:	e7fd      	b.n	800bc4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	685a      	ldr	r2, [r3, #4]
 800bc52:	4b14      	ldr	r3, [pc, #80]	@ (800bca4 <vPortFree+0xbc>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4013      	ands	r3, r2
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d01e      	beq.n	800bc9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d11a      	bne.n	800bc9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	685a      	ldr	r2, [r3, #4]
 800bc68:	4b0e      	ldr	r3, [pc, #56]	@ (800bca4 <vPortFree+0xbc>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	43db      	mvns	r3, r3
 800bc6e:	401a      	ands	r2, r3
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bc74:	f7fe fb64 	bl	800a340 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	685a      	ldr	r2, [r3, #4]
 800bc7c:	4b0a      	ldr	r3, [pc, #40]	@ (800bca8 <vPortFree+0xc0>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4413      	add	r3, r2
 800bc82:	4a09      	ldr	r2, [pc, #36]	@ (800bca8 <vPortFree+0xc0>)
 800bc84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bc86:	6938      	ldr	r0, [r7, #16]
 800bc88:	f000 f874 	bl	800bd74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bc8c:	4b07      	ldr	r3, [pc, #28]	@ (800bcac <vPortFree+0xc4>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	3301      	adds	r3, #1
 800bc92:	4a06      	ldr	r2, [pc, #24]	@ (800bcac <vPortFree+0xc4>)
 800bc94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bc96:	f7fe fb61 	bl	800a35c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bc9a:	bf00      	nop
 800bc9c:	3718      	adds	r7, #24
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop
 800bca4:	20001f74 	.word	0x20001f74
 800bca8:	20001f64 	.word	0x20001f64
 800bcac:	20001f70 	.word	0x20001f70

0800bcb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b085      	sub	sp, #20
 800bcb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bcb6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800bcba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bcbc:	4b27      	ldr	r3, [pc, #156]	@ (800bd5c <prvHeapInit+0xac>)
 800bcbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f003 0307 	and.w	r3, r3, #7
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00c      	beq.n	800bce4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	3307      	adds	r3, #7
 800bcce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f023 0307 	bic.w	r3, r3, #7
 800bcd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bcd8:	68ba      	ldr	r2, [r7, #8]
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	1ad3      	subs	r3, r2, r3
 800bcde:	4a1f      	ldr	r2, [pc, #124]	@ (800bd5c <prvHeapInit+0xac>)
 800bce0:	4413      	add	r3, r2
 800bce2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bce8:	4a1d      	ldr	r2, [pc, #116]	@ (800bd60 <prvHeapInit+0xb0>)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bcee:	4b1c      	ldr	r3, [pc, #112]	@ (800bd60 <prvHeapInit+0xb0>)
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	68ba      	ldr	r2, [r7, #8]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bcfc:	2208      	movs	r2, #8
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	1a9b      	subs	r3, r3, r2
 800bd02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f023 0307 	bic.w	r3, r3, #7
 800bd0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	4a15      	ldr	r2, [pc, #84]	@ (800bd64 <prvHeapInit+0xb4>)
 800bd10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bd12:	4b14      	ldr	r3, [pc, #80]	@ (800bd64 <prvHeapInit+0xb4>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2200      	movs	r2, #0
 800bd18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bd1a:	4b12      	ldr	r3, [pc, #72]	@ (800bd64 <prvHeapInit+0xb4>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	1ad2      	subs	r2, r2, r3
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bd30:	4b0c      	ldr	r3, [pc, #48]	@ (800bd64 <prvHeapInit+0xb4>)
 800bd32:	681a      	ldr	r2, [r3, #0]
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	4a0a      	ldr	r2, [pc, #40]	@ (800bd68 <prvHeapInit+0xb8>)
 800bd3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	4a09      	ldr	r2, [pc, #36]	@ (800bd6c <prvHeapInit+0xbc>)
 800bd46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bd48:	4b09      	ldr	r3, [pc, #36]	@ (800bd70 <prvHeapInit+0xc0>)
 800bd4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bd4e:	601a      	str	r2, [r3, #0]
}
 800bd50:	bf00      	nop
 800bd52:	3714      	adds	r7, #20
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr
 800bd5c:	200013a0 	.word	0x200013a0
 800bd60:	20001f58 	.word	0x20001f58
 800bd64:	20001f60 	.word	0x20001f60
 800bd68:	20001f68 	.word	0x20001f68
 800bd6c:	20001f64 	.word	0x20001f64
 800bd70:	20001f74 	.word	0x20001f74

0800bd74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bd74:	b480      	push	{r7}
 800bd76:	b085      	sub	sp, #20
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bd7c:	4b28      	ldr	r3, [pc, #160]	@ (800be20 <prvInsertBlockIntoFreeList+0xac>)
 800bd7e:	60fb      	str	r3, [r7, #12]
 800bd80:	e002      	b.n	800bd88 <prvInsertBlockIntoFreeList+0x14>
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	60fb      	str	r3, [r7, #12]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d8f7      	bhi.n	800bd82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	68ba      	ldr	r2, [r7, #8]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d108      	bne.n	800bdb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	685a      	ldr	r2, [r3, #4]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	441a      	add	r2, r3
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	68ba      	ldr	r2, [r7, #8]
 800bdc0:	441a      	add	r2, r3
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d118      	bne.n	800bdfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	4b15      	ldr	r3, [pc, #84]	@ (800be24 <prvInsertBlockIntoFreeList+0xb0>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d00d      	beq.n	800bdf2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	685a      	ldr	r2, [r3, #4]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	685b      	ldr	r3, [r3, #4]
 800bde0:	441a      	add	r2, r3
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	601a      	str	r2, [r3, #0]
 800bdf0:	e008      	b.n	800be04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bdf2:	4b0c      	ldr	r3, [pc, #48]	@ (800be24 <prvInsertBlockIntoFreeList+0xb0>)
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	601a      	str	r2, [r3, #0]
 800bdfa:	e003      	b.n	800be04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800be04:	68fa      	ldr	r2, [r7, #12]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d002      	beq.n	800be12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be12:	bf00      	nop
 800be14:	3714      	adds	r7, #20
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr
 800be1e:	bf00      	nop
 800be20:	20001f58 	.word	0x20001f58
 800be24:	20001f60 	.word	0x20001f60

0800be28 <memset>:
 800be28:	4402      	add	r2, r0
 800be2a:	4603      	mov	r3, r0
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d100      	bne.n	800be32 <memset+0xa>
 800be30:	4770      	bx	lr
 800be32:	f803 1b01 	strb.w	r1, [r3], #1
 800be36:	e7f9      	b.n	800be2c <memset+0x4>

0800be38 <_reclaim_reent>:
 800be38:	4b29      	ldr	r3, [pc, #164]	@ (800bee0 <_reclaim_reent+0xa8>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4283      	cmp	r3, r0
 800be3e:	b570      	push	{r4, r5, r6, lr}
 800be40:	4604      	mov	r4, r0
 800be42:	d04b      	beq.n	800bedc <_reclaim_reent+0xa4>
 800be44:	69c3      	ldr	r3, [r0, #28]
 800be46:	b1ab      	cbz	r3, 800be74 <_reclaim_reent+0x3c>
 800be48:	68db      	ldr	r3, [r3, #12]
 800be4a:	b16b      	cbz	r3, 800be68 <_reclaim_reent+0x30>
 800be4c:	2500      	movs	r5, #0
 800be4e:	69e3      	ldr	r3, [r4, #28]
 800be50:	68db      	ldr	r3, [r3, #12]
 800be52:	5959      	ldr	r1, [r3, r5]
 800be54:	2900      	cmp	r1, #0
 800be56:	d13b      	bne.n	800bed0 <_reclaim_reent+0x98>
 800be58:	3504      	adds	r5, #4
 800be5a:	2d80      	cmp	r5, #128	@ 0x80
 800be5c:	d1f7      	bne.n	800be4e <_reclaim_reent+0x16>
 800be5e:	69e3      	ldr	r3, [r4, #28]
 800be60:	4620      	mov	r0, r4
 800be62:	68d9      	ldr	r1, [r3, #12]
 800be64:	f000 f872 	bl	800bf4c <_free_r>
 800be68:	69e3      	ldr	r3, [r4, #28]
 800be6a:	6819      	ldr	r1, [r3, #0]
 800be6c:	b111      	cbz	r1, 800be74 <_reclaim_reent+0x3c>
 800be6e:	4620      	mov	r0, r4
 800be70:	f000 f86c 	bl	800bf4c <_free_r>
 800be74:	6961      	ldr	r1, [r4, #20]
 800be76:	b111      	cbz	r1, 800be7e <_reclaim_reent+0x46>
 800be78:	4620      	mov	r0, r4
 800be7a:	f000 f867 	bl	800bf4c <_free_r>
 800be7e:	69e1      	ldr	r1, [r4, #28]
 800be80:	b111      	cbz	r1, 800be88 <_reclaim_reent+0x50>
 800be82:	4620      	mov	r0, r4
 800be84:	f000 f862 	bl	800bf4c <_free_r>
 800be88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800be8a:	b111      	cbz	r1, 800be92 <_reclaim_reent+0x5a>
 800be8c:	4620      	mov	r0, r4
 800be8e:	f000 f85d 	bl	800bf4c <_free_r>
 800be92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be94:	b111      	cbz	r1, 800be9c <_reclaim_reent+0x64>
 800be96:	4620      	mov	r0, r4
 800be98:	f000 f858 	bl	800bf4c <_free_r>
 800be9c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800be9e:	b111      	cbz	r1, 800bea6 <_reclaim_reent+0x6e>
 800bea0:	4620      	mov	r0, r4
 800bea2:	f000 f853 	bl	800bf4c <_free_r>
 800bea6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bea8:	b111      	cbz	r1, 800beb0 <_reclaim_reent+0x78>
 800beaa:	4620      	mov	r0, r4
 800beac:	f000 f84e 	bl	800bf4c <_free_r>
 800beb0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800beb2:	b111      	cbz	r1, 800beba <_reclaim_reent+0x82>
 800beb4:	4620      	mov	r0, r4
 800beb6:	f000 f849 	bl	800bf4c <_free_r>
 800beba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bebc:	b111      	cbz	r1, 800bec4 <_reclaim_reent+0x8c>
 800bebe:	4620      	mov	r0, r4
 800bec0:	f000 f844 	bl	800bf4c <_free_r>
 800bec4:	6a23      	ldr	r3, [r4, #32]
 800bec6:	b14b      	cbz	r3, 800bedc <_reclaim_reent+0xa4>
 800bec8:	4620      	mov	r0, r4
 800beca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bece:	4718      	bx	r3
 800bed0:	680e      	ldr	r6, [r1, #0]
 800bed2:	4620      	mov	r0, r4
 800bed4:	f000 f83a 	bl	800bf4c <_free_r>
 800bed8:	4631      	mov	r1, r6
 800beda:	e7bb      	b.n	800be54 <_reclaim_reent+0x1c>
 800bedc:	bd70      	pop	{r4, r5, r6, pc}
 800bede:	bf00      	nop
 800bee0:	20000024 	.word	0x20000024

0800bee4 <__libc_init_array>:
 800bee4:	b570      	push	{r4, r5, r6, lr}
 800bee6:	4d0d      	ldr	r5, [pc, #52]	@ (800bf1c <__libc_init_array+0x38>)
 800bee8:	4c0d      	ldr	r4, [pc, #52]	@ (800bf20 <__libc_init_array+0x3c>)
 800beea:	1b64      	subs	r4, r4, r5
 800beec:	10a4      	asrs	r4, r4, #2
 800beee:	2600      	movs	r6, #0
 800bef0:	42a6      	cmp	r6, r4
 800bef2:	d109      	bne.n	800bf08 <__libc_init_array+0x24>
 800bef4:	4d0b      	ldr	r5, [pc, #44]	@ (800bf24 <__libc_init_array+0x40>)
 800bef6:	4c0c      	ldr	r4, [pc, #48]	@ (800bf28 <__libc_init_array+0x44>)
 800bef8:	f000 f87e 	bl	800bff8 <_init>
 800befc:	1b64      	subs	r4, r4, r5
 800befe:	10a4      	asrs	r4, r4, #2
 800bf00:	2600      	movs	r6, #0
 800bf02:	42a6      	cmp	r6, r4
 800bf04:	d105      	bne.n	800bf12 <__libc_init_array+0x2e>
 800bf06:	bd70      	pop	{r4, r5, r6, pc}
 800bf08:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf0c:	4798      	blx	r3
 800bf0e:	3601      	adds	r6, #1
 800bf10:	e7ee      	b.n	800bef0 <__libc_init_array+0xc>
 800bf12:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf16:	4798      	blx	r3
 800bf18:	3601      	adds	r6, #1
 800bf1a:	e7f2      	b.n	800bf02 <__libc_init_array+0x1e>
 800bf1c:	0800c234 	.word	0x0800c234
 800bf20:	0800c234 	.word	0x0800c234
 800bf24:	0800c234 	.word	0x0800c234
 800bf28:	0800c238 	.word	0x0800c238

0800bf2c <__retarget_lock_acquire_recursive>:
 800bf2c:	4770      	bx	lr

0800bf2e <__retarget_lock_release_recursive>:
 800bf2e:	4770      	bx	lr

0800bf30 <memcpy>:
 800bf30:	440a      	add	r2, r1
 800bf32:	4291      	cmp	r1, r2
 800bf34:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf38:	d100      	bne.n	800bf3c <memcpy+0xc>
 800bf3a:	4770      	bx	lr
 800bf3c:	b510      	push	{r4, lr}
 800bf3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf46:	4291      	cmp	r1, r2
 800bf48:	d1f9      	bne.n	800bf3e <memcpy+0xe>
 800bf4a:	bd10      	pop	{r4, pc}

0800bf4c <_free_r>:
 800bf4c:	b538      	push	{r3, r4, r5, lr}
 800bf4e:	4605      	mov	r5, r0
 800bf50:	2900      	cmp	r1, #0
 800bf52:	d041      	beq.n	800bfd8 <_free_r+0x8c>
 800bf54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf58:	1f0c      	subs	r4, r1, #4
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	bfb8      	it	lt
 800bf5e:	18e4      	addlt	r4, r4, r3
 800bf60:	f000 f83e 	bl	800bfe0 <__malloc_lock>
 800bf64:	4a1d      	ldr	r2, [pc, #116]	@ (800bfdc <_free_r+0x90>)
 800bf66:	6813      	ldr	r3, [r2, #0]
 800bf68:	b933      	cbnz	r3, 800bf78 <_free_r+0x2c>
 800bf6a:	6063      	str	r3, [r4, #4]
 800bf6c:	6014      	str	r4, [r2, #0]
 800bf6e:	4628      	mov	r0, r5
 800bf70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf74:	f000 b83a 	b.w	800bfec <__malloc_unlock>
 800bf78:	42a3      	cmp	r3, r4
 800bf7a:	d908      	bls.n	800bf8e <_free_r+0x42>
 800bf7c:	6820      	ldr	r0, [r4, #0]
 800bf7e:	1821      	adds	r1, r4, r0
 800bf80:	428b      	cmp	r3, r1
 800bf82:	bf01      	itttt	eq
 800bf84:	6819      	ldreq	r1, [r3, #0]
 800bf86:	685b      	ldreq	r3, [r3, #4]
 800bf88:	1809      	addeq	r1, r1, r0
 800bf8a:	6021      	streq	r1, [r4, #0]
 800bf8c:	e7ed      	b.n	800bf6a <_free_r+0x1e>
 800bf8e:	461a      	mov	r2, r3
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	b10b      	cbz	r3, 800bf98 <_free_r+0x4c>
 800bf94:	42a3      	cmp	r3, r4
 800bf96:	d9fa      	bls.n	800bf8e <_free_r+0x42>
 800bf98:	6811      	ldr	r1, [r2, #0]
 800bf9a:	1850      	adds	r0, r2, r1
 800bf9c:	42a0      	cmp	r0, r4
 800bf9e:	d10b      	bne.n	800bfb8 <_free_r+0x6c>
 800bfa0:	6820      	ldr	r0, [r4, #0]
 800bfa2:	4401      	add	r1, r0
 800bfa4:	1850      	adds	r0, r2, r1
 800bfa6:	4283      	cmp	r3, r0
 800bfa8:	6011      	str	r1, [r2, #0]
 800bfaa:	d1e0      	bne.n	800bf6e <_free_r+0x22>
 800bfac:	6818      	ldr	r0, [r3, #0]
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	6053      	str	r3, [r2, #4]
 800bfb2:	4408      	add	r0, r1
 800bfb4:	6010      	str	r0, [r2, #0]
 800bfb6:	e7da      	b.n	800bf6e <_free_r+0x22>
 800bfb8:	d902      	bls.n	800bfc0 <_free_r+0x74>
 800bfba:	230c      	movs	r3, #12
 800bfbc:	602b      	str	r3, [r5, #0]
 800bfbe:	e7d6      	b.n	800bf6e <_free_r+0x22>
 800bfc0:	6820      	ldr	r0, [r4, #0]
 800bfc2:	1821      	adds	r1, r4, r0
 800bfc4:	428b      	cmp	r3, r1
 800bfc6:	bf04      	itt	eq
 800bfc8:	6819      	ldreq	r1, [r3, #0]
 800bfca:	685b      	ldreq	r3, [r3, #4]
 800bfcc:	6063      	str	r3, [r4, #4]
 800bfce:	bf04      	itt	eq
 800bfd0:	1809      	addeq	r1, r1, r0
 800bfd2:	6021      	streq	r1, [r4, #0]
 800bfd4:	6054      	str	r4, [r2, #4]
 800bfd6:	e7ca      	b.n	800bf6e <_free_r+0x22>
 800bfd8:	bd38      	pop	{r3, r4, r5, pc}
 800bfda:	bf00      	nop
 800bfdc:	200020b4 	.word	0x200020b4

0800bfe0 <__malloc_lock>:
 800bfe0:	4801      	ldr	r0, [pc, #4]	@ (800bfe8 <__malloc_lock+0x8>)
 800bfe2:	f7ff bfa3 	b.w	800bf2c <__retarget_lock_acquire_recursive>
 800bfe6:	bf00      	nop
 800bfe8:	200020b0 	.word	0x200020b0

0800bfec <__malloc_unlock>:
 800bfec:	4801      	ldr	r0, [pc, #4]	@ (800bff4 <__malloc_unlock+0x8>)
 800bfee:	f7ff bf9e 	b.w	800bf2e <__retarget_lock_release_recursive>
 800bff2:	bf00      	nop
 800bff4:	200020b0 	.word	0x200020b0

0800bff8 <_init>:
 800bff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bffa:	bf00      	nop
 800bffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bffe:	bc08      	pop	{r3}
 800c000:	469e      	mov	lr, r3
 800c002:	4770      	bx	lr

0800c004 <_fini>:
 800c004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c006:	bf00      	nop
 800c008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c00a:	bc08      	pop	{r3}
 800c00c:	469e      	mov	lr, r3
 800c00e:	4770      	bx	lr
