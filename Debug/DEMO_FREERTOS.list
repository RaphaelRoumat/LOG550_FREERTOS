
DEMO_FREERTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd90  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  0800bf50  0800bf50  0000cf50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c120  0800c120  0000e074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c120  0800c120  0000d120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c128  0800c128  0000e074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c128  0800c128  0000d128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c12c  0800c12c  0000d12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c130  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000203c  20000074  0800c1a4  0000e074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020b0  0800c1a4  0000e0b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c9cb  00000000  00000000  0000e0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fb3  00000000  00000000  0003aa6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024f8  00000000  00000000  0003fa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001cda  00000000  00000000  00041f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005e28  00000000  00000000  00043bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a9ed  00000000  00000000  00049a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001339f9  00000000  00000000  0007440f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a7e08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a208  00000000  00000000  001a7e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  001b2054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800bf38 	.word	0x0800bf38

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	0800bf38 	.word	0x0800bf38

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96a 	b.w	80004ec <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	460c      	mov	r4, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14e      	bne.n	80002da <__udivmoddi4+0xaa>
 800023c:	4694      	mov	ip, r2
 800023e:	458c      	cmp	ip, r1
 8000240:	4686      	mov	lr, r0
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	d962      	bls.n	800030e <__udivmoddi4+0xde>
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0320 	rsb	r3, r2, #32
 800024e:	4091      	lsls	r1, r2
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	fa0c fc02 	lsl.w	ip, ip, r2
 8000258:	4319      	orrs	r1, r3
 800025a:	fa00 fe02 	lsl.w	lr, r0, r2
 800025e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000262:	fa1f f68c 	uxth.w	r6, ip
 8000266:	fbb1 f4f7 	udiv	r4, r1, r7
 800026a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026e:	fb07 1114 	mls	r1, r7, r4, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb04 f106 	mul.w	r1, r4, r6
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f104 30ff 	add.w	r0, r4, #4294967295
 8000286:	f080 8112 	bcs.w	80004ae <__udivmoddi4+0x27e>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 810f 	bls.w	80004ae <__udivmoddi4+0x27e>
 8000290:	3c02      	subs	r4, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a59      	subs	r1, r3, r1
 8000296:	fa1f f38e 	uxth.w	r3, lr
 800029a:	fbb1 f0f7 	udiv	r0, r1, r7
 800029e:	fb07 1110 	mls	r1, r7, r0, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb00 f606 	mul.w	r6, r0, r6
 80002aa:	429e      	cmp	r6, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x94>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b6:	f080 80fc 	bcs.w	80004b2 <__udivmoddi4+0x282>
 80002ba:	429e      	cmp	r6, r3
 80002bc:	f240 80f9 	bls.w	80004b2 <__udivmoddi4+0x282>
 80002c0:	4463      	add	r3, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	1b9b      	subs	r3, r3, r6
 80002c6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa6>
 80002ce:	40d3      	lsrs	r3, r2
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xba>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb4>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa6>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x150>
 80002f2:	42a3      	cmp	r3, r4
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xcc>
 80002f6:	4290      	cmp	r0, r2
 80002f8:	f0c0 80f0 	bcc.w	80004dc <__udivmoddi4+0x2ac>
 80002fc:	1a86      	subs	r6, r0, r2
 80002fe:	eb64 0303 	sbc.w	r3, r4, r3
 8000302:	2001      	movs	r0, #1
 8000304:	2d00      	cmp	r5, #0
 8000306:	d0e6      	beq.n	80002d6 <__udivmoddi4+0xa6>
 8000308:	e9c5 6300 	strd	r6, r3, [r5]
 800030c:	e7e3      	b.n	80002d6 <__udivmoddi4+0xa6>
 800030e:	2a00      	cmp	r2, #0
 8000310:	f040 8090 	bne.w	8000434 <__udivmoddi4+0x204>
 8000314:	eba1 040c 	sub.w	r4, r1, ip
 8000318:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800031c:	fa1f f78c 	uxth.w	r7, ip
 8000320:	2101      	movs	r1, #1
 8000322:	fbb4 f6f8 	udiv	r6, r4, r8
 8000326:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032a:	fb08 4416 	mls	r4, r8, r6, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb07 f006 	mul.w	r0, r7, r6
 8000336:	4298      	cmp	r0, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x11c>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x11a>
 8000344:	4298      	cmp	r0, r3
 8000346:	f200 80cd 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 800034a:	4626      	mov	r6, r4
 800034c:	1a1c      	subs	r4, r3, r0
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb4 f0f8 	udiv	r0, r4, r8
 8000356:	fb08 4410 	mls	r4, r8, r0, r4
 800035a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035e:	fb00 f707 	mul.w	r7, r0, r7
 8000362:	429f      	cmp	r7, r3
 8000364:	d908      	bls.n	8000378 <__udivmoddi4+0x148>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 34ff 	add.w	r4, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x146>
 8000370:	429f      	cmp	r7, r3
 8000372:	f200 80b0 	bhi.w	80004d6 <__udivmoddi4+0x2a6>
 8000376:	4620      	mov	r0, r4
 8000378:	1bdb      	subs	r3, r3, r7
 800037a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x9c>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000390:	fa04 f301 	lsl.w	r3, r4, r1
 8000394:	ea43 030c 	orr.w	r3, r3, ip
 8000398:	40f4      	lsrs	r4, r6
 800039a:	fa00 f801 	lsl.w	r8, r0, r1
 800039e:	0c38      	lsrs	r0, r7, #16
 80003a0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a4:	fbb4 fef0 	udiv	lr, r4, r0
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	fb00 441e 	mls	r4, r0, lr, r4
 80003b0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b4:	fb0e f90c 	mul.w	r9, lr, ip
 80003b8:	45a1      	cmp	r9, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d90a      	bls.n	80003d6 <__udivmoddi4+0x1a6>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c6:	f080 8084 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80003ca:	45a1      	cmp	r9, r4
 80003cc:	f240 8081 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80003d0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	eba4 0409 	sub.w	r4, r4, r9
 80003da:	fa1f f983 	uxth.w	r9, r3
 80003de:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e2:	fb00 4413 	mls	r4, r0, r3, r4
 80003e6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ea:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ee:	45a4      	cmp	ip, r4
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1d2>
 80003f2:	193c      	adds	r4, r7, r4
 80003f4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f8:	d267      	bcs.n	80004ca <__udivmoddi4+0x29a>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d965      	bls.n	80004ca <__udivmoddi4+0x29a>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000406:	fba0 9302 	umull	r9, r3, r0, r2
 800040a:	eba4 040c 	sub.w	r4, r4, ip
 800040e:	429c      	cmp	r4, r3
 8000410:	46ce      	mov	lr, r9
 8000412:	469c      	mov	ip, r3
 8000414:	d351      	bcc.n	80004ba <__udivmoddi4+0x28a>
 8000416:	d04e      	beq.n	80004b6 <__udivmoddi4+0x286>
 8000418:	b155      	cbz	r5, 8000430 <__udivmoddi4+0x200>
 800041a:	ebb8 030e 	subs.w	r3, r8, lr
 800041e:	eb64 040c 	sbc.w	r4, r4, ip
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	40cb      	lsrs	r3, r1
 8000428:	431e      	orrs	r6, r3
 800042a:	40cc      	lsrs	r4, r1
 800042c:	e9c5 6400 	strd	r6, r4, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e750      	b.n	80002d6 <__udivmoddi4+0xa6>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f103 	lsr.w	r1, r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa24 f303 	lsr.w	r3, r4, r3
 8000444:	4094      	lsls	r4, r2
 8000446:	430c      	orrs	r4, r1
 8000448:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800044c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000450:	fa1f f78c 	uxth.w	r7, ip
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3110 	mls	r1, r8, r0, r3
 800045c:	0c23      	lsrs	r3, r4, #16
 800045e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000462:	fb00 f107 	mul.w	r1, r0, r7
 8000466:	4299      	cmp	r1, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x24c>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000472:	d22c      	bcs.n	80004ce <__udivmoddi4+0x29e>
 8000474:	4299      	cmp	r1, r3
 8000476:	d92a      	bls.n	80004ce <__udivmoddi4+0x29e>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb3 f1f8 	udiv	r1, r3, r8
 8000484:	fb08 3311 	mls	r3, r8, r1, r3
 8000488:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800048c:	fb01 f307 	mul.w	r3, r1, r7
 8000490:	42a3      	cmp	r3, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x276>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f101 36ff 	add.w	r6, r1, #4294967295
 800049c:	d213      	bcs.n	80004c6 <__udivmoddi4+0x296>
 800049e:	42a3      	cmp	r3, r4
 80004a0:	d911      	bls.n	80004c6 <__udivmoddi4+0x296>
 80004a2:	3902      	subs	r1, #2
 80004a4:	4464      	add	r4, ip
 80004a6:	1ae4      	subs	r4, r4, r3
 80004a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ac:	e739      	b.n	8000322 <__udivmoddi4+0xf2>
 80004ae:	4604      	mov	r4, r0
 80004b0:	e6f0      	b.n	8000294 <__udivmoddi4+0x64>
 80004b2:	4608      	mov	r0, r1
 80004b4:	e706      	b.n	80002c4 <__udivmoddi4+0x94>
 80004b6:	45c8      	cmp	r8, r9
 80004b8:	d2ae      	bcs.n	8000418 <__udivmoddi4+0x1e8>
 80004ba:	ebb9 0e02 	subs.w	lr, r9, r2
 80004be:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c2:	3801      	subs	r0, #1
 80004c4:	e7a8      	b.n	8000418 <__udivmoddi4+0x1e8>
 80004c6:	4631      	mov	r1, r6
 80004c8:	e7ed      	b.n	80004a6 <__udivmoddi4+0x276>
 80004ca:	4603      	mov	r3, r0
 80004cc:	e799      	b.n	8000402 <__udivmoddi4+0x1d2>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e7d4      	b.n	800047c <__udivmoddi4+0x24c>
 80004d2:	46d6      	mov	lr, sl
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1a6>
 80004d6:	4463      	add	r3, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e74d      	b.n	8000378 <__udivmoddi4+0x148>
 80004dc:	4606      	mov	r6, r0
 80004de:	4623      	mov	r3, r4
 80004e0:	4608      	mov	r0, r1
 80004e2:	e70f      	b.n	8000304 <__udivmoddi4+0xd4>
 80004e4:	3e02      	subs	r6, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	e730      	b.n	800034c <__udivmoddi4+0x11c>
 80004ea:	bf00      	nop

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f001 fd5c 	bl	8001fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f88a 	bl	8000610 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004fc:	f000 f8ea 	bl	80006d4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 fc02 	bl	8000d08 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000504:	f000 f916 	bl	8000734 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000508:	f000 f978 	bl	80007fc <MX_DFSDM1_Init>
  MX_I2C1_Init();
 800050c:	f000 f9ae 	bl	800086c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000510:	f000 f9ec 	bl	80008ec <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000514:	f000 fa2a 	bl	800096c <MX_OCTOSPI1_Init>
  MX_SPI3_Init();
 8000518:	f000 fa7e 	bl	8000a18 <MX_SPI3_Init>
  MX_UART4_Init();
 800051c:	f000 faba 	bl	8000a94 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000520:	f000 fb04 	bl	8000b2c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000524:	f000 fb4e 	bl	8000bc4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000528:	f000 fb9a 	bl	8000c60 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 800052c:	f000 fbe4 	bl	8000cf8 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  BSP_TSENSOR_Init();
 8000530:	f001 fc60 	bl	8001df4 <BSP_TSENSOR_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000534:	f007 fe42 	bl	80081bc <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 0, &myBinarySem01_attributes);
 8000538:	4a22      	ldr	r2, [pc, #136]	@ (80005c4 <main+0xd4>)
 800053a:	2100      	movs	r1, #0
 800053c:	2001      	movs	r0, #1
 800053e:	f007 ff76 	bl	800842e <osSemaphoreNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a20      	ldr	r2, [pc, #128]	@ (80005c8 <main+0xd8>)
 8000546:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	osSemaphoreRelease(myBinarySem01Handle);
 8000548:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <main+0xd8>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4618      	mov	r0, r3
 800054e:	f008 f849 	bl	80085e4 <osSemaphoreRelease>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myDataQueue */
  myDataQueueHandle = osMessageQueueNew (2, sizeof(uint8_t), &myDataQueue_attributes);
 8000552:	4a1e      	ldr	r2, [pc, #120]	@ (80005cc <main+0xdc>)
 8000554:	2101      	movs	r1, #1
 8000556:	2002      	movs	r0, #2
 8000558:	f008 f888 	bl	800866c <osMessageQueueNew>
 800055c:	4603      	mov	r3, r0
 800055e:	4a1c      	ldr	r2, [pc, #112]	@ (80005d0 <main+0xe0>)
 8000560:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  myLedTaskHandle = osThreadNew(LED_flash_task_run, NULL, &myLedTask_attributes);
 8000562:	4a1c      	ldr	r2, [pc, #112]	@ (80005d4 <main+0xe4>)
 8000564:	2100      	movs	r1, #0
 8000566:	481c      	ldr	r0, [pc, #112]	@ (80005d8 <main+0xe8>)
 8000568:	f007 fe72 	bl	8008250 <osThreadNew>
 800056c:	4603      	mov	r3, r0
 800056e:	4a1b      	ldr	r2, [pc, #108]	@ (80005dc <main+0xec>)
 8000570:	6013      	str	r3, [r2, #0]

  myUART_RX_TaskHandle = osThreadNew(UART_RX_task_run, NULL, &myUART_RX_TaskHandle_attributes);
 8000572:	4a1b      	ldr	r2, [pc, #108]	@ (80005e0 <main+0xf0>)
 8000574:	2100      	movs	r1, #0
 8000576:	481b      	ldr	r0, [pc, #108]	@ (80005e4 <main+0xf4>)
 8000578:	f007 fe6a 	bl	8008250 <osThreadNew>
 800057c:	4603      	mov	r3, r0
 800057e:	4a1a      	ldr	r2, [pc, #104]	@ (80005e8 <main+0xf8>)
 8000580:	6013      	str	r3, [r2, #0]

  myUartSendTaskHandle = osThreadNew(UART_send_task_run, NULL, &myUartSendTask_attributes);
 8000582:	4a1a      	ldr	r2, [pc, #104]	@ (80005ec <main+0xfc>)
 8000584:	2100      	movs	r1, #0
 8000586:	481a      	ldr	r0, [pc, #104]	@ (80005f0 <main+0x100>)
 8000588:	f007 fe62 	bl	8008250 <osThreadNew>
 800058c:	4603      	mov	r3, r0
 800058e:	4a19      	ldr	r2, [pc, #100]	@ (80005f4 <main+0x104>)
 8000590:	6013      	str	r3, [r2, #0]

  myADC_Cmd_TaskHandle = osThreadNew(ADC_CMD_task_run, NULL, &myADC_Cmd__TaskHandle_attributes);
 8000592:	4a19      	ldr	r2, [pc, #100]	@ (80005f8 <main+0x108>)
 8000594:	2100      	movs	r1, #0
 8000596:	4819      	ldr	r0, [pc, #100]	@ (80005fc <main+0x10c>)
 8000598:	f007 fe5a 	bl	8008250 <osThreadNew>
 800059c:	4603      	mov	r3, r0
 800059e:	4a18      	ldr	r2, [pc, #96]	@ (8000600 <main+0x110>)
 80005a0:	6013      	str	r3, [r2, #0]
  myTempReadingTaskHandle = osThreadNew(TEMP_Read,NULL, &myTempReadingTaskHandle_attributes);
 80005a2:	4a18      	ldr	r2, [pc, #96]	@ (8000604 <main+0x114>)
 80005a4:	2100      	movs	r1, #0
 80005a6:	4818      	ldr	r0, [pc, #96]	@ (8000608 <main+0x118>)
 80005a8:	f007 fe52 	bl	8008250 <osThreadNew>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a17      	ldr	r2, [pc, #92]	@ (800060c <main+0x11c>)
 80005b0:	6013      	str	r3, [r2, #0]
  osThreadSuspend(myADC_Cmd_TaskHandle);
 80005b2:	4b13      	ldr	r3, [pc, #76]	@ (8000600 <main+0x110>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f007 fedc 	bl	8008374 <osThreadSuspend>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005bc:	f007 fe22 	bl	8008204 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <main+0xd0>
 80005c4:	0800c07c 	.word	0x0800c07c
 80005c8:	200004f0 	.word	0x200004f0
 80005cc:	0800c064 	.word	0x0800c064
 80005d0:	200004ec 	.word	0x200004ec
 80005d4:	0800bfd4 	.word	0x0800bfd4
 80005d8:	08000fb1 	.word	0x08000fb1
 80005dc:	200004dc 	.word	0x200004dc
 80005e0:	0800c01c 	.word	0x0800c01c
 80005e4:	080010a5 	.word	0x080010a5
 80005e8:	200004e4 	.word	0x200004e4
 80005ec:	0800bff8 	.word	0x0800bff8
 80005f0:	08001069 	.word	0x08001069
 80005f4:	200004e0 	.word	0x200004e0
 80005f8:	0800c040 	.word	0x0800c040
 80005fc:	080011a1 	.word	0x080011a1
 8000600:	200004e8 	.word	0x200004e8
 8000604:	0800c08c 	.word	0x0800c08c
 8000608:	08001141 	.word	0x08001141
 800060c:	200004f4 	.word	0x200004f4

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b096      	sub	sp, #88	@ 0x58
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2244      	movs	r2, #68	@ 0x44
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f00b fba2 	bl	800bd68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	463b      	mov	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000632:	2000      	movs	r0, #0
 8000634:	f004 fd92 	bl	800515c <HAL_PWREx_ControlVoltageScaling>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800063e:	f000 fdf7 	bl	8001230 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000642:	f004 fd5b 	bl	80050fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000646:	4b22      	ldr	r3, [pc, #136]	@ (80006d0 <SystemClock_Config+0xc0>)
 8000648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800064c:	4a20      	ldr	r2, [pc, #128]	@ (80006d0 <SystemClock_Config+0xc0>)
 800064e:	f023 0318 	bic.w	r3, r3, #24
 8000652:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000656:	2314      	movs	r3, #20
 8000658:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800065a:	2301      	movs	r3, #1
 800065c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800065e:	2301      	movs	r3, #1
 8000660:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000666:	2360      	movs	r3, #96	@ 0x60
 8000668:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800066e:	2301      	movs	r3, #1
 8000670:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000672:	2301      	movs	r3, #1
 8000674:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000676:	233c      	movs	r3, #60	@ 0x3c
 8000678:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4618      	mov	r0, r3
 800068c:	f004 fe0a 	bl	80052a4 <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000696:	f000 fdcb 	bl	8001230 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2303      	movs	r3, #3
 80006a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ae:	463b      	mov	r3, r7
 80006b0:	2105      	movs	r1, #5
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 fa10 	bl	8005ad8 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006be:	f000 fdb7 	bl	8001230 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006c2:	f006 f829 	bl	8006718 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006c6:	bf00      	nop
 80006c8:	3758      	adds	r7, #88	@ 0x58
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000

080006d4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b0a6      	sub	sp, #152	@ 0x98
 80006d8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2294      	movs	r2, #148	@ 0x94
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f00b fb41 	bl	800bd68 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80006e6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006ea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006ec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80006f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006f4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80006f8:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006fa:	2301      	movs	r3, #1
 80006fc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000702:	2318      	movs	r3, #24
 8000704:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000706:	2302      	movs	r3, #2
 8000708:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800070a:	2302      	movs	r3, #2
 800070c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000712:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 8000716:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	4618      	mov	r0, r3
 800071c:	f005 fccc 	bl	80060b8 <HAL_RCCEx_PeriphCLKConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000726:	f000 fd83 	bl	8001230 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3798      	adds	r7, #152	@ 0x98
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073a:	463b      	mov	r3, r7
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
 8000748:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800074a:	4b29      	ldr	r3, [pc, #164]	@ (80007f0 <MX_ADC1_Init+0xbc>)
 800074c:	4a29      	ldr	r2, [pc, #164]	@ (80007f4 <MX_ADC1_Init+0xc0>)
 800074e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <MX_ADC1_Init+0xbc>)
 8000752:	2200      	movs	r2, #0
 8000754:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000756:	4b26      	ldr	r3, [pc, #152]	@ (80007f0 <MX_ADC1_Init+0xbc>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800075c:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <MX_ADC1_Init+0xbc>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000762:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <MX_ADC1_Init+0xbc>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000768:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <MX_ADC1_Init+0xbc>)
 800076a:	2204      	movs	r2, #4
 800076c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800076e:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <MX_ADC1_Init+0xbc>)
 8000770:	2200      	movs	r2, #0
 8000772:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000774:	4b1e      	ldr	r3, [pc, #120]	@ (80007f0 <MX_ADC1_Init+0xbc>)
 8000776:	2200      	movs	r2, #0
 8000778:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800077a:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <MX_ADC1_Init+0xbc>)
 800077c:	2201      	movs	r2, #1
 800077e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000780:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <MX_ADC1_Init+0xbc>)
 8000782:	2200      	movs	r2, #0
 8000784:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000788:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <MX_ADC1_Init+0xbc>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800078e:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <MX_ADC1_Init+0xbc>)
 8000790:	2200      	movs	r2, #0
 8000792:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000794:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <MX_ADC1_Init+0xbc>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800079c:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <MX_ADC1_Init+0xbc>)
 800079e:	2200      	movs	r2, #0
 80007a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007a2:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <MX_ADC1_Init+0xbc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007aa:	4811      	ldr	r0, [pc, #68]	@ (80007f0 <MX_ADC1_Init+0xbc>)
 80007ac:	f001 fe12 	bl	80023d4 <HAL_ADC_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80007b6:	f000 fd3b 	bl	8001230 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <MX_ADC1_Init+0xc4>)
 80007bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007be:	2306      	movs	r3, #6
 80007c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007c6:	237f      	movs	r3, #127	@ 0x7f
 80007c8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007ca:	2304      	movs	r3, #4
 80007cc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d2:	463b      	mov	r3, r7
 80007d4:	4619      	mov	r1, r3
 80007d6:	4806      	ldr	r0, [pc, #24]	@ (80007f0 <MX_ADC1_Init+0xbc>)
 80007d8:	f002 f842 	bl	8002860 <HAL_ADC_ConfigChannel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80007e2:	f000 fd25 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000090 	.word	0x20000090
 80007f4:	50040000 	.word	0x50040000
 80007f8:	04300002 	.word	0x04300002

080007fc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000800:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <MX_DFSDM1_Init+0x68>)
 8000802:	4a19      	ldr	r2, [pc, #100]	@ (8000868 <MX_DFSDM1_Init+0x6c>)
 8000804:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000806:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <MX_DFSDM1_Init+0x68>)
 8000808:	2201      	movs	r2, #1
 800080a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800080c:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <MX_DFSDM1_Init+0x68>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000812:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <MX_DFSDM1_Init+0x68>)
 8000814:	2202      	movs	r2, #2
 8000816:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000818:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <MX_DFSDM1_Init+0x68>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800081e:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <MX_DFSDM1_Init+0x68>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000824:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <MX_DFSDM1_Init+0x68>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <MX_DFSDM1_Init+0x68>)
 800082c:	2200      	movs	r2, #0
 800082e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <MX_DFSDM1_Init+0x68>)
 8000832:	2204      	movs	r2, #4
 8000834:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000836:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <MX_DFSDM1_Init+0x68>)
 8000838:	2200      	movs	r2, #0
 800083a:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 800083c:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <MX_DFSDM1_Init+0x68>)
 800083e:	2201      	movs	r2, #1
 8000840:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000842:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <MX_DFSDM1_Init+0x68>)
 8000844:	2200      	movs	r2, #0
 8000846:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <MX_DFSDM1_Init+0x68>)
 800084a:	2200      	movs	r2, #0
 800084c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	@ (8000864 <MX_DFSDM1_Init+0x68>)
 8000850:	f002 fd6a 	bl	8003328 <HAL_DFSDM_ChannelInit>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 800085a:	f000 fce9 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000f8 	.word	0x200000f8
 8000868:	40016040 	.word	0x40016040

0800086c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000870:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <MX_I2C1_Init+0x74>)
 8000872:	4a1c      	ldr	r2, [pc, #112]	@ (80008e4 <MX_I2C1_Init+0x78>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000876:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <MX_I2C1_Init+0x74>)
 8000878:	4a1b      	ldr	r2, [pc, #108]	@ (80008e8 <MX_I2C1_Init+0x7c>)
 800087a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800087c:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000882:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <MX_I2C1_Init+0x74>)
 8000884:	2201      	movs	r2, #1
 8000886:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000888:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <MX_I2C1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800088e:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <MX_I2C1_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <MX_I2C1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089a:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <MX_I2C1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a6:	480e      	ldr	r0, [pc, #56]	@ (80008e0 <MX_I2C1_Init+0x74>)
 80008a8:	f003 f909 	bl	8003abe <HAL_I2C_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008b2:	f000 fcbd 	bl	8001230 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008b6:	2100      	movs	r1, #0
 80008b8:	4809      	ldr	r0, [pc, #36]	@ (80008e0 <MX_I2C1_Init+0x74>)
 80008ba:	f003 feb1 	bl	8004620 <HAL_I2CEx_ConfigAnalogFilter>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008c4:	f000 fcb4 	bl	8001230 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008c8:	2100      	movs	r1, #0
 80008ca:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <MX_I2C1_Init+0x74>)
 80008cc:	f003 fef3 	bl	80046b6 <HAL_I2CEx_ConfigDigitalFilter>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008d6:	f000 fcab 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000130 	.word	0x20000130
 80008e4:	40005400 	.word	0x40005400
 80008e8:	307075b1 	.word	0x307075b1

080008ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000960 <MX_I2C2_Init+0x74>)
 80008f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000964 <MX_I2C2_Init+0x78>)
 80008f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <MX_I2C2_Init+0x74>)
 80008f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000968 <MX_I2C2_Init+0x7c>)
 80008fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008fc:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <MX_I2C2_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000902:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <MX_I2C2_Init+0x74>)
 8000904:	2201      	movs	r2, #1
 8000906:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000908:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <MX_I2C2_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_I2C2_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <MX_I2C2_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_I2C2_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_I2C2_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000926:	480e      	ldr	r0, [pc, #56]	@ (8000960 <MX_I2C2_Init+0x74>)
 8000928:	f003 f8c9 	bl	8003abe <HAL_I2C_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000932:	f000 fc7d 	bl	8001230 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000936:	2100      	movs	r1, #0
 8000938:	4809      	ldr	r0, [pc, #36]	@ (8000960 <MX_I2C2_Init+0x74>)
 800093a:	f003 fe71 	bl	8004620 <HAL_I2CEx_ConfigAnalogFilter>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000944:	f000 fc74 	bl	8001230 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000948:	2100      	movs	r1, #0
 800094a:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_I2C2_Init+0x74>)
 800094c:	f003 feb3 	bl	80046b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000956:	f000 fc6b 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000184 	.word	0x20000184
 8000964:	40005800 	.word	0x40005800
 8000968:	307075b1 	.word	0x307075b1

0800096c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000980:	4b23      	ldr	r3, [pc, #140]	@ (8000a10 <MX_OCTOSPI1_Init+0xa4>)
 8000982:	4a24      	ldr	r2, [pc, #144]	@ (8000a14 <MX_OCTOSPI1_Init+0xa8>)
 8000984:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000986:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <MX_OCTOSPI1_Init+0xa4>)
 8000988:	2201      	movs	r2, #1
 800098a:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800098c:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <MX_OCTOSPI1_Init+0xa4>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000992:	4b1f      	ldr	r3, [pc, #124]	@ (8000a10 <MX_OCTOSPI1_Init+0xa4>)
 8000994:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000998:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 800099a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <MX_OCTOSPI1_Init+0xa4>)
 800099c:	2220      	movs	r2, #32
 800099e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <MX_OCTOSPI1_Init+0xa4>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <MX_OCTOSPI1_Init+0xa4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80009ac:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <MX_OCTOSPI1_Init+0xa4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 80009b2:	4b17      	ldr	r3, [pc, #92]	@ (8000a10 <MX_OCTOSPI1_Init+0xa4>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80009b8:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <MX_OCTOSPI1_Init+0xa4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80009be:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <MX_OCTOSPI1_Init+0xa4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <MX_OCTOSPI1_Init+0xa4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_OCTOSPI1_Init+0xa4>)
 80009cc:	2208      	movs	r2, #8
 80009ce:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80009d0:	480f      	ldr	r0, [pc, #60]	@ (8000a10 <MX_OCTOSPI1_Init+0xa4>)
 80009d2:	f003 febd 	bl	8004750 <HAL_OSPI_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 80009dc:	f000 fc28 	bl	8001230 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 80009e0:	2301      	movs	r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 80009e4:	2301      	movs	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80009e8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80009ec:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80009f4:	4619      	mov	r1, r3
 80009f6:	4806      	ldr	r0, [pc, #24]	@ (8000a10 <MX_OCTOSPI1_Init+0xa4>)
 80009f8:	f003 ff64 	bl	80048c4 <HAL_OSPIM_Config>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000a02:	f000 fc15 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200001d8 	.word	0x200001d8
 8000a14:	a0001000 	.word	0xa0001000

08000a18 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a8c <MX_SPI3_Init+0x74>)
 8000a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a90 <MX_SPI3_Init+0x78>)
 8000a20:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a22:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <MX_SPI3_Init+0x74>)
 8000a24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a28:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a2a:	4b18      	ldr	r3, [pc, #96]	@ (8000a8c <MX_SPI3_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a30:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <MX_SPI3_Init+0x74>)
 8000a32:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000a36:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a38:	4b14      	ldr	r3, [pc, #80]	@ (8000a8c <MX_SPI3_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	@ (8000a8c <MX_SPI3_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a44:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <MX_SPI3_Init+0x74>)
 8000a46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a4a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <MX_SPI3_Init+0x74>)
 8000a4e:	2208      	movs	r2, #8
 8000a50:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <MX_SPI3_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <MX_SPI3_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <MX_SPI3_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a64:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <MX_SPI3_Init+0x74>)
 8000a66:	2207      	movs	r2, #7
 8000a68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <MX_SPI3_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <MX_SPI3_Init+0x74>)
 8000a72:	2208      	movs	r2, #8
 8000a74:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <MX_SPI3_Init+0x74>)
 8000a78:	f006 f846 	bl	8006b08 <HAL_SPI_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a82:	f000 fbd5 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000228 	.word	0x20000228
 8000a90:	40003c00 	.word	0x40003c00

08000a94 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a98:	4b22      	ldr	r3, [pc, #136]	@ (8000b24 <MX_UART4_Init+0x90>)
 8000a9a:	4a23      	ldr	r2, [pc, #140]	@ (8000b28 <MX_UART4_Init+0x94>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a9e:	4b21      	ldr	r3, [pc, #132]	@ (8000b24 <MX_UART4_Init+0x90>)
 8000aa0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aa4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b24 <MX_UART4_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b1d      	ldr	r3, [pc, #116]	@ (8000b24 <MX_UART4_Init+0x90>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b24 <MX_UART4_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b24 <MX_UART4_Init+0x90>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <MX_UART4_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b17      	ldr	r3, [pc, #92]	@ (8000b24 <MX_UART4_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aca:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <MX_UART4_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <MX_UART4_Init+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <MX_UART4_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000adc:	4811      	ldr	r0, [pc, #68]	@ (8000b24 <MX_UART4_Init+0x90>)
 8000ade:	f006 fb69 	bl	80071b4 <HAL_UART_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000ae8:	f000 fba2 	bl	8001230 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aec:	2100      	movs	r1, #0
 8000aee:	480d      	ldr	r0, [pc, #52]	@ (8000b24 <MX_UART4_Init+0x90>)
 8000af0:	f007 fa56 	bl	8007fa0 <HAL_UARTEx_SetTxFifoThreshold>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000afa:	f000 fb99 	bl	8001230 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afe:	2100      	movs	r1, #0
 8000b00:	4808      	ldr	r0, [pc, #32]	@ (8000b24 <MX_UART4_Init+0x90>)
 8000b02:	f007 fa8b 	bl	800801c <HAL_UARTEx_SetRxFifoThreshold>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000b0c:	f000 fb90 	bl	8001230 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000b10:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <MX_UART4_Init+0x90>)
 8000b12:	f007 fa0c 	bl	8007f2e <HAL_UARTEx_DisableFifoMode>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000b1c:	f000 fb88 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2000028c 	.word	0x2000028c
 8000b28:	40004c00 	.word	0x40004c00

08000b2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b30:	4b22      	ldr	r3, [pc, #136]	@ (8000bbc <MX_USART1_UART_Init+0x90>)
 8000b32:	4a23      	ldr	r2, [pc, #140]	@ (8000bc0 <MX_USART1_UART_Init+0x94>)
 8000b34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b36:	4b21      	ldr	r3, [pc, #132]	@ (8000bbc <MX_USART1_UART_Init+0x90>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bbc <MX_USART1_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b1d      	ldr	r3, [pc, #116]	@ (8000bbc <MX_USART1_UART_Init+0x90>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bbc <MX_USART1_UART_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b1a      	ldr	r3, [pc, #104]	@ (8000bbc <MX_USART1_UART_Init+0x90>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b19      	ldr	r3, [pc, #100]	@ (8000bbc <MX_USART1_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <MX_USART1_UART_Init+0x90>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b62:	4b16      	ldr	r3, [pc, #88]	@ (8000bbc <MX_USART1_UART_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b68:	4b14      	ldr	r3, [pc, #80]	@ (8000bbc <MX_USART1_UART_Init+0x90>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	@ (8000bbc <MX_USART1_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b74:	4811      	ldr	r0, [pc, #68]	@ (8000bbc <MX_USART1_UART_Init+0x90>)
 8000b76:	f006 fb1d 	bl	80071b4 <HAL_UART_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b80:	f000 fb56 	bl	8001230 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b84:	2100      	movs	r1, #0
 8000b86:	480d      	ldr	r0, [pc, #52]	@ (8000bbc <MX_USART1_UART_Init+0x90>)
 8000b88:	f007 fa0a 	bl	8007fa0 <HAL_UARTEx_SetTxFifoThreshold>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b92:	f000 fb4d 	bl	8001230 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b96:	2100      	movs	r1, #0
 8000b98:	4808      	ldr	r0, [pc, #32]	@ (8000bbc <MX_USART1_UART_Init+0x90>)
 8000b9a:	f007 fa3f 	bl	800801c <HAL_UARTEx_SetRxFifoThreshold>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ba4:	f000 fb44 	bl	8001230 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ba8:	4804      	ldr	r0, [pc, #16]	@ (8000bbc <MX_USART1_UART_Init+0x90>)
 8000baa:	f007 f9c0 	bl	8007f2e <HAL_UARTEx_DisableFifoMode>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bb4:	f000 fb3c 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000320 	.word	0x20000320
 8000bc0:	40013800 	.word	0x40013800

08000bc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bc8:	4b23      	ldr	r3, [pc, #140]	@ (8000c58 <MX_USART2_UART_Init+0x94>)
 8000bca:	4a24      	ldr	r2, [pc, #144]	@ (8000c5c <MX_USART2_UART_Init+0x98>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bce:	4b22      	ldr	r3, [pc, #136]	@ (8000c58 <MX_USART2_UART_Init+0x94>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b20      	ldr	r3, [pc, #128]	@ (8000c58 <MX_USART2_UART_Init+0x94>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c58 <MX_USART2_UART_Init+0x94>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c58 <MX_USART2_UART_Init+0x94>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c58 <MX_USART2_UART_Init+0x94>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000bee:	4b1a      	ldr	r3, [pc, #104]	@ (8000c58 <MX_USART2_UART_Init+0x94>)
 8000bf0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000bf4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf6:	4b18      	ldr	r3, [pc, #96]	@ (8000c58 <MX_USART2_UART_Init+0x94>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfc:	4b16      	ldr	r3, [pc, #88]	@ (8000c58 <MX_USART2_UART_Init+0x94>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <MX_USART2_UART_Init+0x94>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c08:	4b13      	ldr	r3, [pc, #76]	@ (8000c58 <MX_USART2_UART_Init+0x94>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c0e:	4812      	ldr	r0, [pc, #72]	@ (8000c58 <MX_USART2_UART_Init+0x94>)
 8000c10:	f006 fad0 	bl	80071b4 <HAL_UART_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000c1a:	f000 fb09 	bl	8001230 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	480d      	ldr	r0, [pc, #52]	@ (8000c58 <MX_USART2_UART_Init+0x94>)
 8000c22:	f007 f9bd 	bl	8007fa0 <HAL_UARTEx_SetTxFifoThreshold>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000c2c:	f000 fb00 	bl	8001230 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c30:	2100      	movs	r1, #0
 8000c32:	4809      	ldr	r0, [pc, #36]	@ (8000c58 <MX_USART2_UART_Init+0x94>)
 8000c34:	f007 f9f2 	bl	800801c <HAL_UARTEx_SetRxFifoThreshold>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000c3e:	f000 faf7 	bl	8001230 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	@ (8000c58 <MX_USART2_UART_Init+0x94>)
 8000c44:	f007 f973 	bl	8007f2e <HAL_UARTEx_DisableFifoMode>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000c4e:	f000 faef 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200003b4 	.word	0x200003b4
 8000c5c:	40004400 	.word	0x40004400

08000c60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c64:	4b22      	ldr	r3, [pc, #136]	@ (8000cf0 <MX_USART3_UART_Init+0x90>)
 8000c66:	4a23      	ldr	r2, [pc, #140]	@ (8000cf4 <MX_USART3_UART_Init+0x94>)
 8000c68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c6a:	4b21      	ldr	r3, [pc, #132]	@ (8000cf0 <MX_USART3_UART_Init+0x90>)
 8000c6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c72:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf0 <MX_USART3_UART_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c78:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf0 <MX_USART3_UART_Init+0x90>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf0 <MX_USART3_UART_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c84:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <MX_USART3_UART_Init+0x90>)
 8000c86:	220c      	movs	r2, #12
 8000c88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8a:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <MX_USART3_UART_Init+0x90>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c90:	4b17      	ldr	r3, [pc, #92]	@ (8000cf0 <MX_USART3_UART_Init+0x90>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c96:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <MX_USART3_UART_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	@ (8000cf0 <MX_USART3_UART_Init+0x90>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <MX_USART3_UART_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ca8:	4811      	ldr	r0, [pc, #68]	@ (8000cf0 <MX_USART3_UART_Init+0x90>)
 8000caa:	f006 fa83 	bl	80071b4 <HAL_UART_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cb4:	f000 fabc 	bl	8001230 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb8:	2100      	movs	r1, #0
 8000cba:	480d      	ldr	r0, [pc, #52]	@ (8000cf0 <MX_USART3_UART_Init+0x90>)
 8000cbc:	f007 f970 	bl	8007fa0 <HAL_UARTEx_SetTxFifoThreshold>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cc6:	f000 fab3 	bl	8001230 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4808      	ldr	r0, [pc, #32]	@ (8000cf0 <MX_USART3_UART_Init+0x90>)
 8000cce:	f007 f9a5 	bl	800801c <HAL_UARTEx_SetRxFifoThreshold>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cd8:	f000 faaa 	bl	8001230 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cdc:	4804      	ldr	r0, [pc, #16]	@ (8000cf0 <MX_USART3_UART_Init+0x90>)
 8000cde:	f007 f926 	bl	8007f2e <HAL_UARTEx_DisableFifoMode>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ce8:	f000 faa2 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000448 	.word	0x20000448
 8000cf4:	40004800 	.word	0x40004800

08000cf8 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08c      	sub	sp, #48	@ 0x30
 8000d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d1e:	4b9f      	ldr	r3, [pc, #636]	@ (8000f9c <MX_GPIO_Init+0x294>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d22:	4a9e      	ldr	r2, [pc, #632]	@ (8000f9c <MX_GPIO_Init+0x294>)
 8000d24:	f043 0310 	orr.w	r3, r3, #16
 8000d28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d2a:	4b9c      	ldr	r3, [pc, #624]	@ (8000f9c <MX_GPIO_Init+0x294>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2e:	f003 0310 	and.w	r3, r3, #16
 8000d32:	61bb      	str	r3, [r7, #24]
 8000d34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d36:	4b99      	ldr	r3, [pc, #612]	@ (8000f9c <MX_GPIO_Init+0x294>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3a:	4a98      	ldr	r2, [pc, #608]	@ (8000f9c <MX_GPIO_Init+0x294>)
 8000d3c:	f043 0304 	orr.w	r3, r3, #4
 8000d40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d42:	4b96      	ldr	r3, [pc, #600]	@ (8000f9c <MX_GPIO_Init+0x294>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d4e:	4b93      	ldr	r3, [pc, #588]	@ (8000f9c <MX_GPIO_Init+0x294>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d52:	4a92      	ldr	r2, [pc, #584]	@ (8000f9c <MX_GPIO_Init+0x294>)
 8000d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d5a:	4b90      	ldr	r3, [pc, #576]	@ (8000f9c <MX_GPIO_Init+0x294>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	4b8d      	ldr	r3, [pc, #564]	@ (8000f9c <MX_GPIO_Init+0x294>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6a:	4a8c      	ldr	r2, [pc, #560]	@ (8000f9c <MX_GPIO_Init+0x294>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d72:	4b8a      	ldr	r3, [pc, #552]	@ (8000f9c <MX_GPIO_Init+0x294>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	4b87      	ldr	r3, [pc, #540]	@ (8000f9c <MX_GPIO_Init+0x294>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d82:	4a86      	ldr	r2, [pc, #536]	@ (8000f9c <MX_GPIO_Init+0x294>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8a:	4b84      	ldr	r3, [pc, #528]	@ (8000f9c <MX_GPIO_Init+0x294>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d96:	4b81      	ldr	r3, [pc, #516]	@ (8000f9c <MX_GPIO_Init+0x294>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	4a80      	ldr	r2, [pc, #512]	@ (8000f9c <MX_GPIO_Init+0x294>)
 8000d9c:	f043 0308 	orr.w	r3, r3, #8
 8000da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da2:	4b7e      	ldr	r3, [pc, #504]	@ (8000f9c <MX_GPIO_Init+0x294>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da6:	f003 0308 	and.w	r3, r3, #8
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f240 1105 	movw	r1, #261	@ 0x105
 8000db4:	487a      	ldr	r0, [pc, #488]	@ (8000fa0 <MX_GPIO_Init+0x298>)
 8000db6:	f002 fe47 	bl	8003a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|GPIO_PIN_5
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f248 113c 	movw	r1, #33084	@ 0x813c
 8000dc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc4:	f002 fe40 	bl	8003a48 <HAL_GPIO_WritePin>
                          |SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f24f 0134 	movw	r1, #61492	@ 0xf034
 8000dce:	4875      	ldr	r0, [pc, #468]	@ (8000fa4 <MX_GPIO_Init+0x29c>)
 8000dd0:	f002 fe3a 	bl	8003a48 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f242 0183 	movw	r1, #8323	@ 0x2083
 8000dda:	4873      	ldr	r0, [pc, #460]	@ (8000fa8 <MX_GPIO_Init+0x2a0>)
 8000ddc:	f002 fe34 	bl	8003a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000de6:	4871      	ldr	r0, [pc, #452]	@ (8000fac <MX_GPIO_Init+0x2a4>)
 8000de8:	f002 fe2e 	bl	8003a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000dec:	f240 1305 	movw	r3, #261	@ 0x105
 8000df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	4619      	mov	r1, r3
 8000e04:	4866      	ldr	r0, [pc, #408]	@ (8000fa0 <MX_GPIO_Init+0x298>)
 8000e06:	f002 fb9b 	bl	8003540 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8000e0a:	237a      	movs	r3, #122	@ 0x7a
 8000e0c:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e0e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4860      	ldr	r0, [pc, #384]	@ (8000fa0 <MX_GPIO_Init+0x298>)
 8000e20:	f002 fb8e 	bl	8003540 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000e24:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 8000e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e2a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	4619      	mov	r1, r3
 8000e3a:	485c      	ldr	r0, [pc, #368]	@ (8000fac <MX_GPIO_Init+0x2a4>)
 8000e3c:	f002 fb80 	bl	8003540 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin PA5
                           SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|GPIO_PIN_5
 8000e40:	f248 133c 	movw	r3, #33084	@ 0x813c
 8000e44:	61fb      	str	r3, [r7, #28]
                          |SPBTLE_RF_RST_Pin|ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	4619      	mov	r1, r3
 8000e58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5c:	f002 fb70 	bl	8003540 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000e60:	23c0      	movs	r3, #192	@ 0xc0
 8000e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e70:	2305      	movs	r3, #5
 8000e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e7e:	f002 fb5f 	bl	8003540 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000e82:	2301      	movs	r3, #1
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e86:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	4843      	ldr	r0, [pc, #268]	@ (8000fa4 <MX_GPIO_Init+0x29c>)
 8000e98:	f002 fb52 	bl	8003540 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000eac:	2302      	movs	r3, #2
 8000eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f107 031c 	add.w	r3, r7, #28
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	483b      	ldr	r0, [pc, #236]	@ (8000fa4 <MX_GPIO_Init+0x29c>)
 8000eb8:	f002 fb42 	bl	8003540 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ebc:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000ec0:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4833      	ldr	r0, [pc, #204]	@ (8000fa4 <MX_GPIO_Init+0x29c>)
 8000ed6:	f002 fb33 	bl	8003540 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8000eda:	f64d 4304 	movw	r3, #56324	@ 0xdc04
 8000ede:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ee0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	482d      	ldr	r0, [pc, #180]	@ (8000fa8 <MX_GPIO_Init+0x2a0>)
 8000ef2:	f002 fb25 	bl	8003540 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000ef6:	f242 0383 	movw	r3, #8323	@ 0x2083
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4826      	ldr	r0, [pc, #152]	@ (8000fa8 <MX_GPIO_Init+0x2a0>)
 8000f10:	f002 fb16 	bl	8003540 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000f14:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	481f      	ldr	r0, [pc, #124]	@ (8000fac <MX_GPIO_Init+0x2a4>)
 8000f2e:	f002 fb07 	bl	8003540 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000f32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4619      	mov	r1, r3
 8000f46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f4a:	f002 faf9 	bl	8003540 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000f4e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f60:	230a      	movs	r3, #10
 8000f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6e:	f002 fae7 	bl	8003540 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2105      	movs	r1, #5
 8000f76:	2017      	movs	r0, #23
 8000f78:	f002 f9ac 	bl	80032d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f7c:	2017      	movs	r0, #23
 8000f7e:	f002 f9c5 	bl	800330c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2105      	movs	r1, #5
 8000f86:	2028      	movs	r0, #40	@ 0x28
 8000f88:	f002 f9a4 	bl	80032d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f8c:	2028      	movs	r0, #40	@ 0x28
 8000f8e:	f002 f9bd 	bl	800330c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f92:	bf00      	nop
 8000f94:	3730      	adds	r7, #48	@ 0x30
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	48001000 	.word	0x48001000
 8000fa4:	48000400 	.word	0x48000400
 8000fa8:	48000c00 	.word	0x48000c00
 8000fac:	48000800 	.word	0x48000800

08000fb0 <LED_flash_task_run>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMyLedTask */
void LED_flash_task_run(void *argument)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2120      	movs	r1, #32
 8000fbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc0:	f002 fd42 	bl	8003a48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fca:	4821      	ldr	r0, [pc, #132]	@ (8001050 <LED_flash_task_run+0xa0>)
 8000fcc:	f002 fd3c 	bl	8003a48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fd6:	481f      	ldr	r0, [pc, #124]	@ (8001054 <LED_flash_task_run+0xa4>)
 8000fd8:	f002 fd36 	bl	8003a48 <HAL_GPIO_WritePin>
  static GPIO_PinState led_1_2_state = GPIO_PIN_RESET;
  for(;;)
  {

  if(led_1_2_state == GPIO_PIN_SET)
 8000fdc:	4b1e      	ldr	r3, [pc, #120]	@ (8001058 <LED_flash_task_run+0xa8>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d103      	bne.n	8000fec <LED_flash_task_run+0x3c>
	  led_1_2_state = GPIO_PIN_RESET;
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8001058 <LED_flash_task_run+0xa8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
 8000fea:	e002      	b.n	8000ff2 <LED_flash_task_run+0x42>
  else led_1_2_state = GPIO_PIN_SET;
 8000fec:	4b1a      	ldr	r3, [pc, #104]	@ (8001058 <LED_flash_task_run+0xa8>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]

	osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800105c <LED_flash_task_run+0xac>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f007 faa0 	bl	8008540 <osSemaphoreAcquire>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, led_1_2_state); // Toggle
 8001000:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <LED_flash_task_run+0xa8>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	2120      	movs	r1, #32
 8001008:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100c:	f002 fd1c 	bl	8003a48 <HAL_GPIO_WritePin>
	if(acquisition_activated == 0)
 8001010:	4b13      	ldr	r3, [pc, #76]	@ (8001060 <LED_flash_task_run+0xb0>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d107      	bne.n	8001028 <LED_flash_task_run+0x78>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, led_1_2_state); // Toggle LED 2
 8001018:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <LED_flash_task_run+0xa8>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001022:	480c      	ldr	r0, [pc, #48]	@ (8001054 <LED_flash_task_run+0xa4>)
 8001024:	f002 fd10 	bl	8003a48 <HAL_GPIO_WritePin>

	if(queue_overflow_detected == 0)
 8001028:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <LED_flash_task_run+0xb4>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d105      	bne.n	800103c <LED_flash_task_run+0x8c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001036:	4806      	ldr	r0, [pc, #24]	@ (8001050 <LED_flash_task_run+0xa0>)
 8001038:	f002 fd06 	bl	8003a48 <HAL_GPIO_WritePin>

	osSemaphoreRelease(myBinarySem01Handle);
 800103c:	4b07      	ldr	r3, [pc, #28]	@ (800105c <LED_flash_task_run+0xac>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f007 facf 	bl	80085e4 <osSemaphoreRelease>

	osDelay(100);  //100ms delay
 8001046:	2064      	movs	r0, #100	@ 0x64
 8001048:	f007 f9d6 	bl	80083f8 <osDelay>
  if(led_1_2_state == GPIO_PIN_SET)
 800104c:	e7c6      	b.n	8000fdc <LED_flash_task_run+0x2c>
 800104e:	bf00      	nop
 8001050:	48000800 	.word	0x48000800
 8001054:	48000400 	.word	0x48000400
 8001058:	200004fc 	.word	0x200004fc
 800105c:	200004f0 	.word	0x200004f0
 8001060:	20000000 	.word	0x20000000
 8001064:	20000001 	.word	0x20000001

08001068 <UART_send_task_run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMyUartTask */
void UART_send_task_run(void *argument)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMyUartTask */
  /* Infinite loop */
  for(;;)
  {
	uint8_t dataOut;
	osStatus_t result = osMessageQueueGet(myDataQueueHandle, &dataOut, NULL, osWaitForever);
 8001070:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <UART_send_task_run+0x34>)
 8001072:	6818      	ldr	r0, [r3, #0]
 8001074:	f107 010b 	add.w	r1, r7, #11
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
 800107c:	2200      	movs	r2, #0
 800107e:	f007 fbc9 	bl	8008814 <osMessageQueueGet>
 8001082:	60f8      	str	r0, [r7, #12]
	if(result == osOK)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f2      	bne.n	8001070 <UART_send_task_run+0x8>
	{
		HAL_UART_Transmit (&huart1, (uint8_t *) &dataOut, sizeof(dataOut), 10);
 800108a:	f107 010b 	add.w	r1, r7, #11
 800108e:	230a      	movs	r3, #10
 8001090:	2201      	movs	r2, #1
 8001092:	4803      	ldr	r0, [pc, #12]	@ (80010a0 <UART_send_task_run+0x38>)
 8001094:	f006 f8de 	bl	8007254 <HAL_UART_Transmit>
  {
 8001098:	e7ea      	b.n	8001070 <UART_send_task_run+0x8>
 800109a:	bf00      	nop
 800109c:	200004ec 	.word	0x200004ec
 80010a0:	20000320 	.word	0x20000320

080010a4 <UART_RX_task_run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMyCounterTask */
void UART_RX_task_run(void *argument)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMyCounterTask */
  /* Infinite loop */
  for(;;)
  {
	uint8_t received_data;
	HAL_UART_Receive(&huart1, &received_data, 1, 10);
 80010ac:	f107 010f 	add.w	r1, r7, #15
 80010b0:	230a      	movs	r3, #10
 80010b2:	2201      	movs	r2, #1
 80010b4:	481d      	ldr	r0, [pc, #116]	@ (800112c <UART_RX_task_run+0x88>)
 80010b6:	f006 f95b 	bl	8007370 <HAL_UART_Receive>
	if(received_data == 's')
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	2b73      	cmp	r3, #115	@ 0x73
 80010be:	d113      	bne.n	80010e8 <UART_RX_task_run+0x44>
	{
		osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 80010c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <UART_RX_task_run+0x8c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f04f 31ff 	mov.w	r1, #4294967295
 80010c8:	4618      	mov	r0, r3
 80010ca:	f007 fa39 	bl	8008540 <osSemaphoreAcquire>
		acquisition_activated = 0;
 80010ce:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <UART_RX_task_run+0x90>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
		osSemaphoreRelease(myBinarySem01Handle);
 80010d4:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <UART_RX_task_run+0x8c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f007 fa83 	bl	80085e4 <osSemaphoreRelease>
		osThreadResume(myADC_Cmd_TaskHandle);
 80010de:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <UART_RX_task_run+0x94>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f007 f967 	bl	80083b6 <osThreadResume>
	}
	if(received_data == 'x')
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	2b78      	cmp	r3, #120	@ 0x78
 80010ec:	d119      	bne.n	8001122 <UART_RX_task_run+0x7e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010f4:	4811      	ldr	r0, [pc, #68]	@ (800113c <UART_RX_task_run+0x98>)
 80010f6:	f002 fca7 	bl	8003a48 <HAL_GPIO_WritePin>
		osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 80010fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <UART_RX_task_run+0x8c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f04f 31ff 	mov.w	r1, #4294967295
 8001102:	4618      	mov	r0, r3
 8001104:	f007 fa1c 	bl	8008540 <osSemaphoreAcquire>
		acquisition_activated = 1;
 8001108:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <UART_RX_task_run+0x90>)
 800110a:	2201      	movs	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
		osSemaphoreRelease(myBinarySem01Handle);
 800110e:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <UART_RX_task_run+0x8c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f007 fa66 	bl	80085e4 <osSemaphoreRelease>
		osThreadSuspend(myADC_Cmd_TaskHandle);
 8001118:	4b07      	ldr	r3, [pc, #28]	@ (8001138 <UART_RX_task_run+0x94>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f007 f929 	bl	8008374 <osThreadSuspend>
	}
	osDelay(200);
 8001122:	20c8      	movs	r0, #200	@ 0xc8
 8001124:	f007 f968 	bl	80083f8 <osDelay>
  {
 8001128:	e7c0      	b.n	80010ac <UART_RX_task_run+0x8>
 800112a:	bf00      	nop
 800112c:	20000320 	.word	0x20000320
 8001130:	200004f0 	.word	0x200004f0
 8001134:	20000000 	.word	0x20000000
 8001138:	200004e8 	.word	0x200004e8
 800113c:	48000400 	.word	0x48000400

08001140 <TEMP_Read>:
  /* USER CODE END StartMyCounterTask */
}


void TEMP_Read(void *argument)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	for(;;){
		temp_value = BSP_TSENSOR_ReadTemp();
 8001148:	f000 fe70 	bl	8001e2c <BSP_TSENSOR_ReadTemp>
 800114c:	eef0 7a40 	vmov.f32	s15, s0
 8001150:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <TEMP_Read+0x58>)
 8001152:	edc3 7a00 	vstr	s15, [r3]
		uint8_t encoded_temp = (uint8_t) (temp_value/2);
 8001156:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <TEMP_Read+0x58>)
 8001158:	ed93 7a00 	vldr	s14, [r3]
 800115c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001160:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001168:	edc7 7a00 	vstr	s15, [r7]
 800116c:	783b      	ldrb	r3, [r7, #0]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	73fb      	strb	r3, [r7, #15]
		encoded_temp |= TEMPERATURE_CHANNEL_MASK;
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	b2db      	uxtb	r3, r3
 800117a:	73fb      	strb	r3, [r7, #15]
		osMessageQueuePut(myDataQueueHandle, &encoded_temp, 1, 10);
 800117c:	4b07      	ldr	r3, [pc, #28]	@ (800119c <TEMP_Read+0x5c>)
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	f107 010f 	add.w	r1, r7, #15
 8001184:	230a      	movs	r3, #10
 8001186:	2201      	movs	r2, #1
 8001188:	f007 fae4 	bl	8008754 <osMessageQueuePut>
		osDelay(500);
 800118c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001190:	f007 f932 	bl	80083f8 <osDelay>
	for(;;){
 8001194:	bf00      	nop
 8001196:	e7d7      	b.n	8001148 <TEMP_Read+0x8>
 8001198:	200004f8 	.word	0x200004f8
 800119c:	200004ec 	.word	0x200004ec

080011a0 <ADC_CMD_task_run>:
	}
}

#define SOUND_CHANNEL_MASK  0xFE  // 1111 1110
void ADC_CMD_task_run(void *argument)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  for(;;)
  {
      HAL_ADC_Start(&hadc1);
 80011a8:	4816      	ldr	r0, [pc, #88]	@ (8001204 <ADC_CMD_task_run+0x64>)
 80011aa:	f001 fa59 	bl	8002660 <HAL_ADC_Start>

      // Wait for conversion to complete (blocking)
      if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80011ae:	f04f 31ff 	mov.w	r1, #4294967295
 80011b2:	4814      	ldr	r0, [pc, #80]	@ (8001204 <ADC_CMD_task_run+0x64>)
 80011b4:	f001 fab7 	bl	8002726 <HAL_ADC_PollForConversion>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d11d      	bne.n	80011fa <ADC_CMD_task_run+0x5a>
          // Read ADC value
          uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 80011be:	4811      	ldr	r0, [pc, #68]	@ (8001204 <ADC_CMD_task_run+0x64>)
 80011c0:	f001 fb40 	bl	8002844 <HAL_ADC_GetValue>
 80011c4:	6178      	str	r0, [r7, #20]
          uint8_t encoded_sound = (uint8_t) (adc_value/2);
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	085b      	lsrs	r3, r3, #1
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	73fb      	strb	r3, [r7, #15]
          encoded_sound &= SOUND_CHANNEL_MASK;
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	f023 0301 	bic.w	r3, r3, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	73fb      	strb	r3, [r7, #15]
          if(osMessageQueueGetSpace(myDataQueueHandle) == 0)
 80011d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001208 <ADC_CMD_task_run+0x68>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f007 fb77 	bl	80088d0 <osMessageQueueGetSpace>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d008      	beq.n	80011fa <ADC_CMD_task_run+0x5a>
          {
        	  //TODO enable AlarmMsgQ
          }
          else
          {
        	 osStatus_t result = osMessageQueuePut(myDataQueueHandle, &encoded_sound, 1, 10);
 80011e8:	4b07      	ldr	r3, [pc, #28]	@ (8001208 <ADC_CMD_task_run+0x68>)
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	f107 010f 	add.w	r1, r7, #15
 80011f0:	230a      	movs	r3, #10
 80011f2:	2201      	movs	r2, #1
 80011f4:	f007 faae 	bl	8008754 <osMessageQueuePut>
 80011f8:	6138      	str	r0, [r7, #16]
        	 {
           	  //TODO enable AlarmMsgQ
        	 }
          }
      }
	osDelay(2);
 80011fa:	2002      	movs	r0, #2
 80011fc:	f007 f8fc 	bl	80083f8 <osDelay>
      HAL_ADC_Start(&hadc1);
 8001200:	e7d2      	b.n	80011a8 <ADC_CMD_task_run+0x8>
 8001202:	bf00      	nop
 8001204:	20000090 	.word	0x20000090
 8001208:	200004ec 	.word	0x200004ec

0800120c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a04      	ldr	r2, [pc, #16]	@ (800122c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d101      	bne.n	8001222 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800121e:	f000 fedf 	bl	8001fe0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40001000 	.word	0x40001000

08001230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001234:	b672      	cpsid	i
}
 8001236:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <Error_Handler+0x8>

0800123c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <HAL_MspInit+0x4c>)
 8001244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001246:	4a10      	ldr	r2, [pc, #64]	@ (8001288 <HAL_MspInit+0x4c>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6613      	str	r3, [r2, #96]	@ 0x60
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <HAL_MspInit+0x4c>)
 8001250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <HAL_MspInit+0x4c>)
 800125c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125e:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <HAL_MspInit+0x4c>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001264:	6593      	str	r3, [r2, #88]	@ 0x58
 8001266:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <HAL_MspInit+0x4c>)
 8001268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	210f      	movs	r1, #15
 8001276:	f06f 0001 	mvn.w	r0, #1
 800127a:	f002 f82b 	bl	80032d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000

0800128c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	@ 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a15      	ldr	r2, [pc, #84]	@ (8001300 <HAL_ADC_MspInit+0x74>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d123      	bne.n	80012f6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80012ae:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <HAL_ADC_MspInit+0x78>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	4a14      	ldr	r2, [pc, #80]	@ (8001304 <HAL_ADC_MspInit+0x78>)
 80012b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ba:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <HAL_ADC_MspInit+0x78>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <HAL_ADC_MspInit+0x78>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001304 <HAL_ADC_MspInit+0x78>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <HAL_ADC_MspInit+0x78>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80012de:	233f      	movs	r3, #63	@ 0x3f
 80012e0:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012e2:	230b      	movs	r3, #11
 80012e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	@ (8001308 <HAL_ADC_MspInit+0x7c>)
 80012f2:	f002 f925 	bl	8003540 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012f6:	bf00      	nop
 80012f8:	3728      	adds	r7, #40	@ 0x28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	50040000 	.word	0x50040000
 8001304:	40021000 	.word	0x40021000
 8001308:	48000800 	.word	0x48000800

0800130c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b0ae      	sub	sp, #184	@ 0xb8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	2294      	movs	r2, #148	@ 0x94
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f00a fd1b 	bl	800bd68 <memset>
  if(DFSDM1_Init == 0)
 8001332:	4b25      	ldr	r3, [pc, #148]	@ (80013c8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d142      	bne.n	80013c0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800133a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800133e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	4618      	mov	r0, r3
 800134c:	f004 feb4 	bl	80060b8 <HAL_RCCEx_PeriphCLKConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001356:	f7ff ff6b 	bl	8001230 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800135a:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 800135c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800135e:	4a1b      	ldr	r2, [pc, #108]	@ (80013cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001360:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001364:	6613      	str	r3, [r2, #96]	@ 0x60
 8001366:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800136a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001372:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	4a15      	ldr	r2, [pc, #84]	@ (80013cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001378:	f043 0310 	orr.w	r3, r3, #16
 800137c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137e:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	f003 0310 	and.w	r3, r3, #16
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800138a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800138e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80013a4:	2306      	movs	r3, #6
 80013a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013aa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013ae:	4619      	mov	r1, r3
 80013b0:	4807      	ldr	r0, [pc, #28]	@ (80013d0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80013b2:	f002 f8c5 	bl	8003540 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80013b6:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	4a02      	ldr	r2, [pc, #8]	@ (80013c8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80013be:	6013      	str	r3, [r2, #0]
  }

}
 80013c0:	bf00      	nop
 80013c2:	37b8      	adds	r7, #184	@ 0xb8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000500 	.word	0x20000500
 80013cc:	40021000 	.word	0x40021000
 80013d0:	48001000 	.word	0x48001000

080013d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b0b0      	sub	sp, #192	@ 0xc0
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ec:	f107 0318 	add.w	r3, r7, #24
 80013f0:	2294      	movs	r2, #148	@ 0x94
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f00a fcb7 	bl	800bd68 <memset>
  if(hi2c->Instance==I2C1)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a42      	ldr	r2, [pc, #264]	@ (8001508 <HAL_I2C_MspInit+0x134>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d13c      	bne.n	800147e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001404:	2340      	movs	r3, #64	@ 0x40
 8001406:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001408:	2300      	movs	r3, #0
 800140a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800140c:	f107 0318 	add.w	r3, r7, #24
 8001410:	4618      	mov	r0, r3
 8001412:	f004 fe51 	bl	80060b8 <HAL_RCCEx_PeriphCLKConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800141c:	f7ff ff08 	bl	8001230 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001420:	4b3a      	ldr	r3, [pc, #232]	@ (800150c <HAL_I2C_MspInit+0x138>)
 8001422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001424:	4a39      	ldr	r2, [pc, #228]	@ (800150c <HAL_I2C_MspInit+0x138>)
 8001426:	f043 0302 	orr.w	r3, r3, #2
 800142a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142c:	4b37      	ldr	r3, [pc, #220]	@ (800150c <HAL_I2C_MspInit+0x138>)
 800142e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001438:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800143c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001440:	2312      	movs	r3, #18
 8001442:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001446:	2301      	movs	r3, #1
 8001448:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144c:	2303      	movs	r3, #3
 800144e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001452:	2304      	movs	r3, #4
 8001454:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001458:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800145c:	4619      	mov	r1, r3
 800145e:	482c      	ldr	r0, [pc, #176]	@ (8001510 <HAL_I2C_MspInit+0x13c>)
 8001460:	f002 f86e 	bl	8003540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001464:	4b29      	ldr	r3, [pc, #164]	@ (800150c <HAL_I2C_MspInit+0x138>)
 8001466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001468:	4a28      	ldr	r2, [pc, #160]	@ (800150c <HAL_I2C_MspInit+0x138>)
 800146a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800146e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001470:	4b26      	ldr	r3, [pc, #152]	@ (800150c <HAL_I2C_MspInit+0x138>)
 8001472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800147c:	e040      	b.n	8001500 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a24      	ldr	r2, [pc, #144]	@ (8001514 <HAL_I2C_MspInit+0x140>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d13b      	bne.n	8001500 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001488:	2380      	movs	r3, #128	@ 0x80
 800148a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800148c:	2300      	movs	r3, #0
 800148e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001490:	f107 0318 	add.w	r3, r7, #24
 8001494:	4618      	mov	r0, r3
 8001496:	f004 fe0f 	bl	80060b8 <HAL_RCCEx_PeriphCLKConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80014a0:	f7ff fec6 	bl	8001230 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a4:	4b19      	ldr	r3, [pc, #100]	@ (800150c <HAL_I2C_MspInit+0x138>)
 80014a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a8:	4a18      	ldr	r2, [pc, #96]	@ (800150c <HAL_I2C_MspInit+0x138>)
 80014aa:	f043 0302 	orr.w	r3, r3, #2
 80014ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b0:	4b16      	ldr	r3, [pc, #88]	@ (800150c <HAL_I2C_MspInit+0x138>)
 80014b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80014bc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c4:	2312      	movs	r3, #18
 80014c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014d6:	2304      	movs	r3, #4
 80014d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014dc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014e0:	4619      	mov	r1, r3
 80014e2:	480b      	ldr	r0, [pc, #44]	@ (8001510 <HAL_I2C_MspInit+0x13c>)
 80014e4:	f002 f82c 	bl	8003540 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014e8:	4b08      	ldr	r3, [pc, #32]	@ (800150c <HAL_I2C_MspInit+0x138>)
 80014ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ec:	4a07      	ldr	r2, [pc, #28]	@ (800150c <HAL_I2C_MspInit+0x138>)
 80014ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f4:	4b05      	ldr	r3, [pc, #20]	@ (800150c <HAL_I2C_MspInit+0x138>)
 80014f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
}
 8001500:	bf00      	nop
 8001502:	37c0      	adds	r7, #192	@ 0xc0
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40005400 	.word	0x40005400
 800150c:	40021000 	.word	0x40021000
 8001510:	48000400 	.word	0x48000400
 8001514:	40005800 	.word	0x40005800

08001518 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a16      	ldr	r2, [pc, #88]	@ (8001580 <HAL_I2C_MspDeInit+0x68>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d110      	bne.n	800154c <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800152a:	4b16      	ldr	r3, [pc, #88]	@ (8001584 <HAL_I2C_MspDeInit+0x6c>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152e:	4a15      	ldr	r2, [pc, #84]	@ (8001584 <HAL_I2C_MspDeInit+0x6c>)
 8001530:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001534:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 8001536:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800153a:	4813      	ldr	r0, [pc, #76]	@ (8001588 <HAL_I2C_MspDeInit+0x70>)
 800153c:	f002 f992 	bl	8003864 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 8001540:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001544:	4810      	ldr	r0, [pc, #64]	@ (8001588 <HAL_I2C_MspDeInit+0x70>)
 8001546:	f002 f98d 	bl	8003864 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800154a:	e014      	b.n	8001576 <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C2)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0e      	ldr	r2, [pc, #56]	@ (800158c <HAL_I2C_MspDeInit+0x74>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d10f      	bne.n	8001576 <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001556:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <HAL_I2C_MspDeInit+0x6c>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155a:	4a0a      	ldr	r2, [pc, #40]	@ (8001584 <HAL_I2C_MspDeInit+0x6c>)
 800155c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001560:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001562:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001566:	4808      	ldr	r0, [pc, #32]	@ (8001588 <HAL_I2C_MspDeInit+0x70>)
 8001568:	f002 f97c 	bl	8003864 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 800156c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001570:	4805      	ldr	r0, [pc, #20]	@ (8001588 <HAL_I2C_MspDeInit+0x70>)
 8001572:	f002 f977 	bl	8003864 <HAL_GPIO_DeInit>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40005400 	.word	0x40005400
 8001584:	40021000 	.word	0x40021000
 8001588:	48000400 	.word	0x48000400
 800158c:	40005800 	.word	0x40005800

08001590 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b0b0      	sub	sp, #192	@ 0xc0
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a8:	f107 0318 	add.w	r3, r7, #24
 80015ac:	2294      	movs	r2, #148	@ 0x94
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f00a fbd9 	bl	800bd68 <memset>
  if(hospi->Instance==OCTOSPI1)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a28      	ldr	r2, [pc, #160]	@ (800165c <HAL_OSPI_MspInit+0xcc>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d149      	bne.n	8001654 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80015c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015cc:	f107 0318 	add.w	r3, r7, #24
 80015d0:	4618      	mov	r0, r3
 80015d2:	f004 fd71 	bl	80060b8 <HAL_RCCEx_PeriphCLKConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 80015dc:	f7ff fe28 	bl	8001230 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 80015e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001660 <HAL_OSPI_MspInit+0xd0>)
 80015e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001660 <HAL_OSPI_MspInit+0xd0>)
 80015e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80015ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001660 <HAL_OSPI_MspInit+0xd0>)
 80015ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80015f8:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <HAL_OSPI_MspInit+0xd0>)
 80015fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015fc:	4a18      	ldr	r2, [pc, #96]	@ (8001660 <HAL_OSPI_MspInit+0xd0>)
 80015fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001602:	6513      	str	r3, [r2, #80]	@ 0x50
 8001604:	4b16      	ldr	r3, [pc, #88]	@ (8001660 <HAL_OSPI_MspInit+0xd0>)
 8001606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001610:	4b13      	ldr	r3, [pc, #76]	@ (8001660 <HAL_OSPI_MspInit+0xd0>)
 8001612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001614:	4a12      	ldr	r2, [pc, #72]	@ (8001660 <HAL_OSPI_MspInit+0xd0>)
 8001616:	f043 0310 	orr.w	r3, r3, #16
 800161a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161c:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <HAL_OSPI_MspInit+0xd0>)
 800161e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001620:	f003 0310 	and.w	r3, r3, #16
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001628:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800162c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001642:	230a      	movs	r3, #10
 8001644:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001648:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800164c:	4619      	mov	r1, r3
 800164e:	4805      	ldr	r0, [pc, #20]	@ (8001664 <HAL_OSPI_MspInit+0xd4>)
 8001650:	f001 ff76 	bl	8003540 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001654:	bf00      	nop
 8001656:	37c0      	adds	r7, #192	@ 0xc0
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	a0001000 	.word	0xa0001000
 8001660:	40021000 	.word	0x40021000
 8001664:	48001000 	.word	0x48001000

08001668 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	@ 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a17      	ldr	r2, [pc, #92]	@ (80016e4 <HAL_SPI_MspInit+0x7c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d128      	bne.n	80016dc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800168a:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <HAL_SPI_MspInit+0x80>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168e:	4a16      	ldr	r2, [pc, #88]	@ (80016e8 <HAL_SPI_MspInit+0x80>)
 8001690:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001694:	6593      	str	r3, [r2, #88]	@ 0x58
 8001696:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <HAL_SPI_MspInit+0x80>)
 8001698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <HAL_SPI_MspInit+0x80>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a6:	4a10      	ldr	r2, [pc, #64]	@ (80016e8 <HAL_SPI_MspInit+0x80>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ae:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <HAL_SPI_MspInit+0x80>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80016ba:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80016be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016cc:	2306      	movs	r3, #6
 80016ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	4805      	ldr	r0, [pc, #20]	@ (80016ec <HAL_SPI_MspInit+0x84>)
 80016d8:	f001 ff32 	bl	8003540 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80016dc:	bf00      	nop
 80016de:	3728      	adds	r7, #40	@ 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40003c00 	.word	0x40003c00
 80016e8:	40021000 	.word	0x40021000
 80016ec:	48000800 	.word	0x48000800

080016f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b0b4      	sub	sp, #208	@ 0xd0
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001708:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800170c:	2294      	movs	r2, #148	@ 0x94
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f00a fb29 	bl	800bd68 <memset>
  if(huart->Instance==UART4)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a83      	ldr	r2, [pc, #524]	@ (8001928 <HAL_UART_MspInit+0x238>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d13c      	bne.n	800179a <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001720:	2308      	movs	r3, #8
 8001722:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001724:	2300      	movs	r3, #0
 8001726:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001728:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800172c:	4618      	mov	r0, r3
 800172e:	f004 fcc3 	bl	80060b8 <HAL_RCCEx_PeriphCLKConfig>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001738:	f7ff fd7a 	bl	8001230 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800173c:	4b7b      	ldr	r3, [pc, #492]	@ (800192c <HAL_UART_MspInit+0x23c>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001740:	4a7a      	ldr	r2, [pc, #488]	@ (800192c <HAL_UART_MspInit+0x23c>)
 8001742:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001746:	6593      	str	r3, [r2, #88]	@ 0x58
 8001748:	4b78      	ldr	r3, [pc, #480]	@ (800192c <HAL_UART_MspInit+0x23c>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001750:	627b      	str	r3, [r7, #36]	@ 0x24
 8001752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001754:	4b75      	ldr	r3, [pc, #468]	@ (800192c <HAL_UART_MspInit+0x23c>)
 8001756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001758:	4a74      	ldr	r2, [pc, #464]	@ (800192c <HAL_UART_MspInit+0x23c>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001760:	4b72      	ldr	r3, [pc, #456]	@ (800192c <HAL_UART_MspInit+0x23c>)
 8001762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	623b      	str	r3, [r7, #32]
 800176a:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800176c:	2303      	movs	r3, #3
 800176e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177e:	2303      	movs	r3, #3
 8001780:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001784:	2308      	movs	r3, #8
 8001786:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800178e:	4619      	mov	r1, r3
 8001790:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001794:	f001 fed4 	bl	8003540 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001798:	e0c2      	b.n	8001920 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a64      	ldr	r2, [pc, #400]	@ (8001930 <HAL_UART_MspInit+0x240>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d13b      	bne.n	800181c <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017a4:	2301      	movs	r3, #1
 80017a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017a8:	2300      	movs	r3, #0
 80017aa:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017b0:	4618      	mov	r0, r3
 80017b2:	f004 fc81 	bl	80060b8 <HAL_RCCEx_PeriphCLKConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80017bc:	f7ff fd38 	bl	8001230 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80017c0:	4b5a      	ldr	r3, [pc, #360]	@ (800192c <HAL_UART_MspInit+0x23c>)
 80017c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017c4:	4a59      	ldr	r2, [pc, #356]	@ (800192c <HAL_UART_MspInit+0x23c>)
 80017c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80017cc:	4b57      	ldr	r3, [pc, #348]	@ (800192c <HAL_UART_MspInit+0x23c>)
 80017ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d8:	4b54      	ldr	r3, [pc, #336]	@ (800192c <HAL_UART_MspInit+0x23c>)
 80017da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017dc:	4a53      	ldr	r2, [pc, #332]	@ (800192c <HAL_UART_MspInit+0x23c>)
 80017de:	f043 0302 	orr.w	r3, r3, #2
 80017e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e4:	4b51      	ldr	r3, [pc, #324]	@ (800192c <HAL_UART_MspInit+0x23c>)
 80017e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	61bb      	str	r3, [r7, #24]
 80017ee:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80017f0:	23c0      	movs	r3, #192	@ 0xc0
 80017f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001808:	2307      	movs	r3, #7
 800180a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001812:	4619      	mov	r1, r3
 8001814:	4847      	ldr	r0, [pc, #284]	@ (8001934 <HAL_UART_MspInit+0x244>)
 8001816:	f001 fe93 	bl	8003540 <HAL_GPIO_Init>
}
 800181a:	e081      	b.n	8001920 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a45      	ldr	r2, [pc, #276]	@ (8001938 <HAL_UART_MspInit+0x248>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d13b      	bne.n	800189e <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001826:	2302      	movs	r3, #2
 8001828:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800182a:	2300      	movs	r3, #0
 800182c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800182e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001832:	4618      	mov	r0, r3
 8001834:	f004 fc40 	bl	80060b8 <HAL_RCCEx_PeriphCLKConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_UART_MspInit+0x152>
      Error_Handler();
 800183e:	f7ff fcf7 	bl	8001230 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001842:	4b3a      	ldr	r3, [pc, #232]	@ (800192c <HAL_UART_MspInit+0x23c>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001846:	4a39      	ldr	r2, [pc, #228]	@ (800192c <HAL_UART_MspInit+0x23c>)
 8001848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800184c:	6593      	str	r3, [r2, #88]	@ 0x58
 800184e:	4b37      	ldr	r3, [pc, #220]	@ (800192c <HAL_UART_MspInit+0x23c>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800185a:	4b34      	ldr	r3, [pc, #208]	@ (800192c <HAL_UART_MspInit+0x23c>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185e:	4a33      	ldr	r2, [pc, #204]	@ (800192c <HAL_UART_MspInit+0x23c>)
 8001860:	f043 0308 	orr.w	r3, r3, #8
 8001864:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001866:	4b31      	ldr	r3, [pc, #196]	@ (800192c <HAL_UART_MspInit+0x23c>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001872:	2378      	movs	r3, #120	@ 0x78
 8001874:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800188a:	2307      	movs	r3, #7
 800188c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001890:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001894:	4619      	mov	r1, r3
 8001896:	4829      	ldr	r0, [pc, #164]	@ (800193c <HAL_UART_MspInit+0x24c>)
 8001898:	f001 fe52 	bl	8003540 <HAL_GPIO_Init>
}
 800189c:	e040      	b.n	8001920 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a27      	ldr	r2, [pc, #156]	@ (8001940 <HAL_UART_MspInit+0x250>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d13b      	bne.n	8001920 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018a8:	2304      	movs	r3, #4
 80018aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018ac:	2300      	movs	r3, #0
 80018ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018b4:	4618      	mov	r0, r3
 80018b6:	f004 fbff 	bl	80060b8 <HAL_RCCEx_PeriphCLKConfig>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 80018c0:	f7ff fcb6 	bl	8001230 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018c4:	4b19      	ldr	r3, [pc, #100]	@ (800192c <HAL_UART_MspInit+0x23c>)
 80018c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c8:	4a18      	ldr	r2, [pc, #96]	@ (800192c <HAL_UART_MspInit+0x23c>)
 80018ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80018d0:	4b16      	ldr	r3, [pc, #88]	@ (800192c <HAL_UART_MspInit+0x23c>)
 80018d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018dc:	4b13      	ldr	r3, [pc, #76]	@ (800192c <HAL_UART_MspInit+0x23c>)
 80018de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e0:	4a12      	ldr	r2, [pc, #72]	@ (800192c <HAL_UART_MspInit+0x23c>)
 80018e2:	f043 0308 	orr.w	r3, r3, #8
 80018e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018e8:	4b10      	ldr	r3, [pc, #64]	@ (800192c <HAL_UART_MspInit+0x23c>)
 80018ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80018f4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001908:	2303      	movs	r3, #3
 800190a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800190e:	2307      	movs	r3, #7
 8001910:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001914:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001918:	4619      	mov	r1, r3
 800191a:	4808      	ldr	r0, [pc, #32]	@ (800193c <HAL_UART_MspInit+0x24c>)
 800191c:	f001 fe10 	bl	8003540 <HAL_GPIO_Init>
}
 8001920:	bf00      	nop
 8001922:	37d0      	adds	r7, #208	@ 0xd0
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40004c00 	.word	0x40004c00
 800192c:	40021000 	.word	0x40021000
 8001930:	40013800 	.word	0x40013800
 8001934:	48000400 	.word	0x48000400
 8001938:	40004400 	.word	0x40004400
 800193c:	48000c00 	.word	0x48000c00
 8001940:	40004800 	.word	0x40004800

08001944 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08e      	sub	sp, #56	@ 0x38
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001952:	4b34      	ldr	r3, [pc, #208]	@ (8001a24 <HAL_InitTick+0xe0>)
 8001954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001956:	4a33      	ldr	r2, [pc, #204]	@ (8001a24 <HAL_InitTick+0xe0>)
 8001958:	f043 0310 	orr.w	r3, r3, #16
 800195c:	6593      	str	r3, [r2, #88]	@ 0x58
 800195e:	4b31      	ldr	r3, [pc, #196]	@ (8001a24 <HAL_InitTick+0xe0>)
 8001960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001962:	f003 0310 	and.w	r3, r3, #16
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800196a:	f107 0210 	add.w	r2, r7, #16
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f004 faad 	bl	8005ed4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800197e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001980:	2b00      	cmp	r3, #0
 8001982:	d103      	bne.n	800198c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001984:	f004 fa7a 	bl	8005e7c <HAL_RCC_GetPCLK1Freq>
 8001988:	6378      	str	r0, [r7, #52]	@ 0x34
 800198a:	e004      	b.n	8001996 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800198c:	f004 fa76 	bl	8005e7c <HAL_RCC_GetPCLK1Freq>
 8001990:	4603      	mov	r3, r0
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001998:	4a23      	ldr	r2, [pc, #140]	@ (8001a28 <HAL_InitTick+0xe4>)
 800199a:	fba2 2303 	umull	r2, r3, r2, r3
 800199e:	0c9b      	lsrs	r3, r3, #18
 80019a0:	3b01      	subs	r3, #1
 80019a2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019a4:	4b21      	ldr	r3, [pc, #132]	@ (8001a2c <HAL_InitTick+0xe8>)
 80019a6:	4a22      	ldr	r2, [pc, #136]	@ (8001a30 <HAL_InitTick+0xec>)
 80019a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019aa:	4b20      	ldr	r3, [pc, #128]	@ (8001a2c <HAL_InitTick+0xe8>)
 80019ac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019b0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80019b2:	4a1e      	ldr	r2, [pc, #120]	@ (8001a2c <HAL_InitTick+0xe8>)
 80019b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019b6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019b8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a2c <HAL_InitTick+0xe8>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019be:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <HAL_InitTick+0xe8>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c4:	4b19      	ldr	r3, [pc, #100]	@ (8001a2c <HAL_InitTick+0xe8>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80019ca:	4818      	ldr	r0, [pc, #96]	@ (8001a2c <HAL_InitTick+0xe8>)
 80019cc:	f005 f93f 	bl	8006c4e <HAL_TIM_Base_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80019d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d11b      	bne.n	8001a16 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80019de:	4813      	ldr	r0, [pc, #76]	@ (8001a2c <HAL_InitTick+0xe8>)
 80019e0:	f005 f996 	bl	8006d10 <HAL_TIM_Base_Start_IT>
 80019e4:	4603      	mov	r3, r0
 80019e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80019ea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d111      	bne.n	8001a16 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019f2:	2036      	movs	r0, #54	@ 0x36
 80019f4:	f001 fc8a 	bl	800330c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b0f      	cmp	r3, #15
 80019fc:	d808      	bhi.n	8001a10 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80019fe:	2200      	movs	r2, #0
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	2036      	movs	r0, #54	@ 0x36
 8001a04:	f001 fc66 	bl	80032d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a08:	4a0a      	ldr	r2, [pc, #40]	@ (8001a34 <HAL_InitTick+0xf0>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	e002      	b.n	8001a16 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a16:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3738      	adds	r7, #56	@ 0x38
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000
 8001a28:	431bde83 	.word	0x431bde83
 8001a2c:	20000504 	.word	0x20000504
 8001a30:	40001000 	.word	0x40001000
 8001a34:	20000018 	.word	0x20000018

08001a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <NMI_Handler+0x4>

08001a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <HardFault_Handler+0x4>

08001a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <MemManage_Handler+0x4>

08001a50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <BusFault_Handler+0x4>

08001a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <UsageFault_Handler+0x4>

08001a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001a72:	2020      	movs	r0, #32
 8001a74:	f002 f800 	bl	8003a78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001a78:	2040      	movs	r0, #64	@ 0x40
 8001a7a:	f001 fffd 	bl	8003a78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001a7e:	2080      	movs	r0, #128	@ 0x80
 8001a80:	f001 fffa 	bl	8003a78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001a84:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001a88:	f001 fff6 	bl	8003a78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8001a94:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001a98:	f001 ffee 	bl	8003a78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001a9c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001aa0:	f001 ffea 	bl	8003a78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8001aa4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001aa8:	f001 ffe6 	bl	8003a78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001aac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ab0:	f001 ffe2 	bl	8003a78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001ab4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001ab8:	f001 ffde 	bl	8003a78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001abc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001ac0:	f001 ffda 	bl	8003a78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001acc:	4802      	ldr	r0, [pc, #8]	@ (8001ad8 <TIM6_DAC_IRQHandler+0x10>)
 8001ace:	f005 f98f 	bl	8006df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000504 	.word	0x20000504

08001adc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <SystemInit+0x20>)
 8001ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ae6:	4a05      	ldr	r2, [pc, #20]	@ (8001afc <SystemInit+0x20>)
 8001ae8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b04:	f7ff ffea 	bl	8001adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b08:	480c      	ldr	r0, [pc, #48]	@ (8001b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b0a:	490d      	ldr	r1, [pc, #52]	@ (8001b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b44 <LoopForever+0xe>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b10:	e002      	b.n	8001b18 <LoopCopyDataInit>

08001b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b16:	3304      	adds	r3, #4

08001b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b1c:	d3f9      	bcc.n	8001b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b20:	4c0a      	ldr	r4, [pc, #40]	@ (8001b4c <LoopForever+0x16>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b24:	e001      	b.n	8001b2a <LoopFillZerobss>

08001b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b28:	3204      	adds	r2, #4

08001b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b2c:	d3fb      	bcc.n	8001b26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b2e:	f00a f979 	bl	800be24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b32:	f7fe fcdd 	bl	80004f0 <main>

08001b36 <LoopForever>:

LoopForever:
    b LoopForever
 8001b36:	e7fe      	b.n	8001b36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b38:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b40:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001b44:	0800c130 	.word	0x0800c130
  ldr r2, =_sbss
 8001b48:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001b4c:	200020b0 	.word	0x200020b0

08001b50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b50:	e7fe      	b.n	8001b50 <ADC1_IRQHandler>
	...

08001b54 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	@ 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001b5c:	4b27      	ldr	r3, [pc, #156]	@ (8001bfc <I2Cx_MspInit+0xa8>)
 8001b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b60:	4a26      	ldr	r2, [pc, #152]	@ (8001bfc <I2Cx_MspInit+0xa8>)
 8001b62:	f043 0302 	orr.w	r3, r3, #2
 8001b66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b68:	4b24      	ldr	r3, [pc, #144]	@ (8001bfc <I2Cx_MspInit+0xa8>)
 8001b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001b74:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b78:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001b7a:	2312      	movs	r3, #18
 8001b7c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b82:	2303      	movs	r3, #3
 8001b84:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001b86:	2304      	movs	r3, #4
 8001b88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	481b      	ldr	r0, [pc, #108]	@ (8001c00 <I2Cx_MspInit+0xac>)
 8001b92:	f001 fcd5 	bl	8003540 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4818      	ldr	r0, [pc, #96]	@ (8001c00 <I2Cx_MspInit+0xac>)
 8001b9e:	f001 fccf 	bl	8003540 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001ba2:	4b16      	ldr	r3, [pc, #88]	@ (8001bfc <I2Cx_MspInit+0xa8>)
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba6:	4a15      	ldr	r2, [pc, #84]	@ (8001bfc <I2Cx_MspInit+0xa8>)
 8001ba8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bac:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bae:	4b13      	ldr	r3, [pc, #76]	@ (8001bfc <I2Cx_MspInit+0xa8>)
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001bba:	4b10      	ldr	r3, [pc, #64]	@ (8001bfc <I2Cx_MspInit+0xa8>)
 8001bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bbe:	4a0f      	ldr	r2, [pc, #60]	@ (8001bfc <I2Cx_MspInit+0xa8>)
 8001bc0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bc4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bfc <I2Cx_MspInit+0xa8>)
 8001bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bca:	4a0c      	ldr	r2, [pc, #48]	@ (8001bfc <I2Cx_MspInit+0xa8>)
 8001bcc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001bd0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	210f      	movs	r1, #15
 8001bd6:	2021      	movs	r0, #33	@ 0x21
 8001bd8:	f001 fb7c 	bl	80032d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001bdc:	2021      	movs	r0, #33	@ 0x21
 8001bde:	f001 fb95 	bl	800330c <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	210f      	movs	r1, #15
 8001be6:	2022      	movs	r0, #34	@ 0x22
 8001be8:	f001 fb74 	bl	80032d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001bec:	2022      	movs	r0, #34	@ 0x22
 8001bee:	f001 fb8d 	bl	800330c <HAL_NVIC_EnableIRQ>
}
 8001bf2:	bf00      	nop
 8001bf4:	3728      	adds	r7, #40	@ 0x28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	48000400 	.word	0x48000400

08001c04 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a12      	ldr	r2, [pc, #72]	@ (8001c58 <I2Cx_Init+0x54>)
 8001c10:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a11      	ldr	r2, [pc, #68]	@ (8001c5c <I2Cx_Init+0x58>)
 8001c16:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ff89 	bl	8001b54 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f001 ff3b 	bl	8003abe <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001c48:	2100      	movs	r1, #0
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f002 fce8 	bl	8004620 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40005800 	.word	0x40005800
 8001c5c:	00702681 	.word	0x00702681

08001c60 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	@ 0x28
 8001c64:	af04      	add	r7, sp, #16
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	4608      	mov	r0, r1
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4603      	mov	r3, r0
 8001c70:	72fb      	strb	r3, [r7, #11]
 8001c72:	460b      	mov	r3, r1
 8001c74:	813b      	strh	r3, [r7, #8]
 8001c76:	4613      	mov	r3, r2
 8001c78:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001c7e:	7afb      	ldrb	r3, [r7, #11]
 8001c80:	b299      	uxth	r1, r3
 8001c82:	88f8      	ldrh	r0, [r7, #6]
 8001c84:	893a      	ldrh	r2, [r7, #8]
 8001c86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c8a:	9302      	str	r3, [sp, #8]
 8001c8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	4603      	mov	r3, r0
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f002 f8f0 	bl	8003e7c <HAL_I2C_Mem_Read>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001ca0:	7dfb      	ldrb	r3, [r7, #23]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d004      	beq.n	8001cb0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001ca6:	7afb      	ldrb	r3, [r7, #11]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f000 f832 	bl	8001d14 <I2Cx_Error>
  }
  return status;
 8001cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b08a      	sub	sp, #40	@ 0x28
 8001cbe:	af04      	add	r7, sp, #16
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	4608      	mov	r0, r1
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4603      	mov	r3, r0
 8001cca:	72fb      	strb	r3, [r7, #11]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	813b      	strh	r3, [r7, #8]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001cd8:	7afb      	ldrb	r3, [r7, #11]
 8001cda:	b299      	uxth	r1, r3
 8001cdc:	88f8      	ldrh	r0, [r7, #6]
 8001cde:	893a      	ldrh	r2, [r7, #8]
 8001ce0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ce4:	9302      	str	r3, [sp, #8]
 8001ce6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ce8:	9301      	str	r3, [sp, #4]
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	4603      	mov	r3, r0
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f001 ffaf 	bl	8003c54 <HAL_I2C_Mem_Write>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001cfa:	7dfb      	ldrb	r3, [r7, #23]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d004      	beq.n	8001d0a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001d00:	7afb      	ldrb	r3, [r7, #11]
 8001d02:	4619      	mov	r1, r3
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 f805 	bl	8001d14 <I2Cx_Error>
  }
  return status;
 8001d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f001 ff67 	bl	8003bf4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ff6c 	bl	8001c04 <I2Cx_Init>
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001d38:	4802      	ldr	r0, [pc, #8]	@ (8001d44 <SENSOR_IO_Init+0x10>)
 8001d3a:	f7ff ff63 	bl	8001c04 <I2Cx_Init>
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000550 	.word	0x20000550

08001d48 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af02      	add	r7, sp, #8
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
 8001d52:	460b      	mov	r3, r1
 8001d54:	71bb      	strb	r3, [r7, #6]
 8001d56:	4613      	mov	r3, r2
 8001d58:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	79f9      	ldrb	r1, [r7, #7]
 8001d60:	2301      	movs	r3, #1
 8001d62:	9301      	str	r3, [sp, #4]
 8001d64:	1d7b      	adds	r3, r7, #5
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2301      	movs	r3, #1
 8001d6a:	4803      	ldr	r0, [pc, #12]	@ (8001d78 <SENSOR_IO_Write+0x30>)
 8001d6c:	f7ff ffa5 	bl	8001cba <I2Cx_WriteMultiple>
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000550 	.word	0x20000550

08001d7c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	4603      	mov	r3, r0
 8001d84:	460a      	mov	r2, r1
 8001d86:	71fb      	strb	r3, [r7, #7]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001d90:	79bb      	ldrb	r3, [r7, #6]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	79f9      	ldrb	r1, [r7, #7]
 8001d96:	2301      	movs	r3, #1
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	f107 030f 	add.w	r3, r7, #15
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	2301      	movs	r3, #1
 8001da2:	4804      	ldr	r0, [pc, #16]	@ (8001db4 <SENSOR_IO_Read+0x38>)
 8001da4:	f7ff ff5c 	bl	8001c60 <I2Cx_ReadMultiple>

  return read_value;
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000550 	.word	0x20000550

08001db8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af02      	add	r7, sp, #8
 8001dbe:	603a      	str	r2, [r7, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	71bb      	strb	r3, [r7, #6]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001dce:	79bb      	ldrb	r3, [r7, #6]
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	79f9      	ldrb	r1, [r7, #7]
 8001dd4:	88bb      	ldrh	r3, [r7, #4]
 8001dd6:	9301      	str	r3, [sp, #4]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	2301      	movs	r3, #1
 8001dde:	4804      	ldr	r0, [pc, #16]	@ (8001df0 <SENSOR_IO_ReadMultiple+0x38>)
 8001de0:	f7ff ff3e 	bl	8001c60 <I2Cx_ReadMultiple>
 8001de4:	4603      	mov	r3, r0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000550 	.word	0x20000550

08001df4 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001dfe:	4b09      	ldr	r3, [pc, #36]	@ (8001e24 <BSP_TSENSOR_Init+0x30>)
 8001e00:	4a09      	ldr	r2, [pc, #36]	@ (8001e28 <BSP_TSENSOR_Init+0x34>)
 8001e02:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001e04:	f7ff ff96 	bl	8001d34 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001e08:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <BSP_TSENSOR_Init+0x30>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2100      	movs	r1, #0
 8001e10:	20be      	movs	r0, #190	@ 0xbe
 8001e12:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001e18:	79fb      	ldrb	r3, [r7, #7]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200005a4 	.word	0x200005a4
 8001e28:	20000008 	.word	0x20000008

08001e2c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001e30:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <BSP_TSENSOR_ReadTemp+0x18>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	20be      	movs	r0, #190	@ 0xbe
 8001e38:	4798      	blx	r3
 8001e3a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	200005a4 	.word	0x200005a4

08001e48 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	6039      	str	r1, [r7, #0]
 8001e52:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2120      	movs	r1, #32
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff ff8e 	bl	8001d7c <SENSOR_IO_Read>
 8001e60:	4603      	mov	r3, r0
 8001e62:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	f023 0304 	bic.w	r3, r3, #4
 8001e6a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	f043 0304 	orr.w	r3, r3, #4
 8001e72:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	f023 0303 	bic.w	r3, r3, #3
 8001e7a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e8a:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	2120      	movs	r1, #32
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff57 	bl	8001d48 <SENSOR_IO_Write>
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b088      	sub	sp, #32
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	b2d8      	uxtb	r0, r3
 8001eb0:	f107 0208 	add.w	r2, r7, #8
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	21b2      	movs	r1, #178	@ 0xb2
 8001eb8:	f7ff ff7e 	bl	8001db8 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2135      	movs	r1, #53	@ 0x35
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ff5a 	bl	8001d7c <SENSOR_IO_Read>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001ecc:	7ffb      	ldrb	r3, [r7, #31]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ed6:	b21a      	sxth	r2, r3
 8001ed8:	7a3b      	ldrb	r3, [r7, #8]
 8001eda:	b21b      	sxth	r3, r3
 8001edc:	4313      	orrs	r3, r2
 8001ede:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001ee0:	7ffb      	ldrb	r3, [r7, #31]
 8001ee2:	019b      	lsls	r3, r3, #6
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eea:	b21a      	sxth	r2, r3
 8001eec:	7a7b      	ldrb	r3, [r7, #9]
 8001eee:	b21b      	sxth	r3, r3
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001ef4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ef8:	10db      	asrs	r3, r3, #3
 8001efa:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001efc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f00:	10db      	asrs	r3, r3, #3
 8001f02:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001f04:	88fb      	ldrh	r3, [r7, #6]
 8001f06:	b2d8      	uxtb	r0, r3
 8001f08:	f107 0208 	add.w	r2, r7, #8
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	21bc      	movs	r1, #188	@ 0xbc
 8001f10:	f7ff ff52 	bl	8001db8 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001f14:	7a7b      	ldrb	r3, [r7, #9]
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	b21a      	sxth	r2, r3
 8001f1a:	7a3b      	ldrb	r3, [r7, #8]
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001f22:	7afb      	ldrb	r3, [r7, #11]
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	b21a      	sxth	r2, r3
 8001f28:	7abb      	ldrb	r3, [r7, #10]
 8001f2a:	b21b      	sxth	r3, r3
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	b2d8      	uxtb	r0, r3
 8001f34:	f107 0208 	add.w	r2, r7, #8
 8001f38:	2302      	movs	r3, #2
 8001f3a:	21aa      	movs	r1, #170	@ 0xaa
 8001f3c:	f7ff ff3c 	bl	8001db8 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001f40:	7a7b      	ldrb	r3, [r7, #9]
 8001f42:	021b      	lsls	r3, r3, #8
 8001f44:	b21a      	sxth	r2, r3
 8001f46:	7a3b      	ldrb	r3, [r7, #8]
 8001f48:	b21b      	sxth	r3, r3
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001f4e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001f52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	ee07 3a90 	vmov	s15, r3
 8001f5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001f64:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	ee07 3a90 	vmov	s15, r3
 8001f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f72:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001f76:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001f7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	ee07 3a90 	vmov	s15, r3
 8001f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f8c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001f90:	ee07 3a90 	vmov	s15, r3
 8001f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f9c:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	ee07 3a90 	vmov	s15, r3
}
 8001fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fba:	2003      	movs	r0, #3
 8001fbc:	f001 f97f 	bl	80032be <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fc0:	200f      	movs	r0, #15
 8001fc2:	f7ff fcbf 	bl	8001944 <HAL_InitTick>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d002      	beq.n	8001fd2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	71fb      	strb	r3, [r7, #7]
 8001fd0:	e001      	b.n	8001fd6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fd2:	f7ff f933 	bl	800123c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_IncTick+0x20>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <HAL_IncTick+0x24>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a04      	ldr	r2, [pc, #16]	@ (8002004 <HAL_IncTick+0x24>)
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	2000001c 	.word	0x2000001c
 8002004:	200005a8 	.word	0x200005a8

08002008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return uwTick;
 800200c:	4b03      	ldr	r3, [pc, #12]	@ (800201c <HAL_GetTick+0x14>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	200005a8 	.word	0x200005a8

08002020 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	609a      	str	r2, [r3, #8]
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	609a      	str	r2, [r3, #8]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002088:	b480      	push	{r7}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3360      	adds	r3, #96	@ 0x60
 800209a:	461a      	mov	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b08      	ldr	r3, [pc, #32]	@ (80020cc <LL_ADC_SetOffset+0x44>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020c0:	bf00      	nop
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	03fff000 	.word	0x03fff000

080020d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3360      	adds	r3, #96	@ 0x60
 80020de:	461a      	mov	r2, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3360      	adds	r3, #96	@ 0x60
 800210c:	461a      	mov	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	431a      	orrs	r2, r3
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002126:	bf00      	nop
 8002128:	371c      	adds	r7, #28
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	615a      	str	r2, [r3, #20]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800217e:	b480      	push	{r7}
 8002180:	b087      	sub	sp, #28
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3330      	adds	r3, #48	@ 0x30
 800218e:	461a      	mov	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	4413      	add	r3, r2
 800219c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	211f      	movs	r1, #31
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	401a      	ands	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	0e9b      	lsrs	r3, r3, #26
 80021b6:	f003 011f 	and.w	r1, r3, #31
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	f003 031f 	and.w	r3, r3, #31
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	431a      	orrs	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021ca:	bf00      	nop
 80021cc:	371c      	adds	r7, #28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b087      	sub	sp, #28
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3314      	adds	r3, #20
 80021e6:	461a      	mov	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	0e5b      	lsrs	r3, r3, #25
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	4413      	add	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	0d1b      	lsrs	r3, r3, #20
 80021fe:	f003 031f 	and.w	r3, r3, #31
 8002202:	2107      	movs	r1, #7
 8002204:	fa01 f303 	lsl.w	r3, r1, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	401a      	ands	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	0d1b      	lsrs	r3, r3, #20
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	431a      	orrs	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002220:	bf00      	nop
 8002222:	371c      	adds	r7, #28
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002244:	43db      	mvns	r3, r3
 8002246:	401a      	ands	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f003 0318 	and.w	r3, r3, #24
 800224e:	4908      	ldr	r1, [pc, #32]	@ (8002270 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002250:	40d9      	lsrs	r1, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	400b      	ands	r3, r1
 8002256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225a:	431a      	orrs	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	0007ffff 	.word	0x0007ffff

08002274 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002284:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6093      	str	r3, [r2, #8]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022ac:	d101      	bne.n	80022b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80022d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022fc:	d101      	bne.n	8002302 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002320:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002324:	f043 0201 	orr.w	r2, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <LL_ADC_IsEnabled+0x18>
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <LL_ADC_IsEnabled+0x1a>
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800236e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002372:	f043 0204 	orr.w	r2, r3, #4
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b04      	cmp	r3, #4
 8002398:	d101      	bne.n	800239e <LL_ADC_REG_IsConversionOngoing+0x18>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d101      	bne.n	80023c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e129      	b.n	8002642 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7fe ff45 	bl	800128c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff3f 	bl	8002298 <LL_ADC_IsDeepPowerDownEnabled>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d004      	beq.n	800242a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff25 	bl	8002274 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ff5a 	bl	80022e8 <LL_ADC_IsInternalRegulatorEnabled>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d115      	bne.n	8002466 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff ff3e 	bl	80022c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002444:	4b81      	ldr	r3, [pc, #516]	@ (800264c <HAL_ADC_Init+0x278>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	099b      	lsrs	r3, r3, #6
 800244a:	4a81      	ldr	r2, [pc, #516]	@ (8002650 <HAL_ADC_Init+0x27c>)
 800244c:	fba2 2303 	umull	r2, r3, r2, r3
 8002450:	099b      	lsrs	r3, r3, #6
 8002452:	3301      	adds	r3, #1
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002458:	e002      	b.n	8002460 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3b01      	subs	r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f9      	bne.n	800245a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff ff3c 	bl	80022e8 <LL_ADC_IsInternalRegulatorEnabled>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10d      	bne.n	8002492 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247a:	f043 0210 	orr.w	r2, r3, #16
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002486:	f043 0201 	orr.w	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff ff75 	bl	8002386 <LL_ADC_REG_IsConversionOngoing>
 800249c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 80c2 	bne.w	8002630 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f040 80be 	bne.w	8002630 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80024bc:	f043 0202 	orr.w	r2, r3, #2
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff35 	bl	8002338 <LL_ADC_IsEnabled>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10b      	bne.n	80024ec <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024d4:	485f      	ldr	r0, [pc, #380]	@ (8002654 <HAL_ADC_Init+0x280>)
 80024d6:	f7ff ff2f 	bl	8002338 <LL_ADC_IsEnabled>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d105      	bne.n	80024ec <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4619      	mov	r1, r3
 80024e6:	485c      	ldr	r0, [pc, #368]	@ (8002658 <HAL_ADC_Init+0x284>)
 80024e8:	f7ff fd9a 	bl	8002020 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	7e5b      	ldrb	r3, [r3, #25]
 80024f0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024f6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80024fc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002502:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3020 	ldrb.w	r3, [r3, #32]
 800250a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d106      	bne.n	8002528 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251e:	3b01      	subs	r3, #1
 8002520:	045b      	lsls	r3, r3, #17
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252c:	2b00      	cmp	r3, #0
 800252e:	d009      	beq.n	8002544 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002534:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	4b44      	ldr	r3, [pc, #272]	@ (800265c <HAL_ADC_Init+0x288>)
 800254c:	4013      	ands	r3, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	69b9      	ldr	r1, [r7, #24]
 8002554:	430b      	orrs	r3, r1
 8002556:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff25 	bl	80023ac <LL_ADC_INJ_IsConversionOngoing>
 8002562:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d140      	bne.n	80025ec <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d13d      	bne.n	80025ec <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	7e1b      	ldrb	r3, [r3, #24]
 8002578:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800257a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002582:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002592:	f023 0306 	bic.w	r3, r3, #6
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6812      	ldr	r2, [r2, #0]
 800259a:	69b9      	ldr	r1, [r7, #24]
 800259c:	430b      	orrs	r3, r1
 800259e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d118      	bne.n	80025dc <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80025b4:	f023 0304 	bic.w	r3, r3, #4
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80025c0:	4311      	orrs	r1, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80025c6:	4311      	orrs	r1, r2
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025cc:	430a      	orrs	r2, r1
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0201 	orr.w	r2, r2, #1
 80025d8:	611a      	str	r2, [r3, #16]
 80025da:	e007      	b.n	80025ec <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0201 	bic.w	r2, r2, #1
 80025ea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d10c      	bne.n	800260e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fa:	f023 010f 	bic.w	r1, r3, #15
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	1e5a      	subs	r2, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	631a      	str	r2, [r3, #48]	@ 0x30
 800260c:	e007      	b.n	800261e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 020f 	bic.w	r2, r2, #15
 800261c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002622:	f023 0303 	bic.w	r3, r3, #3
 8002626:	f043 0201 	orr.w	r2, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	659a      	str	r2, [r3, #88]	@ 0x58
 800262e:	e007      	b.n	8002640 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002634:	f043 0210 	orr.w	r2, r3, #16
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002640:	7ffb      	ldrb	r3, [r7, #31]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3720      	adds	r7, #32
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000004 	.word	0x20000004
 8002650:	053e2d63 	.word	0x053e2d63
 8002654:	50040000 	.word	0x50040000
 8002658:	50040300 	.word	0x50040300
 800265c:	fff0c007 	.word	0xfff0c007

08002660 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fe8a 	bl	8002386 <LL_ADC_REG_IsConversionOngoing>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d14f      	bne.n	8002718 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_ADC_Start+0x26>
 8002682:	2302      	movs	r3, #2
 8002684:	e04b      	b.n	800271e <HAL_ADC_Start+0xbe>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fce2 	bl	8003058 <ADC_Enable>
 8002694:	4603      	mov	r3, r0
 8002696:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d137      	bne.n	800270e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026a6:	f023 0301 	bic.w	r3, r3, #1
 80026aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026be:	d106      	bne.n	80026ce <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c4:	f023 0206 	bic.w	r2, r3, #6
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026cc:	e002      	b.n	80026d4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	221c      	movs	r2, #28
 80026da:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fe29 	bl	800235e <LL_ADC_REG_StartConversion>
 800270c:	e006      	b.n	800271c <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002716:	e001      	b.n	800271c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002718:	2302      	movs	r3, #2
 800271a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800271c:	7bfb      	ldrb	r3, [r7, #15]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b086      	sub	sp, #24
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	2b08      	cmp	r3, #8
 8002736:	d102      	bne.n	800273e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002738:	2308      	movs	r3, #8
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	e010      	b.n	8002760 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d007      	beq.n	800275c <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002750:	f043 0220 	orr.w	r2, r3, #32
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e06f      	b.n	800283c <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800275c:	2304      	movs	r3, #4
 800275e:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002760:	f7ff fc52 	bl	8002008 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002766:	e021      	b.n	80027ac <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276e:	d01d      	beq.n	80027ac <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002770:	f7ff fc4a 	bl	8002008 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d302      	bcc.n	8002786 <HAL_ADC_PollForConversion+0x60>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d112      	bne.n	80027ac <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10b      	bne.n	80027ac <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002798:	f043 0204 	orr.w	r2, r3, #4
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e047      	b.n	800283c <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0d6      	beq.n	8002768 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027be:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fcc4 	bl	8002158 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d01c      	beq.n	8002810 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	7e5b      	ldrb	r3, [r3, #25]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d118      	bne.n	8002810 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d111      	bne.n	8002810 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d105      	bne.n	8002810 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002808:	f043 0201 	orr.w	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	2b08      	cmp	r3, #8
 800281c:	d104      	bne.n	8002828 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2208      	movs	r2, #8
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	e008      	b.n	800283a <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d103      	bne.n	800283a <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	220c      	movs	r2, #12
 8002838:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b0b6      	sub	sp, #216	@ 0xd8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002870:	2300      	movs	r3, #0
 8002872:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x22>
 800287e:	2302      	movs	r3, #2
 8002880:	e3d5      	b.n	800302e <HAL_ADC_ConfigChannel+0x7ce>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fd79 	bl	8002386 <LL_ADC_REG_IsConversionOngoing>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	f040 83ba 	bne.w	8003010 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b05      	cmp	r3, #5
 80028aa:	d824      	bhi.n	80028f6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	3b02      	subs	r3, #2
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d81b      	bhi.n	80028ee <HAL_ADC_ConfigChannel+0x8e>
 80028b6:	a201      	add	r2, pc, #4	@ (adr r2, 80028bc <HAL_ADC_ConfigChannel+0x5c>)
 80028b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028bc:	080028cd 	.word	0x080028cd
 80028c0:	080028d5 	.word	0x080028d5
 80028c4:	080028dd 	.word	0x080028dd
 80028c8:	080028e5 	.word	0x080028e5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80028cc:	230c      	movs	r3, #12
 80028ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028d2:	e010      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80028d4:	2312      	movs	r3, #18
 80028d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028da:	e00c      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80028dc:	2318      	movs	r3, #24
 80028de:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028e2:	e008      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80028e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028ec:	e003      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80028ee:	2306      	movs	r3, #6
 80028f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028f4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002904:	f7ff fc3b 	bl	800217e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fd3a 	bl	8002386 <LL_ADC_REG_IsConversionOngoing>
 8002912:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fd46 	bl	80023ac <LL_ADC_INJ_IsConversionOngoing>
 8002920:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002924:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002928:	2b00      	cmp	r3, #0
 800292a:	f040 81bf 	bne.w	8002cac <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800292e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002932:	2b00      	cmp	r3, #0
 8002934:	f040 81ba 	bne.w	8002cac <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002940:	d10f      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2200      	movs	r2, #0
 800294c:	4619      	mov	r1, r3
 800294e:	f7ff fc42 	bl	80021d6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff fbe9 	bl	8002132 <LL_ADC_SetSamplingTimeCommonConfig>
 8002960:	e00e      	b.n	8002980 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6819      	ldr	r1, [r3, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	461a      	mov	r2, r3
 8002970:	f7ff fc31 	bl	80021d6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2100      	movs	r1, #0
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fbd9 	bl	8002132 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	695a      	ldr	r2, [r3, #20]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	08db      	lsrs	r3, r3, #3
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d00a      	beq.n	80029b8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6919      	ldr	r1, [r3, #16]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029b2:	f7ff fb69 	bl	8002088 <LL_ADC_SetOffset>
 80029b6:	e179      	b.n	8002cac <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fb86 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10a      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x184>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fb7b 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 80029da:	4603      	mov	r3, r0
 80029dc:	0e9b      	lsrs	r3, r3, #26
 80029de:	f003 021f 	and.w	r2, r3, #31
 80029e2:	e01e      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x1c2>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fb70 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002a12:	2320      	movs	r3, #32
 8002a14:	e004      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002a16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d105      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x1da>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	0e9b      	lsrs	r3, r3, #26
 8002a34:	f003 031f 	and.w	r3, r3, #31
 8002a38:	e018      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x20c>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002a4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002a56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002a5e:	2320      	movs	r3, #32
 8002a60:	e004      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002a62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a66:	fab3 f383 	clz	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d106      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2200      	movs	r2, #0
 8002a76:	2100      	movs	r1, #0
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff fb3f 	bl	80020fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2101      	movs	r1, #1
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fb23 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10a      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x24a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2101      	movs	r1, #1
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fb18 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	0e9b      	lsrs	r3, r3, #26
 8002aa4:	f003 021f 	and.w	r2, r3, #31
 8002aa8:	e01e      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x288>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2101      	movs	r1, #1
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fb0d 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002ac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002acc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002ad0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002ad8:	2320      	movs	r3, #32
 8002ada:	e004      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002adc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ae0:	fab3 f383 	clz	r3, r3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d105      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x2a0>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	0e9b      	lsrs	r3, r3, #26
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	e018      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x2d2>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002b14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002b1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002b24:	2320      	movs	r3, #32
 8002b26:	e004      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002b28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b2c:	fab3 f383 	clz	r3, r3
 8002b30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d106      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fadc 	bl	80020fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2102      	movs	r1, #2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fac0 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10a      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x310>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2102      	movs	r1, #2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fab5 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002b66:	4603      	mov	r3, r0
 8002b68:	0e9b      	lsrs	r3, r3, #26
 8002b6a:	f003 021f 	and.w	r2, r3, #31
 8002b6e:	e01e      	b.n	8002bae <HAL_ADC_ConfigChannel+0x34e>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2102      	movs	r1, #2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff faaa 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002b8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002b9e:	2320      	movs	r3, #32
 8002ba0:	e004      	b.n	8002bac <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d105      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x366>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	0e9b      	lsrs	r3, r3, #26
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	e014      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x390>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002bd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bd6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002bda:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002be2:	2320      	movs	r3, #32
 8002be4:	e004      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002be6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d106      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2102      	movs	r1, #2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff fa7d 	bl	80020fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2103      	movs	r1, #3
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fa61 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10a      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x3ce>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2103      	movs	r1, #3
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fa56 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002c24:	4603      	mov	r3, r0
 8002c26:	0e9b      	lsrs	r3, r3, #26
 8002c28:	f003 021f 	and.w	r2, r3, #31
 8002c2c:	e017      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x3fe>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2103      	movs	r1, #3
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fa4b 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c40:	fa93 f3a3 	rbit	r3, r3
 8002c44:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002c46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c48:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002c4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002c50:	2320      	movs	r3, #32
 8002c52:	e003      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002c54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c56:	fab3 f383 	clz	r3, r3
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d105      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x416>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	0e9b      	lsrs	r3, r3, #26
 8002c70:	f003 031f 	and.w	r3, r3, #31
 8002c74:	e011      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x43a>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c7e:	fa93 f3a3 	rbit	r3, r3
 8002c82:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002c84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c86:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002c88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002c8e:	2320      	movs	r3, #32
 8002c90:	e003      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002c92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c94:	fab3 f383 	clz	r3, r3
 8002c98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d106      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2103      	movs	r1, #3
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fa28 	bl	80020fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fb41 	bl	8002338 <LL_ADC_IsEnabled>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f040 813f 	bne.w	8002f3c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6818      	ldr	r0, [r3, #0]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	6819      	ldr	r1, [r3, #0]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f7ff faae 	bl	800222c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4a8e      	ldr	r2, [pc, #568]	@ (8002f10 <HAL_ADC_ConfigChannel+0x6b0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	f040 8130 	bne.w	8002f3c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10b      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x4a4>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	0e9b      	lsrs	r3, r3, #26
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	f003 031f 	and.w	r3, r3, #31
 8002cf8:	2b09      	cmp	r3, #9
 8002cfa:	bf94      	ite	ls
 8002cfc:	2301      	movls	r3, #1
 8002cfe:	2300      	movhi	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	e019      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x4d8>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d0c:	fa93 f3a3 	rbit	r3, r3
 8002d10:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002d16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002d1c:	2320      	movs	r3, #32
 8002d1e:	e003      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002d20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	2b09      	cmp	r3, #9
 8002d30:	bf94      	ite	ls
 8002d32:	2301      	movls	r3, #1
 8002d34:	2300      	movhi	r3, #0
 8002d36:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d079      	beq.n	8002e30 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d107      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x4f8>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	0e9b      	lsrs	r3, r3, #26
 8002d4e:	3301      	adds	r3, #1
 8002d50:	069b      	lsls	r3, r3, #26
 8002d52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d56:	e015      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x524>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d68:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002d6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002d70:	2320      	movs	r3, #32
 8002d72:	e003      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002d74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	069b      	lsls	r3, r3, #26
 8002d80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d109      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x544>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	0e9b      	lsrs	r3, r3, #26
 8002d96:	3301      	adds	r3, #1
 8002d98:	f003 031f 	and.w	r3, r3, #31
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002da2:	e017      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x574>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002db4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002db6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002dbc:	2320      	movs	r3, #32
 8002dbe:	e003      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002dc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	3301      	adds	r3, #1
 8002dca:	f003 031f 	and.w	r3, r3, #31
 8002dce:	2101      	movs	r1, #1
 8002dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd4:	ea42 0103 	orr.w	r1, r2, r3
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x59a>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	0e9b      	lsrs	r3, r3, #26
 8002dea:	3301      	adds	r3, #1
 8002dec:	f003 021f 	and.w	r2, r3, #31
 8002df0:	4613      	mov	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	4413      	add	r3, r2
 8002df6:	051b      	lsls	r3, r3, #20
 8002df8:	e018      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x5cc>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002e12:	2320      	movs	r3, #32
 8002e14:	e003      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e18:	fab3 f383 	clz	r3, r3
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f003 021f 	and.w	r2, r3, #31
 8002e24:	4613      	mov	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4413      	add	r3, r2
 8002e2a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	e080      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d107      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x5ec>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	0e9b      	lsrs	r3, r3, #26
 8002e42:	3301      	adds	r3, #1
 8002e44:	069b      	lsls	r3, r3, #26
 8002e46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e4a:	e015      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x618>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002e64:	2320      	movs	r3, #32
 8002e66:	e003      	b.n	8002e70 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	3301      	adds	r3, #1
 8002e72:	069b      	lsls	r3, r3, #26
 8002e74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d109      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x638>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	0e9b      	lsrs	r3, r3, #26
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	2101      	movs	r1, #1
 8002e92:	fa01 f303 	lsl.w	r3, r1, r3
 8002e96:	e017      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x668>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	61bb      	str	r3, [r7, #24]
  return result;
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002eb0:	2320      	movs	r3, #32
 8002eb2:	e003      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	f003 031f 	and.w	r3, r3, #31
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec8:	ea42 0103 	orr.w	r1, r2, r3
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10d      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x694>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	0e9b      	lsrs	r3, r3, #26
 8002ede:	3301      	adds	r3, #1
 8002ee0:	f003 021f 	and.w	r2, r3, #31
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	4413      	add	r3, r2
 8002eea:	3b1e      	subs	r3, #30
 8002eec:	051b      	lsls	r3, r3, #20
 8002eee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ef2:	e01d      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x6d0>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	fa93 f3a3 	rbit	r3, r3
 8002f00:	60fb      	str	r3, [r7, #12]
  return result;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d103      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	e005      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x6bc>
 8002f10:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	f003 021f 	and.w	r2, r3, #31
 8002f22:	4613      	mov	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4413      	add	r3, r2
 8002f28:	3b1e      	subs	r3, #30
 8002f2a:	051b      	lsls	r3, r3, #20
 8002f2c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f30:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f36:	4619      	mov	r1, r3
 8002f38:	f7ff f94d 	bl	80021d6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b3d      	ldr	r3, [pc, #244]	@ (8003038 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d06c      	beq.n	8003022 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f48:	483c      	ldr	r0, [pc, #240]	@ (800303c <HAL_ADC_ConfigChannel+0x7dc>)
 8002f4a:	f7ff f88f 	bl	800206c <LL_ADC_GetCommonPathInternalCh>
 8002f4e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a3a      	ldr	r2, [pc, #232]	@ (8003040 <HAL_ADC_ConfigChannel+0x7e0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d127      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d121      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a35      	ldr	r2, [pc, #212]	@ (8003044 <HAL_ADC_ConfigChannel+0x7e4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d157      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f76:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	482f      	ldr	r0, [pc, #188]	@ (800303c <HAL_ADC_ConfigChannel+0x7dc>)
 8002f7e:	f7ff f862 	bl	8002046 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f82:	4b31      	ldr	r3, [pc, #196]	@ (8003048 <HAL_ADC_ConfigChannel+0x7e8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	099b      	lsrs	r3, r3, #6
 8002f88:	4a30      	ldr	r2, [pc, #192]	@ (800304c <HAL_ADC_ConfigChannel+0x7ec>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	099b      	lsrs	r3, r3, #6
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	4613      	mov	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f9c:	e002      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f9      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002faa:	e03a      	b.n	8003022 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a27      	ldr	r2, [pc, #156]	@ (8003050 <HAL_ADC_ConfigChannel+0x7f0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d113      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10d      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8003044 <HAL_ADC_ConfigChannel+0x7e4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d12a      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4819      	ldr	r0, [pc, #100]	@ (800303c <HAL_ADC_ConfigChannel+0x7dc>)
 8002fd8:	f7ff f835 	bl	8002046 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fdc:	e021      	b.n	8003022 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8003054 <HAL_ADC_ConfigChannel+0x7f4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d11c      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fe8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d116      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a12      	ldr	r2, [pc, #72]	@ (8003044 <HAL_ADC_ConfigChannel+0x7e4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d111      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ffe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003002:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003006:	4619      	mov	r1, r3
 8003008:	480c      	ldr	r0, [pc, #48]	@ (800303c <HAL_ADC_ConfigChannel+0x7dc>)
 800300a:	f7ff f81c 	bl	8002046 <LL_ADC_SetCommonPathInternalCh>
 800300e:	e008      	b.n	8003022 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003014:	f043 0220 	orr.w	r2, r3, #32
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800302a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800302e:	4618      	mov	r0, r3
 8003030:	37d8      	adds	r7, #216	@ 0xd8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	80080000 	.word	0x80080000
 800303c:	50040300 	.word	0x50040300
 8003040:	c7520000 	.word	0xc7520000
 8003044:	50040000 	.word	0x50040000
 8003048:	20000004 	.word	0x20000004
 800304c:	053e2d63 	.word	0x053e2d63
 8003050:	cb840000 	.word	0xcb840000
 8003054:	80000001 	.word	0x80000001

08003058 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003060:	2300      	movs	r3, #0
 8003062:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff f965 	bl	8002338 <LL_ADC_IsEnabled>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d169      	bne.n	8003148 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	4b36      	ldr	r3, [pc, #216]	@ (8003154 <ADC_Enable+0xfc>)
 800307c:	4013      	ands	r3, r2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00d      	beq.n	800309e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003086:	f043 0210 	orr.w	r2, r3, #16
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003092:	f043 0201 	orr.w	r2, r3, #1
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e055      	b.n	800314a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff f934 	bl	8002310 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80030a8:	482b      	ldr	r0, [pc, #172]	@ (8003158 <ADC_Enable+0x100>)
 80030aa:	f7fe ffdf 	bl	800206c <LL_ADC_GetCommonPathInternalCh>
 80030ae:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80030b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d013      	beq.n	80030e0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030b8:	4b28      	ldr	r3, [pc, #160]	@ (800315c <ADC_Enable+0x104>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	099b      	lsrs	r3, r3, #6
 80030be:	4a28      	ldr	r2, [pc, #160]	@ (8003160 <ADC_Enable+0x108>)
 80030c0:	fba2 2303 	umull	r2, r3, r2, r3
 80030c4:	099b      	lsrs	r3, r3, #6
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	4613      	mov	r3, r2
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030d2:	e002      	b.n	80030da <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1f9      	bne.n	80030d4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80030e0:	f7fe ff92 	bl	8002008 <HAL_GetTick>
 80030e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030e6:	e028      	b.n	800313a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff f923 	bl	8002338 <LL_ADC_IsEnabled>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d104      	bne.n	8003102 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff f907 	bl	8002310 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003102:	f7fe ff81 	bl	8002008 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d914      	bls.n	800313a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b01      	cmp	r3, #1
 800311c:	d00d      	beq.n	800313a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003122:	f043 0210 	orr.w	r2, r3, #16
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312e:	f043 0201 	orr.w	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e007      	b.n	800314a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b01      	cmp	r3, #1
 8003146:	d1cf      	bne.n	80030e8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	8000003f 	.word	0x8000003f
 8003158:	50040300 	.word	0x50040300
 800315c:	20000004 	.word	0x20000004
 8003160:	053e2d63 	.word	0x053e2d63

08003164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003174:	4b0c      	ldr	r3, [pc, #48]	@ (80031a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003180:	4013      	ands	r3, r2
 8003182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800318c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003196:	4a04      	ldr	r2, [pc, #16]	@ (80031a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	60d3      	str	r3, [r2, #12]
}
 800319c:	bf00      	nop
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b0:	4b04      	ldr	r3, [pc, #16]	@ (80031c4 <__NVIC_GetPriorityGrouping+0x18>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	0a1b      	lsrs	r3, r3, #8
 80031b6:	f003 0307 	and.w	r3, r3, #7
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	db0b      	blt.n	80031f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	f003 021f 	and.w	r2, r3, #31
 80031e0:	4907      	ldr	r1, [pc, #28]	@ (8003200 <__NVIC_EnableIRQ+0x38>)
 80031e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	2001      	movs	r0, #1
 80031ea:	fa00 f202 	lsl.w	r2, r0, r2
 80031ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	e000e100 	.word	0xe000e100

08003204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	6039      	str	r1, [r7, #0]
 800320e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003214:	2b00      	cmp	r3, #0
 8003216:	db0a      	blt.n	800322e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	b2da      	uxtb	r2, r3
 800321c:	490c      	ldr	r1, [pc, #48]	@ (8003250 <__NVIC_SetPriority+0x4c>)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	0112      	lsls	r2, r2, #4
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	440b      	add	r3, r1
 8003228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800322c:	e00a      	b.n	8003244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	b2da      	uxtb	r2, r3
 8003232:	4908      	ldr	r1, [pc, #32]	@ (8003254 <__NVIC_SetPriority+0x50>)
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	3b04      	subs	r3, #4
 800323c:	0112      	lsls	r2, r2, #4
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	440b      	add	r3, r1
 8003242:	761a      	strb	r2, [r3, #24]
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	e000e100 	.word	0xe000e100
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003258:	b480      	push	{r7}
 800325a:	b089      	sub	sp, #36	@ 0x24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f1c3 0307 	rsb	r3, r3, #7
 8003272:	2b04      	cmp	r3, #4
 8003274:	bf28      	it	cs
 8003276:	2304      	movcs	r3, #4
 8003278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	3304      	adds	r3, #4
 800327e:	2b06      	cmp	r3, #6
 8003280:	d902      	bls.n	8003288 <NVIC_EncodePriority+0x30>
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3b03      	subs	r3, #3
 8003286:	e000      	b.n	800328a <NVIC_EncodePriority+0x32>
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800328c:	f04f 32ff 	mov.w	r2, #4294967295
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43da      	mvns	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	401a      	ands	r2, r3
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a0:	f04f 31ff 	mov.w	r1, #4294967295
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	fa01 f303 	lsl.w	r3, r1, r3
 80032aa:	43d9      	mvns	r1, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b0:	4313      	orrs	r3, r2
         );
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3724      	adds	r7, #36	@ 0x24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b082      	sub	sp, #8
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7ff ff4c 	bl	8003164 <__NVIC_SetPriorityGrouping>
}
 80032cc:	bf00      	nop
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032e6:	f7ff ff61 	bl	80031ac <__NVIC_GetPriorityGrouping>
 80032ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	68b9      	ldr	r1, [r7, #8]
 80032f0:	6978      	ldr	r0, [r7, #20]
 80032f2:	f7ff ffb1 	bl	8003258 <NVIC_EncodePriority>
 80032f6:	4602      	mov	r2, r0
 80032f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032fc:	4611      	mov	r1, r2
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff ff80 	bl	8003204 <__NVIC_SetPriority>
}
 8003304:	bf00      	nop
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff ff54 	bl	80031c8 <__NVIC_EnableIRQ>
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e0ac      	b.n	8003494 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f8b2 	bl	80034a8 <DFSDM_GetChannelFromInstance>
 8003344:	4603      	mov	r3, r0
 8003346:	4a55      	ldr	r2, [pc, #340]	@ (800349c <HAL_DFSDM_ChannelInit+0x174>)
 8003348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e09f      	b.n	8003494 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7fd ffd9 	bl	800130c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800335a:	4b51      	ldr	r3, [pc, #324]	@ (80034a0 <HAL_DFSDM_ChannelInit+0x178>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3301      	adds	r3, #1
 8003360:	4a4f      	ldr	r2, [pc, #316]	@ (80034a0 <HAL_DFSDM_ChannelInit+0x178>)
 8003362:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003364:	4b4e      	ldr	r3, [pc, #312]	@ (80034a0 <HAL_DFSDM_ChannelInit+0x178>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d125      	bne.n	80033b8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800336c:	4b4d      	ldr	r3, [pc, #308]	@ (80034a4 <HAL_DFSDM_ChannelInit+0x17c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a4c      	ldr	r2, [pc, #304]	@ (80034a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003372:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003376:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003378:	4b4a      	ldr	r3, [pc, #296]	@ (80034a4 <HAL_DFSDM_ChannelInit+0x17c>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4948      	ldr	r1, [pc, #288]	@ (80034a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003386:	4b47      	ldr	r3, [pc, #284]	@ (80034a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a46      	ldr	r2, [pc, #280]	@ (80034a4 <HAL_DFSDM_ChannelInit+0x17c>)
 800338c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003390:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	791b      	ldrb	r3, [r3, #4]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d108      	bne.n	80033ac <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800339a:	4b42      	ldr	r3, [pc, #264]	@ (80034a4 <HAL_DFSDM_ChannelInit+0x17c>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	041b      	lsls	r3, r3, #16
 80033a6:	493f      	ldr	r1, [pc, #252]	@ (80034a4 <HAL_DFSDM_ChannelInit+0x17c>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80033ac:	4b3d      	ldr	r3, [pc, #244]	@ (80034a4 <HAL_DFSDM_ChannelInit+0x17c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a3c      	ldr	r2, [pc, #240]	@ (80034a4 <HAL_DFSDM_ChannelInit+0x17c>)
 80033b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033b6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80033c6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6819      	ldr	r1, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80033d6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80033dc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 020f 	bic.w	r2, r2, #15
 80033f4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6819      	ldr	r1, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003404:	431a      	orrs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 800341c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6899      	ldr	r1, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342c:	3b01      	subs	r3, #1
 800342e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f002 0207 	and.w	r2, r2, #7
 8003448:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6859      	ldr	r1, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003454:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003474:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f000 f810 	bl	80034a8 <DFSDM_GetChannelFromInstance>
 8003488:	4602      	mov	r2, r0
 800348a:	4904      	ldr	r1, [pc, #16]	@ (800349c <HAL_DFSDM_ChannelInit+0x174>)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	200005b0 	.word	0x200005b0
 80034a0:	200005ac 	.word	0x200005ac
 80034a4:	40016000 	.word	0x40016000

080034a8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003524 <DFSDM_GetChannelFromInstance+0x7c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d102      	bne.n	80034be <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	e02b      	b.n	8003516 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a19      	ldr	r2, [pc, #100]	@ (8003528 <DFSDM_GetChannelFromInstance+0x80>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d102      	bne.n	80034cc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80034c6:	2301      	movs	r3, #1
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	e024      	b.n	8003516 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a17      	ldr	r2, [pc, #92]	@ (800352c <DFSDM_GetChannelFromInstance+0x84>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d102      	bne.n	80034da <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80034d4:	2302      	movs	r3, #2
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	e01d      	b.n	8003516 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a14      	ldr	r2, [pc, #80]	@ (8003530 <DFSDM_GetChannelFromInstance+0x88>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d102      	bne.n	80034e8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80034e2:	2304      	movs	r3, #4
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	e016      	b.n	8003516 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a12      	ldr	r2, [pc, #72]	@ (8003534 <DFSDM_GetChannelFromInstance+0x8c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d102      	bne.n	80034f6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80034f0:	2305      	movs	r3, #5
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	e00f      	b.n	8003516 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003538 <DFSDM_GetChannelFromInstance+0x90>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d102      	bne.n	8003504 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80034fe:	2306      	movs	r3, #6
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	e008      	b.n	8003516 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a0d      	ldr	r2, [pc, #52]	@ (800353c <DFSDM_GetChannelFromInstance+0x94>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d102      	bne.n	8003512 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800350c:	2307      	movs	r3, #7
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	e001      	b.n	8003516 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003512:	2303      	movs	r3, #3
 8003514:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003516:	68fb      	ldr	r3, [r7, #12]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	40016000 	.word	0x40016000
 8003528:	40016020 	.word	0x40016020
 800352c:	40016040 	.word	0x40016040
 8003530:	40016080 	.word	0x40016080
 8003534:	400160a0 	.word	0x400160a0
 8003538:	400160c0 	.word	0x400160c0
 800353c:	400160e0 	.word	0x400160e0

08003540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800354a:	2300      	movs	r3, #0
 800354c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800354e:	e166      	b.n	800381e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	2101      	movs	r1, #1
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	fa01 f303 	lsl.w	r3, r1, r3
 800355c:	4013      	ands	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 8158 	beq.w	8003818 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	2b01      	cmp	r3, #1
 8003572:	d005      	beq.n	8003580 <HAL_GPIO_Init+0x40>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d130      	bne.n	80035e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	2203      	movs	r2, #3
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4013      	ands	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035b6:	2201      	movs	r2, #1
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4013      	ands	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	091b      	lsrs	r3, r3, #4
 80035cc:	f003 0201 	and.w	r2, r3, #1
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d017      	beq.n	800361e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	2203      	movs	r2, #3
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d123      	bne.n	8003672 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	08da      	lsrs	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3208      	adds	r2, #8
 8003632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003636:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	220f      	movs	r2, #15
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43db      	mvns	r3, r3
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4013      	ands	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	08da      	lsrs	r2, r3, #3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3208      	adds	r2, #8
 800366c:	6939      	ldr	r1, [r7, #16]
 800366e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	2203      	movs	r2, #3
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4013      	ands	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f003 0203 	and.w	r2, r3, #3
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 80b2 	beq.w	8003818 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036b4:	4b61      	ldr	r3, [pc, #388]	@ (800383c <HAL_GPIO_Init+0x2fc>)
 80036b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b8:	4a60      	ldr	r2, [pc, #384]	@ (800383c <HAL_GPIO_Init+0x2fc>)
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	6613      	str	r3, [r2, #96]	@ 0x60
 80036c0:	4b5e      	ldr	r3, [pc, #376]	@ (800383c <HAL_GPIO_Init+0x2fc>)
 80036c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036cc:	4a5c      	ldr	r2, [pc, #368]	@ (8003840 <HAL_GPIO_Init+0x300>)
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	089b      	lsrs	r3, r3, #2
 80036d2:	3302      	adds	r3, #2
 80036d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f003 0303 	and.w	r3, r3, #3
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	220f      	movs	r2, #15
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4013      	ands	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80036f6:	d02b      	beq.n	8003750 <HAL_GPIO_Init+0x210>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a52      	ldr	r2, [pc, #328]	@ (8003844 <HAL_GPIO_Init+0x304>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d025      	beq.n	800374c <HAL_GPIO_Init+0x20c>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a51      	ldr	r2, [pc, #324]	@ (8003848 <HAL_GPIO_Init+0x308>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d01f      	beq.n	8003748 <HAL_GPIO_Init+0x208>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a50      	ldr	r2, [pc, #320]	@ (800384c <HAL_GPIO_Init+0x30c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d019      	beq.n	8003744 <HAL_GPIO_Init+0x204>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a4f      	ldr	r2, [pc, #316]	@ (8003850 <HAL_GPIO_Init+0x310>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d013      	beq.n	8003740 <HAL_GPIO_Init+0x200>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a4e      	ldr	r2, [pc, #312]	@ (8003854 <HAL_GPIO_Init+0x314>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00d      	beq.n	800373c <HAL_GPIO_Init+0x1fc>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a4d      	ldr	r2, [pc, #308]	@ (8003858 <HAL_GPIO_Init+0x318>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d007      	beq.n	8003738 <HAL_GPIO_Init+0x1f8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a4c      	ldr	r2, [pc, #304]	@ (800385c <HAL_GPIO_Init+0x31c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d101      	bne.n	8003734 <HAL_GPIO_Init+0x1f4>
 8003730:	2307      	movs	r3, #7
 8003732:	e00e      	b.n	8003752 <HAL_GPIO_Init+0x212>
 8003734:	2308      	movs	r3, #8
 8003736:	e00c      	b.n	8003752 <HAL_GPIO_Init+0x212>
 8003738:	2306      	movs	r3, #6
 800373a:	e00a      	b.n	8003752 <HAL_GPIO_Init+0x212>
 800373c:	2305      	movs	r3, #5
 800373e:	e008      	b.n	8003752 <HAL_GPIO_Init+0x212>
 8003740:	2304      	movs	r3, #4
 8003742:	e006      	b.n	8003752 <HAL_GPIO_Init+0x212>
 8003744:	2303      	movs	r3, #3
 8003746:	e004      	b.n	8003752 <HAL_GPIO_Init+0x212>
 8003748:	2302      	movs	r3, #2
 800374a:	e002      	b.n	8003752 <HAL_GPIO_Init+0x212>
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <HAL_GPIO_Init+0x212>
 8003750:	2300      	movs	r3, #0
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	f002 0203 	and.w	r2, r2, #3
 8003758:	0092      	lsls	r2, r2, #2
 800375a:	4093      	lsls	r3, r2
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003762:	4937      	ldr	r1, [pc, #220]	@ (8003840 <HAL_GPIO_Init+0x300>)
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	089b      	lsrs	r3, r3, #2
 8003768:	3302      	adds	r3, #2
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003770:	4b3b      	ldr	r3, [pc, #236]	@ (8003860 <HAL_GPIO_Init+0x320>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	43db      	mvns	r3, r3
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4013      	ands	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003794:	4a32      	ldr	r2, [pc, #200]	@ (8003860 <HAL_GPIO_Init+0x320>)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800379a:	4b31      	ldr	r3, [pc, #196]	@ (8003860 <HAL_GPIO_Init+0x320>)
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	43db      	mvns	r3, r3
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4013      	ands	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037be:	4a28      	ldr	r2, [pc, #160]	@ (8003860 <HAL_GPIO_Init+0x320>)
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80037c4:	4b26      	ldr	r3, [pc, #152]	@ (8003860 <HAL_GPIO_Init+0x320>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	43db      	mvns	r3, r3
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4013      	ands	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003860 <HAL_GPIO_Init+0x320>)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003860 <HAL_GPIO_Init+0x320>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	43db      	mvns	r3, r3
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4013      	ands	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003812:	4a13      	ldr	r2, [pc, #76]	@ (8003860 <HAL_GPIO_Init+0x320>)
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	3301      	adds	r3, #1
 800381c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	f47f ae91 	bne.w	8003550 <HAL_GPIO_Init+0x10>
  }
}
 800382e:	bf00      	nop
 8003830:	bf00      	nop
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	40021000 	.word	0x40021000
 8003840:	40010000 	.word	0x40010000
 8003844:	48000400 	.word	0x48000400
 8003848:	48000800 	.word	0x48000800
 800384c:	48000c00 	.word	0x48000c00
 8003850:	48001000 	.word	0x48001000
 8003854:	48001400 	.word	0x48001400
 8003858:	48001800 	.word	0x48001800
 800385c:	48001c00 	.word	0x48001c00
 8003860:	40010400 	.word	0x40010400

08003864 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003872:	e0c9      	b.n	8003a08 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003874:	2201      	movs	r2, #1
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	4013      	ands	r3, r2
 8003880:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80bc 	beq.w	8003a02 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800388a:	4a66      	ldr	r2, [pc, #408]	@ (8003a24 <HAL_GPIO_DeInit+0x1c0>)
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	089b      	lsrs	r3, r3, #2
 8003890:	3302      	adds	r3, #2
 8003892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003896:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	220f      	movs	r2, #15
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4013      	ands	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80038b2:	d02b      	beq.n	800390c <HAL_GPIO_DeInit+0xa8>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a5c      	ldr	r2, [pc, #368]	@ (8003a28 <HAL_GPIO_DeInit+0x1c4>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d025      	beq.n	8003908 <HAL_GPIO_DeInit+0xa4>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a5b      	ldr	r2, [pc, #364]	@ (8003a2c <HAL_GPIO_DeInit+0x1c8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d01f      	beq.n	8003904 <HAL_GPIO_DeInit+0xa0>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a5a      	ldr	r2, [pc, #360]	@ (8003a30 <HAL_GPIO_DeInit+0x1cc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d019      	beq.n	8003900 <HAL_GPIO_DeInit+0x9c>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a59      	ldr	r2, [pc, #356]	@ (8003a34 <HAL_GPIO_DeInit+0x1d0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d013      	beq.n	80038fc <HAL_GPIO_DeInit+0x98>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a58      	ldr	r2, [pc, #352]	@ (8003a38 <HAL_GPIO_DeInit+0x1d4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d00d      	beq.n	80038f8 <HAL_GPIO_DeInit+0x94>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a57      	ldr	r2, [pc, #348]	@ (8003a3c <HAL_GPIO_DeInit+0x1d8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d007      	beq.n	80038f4 <HAL_GPIO_DeInit+0x90>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a56      	ldr	r2, [pc, #344]	@ (8003a40 <HAL_GPIO_DeInit+0x1dc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d101      	bne.n	80038f0 <HAL_GPIO_DeInit+0x8c>
 80038ec:	2307      	movs	r3, #7
 80038ee:	e00e      	b.n	800390e <HAL_GPIO_DeInit+0xaa>
 80038f0:	2308      	movs	r3, #8
 80038f2:	e00c      	b.n	800390e <HAL_GPIO_DeInit+0xaa>
 80038f4:	2306      	movs	r3, #6
 80038f6:	e00a      	b.n	800390e <HAL_GPIO_DeInit+0xaa>
 80038f8:	2305      	movs	r3, #5
 80038fa:	e008      	b.n	800390e <HAL_GPIO_DeInit+0xaa>
 80038fc:	2304      	movs	r3, #4
 80038fe:	e006      	b.n	800390e <HAL_GPIO_DeInit+0xaa>
 8003900:	2303      	movs	r3, #3
 8003902:	e004      	b.n	800390e <HAL_GPIO_DeInit+0xaa>
 8003904:	2302      	movs	r3, #2
 8003906:	e002      	b.n	800390e <HAL_GPIO_DeInit+0xaa>
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <HAL_GPIO_DeInit+0xaa>
 800390c:	2300      	movs	r3, #0
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	f002 0203 	and.w	r2, r2, #3
 8003914:	0092      	lsls	r2, r2, #2
 8003916:	4093      	lsls	r3, r2
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	429a      	cmp	r2, r3
 800391c:	d132      	bne.n	8003984 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800391e:	4b49      	ldr	r3, [pc, #292]	@ (8003a44 <HAL_GPIO_DeInit+0x1e0>)
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	43db      	mvns	r3, r3
 8003926:	4947      	ldr	r1, [pc, #284]	@ (8003a44 <HAL_GPIO_DeInit+0x1e0>)
 8003928:	4013      	ands	r3, r2
 800392a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800392c:	4b45      	ldr	r3, [pc, #276]	@ (8003a44 <HAL_GPIO_DeInit+0x1e0>)
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	43db      	mvns	r3, r3
 8003934:	4943      	ldr	r1, [pc, #268]	@ (8003a44 <HAL_GPIO_DeInit+0x1e0>)
 8003936:	4013      	ands	r3, r2
 8003938:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800393a:	4b42      	ldr	r3, [pc, #264]	@ (8003a44 <HAL_GPIO_DeInit+0x1e0>)
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	43db      	mvns	r3, r3
 8003942:	4940      	ldr	r1, [pc, #256]	@ (8003a44 <HAL_GPIO_DeInit+0x1e0>)
 8003944:	4013      	ands	r3, r2
 8003946:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003948:	4b3e      	ldr	r3, [pc, #248]	@ (8003a44 <HAL_GPIO_DeInit+0x1e0>)
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	43db      	mvns	r3, r3
 8003950:	493c      	ldr	r1, [pc, #240]	@ (8003a44 <HAL_GPIO_DeInit+0x1e0>)
 8003952:	4013      	ands	r3, r2
 8003954:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f003 0303 	and.w	r3, r3, #3
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	220f      	movs	r2, #15
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003966:	4a2f      	ldr	r2, [pc, #188]	@ (8003a24 <HAL_GPIO_DeInit+0x1c0>)
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	089b      	lsrs	r3, r3, #2
 800396c:	3302      	adds	r3, #2
 800396e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	43da      	mvns	r2, r3
 8003976:	482b      	ldr	r0, [pc, #172]	@ (8003a24 <HAL_GPIO_DeInit+0x1c0>)
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	089b      	lsrs	r3, r3, #2
 800397c:	400a      	ands	r2, r1
 800397e:	3302      	adds	r3, #2
 8003980:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	2103      	movs	r1, #3
 800398e:	fa01 f303 	lsl.w	r3, r1, r3
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	08da      	lsrs	r2, r3, #3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3208      	adds	r2, #8
 80039a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	220f      	movs	r2, #15
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	43db      	mvns	r3, r3
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	08d2      	lsrs	r2, r2, #3
 80039b8:	4019      	ands	r1, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3208      	adds	r2, #8
 80039be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	2103      	movs	r1, #3
 80039cc:	fa01 f303 	lsl.w	r3, r1, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	401a      	ands	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	2101      	movs	r1, #1
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	fa01 f303 	lsl.w	r3, r1, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	401a      	ands	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	2103      	movs	r1, #3
 80039f6:	fa01 f303 	lsl.w	r3, r1, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	401a      	ands	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	3301      	adds	r3, #1
 8003a06:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f47f af2f 	bne.w	8003874 <HAL_GPIO_DeInit+0x10>
  }
}
 8003a16:	bf00      	nop
 8003a18:	bf00      	nop
 8003a1a:	371c      	adds	r7, #28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	40010000 	.word	0x40010000
 8003a28:	48000400 	.word	0x48000400
 8003a2c:	48000800 	.word	0x48000800
 8003a30:	48000c00 	.word	0x48000c00
 8003a34:	48001000 	.word	0x48001000
 8003a38:	48001400 	.word	0x48001400
 8003a3c:	48001800 	.word	0x48001800
 8003a40:	48001c00 	.word	0x48001c00
 8003a44:	40010400 	.word	0x40010400

08003a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	807b      	strh	r3, [r7, #2]
 8003a54:	4613      	mov	r3, r2
 8003a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a58:	787b      	ldrb	r3, [r7, #1]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a5e:	887a      	ldrh	r2, [r7, #2]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a64:	e002      	b.n	8003a6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a66:	887a      	ldrh	r2, [r7, #2]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a82:	4b08      	ldr	r3, [pc, #32]	@ (8003aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a84:	695a      	ldr	r2, [r3, #20]
 8003a86:	88fb      	ldrh	r3, [r7, #6]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d006      	beq.n	8003a9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a8e:	4a05      	ldr	r2, [pc, #20]	@ (8003aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 f806 	bl	8003aa8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40010400 	.word	0x40010400

08003aa8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e08d      	b.n	8003bec <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d106      	bne.n	8003aea <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7fd fc75 	bl	80013d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2224      	movs	r2, #36	@ 0x24
 8003aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0201 	bic.w	r2, r2, #1
 8003b00:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b0e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b1e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d107      	bne.n	8003b38 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b34:	609a      	str	r2, [r3, #8]
 8003b36:	e006      	b.n	8003b46 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b44:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d108      	bne.n	8003b60 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b5c:	605a      	str	r2, [r3, #4]
 8003b5e:	e007      	b.n	8003b70 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b6e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6812      	ldr	r2, [r2, #0]
 8003b7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b82:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b92:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69d9      	ldr	r1, [r3, #28]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1a      	ldr	r2, [r3, #32]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f042 0201 	orr.w	r2, r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e021      	b.n	8003c4a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2224      	movs	r2, #36	@ 0x24
 8003c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0201 	bic.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fd fc7a 	bl	8001518 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	4608      	mov	r0, r1
 8003c5e:	4611      	mov	r1, r2
 8003c60:	461a      	mov	r2, r3
 8003c62:	4603      	mov	r3, r0
 8003c64:	817b      	strh	r3, [r7, #10]
 8003c66:	460b      	mov	r3, r1
 8003c68:	813b      	strh	r3, [r7, #8]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	f040 80f9 	bne.w	8003e6e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <HAL_I2C_Mem_Write+0x34>
 8003c82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d105      	bne.n	8003c94 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c8e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0ed      	b.n	8003e70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_I2C_Mem_Write+0x4e>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e0e6      	b.n	8003e70 <HAL_I2C_Mem_Write+0x21c>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003caa:	f7fe f9ad 	bl	8002008 <HAL_GetTick>
 8003cae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	2319      	movs	r3, #25
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 fac3 	bl	8004248 <I2C_WaitOnFlagUntilTimeout>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0d1      	b.n	8003e70 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2221      	movs	r2, #33	@ 0x21
 8003cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2240      	movs	r2, #64	@ 0x40
 8003cd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a3a      	ldr	r2, [r7, #32]
 8003ce6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003cec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cf4:	88f8      	ldrh	r0, [r7, #6]
 8003cf6:	893a      	ldrh	r2, [r7, #8]
 8003cf8:	8979      	ldrh	r1, [r7, #10]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	9301      	str	r3, [sp, #4]
 8003cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	4603      	mov	r3, r0
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 f9d3 	bl	80040b0 <I2C_RequestMemoryWrite>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d005      	beq.n	8003d1c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0a9      	b.n	8003e70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2bff      	cmp	r3, #255	@ 0xff
 8003d24:	d90e      	bls.n	8003d44 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	22ff      	movs	r2, #255	@ 0xff
 8003d2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	8979      	ldrh	r1, [r7, #10]
 8003d34:	2300      	movs	r3, #0
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 fc3d 	bl	80045bc <I2C_TransferConfig>
 8003d42:	e00f      	b.n	8003d64 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	8979      	ldrh	r1, [r7, #10]
 8003d56:	2300      	movs	r3, #0
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 fc2c 	bl	80045bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 fabc 	bl	80042e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e07b      	b.n	8003e70 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	781a      	ldrb	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d034      	beq.n	8003e1c <HAL_I2C_Mem_Write+0x1c8>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d130      	bne.n	8003e1c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2180      	movs	r1, #128	@ 0x80
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 fa3f 	bl	8004248 <I2C_WaitOnFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e04d      	b.n	8003e70 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2bff      	cmp	r3, #255	@ 0xff
 8003ddc:	d90e      	bls.n	8003dfc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	22ff      	movs	r2, #255	@ 0xff
 8003de2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	8979      	ldrh	r1, [r7, #10]
 8003dec:	2300      	movs	r3, #0
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fbe1 	bl	80045bc <I2C_TransferConfig>
 8003dfa:	e00f      	b.n	8003e1c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	8979      	ldrh	r1, [r7, #10]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 fbd0 	bl	80045bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d19e      	bne.n	8003d64 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 faa2 	bl	8004374 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e01a      	b.n	8003e70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6859      	ldr	r1, [r3, #4]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e78 <HAL_I2C_Mem_Write+0x224>)
 8003e4e:	400b      	ands	r3, r1
 8003e50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	e000      	b.n	8003e70 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003e6e:	2302      	movs	r3, #2
  }
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	fe00e800 	.word	0xfe00e800

08003e7c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af02      	add	r7, sp, #8
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	4608      	mov	r0, r1
 8003e86:	4611      	mov	r1, r2
 8003e88:	461a      	mov	r2, r3
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	817b      	strh	r3, [r7, #10]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	813b      	strh	r3, [r7, #8]
 8003e92:	4613      	mov	r3, r2
 8003e94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	f040 80fd 	bne.w	800409e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <HAL_I2C_Mem_Read+0x34>
 8003eaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d105      	bne.n	8003ebc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003eb6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0f1      	b.n	80040a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d101      	bne.n	8003eca <HAL_I2C_Mem_Read+0x4e>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	e0ea      	b.n	80040a0 <HAL_I2C_Mem_Read+0x224>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ed2:	f7fe f899 	bl	8002008 <HAL_GetTick>
 8003ed6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	2319      	movs	r3, #25
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 f9af 	bl	8004248 <I2C_WaitOnFlagUntilTimeout>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e0d5      	b.n	80040a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2222      	movs	r2, #34	@ 0x22
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2240      	movs	r2, #64	@ 0x40
 8003f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a3a      	ldr	r2, [r7, #32]
 8003f0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f1c:	88f8      	ldrh	r0, [r7, #6]
 8003f1e:	893a      	ldrh	r2, [r7, #8]
 8003f20:	8979      	ldrh	r1, [r7, #10]
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 f913 	bl	8004158 <I2C_RequestMemoryRead>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d005      	beq.n	8003f44 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0ad      	b.n	80040a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2bff      	cmp	r3, #255	@ 0xff
 8003f4c:	d90e      	bls.n	8003f6c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	22ff      	movs	r2, #255	@ 0xff
 8003f52:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	8979      	ldrh	r1, [r7, #10]
 8003f5c:	4b52      	ldr	r3, [pc, #328]	@ (80040a8 <HAL_I2C_Mem_Read+0x22c>)
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 fb29 	bl	80045bc <I2C_TransferConfig>
 8003f6a:	e00f      	b.n	8003f8c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	8979      	ldrh	r1, [r7, #10]
 8003f7e:	4b4a      	ldr	r3, [pc, #296]	@ (80040a8 <HAL_I2C_Mem_Read+0x22c>)
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 fb18 	bl	80045bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f92:	2200      	movs	r2, #0
 8003f94:	2104      	movs	r1, #4
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 f956 	bl	8004248 <I2C_WaitOnFlagUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e07c      	b.n	80040a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d034      	beq.n	800404c <HAL_I2C_Mem_Read+0x1d0>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d130      	bne.n	800404c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2180      	movs	r1, #128	@ 0x80
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 f927 	bl	8004248 <I2C_WaitOnFlagUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e04d      	b.n	80040a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004008:	b29b      	uxth	r3, r3
 800400a:	2bff      	cmp	r3, #255	@ 0xff
 800400c:	d90e      	bls.n	800402c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	22ff      	movs	r2, #255	@ 0xff
 8004012:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004018:	b2da      	uxtb	r2, r3
 800401a:	8979      	ldrh	r1, [r7, #10]
 800401c:	2300      	movs	r3, #0
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 fac9 	bl	80045bc <I2C_TransferConfig>
 800402a:	e00f      	b.n	800404c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403a:	b2da      	uxtb	r2, r3
 800403c:	8979      	ldrh	r1, [r7, #10]
 800403e:	2300      	movs	r3, #0
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 fab8 	bl	80045bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d19a      	bne.n	8003f8c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 f98a 	bl	8004374 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e01a      	b.n	80040a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2220      	movs	r2, #32
 8004070:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6859      	ldr	r1, [r3, #4]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	4b0b      	ldr	r3, [pc, #44]	@ (80040ac <HAL_I2C_Mem_Read+0x230>)
 800407e:	400b      	ands	r3, r1
 8004080:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	e000      	b.n	80040a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800409e:	2302      	movs	r3, #2
  }
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	80002400 	.word	0x80002400
 80040ac:	fe00e800 	.word	0xfe00e800

080040b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	4608      	mov	r0, r1
 80040ba:	4611      	mov	r1, r2
 80040bc:	461a      	mov	r2, r3
 80040be:	4603      	mov	r3, r0
 80040c0:	817b      	strh	r3, [r7, #10]
 80040c2:	460b      	mov	r3, r1
 80040c4:	813b      	strh	r3, [r7, #8]
 80040c6:	4613      	mov	r3, r2
 80040c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80040ca:	88fb      	ldrh	r3, [r7, #6]
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	8979      	ldrh	r1, [r7, #10]
 80040d0:	4b20      	ldr	r3, [pc, #128]	@ (8004154 <I2C_RequestMemoryWrite+0xa4>)
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 fa6f 	bl	80045bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040de:	69fa      	ldr	r2, [r7, #28]
 80040e0:	69b9      	ldr	r1, [r7, #24]
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 f8ff 	bl	80042e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e02c      	b.n	800414c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040f2:	88fb      	ldrh	r3, [r7, #6]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d105      	bne.n	8004104 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040f8:	893b      	ldrh	r3, [r7, #8]
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	629a      	str	r2, [r3, #40]	@ 0x28
 8004102:	e015      	b.n	8004130 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004104:	893b      	ldrh	r3, [r7, #8]
 8004106:	0a1b      	lsrs	r3, r3, #8
 8004108:	b29b      	uxth	r3, r3
 800410a:	b2da      	uxtb	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	69b9      	ldr	r1, [r7, #24]
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 f8e5 	bl	80042e6 <I2C_WaitOnTXISFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e012      	b.n	800414c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004126:	893b      	ldrh	r3, [r7, #8]
 8004128:	b2da      	uxtb	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	2200      	movs	r2, #0
 8004138:	2180      	movs	r1, #128	@ 0x80
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f884 	bl	8004248 <I2C_WaitOnFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	80002000 	.word	0x80002000

08004158 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af02      	add	r7, sp, #8
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	4608      	mov	r0, r1
 8004162:	4611      	mov	r1, r2
 8004164:	461a      	mov	r2, r3
 8004166:	4603      	mov	r3, r0
 8004168:	817b      	strh	r3, [r7, #10]
 800416a:	460b      	mov	r3, r1
 800416c:	813b      	strh	r3, [r7, #8]
 800416e:	4613      	mov	r3, r2
 8004170:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004172:	88fb      	ldrh	r3, [r7, #6]
 8004174:	b2da      	uxtb	r2, r3
 8004176:	8979      	ldrh	r1, [r7, #10]
 8004178:	4b20      	ldr	r3, [pc, #128]	@ (80041fc <I2C_RequestMemoryRead+0xa4>)
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	2300      	movs	r3, #0
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 fa1c 	bl	80045bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004184:	69fa      	ldr	r2, [r7, #28]
 8004186:	69b9      	ldr	r1, [r7, #24]
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 f8ac 	bl	80042e6 <I2C_WaitOnTXISFlagUntilTimeout>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e02c      	b.n	80041f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004198:	88fb      	ldrh	r3, [r7, #6]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d105      	bne.n	80041aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800419e:	893b      	ldrh	r3, [r7, #8]
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80041a8:	e015      	b.n	80041d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041aa:	893b      	ldrh	r3, [r7, #8]
 80041ac:	0a1b      	lsrs	r3, r3, #8
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041b8:	69fa      	ldr	r2, [r7, #28]
 80041ba:	69b9      	ldr	r1, [r7, #24]
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 f892 	bl	80042e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e012      	b.n	80041f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041cc:	893b      	ldrh	r3, [r7, #8]
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	2200      	movs	r2, #0
 80041de:	2140      	movs	r1, #64	@ 0x40
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f831 	bl	8004248 <I2C_WaitOnFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e000      	b.n	80041f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	80002000 	.word	0x80002000

08004200 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b02      	cmp	r3, #2
 8004214:	d103      	bne.n	800421e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2200      	movs	r2, #0
 800421c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b01      	cmp	r3, #1
 800422a:	d007      	beq.n	800423c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699a      	ldr	r2, [r3, #24]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	619a      	str	r2, [r3, #24]
  }
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	4613      	mov	r3, r2
 8004256:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004258:	e031      	b.n	80042be <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004260:	d02d      	beq.n	80042be <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004262:	f7fd fed1 	bl	8002008 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d302      	bcc.n	8004278 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d122      	bne.n	80042be <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699a      	ldr	r2, [r3, #24]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	4013      	ands	r3, r2
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	429a      	cmp	r2, r3
 8004286:	bf0c      	ite	eq
 8004288:	2301      	moveq	r3, #1
 800428a:	2300      	movne	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	461a      	mov	r2, r3
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	429a      	cmp	r2, r3
 8004294:	d113      	bne.n	80042be <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429a:	f043 0220 	orr.w	r2, r3, #32
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e00f      	b.n	80042de <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	699a      	ldr	r2, [r3, #24]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4013      	ands	r3, r2
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	bf0c      	ite	eq
 80042ce:	2301      	moveq	r3, #1
 80042d0:	2300      	movne	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	79fb      	ldrb	r3, [r7, #7]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d0be      	beq.n	800425a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b084      	sub	sp, #16
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042f2:	e033      	b.n	800435c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f87f 	bl	80043fc <I2C_IsErrorOccurred>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e031      	b.n	800436c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430e:	d025      	beq.n	800435c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004310:	f7fd fe7a 	bl	8002008 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	429a      	cmp	r2, r3
 800431e:	d302      	bcc.n	8004326 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d11a      	bne.n	800435c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b02      	cmp	r3, #2
 8004332:	d013      	beq.n	800435c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004338:	f043 0220 	orr.w	r2, r3, #32
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e007      	b.n	800436c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b02      	cmp	r3, #2
 8004368:	d1c4      	bne.n	80042f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004380:	e02f      	b.n	80043e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 f838 	bl	80043fc <I2C_IsErrorOccurred>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e02d      	b.n	80043f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004396:	f7fd fe37 	bl	8002008 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d302      	bcc.n	80043ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d11a      	bne.n	80043e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	d013      	beq.n	80043e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043be:	f043 0220 	orr.w	r2, r3, #32
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e007      	b.n	80043f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	d1c8      	bne.n	8004382 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08a      	sub	sp, #40	@ 0x28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004416:	2300      	movs	r3, #0
 8004418:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b00      	cmp	r3, #0
 8004426:	d068      	beq.n	80044fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2210      	movs	r2, #16
 800442e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004430:	e049      	b.n	80044c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004438:	d045      	beq.n	80044c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800443a:	f7fd fde5 	bl	8002008 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	429a      	cmp	r2, r3
 8004448:	d302      	bcc.n	8004450 <I2C_IsErrorOccurred+0x54>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d13a      	bne.n	80044c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800445a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004462:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800446e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004472:	d121      	bne.n	80044b8 <I2C_IsErrorOccurred+0xbc>
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800447a:	d01d      	beq.n	80044b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800447c:	7cfb      	ldrb	r3, [r7, #19]
 800447e:	2b20      	cmp	r3, #32
 8004480:	d01a      	beq.n	80044b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004490:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004492:	f7fd fdb9 	bl	8002008 <HAL_GetTick>
 8004496:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004498:	e00e      	b.n	80044b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800449a:	f7fd fdb5 	bl	8002008 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b19      	cmp	r3, #25
 80044a6:	d907      	bls.n	80044b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	f043 0320 	orr.w	r3, r3, #32
 80044ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80044b6:	e006      	b.n	80044c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d1e9      	bne.n	800449a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d003      	beq.n	80044dc <I2C_IsErrorOccurred+0xe0>
 80044d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0aa      	beq.n	8004432 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80044dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d103      	bne.n	80044ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2220      	movs	r2, #32
 80044ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	f043 0304 	orr.w	r3, r3, #4
 80044f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00b      	beq.n	8004524 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800451c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00b      	beq.n	8004546 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	f043 0308 	orr.w	r3, r3, #8
 8004534:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800453e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00b      	beq.n	8004568 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	f043 0302 	orr.w	r3, r3, #2
 8004556:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004560:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004568:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800456c:	2b00      	cmp	r3, #0
 800456e:	d01c      	beq.n	80045aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff fe45 	bl	8004200 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6859      	ldr	r1, [r3, #4]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	4b0d      	ldr	r3, [pc, #52]	@ (80045b8 <I2C_IsErrorOccurred+0x1bc>)
 8004582:	400b      	ands	r3, r1
 8004584:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	431a      	orrs	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2220      	movs	r2, #32
 8004596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80045aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3728      	adds	r7, #40	@ 0x28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	fe00e800 	.word	0xfe00e800

080045bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	607b      	str	r3, [r7, #4]
 80045c6:	460b      	mov	r3, r1
 80045c8:	817b      	strh	r3, [r7, #10]
 80045ca:	4613      	mov	r3, r2
 80045cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045ce:	897b      	ldrh	r3, [r7, #10]
 80045d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045d4:	7a7b      	ldrb	r3, [r7, #9]
 80045d6:	041b      	lsls	r3, r3, #16
 80045d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80045ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	0d5b      	lsrs	r3, r3, #21
 80045f6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80045fa:	4b08      	ldr	r3, [pc, #32]	@ (800461c <I2C_TransferConfig+0x60>)
 80045fc:	430b      	orrs	r3, r1
 80045fe:	43db      	mvns	r3, r3
 8004600:	ea02 0103 	and.w	r1, r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	430a      	orrs	r2, r1
 800460c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800460e:	bf00      	nop
 8004610:	371c      	adds	r7, #28
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	03ff63ff 	.word	0x03ff63ff

08004620 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b20      	cmp	r3, #32
 8004634:	d138      	bne.n	80046a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004640:	2302      	movs	r3, #2
 8004642:	e032      	b.n	80046aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2224      	movs	r2, #36	@ 0x24
 8004650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0201 	bic.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004672:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6819      	ldr	r1, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	e000      	b.n	80046aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046a8:	2302      	movs	r3, #2
  }
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b085      	sub	sp, #20
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b20      	cmp	r3, #32
 80046ca:	d139      	bne.n	8004740 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046d6:	2302      	movs	r3, #2
 80046d8:	e033      	b.n	8004742 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2224      	movs	r2, #36	@ 0x24
 80046e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0201 	bic.w	r2, r2, #1
 80046f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004708:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	021b      	lsls	r3, r3, #8
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	e000      	b.n	8004742 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004740:	2302      	movs	r3, #2
  }
}
 8004742:	4618      	mov	r0, r3
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
	...

08004750 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af02      	add	r7, sp, #8
 8004756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800475c:	f7fd fc54 	bl	8002008 <HAL_GetTick>
 8004760:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d102      	bne.n	800476e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	73fb      	strb	r3, [r7, #15]
 800476c:	e092      	b.n	8004894 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004778:	2b00      	cmp	r3, #0
 800477a:	f040 808b 	bne.w	8004894 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fc ff06 	bl	8001590 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004784:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f88b 	bl	80048a4 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	4b42      	ldr	r3, [pc, #264]	@ (80048a0 <HAL_OSPI_Init+0x150>)
 8004796:	4013      	ands	r3, r2
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	68d1      	ldr	r1, [r2, #12]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6912      	ldr	r2, [r2, #16]
 80047a0:	3a01      	subs	r2, #1
 80047a2:	0412      	lsls	r2, r2, #16
 80047a4:	4311      	orrs	r1, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6952      	ldr	r2, [r2, #20]
 80047aa:	3a01      	subs	r2, #1
 80047ac:	0212      	lsls	r2, r2, #8
 80047ae:	4311      	orrs	r1, r2
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80047b4:	4311      	orrs	r1, r2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	69d2      	ldr	r2, [r2, #28]
 80047ba:	4311      	orrs	r1, r2
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6812      	ldr	r2, [r2, #0]
 80047c0:	430b      	orrs	r3, r1
 80047c2:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	0412      	lsls	r2, r2, #16
 80047ce:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	3b01      	subs	r3, #1
 80047e0:	021a      	lsls	r2, r3, #8
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2200      	movs	r2, #0
 80047f4:	2120      	movs	r1, #32
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fb98 	bl	8004f2c <OSPI_WaitFlagStateUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d146      	bne.n	8004894 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	1e5a      	subs	r2, r3, #1
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800483c:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0201 	orr.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	2b02      	cmp	r3, #2
 800486a:	d107      	bne.n	800487c <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0202 	orr.w	r2, r2, #2
 800487a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004884:	d103      	bne.n	800488e <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	645a      	str	r2, [r3, #68]	@ 0x44
 800488c:	e002      	b.n	8004894 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2202      	movs	r2, #2
 8004892:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8004894:	7bfb      	ldrb	r3, [r7, #15]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	f8e0f8f4 	.word	0xf8e0f8f4

080048a4 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
	...

080048c4 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b092      	sub	sp, #72	@ 0x48
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a08      	ldr	r2, [pc, #32]	@ (8004904 <HAL_OSPIM_Config+0x40>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d105      	bne.n	80048f2 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 1U;
 80048ea:	2301      	movs	r3, #1
 80048ec:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80048f0:	e004      	b.n	80048fc <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80048f2:	2301      	movs	r3, #1
 80048f4:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80048fc:	2300      	movs	r3, #0
 80048fe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004902:	e01f      	b.n	8004944 <HAL_OSPIM_Config+0x80>
 8004904:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8004908:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800490c:	3301      	adds	r3, #1
 800490e:	b2d8      	uxtb	r0, r3
 8004910:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8004914:	f107 0114 	add.w	r1, r7, #20
 8004918:	4613      	mov	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	4619      	mov	r1, r3
 8004924:	f000 fb3a 	bl	8004f9c <OSPIM_GetConfig>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d005      	beq.n	800493a <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2208      	movs	r2, #8
 8004938:	649a      	str	r2, [r3, #72]	@ 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800493a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800493e:	3301      	adds	r3, #1
 8004940:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004944:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004948:	2b01      	cmp	r3, #1
 800494a:	d9dd      	bls.n	8004908 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 800494c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004950:	2b00      	cmp	r3, #0
 8004952:	f040 82de 	bne.w	8004f12 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8004956:	4bc6      	ldr	r3, [pc, #792]	@ (8004c70 <HAL_OSPIM_Config+0x3ac>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00b      	beq.n	800497a <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004962:	4bc3      	ldr	r3, [pc, #780]	@ (8004c70 <HAL_OSPIM_Config+0x3ac>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4ac2      	ldr	r2, [pc, #776]	@ (8004c70 <HAL_OSPIM_Config+0x3ac>)
 8004968:	f023 0301 	bic.w	r3, r3, #1
 800496c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800496e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800497a:	4bbe      	ldr	r3, [pc, #760]	@ (8004c74 <HAL_OSPIM_Config+0x3b0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00b      	beq.n	800499e <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004986:	4bbb      	ldr	r3, [pc, #748]	@ (8004c74 <HAL_OSPIM_Config+0x3b0>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4aba      	ldr	r2, [pc, #744]	@ (8004c74 <HAL_OSPIM_Config+0x3b0>)
 800498c:	f023 0301 	bic.w	r3, r3, #1
 8004990:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8004992:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004996:	f043 0302 	orr.w	r3, r3, #2
 800499a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800499e:	49b6      	ldr	r1, [pc, #728]	@ (8004c78 <HAL_OSPIM_Config+0x3b4>)
 80049a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	3348      	adds	r3, #72	@ 0x48
 80049ac:	443b      	add	r3, r7
 80049ae:	3b2c      	subs	r3, #44	@ 0x2c
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	440b      	add	r3, r1
 80049b8:	6859      	ldr	r1, [r3, #4]
 80049ba:	48af      	ldr	r0, [pc, #700]	@ (8004c78 <HAL_OSPIM_Config+0x3b4>)
 80049bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049be:	4613      	mov	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	3348      	adds	r3, #72	@ 0x48
 80049c8:	443b      	add	r3, r7
 80049ca:	3b2c      	subs	r3, #44	@ 0x2c
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4403      	add	r3, r0
 80049d8:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80049da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	3348      	adds	r3, #72	@ 0x48
 80049e6:	443b      	add	r3, r7
 80049e8:	3b34      	subs	r3, #52	@ 0x34
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 80a1 	beq.w	8004b34 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80049f2:	49a1      	ldr	r1, [pc, #644]	@ (8004c78 <HAL_OSPIM_Config+0x3b4>)
 80049f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049f6:	4613      	mov	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	3348      	adds	r3, #72	@ 0x48
 8004a00:	443b      	add	r3, r7
 8004a02:	3b34      	subs	r3, #52	@ 0x34
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3b01      	subs	r3, #1
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	6859      	ldr	r1, [r3, #4]
 8004a0e:	489a      	ldr	r0, [pc, #616]	@ (8004c78 <HAL_OSPIM_Config+0x3b4>)
 8004a10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	3348      	adds	r3, #72	@ 0x48
 8004a1c:	443b      	add	r3, r7
 8004a1e:	3b34      	subs	r3, #52	@ 0x34
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	f021 0201 	bic.w	r2, r1, #1
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4403      	add	r3, r0
 8004a2c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004a2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	3348      	adds	r3, #72	@ 0x48
 8004a3a:	443b      	add	r3, r7
 8004a3c:	3b30      	subs	r3, #48	@ 0x30
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d01d      	beq.n	8004a80 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004a44:	498c      	ldr	r1, [pc, #560]	@ (8004c78 <HAL_OSPIM_Config+0x3b4>)
 8004a46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a48:	4613      	mov	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	3348      	adds	r3, #72	@ 0x48
 8004a52:	443b      	add	r3, r7
 8004a54:	3b30      	subs	r3, #48	@ 0x30
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	6859      	ldr	r1, [r3, #4]
 8004a60:	4885      	ldr	r0, [pc, #532]	@ (8004c78 <HAL_OSPIM_Config+0x3b4>)
 8004a62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a64:	4613      	mov	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	3348      	adds	r3, #72	@ 0x48
 8004a6e:	443b      	add	r3, r7
 8004a70:	3b30      	subs	r3, #48	@ 0x30
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3b01      	subs	r3, #1
 8004a76:	f021 0210 	bic.w	r2, r1, #16
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4403      	add	r3, r0
 8004a7e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004a80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a82:	4613      	mov	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	3348      	adds	r3, #72	@ 0x48
 8004a8c:	443b      	add	r3, r7
 8004a8e:	3b28      	subs	r3, #40	@ 0x28
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d021      	beq.n	8004ada <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004a96:	4978      	ldr	r1, [pc, #480]	@ (8004c78 <HAL_OSPIM_Config+0x3b4>)
 8004a98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	3348      	adds	r3, #72	@ 0x48
 8004aa4:	443b      	add	r3, r7
 8004aa6:	3b28      	subs	r3, #40	@ 0x28
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	6859      	ldr	r1, [r3, #4]
 8004ab6:	4870      	ldr	r0, [pc, #448]	@ (8004c78 <HAL_OSPIM_Config+0x3b4>)
 8004ab8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004aba:	4613      	mov	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	3348      	adds	r3, #72	@ 0x48
 8004ac4:	443b      	add	r3, r7
 8004ac6:	3b28      	subs	r3, #40	@ 0x28
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4403      	add	r3, r0
 8004ad8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004ada:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004adc:	4613      	mov	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	3348      	adds	r3, #72	@ 0x48
 8004ae6:	443b      	add	r3, r7
 8004ae8:	3b24      	subs	r3, #36	@ 0x24
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d021      	beq.n	8004b34 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004af0:	4961      	ldr	r1, [pc, #388]	@ (8004c78 <HAL_OSPIM_Config+0x3b4>)
 8004af2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004af4:	4613      	mov	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	3348      	adds	r3, #72	@ 0x48
 8004afe:	443b      	add	r3, r7
 8004b00:	3b24      	subs	r3, #36	@ 0x24
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3b01      	subs	r3, #1
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	6859      	ldr	r1, [r3, #4]
 8004b10:	4859      	ldr	r0, [pc, #356]	@ (8004c78 <HAL_OSPIM_Config+0x3b4>)
 8004b12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	3348      	adds	r3, #72	@ 0x48
 8004b1e:	443b      	add	r3, r7
 8004b20:	3b24      	subs	r3, #36	@ 0x24
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4403      	add	r3, r0
 8004b32:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	6819      	ldr	r1, [r3, #0]
 8004b38:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	3348      	adds	r3, #72	@ 0x48
 8004b46:	443b      	add	r3, r7
 8004b48:	3b34      	subs	r3, #52	@ 0x34
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4299      	cmp	r1, r3
 8004b4e:	d038      	beq.n	8004bc2 <HAL_OSPIM_Config+0x2fe>
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	6859      	ldr	r1, [r3, #4]
 8004b54:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004b58:	4613      	mov	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	3348      	adds	r3, #72	@ 0x48
 8004b62:	443b      	add	r3, r7
 8004b64:	3b30      	subs	r3, #48	@ 0x30
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4299      	cmp	r1, r3
 8004b6a:	d02a      	beq.n	8004bc2 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	6899      	ldr	r1, [r3, #8]
 8004b70:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004b74:	4613      	mov	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	3348      	adds	r3, #72	@ 0x48
 8004b7e:	443b      	add	r3, r7
 8004b80:	3b2c      	subs	r3, #44	@ 0x2c
 8004b82:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004b84:	4299      	cmp	r1, r3
 8004b86:	d01c      	beq.n	8004bc2 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	68d9      	ldr	r1, [r3, #12]
 8004b8c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004b90:	4613      	mov	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	3348      	adds	r3, #72	@ 0x48
 8004b9a:	443b      	add	r3, r7
 8004b9c:	3b28      	subs	r3, #40	@ 0x28
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4299      	cmp	r1, r3
 8004ba2:	d00e      	beq.n	8004bc2 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	6919      	ldr	r1, [r3, #16]
 8004ba8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	3348      	adds	r3, #72	@ 0x48
 8004bb6:	443b      	add	r3, r7
 8004bb8:	3b24      	subs	r3, #36	@ 0x24
 8004bba:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004bbc:	4299      	cmp	r1, r3
 8004bbe:	f040 80d3 	bne.w	8004d68 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004bc2:	492d      	ldr	r1, [pc, #180]	@ (8004c78 <HAL_OSPIM_Config+0x3b4>)
 8004bc4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004bc8:	4613      	mov	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	3348      	adds	r3, #72	@ 0x48
 8004bd2:	443b      	add	r3, r7
 8004bd4:	3b34      	subs	r3, #52	@ 0x34
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	440b      	add	r3, r1
 8004bde:	6859      	ldr	r1, [r3, #4]
 8004be0:	4825      	ldr	r0, [pc, #148]	@ (8004c78 <HAL_OSPIM_Config+0x3b4>)
 8004be2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004be6:	4613      	mov	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	3348      	adds	r3, #72	@ 0x48
 8004bf0:	443b      	add	r3, r7
 8004bf2:	3b34      	subs	r3, #52	@ 0x34
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	f021 0201 	bic.w	r2, r1, #1
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4403      	add	r3, r0
 8004c00:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004c02:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004c06:	4613      	mov	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	3348      	adds	r3, #72	@ 0x48
 8004c10:	443b      	add	r3, r7
 8004c12:	3b30      	subs	r3, #48	@ 0x30
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d01f      	beq.n	8004c5a <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004c1a:	4917      	ldr	r1, [pc, #92]	@ (8004c78 <HAL_OSPIM_Config+0x3b4>)
 8004c1c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004c20:	4613      	mov	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	3348      	adds	r3, #72	@ 0x48
 8004c2a:	443b      	add	r3, r7
 8004c2c:	3b30      	subs	r3, #48	@ 0x30
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3b01      	subs	r3, #1
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	6859      	ldr	r1, [r3, #4]
 8004c38:	480f      	ldr	r0, [pc, #60]	@ (8004c78 <HAL_OSPIM_Config+0x3b4>)
 8004c3a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004c3e:	4613      	mov	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	3348      	adds	r3, #72	@ 0x48
 8004c48:	443b      	add	r3, r7
 8004c4a:	3b30      	subs	r3, #48	@ 0x30
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	f021 0210 	bic.w	r2, r1, #16
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4403      	add	r3, r0
 8004c58:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004c5a:	4907      	ldr	r1, [pc, #28]	@ (8004c78 <HAL_OSPIM_Config+0x3b4>)
 8004c5c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004c60:	4613      	mov	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	3348      	adds	r3, #72	@ 0x48
 8004c6a:	443b      	add	r3, r7
 8004c6c:	3b2c      	subs	r3, #44	@ 0x2c
 8004c6e:	e005      	b.n	8004c7c <HAL_OSPIM_Config+0x3b8>
 8004c70:	a0001000 	.word	0xa0001000
 8004c74:	a0001400 	.word	0xa0001400
 8004c78:	50061c00 	.word	0x50061c00
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	440b      	add	r3, r1
 8004c84:	6859      	ldr	r1, [r3, #4]
 8004c86:	48a6      	ldr	r0, [pc, #664]	@ (8004f20 <HAL_OSPIM_Config+0x65c>)
 8004c88:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	3348      	adds	r3, #72	@ 0x48
 8004c96:	443b      	add	r3, r7
 8004c98:	3b2c      	subs	r3, #44	@ 0x2c
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4403      	add	r3, r0
 8004ca6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004ca8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	3348      	adds	r3, #72	@ 0x48
 8004cb6:	443b      	add	r3, r7
 8004cb8:	3b28      	subs	r3, #40	@ 0x28
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d023      	beq.n	8004d08 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004cc0:	4997      	ldr	r1, [pc, #604]	@ (8004f20 <HAL_OSPIM_Config+0x65c>)
 8004cc2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	3348      	adds	r3, #72	@ 0x48
 8004cd0:	443b      	add	r3, r7
 8004cd2:	3b28      	subs	r3, #40	@ 0x28
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	6859      	ldr	r1, [r3, #4]
 8004ce2:	488f      	ldr	r0, [pc, #572]	@ (8004f20 <HAL_OSPIM_Config+0x65c>)
 8004ce4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004ce8:	4613      	mov	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	3348      	adds	r3, #72	@ 0x48
 8004cf2:	443b      	add	r3, r7
 8004cf4:	3b28      	subs	r3, #40	@ 0x28
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4403      	add	r3, r0
 8004d06:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004d08:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	3348      	adds	r3, #72	@ 0x48
 8004d16:	443b      	add	r3, r7
 8004d18:	3b24      	subs	r3, #36	@ 0x24
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d023      	beq.n	8004d68 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004d20:	497f      	ldr	r1, [pc, #508]	@ (8004f20 <HAL_OSPIM_Config+0x65c>)
 8004d22:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004d26:	4613      	mov	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	3348      	adds	r3, #72	@ 0x48
 8004d30:	443b      	add	r3, r7
 8004d32:	3b24      	subs	r3, #36	@ 0x24
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	6859      	ldr	r1, [r3, #4]
 8004d42:	4877      	ldr	r0, [pc, #476]	@ (8004f20 <HAL_OSPIM_Config+0x65c>)
 8004d44:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	3348      	adds	r3, #72	@ 0x48
 8004d52:	443b      	add	r3, r7
 8004d54:	3b24      	subs	r3, #36	@ 0x24
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4403      	add	r3, r0
 8004d66:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004d68:	4a6d      	ldr	r2, [pc, #436]	@ (8004f20 <HAL_OSPIM_Config+0x65c>)
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d7c:	025b      	lsls	r3, r3, #9
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	4967      	ldr	r1, [pc, #412]	@ (8004f20 <HAL_OSPIM_Config+0x65c>)
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	440b      	add	r3, r1
 8004d90:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004d92:	4a63      	ldr	r2, [pc, #396]	@ (8004f20 <HAL_OSPIM_Config+0x65c>)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f023 0203 	bic.w	r2, r3, #3
 8004da4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	431a      	orrs	r2, r3
 8004daa:	495d      	ldr	r1, [pc, #372]	@ (8004f20 <HAL_OSPIM_Config+0x65c>)
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	3b01      	subs	r3, #1
 8004db2:	f042 0201 	orr.w	r2, r2, #1
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	440b      	add	r3, r1
 8004dba:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d014      	beq.n	8004dee <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004dc4:	4a56      	ldr	r2, [pc, #344]	@ (8004f20 <HAL_OSPIM_Config+0x65c>)
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dd8:	015b      	lsls	r3, r3, #5
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	4950      	ldr	r1, [pc, #320]	@ (8004f20 <HAL_OSPIM_Config+0x65c>)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	f042 0210 	orr.w	r2, r2, #16
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	440b      	add	r3, r1
 8004dec:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d019      	beq.n	8004e2e <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004dfa:	4a49      	ldr	r2, [pc, #292]	@ (8004f20 <HAL_OSPIM_Config+0x65c>)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004e10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e12:	049b      	lsls	r3, r3, #18
 8004e14:	431a      	orrs	r2, r3
 8004e16:	4942      	ldr	r1, [pc, #264]	@ (8004f20 <HAL_OSPIM_Config+0x65c>)
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	605a      	str	r2, [r3, #4]
 8004e2c:	e01c      	b.n	8004e68 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d018      	beq.n	8004e68 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e36:	4a3a      	ldr	r2, [pc, #232]	@ (8004f20 <HAL_OSPIM_Config+0x65c>)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8004e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e4e:	069b      	lsls	r3, r3, #26
 8004e50:	431a      	orrs	r2, r3
 8004e52:	4933      	ldr	r1, [pc, #204]	@ (8004f20 <HAL_OSPIM_Config+0x65c>)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	440b      	add	r3, r1
 8004e66:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d019      	beq.n	8004ea8 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e74:	4a2a      	ldr	r2, [pc, #168]	@ (8004f20 <HAL_OSPIM_Config+0x65c>)
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e8c:	049b      	lsls	r3, r3, #18
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	4923      	ldr	r1, [pc, #140]	@ (8004f20 <HAL_OSPIM_Config+0x65c>)
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	440b      	add	r3, r1
 8004ea4:	605a      	str	r2, [r3, #4]
 8004ea6:	e01c      	b.n	8004ee2 <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d018      	beq.n	8004ee2 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8004f20 <HAL_OSPIM_Config+0x65c>)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8004ec6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ec8:	069b      	lsls	r3, r3, #26
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	4914      	ldr	r1, [pc, #80]	@ (8004f20 <HAL_OSPIM_Config+0x65c>)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	440b      	add	r3, r1
 8004ee0:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004ee2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d005      	beq.n	8004efa <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004eee:	4b0d      	ldr	r3, [pc, #52]	@ (8004f24 <HAL_OSPIM_Config+0x660>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8004f24 <HAL_OSPIM_Config+0x660>)
 8004ef4:	f043 0301 	orr.w	r3, r3, #1
 8004ef8:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004efa:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d005      	beq.n	8004f12 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004f06:	4b08      	ldr	r3, [pc, #32]	@ (8004f28 <HAL_OSPIM_Config+0x664>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a07      	ldr	r2, [pc, #28]	@ (8004f28 <HAL_OSPIM_Config+0x664>)
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004f12:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3748      	adds	r7, #72	@ 0x48
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	50061c00 	.word	0x50061c00
 8004f24:	a0001000 	.word	0xa0001000
 8004f28:	a0001400 	.word	0xa0001400

08004f2c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	603b      	str	r3, [r7, #0]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004f3c:	e01a      	b.n	8004f74 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f44:	d016      	beq.n	8004f74 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f46:	f7fd f85f 	bl	8002008 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d302      	bcc.n	8004f5c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10b      	bne.n	8004f74 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f62:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f68:	f043 0201 	orr.w	r2, r3, #1
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	649a      	str	r2, [r3, #72]	@ 0x48

        return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e00e      	b.n	8004f92 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6a1a      	ldr	r2, [r3, #32]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	bf14      	ite	ne
 8004f82:	2301      	movne	r3, #1
 8004f84:	2300      	moveq	r3, #0
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	461a      	mov	r2, r3
 8004f8a:	79fb      	ldrb	r3, [r7, #7]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d1d6      	bne.n	8004f3e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
	...

08004f9c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	6039      	str	r1, [r7, #0]
 8004fa6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004fb0:	79fb      	ldrb	r3, [r7, #7]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d005      	beq.n	8004fc2 <OSPIM_GetConfig+0x26>
 8004fb6:	79fb      	ldrb	r3, [r7, #7]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d802      	bhi.n	8004fc2 <OSPIM_GetConfig+0x26>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d102      	bne.n	8004fc8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	75fb      	strb	r3, [r7, #23]
 8004fc6:	e08e      	b.n	80050e6 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004fe6:	79fb      	ldrb	r3, [r7, #7]
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d101      	bne.n	8004ff0 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004fec:	4b41      	ldr	r3, [pc, #260]	@ (80050f4 <OSPIM_GetConfig+0x158>)
 8004fee:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	e074      	b.n	80050e0 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8004ff6:	4a40      	ldr	r2, [pc, #256]	@ (80050f8 <OSPIM_GetConfig+0x15c>)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	4053      	eors	r3, r2
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d103      	bne.n	8005022 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	4053      	eors	r3, r2
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	2b00      	cmp	r3, #0
 8005038:	d103      	bne.n	8005042 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	4053      	eors	r3, r2
 8005052:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005056:	2b00      	cmp	r3, #0
 8005058:	d103      	bne.n	8005062 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d018      	beq.n	800509e <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	4053      	eors	r3, r2
 8005072:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d111      	bne.n	800509e <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d106      	bne.n	8005092 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	3301      	adds	r3, #1
 8005088:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	60da      	str	r2, [r3, #12]
 8005090:	e005      	b.n	800509e <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3301      	adds	r3, #1
 8005096:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d018      	beq.n	80050da <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	4053      	eors	r3, r2
 80050ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d111      	bne.n	80050da <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d106      	bne.n	80050ce <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	3301      	adds	r3, #1
 80050c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	611a      	str	r2, [r3, #16]
 80050cc:	e005      	b.n	80050da <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3301      	adds	r3, #1
 80050d2:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	3301      	adds	r3, #1
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d987      	bls.n	8004ff6 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80050e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	371c      	adds	r7, #28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	04040222 	.word	0x04040222
 80050f8:	50061c00 	.word	0x50061c00

080050fc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005100:	4b05      	ldr	r3, [pc, #20]	@ (8005118 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a04      	ldr	r2, [pc, #16]	@ (8005118 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005106:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800510a:	6013      	str	r3, [r2, #0]
}
 800510c:	bf00      	nop
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40007000 	.word	0x40007000

0800511c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005120:	4b0d      	ldr	r3, [pc, #52]	@ (8005158 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005128:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800512c:	d102      	bne.n	8005134 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800512e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005132:	e00b      	b.n	800514c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005134:	4b08      	ldr	r3, [pc, #32]	@ (8005158 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800513a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800513e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005142:	d102      	bne.n	800514a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005144:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005148:	e000      	b.n	800514c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800514a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800514c:	4618      	mov	r0, r3
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40007000 	.word	0x40007000

0800515c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d141      	bne.n	80051ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800516a:	4b4b      	ldr	r3, [pc, #300]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005176:	d131      	bne.n	80051dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005178:	4b47      	ldr	r3, [pc, #284]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800517a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800517e:	4a46      	ldr	r2, [pc, #280]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005180:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005184:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005188:	4b43      	ldr	r3, [pc, #268]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005190:	4a41      	ldr	r2, [pc, #260]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005192:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005196:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005198:	4b40      	ldr	r3, [pc, #256]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2232      	movs	r2, #50	@ 0x32
 800519e:	fb02 f303 	mul.w	r3, r2, r3
 80051a2:	4a3f      	ldr	r2, [pc, #252]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051a4:	fba2 2303 	umull	r2, r3, r2, r3
 80051a8:	0c9b      	lsrs	r3, r3, #18
 80051aa:	3301      	adds	r3, #1
 80051ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051ae:	e002      	b.n	80051b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051b6:	4b38      	ldr	r3, [pc, #224]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051c2:	d102      	bne.n	80051ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f2      	bne.n	80051b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051ca:	4b33      	ldr	r3, [pc, #204]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051d6:	d158      	bne.n	800528a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e057      	b.n	800528c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051dc:	4b2e      	ldr	r3, [pc, #184]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051e2:	4a2d      	ldr	r2, [pc, #180]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80051ec:	e04d      	b.n	800528a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051f4:	d141      	bne.n	800527a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051f6:	4b28      	ldr	r3, [pc, #160]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005202:	d131      	bne.n	8005268 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005204:	4b24      	ldr	r3, [pc, #144]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800520a:	4a23      	ldr	r2, [pc, #140]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800520c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005210:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005214:	4b20      	ldr	r3, [pc, #128]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800521c:	4a1e      	ldr	r2, [pc, #120]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800521e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005222:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005224:	4b1d      	ldr	r3, [pc, #116]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2232      	movs	r2, #50	@ 0x32
 800522a:	fb02 f303 	mul.w	r3, r2, r3
 800522e:	4a1c      	ldr	r2, [pc, #112]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005230:	fba2 2303 	umull	r2, r3, r2, r3
 8005234:	0c9b      	lsrs	r3, r3, #18
 8005236:	3301      	adds	r3, #1
 8005238:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800523a:	e002      	b.n	8005242 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3b01      	subs	r3, #1
 8005240:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005242:	4b15      	ldr	r3, [pc, #84]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800524a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800524e:	d102      	bne.n	8005256 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f2      	bne.n	800523c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005256:	4b10      	ldr	r3, [pc, #64]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800525e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005262:	d112      	bne.n	800528a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e011      	b.n	800528c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005268:	4b0b      	ldr	r3, [pc, #44]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800526a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800526e:	4a0a      	ldr	r2, [pc, #40]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005274:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005278:	e007      	b.n	800528a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800527a:	4b07      	ldr	r3, [pc, #28]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005282:	4a05      	ldr	r2, [pc, #20]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005284:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005288:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	40007000 	.word	0x40007000
 800529c:	20000004 	.word	0x20000004
 80052a0:	431bde83 	.word	0x431bde83

080052a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b088      	sub	sp, #32
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d102      	bne.n	80052b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	f000 bc08 	b.w	8005ac8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052b8:	4b96      	ldr	r3, [pc, #600]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 030c 	and.w	r3, r3, #12
 80052c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052c2:	4b94      	ldr	r3, [pc, #592]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0310 	and.w	r3, r3, #16
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 80e4 	beq.w	80054a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d007      	beq.n	80052f0 <HAL_RCC_OscConfig+0x4c>
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	2b0c      	cmp	r3, #12
 80052e4:	f040 808b 	bne.w	80053fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	f040 8087 	bne.w	80053fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052f0:	4b88      	ldr	r3, [pc, #544]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d005      	beq.n	8005308 <HAL_RCC_OscConfig+0x64>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e3df      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a1a      	ldr	r2, [r3, #32]
 800530c:	4b81      	ldr	r3, [pc, #516]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0308 	and.w	r3, r3, #8
 8005314:	2b00      	cmp	r3, #0
 8005316:	d004      	beq.n	8005322 <HAL_RCC_OscConfig+0x7e>
 8005318:	4b7e      	ldr	r3, [pc, #504]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005320:	e005      	b.n	800532e <HAL_RCC_OscConfig+0x8a>
 8005322:	4b7c      	ldr	r3, [pc, #496]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 8005324:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005328:	091b      	lsrs	r3, r3, #4
 800532a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800532e:	4293      	cmp	r3, r2
 8005330:	d223      	bcs.n	800537a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fdfe 	bl	8005f38 <RCC_SetFlashLatencyFromMSIRange>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e3c0      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005346:	4b73      	ldr	r3, [pc, #460]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a72      	ldr	r2, [pc, #456]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 800534c:	f043 0308 	orr.w	r3, r3, #8
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	4b70      	ldr	r3, [pc, #448]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	496d      	ldr	r1, [pc, #436]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 8005360:	4313      	orrs	r3, r2
 8005362:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005364:	4b6b      	ldr	r3, [pc, #428]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	4968      	ldr	r1, [pc, #416]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 8005374:	4313      	orrs	r3, r2
 8005376:	604b      	str	r3, [r1, #4]
 8005378:	e025      	b.n	80053c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800537a:	4b66      	ldr	r3, [pc, #408]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a65      	ldr	r2, [pc, #404]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 8005380:	f043 0308 	orr.w	r3, r3, #8
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	4b63      	ldr	r3, [pc, #396]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	4960      	ldr	r1, [pc, #384]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 8005394:	4313      	orrs	r3, r2
 8005396:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005398:	4b5e      	ldr	r3, [pc, #376]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	495b      	ldr	r1, [pc, #364]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d109      	bne.n	80053c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 fdbe 	bl	8005f38 <RCC_SetFlashLatencyFromMSIRange>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e380      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053c6:	f000 fcc1 	bl	8005d4c <HAL_RCC_GetSysClockFreq>
 80053ca:	4602      	mov	r2, r0
 80053cc:	4b51      	ldr	r3, [pc, #324]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	091b      	lsrs	r3, r3, #4
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	4950      	ldr	r1, [pc, #320]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 80053d8:	5ccb      	ldrb	r3, [r1, r3]
 80053da:	f003 031f 	and.w	r3, r3, #31
 80053de:	fa22 f303 	lsr.w	r3, r2, r3
 80053e2:	4a4e      	ldr	r2, [pc, #312]	@ (800551c <HAL_RCC_OscConfig+0x278>)
 80053e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80053e6:	4b4e      	ldr	r3, [pc, #312]	@ (8005520 <HAL_RCC_OscConfig+0x27c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fc faaa 	bl	8001944 <HAL_InitTick>
 80053f0:	4603      	mov	r3, r0
 80053f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d052      	beq.n	80054a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
 80053fc:	e364      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d032      	beq.n	800546c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005406:	4b43      	ldr	r3, [pc, #268]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a42      	ldr	r2, [pc, #264]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 800540c:	f043 0301 	orr.w	r3, r3, #1
 8005410:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005412:	f7fc fdf9 	bl	8002008 <HAL_GetTick>
 8005416:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005418:	e008      	b.n	800542c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800541a:	f7fc fdf5 	bl	8002008 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d901      	bls.n	800542c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e34d      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800542c:	4b39      	ldr	r3, [pc, #228]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d0f0      	beq.n	800541a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005438:	4b36      	ldr	r3, [pc, #216]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a35      	ldr	r2, [pc, #212]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 800543e:	f043 0308 	orr.w	r3, r3, #8
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	4b33      	ldr	r3, [pc, #204]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	4930      	ldr	r1, [pc, #192]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 8005452:	4313      	orrs	r3, r2
 8005454:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005456:	4b2f      	ldr	r3, [pc, #188]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	021b      	lsls	r3, r3, #8
 8005464:	492b      	ldr	r1, [pc, #172]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 8005466:	4313      	orrs	r3, r2
 8005468:	604b      	str	r3, [r1, #4]
 800546a:	e01a      	b.n	80054a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800546c:	4b29      	ldr	r3, [pc, #164]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a28      	ldr	r2, [pc, #160]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 8005472:	f023 0301 	bic.w	r3, r3, #1
 8005476:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005478:	f7fc fdc6 	bl	8002008 <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005480:	f7fc fdc2 	bl	8002008 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e31a      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005492:	4b20      	ldr	r3, [pc, #128]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1f0      	bne.n	8005480 <HAL_RCC_OscConfig+0x1dc>
 800549e:	e000      	b.n	80054a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d073      	beq.n	8005596 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d005      	beq.n	80054c0 <HAL_RCC_OscConfig+0x21c>
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	2b0c      	cmp	r3, #12
 80054b8:	d10e      	bne.n	80054d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b03      	cmp	r3, #3
 80054be:	d10b      	bne.n	80054d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c0:	4b14      	ldr	r3, [pc, #80]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d063      	beq.n	8005594 <HAL_RCC_OscConfig+0x2f0>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d15f      	bne.n	8005594 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e2f7      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054e0:	d106      	bne.n	80054f0 <HAL_RCC_OscConfig+0x24c>
 80054e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a0b      	ldr	r2, [pc, #44]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 80054e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	e025      	b.n	800553c <HAL_RCC_OscConfig+0x298>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054f8:	d114      	bne.n	8005524 <HAL_RCC_OscConfig+0x280>
 80054fa:	4b06      	ldr	r3, [pc, #24]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a05      	ldr	r2, [pc, #20]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 8005500:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005504:	6013      	str	r3, [r2, #0]
 8005506:	4b03      	ldr	r3, [pc, #12]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a02      	ldr	r2, [pc, #8]	@ (8005514 <HAL_RCC_OscConfig+0x270>)
 800550c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	e013      	b.n	800553c <HAL_RCC_OscConfig+0x298>
 8005514:	40021000 	.word	0x40021000
 8005518:	0800c0b0 	.word	0x0800c0b0
 800551c:	20000004 	.word	0x20000004
 8005520:	20000018 	.word	0x20000018
 8005524:	4ba0      	ldr	r3, [pc, #640]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a9f      	ldr	r2, [pc, #636]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 800552a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	4b9d      	ldr	r3, [pc, #628]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a9c      	ldr	r2, [pc, #624]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 8005536:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800553a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d013      	beq.n	800556c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005544:	f7fc fd60 	bl	8002008 <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800554c:	f7fc fd5c 	bl	8002008 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b64      	cmp	r3, #100	@ 0x64
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e2b4      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800555e:	4b92      	ldr	r3, [pc, #584]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0f0      	beq.n	800554c <HAL_RCC_OscConfig+0x2a8>
 800556a:	e014      	b.n	8005596 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556c:	f7fc fd4c 	bl	8002008 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005574:	f7fc fd48 	bl	8002008 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b64      	cmp	r3, #100	@ 0x64
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e2a0      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005586:	4b88      	ldr	r3, [pc, #544]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f0      	bne.n	8005574 <HAL_RCC_OscConfig+0x2d0>
 8005592:	e000      	b.n	8005596 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d060      	beq.n	8005664 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d005      	beq.n	80055b4 <HAL_RCC_OscConfig+0x310>
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	2b0c      	cmp	r3, #12
 80055ac:	d119      	bne.n	80055e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d116      	bne.n	80055e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055b4:	4b7c      	ldr	r3, [pc, #496]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d005      	beq.n	80055cc <HAL_RCC_OscConfig+0x328>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e27d      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055cc:	4b76      	ldr	r3, [pc, #472]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	061b      	lsls	r3, r3, #24
 80055da:	4973      	ldr	r1, [pc, #460]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055e0:	e040      	b.n	8005664 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d023      	beq.n	8005632 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055ea:	4b6f      	ldr	r3, [pc, #444]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a6e      	ldr	r2, [pc, #440]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 80055f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f6:	f7fc fd07 	bl	8002008 <HAL_GetTick>
 80055fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055fc:	e008      	b.n	8005610 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055fe:	f7fc fd03 	bl	8002008 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e25b      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005610:	4b65      	ldr	r3, [pc, #404]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0f0      	beq.n	80055fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800561c:	4b62      	ldr	r3, [pc, #392]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	061b      	lsls	r3, r3, #24
 800562a:	495f      	ldr	r1, [pc, #380]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 800562c:	4313      	orrs	r3, r2
 800562e:	604b      	str	r3, [r1, #4]
 8005630:	e018      	b.n	8005664 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005632:	4b5d      	ldr	r3, [pc, #372]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a5c      	ldr	r2, [pc, #368]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 8005638:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800563c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563e:	f7fc fce3 	bl	8002008 <HAL_GetTick>
 8005642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005644:	e008      	b.n	8005658 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005646:	f7fc fcdf 	bl	8002008 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d901      	bls.n	8005658 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e237      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005658:	4b53      	ldr	r3, [pc, #332]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1f0      	bne.n	8005646 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0308 	and.w	r3, r3, #8
 800566c:	2b00      	cmp	r3, #0
 800566e:	d03c      	beq.n	80056ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01c      	beq.n	80056b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005678:	4b4b      	ldr	r3, [pc, #300]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 800567a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800567e:	4a4a      	ldr	r2, [pc, #296]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 8005680:	f043 0301 	orr.w	r3, r3, #1
 8005684:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005688:	f7fc fcbe 	bl	8002008 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005690:	f7fc fcba 	bl	8002008 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b02      	cmp	r3, #2
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e212      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056a2:	4b41      	ldr	r3, [pc, #260]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 80056a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d0ef      	beq.n	8005690 <HAL_RCC_OscConfig+0x3ec>
 80056b0:	e01b      	b.n	80056ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056b2:	4b3d      	ldr	r3, [pc, #244]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 80056b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056b8:	4a3b      	ldr	r2, [pc, #236]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 80056ba:	f023 0301 	bic.w	r3, r3, #1
 80056be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c2:	f7fc fca1 	bl	8002008 <HAL_GetTick>
 80056c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056c8:	e008      	b.n	80056dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056ca:	f7fc fc9d 	bl	8002008 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e1f5      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056dc:	4b32      	ldr	r3, [pc, #200]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 80056de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1ef      	bne.n	80056ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0304 	and.w	r3, r3, #4
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 80a6 	beq.w	8005844 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056f8:	2300      	movs	r3, #0
 80056fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80056fc:	4b2a      	ldr	r3, [pc, #168]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 80056fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10d      	bne.n	8005724 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005708:	4b27      	ldr	r3, [pc, #156]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 800570a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800570c:	4a26      	ldr	r2, [pc, #152]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 800570e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005712:	6593      	str	r3, [r2, #88]	@ 0x58
 8005714:	4b24      	ldr	r3, [pc, #144]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 8005716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800571c:	60bb      	str	r3, [r7, #8]
 800571e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005720:	2301      	movs	r3, #1
 8005722:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005724:	4b21      	ldr	r3, [pc, #132]	@ (80057ac <HAL_RCC_OscConfig+0x508>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800572c:	2b00      	cmp	r3, #0
 800572e:	d118      	bne.n	8005762 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005730:	4b1e      	ldr	r3, [pc, #120]	@ (80057ac <HAL_RCC_OscConfig+0x508>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a1d      	ldr	r2, [pc, #116]	@ (80057ac <HAL_RCC_OscConfig+0x508>)
 8005736:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800573a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800573c:	f7fc fc64 	bl	8002008 <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005744:	f7fc fc60 	bl	8002008 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e1b8      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005756:	4b15      	ldr	r3, [pc, #84]	@ (80057ac <HAL_RCC_OscConfig+0x508>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0f0      	beq.n	8005744 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d108      	bne.n	800577c <HAL_RCC_OscConfig+0x4d8>
 800576a:	4b0f      	ldr	r3, [pc, #60]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 800576c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005770:	4a0d      	ldr	r2, [pc, #52]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 8005772:	f043 0301 	orr.w	r3, r3, #1
 8005776:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800577a:	e029      	b.n	80057d0 <HAL_RCC_OscConfig+0x52c>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	2b05      	cmp	r3, #5
 8005782:	d115      	bne.n	80057b0 <HAL_RCC_OscConfig+0x50c>
 8005784:	4b08      	ldr	r3, [pc, #32]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 8005786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800578a:	4a07      	ldr	r2, [pc, #28]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 800578c:	f043 0304 	orr.w	r3, r3, #4
 8005790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005794:	4b04      	ldr	r3, [pc, #16]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 8005796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800579a:	4a03      	ldr	r2, [pc, #12]	@ (80057a8 <HAL_RCC_OscConfig+0x504>)
 800579c:	f043 0301 	orr.w	r3, r3, #1
 80057a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80057a4:	e014      	b.n	80057d0 <HAL_RCC_OscConfig+0x52c>
 80057a6:	bf00      	nop
 80057a8:	40021000 	.word	0x40021000
 80057ac:	40007000 	.word	0x40007000
 80057b0:	4b9d      	ldr	r3, [pc, #628]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b6:	4a9c      	ldr	r2, [pc, #624]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 80057b8:	f023 0301 	bic.w	r3, r3, #1
 80057bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80057c0:	4b99      	ldr	r3, [pc, #612]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 80057c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057c6:	4a98      	ldr	r2, [pc, #608]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 80057c8:	f023 0304 	bic.w	r3, r3, #4
 80057cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d016      	beq.n	8005806 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d8:	f7fc fc16 	bl	8002008 <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057de:	e00a      	b.n	80057f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e0:	f7fc fc12 	bl	8002008 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e168      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057f6:	4b8c      	ldr	r3, [pc, #560]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 80057f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d0ed      	beq.n	80057e0 <HAL_RCC_OscConfig+0x53c>
 8005804:	e015      	b.n	8005832 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005806:	f7fc fbff 	bl	8002008 <HAL_GetTick>
 800580a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800580c:	e00a      	b.n	8005824 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800580e:	f7fc fbfb 	bl	8002008 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800581c:	4293      	cmp	r3, r2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e151      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005824:	4b80      	ldr	r3, [pc, #512]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 8005826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1ed      	bne.n	800580e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005832:	7ffb      	ldrb	r3, [r7, #31]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d105      	bne.n	8005844 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005838:	4b7b      	ldr	r3, [pc, #492]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 800583a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800583c:	4a7a      	ldr	r2, [pc, #488]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 800583e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005842:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0320 	and.w	r3, r3, #32
 800584c:	2b00      	cmp	r3, #0
 800584e:	d03c      	beq.n	80058ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005854:	2b00      	cmp	r3, #0
 8005856:	d01c      	beq.n	8005892 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005858:	4b73      	ldr	r3, [pc, #460]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 800585a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800585e:	4a72      	ldr	r2, [pc, #456]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 8005860:	f043 0301 	orr.w	r3, r3, #1
 8005864:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005868:	f7fc fbce 	bl	8002008 <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005870:	f7fc fbca 	bl	8002008 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e122      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005882:	4b69      	ldr	r3, [pc, #420]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 8005884:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0ef      	beq.n	8005870 <HAL_RCC_OscConfig+0x5cc>
 8005890:	e01b      	b.n	80058ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005892:	4b65      	ldr	r3, [pc, #404]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 8005894:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005898:	4a63      	ldr	r2, [pc, #396]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 800589a:	f023 0301 	bic.w	r3, r3, #1
 800589e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a2:	f7fc fbb1 	bl	8002008 <HAL_GetTick>
 80058a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80058a8:	e008      	b.n	80058bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058aa:	f7fc fbad 	bl	8002008 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d901      	bls.n	80058bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e105      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80058bc:	4b5a      	ldr	r3, [pc, #360]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 80058be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1ef      	bne.n	80058aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 80f9 	beq.w	8005ac6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d8:	2b02      	cmp	r3, #2
 80058da:	f040 80cf 	bne.w	8005a7c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80058de:	4b52      	ldr	r3, [pc, #328]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f003 0203 	and.w	r2, r3, #3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d12c      	bne.n	800594c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058fc:	3b01      	subs	r3, #1
 80058fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005900:	429a      	cmp	r2, r3
 8005902:	d123      	bne.n	800594c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800590e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005910:	429a      	cmp	r2, r3
 8005912:	d11b      	bne.n	800594c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005920:	429a      	cmp	r2, r3
 8005922:	d113      	bne.n	800594c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592e:	085b      	lsrs	r3, r3, #1
 8005930:	3b01      	subs	r3, #1
 8005932:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005934:	429a      	cmp	r2, r3
 8005936:	d109      	bne.n	800594c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005942:	085b      	lsrs	r3, r3, #1
 8005944:	3b01      	subs	r3, #1
 8005946:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005948:	429a      	cmp	r2, r3
 800594a:	d071      	beq.n	8005a30 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	2b0c      	cmp	r3, #12
 8005950:	d068      	beq.n	8005a24 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005952:	4b35      	ldr	r3, [pc, #212]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d105      	bne.n	800596a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800595e:	4b32      	ldr	r3, [pc, #200]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e0ac      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800596e:	4b2e      	ldr	r3, [pc, #184]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a2d      	ldr	r2, [pc, #180]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 8005974:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005978:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800597a:	f7fc fb45 	bl	8002008 <HAL_GetTick>
 800597e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005980:	e008      	b.n	8005994 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005982:	f7fc fb41 	bl	8002008 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d901      	bls.n	8005994 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e099      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005994:	4b24      	ldr	r3, [pc, #144]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1f0      	bne.n	8005982 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059a0:	4b21      	ldr	r3, [pc, #132]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	4b21      	ldr	r3, [pc, #132]	@ (8005a2c <HAL_RCC_OscConfig+0x788>)
 80059a6:	4013      	ands	r3, r2
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80059b0:	3a01      	subs	r2, #1
 80059b2:	0112      	lsls	r2, r2, #4
 80059b4:	4311      	orrs	r1, r2
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80059ba:	0212      	lsls	r2, r2, #8
 80059bc:	4311      	orrs	r1, r2
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80059c2:	0852      	lsrs	r2, r2, #1
 80059c4:	3a01      	subs	r2, #1
 80059c6:	0552      	lsls	r2, r2, #21
 80059c8:	4311      	orrs	r1, r2
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80059ce:	0852      	lsrs	r2, r2, #1
 80059d0:	3a01      	subs	r2, #1
 80059d2:	0652      	lsls	r2, r2, #25
 80059d4:	4311      	orrs	r1, r2
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80059da:	06d2      	lsls	r2, r2, #27
 80059dc:	430a      	orrs	r2, r1
 80059de:	4912      	ldr	r1, [pc, #72]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80059e4:	4b10      	ldr	r3, [pc, #64]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a0f      	ldr	r2, [pc, #60]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 80059ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	4a0c      	ldr	r2, [pc, #48]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 80059f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059fc:	f7fc fb04 	bl	8002008 <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a04:	f7fc fb00 	bl	8002008 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e058      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a16:	4b04      	ldr	r3, [pc, #16]	@ (8005a28 <HAL_RCC_OscConfig+0x784>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0f0      	beq.n	8005a04 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a22:	e050      	b.n	8005ac6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e04f      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
 8005a28:	40021000 	.word	0x40021000
 8005a2c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a30:	4b27      	ldr	r3, [pc, #156]	@ (8005ad0 <HAL_RCC_OscConfig+0x82c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d144      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005a3c:	4b24      	ldr	r3, [pc, #144]	@ (8005ad0 <HAL_RCC_OscConfig+0x82c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a23      	ldr	r2, [pc, #140]	@ (8005ad0 <HAL_RCC_OscConfig+0x82c>)
 8005a42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a48:	4b21      	ldr	r3, [pc, #132]	@ (8005ad0 <HAL_RCC_OscConfig+0x82c>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	4a20      	ldr	r2, [pc, #128]	@ (8005ad0 <HAL_RCC_OscConfig+0x82c>)
 8005a4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a54:	f7fc fad8 	bl	8002008 <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a5a:	e008      	b.n	8005a6e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a5c:	f7fc fad4 	bl	8002008 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e02c      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a6e:	4b18      	ldr	r3, [pc, #96]	@ (8005ad0 <HAL_RCC_OscConfig+0x82c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0f0      	beq.n	8005a5c <HAL_RCC_OscConfig+0x7b8>
 8005a7a:	e024      	b.n	8005ac6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	2b0c      	cmp	r3, #12
 8005a80:	d01f      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a82:	4b13      	ldr	r3, [pc, #76]	@ (8005ad0 <HAL_RCC_OscConfig+0x82c>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a12      	ldr	r2, [pc, #72]	@ (8005ad0 <HAL_RCC_OscConfig+0x82c>)
 8005a88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8e:	f7fc fabb 	bl	8002008 <HAL_GetTick>
 8005a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a94:	e008      	b.n	8005aa8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a96:	f7fc fab7 	bl	8002008 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e00f      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005aa8:	4b09      	ldr	r3, [pc, #36]	@ (8005ad0 <HAL_RCC_OscConfig+0x82c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1f0      	bne.n	8005a96 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005ab4:	4b06      	ldr	r3, [pc, #24]	@ (8005ad0 <HAL_RCC_OscConfig+0x82c>)
 8005ab6:	68da      	ldr	r2, [r3, #12]
 8005ab8:	4905      	ldr	r1, [pc, #20]	@ (8005ad0 <HAL_RCC_OscConfig+0x82c>)
 8005aba:	4b06      	ldr	r3, [pc, #24]	@ (8005ad4 <HAL_RCC_OscConfig+0x830>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	60cb      	str	r3, [r1, #12]
 8005ac0:	e001      	b.n	8005ac6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e000      	b.n	8005ac8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3720      	adds	r7, #32
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40021000 	.word	0x40021000
 8005ad4:	feeefffc 	.word	0xfeeefffc

08005ad8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e11d      	b.n	8005d2c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005af0:	4b90      	ldr	r3, [pc, #576]	@ (8005d34 <HAL_RCC_ClockConfig+0x25c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 030f 	and.w	r3, r3, #15
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d910      	bls.n	8005b20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005afe:	4b8d      	ldr	r3, [pc, #564]	@ (8005d34 <HAL_RCC_ClockConfig+0x25c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f023 020f 	bic.w	r2, r3, #15
 8005b06:	498b      	ldr	r1, [pc, #556]	@ (8005d34 <HAL_RCC_ClockConfig+0x25c>)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0e:	4b89      	ldr	r3, [pc, #548]	@ (8005d34 <HAL_RCC_ClockConfig+0x25c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 030f 	and.w	r3, r3, #15
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d001      	beq.n	8005b20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e105      	b.n	8005d2c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d010      	beq.n	8005b4e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	4b81      	ldr	r3, [pc, #516]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d908      	bls.n	8005b4e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	497b      	ldr	r1, [pc, #492]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d079      	beq.n	8005c4e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d11e      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b62:	4b75      	ldr	r3, [pc, #468]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e0dc      	b.n	8005d2c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005b72:	f000 fa3b 	bl	8005fec <RCC_GetSysClockFreqFromPLLSource>
 8005b76:	4603      	mov	r3, r0
 8005b78:	4a70      	ldr	r2, [pc, #448]	@ (8005d3c <HAL_RCC_ClockConfig+0x264>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d946      	bls.n	8005c0c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005b7e:	4b6e      	ldr	r3, [pc, #440]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d140      	bne.n	8005c0c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b92:	4a69      	ldr	r2, [pc, #420]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b9a:	2380      	movs	r3, #128	@ 0x80
 8005b9c:	617b      	str	r3, [r7, #20]
 8005b9e:	e035      	b.n	8005c0c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d107      	bne.n	8005bb8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ba8:	4b63      	ldr	r3, [pc, #396]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d115      	bne.n	8005be0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e0b9      	b.n	8005d2c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d107      	bne.n	8005bd0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005bc0:	4b5d      	ldr	r3, [pc, #372]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d109      	bne.n	8005be0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e0ad      	b.n	8005d2c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bd0:	4b59      	ldr	r3, [pc, #356]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e0a5      	b.n	8005d2c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005be0:	f000 f8b4 	bl	8005d4c <HAL_RCC_GetSysClockFreq>
 8005be4:	4603      	mov	r3, r0
 8005be6:	4a55      	ldr	r2, [pc, #340]	@ (8005d3c <HAL_RCC_ClockConfig+0x264>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d90f      	bls.n	8005c0c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005bec:	4b52      	ldr	r3, [pc, #328]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d109      	bne.n	8005c0c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005bf8:	4b4f      	ldr	r3, [pc, #316]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c00:	4a4d      	ldr	r2, [pc, #308]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c06:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c08:	2380      	movs	r3, #128	@ 0x80
 8005c0a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c0c:	4b4a      	ldr	r3, [pc, #296]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f023 0203 	bic.w	r2, r3, #3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	4947      	ldr	r1, [pc, #284]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c1e:	f7fc f9f3 	bl	8002008 <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c24:	e00a      	b.n	8005c3c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c26:	f7fc f9ef 	bl	8002008 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e077      	b.n	8005d2c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c3c:	4b3e      	ldr	r3, [pc, #248]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f003 020c 	and.w	r2, r3, #12
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d1eb      	bne.n	8005c26 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2b80      	cmp	r3, #128	@ 0x80
 8005c52:	d105      	bne.n	8005c60 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005c54:	4b38      	ldr	r3, [pc, #224]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	4a37      	ldr	r2, [pc, #220]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005c5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c5e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d010      	beq.n	8005c8e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	4b31      	ldr	r3, [pc, #196]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d208      	bcs.n	8005c8e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	492b      	ldr	r1, [pc, #172]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c8e:	4b29      	ldr	r3, [pc, #164]	@ (8005d34 <HAL_RCC_ClockConfig+0x25c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 030f 	and.w	r3, r3, #15
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d210      	bcs.n	8005cbe <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c9c:	4b25      	ldr	r3, [pc, #148]	@ (8005d34 <HAL_RCC_ClockConfig+0x25c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f023 020f 	bic.w	r2, r3, #15
 8005ca4:	4923      	ldr	r1, [pc, #140]	@ (8005d34 <HAL_RCC_ClockConfig+0x25c>)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cac:	4b21      	ldr	r3, [pc, #132]	@ (8005d34 <HAL_RCC_ClockConfig+0x25c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 030f 	and.w	r3, r3, #15
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d001      	beq.n	8005cbe <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e036      	b.n	8005d2c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0304 	and.w	r3, r3, #4
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d008      	beq.n	8005cdc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cca:	4b1b      	ldr	r3, [pc, #108]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	4918      	ldr	r1, [pc, #96]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0308 	and.w	r3, r3, #8
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d009      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ce8:	4b13      	ldr	r3, [pc, #76]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	00db      	lsls	r3, r3, #3
 8005cf6:	4910      	ldr	r1, [pc, #64]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005cfc:	f000 f826 	bl	8005d4c <HAL_RCC_GetSysClockFreq>
 8005d00:	4602      	mov	r2, r0
 8005d02:	4b0d      	ldr	r3, [pc, #52]	@ (8005d38 <HAL_RCC_ClockConfig+0x260>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	091b      	lsrs	r3, r3, #4
 8005d08:	f003 030f 	and.w	r3, r3, #15
 8005d0c:	490c      	ldr	r1, [pc, #48]	@ (8005d40 <HAL_RCC_ClockConfig+0x268>)
 8005d0e:	5ccb      	ldrb	r3, [r1, r3]
 8005d10:	f003 031f 	and.w	r3, r3, #31
 8005d14:	fa22 f303 	lsr.w	r3, r2, r3
 8005d18:	4a0a      	ldr	r2, [pc, #40]	@ (8005d44 <HAL_RCC_ClockConfig+0x26c>)
 8005d1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d48 <HAL_RCC_ClockConfig+0x270>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7fb fe0f 	bl	8001944 <HAL_InitTick>
 8005d26:	4603      	mov	r3, r0
 8005d28:	73fb      	strb	r3, [r7, #15]

  return status;
 8005d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	40022000 	.word	0x40022000
 8005d38:	40021000 	.word	0x40021000
 8005d3c:	04c4b400 	.word	0x04c4b400
 8005d40:	0800c0b0 	.word	0x0800c0b0
 8005d44:	20000004 	.word	0x20000004
 8005d48:	20000018 	.word	0x20000018

08005d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b089      	sub	sp, #36	@ 0x24
 8005d50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	61fb      	str	r3, [r7, #28]
 8005d56:	2300      	movs	r3, #0
 8005d58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d5a:	4b3e      	ldr	r3, [pc, #248]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 030c 	and.w	r3, r3, #12
 8005d62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d64:	4b3b      	ldr	r3, [pc, #236]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f003 0303 	and.w	r3, r3, #3
 8005d6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d005      	beq.n	8005d80 <HAL_RCC_GetSysClockFreq+0x34>
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	2b0c      	cmp	r3, #12
 8005d78:	d121      	bne.n	8005dbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d11e      	bne.n	8005dbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005d80:	4b34      	ldr	r3, [pc, #208]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0308 	and.w	r3, r3, #8
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d107      	bne.n	8005d9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005d8c:	4b31      	ldr	r3, [pc, #196]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d92:	0a1b      	lsrs	r3, r3, #8
 8005d94:	f003 030f 	and.w	r3, r3, #15
 8005d98:	61fb      	str	r3, [r7, #28]
 8005d9a:	e005      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005d9c:	4b2d      	ldr	r3, [pc, #180]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	091b      	lsrs	r3, r3, #4
 8005da2:	f003 030f 	and.w	r3, r3, #15
 8005da6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005da8:	4a2b      	ldr	r2, [pc, #172]	@ (8005e58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10d      	bne.n	8005dd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005dbc:	e00a      	b.n	8005dd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d102      	bne.n	8005dca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005dc4:	4b25      	ldr	r3, [pc, #148]	@ (8005e5c <HAL_RCC_GetSysClockFreq+0x110>)
 8005dc6:	61bb      	str	r3, [r7, #24]
 8005dc8:	e004      	b.n	8005dd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d101      	bne.n	8005dd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005dd0:	4b23      	ldr	r3, [pc, #140]	@ (8005e60 <HAL_RCC_GetSysClockFreq+0x114>)
 8005dd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	2b0c      	cmp	r3, #12
 8005dd8:	d134      	bne.n	8005e44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005dda:	4b1e      	ldr	r3, [pc, #120]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d003      	beq.n	8005df2 <HAL_RCC_GetSysClockFreq+0xa6>
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2b03      	cmp	r3, #3
 8005dee:	d003      	beq.n	8005df8 <HAL_RCC_GetSysClockFreq+0xac>
 8005df0:	e005      	b.n	8005dfe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005df2:	4b1a      	ldr	r3, [pc, #104]	@ (8005e5c <HAL_RCC_GetSysClockFreq+0x110>)
 8005df4:	617b      	str	r3, [r7, #20]
      break;
 8005df6:	e005      	b.n	8005e04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005df8:	4b19      	ldr	r3, [pc, #100]	@ (8005e60 <HAL_RCC_GetSysClockFreq+0x114>)
 8005dfa:	617b      	str	r3, [r7, #20]
      break;
 8005dfc:	e002      	b.n	8005e04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	617b      	str	r3, [r7, #20]
      break;
 8005e02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e04:	4b13      	ldr	r3, [pc, #76]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	091b      	lsrs	r3, r3, #4
 8005e0a:	f003 030f 	and.w	r3, r3, #15
 8005e0e:	3301      	adds	r3, #1
 8005e10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e12:	4b10      	ldr	r3, [pc, #64]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	0a1b      	lsrs	r3, r3, #8
 8005e18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	fb03 f202 	mul.w	r2, r3, r2
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	0e5b      	lsrs	r3, r3, #25
 8005e30:	f003 0303 	and.w	r3, r3, #3
 8005e34:	3301      	adds	r3, #1
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005e44:	69bb      	ldr	r3, [r7, #24]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3724      	adds	r7, #36	@ 0x24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	40021000 	.word	0x40021000
 8005e58:	0800c0c8 	.word	0x0800c0c8
 8005e5c:	00f42400 	.word	0x00f42400
 8005e60:	007a1200 	.word	0x007a1200

08005e64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e68:	4b03      	ldr	r3, [pc, #12]	@ (8005e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	20000004 	.word	0x20000004

08005e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005e80:	f7ff fff0 	bl	8005e64 <HAL_RCC_GetHCLKFreq>
 8005e84:	4602      	mov	r2, r0
 8005e86:	4b06      	ldr	r3, [pc, #24]	@ (8005ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	0a1b      	lsrs	r3, r3, #8
 8005e8c:	f003 0307 	and.w	r3, r3, #7
 8005e90:	4904      	ldr	r1, [pc, #16]	@ (8005ea4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e92:	5ccb      	ldrb	r3, [r1, r3]
 8005e94:	f003 031f 	and.w	r3, r3, #31
 8005e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	0800c0c0 	.word	0x0800c0c0

08005ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005eac:	f7ff ffda 	bl	8005e64 <HAL_RCC_GetHCLKFreq>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	4b06      	ldr	r3, [pc, #24]	@ (8005ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	0adb      	lsrs	r3, r3, #11
 8005eb8:	f003 0307 	and.w	r3, r3, #7
 8005ebc:	4904      	ldr	r1, [pc, #16]	@ (8005ed0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ebe:	5ccb      	ldrb	r3, [r1, r3]
 8005ec0:	f003 031f 	and.w	r3, r3, #31
 8005ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	0800c0c0 	.word	0x0800c0c0

08005ed4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	220f      	movs	r2, #15
 8005ee2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005ee4:	4b12      	ldr	r3, [pc, #72]	@ (8005f30 <HAL_RCC_GetClockConfig+0x5c>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f003 0203 	and.w	r2, r3, #3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8005f30 <HAL_RCC_GetClockConfig+0x5c>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005efc:	4b0c      	ldr	r3, [pc, #48]	@ (8005f30 <HAL_RCC_GetClockConfig+0x5c>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005f08:	4b09      	ldr	r3, [pc, #36]	@ (8005f30 <HAL_RCC_GetClockConfig+0x5c>)
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	08db      	lsrs	r3, r3, #3
 8005f0e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005f16:	4b07      	ldr	r3, [pc, #28]	@ (8005f34 <HAL_RCC_GetClockConfig+0x60>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 020f 	and.w	r2, r3, #15
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	601a      	str	r2, [r3, #0]
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	40021000 	.word	0x40021000
 8005f34:	40022000 	.word	0x40022000

08005f38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005f40:	2300      	movs	r3, #0
 8005f42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f44:	4b27      	ldr	r3, [pc, #156]	@ (8005fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f50:	f7ff f8e4 	bl	800511c <HAL_PWREx_GetVoltageRange>
 8005f54:	6178      	str	r0, [r7, #20]
 8005f56:	e014      	b.n	8005f82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f58:	4b22      	ldr	r3, [pc, #136]	@ (8005fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f5c:	4a21      	ldr	r2, [pc, #132]	@ (8005fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f62:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f64:	4b1f      	ldr	r3, [pc, #124]	@ (8005fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f70:	f7ff f8d4 	bl	800511c <HAL_PWREx_GetVoltageRange>
 8005f74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f76:	4b1b      	ldr	r3, [pc, #108]	@ (8005fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f7a:	4a1a      	ldr	r2, [pc, #104]	@ (8005fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f80:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f88:	d10b      	bne.n	8005fa2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b80      	cmp	r3, #128	@ 0x80
 8005f8e:	d913      	bls.n	8005fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2ba0      	cmp	r3, #160	@ 0xa0
 8005f94:	d902      	bls.n	8005f9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f96:	2302      	movs	r3, #2
 8005f98:	613b      	str	r3, [r7, #16]
 8005f9a:	e00d      	b.n	8005fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	613b      	str	r3, [r7, #16]
 8005fa0:	e00a      	b.n	8005fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fa6:	d902      	bls.n	8005fae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005fa8:	2302      	movs	r3, #2
 8005faa:	613b      	str	r3, [r7, #16]
 8005fac:	e004      	b.n	8005fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b70      	cmp	r3, #112	@ 0x70
 8005fb2:	d101      	bne.n	8005fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f023 020f 	bic.w	r2, r3, #15
 8005fc0:	4909      	ldr	r1, [pc, #36]	@ (8005fe8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005fc8:	4b07      	ldr	r3, [pc, #28]	@ (8005fe8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 030f 	and.w	r3, r3, #15
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d001      	beq.n	8005fda <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e000      	b.n	8005fdc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	40021000 	.word	0x40021000
 8005fe8:	40022000 	.word	0x40022000

08005fec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80060a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d00b      	beq.n	800601a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2b03      	cmp	r3, #3
 8006006:	d825      	bhi.n	8006054 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d008      	beq.n	8006020 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2b02      	cmp	r3, #2
 8006012:	d11f      	bne.n	8006054 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006014:	4b25      	ldr	r3, [pc, #148]	@ (80060ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006016:	613b      	str	r3, [r7, #16]
    break;
 8006018:	e01f      	b.n	800605a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800601a:	4b25      	ldr	r3, [pc, #148]	@ (80060b0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800601c:	613b      	str	r3, [r7, #16]
    break;
 800601e:	e01c      	b.n	800605a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006020:	4b21      	ldr	r3, [pc, #132]	@ (80060a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	2b00      	cmp	r3, #0
 800602a:	d107      	bne.n	800603c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800602c:	4b1e      	ldr	r3, [pc, #120]	@ (80060a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800602e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006032:	0a1b      	lsrs	r3, r3, #8
 8006034:	f003 030f 	and.w	r3, r3, #15
 8006038:	617b      	str	r3, [r7, #20]
 800603a:	e005      	b.n	8006048 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800603c:	4b1a      	ldr	r3, [pc, #104]	@ (80060a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	091b      	lsrs	r3, r3, #4
 8006042:	f003 030f 	and.w	r3, r3, #15
 8006046:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006048:	4a1a      	ldr	r2, [pc, #104]	@ (80060b4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006050:	613b      	str	r3, [r7, #16]
    break;
 8006052:	e002      	b.n	800605a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006054:	2300      	movs	r3, #0
 8006056:	613b      	str	r3, [r7, #16]
    break;
 8006058:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800605a:	4b13      	ldr	r3, [pc, #76]	@ (80060a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	091b      	lsrs	r3, r3, #4
 8006060:	f003 030f 	and.w	r3, r3, #15
 8006064:	3301      	adds	r3, #1
 8006066:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006068:	4b0f      	ldr	r3, [pc, #60]	@ (80060a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	0a1b      	lsrs	r3, r3, #8
 800606e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	fb03 f202 	mul.w	r2, r3, r2
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	fbb2 f3f3 	udiv	r3, r2, r3
 800607e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006080:	4b09      	ldr	r3, [pc, #36]	@ (80060a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	0e5b      	lsrs	r3, r3, #25
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	3301      	adds	r3, #1
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	fbb2 f3f3 	udiv	r3, r2, r3
 8006098:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800609a:	683b      	ldr	r3, [r7, #0]
}
 800609c:	4618      	mov	r0, r3
 800609e:	371c      	adds	r7, #28
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	40021000 	.word	0x40021000
 80060ac:	00f42400 	.word	0x00f42400
 80060b0:	007a1200 	.word	0x007a1200
 80060b4:	0800c0c8 	.word	0x0800c0c8

080060b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060c0:	2300      	movs	r3, #0
 80060c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060c4:	2300      	movs	r3, #0
 80060c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d040      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060d8:	2b80      	cmp	r3, #128	@ 0x80
 80060da:	d02a      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80060dc:	2b80      	cmp	r3, #128	@ 0x80
 80060de:	d825      	bhi.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80060e0:	2b60      	cmp	r3, #96	@ 0x60
 80060e2:	d026      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80060e4:	2b60      	cmp	r3, #96	@ 0x60
 80060e6:	d821      	bhi.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80060e8:	2b40      	cmp	r3, #64	@ 0x40
 80060ea:	d006      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x42>
 80060ec:	2b40      	cmp	r3, #64	@ 0x40
 80060ee:	d81d      	bhi.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d009      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80060f4:	2b20      	cmp	r3, #32
 80060f6:	d010      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80060f8:	e018      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80060fa:	4b89      	ldr	r3, [pc, #548]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	4a88      	ldr	r2, [pc, #544]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006104:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006106:	e015      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3304      	adds	r3, #4
 800610c:	2100      	movs	r1, #0
 800610e:	4618      	mov	r0, r3
 8006110:	f000 fb12 	bl	8006738 <RCCEx_PLLSAI1_Config>
 8006114:	4603      	mov	r3, r0
 8006116:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006118:	e00c      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	3320      	adds	r3, #32
 800611e:	2100      	movs	r1, #0
 8006120:	4618      	mov	r0, r3
 8006122:	f000 fbfd 	bl	8006920 <RCCEx_PLLSAI2_Config>
 8006126:	4603      	mov	r3, r0
 8006128:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800612a:	e003      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	74fb      	strb	r3, [r7, #19]
      break;
 8006130:	e000      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006132:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006134:	7cfb      	ldrb	r3, [r7, #19]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10b      	bne.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800613a:	4b79      	ldr	r3, [pc, #484]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800613c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006140:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006148:	4975      	ldr	r1, [pc, #468]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006150:	e001      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006152:	7cfb      	ldrb	r3, [r7, #19]
 8006154:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d047      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800616a:	d030      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 800616c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006170:	d82a      	bhi.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006172:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006176:	d02a      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006178:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800617c:	d824      	bhi.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800617e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006182:	d008      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006188:	d81e      	bhi.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00a      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800618e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006192:	d010      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006194:	e018      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006196:	4b62      	ldr	r3, [pc, #392]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	4a61      	ldr	r2, [pc, #388]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800619c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061a0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061a2:	e015      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3304      	adds	r3, #4
 80061a8:	2100      	movs	r1, #0
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 fac4 	bl	8006738 <RCCEx_PLLSAI1_Config>
 80061b0:	4603      	mov	r3, r0
 80061b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061b4:	e00c      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	3320      	adds	r3, #32
 80061ba:	2100      	movs	r1, #0
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fbaf 	bl	8006920 <RCCEx_PLLSAI2_Config>
 80061c2:	4603      	mov	r3, r0
 80061c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061c6:	e003      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	74fb      	strb	r3, [r7, #19]
      break;
 80061cc:	e000      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80061ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061d0:	7cfb      	ldrb	r3, [r7, #19]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10b      	bne.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80061d6:	4b52      	ldr	r3, [pc, #328]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e4:	494e      	ldr	r1, [pc, #312]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80061ec:	e001      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ee:	7cfb      	ldrb	r3, [r7, #19]
 80061f0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 809f 	beq.w	800633e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006200:	2300      	movs	r3, #0
 8006202:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006204:	4b46      	ldr	r3, [pc, #280]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006210:	2301      	movs	r3, #1
 8006212:	e000      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006214:	2300      	movs	r3, #0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00d      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800621a:	4b41      	ldr	r3, [pc, #260]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800621c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800621e:	4a40      	ldr	r2, [pc, #256]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006224:	6593      	str	r3, [r2, #88]	@ 0x58
 8006226:	4b3e      	ldr	r3, [pc, #248]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800622a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800622e:	60bb      	str	r3, [r7, #8]
 8006230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006232:	2301      	movs	r3, #1
 8006234:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006236:	4b3b      	ldr	r3, [pc, #236]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a3a      	ldr	r2, [pc, #232]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800623c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006240:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006242:	f7fb fee1 	bl	8002008 <HAL_GetTick>
 8006246:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006248:	e009      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800624a:	f7fb fedd 	bl	8002008 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	d902      	bls.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	74fb      	strb	r3, [r7, #19]
        break;
 800625c:	e005      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800625e:	4b31      	ldr	r3, [pc, #196]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006266:	2b00      	cmp	r3, #0
 8006268:	d0ef      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800626a:	7cfb      	ldrb	r3, [r7, #19]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d15b      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006270:	4b2b      	ldr	r3, [pc, #172]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006276:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800627a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d01f      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	429a      	cmp	r2, r3
 800628c:	d019      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800628e:	4b24      	ldr	r3, [pc, #144]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006298:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800629a:	4b21      	ldr	r3, [pc, #132]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800629c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a0:	4a1f      	ldr	r2, [pc, #124]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062aa:	4b1d      	ldr	r3, [pc, #116]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062b0:	4a1b      	ldr	r2, [pc, #108]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062ba:	4a19      	ldr	r2, [pc, #100]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d016      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062cc:	f7fb fe9c 	bl	8002008 <HAL_GetTick>
 80062d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062d2:	e00b      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062d4:	f7fb fe98 	bl	8002008 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d902      	bls.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	74fb      	strb	r3, [r7, #19]
            break;
 80062ea:	e006      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0ec      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80062fa:	7cfb      	ldrb	r3, [r7, #19]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10c      	bne.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006300:	4b07      	ldr	r3, [pc, #28]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006306:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006310:	4903      	ldr	r1, [pc, #12]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006312:	4313      	orrs	r3, r2
 8006314:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006318:	e008      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800631a:	7cfb      	ldrb	r3, [r7, #19]
 800631c:	74bb      	strb	r3, [r7, #18]
 800631e:	e005      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006320:	40021000 	.word	0x40021000
 8006324:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006328:	7cfb      	ldrb	r3, [r7, #19]
 800632a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800632c:	7c7b      	ldrb	r3, [r7, #17]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d105      	bne.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006332:	4ba0      	ldr	r3, [pc, #640]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006336:	4a9f      	ldr	r2, [pc, #636]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006338:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800633c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800634a:	4b9a      	ldr	r3, [pc, #616]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800634c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006350:	f023 0203 	bic.w	r2, r3, #3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006358:	4996      	ldr	r1, [pc, #600]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800635a:	4313      	orrs	r3, r2
 800635c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800636c:	4b91      	ldr	r3, [pc, #580]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800636e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006372:	f023 020c 	bic.w	r2, r3, #12
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637a:	498e      	ldr	r1, [pc, #568]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800637c:	4313      	orrs	r3, r2
 800637e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0304 	and.w	r3, r3, #4
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800638e:	4b89      	ldr	r3, [pc, #548]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006394:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800639c:	4985      	ldr	r1, [pc, #532]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0308 	and.w	r3, r3, #8
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00a      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063b0:	4b80      	ldr	r3, [pc, #512]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063be:	497d      	ldr	r1, [pc, #500]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0310 	and.w	r3, r3, #16
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00a      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063d2:	4b78      	ldr	r3, [pc, #480]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063e0:	4974      	ldr	r1, [pc, #464]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00a      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063f4:	4b6f      	ldr	r3, [pc, #444]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006402:	496c      	ldr	r1, [pc, #432]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006404:	4313      	orrs	r3, r2
 8006406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00a      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006416:	4b67      	ldr	r3, [pc, #412]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800641c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006424:	4963      	ldr	r1, [pc, #396]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006438:	4b5e      	ldr	r3, [pc, #376]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800643a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800643e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006446:	495b      	ldr	r1, [pc, #364]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006448:	4313      	orrs	r3, r2
 800644a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800645a:	4b56      	ldr	r3, [pc, #344]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800645c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006460:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006468:	4952      	ldr	r1, [pc, #328]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800647c:	4b4d      	ldr	r3, [pc, #308]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800647e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006482:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800648a:	494a      	ldr	r1, [pc, #296]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800648c:	4313      	orrs	r3, r2
 800648e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800649e:	4b45      	ldr	r3, [pc, #276]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064ac:	4941      	ldr	r1, [pc, #260]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064c0:	4b3c      	ldr	r3, [pc, #240]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064c6:	f023 0203 	bic.w	r2, r3, #3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064ce:	4939      	ldr	r1, [pc, #228]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d028      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064e2:	4b34      	ldr	r3, [pc, #208]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064f0:	4930      	ldr	r1, [pc, #192]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006500:	d106      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006502:	4b2c      	ldr	r3, [pc, #176]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	4a2b      	ldr	r2, [pc, #172]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006508:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800650c:	60d3      	str	r3, [r2, #12]
 800650e:	e011      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006514:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006518:	d10c      	bne.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3304      	adds	r3, #4
 800651e:	2101      	movs	r1, #1
 8006520:	4618      	mov	r0, r3
 8006522:	f000 f909 	bl	8006738 <RCCEx_PLLSAI1_Config>
 8006526:	4603      	mov	r3, r0
 8006528:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800652a:	7cfb      	ldrb	r3, [r7, #19]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006530:	7cfb      	ldrb	r3, [r7, #19]
 8006532:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d04d      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006544:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006548:	d108      	bne.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800654a:	4b1a      	ldr	r3, [pc, #104]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800654c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006550:	4a18      	ldr	r2, [pc, #96]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006552:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006556:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800655a:	e012      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800655c:	4b15      	ldr	r3, [pc, #84]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800655e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006562:	4a14      	ldr	r2, [pc, #80]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006564:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006568:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800656c:	4b11      	ldr	r3, [pc, #68]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800656e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006572:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800657a:	490e      	ldr	r1, [pc, #56]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800657c:	4313      	orrs	r3, r2
 800657e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006586:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800658a:	d106      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800658c:	4b09      	ldr	r3, [pc, #36]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	4a08      	ldr	r2, [pc, #32]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006592:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006596:	60d3      	str	r3, [r2, #12]
 8006598:	e020      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800659e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065a2:	d109      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80065a4:	4b03      	ldr	r3, [pc, #12]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	4a02      	ldr	r2, [pc, #8]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065ae:	60d3      	str	r3, [r2, #12]
 80065b0:	e014      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80065b2:	bf00      	nop
 80065b4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065c0:	d10c      	bne.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3304      	adds	r3, #4
 80065c6:	2101      	movs	r1, #1
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 f8b5 	bl	8006738 <RCCEx_PLLSAI1_Config>
 80065ce:	4603      	mov	r3, r0
 80065d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065d2:	7cfb      	ldrb	r3, [r7, #19]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80065d8:	7cfb      	ldrb	r3, [r7, #19]
 80065da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d028      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065e8:	4b4a      	ldr	r3, [pc, #296]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065f6:	4947      	ldr	r1, [pc, #284]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006602:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006606:	d106      	bne.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006608:	4b42      	ldr	r3, [pc, #264]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	4a41      	ldr	r2, [pc, #260]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800660e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006612:	60d3      	str	r3, [r2, #12]
 8006614:	e011      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800661a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800661e:	d10c      	bne.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	3304      	adds	r3, #4
 8006624:	2101      	movs	r1, #1
 8006626:	4618      	mov	r0, r3
 8006628:	f000 f886 	bl	8006738 <RCCEx_PLLSAI1_Config>
 800662c:	4603      	mov	r3, r0
 800662e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006630:	7cfb      	ldrb	r3, [r7, #19]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006636:	7cfb      	ldrb	r3, [r7, #19]
 8006638:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d01e      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006646:	4b33      	ldr	r3, [pc, #204]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800664c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006656:	492f      	ldr	r1, [pc, #188]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006658:	4313      	orrs	r3, r2
 800665a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006664:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006668:	d10c      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	3304      	adds	r3, #4
 800666e:	2102      	movs	r1, #2
 8006670:	4618      	mov	r0, r3
 8006672:	f000 f861 	bl	8006738 <RCCEx_PLLSAI1_Config>
 8006676:	4603      	mov	r3, r0
 8006678:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800667a:	7cfb      	ldrb	r3, [r7, #19]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006680:	7cfb      	ldrb	r3, [r7, #19]
 8006682:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00b      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006690:	4b20      	ldr	r3, [pc, #128]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006692:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006696:	f023 0204 	bic.w	r2, r3, #4
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066a0:	491c      	ldr	r1, [pc, #112]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00b      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80066b4:	4b17      	ldr	r3, [pc, #92]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066ba:	f023 0218 	bic.w	r2, r3, #24
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066c4:	4913      	ldr	r1, [pc, #76]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d017      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80066d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066e8:	490a      	ldr	r1, [pc, #40]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066fa:	d105      	bne.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066fc:	4b05      	ldr	r3, [pc, #20]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	4a04      	ldr	r2, [pc, #16]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006706:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006708:	7cbb      	ldrb	r3, [r7, #18]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	40021000 	.word	0x40021000

08006718 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006718:	b480      	push	{r7}
 800671a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800671c:	4b05      	ldr	r3, [pc, #20]	@ (8006734 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a04      	ldr	r2, [pc, #16]	@ (8006734 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006722:	f043 0304 	orr.w	r3, r3, #4
 8006726:	6013      	str	r3, [r2, #0]
}
 8006728:	bf00      	nop
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	40021000 	.word	0x40021000

08006738 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006746:	4b72      	ldr	r3, [pc, #456]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f003 0303 	and.w	r3, r3, #3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00e      	beq.n	8006770 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006752:	4b6f      	ldr	r3, [pc, #444]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f003 0203 	and.w	r2, r3, #3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	429a      	cmp	r2, r3
 8006760:	d103      	bne.n	800676a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
       ||
 8006766:	2b00      	cmp	r3, #0
 8006768:	d142      	bne.n	80067f0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	73fb      	strb	r3, [r7, #15]
 800676e:	e03f      	b.n	80067f0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b03      	cmp	r3, #3
 8006776:	d018      	beq.n	80067aa <RCCEx_PLLSAI1_Config+0x72>
 8006778:	2b03      	cmp	r3, #3
 800677a:	d825      	bhi.n	80067c8 <RCCEx_PLLSAI1_Config+0x90>
 800677c:	2b01      	cmp	r3, #1
 800677e:	d002      	beq.n	8006786 <RCCEx_PLLSAI1_Config+0x4e>
 8006780:	2b02      	cmp	r3, #2
 8006782:	d009      	beq.n	8006798 <RCCEx_PLLSAI1_Config+0x60>
 8006784:	e020      	b.n	80067c8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006786:	4b62      	ldr	r3, [pc, #392]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d11d      	bne.n	80067ce <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006796:	e01a      	b.n	80067ce <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006798:	4b5d      	ldr	r3, [pc, #372]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1d8>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d116      	bne.n	80067d2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067a8:	e013      	b.n	80067d2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80067aa:	4b59      	ldr	r3, [pc, #356]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10f      	bne.n	80067d6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80067b6:	4b56      	ldr	r3, [pc, #344]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067c6:	e006      	b.n	80067d6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	73fb      	strb	r3, [r7, #15]
      break;
 80067cc:	e004      	b.n	80067d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80067ce:	bf00      	nop
 80067d0:	e002      	b.n	80067d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80067d2:	bf00      	nop
 80067d4:	e000      	b.n	80067d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80067d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d108      	bne.n	80067f0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80067de:	4b4c      	ldr	r3, [pc, #304]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f023 0203 	bic.w	r2, r3, #3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4949      	ldr	r1, [pc, #292]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067ec:	4313      	orrs	r3, r2
 80067ee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f040 8086 	bne.w	8006904 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80067f8:	4b45      	ldr	r3, [pc, #276]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a44      	ldr	r2, [pc, #272]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006804:	f7fb fc00 	bl	8002008 <HAL_GetTick>
 8006808:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800680a:	e009      	b.n	8006820 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800680c:	f7fb fbfc 	bl	8002008 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b02      	cmp	r3, #2
 8006818:	d902      	bls.n	8006820 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	73fb      	strb	r3, [r7, #15]
        break;
 800681e:	e005      	b.n	800682c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006820:	4b3b      	ldr	r3, [pc, #236]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1ef      	bne.n	800680c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800682c:	7bfb      	ldrb	r3, [r7, #15]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d168      	bne.n	8006904 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d113      	bne.n	8006860 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006838:	4b35      	ldr	r3, [pc, #212]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1d8>)
 800683a:	691a      	ldr	r2, [r3, #16]
 800683c:	4b35      	ldr	r3, [pc, #212]	@ (8006914 <RCCEx_PLLSAI1_Config+0x1dc>)
 800683e:	4013      	ands	r3, r2
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	6892      	ldr	r2, [r2, #8]
 8006844:	0211      	lsls	r1, r2, #8
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	68d2      	ldr	r2, [r2, #12]
 800684a:	06d2      	lsls	r2, r2, #27
 800684c:	4311      	orrs	r1, r2
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	6852      	ldr	r2, [r2, #4]
 8006852:	3a01      	subs	r2, #1
 8006854:	0112      	lsls	r2, r2, #4
 8006856:	430a      	orrs	r2, r1
 8006858:	492d      	ldr	r1, [pc, #180]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1d8>)
 800685a:	4313      	orrs	r3, r2
 800685c:	610b      	str	r3, [r1, #16]
 800685e:	e02d      	b.n	80068bc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d115      	bne.n	8006892 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006866:	4b2a      	ldr	r3, [pc, #168]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006868:	691a      	ldr	r2, [r3, #16]
 800686a:	4b2b      	ldr	r3, [pc, #172]	@ (8006918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800686c:	4013      	ands	r3, r2
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	6892      	ldr	r2, [r2, #8]
 8006872:	0211      	lsls	r1, r2, #8
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6912      	ldr	r2, [r2, #16]
 8006878:	0852      	lsrs	r2, r2, #1
 800687a:	3a01      	subs	r2, #1
 800687c:	0552      	lsls	r2, r2, #21
 800687e:	4311      	orrs	r1, r2
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	6852      	ldr	r2, [r2, #4]
 8006884:	3a01      	subs	r2, #1
 8006886:	0112      	lsls	r2, r2, #4
 8006888:	430a      	orrs	r2, r1
 800688a:	4921      	ldr	r1, [pc, #132]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1d8>)
 800688c:	4313      	orrs	r3, r2
 800688e:	610b      	str	r3, [r1, #16]
 8006890:	e014      	b.n	80068bc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006892:	4b1f      	ldr	r3, [pc, #124]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006894:	691a      	ldr	r2, [r3, #16]
 8006896:	4b21      	ldr	r3, [pc, #132]	@ (800691c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006898:	4013      	ands	r3, r2
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	6892      	ldr	r2, [r2, #8]
 800689e:	0211      	lsls	r1, r2, #8
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6952      	ldr	r2, [r2, #20]
 80068a4:	0852      	lsrs	r2, r2, #1
 80068a6:	3a01      	subs	r2, #1
 80068a8:	0652      	lsls	r2, r2, #25
 80068aa:	4311      	orrs	r1, r2
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	6852      	ldr	r2, [r2, #4]
 80068b0:	3a01      	subs	r2, #1
 80068b2:	0112      	lsls	r2, r2, #4
 80068b4:	430a      	orrs	r2, r1
 80068b6:	4916      	ldr	r1, [pc, #88]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80068bc:	4b14      	ldr	r3, [pc, #80]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a13      	ldr	r2, [pc, #76]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c8:	f7fb fb9e 	bl	8002008 <HAL_GetTick>
 80068cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80068ce:	e009      	b.n	80068e4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068d0:	f7fb fb9a 	bl	8002008 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d902      	bls.n	80068e4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	73fb      	strb	r3, [r7, #15]
          break;
 80068e2:	e005      	b.n	80068f0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80068e4:	4b0a      	ldr	r3, [pc, #40]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d0ef      	beq.n	80068d0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d106      	bne.n	8006904 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80068f6:	4b06      	ldr	r3, [pc, #24]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068f8:	691a      	ldr	r2, [r3, #16]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	4904      	ldr	r1, [pc, #16]	@ (8006910 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006900:	4313      	orrs	r3, r2
 8006902:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006904:	7bfb      	ldrb	r3, [r7, #15]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	40021000 	.word	0x40021000
 8006914:	07ff800f 	.word	0x07ff800f
 8006918:	ff9f800f 	.word	0xff9f800f
 800691c:	f9ff800f 	.word	0xf9ff800f

08006920 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800692e:	4b72      	ldr	r3, [pc, #456]	@ (8006af8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	f003 0303 	and.w	r3, r3, #3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00e      	beq.n	8006958 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800693a:	4b6f      	ldr	r3, [pc, #444]	@ (8006af8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f003 0203 	and.w	r2, r3, #3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	429a      	cmp	r2, r3
 8006948:	d103      	bne.n	8006952 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
       ||
 800694e:	2b00      	cmp	r3, #0
 8006950:	d142      	bne.n	80069d8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	73fb      	strb	r3, [r7, #15]
 8006956:	e03f      	b.n	80069d8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b03      	cmp	r3, #3
 800695e:	d018      	beq.n	8006992 <RCCEx_PLLSAI2_Config+0x72>
 8006960:	2b03      	cmp	r3, #3
 8006962:	d825      	bhi.n	80069b0 <RCCEx_PLLSAI2_Config+0x90>
 8006964:	2b01      	cmp	r3, #1
 8006966:	d002      	beq.n	800696e <RCCEx_PLLSAI2_Config+0x4e>
 8006968:	2b02      	cmp	r3, #2
 800696a:	d009      	beq.n	8006980 <RCCEx_PLLSAI2_Config+0x60>
 800696c:	e020      	b.n	80069b0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800696e:	4b62      	ldr	r3, [pc, #392]	@ (8006af8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d11d      	bne.n	80069b6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800697e:	e01a      	b.n	80069b6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006980:	4b5d      	ldr	r3, [pc, #372]	@ (8006af8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006988:	2b00      	cmp	r3, #0
 800698a:	d116      	bne.n	80069ba <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006990:	e013      	b.n	80069ba <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006992:	4b59      	ldr	r3, [pc, #356]	@ (8006af8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10f      	bne.n	80069be <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800699e:	4b56      	ldr	r3, [pc, #344]	@ (8006af8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d109      	bne.n	80069be <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069ae:	e006      	b.n	80069be <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	73fb      	strb	r3, [r7, #15]
      break;
 80069b4:	e004      	b.n	80069c0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80069b6:	bf00      	nop
 80069b8:	e002      	b.n	80069c0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80069ba:	bf00      	nop
 80069bc:	e000      	b.n	80069c0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80069be:	bf00      	nop
    }

    if(status == HAL_OK)
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d108      	bne.n	80069d8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80069c6:	4b4c      	ldr	r3, [pc, #304]	@ (8006af8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	f023 0203 	bic.w	r2, r3, #3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4949      	ldr	r1, [pc, #292]	@ (8006af8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f040 8086 	bne.w	8006aec <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80069e0:	4b45      	ldr	r3, [pc, #276]	@ (8006af8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a44      	ldr	r2, [pc, #272]	@ (8006af8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069ec:	f7fb fb0c 	bl	8002008 <HAL_GetTick>
 80069f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80069f2:	e009      	b.n	8006a08 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80069f4:	f7fb fb08 	bl	8002008 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d902      	bls.n	8006a08 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	73fb      	strb	r3, [r7, #15]
        break;
 8006a06:	e005      	b.n	8006a14 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a08:	4b3b      	ldr	r3, [pc, #236]	@ (8006af8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1ef      	bne.n	80069f4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d168      	bne.n	8006aec <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d113      	bne.n	8006a48 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006a20:	4b35      	ldr	r3, [pc, #212]	@ (8006af8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a22:	695a      	ldr	r2, [r3, #20]
 8006a24:	4b35      	ldr	r3, [pc, #212]	@ (8006afc <RCCEx_PLLSAI2_Config+0x1dc>)
 8006a26:	4013      	ands	r3, r2
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	6892      	ldr	r2, [r2, #8]
 8006a2c:	0211      	lsls	r1, r2, #8
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	68d2      	ldr	r2, [r2, #12]
 8006a32:	06d2      	lsls	r2, r2, #27
 8006a34:	4311      	orrs	r1, r2
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	6852      	ldr	r2, [r2, #4]
 8006a3a:	3a01      	subs	r2, #1
 8006a3c:	0112      	lsls	r2, r2, #4
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	492d      	ldr	r1, [pc, #180]	@ (8006af8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	614b      	str	r3, [r1, #20]
 8006a46:	e02d      	b.n	8006aa4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d115      	bne.n	8006a7a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8006af8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a50:	695a      	ldr	r2, [r3, #20]
 8006a52:	4b2b      	ldr	r3, [pc, #172]	@ (8006b00 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006a54:	4013      	ands	r3, r2
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	6892      	ldr	r2, [r2, #8]
 8006a5a:	0211      	lsls	r1, r2, #8
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6912      	ldr	r2, [r2, #16]
 8006a60:	0852      	lsrs	r2, r2, #1
 8006a62:	3a01      	subs	r2, #1
 8006a64:	0552      	lsls	r2, r2, #21
 8006a66:	4311      	orrs	r1, r2
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	6852      	ldr	r2, [r2, #4]
 8006a6c:	3a01      	subs	r2, #1
 8006a6e:	0112      	lsls	r2, r2, #4
 8006a70:	430a      	orrs	r2, r1
 8006a72:	4921      	ldr	r1, [pc, #132]	@ (8006af8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	614b      	str	r3, [r1, #20]
 8006a78:	e014      	b.n	8006aa4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8006af8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a7c:	695a      	ldr	r2, [r3, #20]
 8006a7e:	4b21      	ldr	r3, [pc, #132]	@ (8006b04 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006a80:	4013      	ands	r3, r2
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	6892      	ldr	r2, [r2, #8]
 8006a86:	0211      	lsls	r1, r2, #8
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	6952      	ldr	r2, [r2, #20]
 8006a8c:	0852      	lsrs	r2, r2, #1
 8006a8e:	3a01      	subs	r2, #1
 8006a90:	0652      	lsls	r2, r2, #25
 8006a92:	4311      	orrs	r1, r2
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6852      	ldr	r2, [r2, #4]
 8006a98:	3a01      	subs	r2, #1
 8006a9a:	0112      	lsls	r2, r2, #4
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	4916      	ldr	r1, [pc, #88]	@ (8006af8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006aa4:	4b14      	ldr	r3, [pc, #80]	@ (8006af8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a13      	ldr	r2, [pc, #76]	@ (8006af8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006aaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006aae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ab0:	f7fb faaa 	bl	8002008 <HAL_GetTick>
 8006ab4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ab6:	e009      	b.n	8006acc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006ab8:	f7fb faa6 	bl	8002008 <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d902      	bls.n	8006acc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	73fb      	strb	r3, [r7, #15]
          break;
 8006aca:	e005      	b.n	8006ad8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006acc:	4b0a      	ldr	r3, [pc, #40]	@ (8006af8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d0ef      	beq.n	8006ab8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d106      	bne.n	8006aec <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006ade:	4b06      	ldr	r3, [pc, #24]	@ (8006af8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ae0:	695a      	ldr	r2, [r3, #20]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	4904      	ldr	r1, [pc, #16]	@ (8006af8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	40021000 	.word	0x40021000
 8006afc:	07ff800f 	.word	0x07ff800f
 8006b00:	ff9f800f 	.word	0xff9f800f
 8006b04:	f9ff800f 	.word	0xf9ff800f

08006b08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e095      	b.n	8006c46 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d108      	bne.n	8006b34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b2a:	d009      	beq.n	8006b40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	61da      	str	r2, [r3, #28]
 8006b32:	e005      	b.n	8006b40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d106      	bne.n	8006b60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7fa fd84 	bl	8001668 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2202      	movs	r2, #2
 8006b64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b80:	d902      	bls.n	8006b88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006b82:	2300      	movs	r3, #0
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	e002      	b.n	8006b8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006b88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006b8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006b96:	d007      	beq.n	8006ba8 <HAL_SPI_Init+0xa0>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ba0:	d002      	beq.n	8006ba8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006bb8:	431a      	orrs	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	695b      	ldr	r3, [r3, #20]
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	69db      	ldr	r3, [r3, #28]
 8006bdc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006be0:	431a      	orrs	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bea:	ea42 0103 	orr.w	r1, r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	0c1b      	lsrs	r3, r3, #16
 8006c04:	f003 0204 	and.w	r2, r3, #4
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0c:	f003 0310 	and.w	r3, r3, #16
 8006c10:	431a      	orrs	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c16:	f003 0308 	and.w	r3, r3, #8
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006c24:	ea42 0103 	orr.w	r1, r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b082      	sub	sp, #8
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e049      	b.n	8006cf4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d106      	bne.n	8006c7a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f841 	bl	8006cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	3304      	adds	r3, #4
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	f000 f9d9 	bl	8007044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d001      	beq.n	8006d28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e04f      	b.n	8006dc8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68da      	ldr	r2, [r3, #12]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f042 0201 	orr.w	r2, r2, #1
 8006d3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a23      	ldr	r2, [pc, #140]	@ (8006dd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d01d      	beq.n	8006d86 <HAL_TIM_Base_Start_IT+0x76>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d52:	d018      	beq.n	8006d86 <HAL_TIM_Base_Start_IT+0x76>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a1f      	ldr	r2, [pc, #124]	@ (8006dd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d013      	beq.n	8006d86 <HAL_TIM_Base_Start_IT+0x76>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a1e      	ldr	r2, [pc, #120]	@ (8006ddc <HAL_TIM_Base_Start_IT+0xcc>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00e      	beq.n	8006d86 <HAL_TIM_Base_Start_IT+0x76>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8006de0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d009      	beq.n	8006d86 <HAL_TIM_Base_Start_IT+0x76>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a1b      	ldr	r2, [pc, #108]	@ (8006de4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d004      	beq.n	8006d86 <HAL_TIM_Base_Start_IT+0x76>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a19      	ldr	r2, [pc, #100]	@ (8006de8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d115      	bne.n	8006db2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689a      	ldr	r2, [r3, #8]
 8006d8c:	4b17      	ldr	r3, [pc, #92]	@ (8006dec <HAL_TIM_Base_Start_IT+0xdc>)
 8006d8e:	4013      	ands	r3, r2
 8006d90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2b06      	cmp	r3, #6
 8006d96:	d015      	beq.n	8006dc4 <HAL_TIM_Base_Start_IT+0xb4>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d9e:	d011      	beq.n	8006dc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f042 0201 	orr.w	r2, r2, #1
 8006dae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006db0:	e008      	b.n	8006dc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f042 0201 	orr.w	r2, r2, #1
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	e000      	b.n	8006dc6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	40012c00 	.word	0x40012c00
 8006dd8:	40000400 	.word	0x40000400
 8006ddc:	40000800 	.word	0x40000800
 8006de0:	40000c00 	.word	0x40000c00
 8006de4:	40013400 	.word	0x40013400
 8006de8:	40014000 	.word	0x40014000
 8006dec:	00010007 	.word	0x00010007

08006df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d020      	beq.n	8006e54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f003 0302 	and.w	r3, r3, #2
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d01b      	beq.n	8006e54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f06f 0202 	mvn.w	r2, #2
 8006e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	f003 0303 	and.w	r3, r3, #3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f8e4 	bl	8007008 <HAL_TIM_IC_CaptureCallback>
 8006e40:	e005      	b.n	8006e4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f8d6 	bl	8006ff4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f8e7 	bl	800701c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f003 0304 	and.w	r3, r3, #4
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d020      	beq.n	8006ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d01b      	beq.n	8006ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f06f 0204 	mvn.w	r2, #4
 8006e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2202      	movs	r2, #2
 8006e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f8be 	bl	8007008 <HAL_TIM_IC_CaptureCallback>
 8006e8c:	e005      	b.n	8006e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f8b0 	bl	8006ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f8c1 	bl	800701c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f003 0308 	and.w	r3, r3, #8
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d020      	beq.n	8006eec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f003 0308 	and.w	r3, r3, #8
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d01b      	beq.n	8006eec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f06f 0208 	mvn.w	r2, #8
 8006ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2204      	movs	r2, #4
 8006ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	f003 0303 	and.w	r3, r3, #3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d003      	beq.n	8006eda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f898 	bl	8007008 <HAL_TIM_IC_CaptureCallback>
 8006ed8:	e005      	b.n	8006ee6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f88a 	bl	8006ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f89b 	bl	800701c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	f003 0310 	and.w	r3, r3, #16
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d020      	beq.n	8006f38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f003 0310 	and.w	r3, r3, #16
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d01b      	beq.n	8006f38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f06f 0210 	mvn.w	r2, #16
 8006f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2208      	movs	r2, #8
 8006f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	69db      	ldr	r3, [r3, #28]
 8006f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f872 	bl	8007008 <HAL_TIM_IC_CaptureCallback>
 8006f24:	e005      	b.n	8006f32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f864 	bl	8006ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f875 	bl	800701c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00c      	beq.n	8006f5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d007      	beq.n	8006f5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f06f 0201 	mvn.w	r2, #1
 8006f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7fa f958 	bl	800120c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00c      	beq.n	8006f80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d007      	beq.n	8006f80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f906 	bl	800718c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00c      	beq.n	8006fa4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d007      	beq.n	8006fa4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f8fe 	bl	80071a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00c      	beq.n	8006fc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d007      	beq.n	8006fc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f834 	bl	8007030 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f003 0320 	and.w	r3, r3, #32
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00c      	beq.n	8006fec <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f003 0320 	and.w	r3, r3, #32
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d007      	beq.n	8006fec <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f06f 0220 	mvn.w	r2, #32
 8006fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f8c6 	bl	8007178 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fec:	bf00      	nop
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a40      	ldr	r2, [pc, #256]	@ (8007158 <TIM_Base_SetConfig+0x114>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d013      	beq.n	8007084 <TIM_Base_SetConfig+0x40>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007062:	d00f      	beq.n	8007084 <TIM_Base_SetConfig+0x40>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a3d      	ldr	r2, [pc, #244]	@ (800715c <TIM_Base_SetConfig+0x118>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d00b      	beq.n	8007084 <TIM_Base_SetConfig+0x40>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a3c      	ldr	r2, [pc, #240]	@ (8007160 <TIM_Base_SetConfig+0x11c>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d007      	beq.n	8007084 <TIM_Base_SetConfig+0x40>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a3b      	ldr	r2, [pc, #236]	@ (8007164 <TIM_Base_SetConfig+0x120>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d003      	beq.n	8007084 <TIM_Base_SetConfig+0x40>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a3a      	ldr	r2, [pc, #232]	@ (8007168 <TIM_Base_SetConfig+0x124>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d108      	bne.n	8007096 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800708a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	4313      	orrs	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a2f      	ldr	r2, [pc, #188]	@ (8007158 <TIM_Base_SetConfig+0x114>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d01f      	beq.n	80070de <TIM_Base_SetConfig+0x9a>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070a4:	d01b      	beq.n	80070de <TIM_Base_SetConfig+0x9a>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a2c      	ldr	r2, [pc, #176]	@ (800715c <TIM_Base_SetConfig+0x118>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d017      	beq.n	80070de <TIM_Base_SetConfig+0x9a>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a2b      	ldr	r2, [pc, #172]	@ (8007160 <TIM_Base_SetConfig+0x11c>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d013      	beq.n	80070de <TIM_Base_SetConfig+0x9a>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a2a      	ldr	r2, [pc, #168]	@ (8007164 <TIM_Base_SetConfig+0x120>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d00f      	beq.n	80070de <TIM_Base_SetConfig+0x9a>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a29      	ldr	r2, [pc, #164]	@ (8007168 <TIM_Base_SetConfig+0x124>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d00b      	beq.n	80070de <TIM_Base_SetConfig+0x9a>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a28      	ldr	r2, [pc, #160]	@ (800716c <TIM_Base_SetConfig+0x128>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d007      	beq.n	80070de <TIM_Base_SetConfig+0x9a>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a27      	ldr	r2, [pc, #156]	@ (8007170 <TIM_Base_SetConfig+0x12c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d003      	beq.n	80070de <TIM_Base_SetConfig+0x9a>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a26      	ldr	r2, [pc, #152]	@ (8007174 <TIM_Base_SetConfig+0x130>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d108      	bne.n	80070f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	689a      	ldr	r2, [r3, #8]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a10      	ldr	r2, [pc, #64]	@ (8007158 <TIM_Base_SetConfig+0x114>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d00f      	beq.n	800713c <TIM_Base_SetConfig+0xf8>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a12      	ldr	r2, [pc, #72]	@ (8007168 <TIM_Base_SetConfig+0x124>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d00b      	beq.n	800713c <TIM_Base_SetConfig+0xf8>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a11      	ldr	r2, [pc, #68]	@ (800716c <TIM_Base_SetConfig+0x128>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d007      	beq.n	800713c <TIM_Base_SetConfig+0xf8>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a10      	ldr	r2, [pc, #64]	@ (8007170 <TIM_Base_SetConfig+0x12c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d003      	beq.n	800713c <TIM_Base_SetConfig+0xf8>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a0f      	ldr	r2, [pc, #60]	@ (8007174 <TIM_Base_SetConfig+0x130>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d103      	bne.n	8007144 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	691a      	ldr	r2, [r3, #16]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	615a      	str	r2, [r3, #20]
}
 800714a:	bf00      	nop
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	40012c00 	.word	0x40012c00
 800715c:	40000400 	.word	0x40000400
 8007160:	40000800 	.word	0x40000800
 8007164:	40000c00 	.word	0x40000c00
 8007168:	40013400 	.word	0x40013400
 800716c:	40014000 	.word	0x40014000
 8007170:	40014400 	.word	0x40014400
 8007174:	40014800 	.word	0x40014800

08007178 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e042      	b.n	800724c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d106      	bne.n	80071de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7fa fa89 	bl	80016f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2224      	movs	r2, #36	@ 0x24
 80071e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f022 0201 	bic.w	r2, r2, #1
 80071f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d002      	beq.n	8007204 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fc7c 	bl	8007afc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f97d 	bl	8007504 <UART_SetConfig>
 800720a:	4603      	mov	r3, r0
 800720c:	2b01      	cmp	r3, #1
 800720e:	d101      	bne.n	8007214 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e01b      	b.n	800724c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	689a      	ldr	r2, [r3, #8]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f042 0201 	orr.w	r2, r2, #1
 8007242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fcfb 	bl	8007c40 <UART_CheckIdleState>
 800724a:	4603      	mov	r3, r0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b08a      	sub	sp, #40	@ 0x28
 8007258:	af02      	add	r7, sp, #8
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	603b      	str	r3, [r7, #0]
 8007260:	4613      	mov	r3, r2
 8007262:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800726a:	2b20      	cmp	r3, #32
 800726c:	d17b      	bne.n	8007366 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d002      	beq.n	800727a <HAL_UART_Transmit+0x26>
 8007274:	88fb      	ldrh	r3, [r7, #6]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e074      	b.n	8007368 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2221      	movs	r2, #33	@ 0x21
 800728a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800728e:	f7fa febb 	bl	8002008 <HAL_GetTick>
 8007292:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	88fa      	ldrh	r2, [r7, #6]
 8007298:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	88fa      	ldrh	r2, [r7, #6]
 80072a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072ac:	d108      	bne.n	80072c0 <HAL_UART_Transmit+0x6c>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d104      	bne.n	80072c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80072b6:	2300      	movs	r3, #0
 80072b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	61bb      	str	r3, [r7, #24]
 80072be:	e003      	b.n	80072c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072c4:	2300      	movs	r3, #0
 80072c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072c8:	e030      	b.n	800732c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2200      	movs	r2, #0
 80072d2:	2180      	movs	r1, #128	@ 0x80
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f000 fd5d 	bl	8007d94 <UART_WaitOnFlagUntilTimeout>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d005      	beq.n	80072ec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2220      	movs	r2, #32
 80072e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e03d      	b.n	8007368 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10b      	bne.n	800730a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	881a      	ldrh	r2, [r3, #0]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072fe:	b292      	uxth	r2, r2
 8007300:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	3302      	adds	r3, #2
 8007306:	61bb      	str	r3, [r7, #24]
 8007308:	e007      	b.n	800731a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	781a      	ldrb	r2, [r3, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	3301      	adds	r3, #1
 8007318:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007320:	b29b      	uxth	r3, r3
 8007322:	3b01      	subs	r3, #1
 8007324:	b29a      	uxth	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007332:	b29b      	uxth	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1c8      	bne.n	80072ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	2200      	movs	r2, #0
 8007340:	2140      	movs	r1, #64	@ 0x40
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f000 fd26 	bl	8007d94 <UART_WaitOnFlagUntilTimeout>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d005      	beq.n	800735a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2220      	movs	r2, #32
 8007352:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e006      	b.n	8007368 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2220      	movs	r2, #32
 800735e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	e000      	b.n	8007368 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007366:	2302      	movs	r3, #2
  }
}
 8007368:	4618      	mov	r0, r3
 800736a:	3720      	adds	r7, #32
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b08a      	sub	sp, #40	@ 0x28
 8007374:	af02      	add	r7, sp, #8
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	603b      	str	r3, [r7, #0]
 800737c:	4613      	mov	r3, r2
 800737e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007386:	2b20      	cmp	r3, #32
 8007388:	f040 80b6 	bne.w	80074f8 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d002      	beq.n	8007398 <HAL_UART_Receive+0x28>
 8007392:	88fb      	ldrh	r3, [r7, #6]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d101      	bne.n	800739c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e0ae      	b.n	80074fa <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2222      	movs	r2, #34	@ 0x22
 80073a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073b2:	f7fa fe29 	bl	8002008 <HAL_GetTick>
 80073b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	88fa      	ldrh	r2, [r7, #6]
 80073bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	88fa      	ldrh	r2, [r7, #6]
 80073c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073d0:	d10e      	bne.n	80073f0 <HAL_UART_Receive+0x80>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d105      	bne.n	80073e6 <HAL_UART_Receive+0x76>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80073e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073e4:	e02d      	b.n	8007442 <HAL_UART_Receive+0xd2>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	22ff      	movs	r2, #255	@ 0xff
 80073ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073ee:	e028      	b.n	8007442 <HAL_UART_Receive+0xd2>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10d      	bne.n	8007414 <HAL_UART_Receive+0xa4>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d104      	bne.n	800740a <HAL_UART_Receive+0x9a>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	22ff      	movs	r2, #255	@ 0xff
 8007404:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007408:	e01b      	b.n	8007442 <HAL_UART_Receive+0xd2>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	227f      	movs	r2, #127	@ 0x7f
 800740e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007412:	e016      	b.n	8007442 <HAL_UART_Receive+0xd2>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800741c:	d10d      	bne.n	800743a <HAL_UART_Receive+0xca>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d104      	bne.n	8007430 <HAL_UART_Receive+0xc0>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	227f      	movs	r2, #127	@ 0x7f
 800742a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800742e:	e008      	b.n	8007442 <HAL_UART_Receive+0xd2>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	223f      	movs	r2, #63	@ 0x3f
 8007434:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007438:	e003      	b.n	8007442 <HAL_UART_Receive+0xd2>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007448:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007452:	d108      	bne.n	8007466 <HAL_UART_Receive+0xf6>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d104      	bne.n	8007466 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800745c:	2300      	movs	r3, #0
 800745e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	61bb      	str	r3, [r7, #24]
 8007464:	e003      	b.n	800746e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800746a:	2300      	movs	r3, #0
 800746c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800746e:	e037      	b.n	80074e0 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	2200      	movs	r2, #0
 8007478:	2120      	movs	r1, #32
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 fc8a 	bl	8007d94 <UART_WaitOnFlagUntilTimeout>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d005      	beq.n	8007492 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2220      	movs	r2, #32
 800748a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e033      	b.n	80074fa <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10c      	bne.n	80074b2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800749e:	b29a      	uxth	r2, r3
 80074a0:	8a7b      	ldrh	r3, [r7, #18]
 80074a2:	4013      	ands	r3, r2
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	3302      	adds	r3, #2
 80074ae:	61bb      	str	r3, [r7, #24]
 80074b0:	e00d      	b.n	80074ce <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	b2da      	uxtb	r2, r3
 80074bc:	8a7b      	ldrh	r3, [r7, #18]
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	4013      	ands	r3, r2
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	3301      	adds	r3, #1
 80074cc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	3b01      	subs	r3, #1
 80074d8:	b29a      	uxth	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1c1      	bne.n	8007470 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2220      	movs	r2, #32
 80074f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	e000      	b.n	80074fa <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80074f8:	2302      	movs	r3, #2
  }
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3720      	adds	r7, #32
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007508:	b08c      	sub	sp, #48	@ 0x30
 800750a:	af00      	add	r7, sp, #0
 800750c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	431a      	orrs	r2, r3
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	431a      	orrs	r2, r3
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	69db      	ldr	r3, [r3, #28]
 8007528:	4313      	orrs	r3, r2
 800752a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	4baa      	ldr	r3, [pc, #680]	@ (80077dc <UART_SetConfig+0x2d8>)
 8007534:	4013      	ands	r3, r2
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	6812      	ldr	r2, [r2, #0]
 800753a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800753c:	430b      	orrs	r3, r1
 800753e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	68da      	ldr	r2, [r3, #12]
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a9f      	ldr	r2, [pc, #636]	@ (80077e0 <UART_SetConfig+0x2dc>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d004      	beq.n	8007570 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800756c:	4313      	orrs	r3, r2
 800756e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800757a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	6812      	ldr	r2, [r2, #0]
 8007582:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007584:	430b      	orrs	r3, r1
 8007586:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758e:	f023 010f 	bic.w	r1, r3, #15
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	430a      	orrs	r2, r1
 800759c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a90      	ldr	r2, [pc, #576]	@ (80077e4 <UART_SetConfig+0x2e0>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d125      	bne.n	80075f4 <UART_SetConfig+0xf0>
 80075a8:	4b8f      	ldr	r3, [pc, #572]	@ (80077e8 <UART_SetConfig+0x2e4>)
 80075aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ae:	f003 0303 	and.w	r3, r3, #3
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d81a      	bhi.n	80075ec <UART_SetConfig+0xe8>
 80075b6:	a201      	add	r2, pc, #4	@ (adr r2, 80075bc <UART_SetConfig+0xb8>)
 80075b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075bc:	080075cd 	.word	0x080075cd
 80075c0:	080075dd 	.word	0x080075dd
 80075c4:	080075d5 	.word	0x080075d5
 80075c8:	080075e5 	.word	0x080075e5
 80075cc:	2301      	movs	r3, #1
 80075ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075d2:	e116      	b.n	8007802 <UART_SetConfig+0x2fe>
 80075d4:	2302      	movs	r3, #2
 80075d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075da:	e112      	b.n	8007802 <UART_SetConfig+0x2fe>
 80075dc:	2304      	movs	r3, #4
 80075de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075e2:	e10e      	b.n	8007802 <UART_SetConfig+0x2fe>
 80075e4:	2308      	movs	r3, #8
 80075e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ea:	e10a      	b.n	8007802 <UART_SetConfig+0x2fe>
 80075ec:	2310      	movs	r3, #16
 80075ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075f2:	e106      	b.n	8007802 <UART_SetConfig+0x2fe>
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a7c      	ldr	r2, [pc, #496]	@ (80077ec <UART_SetConfig+0x2e8>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d138      	bne.n	8007670 <UART_SetConfig+0x16c>
 80075fe:	4b7a      	ldr	r3, [pc, #488]	@ (80077e8 <UART_SetConfig+0x2e4>)
 8007600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007604:	f003 030c 	and.w	r3, r3, #12
 8007608:	2b0c      	cmp	r3, #12
 800760a:	d82d      	bhi.n	8007668 <UART_SetConfig+0x164>
 800760c:	a201      	add	r2, pc, #4	@ (adr r2, 8007614 <UART_SetConfig+0x110>)
 800760e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007612:	bf00      	nop
 8007614:	08007649 	.word	0x08007649
 8007618:	08007669 	.word	0x08007669
 800761c:	08007669 	.word	0x08007669
 8007620:	08007669 	.word	0x08007669
 8007624:	08007659 	.word	0x08007659
 8007628:	08007669 	.word	0x08007669
 800762c:	08007669 	.word	0x08007669
 8007630:	08007669 	.word	0x08007669
 8007634:	08007651 	.word	0x08007651
 8007638:	08007669 	.word	0x08007669
 800763c:	08007669 	.word	0x08007669
 8007640:	08007669 	.word	0x08007669
 8007644:	08007661 	.word	0x08007661
 8007648:	2300      	movs	r3, #0
 800764a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800764e:	e0d8      	b.n	8007802 <UART_SetConfig+0x2fe>
 8007650:	2302      	movs	r3, #2
 8007652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007656:	e0d4      	b.n	8007802 <UART_SetConfig+0x2fe>
 8007658:	2304      	movs	r3, #4
 800765a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800765e:	e0d0      	b.n	8007802 <UART_SetConfig+0x2fe>
 8007660:	2308      	movs	r3, #8
 8007662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007666:	e0cc      	b.n	8007802 <UART_SetConfig+0x2fe>
 8007668:	2310      	movs	r3, #16
 800766a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800766e:	e0c8      	b.n	8007802 <UART_SetConfig+0x2fe>
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a5e      	ldr	r2, [pc, #376]	@ (80077f0 <UART_SetConfig+0x2ec>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d125      	bne.n	80076c6 <UART_SetConfig+0x1c2>
 800767a:	4b5b      	ldr	r3, [pc, #364]	@ (80077e8 <UART_SetConfig+0x2e4>)
 800767c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007680:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007684:	2b30      	cmp	r3, #48	@ 0x30
 8007686:	d016      	beq.n	80076b6 <UART_SetConfig+0x1b2>
 8007688:	2b30      	cmp	r3, #48	@ 0x30
 800768a:	d818      	bhi.n	80076be <UART_SetConfig+0x1ba>
 800768c:	2b20      	cmp	r3, #32
 800768e:	d00a      	beq.n	80076a6 <UART_SetConfig+0x1a2>
 8007690:	2b20      	cmp	r3, #32
 8007692:	d814      	bhi.n	80076be <UART_SetConfig+0x1ba>
 8007694:	2b00      	cmp	r3, #0
 8007696:	d002      	beq.n	800769e <UART_SetConfig+0x19a>
 8007698:	2b10      	cmp	r3, #16
 800769a:	d008      	beq.n	80076ae <UART_SetConfig+0x1aa>
 800769c:	e00f      	b.n	80076be <UART_SetConfig+0x1ba>
 800769e:	2300      	movs	r3, #0
 80076a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076a4:	e0ad      	b.n	8007802 <UART_SetConfig+0x2fe>
 80076a6:	2302      	movs	r3, #2
 80076a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ac:	e0a9      	b.n	8007802 <UART_SetConfig+0x2fe>
 80076ae:	2304      	movs	r3, #4
 80076b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076b4:	e0a5      	b.n	8007802 <UART_SetConfig+0x2fe>
 80076b6:	2308      	movs	r3, #8
 80076b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076bc:	e0a1      	b.n	8007802 <UART_SetConfig+0x2fe>
 80076be:	2310      	movs	r3, #16
 80076c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076c4:	e09d      	b.n	8007802 <UART_SetConfig+0x2fe>
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a4a      	ldr	r2, [pc, #296]	@ (80077f4 <UART_SetConfig+0x2f0>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d125      	bne.n	800771c <UART_SetConfig+0x218>
 80076d0:	4b45      	ldr	r3, [pc, #276]	@ (80077e8 <UART_SetConfig+0x2e4>)
 80076d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80076da:	2bc0      	cmp	r3, #192	@ 0xc0
 80076dc:	d016      	beq.n	800770c <UART_SetConfig+0x208>
 80076de:	2bc0      	cmp	r3, #192	@ 0xc0
 80076e0:	d818      	bhi.n	8007714 <UART_SetConfig+0x210>
 80076e2:	2b80      	cmp	r3, #128	@ 0x80
 80076e4:	d00a      	beq.n	80076fc <UART_SetConfig+0x1f8>
 80076e6:	2b80      	cmp	r3, #128	@ 0x80
 80076e8:	d814      	bhi.n	8007714 <UART_SetConfig+0x210>
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d002      	beq.n	80076f4 <UART_SetConfig+0x1f0>
 80076ee:	2b40      	cmp	r3, #64	@ 0x40
 80076f0:	d008      	beq.n	8007704 <UART_SetConfig+0x200>
 80076f2:	e00f      	b.n	8007714 <UART_SetConfig+0x210>
 80076f4:	2300      	movs	r3, #0
 80076f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076fa:	e082      	b.n	8007802 <UART_SetConfig+0x2fe>
 80076fc:	2302      	movs	r3, #2
 80076fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007702:	e07e      	b.n	8007802 <UART_SetConfig+0x2fe>
 8007704:	2304      	movs	r3, #4
 8007706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800770a:	e07a      	b.n	8007802 <UART_SetConfig+0x2fe>
 800770c:	2308      	movs	r3, #8
 800770e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007712:	e076      	b.n	8007802 <UART_SetConfig+0x2fe>
 8007714:	2310      	movs	r3, #16
 8007716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800771a:	e072      	b.n	8007802 <UART_SetConfig+0x2fe>
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a35      	ldr	r2, [pc, #212]	@ (80077f8 <UART_SetConfig+0x2f4>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d12a      	bne.n	800777c <UART_SetConfig+0x278>
 8007726:	4b30      	ldr	r3, [pc, #192]	@ (80077e8 <UART_SetConfig+0x2e4>)
 8007728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800772c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007730:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007734:	d01a      	beq.n	800776c <UART_SetConfig+0x268>
 8007736:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800773a:	d81b      	bhi.n	8007774 <UART_SetConfig+0x270>
 800773c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007740:	d00c      	beq.n	800775c <UART_SetConfig+0x258>
 8007742:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007746:	d815      	bhi.n	8007774 <UART_SetConfig+0x270>
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <UART_SetConfig+0x250>
 800774c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007750:	d008      	beq.n	8007764 <UART_SetConfig+0x260>
 8007752:	e00f      	b.n	8007774 <UART_SetConfig+0x270>
 8007754:	2300      	movs	r3, #0
 8007756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800775a:	e052      	b.n	8007802 <UART_SetConfig+0x2fe>
 800775c:	2302      	movs	r3, #2
 800775e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007762:	e04e      	b.n	8007802 <UART_SetConfig+0x2fe>
 8007764:	2304      	movs	r3, #4
 8007766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800776a:	e04a      	b.n	8007802 <UART_SetConfig+0x2fe>
 800776c:	2308      	movs	r3, #8
 800776e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007772:	e046      	b.n	8007802 <UART_SetConfig+0x2fe>
 8007774:	2310      	movs	r3, #16
 8007776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800777a:	e042      	b.n	8007802 <UART_SetConfig+0x2fe>
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a17      	ldr	r2, [pc, #92]	@ (80077e0 <UART_SetConfig+0x2dc>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d13a      	bne.n	80077fc <UART_SetConfig+0x2f8>
 8007786:	4b18      	ldr	r3, [pc, #96]	@ (80077e8 <UART_SetConfig+0x2e4>)
 8007788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800778c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007790:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007794:	d01a      	beq.n	80077cc <UART_SetConfig+0x2c8>
 8007796:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800779a:	d81b      	bhi.n	80077d4 <UART_SetConfig+0x2d0>
 800779c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077a0:	d00c      	beq.n	80077bc <UART_SetConfig+0x2b8>
 80077a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077a6:	d815      	bhi.n	80077d4 <UART_SetConfig+0x2d0>
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d003      	beq.n	80077b4 <UART_SetConfig+0x2b0>
 80077ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077b0:	d008      	beq.n	80077c4 <UART_SetConfig+0x2c0>
 80077b2:	e00f      	b.n	80077d4 <UART_SetConfig+0x2d0>
 80077b4:	2300      	movs	r3, #0
 80077b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ba:	e022      	b.n	8007802 <UART_SetConfig+0x2fe>
 80077bc:	2302      	movs	r3, #2
 80077be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077c2:	e01e      	b.n	8007802 <UART_SetConfig+0x2fe>
 80077c4:	2304      	movs	r3, #4
 80077c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ca:	e01a      	b.n	8007802 <UART_SetConfig+0x2fe>
 80077cc:	2308      	movs	r3, #8
 80077ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077d2:	e016      	b.n	8007802 <UART_SetConfig+0x2fe>
 80077d4:	2310      	movs	r3, #16
 80077d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077da:	e012      	b.n	8007802 <UART_SetConfig+0x2fe>
 80077dc:	cfff69f3 	.word	0xcfff69f3
 80077e0:	40008000 	.word	0x40008000
 80077e4:	40013800 	.word	0x40013800
 80077e8:	40021000 	.word	0x40021000
 80077ec:	40004400 	.word	0x40004400
 80077f0:	40004800 	.word	0x40004800
 80077f4:	40004c00 	.word	0x40004c00
 80077f8:	40005000 	.word	0x40005000
 80077fc:	2310      	movs	r3, #16
 80077fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4aae      	ldr	r2, [pc, #696]	@ (8007ac0 <UART_SetConfig+0x5bc>)
 8007808:	4293      	cmp	r3, r2
 800780a:	f040 8097 	bne.w	800793c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800780e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007812:	2b08      	cmp	r3, #8
 8007814:	d823      	bhi.n	800785e <UART_SetConfig+0x35a>
 8007816:	a201      	add	r2, pc, #4	@ (adr r2, 800781c <UART_SetConfig+0x318>)
 8007818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781c:	08007841 	.word	0x08007841
 8007820:	0800785f 	.word	0x0800785f
 8007824:	08007849 	.word	0x08007849
 8007828:	0800785f 	.word	0x0800785f
 800782c:	0800784f 	.word	0x0800784f
 8007830:	0800785f 	.word	0x0800785f
 8007834:	0800785f 	.word	0x0800785f
 8007838:	0800785f 	.word	0x0800785f
 800783c:	08007857 	.word	0x08007857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007840:	f7fe fb1c 	bl	8005e7c <HAL_RCC_GetPCLK1Freq>
 8007844:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007846:	e010      	b.n	800786a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007848:	4b9e      	ldr	r3, [pc, #632]	@ (8007ac4 <UART_SetConfig+0x5c0>)
 800784a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800784c:	e00d      	b.n	800786a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800784e:	f7fe fa7d 	bl	8005d4c <HAL_RCC_GetSysClockFreq>
 8007852:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007854:	e009      	b.n	800786a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007856:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800785a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800785c:	e005      	b.n	800786a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800785e:	2300      	movs	r3, #0
 8007860:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007868:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800786a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 8130 	beq.w	8007ad2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007876:	4a94      	ldr	r2, [pc, #592]	@ (8007ac8 <UART_SetConfig+0x5c4>)
 8007878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800787c:	461a      	mov	r2, r3
 800787e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007880:	fbb3 f3f2 	udiv	r3, r3, r2
 8007884:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	685a      	ldr	r2, [r3, #4]
 800788a:	4613      	mov	r3, r2
 800788c:	005b      	lsls	r3, r3, #1
 800788e:	4413      	add	r3, r2
 8007890:	69ba      	ldr	r2, [r7, #24]
 8007892:	429a      	cmp	r2, r3
 8007894:	d305      	bcc.n	80078a2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800789c:	69ba      	ldr	r2, [r7, #24]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d903      	bls.n	80078aa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80078a8:	e113      	b.n	8007ad2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ac:	2200      	movs	r2, #0
 80078ae:	60bb      	str	r3, [r7, #8]
 80078b0:	60fa      	str	r2, [r7, #12]
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b6:	4a84      	ldr	r2, [pc, #528]	@ (8007ac8 <UART_SetConfig+0x5c4>)
 80078b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078bc:	b29b      	uxth	r3, r3
 80078be:	2200      	movs	r2, #0
 80078c0:	603b      	str	r3, [r7, #0]
 80078c2:	607a      	str	r2, [r7, #4]
 80078c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80078cc:	f7f8 fc98 	bl	8000200 <__aeabi_uldivmod>
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	4610      	mov	r0, r2
 80078d6:	4619      	mov	r1, r3
 80078d8:	f04f 0200 	mov.w	r2, #0
 80078dc:	f04f 0300 	mov.w	r3, #0
 80078e0:	020b      	lsls	r3, r1, #8
 80078e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80078e6:	0202      	lsls	r2, r0, #8
 80078e8:	6979      	ldr	r1, [r7, #20]
 80078ea:	6849      	ldr	r1, [r1, #4]
 80078ec:	0849      	lsrs	r1, r1, #1
 80078ee:	2000      	movs	r0, #0
 80078f0:	460c      	mov	r4, r1
 80078f2:	4605      	mov	r5, r0
 80078f4:	eb12 0804 	adds.w	r8, r2, r4
 80078f8:	eb43 0905 	adc.w	r9, r3, r5
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	469a      	mov	sl, r3
 8007904:	4693      	mov	fp, r2
 8007906:	4652      	mov	r2, sl
 8007908:	465b      	mov	r3, fp
 800790a:	4640      	mov	r0, r8
 800790c:	4649      	mov	r1, r9
 800790e:	f7f8 fc77 	bl	8000200 <__aeabi_uldivmod>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	4613      	mov	r3, r2
 8007918:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007920:	d308      	bcc.n	8007934 <UART_SetConfig+0x430>
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007928:	d204      	bcs.n	8007934 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6a3a      	ldr	r2, [r7, #32]
 8007930:	60da      	str	r2, [r3, #12]
 8007932:	e0ce      	b.n	8007ad2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800793a:	e0ca      	b.n	8007ad2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007944:	d166      	bne.n	8007a14 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007946:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800794a:	2b08      	cmp	r3, #8
 800794c:	d827      	bhi.n	800799e <UART_SetConfig+0x49a>
 800794e:	a201      	add	r2, pc, #4	@ (adr r2, 8007954 <UART_SetConfig+0x450>)
 8007950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007954:	08007979 	.word	0x08007979
 8007958:	08007981 	.word	0x08007981
 800795c:	08007989 	.word	0x08007989
 8007960:	0800799f 	.word	0x0800799f
 8007964:	0800798f 	.word	0x0800798f
 8007968:	0800799f 	.word	0x0800799f
 800796c:	0800799f 	.word	0x0800799f
 8007970:	0800799f 	.word	0x0800799f
 8007974:	08007997 	.word	0x08007997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007978:	f7fe fa80 	bl	8005e7c <HAL_RCC_GetPCLK1Freq>
 800797c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800797e:	e014      	b.n	80079aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007980:	f7fe fa92 	bl	8005ea8 <HAL_RCC_GetPCLK2Freq>
 8007984:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007986:	e010      	b.n	80079aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007988:	4b4e      	ldr	r3, [pc, #312]	@ (8007ac4 <UART_SetConfig+0x5c0>)
 800798a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800798c:	e00d      	b.n	80079aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800798e:	f7fe f9dd 	bl	8005d4c <HAL_RCC_GetSysClockFreq>
 8007992:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007994:	e009      	b.n	80079aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800799a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800799c:	e005      	b.n	80079aa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80079a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 8090 	beq.w	8007ad2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b6:	4a44      	ldr	r2, [pc, #272]	@ (8007ac8 <UART_SetConfig+0x5c4>)
 80079b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079bc:	461a      	mov	r2, r3
 80079be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80079c4:	005a      	lsls	r2, r3, #1
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	085b      	lsrs	r3, r3, #1
 80079cc:	441a      	add	r2, r3
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	2b0f      	cmp	r3, #15
 80079dc:	d916      	bls.n	8007a0c <UART_SetConfig+0x508>
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079e4:	d212      	bcs.n	8007a0c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	f023 030f 	bic.w	r3, r3, #15
 80079ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079f0:	6a3b      	ldr	r3, [r7, #32]
 80079f2:	085b      	lsrs	r3, r3, #1
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	f003 0307 	and.w	r3, r3, #7
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	8bfb      	ldrh	r3, [r7, #30]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	8bfa      	ldrh	r2, [r7, #30]
 8007a08:	60da      	str	r2, [r3, #12]
 8007a0a:	e062      	b.n	8007ad2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a12:	e05e      	b.n	8007ad2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a14:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a18:	2b08      	cmp	r3, #8
 8007a1a:	d828      	bhi.n	8007a6e <UART_SetConfig+0x56a>
 8007a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a24 <UART_SetConfig+0x520>)
 8007a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a22:	bf00      	nop
 8007a24:	08007a49 	.word	0x08007a49
 8007a28:	08007a51 	.word	0x08007a51
 8007a2c:	08007a59 	.word	0x08007a59
 8007a30:	08007a6f 	.word	0x08007a6f
 8007a34:	08007a5f 	.word	0x08007a5f
 8007a38:	08007a6f 	.word	0x08007a6f
 8007a3c:	08007a6f 	.word	0x08007a6f
 8007a40:	08007a6f 	.word	0x08007a6f
 8007a44:	08007a67 	.word	0x08007a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a48:	f7fe fa18 	bl	8005e7c <HAL_RCC_GetPCLK1Freq>
 8007a4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a4e:	e014      	b.n	8007a7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a50:	f7fe fa2a 	bl	8005ea8 <HAL_RCC_GetPCLK2Freq>
 8007a54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a56:	e010      	b.n	8007a7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a58:	4b1a      	ldr	r3, [pc, #104]	@ (8007ac4 <UART_SetConfig+0x5c0>)
 8007a5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a5c:	e00d      	b.n	8007a7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a5e:	f7fe f975 	bl	8005d4c <HAL_RCC_GetSysClockFreq>
 8007a62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a64:	e009      	b.n	8007a7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a6c:	e005      	b.n	8007a7a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a78:	bf00      	nop
    }

    if (pclk != 0U)
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d028      	beq.n	8007ad2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a84:	4a10      	ldr	r2, [pc, #64]	@ (8007ac8 <UART_SetConfig+0x5c4>)
 8007a86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	085b      	lsrs	r3, r3, #1
 8007a98:	441a      	add	r2, r3
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aa2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	2b0f      	cmp	r3, #15
 8007aa8:	d910      	bls.n	8007acc <UART_SetConfig+0x5c8>
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ab0:	d20c      	bcs.n	8007acc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	60da      	str	r2, [r3, #12]
 8007abc:	e009      	b.n	8007ad2 <UART_SetConfig+0x5ce>
 8007abe:	bf00      	nop
 8007ac0:	40008000 	.word	0x40008000
 8007ac4:	00f42400 	.word	0x00f42400
 8007ac8:	0800c0f8 	.word	0x0800c0f8
      }
      else
      {
        ret = HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	2200      	movs	r2, #0
 8007aec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007aee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3730      	adds	r7, #48	@ 0x30
 8007af6:	46bd      	mov	sp, r7
 8007af8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007afc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b08:	f003 0308 	and.w	r3, r3, #8
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00a      	beq.n	8007b26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	430a      	orrs	r2, r1
 8007b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00a      	beq.n	8007b48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	430a      	orrs	r2, r1
 8007b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00a      	beq.n	8007b6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b6e:	f003 0304 	and.w	r3, r3, #4
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00a      	beq.n	8007b8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b90:	f003 0310 	and.w	r3, r3, #16
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00a      	beq.n	8007bae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb2:	f003 0320 	and.w	r3, r3, #32
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00a      	beq.n	8007bd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01a      	beq.n	8007c12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bfa:	d10a      	bne.n	8007c12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00a      	beq.n	8007c34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	430a      	orrs	r2, r1
 8007c32:	605a      	str	r2, [r3, #4]
  }
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b098      	sub	sp, #96	@ 0x60
 8007c44:	af02      	add	r7, sp, #8
 8007c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c50:	f7fa f9da 	bl	8002008 <HAL_GetTick>
 8007c54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0308 	and.w	r3, r3, #8
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	d12f      	bne.n	8007cc4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f88e 	bl	8007d94 <UART_WaitOnFlagUntilTimeout>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d022      	beq.n	8007cc4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c86:	e853 3f00 	ldrex	r3, [r3]
 8007c8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c92:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c9e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ca2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ca4:	e841 2300 	strex	r3, r2, [r1]
 8007ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1e6      	bne.n	8007c7e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e063      	b.n	8007d8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0304 	and.w	r3, r3, #4
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d149      	bne.n	8007d66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cd2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f857 	bl	8007d94 <UART_WaitOnFlagUntilTimeout>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d03c      	beq.n	8007d66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf4:	e853 3f00 	ldrex	r3, [r3]
 8007cf8:	623b      	str	r3, [r7, #32]
   return(result);
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d12:	e841 2300 	strex	r3, r2, [r1]
 8007d16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1e6      	bne.n	8007cec <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3308      	adds	r3, #8
 8007d24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	e853 3f00 	ldrex	r3, [r3]
 8007d2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f023 0301 	bic.w	r3, r3, #1
 8007d34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3308      	adds	r3, #8
 8007d3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d3e:	61fa      	str	r2, [r7, #28]
 8007d40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d42:	69b9      	ldr	r1, [r7, #24]
 8007d44:	69fa      	ldr	r2, [r7, #28]
 8007d46:	e841 2300 	strex	r3, r2, [r1]
 8007d4a:	617b      	str	r3, [r7, #20]
   return(result);
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1e5      	bne.n	8007d1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2220      	movs	r2, #32
 8007d56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e012      	b.n	8007d8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2220      	movs	r2, #32
 8007d6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2220      	movs	r2, #32
 8007d72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3758      	adds	r7, #88	@ 0x58
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	603b      	str	r3, [r7, #0]
 8007da0:	4613      	mov	r3, r2
 8007da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007da4:	e049      	b.n	8007e3a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dac:	d045      	beq.n	8007e3a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dae:	f7fa f92b 	bl	8002008 <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d302      	bcc.n	8007dc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d101      	bne.n	8007dc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e048      	b.n	8007e5a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 0304 	and.w	r3, r3, #4
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d031      	beq.n	8007e3a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	f003 0308 	and.w	r3, r3, #8
 8007de0:	2b08      	cmp	r3, #8
 8007de2:	d110      	bne.n	8007e06 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2208      	movs	r2, #8
 8007dea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f000 f838 	bl	8007e62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2208      	movs	r2, #8
 8007df6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e029      	b.n	8007e5a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	69db      	ldr	r3, [r3, #28]
 8007e0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e14:	d111      	bne.n	8007e3a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f000 f81e 	bl	8007e62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2220      	movs	r2, #32
 8007e2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e00f      	b.n	8007e5a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	69da      	ldr	r2, [r3, #28]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	4013      	ands	r3, r2
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	bf0c      	ite	eq
 8007e4a:	2301      	moveq	r3, #1
 8007e4c:	2300      	movne	r3, #0
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	461a      	mov	r2, r3
 8007e52:	79fb      	ldrb	r3, [r7, #7]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d0a6      	beq.n	8007da6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e62:	b480      	push	{r7}
 8007e64:	b095      	sub	sp, #84	@ 0x54
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e72:	e853 3f00 	ldrex	r3, [r3]
 8007e76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	461a      	mov	r2, r3
 8007e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e88:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e90:	e841 2300 	strex	r3, r2, [r1]
 8007e94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1e6      	bne.n	8007e6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	3308      	adds	r3, #8
 8007ea2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	e853 3f00 	ldrex	r3, [r3]
 8007eaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007eb2:	f023 0301 	bic.w	r3, r3, #1
 8007eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ec0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ec8:	e841 2300 	strex	r3, r2, [r1]
 8007ecc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1e3      	bne.n	8007e9c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d118      	bne.n	8007f0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	e853 3f00 	ldrex	r3, [r3]
 8007ee8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	f023 0310 	bic.w	r3, r3, #16
 8007ef0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007efa:	61bb      	str	r3, [r7, #24]
 8007efc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efe:	6979      	ldr	r1, [r7, #20]
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	e841 2300 	strex	r3, r2, [r1]
 8007f06:	613b      	str	r3, [r7, #16]
   return(result);
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1e6      	bne.n	8007edc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2220      	movs	r2, #32
 8007f12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f22:	bf00      	nop
 8007f24:	3754      	adds	r7, #84	@ 0x54
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b085      	sub	sp, #20
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d101      	bne.n	8007f44 <HAL_UARTEx_DisableFifoMode+0x16>
 8007f40:	2302      	movs	r3, #2
 8007f42:	e027      	b.n	8007f94 <HAL_UARTEx_DisableFifoMode+0x66>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2224      	movs	r2, #36	@ 0x24
 8007f50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f022 0201 	bic.w	r2, r2, #1
 8007f6a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f72:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2220      	movs	r2, #32
 8007f86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d101      	bne.n	8007fb8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	e02d      	b.n	8008014 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2224      	movs	r2, #36	@ 0x24
 8007fc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f022 0201 	bic.w	r2, r2, #1
 8007fde:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	683a      	ldr	r2, [r7, #0]
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 f84f 	bl	8008098 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2220      	movs	r2, #32
 8008006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800802c:	2b01      	cmp	r3, #1
 800802e:	d101      	bne.n	8008034 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008030:	2302      	movs	r3, #2
 8008032:	e02d      	b.n	8008090 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2224      	movs	r2, #36	@ 0x24
 8008040:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f022 0201 	bic.w	r2, r2, #1
 800805a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	430a      	orrs	r2, r1
 800806e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f811 	bl	8008098 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2220      	movs	r2, #32
 8008082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d108      	bne.n	80080ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080b8:	e031      	b.n	800811e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080ba:	2308      	movs	r3, #8
 80080bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80080be:	2308      	movs	r3, #8
 80080c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	0e5b      	lsrs	r3, r3, #25
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	f003 0307 	and.w	r3, r3, #7
 80080d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	0f5b      	lsrs	r3, r3, #29
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	f003 0307 	and.w	r3, r3, #7
 80080e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
 80080e4:	7b3a      	ldrb	r2, [r7, #12]
 80080e6:	4911      	ldr	r1, [pc, #68]	@ (800812c <UARTEx_SetNbDataToProcess+0x94>)
 80080e8:	5c8a      	ldrb	r2, [r1, r2]
 80080ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080ee:	7b3a      	ldrb	r2, [r7, #12]
 80080f0:	490f      	ldr	r1, [pc, #60]	@ (8008130 <UARTEx_SetNbDataToProcess+0x98>)
 80080f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008100:	7bfb      	ldrb	r3, [r7, #15]
 8008102:	7b7a      	ldrb	r2, [r7, #13]
 8008104:	4909      	ldr	r1, [pc, #36]	@ (800812c <UARTEx_SetNbDataToProcess+0x94>)
 8008106:	5c8a      	ldrb	r2, [r1, r2]
 8008108:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800810c:	7b7a      	ldrb	r2, [r7, #13]
 800810e:	4908      	ldr	r1, [pc, #32]	@ (8008130 <UARTEx_SetNbDataToProcess+0x98>)
 8008110:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008112:	fb93 f3f2 	sdiv	r3, r3, r2
 8008116:	b29a      	uxth	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800811e:	bf00      	nop
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	0800c110 	.word	0x0800c110
 8008130:	0800c118 	.word	0x0800c118

08008134 <__NVIC_SetPriority>:
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	4603      	mov	r3, r0
 800813c:	6039      	str	r1, [r7, #0]
 800813e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008144:	2b00      	cmp	r3, #0
 8008146:	db0a      	blt.n	800815e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	b2da      	uxtb	r2, r3
 800814c:	490c      	ldr	r1, [pc, #48]	@ (8008180 <__NVIC_SetPriority+0x4c>)
 800814e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008152:	0112      	lsls	r2, r2, #4
 8008154:	b2d2      	uxtb	r2, r2
 8008156:	440b      	add	r3, r1
 8008158:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800815c:	e00a      	b.n	8008174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	b2da      	uxtb	r2, r3
 8008162:	4908      	ldr	r1, [pc, #32]	@ (8008184 <__NVIC_SetPriority+0x50>)
 8008164:	79fb      	ldrb	r3, [r7, #7]
 8008166:	f003 030f 	and.w	r3, r3, #15
 800816a:	3b04      	subs	r3, #4
 800816c:	0112      	lsls	r2, r2, #4
 800816e:	b2d2      	uxtb	r2, r2
 8008170:	440b      	add	r3, r1
 8008172:	761a      	strb	r2, [r3, #24]
}
 8008174:	bf00      	nop
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	e000e100 	.word	0xe000e100
 8008184:	e000ed00 	.word	0xe000ed00

08008188 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008188:	b580      	push	{r7, lr}
 800818a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800818c:	4b05      	ldr	r3, [pc, #20]	@ (80081a4 <SysTick_Handler+0x1c>)
 800818e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008190:	f002 fc6c 	bl	800aa6c <xTaskGetSchedulerState>
 8008194:	4603      	mov	r3, r0
 8008196:	2b01      	cmp	r3, #1
 8008198:	d001      	beq.n	800819e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800819a:	f003 fb65 	bl	800b868 <xPortSysTickHandler>
  }
}
 800819e:	bf00      	nop
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	e000e010 	.word	0xe000e010

080081a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80081ac:	2100      	movs	r1, #0
 80081ae:	f06f 0004 	mvn.w	r0, #4
 80081b2:	f7ff ffbf 	bl	8008134 <__NVIC_SetPriority>
#endif
}
 80081b6:	bf00      	nop
 80081b8:	bd80      	pop	{r7, pc}
	...

080081bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081c2:	f3ef 8305 	mrs	r3, IPSR
 80081c6:	603b      	str	r3, [r7, #0]
  return(result);
 80081c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d003      	beq.n	80081d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80081ce:	f06f 0305 	mvn.w	r3, #5
 80081d2:	607b      	str	r3, [r7, #4]
 80081d4:	e00c      	b.n	80081f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80081d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008200 <osKernelInitialize+0x44>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d105      	bne.n	80081ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80081de:	4b08      	ldr	r3, [pc, #32]	@ (8008200 <osKernelInitialize+0x44>)
 80081e0:	2201      	movs	r2, #1
 80081e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	607b      	str	r3, [r7, #4]
 80081e8:	e002      	b.n	80081f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80081ea:	f04f 33ff 	mov.w	r3, #4294967295
 80081ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80081f0:	687b      	ldr	r3, [r7, #4]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	200005d0 	.word	0x200005d0

08008204 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800820a:	f3ef 8305 	mrs	r3, IPSR
 800820e:	603b      	str	r3, [r7, #0]
  return(result);
 8008210:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008216:	f06f 0305 	mvn.w	r3, #5
 800821a:	607b      	str	r3, [r7, #4]
 800821c:	e010      	b.n	8008240 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800821e:	4b0b      	ldr	r3, [pc, #44]	@ (800824c <osKernelStart+0x48>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d109      	bne.n	800823a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008226:	f7ff ffbf 	bl	80081a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800822a:	4b08      	ldr	r3, [pc, #32]	@ (800824c <osKernelStart+0x48>)
 800822c:	2202      	movs	r2, #2
 800822e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008230:	f001 ffb8 	bl	800a1a4 <vTaskStartScheduler>
      stat = osOK;
 8008234:	2300      	movs	r3, #0
 8008236:	607b      	str	r3, [r7, #4]
 8008238:	e002      	b.n	8008240 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800823a:	f04f 33ff 	mov.w	r3, #4294967295
 800823e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008240:	687b      	ldr	r3, [r7, #4]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	200005d0 	.word	0x200005d0

08008250 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008250:	b580      	push	{r7, lr}
 8008252:	b08e      	sub	sp, #56	@ 0x38
 8008254:	af04      	add	r7, sp, #16
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800825c:	2300      	movs	r3, #0
 800825e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008260:	f3ef 8305 	mrs	r3, IPSR
 8008264:	617b      	str	r3, [r7, #20]
  return(result);
 8008266:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008268:	2b00      	cmp	r3, #0
 800826a:	d17e      	bne.n	800836a <osThreadNew+0x11a>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d07b      	beq.n	800836a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008272:	2380      	movs	r3, #128	@ 0x80
 8008274:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008276:	2318      	movs	r3, #24
 8008278:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800827a:	2300      	movs	r3, #0
 800827c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800827e:	f04f 33ff 	mov.w	r3, #4294967295
 8008282:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d045      	beq.n	8008316 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d002      	beq.n	8008298 <osThreadNew+0x48>
        name = attr->name;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d008      	beq.n	80082be <osThreadNew+0x6e>
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	2b38      	cmp	r3, #56	@ 0x38
 80082b0:	d805      	bhi.n	80082be <osThreadNew+0x6e>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <osThreadNew+0x72>
        return (NULL);
 80082be:	2300      	movs	r3, #0
 80082c0:	e054      	b.n	800836c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	089b      	lsrs	r3, r3, #2
 80082d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00e      	beq.n	80082f8 <osThreadNew+0xa8>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	2ba7      	cmp	r3, #167	@ 0xa7
 80082e0:	d90a      	bls.n	80082f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d006      	beq.n	80082f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <osThreadNew+0xa8>
        mem = 1;
 80082f2:	2301      	movs	r3, #1
 80082f4:	61bb      	str	r3, [r7, #24]
 80082f6:	e010      	b.n	800831a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d10c      	bne.n	800831a <osThreadNew+0xca>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d108      	bne.n	800831a <osThreadNew+0xca>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d104      	bne.n	800831a <osThreadNew+0xca>
          mem = 0;
 8008310:	2300      	movs	r3, #0
 8008312:	61bb      	str	r3, [r7, #24]
 8008314:	e001      	b.n	800831a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008316:	2300      	movs	r3, #0
 8008318:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d110      	bne.n	8008342 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008328:	9202      	str	r2, [sp, #8]
 800832a:	9301      	str	r3, [sp, #4]
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	6a3a      	ldr	r2, [r7, #32]
 8008334:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f001 fc38 	bl	8009bac <xTaskCreateStatic>
 800833c:	4603      	mov	r3, r0
 800833e:	613b      	str	r3, [r7, #16]
 8008340:	e013      	b.n	800836a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d110      	bne.n	800836a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008348:	6a3b      	ldr	r3, [r7, #32]
 800834a:	b29a      	uxth	r2, r3
 800834c:	f107 0310 	add.w	r3, r7, #16
 8008350:	9301      	str	r3, [sp, #4]
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f001 fc86 	bl	8009c6c <xTaskCreate>
 8008360:	4603      	mov	r3, r0
 8008362:	2b01      	cmp	r3, #1
 8008364:	d001      	beq.n	800836a <osThreadNew+0x11a>
            hTask = NULL;
 8008366:	2300      	movs	r3, #0
 8008368:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800836a:	693b      	ldr	r3, [r7, #16]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3728      	adds	r7, #40	@ 0x28
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008380:	f3ef 8305 	mrs	r3, IPSR
 8008384:	60fb      	str	r3, [r7, #12]
  return(result);
 8008386:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <osThreadSuspend+0x20>
    stat = osErrorISR;
 800838c:	f06f 0305 	mvn.w	r3, #5
 8008390:	617b      	str	r3, [r7, #20]
 8008392:	e00b      	b.n	80083ac <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d103      	bne.n	80083a2 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800839a:	f06f 0303 	mvn.w	r3, #3
 800839e:	617b      	str	r3, [r7, #20]
 80083a0:	e004      	b.n	80083ac <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80083a6:	6938      	ldr	r0, [r7, #16]
 80083a8:	f001 fdf4 	bl	8009f94 <vTaskSuspend>
  }

  return (stat);
 80083ac:	697b      	ldr	r3, [r7, #20]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b086      	sub	sp, #24
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083c2:	f3ef 8305 	mrs	r3, IPSR
 80083c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80083c8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <osThreadResume+0x20>
    stat = osErrorISR;
 80083ce:	f06f 0305 	mvn.w	r3, #5
 80083d2:	617b      	str	r3, [r7, #20]
 80083d4:	e00b      	b.n	80083ee <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d103      	bne.n	80083e4 <osThreadResume+0x2e>
    stat = osErrorParameter;
 80083dc:	f06f 0303 	mvn.w	r3, #3
 80083e0:	617b      	str	r3, [r7, #20]
 80083e2:	e004      	b.n	80083ee <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 80083e4:	2300      	movs	r3, #0
 80083e6:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80083e8:	6938      	ldr	r0, [r7, #16]
 80083ea:	f001 fe7b 	bl	800a0e4 <vTaskResume>
  }

  return (stat);
 80083ee:	697b      	ldr	r3, [r7, #20]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3718      	adds	r7, #24
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008400:	f3ef 8305 	mrs	r3, IPSR
 8008404:	60bb      	str	r3, [r7, #8]
  return(result);
 8008406:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008408:	2b00      	cmp	r3, #0
 800840a:	d003      	beq.n	8008414 <osDelay+0x1c>
    stat = osErrorISR;
 800840c:	f06f 0305 	mvn.w	r3, #5
 8008410:	60fb      	str	r3, [r7, #12]
 8008412:	e007      	b.n	8008424 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008414:	2300      	movs	r3, #0
 8008416:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d002      	beq.n	8008424 <osDelay+0x2c>
      vTaskDelay(ticks);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f001 fd82 	bl	8009f28 <vTaskDelay>
    }
  }

  return (stat);
 8008424:	68fb      	ldr	r3, [r7, #12]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800842e:	b580      	push	{r7, lr}
 8008430:	b08a      	sub	sp, #40	@ 0x28
 8008432:	af02      	add	r7, sp, #8
 8008434:	60f8      	str	r0, [r7, #12]
 8008436:	60b9      	str	r1, [r7, #8]
 8008438:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800843a:	2300      	movs	r3, #0
 800843c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800843e:	f3ef 8305 	mrs	r3, IPSR
 8008442:	613b      	str	r3, [r7, #16]
  return(result);
 8008444:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008446:	2b00      	cmp	r3, #0
 8008448:	d175      	bne.n	8008536 <osSemaphoreNew+0x108>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d072      	beq.n	8008536 <osSemaphoreNew+0x108>
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	429a      	cmp	r2, r3
 8008456:	d86e      	bhi.n	8008536 <osSemaphoreNew+0x108>
    mem = -1;
 8008458:	f04f 33ff 	mov.w	r3, #4294967295
 800845c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d015      	beq.n	8008490 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d006      	beq.n	800847a <osSemaphoreNew+0x4c>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	2b4f      	cmp	r3, #79	@ 0x4f
 8008472:	d902      	bls.n	800847a <osSemaphoreNew+0x4c>
        mem = 1;
 8008474:	2301      	movs	r3, #1
 8008476:	61bb      	str	r3, [r7, #24]
 8008478:	e00c      	b.n	8008494 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d108      	bne.n	8008494 <osSemaphoreNew+0x66>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d104      	bne.n	8008494 <osSemaphoreNew+0x66>
          mem = 0;
 800848a:	2300      	movs	r3, #0
 800848c:	61bb      	str	r3, [r7, #24]
 800848e:	e001      	b.n	8008494 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008490:	2300      	movs	r3, #0
 8008492:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800849a:	d04c      	beq.n	8008536 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d128      	bne.n	80084f4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d10a      	bne.n	80084be <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	2203      	movs	r2, #3
 80084ae:	9200      	str	r2, [sp, #0]
 80084b0:	2200      	movs	r2, #0
 80084b2:	2100      	movs	r1, #0
 80084b4:	2001      	movs	r0, #1
 80084b6:	f000 fb93 	bl	8008be0 <xQueueGenericCreateStatic>
 80084ba:	61f8      	str	r0, [r7, #28]
 80084bc:	e005      	b.n	80084ca <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80084be:	2203      	movs	r2, #3
 80084c0:	2100      	movs	r1, #0
 80084c2:	2001      	movs	r0, #1
 80084c4:	f000 fc09 	bl	8008cda <xQueueGenericCreate>
 80084c8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d022      	beq.n	8008516 <osSemaphoreNew+0xe8>
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d01f      	beq.n	8008516 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80084d6:	2300      	movs	r3, #0
 80084d8:	2200      	movs	r2, #0
 80084da:	2100      	movs	r1, #0
 80084dc:	69f8      	ldr	r0, [r7, #28]
 80084de:	f000 fcc9 	bl	8008e74 <xQueueGenericSend>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d016      	beq.n	8008516 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80084e8:	69f8      	ldr	r0, [r7, #28]
 80084ea:	f001 f98b 	bl	8009804 <vQueueDelete>
            hSemaphore = NULL;
 80084ee:	2300      	movs	r3, #0
 80084f0:	61fb      	str	r3, [r7, #28]
 80084f2:	e010      	b.n	8008516 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d108      	bne.n	800850c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	461a      	mov	r2, r3
 8008500:	68b9      	ldr	r1, [r7, #8]
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f000 fc47 	bl	8008d96 <xQueueCreateCountingSemaphoreStatic>
 8008508:	61f8      	str	r0, [r7, #28]
 800850a:	e004      	b.n	8008516 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800850c:	68b9      	ldr	r1, [r7, #8]
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f000 fc7a 	bl	8008e08 <xQueueCreateCountingSemaphore>
 8008514:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00c      	beq.n	8008536 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d003      	beq.n	800852a <osSemaphoreNew+0xfc>
          name = attr->name;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	617b      	str	r3, [r7, #20]
 8008528:	e001      	b.n	800852e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800852a:	2300      	movs	r3, #0
 800852c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800852e:	6979      	ldr	r1, [r7, #20]
 8008530:	69f8      	ldr	r0, [r7, #28]
 8008532:	f001 fab3 	bl	8009a9c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008536:	69fb      	ldr	r3, [r7, #28]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3720      	adds	r7, #32
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800854e:	2300      	movs	r3, #0
 8008550:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d103      	bne.n	8008560 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008558:	f06f 0303 	mvn.w	r3, #3
 800855c:	617b      	str	r3, [r7, #20]
 800855e:	e039      	b.n	80085d4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008560:	f3ef 8305 	mrs	r3, IPSR
 8008564:	60fb      	str	r3, [r7, #12]
  return(result);
 8008566:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008568:	2b00      	cmp	r3, #0
 800856a:	d022      	beq.n	80085b2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d003      	beq.n	800857a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008572:	f06f 0303 	mvn.w	r3, #3
 8008576:	617b      	str	r3, [r7, #20]
 8008578:	e02c      	b.n	80085d4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800857a:	2300      	movs	r3, #0
 800857c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800857e:	f107 0308 	add.w	r3, r7, #8
 8008582:	461a      	mov	r2, r3
 8008584:	2100      	movs	r1, #0
 8008586:	6938      	ldr	r0, [r7, #16]
 8008588:	f001 f896 	bl	80096b8 <xQueueReceiveFromISR>
 800858c:	4603      	mov	r3, r0
 800858e:	2b01      	cmp	r3, #1
 8008590:	d003      	beq.n	800859a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008592:	f06f 0302 	mvn.w	r3, #2
 8008596:	617b      	str	r3, [r7, #20]
 8008598:	e01c      	b.n	80085d4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d019      	beq.n	80085d4 <osSemaphoreAcquire+0x94>
 80085a0:	4b0f      	ldr	r3, [pc, #60]	@ (80085e0 <osSemaphoreAcquire+0xa0>)
 80085a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085a6:	601a      	str	r2, [r3, #0]
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	e010      	b.n	80085d4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	6938      	ldr	r0, [r7, #16]
 80085b6:	f000 ff6f 	bl	8009498 <xQueueSemaphoreTake>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d009      	beq.n	80085d4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d003      	beq.n	80085ce <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80085c6:	f06f 0301 	mvn.w	r3, #1
 80085ca:	617b      	str	r3, [r7, #20]
 80085cc:	e002      	b.n	80085d4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80085ce:	f06f 0302 	mvn.w	r3, #2
 80085d2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80085d4:	697b      	ldr	r3, [r7, #20]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3718      	adds	r7, #24
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	e000ed04 	.word	0xe000ed04

080085e4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b086      	sub	sp, #24
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80085f0:	2300      	movs	r3, #0
 80085f2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d103      	bne.n	8008602 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80085fa:	f06f 0303 	mvn.w	r3, #3
 80085fe:	617b      	str	r3, [r7, #20]
 8008600:	e02c      	b.n	800865c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008602:	f3ef 8305 	mrs	r3, IPSR
 8008606:	60fb      	str	r3, [r7, #12]
  return(result);
 8008608:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800860a:	2b00      	cmp	r3, #0
 800860c:	d01a      	beq.n	8008644 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800860e:	2300      	movs	r3, #0
 8008610:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008612:	f107 0308 	add.w	r3, r7, #8
 8008616:	4619      	mov	r1, r3
 8008618:	6938      	ldr	r0, [r7, #16]
 800861a:	f000 fdcb 	bl	80091b4 <xQueueGiveFromISR>
 800861e:	4603      	mov	r3, r0
 8008620:	2b01      	cmp	r3, #1
 8008622:	d003      	beq.n	800862c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008624:	f06f 0302 	mvn.w	r3, #2
 8008628:	617b      	str	r3, [r7, #20]
 800862a:	e017      	b.n	800865c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d014      	beq.n	800865c <osSemaphoreRelease+0x78>
 8008632:	4b0d      	ldr	r3, [pc, #52]	@ (8008668 <osSemaphoreRelease+0x84>)
 8008634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	e00b      	b.n	800865c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008644:	2300      	movs	r3, #0
 8008646:	2200      	movs	r2, #0
 8008648:	2100      	movs	r1, #0
 800864a:	6938      	ldr	r0, [r7, #16]
 800864c:	f000 fc12 	bl	8008e74 <xQueueGenericSend>
 8008650:	4603      	mov	r3, r0
 8008652:	2b01      	cmp	r3, #1
 8008654:	d002      	beq.n	800865c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008656:	f06f 0302 	mvn.w	r3, #2
 800865a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800865c:	697b      	ldr	r3, [r7, #20]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3718      	adds	r7, #24
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	e000ed04 	.word	0xe000ed04

0800866c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800866c:	b580      	push	{r7, lr}
 800866e:	b08a      	sub	sp, #40	@ 0x28
 8008670:	af02      	add	r7, sp, #8
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008678:	2300      	movs	r3, #0
 800867a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800867c:	f3ef 8305 	mrs	r3, IPSR
 8008680:	613b      	str	r3, [r7, #16]
  return(result);
 8008682:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008684:	2b00      	cmp	r3, #0
 8008686:	d15f      	bne.n	8008748 <osMessageQueueNew+0xdc>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d05c      	beq.n	8008748 <osMessageQueueNew+0xdc>
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d059      	beq.n	8008748 <osMessageQueueNew+0xdc>
    mem = -1;
 8008694:	f04f 33ff 	mov.w	r3, #4294967295
 8008698:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d029      	beq.n	80086f4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d012      	beq.n	80086ce <osMessageQueueNew+0x62>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	2b4f      	cmp	r3, #79	@ 0x4f
 80086ae:	d90e      	bls.n	80086ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00a      	beq.n	80086ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	695a      	ldr	r2, [r3, #20]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	68b9      	ldr	r1, [r7, #8]
 80086c0:	fb01 f303 	mul.w	r3, r1, r3
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d302      	bcc.n	80086ce <osMessageQueueNew+0x62>
        mem = 1;
 80086c8:	2301      	movs	r3, #1
 80086ca:	61bb      	str	r3, [r7, #24]
 80086cc:	e014      	b.n	80086f8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d110      	bne.n	80086f8 <osMessageQueueNew+0x8c>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d10c      	bne.n	80086f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d108      	bne.n	80086f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d104      	bne.n	80086f8 <osMessageQueueNew+0x8c>
          mem = 0;
 80086ee:	2300      	movs	r3, #0
 80086f0:	61bb      	str	r3, [r7, #24]
 80086f2:	e001      	b.n	80086f8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80086f4:	2300      	movs	r3, #0
 80086f6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d10b      	bne.n	8008716 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	691a      	ldr	r2, [r3, #16]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	2100      	movs	r1, #0
 8008708:	9100      	str	r1, [sp, #0]
 800870a:	68b9      	ldr	r1, [r7, #8]
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f000 fa67 	bl	8008be0 <xQueueGenericCreateStatic>
 8008712:	61f8      	str	r0, [r7, #28]
 8008714:	e008      	b.n	8008728 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d105      	bne.n	8008728 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800871c:	2200      	movs	r2, #0
 800871e:	68b9      	ldr	r1, [r7, #8]
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f000 fada 	bl	8008cda <xQueueGenericCreate>
 8008726:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00c      	beq.n	8008748 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d003      	beq.n	800873c <osMessageQueueNew+0xd0>
        name = attr->name;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	617b      	str	r3, [r7, #20]
 800873a:	e001      	b.n	8008740 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800873c:	2300      	movs	r3, #0
 800873e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008740:	6979      	ldr	r1, [r7, #20]
 8008742:	69f8      	ldr	r0, [r7, #28]
 8008744:	f001 f9aa 	bl	8009a9c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008748:	69fb      	ldr	r3, [r7, #28]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3720      	adds	r7, #32
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
	...

08008754 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008754:	b580      	push	{r7, lr}
 8008756:	b088      	sub	sp, #32
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	603b      	str	r3, [r7, #0]
 8008760:	4613      	mov	r3, r2
 8008762:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008768:	2300      	movs	r3, #0
 800876a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800876c:	f3ef 8305 	mrs	r3, IPSR
 8008770:	617b      	str	r3, [r7, #20]
  return(result);
 8008772:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008774:	2b00      	cmp	r3, #0
 8008776:	d028      	beq.n	80087ca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d005      	beq.n	800878a <osMessageQueuePut+0x36>
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d002      	beq.n	800878a <osMessageQueuePut+0x36>
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d003      	beq.n	8008792 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800878a:	f06f 0303 	mvn.w	r3, #3
 800878e:	61fb      	str	r3, [r7, #28]
 8008790:	e038      	b.n	8008804 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008792:	2300      	movs	r3, #0
 8008794:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008796:	f107 0210 	add.w	r2, r7, #16
 800879a:	2300      	movs	r3, #0
 800879c:	68b9      	ldr	r1, [r7, #8]
 800879e:	69b8      	ldr	r0, [r7, #24]
 80087a0:	f000 fc6a 	bl	8009078 <xQueueGenericSendFromISR>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d003      	beq.n	80087b2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80087aa:	f06f 0302 	mvn.w	r3, #2
 80087ae:	61fb      	str	r3, [r7, #28]
 80087b0:	e028      	b.n	8008804 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d025      	beq.n	8008804 <osMessageQueuePut+0xb0>
 80087b8:	4b15      	ldr	r3, [pc, #84]	@ (8008810 <osMessageQueuePut+0xbc>)
 80087ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087be:	601a      	str	r2, [r3, #0]
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	e01c      	b.n	8008804 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d002      	beq.n	80087d6 <osMessageQueuePut+0x82>
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d103      	bne.n	80087de <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80087d6:	f06f 0303 	mvn.w	r3, #3
 80087da:	61fb      	str	r3, [r7, #28]
 80087dc:	e012      	b.n	8008804 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80087de:	2300      	movs	r3, #0
 80087e0:	683a      	ldr	r2, [r7, #0]
 80087e2:	68b9      	ldr	r1, [r7, #8]
 80087e4:	69b8      	ldr	r0, [r7, #24]
 80087e6:	f000 fb45 	bl	8008e74 <xQueueGenericSend>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d009      	beq.n	8008804 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d003      	beq.n	80087fe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80087f6:	f06f 0301 	mvn.w	r3, #1
 80087fa:	61fb      	str	r3, [r7, #28]
 80087fc:	e002      	b.n	8008804 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80087fe:	f06f 0302 	mvn.w	r3, #2
 8008802:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008804:	69fb      	ldr	r3, [r7, #28]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3720      	adds	r7, #32
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	e000ed04 	.word	0xe000ed04

08008814 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008814:	b580      	push	{r7, lr}
 8008816:	b088      	sub	sp, #32
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
 8008820:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008826:	2300      	movs	r3, #0
 8008828:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800882a:	f3ef 8305 	mrs	r3, IPSR
 800882e:	617b      	str	r3, [r7, #20]
  return(result);
 8008830:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008832:	2b00      	cmp	r3, #0
 8008834:	d028      	beq.n	8008888 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d005      	beq.n	8008848 <osMessageQueueGet+0x34>
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d002      	beq.n	8008848 <osMessageQueueGet+0x34>
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d003      	beq.n	8008850 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008848:	f06f 0303 	mvn.w	r3, #3
 800884c:	61fb      	str	r3, [r7, #28]
 800884e:	e037      	b.n	80088c0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008850:	2300      	movs	r3, #0
 8008852:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008854:	f107 0310 	add.w	r3, r7, #16
 8008858:	461a      	mov	r2, r3
 800885a:	68b9      	ldr	r1, [r7, #8]
 800885c:	69b8      	ldr	r0, [r7, #24]
 800885e:	f000 ff2b 	bl	80096b8 <xQueueReceiveFromISR>
 8008862:	4603      	mov	r3, r0
 8008864:	2b01      	cmp	r3, #1
 8008866:	d003      	beq.n	8008870 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008868:	f06f 0302 	mvn.w	r3, #2
 800886c:	61fb      	str	r3, [r7, #28]
 800886e:	e027      	b.n	80088c0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d024      	beq.n	80088c0 <osMessageQueueGet+0xac>
 8008876:	4b15      	ldr	r3, [pc, #84]	@ (80088cc <osMessageQueueGet+0xb8>)
 8008878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	e01b      	b.n	80088c0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d002      	beq.n	8008894 <osMessageQueueGet+0x80>
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d103      	bne.n	800889c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008894:	f06f 0303 	mvn.w	r3, #3
 8008898:	61fb      	str	r3, [r7, #28]
 800889a:	e011      	b.n	80088c0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800889c:	683a      	ldr	r2, [r7, #0]
 800889e:	68b9      	ldr	r1, [r7, #8]
 80088a0:	69b8      	ldr	r0, [r7, #24]
 80088a2:	f000 fd17 	bl	80092d4 <xQueueReceive>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d009      	beq.n	80088c0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d003      	beq.n	80088ba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80088b2:	f06f 0301 	mvn.w	r3, #1
 80088b6:	61fb      	str	r3, [r7, #28]
 80088b8:	e002      	b.n	80088c0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80088ba:	f06f 0302 	mvn.w	r3, #2
 80088be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80088c0:	69fb      	ldr	r3, [r7, #28]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3720      	adds	r7, #32
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	e000ed04 	.word	0xe000ed04

080088d0 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b08a      	sub	sp, #40	@ 0x28
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d102      	bne.n	80088e8 <osMessageQueueGetSpace+0x18>
    space = 0U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80088e6:	e023      	b.n	8008930 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088e8:	f3ef 8305 	mrs	r3, IPSR
 80088ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80088ee:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d019      	beq.n	8008928 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80088f4:	f3ef 8211 	mrs	r2, BASEPRI
 80088f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fc:	f383 8811 	msr	BASEPRI, r3
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	613a      	str	r2, [r7, #16]
 800890a:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800890c:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800890e:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8008910:	6a3b      	ldr	r3, [r7, #32]
 8008912:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008914:	6a3b      	ldr	r3, [r7, #32]
 8008916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	627b      	str	r3, [r7, #36]	@ 0x24
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008926:	e003      	b.n	8008930 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 8008928:	6a38      	ldr	r0, [r7, #32]
 800892a:	f000 ff47 	bl	80097bc <uxQueueSpacesAvailable>
 800892e:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return (space);
 8008930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008932:	4618      	mov	r0, r3
 8008934:	3728      	adds	r7, #40	@ 0x28
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
	...

0800893c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	4a07      	ldr	r2, [pc, #28]	@ (8008968 <vApplicationGetIdleTaskMemory+0x2c>)
 800894c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	4a06      	ldr	r2, [pc, #24]	@ (800896c <vApplicationGetIdleTaskMemory+0x30>)
 8008952:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2280      	movs	r2, #128	@ 0x80
 8008958:	601a      	str	r2, [r3, #0]
}
 800895a:	bf00      	nop
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	200005d4 	.word	0x200005d4
 800896c:	2000067c 	.word	0x2000067c

08008970 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	4a07      	ldr	r2, [pc, #28]	@ (800899c <vApplicationGetTimerTaskMemory+0x2c>)
 8008980:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	4a06      	ldr	r2, [pc, #24]	@ (80089a0 <vApplicationGetTimerTaskMemory+0x30>)
 8008986:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800898e:	601a      	str	r2, [r3, #0]
}
 8008990:	bf00      	nop
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	2000087c 	.word	0x2000087c
 80089a0:	20000924 	.word	0x20000924

080089a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f103 0208 	add.w	r2, r3, #8
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f04f 32ff 	mov.w	r2, #4294967295
 80089bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f103 0208 	add.w	r2, r3, #8
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f103 0208 	add.w	r2, r3, #8
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80089f2:	bf00      	nop
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089fe:	b480      	push	{r7}
 8008a00:	b085      	sub	sp, #20
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	689a      	ldr	r2, [r3, #8]
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	683a      	ldr	r2, [r7, #0]
 8008a28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	1c5a      	adds	r2, r3, #1
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	601a      	str	r2, [r3, #0]
}
 8008a3a:	bf00      	nop
 8008a3c:	3714      	adds	r7, #20
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a46:	b480      	push	{r7}
 8008a48:	b085      	sub	sp, #20
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5c:	d103      	bne.n	8008a66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	60fb      	str	r3, [r7, #12]
 8008a64:	e00c      	b.n	8008a80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	3308      	adds	r3, #8
 8008a6a:	60fb      	str	r3, [r7, #12]
 8008a6c:	e002      	b.n	8008a74 <vListInsert+0x2e>
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	60fb      	str	r3, [r7, #12]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d2f6      	bcs.n	8008a6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	685a      	ldr	r2, [r3, #4]
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	1c5a      	adds	r2, r3, #1
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	601a      	str	r2, [r3, #0]
}
 8008aac:	bf00      	nop
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	6892      	ldr	r2, [r2, #8]
 8008ace:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	6852      	ldr	r2, [r2, #4]
 8008ad8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d103      	bne.n	8008aec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	689a      	ldr	r2, [r3, #8]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	1e5a      	subs	r2, r3, #1
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3714      	adds	r7, #20
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d10b      	bne.n	8008b38 <xQueueGenericReset+0x2c>
	__asm volatile
 8008b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b24:	f383 8811 	msr	BASEPRI, r3
 8008b28:	f3bf 8f6f 	isb	sy
 8008b2c:	f3bf 8f4f 	dsb	sy
 8008b30:	60bb      	str	r3, [r7, #8]
}
 8008b32:	bf00      	nop
 8008b34:	bf00      	nop
 8008b36:	e7fd      	b.n	8008b34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008b38:	f002 fe06 	bl	800b748 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b44:	68f9      	ldr	r1, [r7, #12]
 8008b46:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008b48:	fb01 f303 	mul.w	r3, r1, r3
 8008b4c:	441a      	add	r2, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	68f9      	ldr	r1, [r7, #12]
 8008b6c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008b6e:	fb01 f303 	mul.w	r3, r1, r3
 8008b72:	441a      	add	r2, r3
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	22ff      	movs	r2, #255	@ 0xff
 8008b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	22ff      	movs	r2, #255	@ 0xff
 8008b84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d114      	bne.n	8008bb8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d01a      	beq.n	8008bcc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	3310      	adds	r3, #16
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f001 fda0 	bl	800a6e0 <xTaskRemoveFromEventList>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d012      	beq.n	8008bcc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8008bdc <xQueueGenericReset+0xd0>)
 8008ba8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bac:	601a      	str	r2, [r3, #0]
 8008bae:	f3bf 8f4f 	dsb	sy
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	e009      	b.n	8008bcc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	3310      	adds	r3, #16
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff fef1 	bl	80089a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3324      	adds	r3, #36	@ 0x24
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7ff feec 	bl	80089a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008bcc:	f002 fdee 	bl	800b7ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008bd0:	2301      	movs	r3, #1
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	e000ed04 	.word	0xe000ed04

08008be0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b08e      	sub	sp, #56	@ 0x38
 8008be4:	af02      	add	r7, sp, #8
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
 8008bec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d10b      	bne.n	8008c0c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf8:	f383 8811 	msr	BASEPRI, r3
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008c06:	bf00      	nop
 8008c08:	bf00      	nop
 8008c0a:	e7fd      	b.n	8008c08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10b      	bne.n	8008c2a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c24:	bf00      	nop
 8008c26:	bf00      	nop
 8008c28:	e7fd      	b.n	8008c26 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d002      	beq.n	8008c36 <xQueueGenericCreateStatic+0x56>
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d001      	beq.n	8008c3a <xQueueGenericCreateStatic+0x5a>
 8008c36:	2301      	movs	r3, #1
 8008c38:	e000      	b.n	8008c3c <xQueueGenericCreateStatic+0x5c>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10b      	bne.n	8008c58 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	623b      	str	r3, [r7, #32]
}
 8008c52:	bf00      	nop
 8008c54:	bf00      	nop
 8008c56:	e7fd      	b.n	8008c54 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d102      	bne.n	8008c64 <xQueueGenericCreateStatic+0x84>
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d101      	bne.n	8008c68 <xQueueGenericCreateStatic+0x88>
 8008c64:	2301      	movs	r3, #1
 8008c66:	e000      	b.n	8008c6a <xQueueGenericCreateStatic+0x8a>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10b      	bne.n	8008c86 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	61fb      	str	r3, [r7, #28]
}
 8008c80:	bf00      	nop
 8008c82:	bf00      	nop
 8008c84:	e7fd      	b.n	8008c82 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008c86:	2350      	movs	r3, #80	@ 0x50
 8008c88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2b50      	cmp	r3, #80	@ 0x50
 8008c8e:	d00b      	beq.n	8008ca8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	61bb      	str	r3, [r7, #24]
}
 8008ca2:	bf00      	nop
 8008ca4:	bf00      	nop
 8008ca6:	e7fd      	b.n	8008ca4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008ca8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00d      	beq.n	8008cd0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008cbc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	68b9      	ldr	r1, [r7, #8]
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	f000 f840 	bl	8008d50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3730      	adds	r7, #48	@ 0x30
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b08a      	sub	sp, #40	@ 0x28
 8008cde:	af02      	add	r7, sp, #8
 8008ce0:	60f8      	str	r0, [r7, #12]
 8008ce2:	60b9      	str	r1, [r7, #8]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10b      	bne.n	8008d06 <xQueueGenericCreate+0x2c>
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	613b      	str	r3, [r7, #16]
}
 8008d00:	bf00      	nop
 8008d02:	bf00      	nop
 8008d04:	e7fd      	b.n	8008d02 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	fb02 f303 	mul.w	r3, r2, r3
 8008d0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	3350      	adds	r3, #80	@ 0x50
 8008d14:	4618      	mov	r0, r3
 8008d16:	f002 fe39 	bl	800b98c <pvPortMalloc>
 8008d1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d011      	beq.n	8008d46 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	3350      	adds	r3, #80	@ 0x50
 8008d2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d34:	79fa      	ldrb	r2, [r7, #7]
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	9300      	str	r3, [sp, #0]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	68b9      	ldr	r1, [r7, #8]
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f000 f805 	bl	8008d50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d46:	69bb      	ldr	r3, [r7, #24]
	}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3720      	adds	r7, #32
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d103      	bne.n	8008d6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	69ba      	ldr	r2, [r7, #24]
 8008d68:	601a      	str	r2, [r3, #0]
 8008d6a:	e002      	b.n	8008d72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d7e:	2101      	movs	r1, #1
 8008d80:	69b8      	ldr	r0, [r7, #24]
 8008d82:	f7ff fec3 	bl	8008b0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	78fa      	ldrb	r2, [r7, #3]
 8008d8a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d8e:	bf00      	nop
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b08a      	sub	sp, #40	@ 0x28
 8008d9a:	af02      	add	r7, sp, #8
 8008d9c:	60f8      	str	r0, [r7, #12]
 8008d9e:	60b9      	str	r1, [r7, #8]
 8008da0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10b      	bne.n	8008dc0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8008da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dac:	f383 8811 	msr	BASEPRI, r3
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	61bb      	str	r3, [r7, #24]
}
 8008dba:	bf00      	nop
 8008dbc:	bf00      	nop
 8008dbe:	e7fd      	b.n	8008dbc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d90b      	bls.n	8008de0 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8008dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dcc:	f383 8811 	msr	BASEPRI, r3
 8008dd0:	f3bf 8f6f 	isb	sy
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	617b      	str	r3, [r7, #20]
}
 8008dda:	bf00      	nop
 8008ddc:	bf00      	nop
 8008dde:	e7fd      	b.n	8008ddc <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008de0:	2302      	movs	r3, #2
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	2100      	movs	r1, #0
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f7ff fef8 	bl	8008be0 <xQueueGenericCreateStatic>
 8008df0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d002      	beq.n	8008dfe <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008dfe:	69fb      	ldr	r3, [r7, #28]
	}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3720      	adds	r7, #32
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10b      	bne.n	8008e30 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8008e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e1c:	f383 8811 	msr	BASEPRI, r3
 8008e20:	f3bf 8f6f 	isb	sy
 8008e24:	f3bf 8f4f 	dsb	sy
 8008e28:	613b      	str	r3, [r7, #16]
}
 8008e2a:	bf00      	nop
 8008e2c:	bf00      	nop
 8008e2e:	e7fd      	b.n	8008e2c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008e30:	683a      	ldr	r2, [r7, #0]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d90b      	bls.n	8008e50 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8008e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e3c:	f383 8811 	msr	BASEPRI, r3
 8008e40:	f3bf 8f6f 	isb	sy
 8008e44:	f3bf 8f4f 	dsb	sy
 8008e48:	60fb      	str	r3, [r7, #12]
}
 8008e4a:	bf00      	nop
 8008e4c:	bf00      	nop
 8008e4e:	e7fd      	b.n	8008e4c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008e50:	2202      	movs	r2, #2
 8008e52:	2100      	movs	r1, #0
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7ff ff40 	bl	8008cda <xQueueGenericCreate>
 8008e5a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d002      	beq.n	8008e68 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	683a      	ldr	r2, [r7, #0]
 8008e66:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008e68:	697b      	ldr	r3, [r7, #20]
	}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3718      	adds	r7, #24
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
	...

08008e74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b08e      	sub	sp, #56	@ 0x38
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
 8008e80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008e82:	2300      	movs	r3, #0
 8008e84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10b      	bne.n	8008ea8 <xQueueGenericSend+0x34>
	__asm volatile
 8008e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008ea2:	bf00      	nop
 8008ea4:	bf00      	nop
 8008ea6:	e7fd      	b.n	8008ea4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d103      	bne.n	8008eb6 <xQueueGenericSend+0x42>
 8008eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d101      	bne.n	8008eba <xQueueGenericSend+0x46>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e000      	b.n	8008ebc <xQueueGenericSend+0x48>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10b      	bne.n	8008ed8 <xQueueGenericSend+0x64>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008ed2:	bf00      	nop
 8008ed4:	bf00      	nop
 8008ed6:	e7fd      	b.n	8008ed4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d103      	bne.n	8008ee6 <xQueueGenericSend+0x72>
 8008ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d101      	bne.n	8008eea <xQueueGenericSend+0x76>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e000      	b.n	8008eec <xQueueGenericSend+0x78>
 8008eea:	2300      	movs	r3, #0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10b      	bne.n	8008f08 <xQueueGenericSend+0x94>
	__asm volatile
 8008ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	623b      	str	r3, [r7, #32]
}
 8008f02:	bf00      	nop
 8008f04:	bf00      	nop
 8008f06:	e7fd      	b.n	8008f04 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f08:	f001 fdb0 	bl	800aa6c <xTaskGetSchedulerState>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d102      	bne.n	8008f18 <xQueueGenericSend+0xa4>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d101      	bne.n	8008f1c <xQueueGenericSend+0xa8>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e000      	b.n	8008f1e <xQueueGenericSend+0xaa>
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10b      	bne.n	8008f3a <xQueueGenericSend+0xc6>
	__asm volatile
 8008f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	61fb      	str	r3, [r7, #28]
}
 8008f34:	bf00      	nop
 8008f36:	bf00      	nop
 8008f38:	e7fd      	b.n	8008f36 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f3a:	f002 fc05 	bl	800b748 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d302      	bcc.n	8008f50 <xQueueGenericSend+0xdc>
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d129      	bne.n	8008fa4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f50:	683a      	ldr	r2, [r7, #0]
 8008f52:	68b9      	ldr	r1, [r7, #8]
 8008f54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f56:	f000 fc91 	bl	800987c <prvCopyDataToQueue>
 8008f5a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d010      	beq.n	8008f86 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f66:	3324      	adds	r3, #36	@ 0x24
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f001 fbb9 	bl	800a6e0 <xTaskRemoveFromEventList>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d013      	beq.n	8008f9c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008f74:	4b3f      	ldr	r3, [pc, #252]	@ (8009074 <xQueueGenericSend+0x200>)
 8008f76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f7a:	601a      	str	r2, [r3, #0]
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	f3bf 8f6f 	isb	sy
 8008f84:	e00a      	b.n	8008f9c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d007      	beq.n	8008f9c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008f8c:	4b39      	ldr	r3, [pc, #228]	@ (8009074 <xQueueGenericSend+0x200>)
 8008f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f92:	601a      	str	r2, [r3, #0]
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008f9c:	f002 fc06 	bl	800b7ac <vPortExitCritical>
				return pdPASS;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e063      	b.n	800906c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d103      	bne.n	8008fb2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008faa:	f002 fbff 	bl	800b7ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	e05c      	b.n	800906c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d106      	bne.n	8008fc6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fb8:	f107 0314 	add.w	r3, r7, #20
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f001 fbf3 	bl	800a7a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fc6:	f002 fbf1 	bl	800b7ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fca:	f001 f95b 	bl	800a284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fce:	f002 fbbb 	bl	800b748 <vPortEnterCritical>
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008fd8:	b25b      	sxtb	r3, r3
 8008fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fde:	d103      	bne.n	8008fe8 <xQueueGenericSend+0x174>
 8008fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fee:	b25b      	sxtb	r3, r3
 8008ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff4:	d103      	bne.n	8008ffe <xQueueGenericSend+0x18a>
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ffe:	f002 fbd5 	bl	800b7ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009002:	1d3a      	adds	r2, r7, #4
 8009004:	f107 0314 	add.w	r3, r7, #20
 8009008:	4611      	mov	r1, r2
 800900a:	4618      	mov	r0, r3
 800900c:	f001 fbe2 	bl	800a7d4 <xTaskCheckForTimeOut>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d124      	bne.n	8009060 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009016:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009018:	f000 fd28 	bl	8009a6c <prvIsQueueFull>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d018      	beq.n	8009054 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009024:	3310      	adds	r3, #16
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	4611      	mov	r1, r2
 800902a:	4618      	mov	r0, r3
 800902c:	f001 fb06 	bl	800a63c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009030:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009032:	f000 fcb3 	bl	800999c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009036:	f001 f933 	bl	800a2a0 <xTaskResumeAll>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	f47f af7c 	bne.w	8008f3a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009042:	4b0c      	ldr	r3, [pc, #48]	@ (8009074 <xQueueGenericSend+0x200>)
 8009044:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009048:	601a      	str	r2, [r3, #0]
 800904a:	f3bf 8f4f 	dsb	sy
 800904e:	f3bf 8f6f 	isb	sy
 8009052:	e772      	b.n	8008f3a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009054:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009056:	f000 fca1 	bl	800999c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800905a:	f001 f921 	bl	800a2a0 <xTaskResumeAll>
 800905e:	e76c      	b.n	8008f3a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009060:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009062:	f000 fc9b 	bl	800999c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009066:	f001 f91b 	bl	800a2a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800906a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800906c:	4618      	mov	r0, r3
 800906e:	3738      	adds	r7, #56	@ 0x38
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	e000ed04 	.word	0xe000ed04

08009078 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b090      	sub	sp, #64	@ 0x40
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
 8009084:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800908a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10b      	bne.n	80090a8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80090a2:	bf00      	nop
 80090a4:	bf00      	nop
 80090a6:	e7fd      	b.n	80090a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d103      	bne.n	80090b6 <xQueueGenericSendFromISR+0x3e>
 80090ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d101      	bne.n	80090ba <xQueueGenericSendFromISR+0x42>
 80090b6:	2301      	movs	r3, #1
 80090b8:	e000      	b.n	80090bc <xQueueGenericSendFromISR+0x44>
 80090ba:	2300      	movs	r3, #0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10b      	bne.n	80090d8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80090c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80090d2:	bf00      	nop
 80090d4:	bf00      	nop
 80090d6:	e7fd      	b.n	80090d4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d103      	bne.n	80090e6 <xQueueGenericSendFromISR+0x6e>
 80090de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d101      	bne.n	80090ea <xQueueGenericSendFromISR+0x72>
 80090e6:	2301      	movs	r3, #1
 80090e8:	e000      	b.n	80090ec <xQueueGenericSendFromISR+0x74>
 80090ea:	2300      	movs	r3, #0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10b      	bne.n	8009108 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80090f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f4:	f383 8811 	msr	BASEPRI, r3
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	623b      	str	r3, [r7, #32]
}
 8009102:	bf00      	nop
 8009104:	bf00      	nop
 8009106:	e7fd      	b.n	8009104 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009108:	f002 fbfe 	bl	800b908 <vPortValidateInterruptPriority>
	__asm volatile
 800910c:	f3ef 8211 	mrs	r2, BASEPRI
 8009110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	61fa      	str	r2, [r7, #28]
 8009122:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8009124:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009126:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800912a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800912c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800912e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009130:	429a      	cmp	r2, r3
 8009132:	d302      	bcc.n	800913a <xQueueGenericSendFromISR+0xc2>
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2b02      	cmp	r3, #2
 8009138:	d12f      	bne.n	800919a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800913a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800913c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009140:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009148:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800914a:	683a      	ldr	r2, [r7, #0]
 800914c:	68b9      	ldr	r1, [r7, #8]
 800914e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009150:	f000 fb94 	bl	800987c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009154:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800915c:	d112      	bne.n	8009184 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800915e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009162:	2b00      	cmp	r3, #0
 8009164:	d016      	beq.n	8009194 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009168:	3324      	adds	r3, #36	@ 0x24
 800916a:	4618      	mov	r0, r3
 800916c:	f001 fab8 	bl	800a6e0 <xTaskRemoveFromEventList>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00e      	beq.n	8009194 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00b      	beq.n	8009194 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	601a      	str	r2, [r3, #0]
 8009182:	e007      	b.n	8009194 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009184:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009188:	3301      	adds	r3, #1
 800918a:	b2db      	uxtb	r3, r3
 800918c:	b25a      	sxtb	r2, r3
 800918e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009190:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009194:	2301      	movs	r3, #1
 8009196:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009198:	e001      	b.n	800919e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800919a:	2300      	movs	r3, #0
 800919c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800919e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091a0:	617b      	str	r3, [r7, #20]
	__asm volatile
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f383 8811 	msr	BASEPRI, r3
}
 80091a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3740      	adds	r7, #64	@ 0x40
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b08e      	sub	sp, #56	@ 0x38
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80091c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10b      	bne.n	80091e0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80091c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091cc:	f383 8811 	msr	BASEPRI, r3
 80091d0:	f3bf 8f6f 	isb	sy
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	623b      	str	r3, [r7, #32]
}
 80091da:	bf00      	nop
 80091dc:	bf00      	nop
 80091de:	e7fd      	b.n	80091dc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80091e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00b      	beq.n	8009200 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80091e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	61fb      	str	r3, [r7, #28]
}
 80091fa:	bf00      	nop
 80091fc:	bf00      	nop
 80091fe:	e7fd      	b.n	80091fc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d103      	bne.n	8009210 <xQueueGiveFromISR+0x5c>
 8009208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <xQueueGiveFromISR+0x60>
 8009210:	2301      	movs	r3, #1
 8009212:	e000      	b.n	8009216 <xQueueGiveFromISR+0x62>
 8009214:	2300      	movs	r3, #0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d10b      	bne.n	8009232 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800921a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800921e:	f383 8811 	msr	BASEPRI, r3
 8009222:	f3bf 8f6f 	isb	sy
 8009226:	f3bf 8f4f 	dsb	sy
 800922a:	61bb      	str	r3, [r7, #24]
}
 800922c:	bf00      	nop
 800922e:	bf00      	nop
 8009230:	e7fd      	b.n	800922e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009232:	f002 fb69 	bl	800b908 <vPortValidateInterruptPriority>
	__asm volatile
 8009236:	f3ef 8211 	mrs	r2, BASEPRI
 800923a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800923e:	f383 8811 	msr	BASEPRI, r3
 8009242:	f3bf 8f6f 	isb	sy
 8009246:	f3bf 8f4f 	dsb	sy
 800924a:	617a      	str	r2, [r7, #20]
 800924c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800924e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009250:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009256:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800925c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800925e:	429a      	cmp	r2, r3
 8009260:	d22b      	bcs.n	80092ba <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009264:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009268:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800926c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800926e:	1c5a      	adds	r2, r3, #1
 8009270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009272:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009274:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800927c:	d112      	bne.n	80092a4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800927e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009282:	2b00      	cmp	r3, #0
 8009284:	d016      	beq.n	80092b4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009288:	3324      	adds	r3, #36	@ 0x24
 800928a:	4618      	mov	r0, r3
 800928c:	f001 fa28 	bl	800a6e0 <xTaskRemoveFromEventList>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00e      	beq.n	80092b4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00b      	beq.n	80092b4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	2201      	movs	r2, #1
 80092a0:	601a      	str	r2, [r3, #0]
 80092a2:	e007      	b.n	80092b4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092a8:	3301      	adds	r3, #1
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	b25a      	sxtb	r2, r3
 80092ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80092b4:	2301      	movs	r3, #1
 80092b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80092b8:	e001      	b.n	80092be <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80092ba:	2300      	movs	r3, #0
 80092bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80092be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092c0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f383 8811 	msr	BASEPRI, r3
}
 80092c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3738      	adds	r7, #56	@ 0x38
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b08c      	sub	sp, #48	@ 0x30
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80092e0:	2300      	movs	r3, #0
 80092e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80092e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10b      	bne.n	8009306 <xQueueReceive+0x32>
	__asm volatile
 80092ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f2:	f383 8811 	msr	BASEPRI, r3
 80092f6:	f3bf 8f6f 	isb	sy
 80092fa:	f3bf 8f4f 	dsb	sy
 80092fe:	623b      	str	r3, [r7, #32]
}
 8009300:	bf00      	nop
 8009302:	bf00      	nop
 8009304:	e7fd      	b.n	8009302 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d103      	bne.n	8009314 <xQueueReceive+0x40>
 800930c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800930e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009310:	2b00      	cmp	r3, #0
 8009312:	d101      	bne.n	8009318 <xQueueReceive+0x44>
 8009314:	2301      	movs	r3, #1
 8009316:	e000      	b.n	800931a <xQueueReceive+0x46>
 8009318:	2300      	movs	r3, #0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10b      	bne.n	8009336 <xQueueReceive+0x62>
	__asm volatile
 800931e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	61fb      	str	r3, [r7, #28]
}
 8009330:	bf00      	nop
 8009332:	bf00      	nop
 8009334:	e7fd      	b.n	8009332 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009336:	f001 fb99 	bl	800aa6c <xTaskGetSchedulerState>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d102      	bne.n	8009346 <xQueueReceive+0x72>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d101      	bne.n	800934a <xQueueReceive+0x76>
 8009346:	2301      	movs	r3, #1
 8009348:	e000      	b.n	800934c <xQueueReceive+0x78>
 800934a:	2300      	movs	r3, #0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d10b      	bne.n	8009368 <xQueueReceive+0x94>
	__asm volatile
 8009350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009354:	f383 8811 	msr	BASEPRI, r3
 8009358:	f3bf 8f6f 	isb	sy
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	61bb      	str	r3, [r7, #24]
}
 8009362:	bf00      	nop
 8009364:	bf00      	nop
 8009366:	e7fd      	b.n	8009364 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009368:	f002 f9ee 	bl	800b748 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800936c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800936e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009370:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009374:	2b00      	cmp	r3, #0
 8009376:	d01f      	beq.n	80093b8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009378:	68b9      	ldr	r1, [r7, #8]
 800937a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800937c:	f000 fae8 	bl	8009950 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009382:	1e5a      	subs	r2, r3, #1
 8009384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009386:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00f      	beq.n	80093b0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009392:	3310      	adds	r3, #16
 8009394:	4618      	mov	r0, r3
 8009396:	f001 f9a3 	bl	800a6e0 <xTaskRemoveFromEventList>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d007      	beq.n	80093b0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80093a0:	4b3c      	ldr	r3, [pc, #240]	@ (8009494 <xQueueReceive+0x1c0>)
 80093a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093a6:	601a      	str	r2, [r3, #0]
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80093b0:	f002 f9fc 	bl	800b7ac <vPortExitCritical>
				return pdPASS;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e069      	b.n	800948c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d103      	bne.n	80093c6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093be:	f002 f9f5 	bl	800b7ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80093c2:	2300      	movs	r3, #0
 80093c4:	e062      	b.n	800948c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d106      	bne.n	80093da <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093cc:	f107 0310 	add.w	r3, r7, #16
 80093d0:	4618      	mov	r0, r3
 80093d2:	f001 f9e9 	bl	800a7a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093d6:	2301      	movs	r3, #1
 80093d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093da:	f002 f9e7 	bl	800b7ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093de:	f000 ff51 	bl	800a284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093e2:	f002 f9b1 	bl	800b748 <vPortEnterCritical>
 80093e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093ec:	b25b      	sxtb	r3, r3
 80093ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f2:	d103      	bne.n	80093fc <xQueueReceive+0x128>
 80093f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009402:	b25b      	sxtb	r3, r3
 8009404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009408:	d103      	bne.n	8009412 <xQueueReceive+0x13e>
 800940a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800940c:	2200      	movs	r2, #0
 800940e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009412:	f002 f9cb 	bl	800b7ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009416:	1d3a      	adds	r2, r7, #4
 8009418:	f107 0310 	add.w	r3, r7, #16
 800941c:	4611      	mov	r1, r2
 800941e:	4618      	mov	r0, r3
 8009420:	f001 f9d8 	bl	800a7d4 <xTaskCheckForTimeOut>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d123      	bne.n	8009472 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800942a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800942c:	f000 fb08 	bl	8009a40 <prvIsQueueEmpty>
 8009430:	4603      	mov	r3, r0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d017      	beq.n	8009466 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009438:	3324      	adds	r3, #36	@ 0x24
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	4611      	mov	r1, r2
 800943e:	4618      	mov	r0, r3
 8009440:	f001 f8fc 	bl	800a63c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009444:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009446:	f000 faa9 	bl	800999c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800944a:	f000 ff29 	bl	800a2a0 <xTaskResumeAll>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d189      	bne.n	8009368 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009454:	4b0f      	ldr	r3, [pc, #60]	@ (8009494 <xQueueReceive+0x1c0>)
 8009456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800945a:	601a      	str	r2, [r3, #0]
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	e780      	b.n	8009368 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009466:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009468:	f000 fa98 	bl	800999c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800946c:	f000 ff18 	bl	800a2a0 <xTaskResumeAll>
 8009470:	e77a      	b.n	8009368 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009472:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009474:	f000 fa92 	bl	800999c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009478:	f000 ff12 	bl	800a2a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800947c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800947e:	f000 fadf 	bl	8009a40 <prvIsQueueEmpty>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	f43f af6f 	beq.w	8009368 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800948a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800948c:	4618      	mov	r0, r3
 800948e:	3730      	adds	r7, #48	@ 0x30
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	e000ed04 	.word	0xe000ed04

08009498 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b08e      	sub	sp, #56	@ 0x38
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80094a2:	2300      	movs	r3, #0
 80094a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80094aa:	2300      	movs	r3, #0
 80094ac:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80094ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10b      	bne.n	80094cc <xQueueSemaphoreTake+0x34>
	__asm volatile
 80094b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b8:	f383 8811 	msr	BASEPRI, r3
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	623b      	str	r3, [r7, #32]
}
 80094c6:	bf00      	nop
 80094c8:	bf00      	nop
 80094ca:	e7fd      	b.n	80094c8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80094cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00b      	beq.n	80094ec <xQueueSemaphoreTake+0x54>
	__asm volatile
 80094d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d8:	f383 8811 	msr	BASEPRI, r3
 80094dc:	f3bf 8f6f 	isb	sy
 80094e0:	f3bf 8f4f 	dsb	sy
 80094e4:	61fb      	str	r3, [r7, #28]
}
 80094e6:	bf00      	nop
 80094e8:	bf00      	nop
 80094ea:	e7fd      	b.n	80094e8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094ec:	f001 fabe 	bl	800aa6c <xTaskGetSchedulerState>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d102      	bne.n	80094fc <xQueueSemaphoreTake+0x64>
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d101      	bne.n	8009500 <xQueueSemaphoreTake+0x68>
 80094fc:	2301      	movs	r3, #1
 80094fe:	e000      	b.n	8009502 <xQueueSemaphoreTake+0x6a>
 8009500:	2300      	movs	r3, #0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d10b      	bne.n	800951e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8009506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800950a:	f383 8811 	msr	BASEPRI, r3
 800950e:	f3bf 8f6f 	isb	sy
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	61bb      	str	r3, [r7, #24]
}
 8009518:	bf00      	nop
 800951a:	bf00      	nop
 800951c:	e7fd      	b.n	800951a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800951e:	f002 f913 	bl	800b748 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009526:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952a:	2b00      	cmp	r3, #0
 800952c:	d024      	beq.n	8009578 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800952e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009530:	1e5a      	subs	r2, r3, #1
 8009532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009534:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d104      	bne.n	8009548 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800953e:	f001 fc0f 	bl	800ad60 <pvTaskIncrementMutexHeldCount>
 8009542:	4602      	mov	r2, r0
 8009544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009546:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00f      	beq.n	8009570 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009552:	3310      	adds	r3, #16
 8009554:	4618      	mov	r0, r3
 8009556:	f001 f8c3 	bl	800a6e0 <xTaskRemoveFromEventList>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d007      	beq.n	8009570 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009560:	4b54      	ldr	r3, [pc, #336]	@ (80096b4 <xQueueSemaphoreTake+0x21c>)
 8009562:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009566:	601a      	str	r2, [r3, #0]
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009570:	f002 f91c 	bl	800b7ac <vPortExitCritical>
				return pdPASS;
 8009574:	2301      	movs	r3, #1
 8009576:	e098      	b.n	80096aa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d112      	bne.n	80095a4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800957e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00b      	beq.n	800959c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009588:	f383 8811 	msr	BASEPRI, r3
 800958c:	f3bf 8f6f 	isb	sy
 8009590:	f3bf 8f4f 	dsb	sy
 8009594:	617b      	str	r3, [r7, #20]
}
 8009596:	bf00      	nop
 8009598:	bf00      	nop
 800959a:	e7fd      	b.n	8009598 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800959c:	f002 f906 	bl	800b7ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80095a0:	2300      	movs	r3, #0
 80095a2:	e082      	b.n	80096aa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d106      	bne.n	80095b8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095aa:	f107 030c 	add.w	r3, r7, #12
 80095ae:	4618      	mov	r0, r3
 80095b0:	f001 f8fa 	bl	800a7a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095b4:	2301      	movs	r3, #1
 80095b6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095b8:	f002 f8f8 	bl	800b7ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095bc:	f000 fe62 	bl	800a284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095c0:	f002 f8c2 	bl	800b748 <vPortEnterCritical>
 80095c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095ca:	b25b      	sxtb	r3, r3
 80095cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d0:	d103      	bne.n	80095da <xQueueSemaphoreTake+0x142>
 80095d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095e0:	b25b      	sxtb	r3, r3
 80095e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e6:	d103      	bne.n	80095f0 <xQueueSemaphoreTake+0x158>
 80095e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ea:	2200      	movs	r2, #0
 80095ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095f0:	f002 f8dc 	bl	800b7ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095f4:	463a      	mov	r2, r7
 80095f6:	f107 030c 	add.w	r3, r7, #12
 80095fa:	4611      	mov	r1, r2
 80095fc:	4618      	mov	r0, r3
 80095fe:	f001 f8e9 	bl	800a7d4 <xTaskCheckForTimeOut>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d132      	bne.n	800966e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009608:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800960a:	f000 fa19 	bl	8009a40 <prvIsQueueEmpty>
 800960e:	4603      	mov	r3, r0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d026      	beq.n	8009662 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d109      	bne.n	8009630 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800961c:	f002 f894 	bl	800b748 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	4618      	mov	r0, r3
 8009626:	f001 fa3f 	bl	800aaa8 <xTaskPriorityInherit>
 800962a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800962c:	f002 f8be 	bl	800b7ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009632:	3324      	adds	r3, #36	@ 0x24
 8009634:	683a      	ldr	r2, [r7, #0]
 8009636:	4611      	mov	r1, r2
 8009638:	4618      	mov	r0, r3
 800963a:	f000 ffff 	bl	800a63c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800963e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009640:	f000 f9ac 	bl	800999c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009644:	f000 fe2c 	bl	800a2a0 <xTaskResumeAll>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	f47f af67 	bne.w	800951e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009650:	4b18      	ldr	r3, [pc, #96]	@ (80096b4 <xQueueSemaphoreTake+0x21c>)
 8009652:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009656:	601a      	str	r2, [r3, #0]
 8009658:	f3bf 8f4f 	dsb	sy
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	e75d      	b.n	800951e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009662:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009664:	f000 f99a 	bl	800999c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009668:	f000 fe1a 	bl	800a2a0 <xTaskResumeAll>
 800966c:	e757      	b.n	800951e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800966e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009670:	f000 f994 	bl	800999c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009674:	f000 fe14 	bl	800a2a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009678:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800967a:	f000 f9e1 	bl	8009a40 <prvIsQueueEmpty>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	f43f af4c 	beq.w	800951e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00d      	beq.n	80096a8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800968c:	f002 f85c 	bl	800b748 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009690:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009692:	f000 f8db 	bl	800984c <prvGetDisinheritPriorityAfterTimeout>
 8009696:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800969e:	4618      	mov	r0, r3
 80096a0:	f001 fada 	bl	800ac58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80096a4:	f002 f882 	bl	800b7ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80096a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3738      	adds	r7, #56	@ 0x38
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	e000ed04 	.word	0xe000ed04

080096b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b08e      	sub	sp, #56	@ 0x38
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80096c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d10b      	bne.n	80096e6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80096ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d2:	f383 8811 	msr	BASEPRI, r3
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	623b      	str	r3, [r7, #32]
}
 80096e0:	bf00      	nop
 80096e2:	bf00      	nop
 80096e4:	e7fd      	b.n	80096e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d103      	bne.n	80096f4 <xQueueReceiveFromISR+0x3c>
 80096ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d101      	bne.n	80096f8 <xQueueReceiveFromISR+0x40>
 80096f4:	2301      	movs	r3, #1
 80096f6:	e000      	b.n	80096fa <xQueueReceiveFromISR+0x42>
 80096f8:	2300      	movs	r3, #0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d10b      	bne.n	8009716 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80096fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009702:	f383 8811 	msr	BASEPRI, r3
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	61fb      	str	r3, [r7, #28]
}
 8009710:	bf00      	nop
 8009712:	bf00      	nop
 8009714:	e7fd      	b.n	8009712 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009716:	f002 f8f7 	bl	800b908 <vPortValidateInterruptPriority>
	__asm volatile
 800971a:	f3ef 8211 	mrs	r2, BASEPRI
 800971e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	61ba      	str	r2, [r7, #24]
 8009730:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009732:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009734:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800973a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800973c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800973e:	2b00      	cmp	r3, #0
 8009740:	d02f      	beq.n	80097a2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009744:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009748:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800974c:	68b9      	ldr	r1, [r7, #8]
 800974e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009750:	f000 f8fe 	bl	8009950 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009756:	1e5a      	subs	r2, r3, #1
 8009758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800975a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800975c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009764:	d112      	bne.n	800978c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d016      	beq.n	800979c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800976e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009770:	3310      	adds	r3, #16
 8009772:	4618      	mov	r0, r3
 8009774:	f000 ffb4 	bl	800a6e0 <xTaskRemoveFromEventList>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00e      	beq.n	800979c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00b      	beq.n	800979c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	601a      	str	r2, [r3, #0]
 800978a:	e007      	b.n	800979c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800978c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009790:	3301      	adds	r3, #1
 8009792:	b2db      	uxtb	r3, r3
 8009794:	b25a      	sxtb	r2, r3
 8009796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009798:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800979c:	2301      	movs	r3, #1
 800979e:	637b      	str	r3, [r7, #52]	@ 0x34
 80097a0:	e001      	b.n	80097a6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80097a2:	2300      	movs	r3, #0
 80097a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80097a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	f383 8811 	msr	BASEPRI, r3
}
 80097b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3738      	adds	r7, #56	@ 0x38
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b086      	sub	sp, #24
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10b      	bne.n	80097e6 <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d2:	f383 8811 	msr	BASEPRI, r3
 80097d6:	f3bf 8f6f 	isb	sy
 80097da:	f3bf 8f4f 	dsb	sy
 80097de:	60fb      	str	r3, [r7, #12]
}
 80097e0:	bf00      	nop
 80097e2:	bf00      	nop
 80097e4:	e7fd      	b.n	80097e2 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 80097e6:	f001 ffaf 	bl	800b748 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80097f6:	f001 ffd9 	bl	800b7ac <vPortExitCritical>

	return uxReturn;
 80097fa:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80097fc:	4618      	mov	r0, r3
 80097fe:	3718      	adds	r7, #24
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10b      	bne.n	800982e <vQueueDelete+0x2a>
	__asm volatile
 8009816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800981a:	f383 8811 	msr	BASEPRI, r3
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	f3bf 8f4f 	dsb	sy
 8009826:	60bb      	str	r3, [r7, #8]
}
 8009828:	bf00      	nop
 800982a:	bf00      	nop
 800982c:	e7fd      	b.n	800982a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	f000 f95e 	bl	8009af0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800983a:	2b00      	cmp	r3, #0
 800983c:	d102      	bne.n	8009844 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f002 f972 	bl	800bb28 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009844:	bf00      	nop
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009858:	2b00      	cmp	r3, #0
 800985a:	d006      	beq.n	800986a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009866:	60fb      	str	r3, [r7, #12]
 8009868:	e001      	b.n	800986e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800986a:	2300      	movs	r3, #0
 800986c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800986e:	68fb      	ldr	r3, [r7, #12]
	}
 8009870:	4618      	mov	r0, r3
 8009872:	3714      	adds	r7, #20
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b086      	sub	sp, #24
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009888:	2300      	movs	r3, #0
 800988a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009890:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009896:	2b00      	cmp	r3, #0
 8009898:	d10d      	bne.n	80098b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d14d      	bne.n	800993e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f001 f966 	bl	800ab78 <xTaskPriorityDisinherit>
 80098ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2200      	movs	r2, #0
 80098b2:	609a      	str	r2, [r3, #8]
 80098b4:	e043      	b.n	800993e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d119      	bne.n	80098f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6858      	ldr	r0, [r3, #4]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098c4:	461a      	mov	r2, r3
 80098c6:	68b9      	ldr	r1, [r7, #8]
 80098c8:	f002 fad2 	bl	800be70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	685a      	ldr	r2, [r3, #4]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098d4:	441a      	add	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	685a      	ldr	r2, [r3, #4]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d32b      	bcc.n	800993e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	605a      	str	r2, [r3, #4]
 80098ee:	e026      	b.n	800993e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	68d8      	ldr	r0, [r3, #12]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098f8:	461a      	mov	r2, r3
 80098fa:	68b9      	ldr	r1, [r7, #8]
 80098fc:	f002 fab8 	bl	800be70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	68da      	ldr	r2, [r3, #12]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009908:	425b      	negs	r3, r3
 800990a:	441a      	add	r2, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	68da      	ldr	r2, [r3, #12]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	429a      	cmp	r2, r3
 800991a:	d207      	bcs.n	800992c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	689a      	ldr	r2, [r3, #8]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009924:	425b      	negs	r3, r3
 8009926:	441a      	add	r2, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2b02      	cmp	r3, #2
 8009930:	d105      	bne.n	800993e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d002      	beq.n	800993e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	3b01      	subs	r3, #1
 800993c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	1c5a      	adds	r2, r3, #1
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009946:	697b      	ldr	r3, [r7, #20]
}
 8009948:	4618      	mov	r0, r3
 800994a:	3718      	adds	r7, #24
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800995e:	2b00      	cmp	r3, #0
 8009960:	d018      	beq.n	8009994 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	68da      	ldr	r2, [r3, #12]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800996a:	441a      	add	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	68da      	ldr	r2, [r3, #12]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	429a      	cmp	r2, r3
 800997a:	d303      	bcc.n	8009984 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	68d9      	ldr	r1, [r3, #12]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800998c:	461a      	mov	r2, r3
 800998e:	6838      	ldr	r0, [r7, #0]
 8009990:	f002 fa6e 	bl	800be70 <memcpy>
	}
}
 8009994:	bf00      	nop
 8009996:	3708      	adds	r7, #8
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80099a4:	f001 fed0 	bl	800b748 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80099ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80099b0:	e011      	b.n	80099d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d012      	beq.n	80099e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	3324      	adds	r3, #36	@ 0x24
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 fe8e 	bl	800a6e0 <xTaskRemoveFromEventList>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d001      	beq.n	80099ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80099ca:	f000 ff67 	bl	800a89c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80099ce:	7bfb      	ldrb	r3, [r7, #15]
 80099d0:	3b01      	subs	r3, #1
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80099d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	dce9      	bgt.n	80099b2 <prvUnlockQueue+0x16>
 80099de:	e000      	b.n	80099e2 <prvUnlockQueue+0x46>
					break;
 80099e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	22ff      	movs	r2, #255	@ 0xff
 80099e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80099ea:	f001 fedf 	bl	800b7ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80099ee:	f001 feab 	bl	800b748 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80099f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099fa:	e011      	b.n	8009a20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d012      	beq.n	8009a2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	3310      	adds	r3, #16
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f000 fe69 	bl	800a6e0 <xTaskRemoveFromEventList>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d001      	beq.n	8009a18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009a14:	f000 ff42 	bl	800a89c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009a18:	7bbb      	ldrb	r3, [r7, #14]
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	dce9      	bgt.n	80099fc <prvUnlockQueue+0x60>
 8009a28:	e000      	b.n	8009a2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009a2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	22ff      	movs	r2, #255	@ 0xff
 8009a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009a34:	f001 feba 	bl	800b7ac <vPortExitCritical>
}
 8009a38:	bf00      	nop
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a48:	f001 fe7e 	bl	800b748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d102      	bne.n	8009a5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009a54:	2301      	movs	r3, #1
 8009a56:	60fb      	str	r3, [r7, #12]
 8009a58:	e001      	b.n	8009a5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a5e:	f001 fea5 	bl	800b7ac <vPortExitCritical>

	return xReturn;
 8009a62:	68fb      	ldr	r3, [r7, #12]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a74:	f001 fe68 	bl	800b748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d102      	bne.n	8009a8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009a84:	2301      	movs	r3, #1
 8009a86:	60fb      	str	r3, [r7, #12]
 8009a88:	e001      	b.n	8009a8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a8e:	f001 fe8d 	bl	800b7ac <vPortExitCritical>

	return xReturn;
 8009a92:	68fb      	ldr	r3, [r7, #12]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	60fb      	str	r3, [r7, #12]
 8009aaa:	e014      	b.n	8009ad6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009aac:	4a0f      	ldr	r2, [pc, #60]	@ (8009aec <vQueueAddToRegistry+0x50>)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10b      	bne.n	8009ad0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009ab8:	490c      	ldr	r1, [pc, #48]	@ (8009aec <vQueueAddToRegistry+0x50>)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	683a      	ldr	r2, [r7, #0]
 8009abe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8009aec <vQueueAddToRegistry+0x50>)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	00db      	lsls	r3, r3, #3
 8009ac8:	4413      	add	r3, r2
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009ace:	e006      	b.n	8009ade <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	60fb      	str	r3, [r7, #12]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2b07      	cmp	r3, #7
 8009ada:	d9e7      	bls.n	8009aac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009adc:	bf00      	nop
 8009ade:	bf00      	nop
 8009ae0:	3714      	adds	r7, #20
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	20000d24 	.word	0x20000d24

08009af0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009af0:	b480      	push	{r7}
 8009af2:	b085      	sub	sp, #20
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009af8:	2300      	movs	r3, #0
 8009afa:	60fb      	str	r3, [r7, #12]
 8009afc:	e016      	b.n	8009b2c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009afe:	4a10      	ldr	r2, [pc, #64]	@ (8009b40 <vQueueUnregisterQueue+0x50>)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	00db      	lsls	r3, r3, #3
 8009b04:	4413      	add	r3, r2
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d10b      	bne.n	8009b26 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8009b40 <vQueueUnregisterQueue+0x50>)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2100      	movs	r1, #0
 8009b14:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009b18:	4a09      	ldr	r2, [pc, #36]	@ (8009b40 <vQueueUnregisterQueue+0x50>)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	00db      	lsls	r3, r3, #3
 8009b1e:	4413      	add	r3, r2
 8009b20:	2200      	movs	r2, #0
 8009b22:	605a      	str	r2, [r3, #4]
				break;
 8009b24:	e006      	b.n	8009b34 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	60fb      	str	r3, [r7, #12]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2b07      	cmp	r3, #7
 8009b30:	d9e5      	bls.n	8009afe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009b32:	bf00      	nop
 8009b34:	bf00      	nop
 8009b36:	3714      	adds	r7, #20
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr
 8009b40:	20000d24 	.word	0x20000d24

08009b44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009b54:	f001 fdf8 	bl	800b748 <vPortEnterCritical>
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b5e:	b25b      	sxtb	r3, r3
 8009b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b64:	d103      	bne.n	8009b6e <vQueueWaitForMessageRestricted+0x2a>
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b74:	b25b      	sxtb	r3, r3
 8009b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b7a:	d103      	bne.n	8009b84 <vQueueWaitForMessageRestricted+0x40>
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b84:	f001 fe12 	bl	800b7ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d106      	bne.n	8009b9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	3324      	adds	r3, #36	@ 0x24
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	68b9      	ldr	r1, [r7, #8]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f000 fd75 	bl	800a688 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009b9e:	6978      	ldr	r0, [r7, #20]
 8009ba0:	f7ff fefc 	bl	800999c <prvUnlockQueue>
	}
 8009ba4:	bf00      	nop
 8009ba6:	3718      	adds	r7, #24
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b08e      	sub	sp, #56	@ 0x38
 8009bb0:	af04      	add	r7, sp, #16
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
 8009bb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10b      	bne.n	8009bd8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	623b      	str	r3, [r7, #32]
}
 8009bd2:	bf00      	nop
 8009bd4:	bf00      	nop
 8009bd6:	e7fd      	b.n	8009bd4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10b      	bne.n	8009bf6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be2:	f383 8811 	msr	BASEPRI, r3
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	61fb      	str	r3, [r7, #28]
}
 8009bf0:	bf00      	nop
 8009bf2:	bf00      	nop
 8009bf4:	e7fd      	b.n	8009bf2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009bf6:	23a8      	movs	r3, #168	@ 0xa8
 8009bf8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	2ba8      	cmp	r3, #168	@ 0xa8
 8009bfe:	d00b      	beq.n	8009c18 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	61bb      	str	r3, [r7, #24]
}
 8009c12:	bf00      	nop
 8009c14:	bf00      	nop
 8009c16:	e7fd      	b.n	8009c14 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009c18:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d01e      	beq.n	8009c5e <xTaskCreateStatic+0xb2>
 8009c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d01b      	beq.n	8009c5e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c28:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c2e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c32:	2202      	movs	r2, #2
 8009c34:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009c38:	2300      	movs	r3, #0
 8009c3a:	9303      	str	r3, [sp, #12]
 8009c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3e:	9302      	str	r3, [sp, #8]
 8009c40:	f107 0314 	add.w	r3, r7, #20
 8009c44:	9301      	str	r3, [sp, #4]
 8009c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	68b9      	ldr	r1, [r7, #8]
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f000 f851 	bl	8009cf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009c58:	f000 f8f6 	bl	8009e48 <prvAddNewTaskToReadyList>
 8009c5c:	e001      	b.n	8009c62 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009c62:	697b      	ldr	r3, [r7, #20]
	}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3728      	adds	r7, #40	@ 0x28
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b08c      	sub	sp, #48	@ 0x30
 8009c70:	af04      	add	r7, sp, #16
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	603b      	str	r3, [r7, #0]
 8009c78:	4613      	mov	r3, r2
 8009c7a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009c7c:	88fb      	ldrh	r3, [r7, #6]
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	4618      	mov	r0, r3
 8009c82:	f001 fe83 	bl	800b98c <pvPortMalloc>
 8009c86:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00e      	beq.n	8009cac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009c8e:	20a8      	movs	r0, #168	@ 0xa8
 8009c90:	f001 fe7c 	bl	800b98c <pvPortMalloc>
 8009c94:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d003      	beq.n	8009ca4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	697a      	ldr	r2, [r7, #20]
 8009ca0:	631a      	str	r2, [r3, #48]	@ 0x30
 8009ca2:	e005      	b.n	8009cb0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009ca4:	6978      	ldr	r0, [r7, #20]
 8009ca6:	f001 ff3f 	bl	800bb28 <vPortFree>
 8009caa:	e001      	b.n	8009cb0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009cac:	2300      	movs	r3, #0
 8009cae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d017      	beq.n	8009ce6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009cbe:	88fa      	ldrh	r2, [r7, #6]
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	9303      	str	r3, [sp, #12]
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	9302      	str	r3, [sp, #8]
 8009cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cca:	9301      	str	r3, [sp, #4]
 8009ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cce:	9300      	str	r3, [sp, #0]
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	68b9      	ldr	r1, [r7, #8]
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f000 f80f 	bl	8009cf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009cda:	69f8      	ldr	r0, [r7, #28]
 8009cdc:	f000 f8b4 	bl	8009e48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	61bb      	str	r3, [r7, #24]
 8009ce4:	e002      	b.n	8009cec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009cec:	69bb      	ldr	r3, [r7, #24]
	}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3720      	adds	r7, #32
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
	...

08009cf8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b088      	sub	sp, #32
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
 8009d04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d08:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	461a      	mov	r2, r3
 8009d10:	21a5      	movs	r1, #165	@ 0xa5
 8009d12:	f002 f829 	bl	800bd68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009d20:	3b01      	subs	r3, #1
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	f023 0307 	bic.w	r3, r3, #7
 8009d2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	f003 0307 	and.w	r3, r3, #7
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00b      	beq.n	8009d52 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d3e:	f383 8811 	msr	BASEPRI, r3
 8009d42:	f3bf 8f6f 	isb	sy
 8009d46:	f3bf 8f4f 	dsb	sy
 8009d4a:	617b      	str	r3, [r7, #20]
}
 8009d4c:	bf00      	nop
 8009d4e:	bf00      	nop
 8009d50:	e7fd      	b.n	8009d4e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d01f      	beq.n	8009d98 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d58:	2300      	movs	r3, #0
 8009d5a:	61fb      	str	r3, [r7, #28]
 8009d5c:	e012      	b.n	8009d84 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	4413      	add	r3, r2
 8009d64:	7819      	ldrb	r1, [r3, #0]
 8009d66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	3334      	adds	r3, #52	@ 0x34
 8009d6e:	460a      	mov	r2, r1
 8009d70:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	4413      	add	r3, r2
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d006      	beq.n	8009d8c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	3301      	adds	r3, #1
 8009d82:	61fb      	str	r3, [r7, #28]
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	2b0f      	cmp	r3, #15
 8009d88:	d9e9      	bls.n	8009d5e <prvInitialiseNewTask+0x66>
 8009d8a:	e000      	b.n	8009d8e <prvInitialiseNewTask+0x96>
			{
				break;
 8009d8c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d90:	2200      	movs	r2, #0
 8009d92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009d96:	e003      	b.n	8009da0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da2:	2b37      	cmp	r3, #55	@ 0x37
 8009da4:	d901      	bls.n	8009daa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009da6:	2337      	movs	r3, #55	@ 0x37
 8009da8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009dae:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009db4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db8:	2200      	movs	r2, #0
 8009dba:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dbe:	3304      	adds	r3, #4
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7fe fe0f 	bl	80089e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc8:	3318      	adds	r3, #24
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fe fe0a 	bl	80089e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dd4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dde:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009de4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de8:	2200      	movs	r2, #0
 8009dea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df0:	2200      	movs	r2, #0
 8009df2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df8:	3354      	adds	r3, #84	@ 0x54
 8009dfa:	224c      	movs	r2, #76	@ 0x4c
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f001 ffb2 	bl	800bd68 <memset>
 8009e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e06:	4a0d      	ldr	r2, [pc, #52]	@ (8009e3c <prvInitialiseNewTask+0x144>)
 8009e08:	659a      	str	r2, [r3, #88]	@ 0x58
 8009e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8009e40 <prvInitialiseNewTask+0x148>)
 8009e0e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e12:	4a0c      	ldr	r2, [pc, #48]	@ (8009e44 <prvInitialiseNewTask+0x14c>)
 8009e14:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e16:	683a      	ldr	r2, [r7, #0]
 8009e18:	68f9      	ldr	r1, [r7, #12]
 8009e1a:	69b8      	ldr	r0, [r7, #24]
 8009e1c:	f001 fb62 	bl	800b4e4 <pxPortInitialiseStack>
 8009e20:	4602      	mov	r2, r0
 8009e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e24:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d002      	beq.n	8009e32 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e32:	bf00      	nop
 8009e34:	3720      	adds	r7, #32
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	20001f70 	.word	0x20001f70
 8009e40:	20001fd8 	.word	0x20001fd8
 8009e44:	20002040 	.word	0x20002040

08009e48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009e50:	f001 fc7a 	bl	800b748 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009e54:	4b2d      	ldr	r3, [pc, #180]	@ (8009f0c <prvAddNewTaskToReadyList+0xc4>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	4a2c      	ldr	r2, [pc, #176]	@ (8009f0c <prvAddNewTaskToReadyList+0xc4>)
 8009e5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009e5e:	4b2c      	ldr	r3, [pc, #176]	@ (8009f10 <prvAddNewTaskToReadyList+0xc8>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d109      	bne.n	8009e7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009e66:	4a2a      	ldr	r2, [pc, #168]	@ (8009f10 <prvAddNewTaskToReadyList+0xc8>)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009e6c:	4b27      	ldr	r3, [pc, #156]	@ (8009f0c <prvAddNewTaskToReadyList+0xc4>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d110      	bne.n	8009e96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009e74:	f000 fd36 	bl	800a8e4 <prvInitialiseTaskLists>
 8009e78:	e00d      	b.n	8009e96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009e7a:	4b26      	ldr	r3, [pc, #152]	@ (8009f14 <prvAddNewTaskToReadyList+0xcc>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d109      	bne.n	8009e96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e82:	4b23      	ldr	r3, [pc, #140]	@ (8009f10 <prvAddNewTaskToReadyList+0xc8>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d802      	bhi.n	8009e96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009e90:	4a1f      	ldr	r2, [pc, #124]	@ (8009f10 <prvAddNewTaskToReadyList+0xc8>)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009e96:	4b20      	ldr	r3, [pc, #128]	@ (8009f18 <prvAddNewTaskToReadyList+0xd0>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	4a1e      	ldr	r2, [pc, #120]	@ (8009f18 <prvAddNewTaskToReadyList+0xd0>)
 8009e9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8009f18 <prvAddNewTaskToReadyList+0xd0>)
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eac:	4b1b      	ldr	r3, [pc, #108]	@ (8009f1c <prvAddNewTaskToReadyList+0xd4>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d903      	bls.n	8009ebc <prvAddNewTaskToReadyList+0x74>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb8:	4a18      	ldr	r2, [pc, #96]	@ (8009f1c <prvAddNewTaskToReadyList+0xd4>)
 8009eba:	6013      	str	r3, [r2, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	4413      	add	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4a15      	ldr	r2, [pc, #84]	@ (8009f20 <prvAddNewTaskToReadyList+0xd8>)
 8009eca:	441a      	add	r2, r3
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	3304      	adds	r3, #4
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	4610      	mov	r0, r2
 8009ed4:	f7fe fd93 	bl	80089fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ed8:	f001 fc68 	bl	800b7ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009edc:	4b0d      	ldr	r3, [pc, #52]	@ (8009f14 <prvAddNewTaskToReadyList+0xcc>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00e      	beq.n	8009f02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8009f10 <prvAddNewTaskToReadyList+0xc8>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d207      	bcs.n	8009f02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8009f24 <prvAddNewTaskToReadyList+0xdc>)
 8009ef4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ef8:	601a      	str	r2, [r3, #0]
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f02:	bf00      	nop
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	20001238 	.word	0x20001238
 8009f10:	20000d64 	.word	0x20000d64
 8009f14:	20001244 	.word	0x20001244
 8009f18:	20001254 	.word	0x20001254
 8009f1c:	20001240 	.word	0x20001240
 8009f20:	20000d68 	.word	0x20000d68
 8009f24:	e000ed04 	.word	0xe000ed04

08009f28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009f30:	2300      	movs	r3, #0
 8009f32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d018      	beq.n	8009f6c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009f3a:	4b14      	ldr	r3, [pc, #80]	@ (8009f8c <vTaskDelay+0x64>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00b      	beq.n	8009f5a <vTaskDelay+0x32>
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	60bb      	str	r3, [r7, #8]
}
 8009f54:	bf00      	nop
 8009f56:	bf00      	nop
 8009f58:	e7fd      	b.n	8009f56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009f5a:	f000 f993 	bl	800a284 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f5e:	2100      	movs	r1, #0
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 ff11 	bl	800ad88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009f66:	f000 f99b 	bl	800a2a0 <xTaskResumeAll>
 8009f6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d107      	bne.n	8009f82 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009f72:	4b07      	ldr	r3, [pc, #28]	@ (8009f90 <vTaskDelay+0x68>)
 8009f74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f78:	601a      	str	r2, [r3, #0]
 8009f7a:	f3bf 8f4f 	dsb	sy
 8009f7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f82:	bf00      	nop
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	20001260 	.word	0x20001260
 8009f90:	e000ed04 	.word	0xe000ed04

08009f94 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009f9c:	f001 fbd4 	bl	800b748 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d102      	bne.n	8009fac <vTaskSuspend+0x18>
 8009fa6:	4b30      	ldr	r3, [pc, #192]	@ (800a068 <vTaskSuspend+0xd4>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	e000      	b.n	8009fae <vTaskSuspend+0x1a>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	3304      	adds	r3, #4
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7fe fd7f 	bl	8008ab8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d004      	beq.n	8009fcc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	3318      	adds	r3, #24
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7fe fd76 	bl	8008ab8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	3304      	adds	r3, #4
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	4826      	ldr	r0, [pc, #152]	@ (800a06c <vTaskSuspend+0xd8>)
 8009fd4:	f7fe fd13 	bl	80089fe <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d103      	bne.n	8009fec <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009fec:	f001 fbde 	bl	800b7ac <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009ff0:	4b1f      	ldr	r3, [pc, #124]	@ (800a070 <vTaskSuspend+0xdc>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d005      	beq.n	800a004 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009ff8:	f001 fba6 	bl	800b748 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009ffc:	f000 fd16 	bl	800aa2c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a000:	f001 fbd4 	bl	800b7ac <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a004:	4b18      	ldr	r3, [pc, #96]	@ (800a068 <vTaskSuspend+0xd4>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d128      	bne.n	800a060 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800a00e:	4b18      	ldr	r3, [pc, #96]	@ (800a070 <vTaskSuspend+0xdc>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d018      	beq.n	800a048 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a016:	4b17      	ldr	r3, [pc, #92]	@ (800a074 <vTaskSuspend+0xe0>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00b      	beq.n	800a036 <vTaskSuspend+0xa2>
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	60bb      	str	r3, [r7, #8]
}
 800a030:	bf00      	nop
 800a032:	bf00      	nop
 800a034:	e7fd      	b.n	800a032 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800a036:	4b10      	ldr	r3, [pc, #64]	@ (800a078 <vTaskSuspend+0xe4>)
 800a038:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a03c:	601a      	str	r2, [r3, #0]
 800a03e:	f3bf 8f4f 	dsb	sy
 800a042:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a046:	e00b      	b.n	800a060 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a048:	4b08      	ldr	r3, [pc, #32]	@ (800a06c <vTaskSuspend+0xd8>)
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	4b0b      	ldr	r3, [pc, #44]	@ (800a07c <vTaskSuspend+0xe8>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	429a      	cmp	r2, r3
 800a052:	d103      	bne.n	800a05c <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800a054:	4b04      	ldr	r3, [pc, #16]	@ (800a068 <vTaskSuspend+0xd4>)
 800a056:	2200      	movs	r2, #0
 800a058:	601a      	str	r2, [r3, #0]
	}
 800a05a:	e001      	b.n	800a060 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800a05c:	f000 fa88 	bl	800a570 <vTaskSwitchContext>
	}
 800a060:	bf00      	nop
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}
 800a068:	20000d64 	.word	0x20000d64
 800a06c:	20001224 	.word	0x20001224
 800a070:	20001244 	.word	0x20001244
 800a074:	20001260 	.word	0x20001260
 800a078:	e000ed04 	.word	0xe000ed04
 800a07c:	20001238 	.word	0x20001238

0800a080 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a080:	b480      	push	{r7}
 800a082:	b087      	sub	sp, #28
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a088:	2300      	movs	r3, #0
 800a08a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d10b      	bne.n	800a0ae <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800a096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a09a:	f383 8811 	msr	BASEPRI, r3
 800a09e:	f3bf 8f6f 	isb	sy
 800a0a2:	f3bf 8f4f 	dsb	sy
 800a0a6:	60fb      	str	r3, [r7, #12]
}
 800a0a8:	bf00      	nop
 800a0aa:	bf00      	nop
 800a0ac:	e7fd      	b.n	800a0aa <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	695b      	ldr	r3, [r3, #20]
 800a0b2:	4a0a      	ldr	r2, [pc, #40]	@ (800a0dc <prvTaskIsTaskSuspended+0x5c>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d10a      	bne.n	800a0ce <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0bc:	4a08      	ldr	r2, [pc, #32]	@ (800a0e0 <prvTaskIsTaskSuspended+0x60>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d005      	beq.n	800a0ce <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d101      	bne.n	800a0ce <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0ce:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	371c      	adds	r7, #28
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	20001224 	.word	0x20001224
 800a0e0:	200011f8 	.word	0x200011f8

0800a0e4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d10b      	bne.n	800a10e <vTaskResume+0x2a>
	__asm volatile
 800a0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0fa:	f383 8811 	msr	BASEPRI, r3
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	f3bf 8f4f 	dsb	sy
 800a106:	60bb      	str	r3, [r7, #8]
}
 800a108:	bf00      	nop
 800a10a:	bf00      	nop
 800a10c:	e7fd      	b.n	800a10a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800a10e:	4b21      	ldr	r3, [pc, #132]	@ (800a194 <vTaskResume+0xb0>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	429a      	cmp	r2, r3
 800a116:	d038      	beq.n	800a18a <vTaskResume+0xa6>
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d035      	beq.n	800a18a <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800a11e:	f001 fb13 	bl	800b748 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f7ff ffac 	bl	800a080 <prvTaskIsTaskSuspended>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d02b      	beq.n	800a186 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	3304      	adds	r3, #4
 800a132:	4618      	mov	r0, r3
 800a134:	f7fe fcc0 	bl	8008ab8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a13c:	4b16      	ldr	r3, [pc, #88]	@ (800a198 <vTaskResume+0xb4>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	429a      	cmp	r2, r3
 800a142:	d903      	bls.n	800a14c <vTaskResume+0x68>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a148:	4a13      	ldr	r2, [pc, #76]	@ (800a198 <vTaskResume+0xb4>)
 800a14a:	6013      	str	r3, [r2, #0]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a150:	4613      	mov	r3, r2
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	4413      	add	r3, r2
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	4a10      	ldr	r2, [pc, #64]	@ (800a19c <vTaskResume+0xb8>)
 800a15a:	441a      	add	r2, r3
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	3304      	adds	r3, #4
 800a160:	4619      	mov	r1, r3
 800a162:	4610      	mov	r0, r2
 800a164:	f7fe fc4b 	bl	80089fe <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a16c:	4b09      	ldr	r3, [pc, #36]	@ (800a194 <vTaskResume+0xb0>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a172:	429a      	cmp	r2, r3
 800a174:	d307      	bcc.n	800a186 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a176:	4b0a      	ldr	r3, [pc, #40]	@ (800a1a0 <vTaskResume+0xbc>)
 800a178:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a17c:	601a      	str	r2, [r3, #0]
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a186:	f001 fb11 	bl	800b7ac <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a18a:	bf00      	nop
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	20000d64 	.word	0x20000d64
 800a198:	20001240 	.word	0x20001240
 800a19c:	20000d68 	.word	0x20000d68
 800a1a0:	e000ed04 	.word	0xe000ed04

0800a1a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b08a      	sub	sp, #40	@ 0x28
 800a1a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a1b2:	463a      	mov	r2, r7
 800a1b4:	1d39      	adds	r1, r7, #4
 800a1b6:	f107 0308 	add.w	r3, r7, #8
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7fe fbbe 	bl	800893c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a1c0:	6839      	ldr	r1, [r7, #0]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	9202      	str	r2, [sp, #8]
 800a1c8:	9301      	str	r3, [sp, #4]
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	9300      	str	r3, [sp, #0]
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	460a      	mov	r2, r1
 800a1d2:	4924      	ldr	r1, [pc, #144]	@ (800a264 <vTaskStartScheduler+0xc0>)
 800a1d4:	4824      	ldr	r0, [pc, #144]	@ (800a268 <vTaskStartScheduler+0xc4>)
 800a1d6:	f7ff fce9 	bl	8009bac <xTaskCreateStatic>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	4a23      	ldr	r2, [pc, #140]	@ (800a26c <vTaskStartScheduler+0xc8>)
 800a1de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a1e0:	4b22      	ldr	r3, [pc, #136]	@ (800a26c <vTaskStartScheduler+0xc8>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d002      	beq.n	800a1ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	617b      	str	r3, [r7, #20]
 800a1ec:	e001      	b.n	800a1f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d102      	bne.n	800a1fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a1f8:	f000 fe1a 	bl	800ae30 <xTimerCreateTimerTask>
 800a1fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	2b01      	cmp	r3, #1
 800a202:	d11b      	bne.n	800a23c <vTaskStartScheduler+0x98>
	__asm volatile
 800a204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a208:	f383 8811 	msr	BASEPRI, r3
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	f3bf 8f4f 	dsb	sy
 800a214:	613b      	str	r3, [r7, #16]
}
 800a216:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a218:	4b15      	ldr	r3, [pc, #84]	@ (800a270 <vTaskStartScheduler+0xcc>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	3354      	adds	r3, #84	@ 0x54
 800a21e:	4a15      	ldr	r2, [pc, #84]	@ (800a274 <vTaskStartScheduler+0xd0>)
 800a220:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a222:	4b15      	ldr	r3, [pc, #84]	@ (800a278 <vTaskStartScheduler+0xd4>)
 800a224:	f04f 32ff 	mov.w	r2, #4294967295
 800a228:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a22a:	4b14      	ldr	r3, [pc, #80]	@ (800a27c <vTaskStartScheduler+0xd8>)
 800a22c:	2201      	movs	r2, #1
 800a22e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a230:	4b13      	ldr	r3, [pc, #76]	@ (800a280 <vTaskStartScheduler+0xdc>)
 800a232:	2200      	movs	r2, #0
 800a234:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a236:	f001 f9e3 	bl	800b600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a23a:	e00f      	b.n	800a25c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a242:	d10b      	bne.n	800a25c <vTaskStartScheduler+0xb8>
	__asm volatile
 800a244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a248:	f383 8811 	msr	BASEPRI, r3
 800a24c:	f3bf 8f6f 	isb	sy
 800a250:	f3bf 8f4f 	dsb	sy
 800a254:	60fb      	str	r3, [r7, #12]
}
 800a256:	bf00      	nop
 800a258:	bf00      	nop
 800a25a:	e7fd      	b.n	800a258 <vTaskStartScheduler+0xb4>
}
 800a25c:	bf00      	nop
 800a25e:	3718      	adds	r7, #24
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	0800bfbc 	.word	0x0800bfbc
 800a268:	0800a8b5 	.word	0x0800a8b5
 800a26c:	2000125c 	.word	0x2000125c
 800a270:	20000d64 	.word	0x20000d64
 800a274:	20000024 	.word	0x20000024
 800a278:	20001258 	.word	0x20001258
 800a27c:	20001244 	.word	0x20001244
 800a280:	2000123c 	.word	0x2000123c

0800a284 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a284:	b480      	push	{r7}
 800a286:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a288:	4b04      	ldr	r3, [pc, #16]	@ (800a29c <vTaskSuspendAll+0x18>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	3301      	adds	r3, #1
 800a28e:	4a03      	ldr	r2, [pc, #12]	@ (800a29c <vTaskSuspendAll+0x18>)
 800a290:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a292:	bf00      	nop
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr
 800a29c:	20001260 	.word	0x20001260

0800a2a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a2ae:	4b42      	ldr	r3, [pc, #264]	@ (800a3b8 <xTaskResumeAll+0x118>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10b      	bne.n	800a2ce <xTaskResumeAll+0x2e>
	__asm volatile
 800a2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ba:	f383 8811 	msr	BASEPRI, r3
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f3bf 8f4f 	dsb	sy
 800a2c6:	603b      	str	r3, [r7, #0]
}
 800a2c8:	bf00      	nop
 800a2ca:	bf00      	nop
 800a2cc:	e7fd      	b.n	800a2ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a2ce:	f001 fa3b 	bl	800b748 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a2d2:	4b39      	ldr	r3, [pc, #228]	@ (800a3b8 <xTaskResumeAll+0x118>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	4a37      	ldr	r2, [pc, #220]	@ (800a3b8 <xTaskResumeAll+0x118>)
 800a2da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2dc:	4b36      	ldr	r3, [pc, #216]	@ (800a3b8 <xTaskResumeAll+0x118>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d162      	bne.n	800a3aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a2e4:	4b35      	ldr	r3, [pc, #212]	@ (800a3bc <xTaskResumeAll+0x11c>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d05e      	beq.n	800a3aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a2ec:	e02f      	b.n	800a34e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2ee:	4b34      	ldr	r3, [pc, #208]	@ (800a3c0 <xTaskResumeAll+0x120>)
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	3318      	adds	r3, #24
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fe fbdc 	bl	8008ab8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	3304      	adds	r3, #4
 800a304:	4618      	mov	r0, r3
 800a306:	f7fe fbd7 	bl	8008ab8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a30e:	4b2d      	ldr	r3, [pc, #180]	@ (800a3c4 <xTaskResumeAll+0x124>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	429a      	cmp	r2, r3
 800a314:	d903      	bls.n	800a31e <xTaskResumeAll+0x7e>
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a31a:	4a2a      	ldr	r2, [pc, #168]	@ (800a3c4 <xTaskResumeAll+0x124>)
 800a31c:	6013      	str	r3, [r2, #0]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a322:	4613      	mov	r3, r2
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	4413      	add	r3, r2
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	4a27      	ldr	r2, [pc, #156]	@ (800a3c8 <xTaskResumeAll+0x128>)
 800a32c:	441a      	add	r2, r3
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	3304      	adds	r3, #4
 800a332:	4619      	mov	r1, r3
 800a334:	4610      	mov	r0, r2
 800a336:	f7fe fb62 	bl	80089fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a33e:	4b23      	ldr	r3, [pc, #140]	@ (800a3cc <xTaskResumeAll+0x12c>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a344:	429a      	cmp	r2, r3
 800a346:	d302      	bcc.n	800a34e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a348:	4b21      	ldr	r3, [pc, #132]	@ (800a3d0 <xTaskResumeAll+0x130>)
 800a34a:	2201      	movs	r2, #1
 800a34c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a34e:	4b1c      	ldr	r3, [pc, #112]	@ (800a3c0 <xTaskResumeAll+0x120>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d1cb      	bne.n	800a2ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d001      	beq.n	800a360 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a35c:	f000 fb66 	bl	800aa2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a360:	4b1c      	ldr	r3, [pc, #112]	@ (800a3d4 <xTaskResumeAll+0x134>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d010      	beq.n	800a38e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a36c:	f000 f846 	bl	800a3fc <xTaskIncrementTick>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d002      	beq.n	800a37c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a376:	4b16      	ldr	r3, [pc, #88]	@ (800a3d0 <xTaskResumeAll+0x130>)
 800a378:	2201      	movs	r2, #1
 800a37a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	3b01      	subs	r3, #1
 800a380:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d1f1      	bne.n	800a36c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a388:	4b12      	ldr	r3, [pc, #72]	@ (800a3d4 <xTaskResumeAll+0x134>)
 800a38a:	2200      	movs	r2, #0
 800a38c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a38e:	4b10      	ldr	r3, [pc, #64]	@ (800a3d0 <xTaskResumeAll+0x130>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d009      	beq.n	800a3aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a396:	2301      	movs	r3, #1
 800a398:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a39a:	4b0f      	ldr	r3, [pc, #60]	@ (800a3d8 <xTaskResumeAll+0x138>)
 800a39c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3a0:	601a      	str	r2, [r3, #0]
 800a3a2:	f3bf 8f4f 	dsb	sy
 800a3a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3aa:	f001 f9ff 	bl	800b7ac <vPortExitCritical>

	return xAlreadyYielded;
 800a3ae:	68bb      	ldr	r3, [r7, #8]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	20001260 	.word	0x20001260
 800a3bc:	20001238 	.word	0x20001238
 800a3c0:	200011f8 	.word	0x200011f8
 800a3c4:	20001240 	.word	0x20001240
 800a3c8:	20000d68 	.word	0x20000d68
 800a3cc:	20000d64 	.word	0x20000d64
 800a3d0:	2000124c 	.word	0x2000124c
 800a3d4:	20001248 	.word	0x20001248
 800a3d8:	e000ed04 	.word	0xe000ed04

0800a3dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a3e2:	4b05      	ldr	r3, [pc, #20]	@ (800a3f8 <xTaskGetTickCount+0x1c>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a3e8:	687b      	ldr	r3, [r7, #4]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	370c      	adds	r7, #12
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	2000123c 	.word	0x2000123c

0800a3fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b086      	sub	sp, #24
 800a400:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a402:	2300      	movs	r3, #0
 800a404:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a406:	4b4f      	ldr	r3, [pc, #316]	@ (800a544 <xTaskIncrementTick+0x148>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	f040 8090 	bne.w	800a530 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a410:	4b4d      	ldr	r3, [pc, #308]	@ (800a548 <xTaskIncrementTick+0x14c>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	3301      	adds	r3, #1
 800a416:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a418:	4a4b      	ldr	r2, [pc, #300]	@ (800a548 <xTaskIncrementTick+0x14c>)
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d121      	bne.n	800a468 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a424:	4b49      	ldr	r3, [pc, #292]	@ (800a54c <xTaskIncrementTick+0x150>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00b      	beq.n	800a446 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	603b      	str	r3, [r7, #0]
}
 800a440:	bf00      	nop
 800a442:	bf00      	nop
 800a444:	e7fd      	b.n	800a442 <xTaskIncrementTick+0x46>
 800a446:	4b41      	ldr	r3, [pc, #260]	@ (800a54c <xTaskIncrementTick+0x150>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	60fb      	str	r3, [r7, #12]
 800a44c:	4b40      	ldr	r3, [pc, #256]	@ (800a550 <xTaskIncrementTick+0x154>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a3e      	ldr	r2, [pc, #248]	@ (800a54c <xTaskIncrementTick+0x150>)
 800a452:	6013      	str	r3, [r2, #0]
 800a454:	4a3e      	ldr	r2, [pc, #248]	@ (800a550 <xTaskIncrementTick+0x154>)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6013      	str	r3, [r2, #0]
 800a45a:	4b3e      	ldr	r3, [pc, #248]	@ (800a554 <xTaskIncrementTick+0x158>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	3301      	adds	r3, #1
 800a460:	4a3c      	ldr	r2, [pc, #240]	@ (800a554 <xTaskIncrementTick+0x158>)
 800a462:	6013      	str	r3, [r2, #0]
 800a464:	f000 fae2 	bl	800aa2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a468:	4b3b      	ldr	r3, [pc, #236]	@ (800a558 <xTaskIncrementTick+0x15c>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d349      	bcc.n	800a506 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a472:	4b36      	ldr	r3, [pc, #216]	@ (800a54c <xTaskIncrementTick+0x150>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d104      	bne.n	800a486 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a47c:	4b36      	ldr	r3, [pc, #216]	@ (800a558 <xTaskIncrementTick+0x15c>)
 800a47e:	f04f 32ff 	mov.w	r2, #4294967295
 800a482:	601a      	str	r2, [r3, #0]
					break;
 800a484:	e03f      	b.n	800a506 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a486:	4b31      	ldr	r3, [pc, #196]	@ (800a54c <xTaskIncrementTick+0x150>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a496:	693a      	ldr	r2, [r7, #16]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d203      	bcs.n	800a4a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a49e:	4a2e      	ldr	r2, [pc, #184]	@ (800a558 <xTaskIncrementTick+0x15c>)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a4a4:	e02f      	b.n	800a506 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	3304      	adds	r3, #4
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7fe fb04 	bl	8008ab8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d004      	beq.n	800a4c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	3318      	adds	r3, #24
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7fe fafb 	bl	8008ab8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4c6:	4b25      	ldr	r3, [pc, #148]	@ (800a55c <xTaskIncrementTick+0x160>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d903      	bls.n	800a4d6 <xTaskIncrementTick+0xda>
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4d2:	4a22      	ldr	r2, [pc, #136]	@ (800a55c <xTaskIncrementTick+0x160>)
 800a4d4:	6013      	str	r3, [r2, #0]
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4da:	4613      	mov	r3, r2
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	4413      	add	r3, r2
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	4a1f      	ldr	r2, [pc, #124]	@ (800a560 <xTaskIncrementTick+0x164>)
 800a4e4:	441a      	add	r2, r3
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	3304      	adds	r3, #4
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	4610      	mov	r0, r2
 800a4ee:	f7fe fa86 	bl	80089fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4f6:	4b1b      	ldr	r3, [pc, #108]	@ (800a564 <xTaskIncrementTick+0x168>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d3b8      	bcc.n	800a472 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a500:	2301      	movs	r3, #1
 800a502:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a504:	e7b5      	b.n	800a472 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a506:	4b17      	ldr	r3, [pc, #92]	@ (800a564 <xTaskIncrementTick+0x168>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a50c:	4914      	ldr	r1, [pc, #80]	@ (800a560 <xTaskIncrementTick+0x164>)
 800a50e:	4613      	mov	r3, r2
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	4413      	add	r3, r2
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	440b      	add	r3, r1
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d901      	bls.n	800a522 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a51e:	2301      	movs	r3, #1
 800a520:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a522:	4b11      	ldr	r3, [pc, #68]	@ (800a568 <xTaskIncrementTick+0x16c>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d007      	beq.n	800a53a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a52a:	2301      	movs	r3, #1
 800a52c:	617b      	str	r3, [r7, #20]
 800a52e:	e004      	b.n	800a53a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a530:	4b0e      	ldr	r3, [pc, #56]	@ (800a56c <xTaskIncrementTick+0x170>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	3301      	adds	r3, #1
 800a536:	4a0d      	ldr	r2, [pc, #52]	@ (800a56c <xTaskIncrementTick+0x170>)
 800a538:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a53a:	697b      	ldr	r3, [r7, #20]
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3718      	adds	r7, #24
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	20001260 	.word	0x20001260
 800a548:	2000123c 	.word	0x2000123c
 800a54c:	200011f0 	.word	0x200011f0
 800a550:	200011f4 	.word	0x200011f4
 800a554:	20001250 	.word	0x20001250
 800a558:	20001258 	.word	0x20001258
 800a55c:	20001240 	.word	0x20001240
 800a560:	20000d68 	.word	0x20000d68
 800a564:	20000d64 	.word	0x20000d64
 800a568:	2000124c 	.word	0x2000124c
 800a56c:	20001248 	.word	0x20001248

0800a570 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a576:	4b2b      	ldr	r3, [pc, #172]	@ (800a624 <vTaskSwitchContext+0xb4>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d003      	beq.n	800a586 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a57e:	4b2a      	ldr	r3, [pc, #168]	@ (800a628 <vTaskSwitchContext+0xb8>)
 800a580:	2201      	movs	r2, #1
 800a582:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a584:	e047      	b.n	800a616 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a586:	4b28      	ldr	r3, [pc, #160]	@ (800a628 <vTaskSwitchContext+0xb8>)
 800a588:	2200      	movs	r2, #0
 800a58a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a58c:	4b27      	ldr	r3, [pc, #156]	@ (800a62c <vTaskSwitchContext+0xbc>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	60fb      	str	r3, [r7, #12]
 800a592:	e011      	b.n	800a5b8 <vTaskSwitchContext+0x48>
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d10b      	bne.n	800a5b2 <vTaskSwitchContext+0x42>
	__asm volatile
 800a59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a59e:	f383 8811 	msr	BASEPRI, r3
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	f3bf 8f4f 	dsb	sy
 800a5aa:	607b      	str	r3, [r7, #4]
}
 800a5ac:	bf00      	nop
 800a5ae:	bf00      	nop
 800a5b0:	e7fd      	b.n	800a5ae <vTaskSwitchContext+0x3e>
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	60fb      	str	r3, [r7, #12]
 800a5b8:	491d      	ldr	r1, [pc, #116]	@ (800a630 <vTaskSwitchContext+0xc0>)
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	4613      	mov	r3, r2
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	4413      	add	r3, r2
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	440b      	add	r3, r1
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d0e3      	beq.n	800a594 <vTaskSwitchContext+0x24>
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	4413      	add	r3, r2
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	4a16      	ldr	r2, [pc, #88]	@ (800a630 <vTaskSwitchContext+0xc0>)
 800a5d8:	4413      	add	r3, r2
 800a5da:	60bb      	str	r3, [r7, #8]
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	685a      	ldr	r2, [r3, #4]
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	605a      	str	r2, [r3, #4]
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	685a      	ldr	r2, [r3, #4]
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	3308      	adds	r3, #8
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d104      	bne.n	800a5fc <vTaskSwitchContext+0x8c>
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	685a      	ldr	r2, [r3, #4]
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	605a      	str	r2, [r3, #4]
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	4a0c      	ldr	r2, [pc, #48]	@ (800a634 <vTaskSwitchContext+0xc4>)
 800a604:	6013      	str	r3, [r2, #0]
 800a606:	4a09      	ldr	r2, [pc, #36]	@ (800a62c <vTaskSwitchContext+0xbc>)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a60c:	4b09      	ldr	r3, [pc, #36]	@ (800a634 <vTaskSwitchContext+0xc4>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	3354      	adds	r3, #84	@ 0x54
 800a612:	4a09      	ldr	r2, [pc, #36]	@ (800a638 <vTaskSwitchContext+0xc8>)
 800a614:	6013      	str	r3, [r2, #0]
}
 800a616:	bf00      	nop
 800a618:	3714      	adds	r7, #20
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	20001260 	.word	0x20001260
 800a628:	2000124c 	.word	0x2000124c
 800a62c:	20001240 	.word	0x20001240
 800a630:	20000d68 	.word	0x20000d68
 800a634:	20000d64 	.word	0x20000d64
 800a638:	20000024 	.word	0x20000024

0800a63c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d10b      	bne.n	800a664 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a64c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	60fb      	str	r3, [r7, #12]
}
 800a65e:	bf00      	nop
 800a660:	bf00      	nop
 800a662:	e7fd      	b.n	800a660 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a664:	4b07      	ldr	r3, [pc, #28]	@ (800a684 <vTaskPlaceOnEventList+0x48>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	3318      	adds	r3, #24
 800a66a:	4619      	mov	r1, r3
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f7fe f9ea 	bl	8008a46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a672:	2101      	movs	r1, #1
 800a674:	6838      	ldr	r0, [r7, #0]
 800a676:	f000 fb87 	bl	800ad88 <prvAddCurrentTaskToDelayedList>
}
 800a67a:	bf00      	nop
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	20000d64 	.word	0x20000d64

0800a688 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b086      	sub	sp, #24
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d10b      	bne.n	800a6b2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a69e:	f383 8811 	msr	BASEPRI, r3
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	f3bf 8f4f 	dsb	sy
 800a6aa:	617b      	str	r3, [r7, #20]
}
 800a6ac:	bf00      	nop
 800a6ae:	bf00      	nop
 800a6b0:	e7fd      	b.n	800a6ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a6dc <vTaskPlaceOnEventListRestricted+0x54>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	3318      	adds	r3, #24
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f7fe f99f 	bl	80089fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d002      	beq.n	800a6cc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a6c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a6cc:	6879      	ldr	r1, [r7, #4]
 800a6ce:	68b8      	ldr	r0, [r7, #8]
 800a6d0:	f000 fb5a 	bl	800ad88 <prvAddCurrentTaskToDelayedList>
	}
 800a6d4:	bf00      	nop
 800a6d6:	3718      	adds	r7, #24
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	20000d64 	.word	0x20000d64

0800a6e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b086      	sub	sp, #24
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	68db      	ldr	r3, [r3, #12]
 800a6ec:	68db      	ldr	r3, [r3, #12]
 800a6ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d10b      	bne.n	800a70e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6fa:	f383 8811 	msr	BASEPRI, r3
 800a6fe:	f3bf 8f6f 	isb	sy
 800a702:	f3bf 8f4f 	dsb	sy
 800a706:	60fb      	str	r3, [r7, #12]
}
 800a708:	bf00      	nop
 800a70a:	bf00      	nop
 800a70c:	e7fd      	b.n	800a70a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	3318      	adds	r3, #24
 800a712:	4618      	mov	r0, r3
 800a714:	f7fe f9d0 	bl	8008ab8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a718:	4b1d      	ldr	r3, [pc, #116]	@ (800a790 <xTaskRemoveFromEventList+0xb0>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d11d      	bne.n	800a75c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	3304      	adds	r3, #4
 800a724:	4618      	mov	r0, r3
 800a726:	f7fe f9c7 	bl	8008ab8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a72e:	4b19      	ldr	r3, [pc, #100]	@ (800a794 <xTaskRemoveFromEventList+0xb4>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	429a      	cmp	r2, r3
 800a734:	d903      	bls.n	800a73e <xTaskRemoveFromEventList+0x5e>
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a73a:	4a16      	ldr	r2, [pc, #88]	@ (800a794 <xTaskRemoveFromEventList+0xb4>)
 800a73c:	6013      	str	r3, [r2, #0]
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a742:	4613      	mov	r3, r2
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	4413      	add	r3, r2
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	4a13      	ldr	r2, [pc, #76]	@ (800a798 <xTaskRemoveFromEventList+0xb8>)
 800a74c:	441a      	add	r2, r3
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	3304      	adds	r3, #4
 800a752:	4619      	mov	r1, r3
 800a754:	4610      	mov	r0, r2
 800a756:	f7fe f952 	bl	80089fe <vListInsertEnd>
 800a75a:	e005      	b.n	800a768 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	3318      	adds	r3, #24
 800a760:	4619      	mov	r1, r3
 800a762:	480e      	ldr	r0, [pc, #56]	@ (800a79c <xTaskRemoveFromEventList+0xbc>)
 800a764:	f7fe f94b 	bl	80089fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a76c:	4b0c      	ldr	r3, [pc, #48]	@ (800a7a0 <xTaskRemoveFromEventList+0xc0>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a772:	429a      	cmp	r2, r3
 800a774:	d905      	bls.n	800a782 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a776:	2301      	movs	r3, #1
 800a778:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a77a:	4b0a      	ldr	r3, [pc, #40]	@ (800a7a4 <xTaskRemoveFromEventList+0xc4>)
 800a77c:	2201      	movs	r2, #1
 800a77e:	601a      	str	r2, [r3, #0]
 800a780:	e001      	b.n	800a786 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a782:	2300      	movs	r3, #0
 800a784:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a786:	697b      	ldr	r3, [r7, #20]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3718      	adds	r7, #24
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	20001260 	.word	0x20001260
 800a794:	20001240 	.word	0x20001240
 800a798:	20000d68 	.word	0x20000d68
 800a79c:	200011f8 	.word	0x200011f8
 800a7a0:	20000d64 	.word	0x20000d64
 800a7a4:	2000124c 	.word	0x2000124c

0800a7a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a7b0:	4b06      	ldr	r3, [pc, #24]	@ (800a7cc <vTaskInternalSetTimeOutState+0x24>)
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a7b8:	4b05      	ldr	r3, [pc, #20]	@ (800a7d0 <vTaskInternalSetTimeOutState+0x28>)
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	605a      	str	r2, [r3, #4]
}
 800a7c0:	bf00      	nop
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr
 800a7cc:	20001250 	.word	0x20001250
 800a7d0:	2000123c 	.word	0x2000123c

0800a7d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b088      	sub	sp, #32
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d10b      	bne.n	800a7fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7e8:	f383 8811 	msr	BASEPRI, r3
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	613b      	str	r3, [r7, #16]
}
 800a7f6:	bf00      	nop
 800a7f8:	bf00      	nop
 800a7fa:	e7fd      	b.n	800a7f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d10b      	bne.n	800a81a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a806:	f383 8811 	msr	BASEPRI, r3
 800a80a:	f3bf 8f6f 	isb	sy
 800a80e:	f3bf 8f4f 	dsb	sy
 800a812:	60fb      	str	r3, [r7, #12]
}
 800a814:	bf00      	nop
 800a816:	bf00      	nop
 800a818:	e7fd      	b.n	800a816 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a81a:	f000 ff95 	bl	800b748 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a81e:	4b1d      	ldr	r3, [pc, #116]	@ (800a894 <xTaskCheckForTimeOut+0xc0>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	69ba      	ldr	r2, [r7, #24]
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a836:	d102      	bne.n	800a83e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a838:	2300      	movs	r3, #0
 800a83a:	61fb      	str	r3, [r7, #28]
 800a83c:	e023      	b.n	800a886 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	4b15      	ldr	r3, [pc, #84]	@ (800a898 <xTaskCheckForTimeOut+0xc4>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	429a      	cmp	r2, r3
 800a848:	d007      	beq.n	800a85a <xTaskCheckForTimeOut+0x86>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	69ba      	ldr	r2, [r7, #24]
 800a850:	429a      	cmp	r2, r3
 800a852:	d302      	bcc.n	800a85a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a854:	2301      	movs	r3, #1
 800a856:	61fb      	str	r3, [r7, #28]
 800a858:	e015      	b.n	800a886 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	697a      	ldr	r2, [r7, #20]
 800a860:	429a      	cmp	r2, r3
 800a862:	d20b      	bcs.n	800a87c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	1ad2      	subs	r2, r2, r3
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f7ff ff99 	bl	800a7a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a876:	2300      	movs	r3, #0
 800a878:	61fb      	str	r3, [r7, #28]
 800a87a:	e004      	b.n	800a886 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	2200      	movs	r2, #0
 800a880:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a882:	2301      	movs	r3, #1
 800a884:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a886:	f000 ff91 	bl	800b7ac <vPortExitCritical>

	return xReturn;
 800a88a:	69fb      	ldr	r3, [r7, #28]
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3720      	adds	r7, #32
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	2000123c 	.word	0x2000123c
 800a898:	20001250 	.word	0x20001250

0800a89c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a89c:	b480      	push	{r7}
 800a89e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a8a0:	4b03      	ldr	r3, [pc, #12]	@ (800a8b0 <vTaskMissedYield+0x14>)
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	601a      	str	r2, [r3, #0]
}
 800a8a6:	bf00      	nop
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr
 800a8b0:	2000124c 	.word	0x2000124c

0800a8b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a8bc:	f000 f852 	bl	800a964 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a8c0:	4b06      	ldr	r3, [pc, #24]	@ (800a8dc <prvIdleTask+0x28>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d9f9      	bls.n	800a8bc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a8c8:	4b05      	ldr	r3, [pc, #20]	@ (800a8e0 <prvIdleTask+0x2c>)
 800a8ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8ce:	601a      	str	r2, [r3, #0]
 800a8d0:	f3bf 8f4f 	dsb	sy
 800a8d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a8d8:	e7f0      	b.n	800a8bc <prvIdleTask+0x8>
 800a8da:	bf00      	nop
 800a8dc:	20000d68 	.word	0x20000d68
 800a8e0:	e000ed04 	.word	0xe000ed04

0800a8e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	607b      	str	r3, [r7, #4]
 800a8ee:	e00c      	b.n	800a90a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	4413      	add	r3, r2
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	4a12      	ldr	r2, [pc, #72]	@ (800a944 <prvInitialiseTaskLists+0x60>)
 800a8fc:	4413      	add	r3, r2
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7fe f850 	bl	80089a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	3301      	adds	r3, #1
 800a908:	607b      	str	r3, [r7, #4]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2b37      	cmp	r3, #55	@ 0x37
 800a90e:	d9ef      	bls.n	800a8f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a910:	480d      	ldr	r0, [pc, #52]	@ (800a948 <prvInitialiseTaskLists+0x64>)
 800a912:	f7fe f847 	bl	80089a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a916:	480d      	ldr	r0, [pc, #52]	@ (800a94c <prvInitialiseTaskLists+0x68>)
 800a918:	f7fe f844 	bl	80089a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a91c:	480c      	ldr	r0, [pc, #48]	@ (800a950 <prvInitialiseTaskLists+0x6c>)
 800a91e:	f7fe f841 	bl	80089a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a922:	480c      	ldr	r0, [pc, #48]	@ (800a954 <prvInitialiseTaskLists+0x70>)
 800a924:	f7fe f83e 	bl	80089a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a928:	480b      	ldr	r0, [pc, #44]	@ (800a958 <prvInitialiseTaskLists+0x74>)
 800a92a:	f7fe f83b 	bl	80089a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a92e:	4b0b      	ldr	r3, [pc, #44]	@ (800a95c <prvInitialiseTaskLists+0x78>)
 800a930:	4a05      	ldr	r2, [pc, #20]	@ (800a948 <prvInitialiseTaskLists+0x64>)
 800a932:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a934:	4b0a      	ldr	r3, [pc, #40]	@ (800a960 <prvInitialiseTaskLists+0x7c>)
 800a936:	4a05      	ldr	r2, [pc, #20]	@ (800a94c <prvInitialiseTaskLists+0x68>)
 800a938:	601a      	str	r2, [r3, #0]
}
 800a93a:	bf00      	nop
 800a93c:	3708      	adds	r7, #8
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	20000d68 	.word	0x20000d68
 800a948:	200011c8 	.word	0x200011c8
 800a94c:	200011dc 	.word	0x200011dc
 800a950:	200011f8 	.word	0x200011f8
 800a954:	2000120c 	.word	0x2000120c
 800a958:	20001224 	.word	0x20001224
 800a95c:	200011f0 	.word	0x200011f0
 800a960:	200011f4 	.word	0x200011f4

0800a964 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a96a:	e019      	b.n	800a9a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a96c:	f000 feec 	bl	800b748 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a970:	4b10      	ldr	r3, [pc, #64]	@ (800a9b4 <prvCheckTasksWaitingTermination+0x50>)
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	3304      	adds	r3, #4
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7fe f89b 	bl	8008ab8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a982:	4b0d      	ldr	r3, [pc, #52]	@ (800a9b8 <prvCheckTasksWaitingTermination+0x54>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	3b01      	subs	r3, #1
 800a988:	4a0b      	ldr	r2, [pc, #44]	@ (800a9b8 <prvCheckTasksWaitingTermination+0x54>)
 800a98a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a98c:	4b0b      	ldr	r3, [pc, #44]	@ (800a9bc <prvCheckTasksWaitingTermination+0x58>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	3b01      	subs	r3, #1
 800a992:	4a0a      	ldr	r2, [pc, #40]	@ (800a9bc <prvCheckTasksWaitingTermination+0x58>)
 800a994:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a996:	f000 ff09 	bl	800b7ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 f810 	bl	800a9c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9a0:	4b06      	ldr	r3, [pc, #24]	@ (800a9bc <prvCheckTasksWaitingTermination+0x58>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d1e1      	bne.n	800a96c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a9a8:	bf00      	nop
 800a9aa:	bf00      	nop
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	2000120c 	.word	0x2000120c
 800a9b8:	20001238 	.word	0x20001238
 800a9bc:	20001220 	.word	0x20001220

0800a9c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	3354      	adds	r3, #84	@ 0x54
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f001 f9d3 	bl	800bd78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d108      	bne.n	800a9ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f001 f8a1 	bl	800bb28 <vPortFree>
				vPortFree( pxTCB );
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f001 f89e 	bl	800bb28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a9ec:	e019      	b.n	800aa22 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d103      	bne.n	800aa00 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f001 f895 	bl	800bb28 <vPortFree>
	}
 800a9fe:	e010      	b.n	800aa22 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800aa06:	2b02      	cmp	r3, #2
 800aa08:	d00b      	beq.n	800aa22 <prvDeleteTCB+0x62>
	__asm volatile
 800aa0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa0e:	f383 8811 	msr	BASEPRI, r3
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	f3bf 8f4f 	dsb	sy
 800aa1a:	60fb      	str	r3, [r7, #12]
}
 800aa1c:	bf00      	nop
 800aa1e:	bf00      	nop
 800aa20:	e7fd      	b.n	800aa1e <prvDeleteTCB+0x5e>
	}
 800aa22:	bf00      	nop
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
	...

0800aa2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa32:	4b0c      	ldr	r3, [pc, #48]	@ (800aa64 <prvResetNextTaskUnblockTime+0x38>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d104      	bne.n	800aa46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa3c:	4b0a      	ldr	r3, [pc, #40]	@ (800aa68 <prvResetNextTaskUnblockTime+0x3c>)
 800aa3e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa44:	e008      	b.n	800aa58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa46:	4b07      	ldr	r3, [pc, #28]	@ (800aa64 <prvResetNextTaskUnblockTime+0x38>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	4a04      	ldr	r2, [pc, #16]	@ (800aa68 <prvResetNextTaskUnblockTime+0x3c>)
 800aa56:	6013      	str	r3, [r2, #0]
}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr
 800aa64:	200011f0 	.word	0x200011f0
 800aa68:	20001258 	.word	0x20001258

0800aa6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa72:	4b0b      	ldr	r3, [pc, #44]	@ (800aaa0 <xTaskGetSchedulerState+0x34>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d102      	bne.n	800aa80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	607b      	str	r3, [r7, #4]
 800aa7e:	e008      	b.n	800aa92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa80:	4b08      	ldr	r3, [pc, #32]	@ (800aaa4 <xTaskGetSchedulerState+0x38>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d102      	bne.n	800aa8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aa88:	2302      	movs	r3, #2
 800aa8a:	607b      	str	r3, [r7, #4]
 800aa8c:	e001      	b.n	800aa92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aa92:	687b      	ldr	r3, [r7, #4]
	}
 800aa94:	4618      	mov	r0, r3
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr
 800aaa0:	20001244 	.word	0x20001244
 800aaa4:	20001260 	.word	0x20001260

0800aaa8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800aab4:	2300      	movs	r3, #0
 800aab6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d051      	beq.n	800ab62 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aac2:	4b2a      	ldr	r3, [pc, #168]	@ (800ab6c <xTaskPriorityInherit+0xc4>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d241      	bcs.n	800ab50 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	699b      	ldr	r3, [r3, #24]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	db06      	blt.n	800aae2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aad4:	4b25      	ldr	r3, [pc, #148]	@ (800ab6c <xTaskPriorityInherit+0xc4>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aada:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	6959      	ldr	r1, [r3, #20]
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaea:	4613      	mov	r3, r2
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	4413      	add	r3, r2
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	4a1f      	ldr	r2, [pc, #124]	@ (800ab70 <xTaskPriorityInherit+0xc8>)
 800aaf4:	4413      	add	r3, r2
 800aaf6:	4299      	cmp	r1, r3
 800aaf8:	d122      	bne.n	800ab40 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	3304      	adds	r3, #4
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7fd ffda 	bl	8008ab8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab04:	4b19      	ldr	r3, [pc, #100]	@ (800ab6c <xTaskPriorityInherit+0xc4>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab12:	4b18      	ldr	r3, [pc, #96]	@ (800ab74 <xTaskPriorityInherit+0xcc>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d903      	bls.n	800ab22 <xTaskPriorityInherit+0x7a>
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab1e:	4a15      	ldr	r2, [pc, #84]	@ (800ab74 <xTaskPriorityInherit+0xcc>)
 800ab20:	6013      	str	r3, [r2, #0]
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab26:	4613      	mov	r3, r2
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	4413      	add	r3, r2
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	4a10      	ldr	r2, [pc, #64]	@ (800ab70 <xTaskPriorityInherit+0xc8>)
 800ab30:	441a      	add	r2, r3
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	3304      	adds	r3, #4
 800ab36:	4619      	mov	r1, r3
 800ab38:	4610      	mov	r0, r2
 800ab3a:	f7fd ff60 	bl	80089fe <vListInsertEnd>
 800ab3e:	e004      	b.n	800ab4a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab40:	4b0a      	ldr	r3, [pc, #40]	@ (800ab6c <xTaskPriorityInherit+0xc4>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	60fb      	str	r3, [r7, #12]
 800ab4e:	e008      	b.n	800ab62 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ab54:	4b05      	ldr	r3, [pc, #20]	@ (800ab6c <xTaskPriorityInherit+0xc4>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d201      	bcs.n	800ab62 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab62:	68fb      	ldr	r3, [r7, #12]
	}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	20000d64 	.word	0x20000d64
 800ab70:	20000d68 	.word	0x20000d68
 800ab74:	20001240 	.word	0x20001240

0800ab78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b086      	sub	sp, #24
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ab84:	2300      	movs	r3, #0
 800ab86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d058      	beq.n	800ac40 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ab8e:	4b2f      	ldr	r3, [pc, #188]	@ (800ac4c <xTaskPriorityDisinherit+0xd4>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	693a      	ldr	r2, [r7, #16]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d00b      	beq.n	800abb0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ab98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab9c:	f383 8811 	msr	BASEPRI, r3
 800aba0:	f3bf 8f6f 	isb	sy
 800aba4:	f3bf 8f4f 	dsb	sy
 800aba8:	60fb      	str	r3, [r7, #12]
}
 800abaa:	bf00      	nop
 800abac:	bf00      	nop
 800abae:	e7fd      	b.n	800abac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d10b      	bne.n	800abd0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800abb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abbc:	f383 8811 	msr	BASEPRI, r3
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	f3bf 8f4f 	dsb	sy
 800abc8:	60bb      	str	r3, [r7, #8]
}
 800abca:	bf00      	nop
 800abcc:	bf00      	nop
 800abce:	e7fd      	b.n	800abcc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abd4:	1e5a      	subs	r2, r3, #1
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d02c      	beq.n	800ac40 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abea:	2b00      	cmp	r3, #0
 800abec:	d128      	bne.n	800ac40 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	3304      	adds	r3, #4
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7fd ff60 	bl	8008ab8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac10:	4b0f      	ldr	r3, [pc, #60]	@ (800ac50 <xTaskPriorityDisinherit+0xd8>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d903      	bls.n	800ac20 <xTaskPriorityDisinherit+0xa8>
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac1c:	4a0c      	ldr	r2, [pc, #48]	@ (800ac50 <xTaskPriorityDisinherit+0xd8>)
 800ac1e:	6013      	str	r3, [r2, #0]
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac24:	4613      	mov	r3, r2
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4413      	add	r3, r2
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	4a09      	ldr	r2, [pc, #36]	@ (800ac54 <xTaskPriorityDisinherit+0xdc>)
 800ac2e:	441a      	add	r2, r3
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	3304      	adds	r3, #4
 800ac34:	4619      	mov	r1, r3
 800ac36:	4610      	mov	r0, r2
 800ac38:	f7fd fee1 	bl	80089fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac40:	697b      	ldr	r3, [r7, #20]
	}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3718      	adds	r7, #24
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	20000d64 	.word	0x20000d64
 800ac50:	20001240 	.word	0x20001240
 800ac54:	20000d68 	.word	0x20000d68

0800ac58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b088      	sub	sp, #32
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ac66:	2301      	movs	r3, #1
 800ac68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d06c      	beq.n	800ad4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10b      	bne.n	800ac90 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ac78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	60fb      	str	r3, [r7, #12]
}
 800ac8a:	bf00      	nop
 800ac8c:	bf00      	nop
 800ac8e:	e7fd      	b.n	800ac8c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac94:	683a      	ldr	r2, [r7, #0]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d902      	bls.n	800aca0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	61fb      	str	r3, [r7, #28]
 800ac9e:	e002      	b.n	800aca6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aca4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acaa:	69fa      	ldr	r2, [r7, #28]
 800acac:	429a      	cmp	r2, r3
 800acae:	d04c      	beq.n	800ad4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acb4:	697a      	ldr	r2, [r7, #20]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d147      	bne.n	800ad4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800acba:	4b26      	ldr	r3, [pc, #152]	@ (800ad54 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	69ba      	ldr	r2, [r7, #24]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d10b      	bne.n	800acdc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800acc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	60bb      	str	r3, [r7, #8]
}
 800acd6:	bf00      	nop
 800acd8:	bf00      	nop
 800acda:	e7fd      	b.n	800acd8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ace0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	69fa      	ldr	r2, [r7, #28]
 800ace6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	699b      	ldr	r3, [r3, #24]
 800acec:	2b00      	cmp	r3, #0
 800acee:	db04      	blt.n	800acfa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	6959      	ldr	r1, [r3, #20]
 800acfe:	693a      	ldr	r2, [r7, #16]
 800ad00:	4613      	mov	r3, r2
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	4413      	add	r3, r2
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	4a13      	ldr	r2, [pc, #76]	@ (800ad58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ad0a:	4413      	add	r3, r2
 800ad0c:	4299      	cmp	r1, r3
 800ad0e:	d11c      	bne.n	800ad4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	3304      	adds	r3, #4
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7fd fecf 	bl	8008ab8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad1e:	4b0f      	ldr	r3, [pc, #60]	@ (800ad5c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d903      	bls.n	800ad2e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad2a:	4a0c      	ldr	r2, [pc, #48]	@ (800ad5c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ad2c:	6013      	str	r3, [r2, #0]
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad32:	4613      	mov	r3, r2
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	4413      	add	r3, r2
 800ad38:	009b      	lsls	r3, r3, #2
 800ad3a:	4a07      	ldr	r2, [pc, #28]	@ (800ad58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ad3c:	441a      	add	r2, r3
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	3304      	adds	r3, #4
 800ad42:	4619      	mov	r1, r3
 800ad44:	4610      	mov	r0, r2
 800ad46:	f7fd fe5a 	bl	80089fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad4a:	bf00      	nop
 800ad4c:	3720      	adds	r7, #32
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	20000d64 	.word	0x20000d64
 800ad58:	20000d68 	.word	0x20000d68
 800ad5c:	20001240 	.word	0x20001240

0800ad60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ad60:	b480      	push	{r7}
 800ad62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ad64:	4b07      	ldr	r3, [pc, #28]	@ (800ad84 <pvTaskIncrementMutexHeldCount+0x24>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d004      	beq.n	800ad76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ad6c:	4b05      	ldr	r3, [pc, #20]	@ (800ad84 <pvTaskIncrementMutexHeldCount+0x24>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ad72:	3201      	adds	r2, #1
 800ad74:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ad76:	4b03      	ldr	r3, [pc, #12]	@ (800ad84 <pvTaskIncrementMutexHeldCount+0x24>)
 800ad78:	681b      	ldr	r3, [r3, #0]
	}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr
 800ad84:	20000d64 	.word	0x20000d64

0800ad88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad92:	4b21      	ldr	r3, [pc, #132]	@ (800ae18 <prvAddCurrentTaskToDelayedList+0x90>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad98:	4b20      	ldr	r3, [pc, #128]	@ (800ae1c <prvAddCurrentTaskToDelayedList+0x94>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	3304      	adds	r3, #4
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7fd fe8a 	bl	8008ab8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adaa:	d10a      	bne.n	800adc2 <prvAddCurrentTaskToDelayedList+0x3a>
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d007      	beq.n	800adc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adb2:	4b1a      	ldr	r3, [pc, #104]	@ (800ae1c <prvAddCurrentTaskToDelayedList+0x94>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	3304      	adds	r3, #4
 800adb8:	4619      	mov	r1, r3
 800adba:	4819      	ldr	r0, [pc, #100]	@ (800ae20 <prvAddCurrentTaskToDelayedList+0x98>)
 800adbc:	f7fd fe1f 	bl	80089fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800adc0:	e026      	b.n	800ae10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800adc2:	68fa      	ldr	r2, [r7, #12]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4413      	add	r3, r2
 800adc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800adca:	4b14      	ldr	r3, [pc, #80]	@ (800ae1c <prvAddCurrentTaskToDelayedList+0x94>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800add2:	68ba      	ldr	r2, [r7, #8]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	429a      	cmp	r2, r3
 800add8:	d209      	bcs.n	800adee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adda:	4b12      	ldr	r3, [pc, #72]	@ (800ae24 <prvAddCurrentTaskToDelayedList+0x9c>)
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	4b0f      	ldr	r3, [pc, #60]	@ (800ae1c <prvAddCurrentTaskToDelayedList+0x94>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	3304      	adds	r3, #4
 800ade4:	4619      	mov	r1, r3
 800ade6:	4610      	mov	r0, r2
 800ade8:	f7fd fe2d 	bl	8008a46 <vListInsert>
}
 800adec:	e010      	b.n	800ae10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adee:	4b0e      	ldr	r3, [pc, #56]	@ (800ae28 <prvAddCurrentTaskToDelayedList+0xa0>)
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	4b0a      	ldr	r3, [pc, #40]	@ (800ae1c <prvAddCurrentTaskToDelayedList+0x94>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	3304      	adds	r3, #4
 800adf8:	4619      	mov	r1, r3
 800adfa:	4610      	mov	r0, r2
 800adfc:	f7fd fe23 	bl	8008a46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ae00:	4b0a      	ldr	r3, [pc, #40]	@ (800ae2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	68ba      	ldr	r2, [r7, #8]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d202      	bcs.n	800ae10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ae0a:	4a08      	ldr	r2, [pc, #32]	@ (800ae2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	6013      	str	r3, [r2, #0]
}
 800ae10:	bf00      	nop
 800ae12:	3710      	adds	r7, #16
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	2000123c 	.word	0x2000123c
 800ae1c:	20000d64 	.word	0x20000d64
 800ae20:	20001224 	.word	0x20001224
 800ae24:	200011f4 	.word	0x200011f4
 800ae28:	200011f0 	.word	0x200011f0
 800ae2c:	20001258 	.word	0x20001258

0800ae30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b08a      	sub	sp, #40	@ 0x28
 800ae34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ae36:	2300      	movs	r3, #0
 800ae38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ae3a:	f000 fb13 	bl	800b464 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ae3e:	4b1d      	ldr	r3, [pc, #116]	@ (800aeb4 <xTimerCreateTimerTask+0x84>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d021      	beq.n	800ae8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ae46:	2300      	movs	r3, #0
 800ae48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ae4e:	1d3a      	adds	r2, r7, #4
 800ae50:	f107 0108 	add.w	r1, r7, #8
 800ae54:	f107 030c 	add.w	r3, r7, #12
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f7fd fd89 	bl	8008970 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ae5e:	6879      	ldr	r1, [r7, #4]
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	9202      	str	r2, [sp, #8]
 800ae66:	9301      	str	r3, [sp, #4]
 800ae68:	2302      	movs	r3, #2
 800ae6a:	9300      	str	r3, [sp, #0]
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	460a      	mov	r2, r1
 800ae70:	4911      	ldr	r1, [pc, #68]	@ (800aeb8 <xTimerCreateTimerTask+0x88>)
 800ae72:	4812      	ldr	r0, [pc, #72]	@ (800aebc <xTimerCreateTimerTask+0x8c>)
 800ae74:	f7fe fe9a 	bl	8009bac <xTaskCreateStatic>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	4a11      	ldr	r2, [pc, #68]	@ (800aec0 <xTimerCreateTimerTask+0x90>)
 800ae7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae7e:	4b10      	ldr	r3, [pc, #64]	@ (800aec0 <xTimerCreateTimerTask+0x90>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d001      	beq.n	800ae8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ae86:	2301      	movs	r3, #1
 800ae88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d10b      	bne.n	800aea8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ae90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae94:	f383 8811 	msr	BASEPRI, r3
 800ae98:	f3bf 8f6f 	isb	sy
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	613b      	str	r3, [r7, #16]
}
 800aea2:	bf00      	nop
 800aea4:	bf00      	nop
 800aea6:	e7fd      	b.n	800aea4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aea8:	697b      	ldr	r3, [r7, #20]
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3718      	adds	r7, #24
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	20001294 	.word	0x20001294
 800aeb8:	0800bfc4 	.word	0x0800bfc4
 800aebc:	0800affd 	.word	0x0800affd
 800aec0:	20001298 	.word	0x20001298

0800aec4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b08a      	sub	sp, #40	@ 0x28
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	607a      	str	r2, [r7, #4]
 800aed0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aed2:	2300      	movs	r3, #0
 800aed4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d10b      	bne.n	800aef4 <xTimerGenericCommand+0x30>
	__asm volatile
 800aedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aee0:	f383 8811 	msr	BASEPRI, r3
 800aee4:	f3bf 8f6f 	isb	sy
 800aee8:	f3bf 8f4f 	dsb	sy
 800aeec:	623b      	str	r3, [r7, #32]
}
 800aeee:	bf00      	nop
 800aef0:	bf00      	nop
 800aef2:	e7fd      	b.n	800aef0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aef4:	4b19      	ldr	r3, [pc, #100]	@ (800af5c <xTimerGenericCommand+0x98>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d02a      	beq.n	800af52 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	2b05      	cmp	r3, #5
 800af0c:	dc18      	bgt.n	800af40 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800af0e:	f7ff fdad 	bl	800aa6c <xTaskGetSchedulerState>
 800af12:	4603      	mov	r3, r0
 800af14:	2b02      	cmp	r3, #2
 800af16:	d109      	bne.n	800af2c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800af18:	4b10      	ldr	r3, [pc, #64]	@ (800af5c <xTimerGenericCommand+0x98>)
 800af1a:	6818      	ldr	r0, [r3, #0]
 800af1c:	f107 0110 	add.w	r1, r7, #16
 800af20:	2300      	movs	r3, #0
 800af22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af24:	f7fd ffa6 	bl	8008e74 <xQueueGenericSend>
 800af28:	6278      	str	r0, [r7, #36]	@ 0x24
 800af2a:	e012      	b.n	800af52 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800af2c:	4b0b      	ldr	r3, [pc, #44]	@ (800af5c <xTimerGenericCommand+0x98>)
 800af2e:	6818      	ldr	r0, [r3, #0]
 800af30:	f107 0110 	add.w	r1, r7, #16
 800af34:	2300      	movs	r3, #0
 800af36:	2200      	movs	r2, #0
 800af38:	f7fd ff9c 	bl	8008e74 <xQueueGenericSend>
 800af3c:	6278      	str	r0, [r7, #36]	@ 0x24
 800af3e:	e008      	b.n	800af52 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800af40:	4b06      	ldr	r3, [pc, #24]	@ (800af5c <xTimerGenericCommand+0x98>)
 800af42:	6818      	ldr	r0, [r3, #0]
 800af44:	f107 0110 	add.w	r1, r7, #16
 800af48:	2300      	movs	r3, #0
 800af4a:	683a      	ldr	r2, [r7, #0]
 800af4c:	f7fe f894 	bl	8009078 <xQueueGenericSendFromISR>
 800af50:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800af52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800af54:	4618      	mov	r0, r3
 800af56:	3728      	adds	r7, #40	@ 0x28
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	20001294 	.word	0x20001294

0800af60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b088      	sub	sp, #32
 800af64:	af02      	add	r7, sp, #8
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af6a:	4b23      	ldr	r3, [pc, #140]	@ (800aff8 <prvProcessExpiredTimer+0x98>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	68db      	ldr	r3, [r3, #12]
 800af72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	3304      	adds	r3, #4
 800af78:	4618      	mov	r0, r3
 800af7a:	f7fd fd9d 	bl	8008ab8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af84:	f003 0304 	and.w	r3, r3, #4
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d023      	beq.n	800afd4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	699a      	ldr	r2, [r3, #24]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	18d1      	adds	r1, r2, r3
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	683a      	ldr	r2, [r7, #0]
 800af98:	6978      	ldr	r0, [r7, #20]
 800af9a:	f000 f8d5 	bl	800b148 <prvInsertTimerInActiveList>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d020      	beq.n	800afe6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800afa4:	2300      	movs	r3, #0
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	2300      	movs	r3, #0
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	2100      	movs	r1, #0
 800afae:	6978      	ldr	r0, [r7, #20]
 800afb0:	f7ff ff88 	bl	800aec4 <xTimerGenericCommand>
 800afb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d114      	bne.n	800afe6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800afbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc0:	f383 8811 	msr	BASEPRI, r3
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	60fb      	str	r3, [r7, #12]
}
 800afce:	bf00      	nop
 800afd0:	bf00      	nop
 800afd2:	e7fd      	b.n	800afd0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afda:	f023 0301 	bic.w	r3, r3, #1
 800afde:	b2da      	uxtb	r2, r3
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	6a1b      	ldr	r3, [r3, #32]
 800afea:	6978      	ldr	r0, [r7, #20]
 800afec:	4798      	blx	r3
}
 800afee:	bf00      	nop
 800aff0:	3718      	adds	r7, #24
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	2000128c 	.word	0x2000128c

0800affc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b004:	f107 0308 	add.w	r3, r7, #8
 800b008:	4618      	mov	r0, r3
 800b00a:	f000 f859 	bl	800b0c0 <prvGetNextExpireTime>
 800b00e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	4619      	mov	r1, r3
 800b014:	68f8      	ldr	r0, [r7, #12]
 800b016:	f000 f805 	bl	800b024 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b01a:	f000 f8d7 	bl	800b1cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b01e:	bf00      	nop
 800b020:	e7f0      	b.n	800b004 <prvTimerTask+0x8>
	...

0800b024 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b02e:	f7ff f929 	bl	800a284 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b032:	f107 0308 	add.w	r3, r7, #8
 800b036:	4618      	mov	r0, r3
 800b038:	f000 f866 	bl	800b108 <prvSampleTimeNow>
 800b03c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d130      	bne.n	800b0a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d10a      	bne.n	800b060 <prvProcessTimerOrBlockTask+0x3c>
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d806      	bhi.n	800b060 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b052:	f7ff f925 	bl	800a2a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b056:	68f9      	ldr	r1, [r7, #12]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f7ff ff81 	bl	800af60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b05e:	e024      	b.n	800b0aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d008      	beq.n	800b078 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b066:	4b13      	ldr	r3, [pc, #76]	@ (800b0b4 <prvProcessTimerOrBlockTask+0x90>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d101      	bne.n	800b074 <prvProcessTimerOrBlockTask+0x50>
 800b070:	2301      	movs	r3, #1
 800b072:	e000      	b.n	800b076 <prvProcessTimerOrBlockTask+0x52>
 800b074:	2300      	movs	r3, #0
 800b076:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b078:	4b0f      	ldr	r3, [pc, #60]	@ (800b0b8 <prvProcessTimerOrBlockTask+0x94>)
 800b07a:	6818      	ldr	r0, [r3, #0]
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	683a      	ldr	r2, [r7, #0]
 800b084:	4619      	mov	r1, r3
 800b086:	f7fe fd5d 	bl	8009b44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b08a:	f7ff f909 	bl	800a2a0 <xTaskResumeAll>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10a      	bne.n	800b0aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b094:	4b09      	ldr	r3, [pc, #36]	@ (800b0bc <prvProcessTimerOrBlockTask+0x98>)
 800b096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b09a:	601a      	str	r2, [r3, #0]
 800b09c:	f3bf 8f4f 	dsb	sy
 800b0a0:	f3bf 8f6f 	isb	sy
}
 800b0a4:	e001      	b.n	800b0aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b0a6:	f7ff f8fb 	bl	800a2a0 <xTaskResumeAll>
}
 800b0aa:	bf00      	nop
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20001290 	.word	0x20001290
 800b0b8:	20001294 	.word	0x20001294
 800b0bc:	e000ed04 	.word	0xe000ed04

0800b0c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b085      	sub	sp, #20
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b0c8:	4b0e      	ldr	r3, [pc, #56]	@ (800b104 <prvGetNextExpireTime+0x44>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d101      	bne.n	800b0d6 <prvGetNextExpireTime+0x16>
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	e000      	b.n	800b0d8 <prvGetNextExpireTime+0x18>
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d105      	bne.n	800b0f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0e4:	4b07      	ldr	r3, [pc, #28]	@ (800b104 <prvGetNextExpireTime+0x44>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	60fb      	str	r3, [r7, #12]
 800b0ee:	e001      	b.n	800b0f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3714      	adds	r7, #20
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr
 800b102:	bf00      	nop
 800b104:	2000128c 	.word	0x2000128c

0800b108 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b110:	f7ff f964 	bl	800a3dc <xTaskGetTickCount>
 800b114:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b116:	4b0b      	ldr	r3, [pc, #44]	@ (800b144 <prvSampleTimeNow+0x3c>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	68fa      	ldr	r2, [r7, #12]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d205      	bcs.n	800b12c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b120:	f000 f93a 	bl	800b398 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2201      	movs	r2, #1
 800b128:	601a      	str	r2, [r3, #0]
 800b12a:	e002      	b.n	800b132 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b132:	4a04      	ldr	r2, [pc, #16]	@ (800b144 <prvSampleTimeNow+0x3c>)
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b138:	68fb      	ldr	r3, [r7, #12]
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	2000129c 	.word	0x2000129c

0800b148 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
 800b154:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b156:	2300      	movs	r3, #0
 800b158:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	68ba      	ldr	r2, [r7, #8]
 800b15e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	68fa      	ldr	r2, [r7, #12]
 800b164:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b166:	68ba      	ldr	r2, [r7, #8]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d812      	bhi.n	800b194 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	1ad2      	subs	r2, r2, r3
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	699b      	ldr	r3, [r3, #24]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d302      	bcc.n	800b182 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b17c:	2301      	movs	r3, #1
 800b17e:	617b      	str	r3, [r7, #20]
 800b180:	e01b      	b.n	800b1ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b182:	4b10      	ldr	r3, [pc, #64]	@ (800b1c4 <prvInsertTimerInActiveList+0x7c>)
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	3304      	adds	r3, #4
 800b18a:	4619      	mov	r1, r3
 800b18c:	4610      	mov	r0, r2
 800b18e:	f7fd fc5a 	bl	8008a46 <vListInsert>
 800b192:	e012      	b.n	800b1ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d206      	bcs.n	800b1aa <prvInsertTimerInActiveList+0x62>
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d302      	bcc.n	800b1aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	617b      	str	r3, [r7, #20]
 800b1a8:	e007      	b.n	800b1ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1aa:	4b07      	ldr	r3, [pc, #28]	@ (800b1c8 <prvInsertTimerInActiveList+0x80>)
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	3304      	adds	r3, #4
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	4610      	mov	r0, r2
 800b1b6:	f7fd fc46 	bl	8008a46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b1ba:	697b      	ldr	r3, [r7, #20]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3718      	adds	r7, #24
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	20001290 	.word	0x20001290
 800b1c8:	2000128c 	.word	0x2000128c

0800b1cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b08e      	sub	sp, #56	@ 0x38
 800b1d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b1d2:	e0ce      	b.n	800b372 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	da19      	bge.n	800b20e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b1da:	1d3b      	adds	r3, r7, #4
 800b1dc:	3304      	adds	r3, #4
 800b1de:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d10b      	bne.n	800b1fe <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b1e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ea:	f383 8811 	msr	BASEPRI, r3
 800b1ee:	f3bf 8f6f 	isb	sy
 800b1f2:	f3bf 8f4f 	dsb	sy
 800b1f6:	61fb      	str	r3, [r7, #28]
}
 800b1f8:	bf00      	nop
 800b1fa:	bf00      	nop
 800b1fc:	e7fd      	b.n	800b1fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b204:	6850      	ldr	r0, [r2, #4]
 800b206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b208:	6892      	ldr	r2, [r2, #8]
 800b20a:	4611      	mov	r1, r2
 800b20c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2b00      	cmp	r3, #0
 800b212:	f2c0 80ae 	blt.w	800b372 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b21c:	695b      	ldr	r3, [r3, #20]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d004      	beq.n	800b22c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b224:	3304      	adds	r3, #4
 800b226:	4618      	mov	r0, r3
 800b228:	f7fd fc46 	bl	8008ab8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b22c:	463b      	mov	r3, r7
 800b22e:	4618      	mov	r0, r3
 800b230:	f7ff ff6a 	bl	800b108 <prvSampleTimeNow>
 800b234:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2b09      	cmp	r3, #9
 800b23a:	f200 8097 	bhi.w	800b36c <prvProcessReceivedCommands+0x1a0>
 800b23e:	a201      	add	r2, pc, #4	@ (adr r2, 800b244 <prvProcessReceivedCommands+0x78>)
 800b240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b244:	0800b26d 	.word	0x0800b26d
 800b248:	0800b26d 	.word	0x0800b26d
 800b24c:	0800b26d 	.word	0x0800b26d
 800b250:	0800b2e3 	.word	0x0800b2e3
 800b254:	0800b2f7 	.word	0x0800b2f7
 800b258:	0800b343 	.word	0x0800b343
 800b25c:	0800b26d 	.word	0x0800b26d
 800b260:	0800b26d 	.word	0x0800b26d
 800b264:	0800b2e3 	.word	0x0800b2e3
 800b268:	0800b2f7 	.word	0x0800b2f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b26e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b272:	f043 0301 	orr.w	r3, r3, #1
 800b276:	b2da      	uxtb	r2, r3
 800b278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b27a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b27e:	68ba      	ldr	r2, [r7, #8]
 800b280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b282:	699b      	ldr	r3, [r3, #24]
 800b284:	18d1      	adds	r1, r2, r3
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b28a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b28c:	f7ff ff5c 	bl	800b148 <prvInsertTimerInActiveList>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d06c      	beq.n	800b370 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b298:	6a1b      	ldr	r3, [r3, #32]
 800b29a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b29c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2a4:	f003 0304 	and.w	r3, r3, #4
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d061      	beq.n	800b370 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2b0:	699b      	ldr	r3, [r3, #24]
 800b2b2:	441a      	add	r2, r3
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2be:	f7ff fe01 	bl	800aec4 <xTimerGenericCommand>
 800b2c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b2c4:	6a3b      	ldr	r3, [r7, #32]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d152      	bne.n	800b370 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b2ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ce:	f383 8811 	msr	BASEPRI, r3
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	61bb      	str	r3, [r7, #24]
}
 800b2dc:	bf00      	nop
 800b2de:	bf00      	nop
 800b2e0:	e7fd      	b.n	800b2de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2e8:	f023 0301 	bic.w	r3, r3, #1
 800b2ec:	b2da      	uxtb	r2, r3
 800b2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b2f4:	e03d      	b.n	800b372 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2fc:	f043 0301 	orr.w	r3, r3, #1
 800b300:	b2da      	uxtb	r2, r3
 800b302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b304:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b308:	68ba      	ldr	r2, [r7, #8]
 800b30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b30c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b310:	699b      	ldr	r3, [r3, #24]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d10b      	bne.n	800b32e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b31a:	f383 8811 	msr	BASEPRI, r3
 800b31e:	f3bf 8f6f 	isb	sy
 800b322:	f3bf 8f4f 	dsb	sy
 800b326:	617b      	str	r3, [r7, #20]
}
 800b328:	bf00      	nop
 800b32a:	bf00      	nop
 800b32c:	e7fd      	b.n	800b32a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b330:	699a      	ldr	r2, [r3, #24]
 800b332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b334:	18d1      	adds	r1, r2, r3
 800b336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b33a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b33c:	f7ff ff04 	bl	800b148 <prvInsertTimerInActiveList>
					break;
 800b340:	e017      	b.n	800b372 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b344:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b348:	f003 0302 	and.w	r3, r3, #2
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d103      	bne.n	800b358 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b350:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b352:	f000 fbe9 	bl	800bb28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b356:	e00c      	b.n	800b372 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b35a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b35e:	f023 0301 	bic.w	r3, r3, #1
 800b362:	b2da      	uxtb	r2, r3
 800b364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b366:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b36a:	e002      	b.n	800b372 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b36c:	bf00      	nop
 800b36e:	e000      	b.n	800b372 <prvProcessReceivedCommands+0x1a6>
					break;
 800b370:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b372:	4b08      	ldr	r3, [pc, #32]	@ (800b394 <prvProcessReceivedCommands+0x1c8>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	1d39      	adds	r1, r7, #4
 800b378:	2200      	movs	r2, #0
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7fd ffaa 	bl	80092d4 <xQueueReceive>
 800b380:	4603      	mov	r3, r0
 800b382:	2b00      	cmp	r3, #0
 800b384:	f47f af26 	bne.w	800b1d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b388:	bf00      	nop
 800b38a:	bf00      	nop
 800b38c:	3730      	adds	r7, #48	@ 0x30
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	20001294 	.word	0x20001294

0800b398 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b088      	sub	sp, #32
 800b39c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b39e:	e049      	b.n	800b434 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b3a0:	4b2e      	ldr	r3, [pc, #184]	@ (800b45c <prvSwitchTimerLists+0xc4>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3aa:	4b2c      	ldr	r3, [pc, #176]	@ (800b45c <prvSwitchTimerLists+0xc4>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	68db      	ldr	r3, [r3, #12]
 800b3b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	3304      	adds	r3, #4
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f7fd fb7d 	bl	8008ab8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	6a1b      	ldr	r3, [r3, #32]
 800b3c2:	68f8      	ldr	r0, [r7, #12]
 800b3c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3cc:	f003 0304 	and.w	r3, r3, #4
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d02f      	beq.n	800b434 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	699b      	ldr	r3, [r3, #24]
 800b3d8:	693a      	ldr	r2, [r7, #16]
 800b3da:	4413      	add	r3, r2
 800b3dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b3de:	68ba      	ldr	r2, [r7, #8]
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d90e      	bls.n	800b404 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	68fa      	ldr	r2, [r7, #12]
 800b3f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b3f2:	4b1a      	ldr	r3, [pc, #104]	@ (800b45c <prvSwitchTimerLists+0xc4>)
 800b3f4:	681a      	ldr	r2, [r3, #0]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	3304      	adds	r3, #4
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	4610      	mov	r0, r2
 800b3fe:	f7fd fb22 	bl	8008a46 <vListInsert>
 800b402:	e017      	b.n	800b434 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b404:	2300      	movs	r3, #0
 800b406:	9300      	str	r3, [sp, #0]
 800b408:	2300      	movs	r3, #0
 800b40a:	693a      	ldr	r2, [r7, #16]
 800b40c:	2100      	movs	r1, #0
 800b40e:	68f8      	ldr	r0, [r7, #12]
 800b410:	f7ff fd58 	bl	800aec4 <xTimerGenericCommand>
 800b414:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d10b      	bne.n	800b434 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b41c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b420:	f383 8811 	msr	BASEPRI, r3
 800b424:	f3bf 8f6f 	isb	sy
 800b428:	f3bf 8f4f 	dsb	sy
 800b42c:	603b      	str	r3, [r7, #0]
}
 800b42e:	bf00      	nop
 800b430:	bf00      	nop
 800b432:	e7fd      	b.n	800b430 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b434:	4b09      	ldr	r3, [pc, #36]	@ (800b45c <prvSwitchTimerLists+0xc4>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d1b0      	bne.n	800b3a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b43e:	4b07      	ldr	r3, [pc, #28]	@ (800b45c <prvSwitchTimerLists+0xc4>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b444:	4b06      	ldr	r3, [pc, #24]	@ (800b460 <prvSwitchTimerLists+0xc8>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a04      	ldr	r2, [pc, #16]	@ (800b45c <prvSwitchTimerLists+0xc4>)
 800b44a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b44c:	4a04      	ldr	r2, [pc, #16]	@ (800b460 <prvSwitchTimerLists+0xc8>)
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	6013      	str	r3, [r2, #0]
}
 800b452:	bf00      	nop
 800b454:	3718      	adds	r7, #24
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	2000128c 	.word	0x2000128c
 800b460:	20001290 	.word	0x20001290

0800b464 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b46a:	f000 f96d 	bl	800b748 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b46e:	4b15      	ldr	r3, [pc, #84]	@ (800b4c4 <prvCheckForValidListAndQueue+0x60>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d120      	bne.n	800b4b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b476:	4814      	ldr	r0, [pc, #80]	@ (800b4c8 <prvCheckForValidListAndQueue+0x64>)
 800b478:	f7fd fa94 	bl	80089a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b47c:	4813      	ldr	r0, [pc, #76]	@ (800b4cc <prvCheckForValidListAndQueue+0x68>)
 800b47e:	f7fd fa91 	bl	80089a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b482:	4b13      	ldr	r3, [pc, #76]	@ (800b4d0 <prvCheckForValidListAndQueue+0x6c>)
 800b484:	4a10      	ldr	r2, [pc, #64]	@ (800b4c8 <prvCheckForValidListAndQueue+0x64>)
 800b486:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b488:	4b12      	ldr	r3, [pc, #72]	@ (800b4d4 <prvCheckForValidListAndQueue+0x70>)
 800b48a:	4a10      	ldr	r2, [pc, #64]	@ (800b4cc <prvCheckForValidListAndQueue+0x68>)
 800b48c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b48e:	2300      	movs	r3, #0
 800b490:	9300      	str	r3, [sp, #0]
 800b492:	4b11      	ldr	r3, [pc, #68]	@ (800b4d8 <prvCheckForValidListAndQueue+0x74>)
 800b494:	4a11      	ldr	r2, [pc, #68]	@ (800b4dc <prvCheckForValidListAndQueue+0x78>)
 800b496:	2110      	movs	r1, #16
 800b498:	200a      	movs	r0, #10
 800b49a:	f7fd fba1 	bl	8008be0 <xQueueGenericCreateStatic>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	4a08      	ldr	r2, [pc, #32]	@ (800b4c4 <prvCheckForValidListAndQueue+0x60>)
 800b4a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b4a4:	4b07      	ldr	r3, [pc, #28]	@ (800b4c4 <prvCheckForValidListAndQueue+0x60>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d005      	beq.n	800b4b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b4ac:	4b05      	ldr	r3, [pc, #20]	@ (800b4c4 <prvCheckForValidListAndQueue+0x60>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	490b      	ldr	r1, [pc, #44]	@ (800b4e0 <prvCheckForValidListAndQueue+0x7c>)
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fe faf2 	bl	8009a9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4b8:	f000 f978 	bl	800b7ac <vPortExitCritical>
}
 800b4bc:	bf00      	nop
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	20001294 	.word	0x20001294
 800b4c8:	20001264 	.word	0x20001264
 800b4cc:	20001278 	.word	0x20001278
 800b4d0:	2000128c 	.word	0x2000128c
 800b4d4:	20001290 	.word	0x20001290
 800b4d8:	20001340 	.word	0x20001340
 800b4dc:	200012a0 	.word	0x200012a0
 800b4e0:	0800bfcc 	.word	0x0800bfcc

0800b4e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b085      	sub	sp, #20
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	3b04      	subs	r3, #4
 800b4f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b4fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	3b04      	subs	r3, #4
 800b502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	f023 0201 	bic.w	r2, r3, #1
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	3b04      	subs	r3, #4
 800b512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b514:	4a0c      	ldr	r2, [pc, #48]	@ (800b548 <pxPortInitialiseStack+0x64>)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	3b14      	subs	r3, #20
 800b51e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	3b04      	subs	r3, #4
 800b52a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f06f 0202 	mvn.w	r2, #2
 800b532:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	3b20      	subs	r3, #32
 800b538:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b53a:	68fb      	ldr	r3, [r7, #12]
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3714      	adds	r7, #20
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr
 800b548:	0800b54d 	.word	0x0800b54d

0800b54c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b54c:	b480      	push	{r7}
 800b54e:	b085      	sub	sp, #20
 800b550:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b552:	2300      	movs	r3, #0
 800b554:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b556:	4b13      	ldr	r3, [pc, #76]	@ (800b5a4 <prvTaskExitError+0x58>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b55e:	d00b      	beq.n	800b578 <prvTaskExitError+0x2c>
	__asm volatile
 800b560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b564:	f383 8811 	msr	BASEPRI, r3
 800b568:	f3bf 8f6f 	isb	sy
 800b56c:	f3bf 8f4f 	dsb	sy
 800b570:	60fb      	str	r3, [r7, #12]
}
 800b572:	bf00      	nop
 800b574:	bf00      	nop
 800b576:	e7fd      	b.n	800b574 <prvTaskExitError+0x28>
	__asm volatile
 800b578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b57c:	f383 8811 	msr	BASEPRI, r3
 800b580:	f3bf 8f6f 	isb	sy
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	60bb      	str	r3, [r7, #8]
}
 800b58a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b58c:	bf00      	nop
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d0fc      	beq.n	800b58e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b594:	bf00      	nop
 800b596:	bf00      	nop
 800b598:	3714      	adds	r7, #20
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	20000020 	.word	0x20000020
	...

0800b5b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b5b0:	4b07      	ldr	r3, [pc, #28]	@ (800b5d0 <pxCurrentTCBConst2>)
 800b5b2:	6819      	ldr	r1, [r3, #0]
 800b5b4:	6808      	ldr	r0, [r1, #0]
 800b5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ba:	f380 8809 	msr	PSP, r0
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f04f 0000 	mov.w	r0, #0
 800b5c6:	f380 8811 	msr	BASEPRI, r0
 800b5ca:	4770      	bx	lr
 800b5cc:	f3af 8000 	nop.w

0800b5d0 <pxCurrentTCBConst2>:
 800b5d0:	20000d64 	.word	0x20000d64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b5d4:	bf00      	nop
 800b5d6:	bf00      	nop

0800b5d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b5d8:	4808      	ldr	r0, [pc, #32]	@ (800b5fc <prvPortStartFirstTask+0x24>)
 800b5da:	6800      	ldr	r0, [r0, #0]
 800b5dc:	6800      	ldr	r0, [r0, #0]
 800b5de:	f380 8808 	msr	MSP, r0
 800b5e2:	f04f 0000 	mov.w	r0, #0
 800b5e6:	f380 8814 	msr	CONTROL, r0
 800b5ea:	b662      	cpsie	i
 800b5ec:	b661      	cpsie	f
 800b5ee:	f3bf 8f4f 	dsb	sy
 800b5f2:	f3bf 8f6f 	isb	sy
 800b5f6:	df00      	svc	0
 800b5f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b5fa:	bf00      	nop
 800b5fc:	e000ed08 	.word	0xe000ed08

0800b600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b086      	sub	sp, #24
 800b604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b606:	4b47      	ldr	r3, [pc, #284]	@ (800b724 <xPortStartScheduler+0x124>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a47      	ldr	r2, [pc, #284]	@ (800b728 <xPortStartScheduler+0x128>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d10b      	bne.n	800b628 <xPortStartScheduler+0x28>
	__asm volatile
 800b610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b614:	f383 8811 	msr	BASEPRI, r3
 800b618:	f3bf 8f6f 	isb	sy
 800b61c:	f3bf 8f4f 	dsb	sy
 800b620:	613b      	str	r3, [r7, #16]
}
 800b622:	bf00      	nop
 800b624:	bf00      	nop
 800b626:	e7fd      	b.n	800b624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b628:	4b3e      	ldr	r3, [pc, #248]	@ (800b724 <xPortStartScheduler+0x124>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a3f      	ldr	r2, [pc, #252]	@ (800b72c <xPortStartScheduler+0x12c>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d10b      	bne.n	800b64a <xPortStartScheduler+0x4a>
	__asm volatile
 800b632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b636:	f383 8811 	msr	BASEPRI, r3
 800b63a:	f3bf 8f6f 	isb	sy
 800b63e:	f3bf 8f4f 	dsb	sy
 800b642:	60fb      	str	r3, [r7, #12]
}
 800b644:	bf00      	nop
 800b646:	bf00      	nop
 800b648:	e7fd      	b.n	800b646 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b64a:	4b39      	ldr	r3, [pc, #228]	@ (800b730 <xPortStartScheduler+0x130>)
 800b64c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	b2db      	uxtb	r3, r3
 800b654:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	22ff      	movs	r2, #255	@ 0xff
 800b65a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	b2db      	uxtb	r3, r3
 800b662:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b664:	78fb      	ldrb	r3, [r7, #3]
 800b666:	b2db      	uxtb	r3, r3
 800b668:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b66c:	b2da      	uxtb	r2, r3
 800b66e:	4b31      	ldr	r3, [pc, #196]	@ (800b734 <xPortStartScheduler+0x134>)
 800b670:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b672:	4b31      	ldr	r3, [pc, #196]	@ (800b738 <xPortStartScheduler+0x138>)
 800b674:	2207      	movs	r2, #7
 800b676:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b678:	e009      	b.n	800b68e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b67a:	4b2f      	ldr	r3, [pc, #188]	@ (800b738 <xPortStartScheduler+0x138>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	3b01      	subs	r3, #1
 800b680:	4a2d      	ldr	r2, [pc, #180]	@ (800b738 <xPortStartScheduler+0x138>)
 800b682:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b684:	78fb      	ldrb	r3, [r7, #3]
 800b686:	b2db      	uxtb	r3, r3
 800b688:	005b      	lsls	r3, r3, #1
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b68e:	78fb      	ldrb	r3, [r7, #3]
 800b690:	b2db      	uxtb	r3, r3
 800b692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b696:	2b80      	cmp	r3, #128	@ 0x80
 800b698:	d0ef      	beq.n	800b67a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b69a:	4b27      	ldr	r3, [pc, #156]	@ (800b738 <xPortStartScheduler+0x138>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f1c3 0307 	rsb	r3, r3, #7
 800b6a2:	2b04      	cmp	r3, #4
 800b6a4:	d00b      	beq.n	800b6be <xPortStartScheduler+0xbe>
	__asm volatile
 800b6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6aa:	f383 8811 	msr	BASEPRI, r3
 800b6ae:	f3bf 8f6f 	isb	sy
 800b6b2:	f3bf 8f4f 	dsb	sy
 800b6b6:	60bb      	str	r3, [r7, #8]
}
 800b6b8:	bf00      	nop
 800b6ba:	bf00      	nop
 800b6bc:	e7fd      	b.n	800b6ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b6be:	4b1e      	ldr	r3, [pc, #120]	@ (800b738 <xPortStartScheduler+0x138>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	021b      	lsls	r3, r3, #8
 800b6c4:	4a1c      	ldr	r2, [pc, #112]	@ (800b738 <xPortStartScheduler+0x138>)
 800b6c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b6c8:	4b1b      	ldr	r3, [pc, #108]	@ (800b738 <xPortStartScheduler+0x138>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b6d0:	4a19      	ldr	r2, [pc, #100]	@ (800b738 <xPortStartScheduler+0x138>)
 800b6d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	b2da      	uxtb	r2, r3
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b6dc:	4b17      	ldr	r3, [pc, #92]	@ (800b73c <xPortStartScheduler+0x13c>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4a16      	ldr	r2, [pc, #88]	@ (800b73c <xPortStartScheduler+0x13c>)
 800b6e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b6e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b6e8:	4b14      	ldr	r3, [pc, #80]	@ (800b73c <xPortStartScheduler+0x13c>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a13      	ldr	r2, [pc, #76]	@ (800b73c <xPortStartScheduler+0x13c>)
 800b6ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b6f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b6f4:	f000 f8da 	bl	800b8ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b6f8:	4b11      	ldr	r3, [pc, #68]	@ (800b740 <xPortStartScheduler+0x140>)
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b6fe:	f000 f8f9 	bl	800b8f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b702:	4b10      	ldr	r3, [pc, #64]	@ (800b744 <xPortStartScheduler+0x144>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	4a0f      	ldr	r2, [pc, #60]	@ (800b744 <xPortStartScheduler+0x144>)
 800b708:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b70c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b70e:	f7ff ff63 	bl	800b5d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b712:	f7fe ff2d 	bl	800a570 <vTaskSwitchContext>
	prvTaskExitError();
 800b716:	f7ff ff19 	bl	800b54c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b71a:	2300      	movs	r3, #0
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3718      	adds	r7, #24
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	e000ed00 	.word	0xe000ed00
 800b728:	410fc271 	.word	0x410fc271
 800b72c:	410fc270 	.word	0x410fc270
 800b730:	e000e400 	.word	0xe000e400
 800b734:	20001390 	.word	0x20001390
 800b738:	20001394 	.word	0x20001394
 800b73c:	e000ed20 	.word	0xe000ed20
 800b740:	20000020 	.word	0x20000020
 800b744:	e000ef34 	.word	0xe000ef34

0800b748 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b748:	b480      	push	{r7}
 800b74a:	b083      	sub	sp, #12
 800b74c:	af00      	add	r7, sp, #0
	__asm volatile
 800b74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b752:	f383 8811 	msr	BASEPRI, r3
 800b756:	f3bf 8f6f 	isb	sy
 800b75a:	f3bf 8f4f 	dsb	sy
 800b75e:	607b      	str	r3, [r7, #4]
}
 800b760:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b762:	4b10      	ldr	r3, [pc, #64]	@ (800b7a4 <vPortEnterCritical+0x5c>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	3301      	adds	r3, #1
 800b768:	4a0e      	ldr	r2, [pc, #56]	@ (800b7a4 <vPortEnterCritical+0x5c>)
 800b76a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b76c:	4b0d      	ldr	r3, [pc, #52]	@ (800b7a4 <vPortEnterCritical+0x5c>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2b01      	cmp	r3, #1
 800b772:	d110      	bne.n	800b796 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b774:	4b0c      	ldr	r3, [pc, #48]	@ (800b7a8 <vPortEnterCritical+0x60>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d00b      	beq.n	800b796 <vPortEnterCritical+0x4e>
	__asm volatile
 800b77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b782:	f383 8811 	msr	BASEPRI, r3
 800b786:	f3bf 8f6f 	isb	sy
 800b78a:	f3bf 8f4f 	dsb	sy
 800b78e:	603b      	str	r3, [r7, #0]
}
 800b790:	bf00      	nop
 800b792:	bf00      	nop
 800b794:	e7fd      	b.n	800b792 <vPortEnterCritical+0x4a>
	}
}
 800b796:	bf00      	nop
 800b798:	370c      	adds	r7, #12
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	20000020 	.word	0x20000020
 800b7a8:	e000ed04 	.word	0xe000ed04

0800b7ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b083      	sub	sp, #12
 800b7b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b7b2:	4b12      	ldr	r3, [pc, #72]	@ (800b7fc <vPortExitCritical+0x50>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d10b      	bne.n	800b7d2 <vPortExitCritical+0x26>
	__asm volatile
 800b7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7be:	f383 8811 	msr	BASEPRI, r3
 800b7c2:	f3bf 8f6f 	isb	sy
 800b7c6:	f3bf 8f4f 	dsb	sy
 800b7ca:	607b      	str	r3, [r7, #4]
}
 800b7cc:	bf00      	nop
 800b7ce:	bf00      	nop
 800b7d0:	e7fd      	b.n	800b7ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b7d2:	4b0a      	ldr	r3, [pc, #40]	@ (800b7fc <vPortExitCritical+0x50>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	3b01      	subs	r3, #1
 800b7d8:	4a08      	ldr	r2, [pc, #32]	@ (800b7fc <vPortExitCritical+0x50>)
 800b7da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b7dc:	4b07      	ldr	r3, [pc, #28]	@ (800b7fc <vPortExitCritical+0x50>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d105      	bne.n	800b7f0 <vPortExitCritical+0x44>
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	f383 8811 	msr	BASEPRI, r3
}
 800b7ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b7f0:	bf00      	nop
 800b7f2:	370c      	adds	r7, #12
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr
 800b7fc:	20000020 	.word	0x20000020

0800b800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b800:	f3ef 8009 	mrs	r0, PSP
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	4b15      	ldr	r3, [pc, #84]	@ (800b860 <pxCurrentTCBConst>)
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	f01e 0f10 	tst.w	lr, #16
 800b810:	bf08      	it	eq
 800b812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b81a:	6010      	str	r0, [r2, #0]
 800b81c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b820:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b824:	f380 8811 	msr	BASEPRI, r0
 800b828:	f3bf 8f4f 	dsb	sy
 800b82c:	f3bf 8f6f 	isb	sy
 800b830:	f7fe fe9e 	bl	800a570 <vTaskSwitchContext>
 800b834:	f04f 0000 	mov.w	r0, #0
 800b838:	f380 8811 	msr	BASEPRI, r0
 800b83c:	bc09      	pop	{r0, r3}
 800b83e:	6819      	ldr	r1, [r3, #0]
 800b840:	6808      	ldr	r0, [r1, #0]
 800b842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b846:	f01e 0f10 	tst.w	lr, #16
 800b84a:	bf08      	it	eq
 800b84c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b850:	f380 8809 	msr	PSP, r0
 800b854:	f3bf 8f6f 	isb	sy
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	f3af 8000 	nop.w

0800b860 <pxCurrentTCBConst>:
 800b860:	20000d64 	.word	0x20000d64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b864:	bf00      	nop
 800b866:	bf00      	nop

0800b868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
	__asm volatile
 800b86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b872:	f383 8811 	msr	BASEPRI, r3
 800b876:	f3bf 8f6f 	isb	sy
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	607b      	str	r3, [r7, #4]
}
 800b880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b882:	f7fe fdbb 	bl	800a3fc <xTaskIncrementTick>
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d003      	beq.n	800b894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b88c:	4b06      	ldr	r3, [pc, #24]	@ (800b8a8 <xPortSysTickHandler+0x40>)
 800b88e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b892:	601a      	str	r2, [r3, #0]
 800b894:	2300      	movs	r3, #0
 800b896:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	f383 8811 	msr	BASEPRI, r3
}
 800b89e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b8a0:	bf00      	nop
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	e000ed04 	.word	0xe000ed04

0800b8ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b8b0:	4b0b      	ldr	r3, [pc, #44]	@ (800b8e0 <vPortSetupTimerInterrupt+0x34>)
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b8b6:	4b0b      	ldr	r3, [pc, #44]	@ (800b8e4 <vPortSetupTimerInterrupt+0x38>)
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b8bc:	4b0a      	ldr	r3, [pc, #40]	@ (800b8e8 <vPortSetupTimerInterrupt+0x3c>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a0a      	ldr	r2, [pc, #40]	@ (800b8ec <vPortSetupTimerInterrupt+0x40>)
 800b8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8c6:	099b      	lsrs	r3, r3, #6
 800b8c8:	4a09      	ldr	r2, [pc, #36]	@ (800b8f0 <vPortSetupTimerInterrupt+0x44>)
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b8ce:	4b04      	ldr	r3, [pc, #16]	@ (800b8e0 <vPortSetupTimerInterrupt+0x34>)
 800b8d0:	2207      	movs	r2, #7
 800b8d2:	601a      	str	r2, [r3, #0]
}
 800b8d4:	bf00      	nop
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop
 800b8e0:	e000e010 	.word	0xe000e010
 800b8e4:	e000e018 	.word	0xe000e018
 800b8e8:	20000004 	.word	0x20000004
 800b8ec:	10624dd3 	.word	0x10624dd3
 800b8f0:	e000e014 	.word	0xe000e014

0800b8f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b8f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b904 <vPortEnableVFP+0x10>
 800b8f8:	6801      	ldr	r1, [r0, #0]
 800b8fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b8fe:	6001      	str	r1, [r0, #0]
 800b900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b902:	bf00      	nop
 800b904:	e000ed88 	.word	0xe000ed88

0800b908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b908:	b480      	push	{r7}
 800b90a:	b085      	sub	sp, #20
 800b90c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b90e:	f3ef 8305 	mrs	r3, IPSR
 800b912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2b0f      	cmp	r3, #15
 800b918:	d915      	bls.n	800b946 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b91a:	4a18      	ldr	r2, [pc, #96]	@ (800b97c <vPortValidateInterruptPriority+0x74>)
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	4413      	add	r3, r2
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b924:	4b16      	ldr	r3, [pc, #88]	@ (800b980 <vPortValidateInterruptPriority+0x78>)
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	7afa      	ldrb	r2, [r7, #11]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d20b      	bcs.n	800b946 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b932:	f383 8811 	msr	BASEPRI, r3
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	607b      	str	r3, [r7, #4]
}
 800b940:	bf00      	nop
 800b942:	bf00      	nop
 800b944:	e7fd      	b.n	800b942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b946:	4b0f      	ldr	r3, [pc, #60]	@ (800b984 <vPortValidateInterruptPriority+0x7c>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b94e:	4b0e      	ldr	r3, [pc, #56]	@ (800b988 <vPortValidateInterruptPriority+0x80>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	429a      	cmp	r2, r3
 800b954:	d90b      	bls.n	800b96e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b95a:	f383 8811 	msr	BASEPRI, r3
 800b95e:	f3bf 8f6f 	isb	sy
 800b962:	f3bf 8f4f 	dsb	sy
 800b966:	603b      	str	r3, [r7, #0]
}
 800b968:	bf00      	nop
 800b96a:	bf00      	nop
 800b96c:	e7fd      	b.n	800b96a <vPortValidateInterruptPriority+0x62>
	}
 800b96e:	bf00      	nop
 800b970:	3714      	adds	r7, #20
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr
 800b97a:	bf00      	nop
 800b97c:	e000e3f0 	.word	0xe000e3f0
 800b980:	20001390 	.word	0x20001390
 800b984:	e000ed0c 	.word	0xe000ed0c
 800b988:	20001394 	.word	0x20001394

0800b98c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b08a      	sub	sp, #40	@ 0x28
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b994:	2300      	movs	r3, #0
 800b996:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b998:	f7fe fc74 	bl	800a284 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b99c:	4b5c      	ldr	r3, [pc, #368]	@ (800bb10 <pvPortMalloc+0x184>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d101      	bne.n	800b9a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b9a4:	f000 f924 	bl	800bbf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b9a8:	4b5a      	ldr	r3, [pc, #360]	@ (800bb14 <pvPortMalloc+0x188>)
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	4013      	ands	r3, r2
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f040 8095 	bne.w	800bae0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d01e      	beq.n	800b9fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b9bc:	2208      	movs	r2, #8
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f003 0307 	and.w	r3, r3, #7
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d015      	beq.n	800b9fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f023 0307 	bic.w	r3, r3, #7
 800b9d4:	3308      	adds	r3, #8
 800b9d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f003 0307 	and.w	r3, r3, #7
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d00b      	beq.n	800b9fa <pvPortMalloc+0x6e>
	__asm volatile
 800b9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9e6:	f383 8811 	msr	BASEPRI, r3
 800b9ea:	f3bf 8f6f 	isb	sy
 800b9ee:	f3bf 8f4f 	dsb	sy
 800b9f2:	617b      	str	r3, [r7, #20]
}
 800b9f4:	bf00      	nop
 800b9f6:	bf00      	nop
 800b9f8:	e7fd      	b.n	800b9f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d06f      	beq.n	800bae0 <pvPortMalloc+0x154>
 800ba00:	4b45      	ldr	r3, [pc, #276]	@ (800bb18 <pvPortMalloc+0x18c>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d86a      	bhi.n	800bae0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ba0a:	4b44      	ldr	r3, [pc, #272]	@ (800bb1c <pvPortMalloc+0x190>)
 800ba0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ba0e:	4b43      	ldr	r3, [pc, #268]	@ (800bb1c <pvPortMalloc+0x190>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba14:	e004      	b.n	800ba20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ba16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ba1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d903      	bls.n	800ba32 <pvPortMalloc+0xa6>
 800ba2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1f1      	bne.n	800ba16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ba32:	4b37      	ldr	r3, [pc, #220]	@ (800bb10 <pvPortMalloc+0x184>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d051      	beq.n	800bae0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ba3c:	6a3b      	ldr	r3, [r7, #32]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2208      	movs	r2, #8
 800ba42:	4413      	add	r3, r2
 800ba44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ba46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	6a3b      	ldr	r3, [r7, #32]
 800ba4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ba4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba50:	685a      	ldr	r2, [r3, #4]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	1ad2      	subs	r2, r2, r3
 800ba56:	2308      	movs	r3, #8
 800ba58:	005b      	lsls	r3, r3, #1
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d920      	bls.n	800baa0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ba5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4413      	add	r3, r2
 800ba64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	f003 0307 	and.w	r3, r3, #7
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d00b      	beq.n	800ba88 <pvPortMalloc+0xfc>
	__asm volatile
 800ba70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba74:	f383 8811 	msr	BASEPRI, r3
 800ba78:	f3bf 8f6f 	isb	sy
 800ba7c:	f3bf 8f4f 	dsb	sy
 800ba80:	613b      	str	r3, [r7, #16]
}
 800ba82:	bf00      	nop
 800ba84:	bf00      	nop
 800ba86:	e7fd      	b.n	800ba84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba8a:	685a      	ldr	r2, [r3, #4]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	1ad2      	subs	r2, r2, r3
 800ba90:	69bb      	ldr	r3, [r7, #24]
 800ba92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba9a:	69b8      	ldr	r0, [r7, #24]
 800ba9c:	f000 f90a 	bl	800bcb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800baa0:	4b1d      	ldr	r3, [pc, #116]	@ (800bb18 <pvPortMalloc+0x18c>)
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	1ad3      	subs	r3, r2, r3
 800baaa:	4a1b      	ldr	r2, [pc, #108]	@ (800bb18 <pvPortMalloc+0x18c>)
 800baac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800baae:	4b1a      	ldr	r3, [pc, #104]	@ (800bb18 <pvPortMalloc+0x18c>)
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	4b1b      	ldr	r3, [pc, #108]	@ (800bb20 <pvPortMalloc+0x194>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d203      	bcs.n	800bac2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800baba:	4b17      	ldr	r3, [pc, #92]	@ (800bb18 <pvPortMalloc+0x18c>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	4a18      	ldr	r2, [pc, #96]	@ (800bb20 <pvPortMalloc+0x194>)
 800bac0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac4:	685a      	ldr	r2, [r3, #4]
 800bac6:	4b13      	ldr	r3, [pc, #76]	@ (800bb14 <pvPortMalloc+0x188>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	431a      	orrs	r2, r3
 800bacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bace:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bad2:	2200      	movs	r2, #0
 800bad4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bad6:	4b13      	ldr	r3, [pc, #76]	@ (800bb24 <pvPortMalloc+0x198>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	3301      	adds	r3, #1
 800badc:	4a11      	ldr	r2, [pc, #68]	@ (800bb24 <pvPortMalloc+0x198>)
 800bade:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bae0:	f7fe fbde 	bl	800a2a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bae4:	69fb      	ldr	r3, [r7, #28]
 800bae6:	f003 0307 	and.w	r3, r3, #7
 800baea:	2b00      	cmp	r3, #0
 800baec:	d00b      	beq.n	800bb06 <pvPortMalloc+0x17a>
	__asm volatile
 800baee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baf2:	f383 8811 	msr	BASEPRI, r3
 800baf6:	f3bf 8f6f 	isb	sy
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	60fb      	str	r3, [r7, #12]
}
 800bb00:	bf00      	nop
 800bb02:	bf00      	nop
 800bb04:	e7fd      	b.n	800bb02 <pvPortMalloc+0x176>
	return pvReturn;
 800bb06:	69fb      	ldr	r3, [r7, #28]
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3728      	adds	r7, #40	@ 0x28
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	20001f58 	.word	0x20001f58
 800bb14:	20001f6c 	.word	0x20001f6c
 800bb18:	20001f5c 	.word	0x20001f5c
 800bb1c:	20001f50 	.word	0x20001f50
 800bb20:	20001f60 	.word	0x20001f60
 800bb24:	20001f64 	.word	0x20001f64

0800bb28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b086      	sub	sp, #24
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d04f      	beq.n	800bbda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bb3a:	2308      	movs	r3, #8
 800bb3c:	425b      	negs	r3, r3
 800bb3e:	697a      	ldr	r2, [r7, #20]
 800bb40:	4413      	add	r3, r2
 800bb42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	685a      	ldr	r2, [r3, #4]
 800bb4c:	4b25      	ldr	r3, [pc, #148]	@ (800bbe4 <vPortFree+0xbc>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4013      	ands	r3, r2
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d10b      	bne.n	800bb6e <vPortFree+0x46>
	__asm volatile
 800bb56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb5a:	f383 8811 	msr	BASEPRI, r3
 800bb5e:	f3bf 8f6f 	isb	sy
 800bb62:	f3bf 8f4f 	dsb	sy
 800bb66:	60fb      	str	r3, [r7, #12]
}
 800bb68:	bf00      	nop
 800bb6a:	bf00      	nop
 800bb6c:	e7fd      	b.n	800bb6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d00b      	beq.n	800bb8e <vPortFree+0x66>
	__asm volatile
 800bb76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb7a:	f383 8811 	msr	BASEPRI, r3
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f3bf 8f4f 	dsb	sy
 800bb86:	60bb      	str	r3, [r7, #8]
}
 800bb88:	bf00      	nop
 800bb8a:	bf00      	nop
 800bb8c:	e7fd      	b.n	800bb8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	685a      	ldr	r2, [r3, #4]
 800bb92:	4b14      	ldr	r3, [pc, #80]	@ (800bbe4 <vPortFree+0xbc>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4013      	ands	r3, r2
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d01e      	beq.n	800bbda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d11a      	bne.n	800bbda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	685a      	ldr	r2, [r3, #4]
 800bba8:	4b0e      	ldr	r3, [pc, #56]	@ (800bbe4 <vPortFree+0xbc>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	43db      	mvns	r3, r3
 800bbae:	401a      	ands	r2, r3
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bbb4:	f7fe fb66 	bl	800a284 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	685a      	ldr	r2, [r3, #4]
 800bbbc:	4b0a      	ldr	r3, [pc, #40]	@ (800bbe8 <vPortFree+0xc0>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4413      	add	r3, r2
 800bbc2:	4a09      	ldr	r2, [pc, #36]	@ (800bbe8 <vPortFree+0xc0>)
 800bbc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bbc6:	6938      	ldr	r0, [r7, #16]
 800bbc8:	f000 f874 	bl	800bcb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bbcc:	4b07      	ldr	r3, [pc, #28]	@ (800bbec <vPortFree+0xc4>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	4a06      	ldr	r2, [pc, #24]	@ (800bbec <vPortFree+0xc4>)
 800bbd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bbd6:	f7fe fb63 	bl	800a2a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bbda:	bf00      	nop
 800bbdc:	3718      	adds	r7, #24
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	20001f6c 	.word	0x20001f6c
 800bbe8:	20001f5c 	.word	0x20001f5c
 800bbec:	20001f68 	.word	0x20001f68

0800bbf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b085      	sub	sp, #20
 800bbf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bbf6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800bbfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bbfc:	4b27      	ldr	r3, [pc, #156]	@ (800bc9c <prvHeapInit+0xac>)
 800bbfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f003 0307 	and.w	r3, r3, #7
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d00c      	beq.n	800bc24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	3307      	adds	r3, #7
 800bc0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f023 0307 	bic.w	r3, r3, #7
 800bc16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bc18:	68ba      	ldr	r2, [r7, #8]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	1ad3      	subs	r3, r2, r3
 800bc1e:	4a1f      	ldr	r2, [pc, #124]	@ (800bc9c <prvHeapInit+0xac>)
 800bc20:	4413      	add	r3, r2
 800bc22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bc28:	4a1d      	ldr	r2, [pc, #116]	@ (800bca0 <prvHeapInit+0xb0>)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bc2e:	4b1c      	ldr	r3, [pc, #112]	@ (800bca0 <prvHeapInit+0xb0>)
 800bc30:	2200      	movs	r2, #0
 800bc32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	68ba      	ldr	r2, [r7, #8]
 800bc38:	4413      	add	r3, r2
 800bc3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bc3c:	2208      	movs	r2, #8
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	1a9b      	subs	r3, r3, r2
 800bc42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f023 0307 	bic.w	r3, r3, #7
 800bc4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	4a15      	ldr	r2, [pc, #84]	@ (800bca4 <prvHeapInit+0xb4>)
 800bc50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bc52:	4b14      	ldr	r3, [pc, #80]	@ (800bca4 <prvHeapInit+0xb4>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2200      	movs	r2, #0
 800bc58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bc5a:	4b12      	ldr	r3, [pc, #72]	@ (800bca4 <prvHeapInit+0xb4>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	68fa      	ldr	r2, [r7, #12]
 800bc6a:	1ad2      	subs	r2, r2, r3
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc70:	4b0c      	ldr	r3, [pc, #48]	@ (800bca4 <prvHeapInit+0xb4>)
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	4a0a      	ldr	r2, [pc, #40]	@ (800bca8 <prvHeapInit+0xb8>)
 800bc7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	4a09      	ldr	r2, [pc, #36]	@ (800bcac <prvHeapInit+0xbc>)
 800bc86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc88:	4b09      	ldr	r3, [pc, #36]	@ (800bcb0 <prvHeapInit+0xc0>)
 800bc8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bc8e:	601a      	str	r2, [r3, #0]
}
 800bc90:	bf00      	nop
 800bc92:	3714      	adds	r7, #20
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr
 800bc9c:	20001398 	.word	0x20001398
 800bca0:	20001f50 	.word	0x20001f50
 800bca4:	20001f58 	.word	0x20001f58
 800bca8:	20001f60 	.word	0x20001f60
 800bcac:	20001f5c 	.word	0x20001f5c
 800bcb0:	20001f6c 	.word	0x20001f6c

0800bcb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bcbc:	4b28      	ldr	r3, [pc, #160]	@ (800bd60 <prvInsertBlockIntoFreeList+0xac>)
 800bcbe:	60fb      	str	r3, [r7, #12]
 800bcc0:	e002      	b.n	800bcc8 <prvInsertBlockIntoFreeList+0x14>
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	60fb      	str	r3, [r7, #12]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d8f7      	bhi.n	800bcc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	68ba      	ldr	r2, [r7, #8]
 800bcdc:	4413      	add	r3, r2
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d108      	bne.n	800bcf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	685a      	ldr	r2, [r3, #4]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	441a      	add	r2, r3
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	68ba      	ldr	r2, [r7, #8]
 800bd00:	441a      	add	r2, r3
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d118      	bne.n	800bd3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	4b15      	ldr	r3, [pc, #84]	@ (800bd64 <prvInsertBlockIntoFreeList+0xb0>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d00d      	beq.n	800bd32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	685a      	ldr	r2, [r3, #4]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	441a      	add	r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	601a      	str	r2, [r3, #0]
 800bd30:	e008      	b.n	800bd44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bd32:	4b0c      	ldr	r3, [pc, #48]	@ (800bd64 <prvInsertBlockIntoFreeList+0xb0>)
 800bd34:	681a      	ldr	r2, [r3, #0]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	601a      	str	r2, [r3, #0]
 800bd3a:	e003      	b.n	800bd44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681a      	ldr	r2, [r3, #0]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bd44:	68fa      	ldr	r2, [r7, #12]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d002      	beq.n	800bd52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd52:	bf00      	nop
 800bd54:	3714      	adds	r7, #20
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr
 800bd5e:	bf00      	nop
 800bd60:	20001f50 	.word	0x20001f50
 800bd64:	20001f58 	.word	0x20001f58

0800bd68 <memset>:
 800bd68:	4402      	add	r2, r0
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d100      	bne.n	800bd72 <memset+0xa>
 800bd70:	4770      	bx	lr
 800bd72:	f803 1b01 	strb.w	r1, [r3], #1
 800bd76:	e7f9      	b.n	800bd6c <memset+0x4>

0800bd78 <_reclaim_reent>:
 800bd78:	4b29      	ldr	r3, [pc, #164]	@ (800be20 <_reclaim_reent+0xa8>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4283      	cmp	r3, r0
 800bd7e:	b570      	push	{r4, r5, r6, lr}
 800bd80:	4604      	mov	r4, r0
 800bd82:	d04b      	beq.n	800be1c <_reclaim_reent+0xa4>
 800bd84:	69c3      	ldr	r3, [r0, #28]
 800bd86:	b1ab      	cbz	r3, 800bdb4 <_reclaim_reent+0x3c>
 800bd88:	68db      	ldr	r3, [r3, #12]
 800bd8a:	b16b      	cbz	r3, 800bda8 <_reclaim_reent+0x30>
 800bd8c:	2500      	movs	r5, #0
 800bd8e:	69e3      	ldr	r3, [r4, #28]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	5959      	ldr	r1, [r3, r5]
 800bd94:	2900      	cmp	r1, #0
 800bd96:	d13b      	bne.n	800be10 <_reclaim_reent+0x98>
 800bd98:	3504      	adds	r5, #4
 800bd9a:	2d80      	cmp	r5, #128	@ 0x80
 800bd9c:	d1f7      	bne.n	800bd8e <_reclaim_reent+0x16>
 800bd9e:	69e3      	ldr	r3, [r4, #28]
 800bda0:	4620      	mov	r0, r4
 800bda2:	68d9      	ldr	r1, [r3, #12]
 800bda4:	f000 f872 	bl	800be8c <_free_r>
 800bda8:	69e3      	ldr	r3, [r4, #28]
 800bdaa:	6819      	ldr	r1, [r3, #0]
 800bdac:	b111      	cbz	r1, 800bdb4 <_reclaim_reent+0x3c>
 800bdae:	4620      	mov	r0, r4
 800bdb0:	f000 f86c 	bl	800be8c <_free_r>
 800bdb4:	6961      	ldr	r1, [r4, #20]
 800bdb6:	b111      	cbz	r1, 800bdbe <_reclaim_reent+0x46>
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f000 f867 	bl	800be8c <_free_r>
 800bdbe:	69e1      	ldr	r1, [r4, #28]
 800bdc0:	b111      	cbz	r1, 800bdc8 <_reclaim_reent+0x50>
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	f000 f862 	bl	800be8c <_free_r>
 800bdc8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bdca:	b111      	cbz	r1, 800bdd2 <_reclaim_reent+0x5a>
 800bdcc:	4620      	mov	r0, r4
 800bdce:	f000 f85d 	bl	800be8c <_free_r>
 800bdd2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdd4:	b111      	cbz	r1, 800bddc <_reclaim_reent+0x64>
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f000 f858 	bl	800be8c <_free_r>
 800bddc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bdde:	b111      	cbz	r1, 800bde6 <_reclaim_reent+0x6e>
 800bde0:	4620      	mov	r0, r4
 800bde2:	f000 f853 	bl	800be8c <_free_r>
 800bde6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bde8:	b111      	cbz	r1, 800bdf0 <_reclaim_reent+0x78>
 800bdea:	4620      	mov	r0, r4
 800bdec:	f000 f84e 	bl	800be8c <_free_r>
 800bdf0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bdf2:	b111      	cbz	r1, 800bdfa <_reclaim_reent+0x82>
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	f000 f849 	bl	800be8c <_free_r>
 800bdfa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bdfc:	b111      	cbz	r1, 800be04 <_reclaim_reent+0x8c>
 800bdfe:	4620      	mov	r0, r4
 800be00:	f000 f844 	bl	800be8c <_free_r>
 800be04:	6a23      	ldr	r3, [r4, #32]
 800be06:	b14b      	cbz	r3, 800be1c <_reclaim_reent+0xa4>
 800be08:	4620      	mov	r0, r4
 800be0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be0e:	4718      	bx	r3
 800be10:	680e      	ldr	r6, [r1, #0]
 800be12:	4620      	mov	r0, r4
 800be14:	f000 f83a 	bl	800be8c <_free_r>
 800be18:	4631      	mov	r1, r6
 800be1a:	e7bb      	b.n	800bd94 <_reclaim_reent+0x1c>
 800be1c:	bd70      	pop	{r4, r5, r6, pc}
 800be1e:	bf00      	nop
 800be20:	20000024 	.word	0x20000024

0800be24 <__libc_init_array>:
 800be24:	b570      	push	{r4, r5, r6, lr}
 800be26:	4d0d      	ldr	r5, [pc, #52]	@ (800be5c <__libc_init_array+0x38>)
 800be28:	4c0d      	ldr	r4, [pc, #52]	@ (800be60 <__libc_init_array+0x3c>)
 800be2a:	1b64      	subs	r4, r4, r5
 800be2c:	10a4      	asrs	r4, r4, #2
 800be2e:	2600      	movs	r6, #0
 800be30:	42a6      	cmp	r6, r4
 800be32:	d109      	bne.n	800be48 <__libc_init_array+0x24>
 800be34:	4d0b      	ldr	r5, [pc, #44]	@ (800be64 <__libc_init_array+0x40>)
 800be36:	4c0c      	ldr	r4, [pc, #48]	@ (800be68 <__libc_init_array+0x44>)
 800be38:	f000 f87e 	bl	800bf38 <_init>
 800be3c:	1b64      	subs	r4, r4, r5
 800be3e:	10a4      	asrs	r4, r4, #2
 800be40:	2600      	movs	r6, #0
 800be42:	42a6      	cmp	r6, r4
 800be44:	d105      	bne.n	800be52 <__libc_init_array+0x2e>
 800be46:	bd70      	pop	{r4, r5, r6, pc}
 800be48:	f855 3b04 	ldr.w	r3, [r5], #4
 800be4c:	4798      	blx	r3
 800be4e:	3601      	adds	r6, #1
 800be50:	e7ee      	b.n	800be30 <__libc_init_array+0xc>
 800be52:	f855 3b04 	ldr.w	r3, [r5], #4
 800be56:	4798      	blx	r3
 800be58:	3601      	adds	r6, #1
 800be5a:	e7f2      	b.n	800be42 <__libc_init_array+0x1e>
 800be5c:	0800c128 	.word	0x0800c128
 800be60:	0800c128 	.word	0x0800c128
 800be64:	0800c128 	.word	0x0800c128
 800be68:	0800c12c 	.word	0x0800c12c

0800be6c <__retarget_lock_acquire_recursive>:
 800be6c:	4770      	bx	lr

0800be6e <__retarget_lock_release_recursive>:
 800be6e:	4770      	bx	lr

0800be70 <memcpy>:
 800be70:	440a      	add	r2, r1
 800be72:	4291      	cmp	r1, r2
 800be74:	f100 33ff 	add.w	r3, r0, #4294967295
 800be78:	d100      	bne.n	800be7c <memcpy+0xc>
 800be7a:	4770      	bx	lr
 800be7c:	b510      	push	{r4, lr}
 800be7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be86:	4291      	cmp	r1, r2
 800be88:	d1f9      	bne.n	800be7e <memcpy+0xe>
 800be8a:	bd10      	pop	{r4, pc}

0800be8c <_free_r>:
 800be8c:	b538      	push	{r3, r4, r5, lr}
 800be8e:	4605      	mov	r5, r0
 800be90:	2900      	cmp	r1, #0
 800be92:	d041      	beq.n	800bf18 <_free_r+0x8c>
 800be94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be98:	1f0c      	subs	r4, r1, #4
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	bfb8      	it	lt
 800be9e:	18e4      	addlt	r4, r4, r3
 800bea0:	f000 f83e 	bl	800bf20 <__malloc_lock>
 800bea4:	4a1d      	ldr	r2, [pc, #116]	@ (800bf1c <_free_r+0x90>)
 800bea6:	6813      	ldr	r3, [r2, #0]
 800bea8:	b933      	cbnz	r3, 800beb8 <_free_r+0x2c>
 800beaa:	6063      	str	r3, [r4, #4]
 800beac:	6014      	str	r4, [r2, #0]
 800beae:	4628      	mov	r0, r5
 800beb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800beb4:	f000 b83a 	b.w	800bf2c <__malloc_unlock>
 800beb8:	42a3      	cmp	r3, r4
 800beba:	d908      	bls.n	800bece <_free_r+0x42>
 800bebc:	6820      	ldr	r0, [r4, #0]
 800bebe:	1821      	adds	r1, r4, r0
 800bec0:	428b      	cmp	r3, r1
 800bec2:	bf01      	itttt	eq
 800bec4:	6819      	ldreq	r1, [r3, #0]
 800bec6:	685b      	ldreq	r3, [r3, #4]
 800bec8:	1809      	addeq	r1, r1, r0
 800beca:	6021      	streq	r1, [r4, #0]
 800becc:	e7ed      	b.n	800beaa <_free_r+0x1e>
 800bece:	461a      	mov	r2, r3
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	b10b      	cbz	r3, 800bed8 <_free_r+0x4c>
 800bed4:	42a3      	cmp	r3, r4
 800bed6:	d9fa      	bls.n	800bece <_free_r+0x42>
 800bed8:	6811      	ldr	r1, [r2, #0]
 800beda:	1850      	adds	r0, r2, r1
 800bedc:	42a0      	cmp	r0, r4
 800bede:	d10b      	bne.n	800bef8 <_free_r+0x6c>
 800bee0:	6820      	ldr	r0, [r4, #0]
 800bee2:	4401      	add	r1, r0
 800bee4:	1850      	adds	r0, r2, r1
 800bee6:	4283      	cmp	r3, r0
 800bee8:	6011      	str	r1, [r2, #0]
 800beea:	d1e0      	bne.n	800beae <_free_r+0x22>
 800beec:	6818      	ldr	r0, [r3, #0]
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	6053      	str	r3, [r2, #4]
 800bef2:	4408      	add	r0, r1
 800bef4:	6010      	str	r0, [r2, #0]
 800bef6:	e7da      	b.n	800beae <_free_r+0x22>
 800bef8:	d902      	bls.n	800bf00 <_free_r+0x74>
 800befa:	230c      	movs	r3, #12
 800befc:	602b      	str	r3, [r5, #0]
 800befe:	e7d6      	b.n	800beae <_free_r+0x22>
 800bf00:	6820      	ldr	r0, [r4, #0]
 800bf02:	1821      	adds	r1, r4, r0
 800bf04:	428b      	cmp	r3, r1
 800bf06:	bf04      	itt	eq
 800bf08:	6819      	ldreq	r1, [r3, #0]
 800bf0a:	685b      	ldreq	r3, [r3, #4]
 800bf0c:	6063      	str	r3, [r4, #4]
 800bf0e:	bf04      	itt	eq
 800bf10:	1809      	addeq	r1, r1, r0
 800bf12:	6021      	streq	r1, [r4, #0]
 800bf14:	6054      	str	r4, [r2, #4]
 800bf16:	e7ca      	b.n	800beae <_free_r+0x22>
 800bf18:	bd38      	pop	{r3, r4, r5, pc}
 800bf1a:	bf00      	nop
 800bf1c:	200020ac 	.word	0x200020ac

0800bf20 <__malloc_lock>:
 800bf20:	4801      	ldr	r0, [pc, #4]	@ (800bf28 <__malloc_lock+0x8>)
 800bf22:	f7ff bfa3 	b.w	800be6c <__retarget_lock_acquire_recursive>
 800bf26:	bf00      	nop
 800bf28:	200020a8 	.word	0x200020a8

0800bf2c <__malloc_unlock>:
 800bf2c:	4801      	ldr	r0, [pc, #4]	@ (800bf34 <__malloc_unlock+0x8>)
 800bf2e:	f7ff bf9e 	b.w	800be6e <__retarget_lock_release_recursive>
 800bf32:	bf00      	nop
 800bf34:	200020a8 	.word	0x200020a8

0800bf38 <_init>:
 800bf38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf3a:	bf00      	nop
 800bf3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf3e:	bc08      	pop	{r3}
 800bf40:	469e      	mov	lr, r3
 800bf42:	4770      	bx	lr

0800bf44 <_fini>:
 800bf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf46:	bf00      	nop
 800bf48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf4a:	bc08      	pop	{r3}
 800bf4c:	469e      	mov	lr, r3
 800bf4e:	4770      	bx	lr
