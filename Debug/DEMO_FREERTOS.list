
DEMO_FREERTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aeac  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  0800b06c  0800b06c  0000c06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b240  0800b240  0000d064  2**0
                  CONTENTS
  4 .ARM          00000008  0800b240  0800b240  0000c240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b248  0800b248  0000d064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b248  0800b248  0000c248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b24c  0800b24c  0000c24c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800b250  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ff0  20000064  0800b2b4  0000d064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002054  0800b2b4  0000e054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a88a  00000000  00000000  0000d094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c07  00000000  00000000  0003791e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023b0  00000000  00000000  0003c528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001be3  00000000  00000000  0003e8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005c97  00000000  00000000  000404bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029c3c  00000000  00000000  00046152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001336a9  00000000  00000000  0006fd8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a3437  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ef4  00000000  00000000  001a347c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  001ad370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000064 	.word	0x20000064
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b054 	.word	0x0800b054

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000068 	.word	0x20000068
 80001fc:	0800b054 	.word	0x0800b054

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f001 fade 	bl	8001b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f876 	bl	8000688 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800059c:	f000 f8d6 	bl	800074c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 fbee 	bl	8000d80 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005a4:	f000 f902 	bl	80007ac <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80005a8:	f000 f964 	bl	8000874 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 80005ac:	f000 f99a 	bl	80008e4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005b0:	f000 f9d8 	bl	8000964 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80005b4:	f000 fa16 	bl	80009e4 <MX_OCTOSPI1_Init>
  MX_SPI3_Init();
 80005b8:	f000 fa6a 	bl	8000a90 <MX_SPI3_Init>
  MX_UART4_Init();
 80005bc:	f000 faa6 	bl	8000b0c <MX_UART4_Init>
  MX_USART1_UART_Init();
 80005c0:	f000 faf0 	bl	8000ba4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005c4:	f000 fb3a 	bl	8000c3c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005c8:	f000 fb86 	bl	8000cd8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80005cc:	f000 fbd0 	bl	8000d70 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005d0:	f006 fc18 	bl	8006e04 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 0, &myBinarySem01_attributes);
 80005d4:	4a1c      	ldr	r2, [pc, #112]	@ (8000648 <main+0xb8>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	2001      	movs	r0, #1
 80005da:	f006 fd0a 	bl	8006ff2 <osSemaphoreNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a1a      	ldr	r2, [pc, #104]	@ (800064c <main+0xbc>)
 80005e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	osSemaphoreRelease(myBinarySem01Handle);
 80005e4:	4b19      	ldr	r3, [pc, #100]	@ (800064c <main+0xbc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f006 fddd 	bl	80071a8 <osSemaphoreRelease>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myDataQueue */
  myDataQueueHandle = osMessageQueueNew (2, sizeof(uint16_t), &myDataQueue_attributes);
 80005ee:	4a18      	ldr	r2, [pc, #96]	@ (8000650 <main+0xc0>)
 80005f0:	2102      	movs	r1, #2
 80005f2:	2002      	movs	r0, #2
 80005f4:	f006 fe1c 	bl	8007230 <osMessageQueueNew>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a16      	ldr	r2, [pc, #88]	@ (8000654 <main+0xc4>)
 80005fc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  myLedTaskHandle = osThreadNew(LED_flash_task_run, NULL, &myLedTask_attributes);
 80005fe:	4a16      	ldr	r2, [pc, #88]	@ (8000658 <main+0xc8>)
 8000600:	2100      	movs	r1, #0
 8000602:	4816      	ldr	r0, [pc, #88]	@ (800065c <main+0xcc>)
 8000604:	f006 fc48 	bl	8006e98 <osThreadNew>
 8000608:	4603      	mov	r3, r0
 800060a:	4a15      	ldr	r2, [pc, #84]	@ (8000660 <main+0xd0>)
 800060c:	6013      	str	r3, [r2, #0]

  myUART_RX_TaskHandle = osThreadNew(UART_RX_task_run, NULL, &myUART_RX_TaskHandle_attributes);
 800060e:	4a15      	ldr	r2, [pc, #84]	@ (8000664 <main+0xd4>)
 8000610:	2100      	movs	r1, #0
 8000612:	4815      	ldr	r0, [pc, #84]	@ (8000668 <main+0xd8>)
 8000614:	f006 fc40 	bl	8006e98 <osThreadNew>
 8000618:	4603      	mov	r3, r0
 800061a:	4a14      	ldr	r2, [pc, #80]	@ (800066c <main+0xdc>)
 800061c:	6013      	str	r3, [r2, #0]

  myUartSendTaskHandle = osThreadNew(UART_send_task_run, NULL, &myUartSendTask_attributes);
 800061e:	4a14      	ldr	r2, [pc, #80]	@ (8000670 <main+0xe0>)
 8000620:	2100      	movs	r1, #0
 8000622:	4814      	ldr	r0, [pc, #80]	@ (8000674 <main+0xe4>)
 8000624:	f006 fc38 	bl	8006e98 <osThreadNew>
 8000628:	4603      	mov	r3, r0
 800062a:	4a13      	ldr	r2, [pc, #76]	@ (8000678 <main+0xe8>)
 800062c:	6013      	str	r3, [r2, #0]

  myTempReadingTaskHandle = osThreadNew(TEMP_Read,NULL, &myTempReadingTaskHandle_attributes);
 800062e:	4a13      	ldr	r2, [pc, #76]	@ (800067c <main+0xec>)
 8000630:	2100      	movs	r1, #0
 8000632:	4813      	ldr	r0, [pc, #76]	@ (8000680 <main+0xf0>)
 8000634:	f006 fc30 	bl	8006e98 <osThreadNew>
 8000638:	4603      	mov	r3, r0
 800063a:	4a12      	ldr	r2, [pc, #72]	@ (8000684 <main+0xf4>)
 800063c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800063e:	f006 fc05 	bl	8006e4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000642:	bf00      	nop
 8000644:	e7fd      	b.n	8000642 <main+0xb2>
 8000646:	bf00      	nop
 8000648:	0800b168 	.word	0x0800b168
 800064c:	200004dc 	.word	0x200004dc
 8000650:	0800b150 	.word	0x0800b150
 8000654:	200004d8 	.word	0x200004d8
 8000658:	0800b0e4 	.word	0x0800b0e4
 800065c:	08001029 	.word	0x08001029
 8000660:	200004cc 	.word	0x200004cc
 8000664:	0800b12c 	.word	0x0800b12c
 8000668:	08001149 	.word	0x08001149
 800066c:	200004d4 	.word	0x200004d4
 8000670:	0800b108 	.word	0x0800b108
 8000674:	080010e1 	.word	0x080010e1
 8000678:	200004d0 	.word	0x200004d0
 800067c:	0800b178 	.word	0x0800b178
 8000680:	08001199 	.word	0x08001199
 8000684:	200004e0 	.word	0x200004e0

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b096      	sub	sp, #88	@ 0x58
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2244      	movs	r2, #68	@ 0x44
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f00a f806 	bl	800a6a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	463b      	mov	r3, r7
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80006aa:	2000      	movs	r0, #0
 80006ac:	f003 fb7a 	bl	8003da4 <HAL_PWREx_ControlVoltageScaling>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x32>
  {
    Error_Handler();
 80006b6:	f000 fdb3 	bl	8001220 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006ba:	f003 fb43 	bl	8003d44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006be:	4b22      	ldr	r3, [pc, #136]	@ (8000748 <SystemClock_Config+0xc0>)
 80006c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80006c4:	4a20      	ldr	r2, [pc, #128]	@ (8000748 <SystemClock_Config+0xc0>)
 80006c6:	f023 0318 	bic.w	r3, r3, #24
 80006ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006ce:	2314      	movs	r3, #20
 80006d0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006d2:	2301      	movs	r3, #1
 80006d4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006d6:	2301      	movs	r3, #1
 80006d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006de:	2360      	movs	r3, #96	@ 0x60
 80006e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006e6:	2301      	movs	r3, #1
 80006e8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ea:	2301      	movs	r3, #1
 80006ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80006ee:	233c      	movs	r3, #60	@ 0x3c
 80006f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4618      	mov	r0, r3
 8000704:	f003 fbf2 	bl	8003eec <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800070e:	f000 fd87 	bl	8001220 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	230f      	movs	r3, #15
 8000714:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2303      	movs	r3, #3
 8000718:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000726:	463b      	mov	r3, r7
 8000728:	2105      	movs	r1, #5
 800072a:	4618      	mov	r0, r3
 800072c:	f003 fff8 	bl	8004720 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000736:	f000 fd73 	bl	8001220 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800073a:	f004 fe11 	bl	8005360 <HAL_RCCEx_EnableMSIPLLMode>
}
 800073e:	bf00      	nop
 8000740:	3758      	adds	r7, #88	@ 0x58
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40021000 	.word	0x40021000

0800074c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b0a6      	sub	sp, #152	@ 0x98
 8000750:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2294      	movs	r2, #148	@ 0x94
 8000756:	2100      	movs	r1, #0
 8000758:	4618      	mov	r0, r3
 800075a:	f009 ffa5 	bl	800a6a8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800075e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000762:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000764:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000768:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800076c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000770:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000772:	2301      	movs	r3, #1
 8000774:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000776:	2301      	movs	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800077a:	2318      	movs	r3, #24
 800077c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800077e:	2302      	movs	r3, #2
 8000780:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000782:	2302      	movs	r3, #2
 8000784:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000786:	2302      	movs	r3, #2
 8000788:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800078a:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 800078e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4618      	mov	r0, r3
 8000794:	f004 fab4 	bl	8004d00 <HAL_RCCEx_PeriphCLKConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800079e:	f000 fd3f 	bl	8001220 <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3798      	adds	r7, #152	@ 0x98
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
 80007c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007c2:	4b29      	ldr	r3, [pc, #164]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007c4:	4a29      	ldr	r2, [pc, #164]	@ (800086c <MX_ADC1_Init+0xc0>)
 80007c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007c8:	4b27      	ldr	r3, [pc, #156]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ce:	4b26      	ldr	r3, [pc, #152]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d4:	4b24      	ldr	r3, [pc, #144]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007da:	4b23      	ldr	r3, [pc, #140]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e0:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007e2:	2204      	movs	r2, #4
 80007e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e6:	4b20      	ldr	r3, [pc, #128]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000800:	4b19      	ldr	r3, [pc, #100]	@ (8000868 <MX_ADC1_Init+0xbc>)
 8000802:	2200      	movs	r2, #0
 8000804:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000806:	4b18      	ldr	r3, [pc, #96]	@ (8000868 <MX_ADC1_Init+0xbc>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800080c:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_ADC1_Init+0xbc>)
 800080e:	2200      	movs	r2, #0
 8000810:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000814:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_ADC1_Init+0xbc>)
 8000816:	2200      	movs	r2, #0
 8000818:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800081a:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <MX_ADC1_Init+0xbc>)
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000822:	4811      	ldr	r0, [pc, #68]	@ (8000868 <MX_ADC1_Init+0xbc>)
 8000824:	f001 fb6e 	bl	8001f04 <HAL_ADC_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800082e:	f000 fcf7 	bl	8001220 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000832:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_ADC1_Init+0xc4>)
 8000834:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000836:	2306      	movs	r3, #6
 8000838:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800083e:	237f      	movs	r3, #127	@ 0x7f
 8000840:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000842:	2304      	movs	r3, #4
 8000844:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	@ (8000868 <MX_ADC1_Init+0xbc>)
 8000850:	f001 fc9e 	bl	8002190 <HAL_ADC_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800085a:	f000 fce1 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000080 	.word	0x20000080
 800086c:	50040000 	.word	0x50040000
 8000870:	04300002 	.word	0x04300002

08000874 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000878:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <MX_DFSDM1_Init+0x68>)
 800087a:	4a19      	ldr	r2, [pc, #100]	@ (80008e0 <MX_DFSDM1_Init+0x6c>)
 800087c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800087e:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <MX_DFSDM1_Init+0x68>)
 8000880:	2201      	movs	r2, #1
 8000882:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000884:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <MX_DFSDM1_Init+0x68>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_DFSDM1_Init+0x68>)
 800088c:	2202      	movs	r2, #2
 800088e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_DFSDM1_Init+0x68>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_DFSDM1_Init+0x68>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800089c:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_DFSDM1_Init+0x68>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_DFSDM1_Init+0x68>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_DFSDM1_Init+0x68>)
 80008aa:	2204      	movs	r2, #4
 80008ac:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <MX_DFSDM1_Init+0x68>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_DFSDM1_Init+0x68>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <MX_DFSDM1_Init+0x68>)
 80008bc:	2200      	movs	r2, #0
 80008be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_DFSDM1_Init+0x68>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <MX_DFSDM1_Init+0x68>)
 80008c8:	f002 f940 	bl	8002b4c <HAL_DFSDM_ChannelInit>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80008d2:	f000 fca5 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000e8 	.word	0x200000e8
 80008e0:	40016040 	.word	0x40016040

080008e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <MX_I2C1_Init+0x74>)
 80008ea:	4a1c      	ldr	r2, [pc, #112]	@ (800095c <MX_I2C1_Init+0x78>)
 80008ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <MX_I2C1_Init+0x74>)
 80008f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000960 <MX_I2C1_Init+0x7c>)
 80008f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008f4:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <MX_I2C1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008fa:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <MX_I2C1_Init+0x74>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000900:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <MX_I2C1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000906:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <MX_I2C1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800090c:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <MX_I2C1_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000912:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <MX_I2C1_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <MX_I2C1_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800091e:	480e      	ldr	r0, [pc, #56]	@ (8000958 <MX_I2C1_Init+0x74>)
 8000920:	f002 fc07 	bl	8003132 <HAL_I2C_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800092a:	f000 fc79 	bl	8001220 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800092e:	2100      	movs	r1, #0
 8000930:	4809      	ldr	r0, [pc, #36]	@ (8000958 <MX_I2C1_Init+0x74>)
 8000932:	f002 fc99 	bl	8003268 <HAL_I2CEx_ConfigAnalogFilter>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800093c:	f000 fc70 	bl	8001220 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000940:	2100      	movs	r1, #0
 8000942:	4805      	ldr	r0, [pc, #20]	@ (8000958 <MX_I2C1_Init+0x74>)
 8000944:	f002 fcdb 	bl	80032fe <HAL_I2CEx_ConfigDigitalFilter>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800094e:	f000 fc67 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000120 	.word	0x20000120
 800095c:	40005400 	.word	0x40005400
 8000960:	307075b1 	.word	0x307075b1

08000964 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000968:	4b1b      	ldr	r3, [pc, #108]	@ (80009d8 <MX_I2C2_Init+0x74>)
 800096a:	4a1c      	ldr	r2, [pc, #112]	@ (80009dc <MX_I2C2_Init+0x78>)
 800096c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800096e:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <MX_I2C2_Init+0x74>)
 8000970:	4a1b      	ldr	r2, [pc, #108]	@ (80009e0 <MX_I2C2_Init+0x7c>)
 8000972:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000974:	4b18      	ldr	r3, [pc, #96]	@ (80009d8 <MX_I2C2_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800097a:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <MX_I2C2_Init+0x74>)
 800097c:	2201      	movs	r2, #1
 800097e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000980:	4b15      	ldr	r3, [pc, #84]	@ (80009d8 <MX_I2C2_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000986:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <MX_I2C2_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800098c:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <MX_I2C2_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <MX_I2C2_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000998:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <MX_I2C2_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800099e:	480e      	ldr	r0, [pc, #56]	@ (80009d8 <MX_I2C2_Init+0x74>)
 80009a0:	f002 fbc7 	bl	8003132 <HAL_I2C_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009aa:	f000 fc39 	bl	8001220 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4809      	ldr	r0, [pc, #36]	@ (80009d8 <MX_I2C2_Init+0x74>)
 80009b2:	f002 fc59 	bl	8003268 <HAL_I2CEx_ConfigAnalogFilter>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009bc:	f000 fc30 	bl	8001220 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009c0:	2100      	movs	r1, #0
 80009c2:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <MX_I2C2_Init+0x74>)
 80009c4:	f002 fc9b 	bl	80032fe <HAL_I2CEx_ConfigDigitalFilter>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009ce:	f000 fc27 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000174 	.word	0x20000174
 80009dc:	40005800 	.word	0x40005800
 80009e0:	307075b1 	.word	0x307075b1

080009e4 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80009f8:	4b23      	ldr	r3, [pc, #140]	@ (8000a88 <MX_OCTOSPI1_Init+0xa4>)
 80009fa:	4a24      	ldr	r2, [pc, #144]	@ (8000a8c <MX_OCTOSPI1_Init+0xa8>)
 80009fc:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80009fe:	4b22      	ldr	r3, [pc, #136]	@ (8000a88 <MX_OCTOSPI1_Init+0xa4>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000a04:	4b20      	ldr	r3, [pc, #128]	@ (8000a88 <MX_OCTOSPI1_Init+0xa4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <MX_OCTOSPI1_Init+0xa4>)
 8000a0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000a10:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000a12:	4b1d      	ldr	r3, [pc, #116]	@ (8000a88 <MX_OCTOSPI1_Init+0xa4>)
 8000a14:	2220      	movs	r2, #32
 8000a16:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	@ (8000a88 <MX_OCTOSPI1_Init+0xa4>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <MX_OCTOSPI1_Init+0xa4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000a24:	4b18      	ldr	r3, [pc, #96]	@ (8000a88 <MX_OCTOSPI1_Init+0xa4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <MX_OCTOSPI1_Init+0xa4>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000a30:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <MX_OCTOSPI1_Init+0xa4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000a36:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <MX_OCTOSPI1_Init+0xa4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <MX_OCTOSPI1_Init+0xa4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000a42:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_OCTOSPI1_Init+0xa4>)
 8000a44:	2208      	movs	r2, #8
 8000a46:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000a48:	480f      	ldr	r0, [pc, #60]	@ (8000a88 <MX_OCTOSPI1_Init+0xa4>)
 8000a4a:	f002 fca5 	bl	8003398 <HAL_OSPI_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000a54:	f000 fbe4 	bl	8001220 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000a60:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000a64:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4806      	ldr	r0, [pc, #24]	@ (8000a88 <MX_OCTOSPI1_Init+0xa4>)
 8000a70:	f002 fd4c 	bl	800350c <HAL_OSPIM_Config>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000a7a:	f000 fbd1 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200001c8 	.word	0x200001c8
 8000a8c:	a0001000 	.word	0xa0001000

08000a90 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <MX_SPI3_Init+0x74>)
 8000a96:	4a1c      	ldr	r2, [pc, #112]	@ (8000b08 <MX_SPI3_Init+0x78>)
 8000a98:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b04 <MX_SPI3_Init+0x74>)
 8000a9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000aa0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000aa2:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <MX_SPI3_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000aa8:	4b16      	ldr	r3, [pc, #88]	@ (8000b04 <MX_SPI3_Init+0x74>)
 8000aaa:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000aae:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <MX_SPI3_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <MX_SPI3_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000abc:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <MX_SPI3_Init+0x74>)
 8000abe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ac2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <MX_SPI3_Init+0x74>)
 8000ac6:	2208      	movs	r2, #8
 8000ac8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <MX_SPI3_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <MX_SPI3_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <MX_SPI3_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000adc:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <MX_SPI3_Init+0x74>)
 8000ade:	2207      	movs	r2, #7
 8000ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <MX_SPI3_Init+0x74>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <MX_SPI3_Init+0x74>)
 8000aea:	2208      	movs	r2, #8
 8000aec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <MX_SPI3_Init+0x74>)
 8000af0:	f004 fe2e 	bl	8005750 <HAL_SPI_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000afa:	f000 fb91 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000218 	.word	0x20000218
 8000b08:	40003c00 	.word	0x40003c00

08000b0c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b10:	4b22      	ldr	r3, [pc, #136]	@ (8000b9c <MX_UART4_Init+0x90>)
 8000b12:	4a23      	ldr	r2, [pc, #140]	@ (8000ba0 <MX_UART4_Init+0x94>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b16:	4b21      	ldr	r3, [pc, #132]	@ (8000b9c <MX_UART4_Init+0x90>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b1c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b9c <MX_UART4_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b1d      	ldr	r3, [pc, #116]	@ (8000b9c <MX_UART4_Init+0x90>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <MX_UART4_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <MX_UART4_Init+0x90>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <MX_UART4_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <MX_UART4_Init+0x90>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b42:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <MX_UART4_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b48:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <MX_UART4_Init+0x90>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <MX_UART4_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b54:	4811      	ldr	r0, [pc, #68]	@ (8000b9c <MX_UART4_Init+0x90>)
 8000b56:	f005 f951 	bl	8005dfc <HAL_UART_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000b60:	f000 fb5e 	bl	8001220 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b64:	2100      	movs	r1, #0
 8000b66:	480d      	ldr	r0, [pc, #52]	@ (8000b9c <MX_UART4_Init+0x90>)
 8000b68:	f006 f83e 	bl	8006be8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000b72:	f000 fb55 	bl	8001220 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b76:	2100      	movs	r1, #0
 8000b78:	4808      	ldr	r0, [pc, #32]	@ (8000b9c <MX_UART4_Init+0x90>)
 8000b7a:	f006 f873 	bl	8006c64 <HAL_UARTEx_SetRxFifoThreshold>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000b84:	f000 fb4c 	bl	8001220 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	@ (8000b9c <MX_UART4_Init+0x90>)
 8000b8a:	f005 fff4 	bl	8006b76 <HAL_UARTEx_DisableFifoMode>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000b94:	f000 fb44 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2000027c 	.word	0x2000027c
 8000ba0:	40004c00 	.word	0x40004c00

08000ba4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ba8:	4b22      	ldr	r3, [pc, #136]	@ (8000c34 <MX_USART1_UART_Init+0x90>)
 8000baa:	4a23      	ldr	r2, [pc, #140]	@ (8000c38 <MX_USART1_UART_Init+0x94>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bae:	4b21      	ldr	r3, [pc, #132]	@ (8000c34 <MX_USART1_UART_Init+0x90>)
 8000bb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <MX_USART1_UART_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <MX_USART1_UART_Init+0x90>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <MX_USART1_UART_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <MX_USART1_UART_Init+0x90>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <MX_USART1_UART_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <MX_USART1_UART_Init+0x90>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bda:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <MX_USART1_UART_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be0:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <MX_USART1_UART_Init+0x90>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be6:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <MX_USART1_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bec:	4811      	ldr	r0, [pc, #68]	@ (8000c34 <MX_USART1_UART_Init+0x90>)
 8000bee:	f005 f905 	bl	8005dfc <HAL_UART_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bf8:	f000 fb12 	bl	8001220 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	480d      	ldr	r0, [pc, #52]	@ (8000c34 <MX_USART1_UART_Init+0x90>)
 8000c00:	f005 fff2 	bl	8006be8 <HAL_UARTEx_SetTxFifoThreshold>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c0a:	f000 fb09 	bl	8001220 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4808      	ldr	r0, [pc, #32]	@ (8000c34 <MX_USART1_UART_Init+0x90>)
 8000c12:	f006 f827 	bl	8006c64 <HAL_UARTEx_SetRxFifoThreshold>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c1c:	f000 fb00 	bl	8001220 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	@ (8000c34 <MX_USART1_UART_Init+0x90>)
 8000c22:	f005 ffa8 	bl	8006b76 <HAL_UARTEx_DisableFifoMode>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c2c:	f000 faf8 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000310 	.word	0x20000310
 8000c38:	40013800 	.word	0x40013800

08000c3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c40:	4b23      	ldr	r3, [pc, #140]	@ (8000cd0 <MX_USART2_UART_Init+0x94>)
 8000c42:	4a24      	ldr	r2, [pc, #144]	@ (8000cd4 <MX_USART2_UART_Init+0x98>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c46:	4b22      	ldr	r3, [pc, #136]	@ (8000cd0 <MX_USART2_UART_Init+0x94>)
 8000c48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b20      	ldr	r3, [pc, #128]	@ (8000cd0 <MX_USART2_UART_Init+0x94>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd0 <MX_USART2_UART_Init+0x94>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <MX_USART2_UART_Init+0x94>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <MX_USART2_UART_Init+0x94>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <MX_USART2_UART_Init+0x94>)
 8000c68:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c6c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <MX_USART2_UART_Init+0x94>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c74:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <MX_USART2_UART_Init+0x94>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c7a:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <MX_USART2_UART_Init+0x94>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c80:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <MX_USART2_UART_Init+0x94>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c86:	4812      	ldr	r0, [pc, #72]	@ (8000cd0 <MX_USART2_UART_Init+0x94>)
 8000c88:	f005 f8b8 	bl	8005dfc <HAL_UART_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000c92:	f000 fac5 	bl	8001220 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c96:	2100      	movs	r1, #0
 8000c98:	480d      	ldr	r0, [pc, #52]	@ (8000cd0 <MX_USART2_UART_Init+0x94>)
 8000c9a:	f005 ffa5 	bl	8006be8 <HAL_UARTEx_SetTxFifoThreshold>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000ca4:	f000 fabc 	bl	8001220 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4809      	ldr	r0, [pc, #36]	@ (8000cd0 <MX_USART2_UART_Init+0x94>)
 8000cac:	f005 ffda 	bl	8006c64 <HAL_UARTEx_SetRxFifoThreshold>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000cb6:	f000 fab3 	bl	8001220 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <MX_USART2_UART_Init+0x94>)
 8000cbc:	f005 ff5b 	bl	8006b76 <HAL_UARTEx_DisableFifoMode>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000cc6:	f000 faab 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200003a4 	.word	0x200003a4
 8000cd4:	40004400 	.word	0x40004400

08000cd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cdc:	4b22      	ldr	r3, [pc, #136]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000cde:	4a23      	ldr	r2, [pc, #140]	@ (8000d6c <MX_USART3_UART_Init+0x94>)
 8000ce0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ce2:	4b21      	ldr	r3, [pc, #132]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000ce4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ce8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cea:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000cfe:	220c      	movs	r2, #12
 8000d00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d02:	4b19      	ldr	r3, [pc, #100]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d08:	4b17      	ldr	r3, [pc, #92]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d0e:	4b16      	ldr	r3, [pc, #88]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d14:	4b14      	ldr	r3, [pc, #80]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d20:	4811      	ldr	r0, [pc, #68]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d22:	f005 f86b 	bl	8005dfc <HAL_UART_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d2c:	f000 fa78 	bl	8001220 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d30:	2100      	movs	r1, #0
 8000d32:	480d      	ldr	r0, [pc, #52]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d34:	f005 ff58 	bl	8006be8 <HAL_UARTEx_SetTxFifoThreshold>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d3e:	f000 fa6f 	bl	8001220 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d42:	2100      	movs	r1, #0
 8000d44:	4808      	ldr	r0, [pc, #32]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d46:	f005 ff8d 	bl	8006c64 <HAL_UARTEx_SetRxFifoThreshold>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d50:	f000 fa66 	bl	8001220 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d54:	4804      	ldr	r0, [pc, #16]	@ (8000d68 <MX_USART3_UART_Init+0x90>)
 8000d56:	f005 ff0e 	bl	8006b76 <HAL_UARTEx_DisableFifoMode>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d60:	f000 fa5e 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000438 	.word	0x20000438
 8000d6c:	40004800 	.word	0x40004800

08000d70 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08c      	sub	sp, #48	@ 0x30
 8000d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d96:	4b9f      	ldr	r3, [pc, #636]	@ (8001014 <MX_GPIO_Init+0x294>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	4a9e      	ldr	r2, [pc, #632]	@ (8001014 <MX_GPIO_Init+0x294>)
 8000d9c:	f043 0310 	orr.w	r3, r3, #16
 8000da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da2:	4b9c      	ldr	r3, [pc, #624]	@ (8001014 <MX_GPIO_Init+0x294>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da6:	f003 0310 	and.w	r3, r3, #16
 8000daa:	61bb      	str	r3, [r7, #24]
 8000dac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dae:	4b99      	ldr	r3, [pc, #612]	@ (8001014 <MX_GPIO_Init+0x294>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db2:	4a98      	ldr	r2, [pc, #608]	@ (8001014 <MX_GPIO_Init+0x294>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dba:	4b96      	ldr	r3, [pc, #600]	@ (8001014 <MX_GPIO_Init+0x294>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc6:	4b93      	ldr	r3, [pc, #588]	@ (8001014 <MX_GPIO_Init+0x294>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dca:	4a92      	ldr	r2, [pc, #584]	@ (8001014 <MX_GPIO_Init+0x294>)
 8000dcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd2:	4b90      	ldr	r3, [pc, #576]	@ (8001014 <MX_GPIO_Init+0x294>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b8d      	ldr	r3, [pc, #564]	@ (8001014 <MX_GPIO_Init+0x294>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de2:	4a8c      	ldr	r2, [pc, #560]	@ (8001014 <MX_GPIO_Init+0x294>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dea:	4b8a      	ldr	r3, [pc, #552]	@ (8001014 <MX_GPIO_Init+0x294>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b87      	ldr	r3, [pc, #540]	@ (8001014 <MX_GPIO_Init+0x294>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfa:	4a86      	ldr	r2, [pc, #536]	@ (8001014 <MX_GPIO_Init+0x294>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e02:	4b84      	ldr	r3, [pc, #528]	@ (8001014 <MX_GPIO_Init+0x294>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0e:	4b81      	ldr	r3, [pc, #516]	@ (8001014 <MX_GPIO_Init+0x294>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e12:	4a80      	ldr	r2, [pc, #512]	@ (8001014 <MX_GPIO_Init+0x294>)
 8000e14:	f043 0308 	orr.w	r3, r3, #8
 8000e18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e1a:	4b7e      	ldr	r3, [pc, #504]	@ (8001014 <MX_GPIO_Init+0x294>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1e:	f003 0308 	and.w	r3, r3, #8
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f240 1105 	movw	r1, #261	@ 0x105
 8000e2c:	487a      	ldr	r0, [pc, #488]	@ (8001018 <MX_GPIO_Init+0x298>)
 8000e2e:	f002 f92b 	bl	8003088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|GPIO_PIN_5
 8000e32:	2200      	movs	r2, #0
 8000e34:	f248 113c 	movw	r1, #33084	@ 0x813c
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3c:	f002 f924 	bl	8003088 <HAL_GPIO_WritePin>
                          |SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e40:	2200      	movs	r2, #0
 8000e42:	f24f 0134 	movw	r1, #61492	@ 0xf034
 8000e46:	4875      	ldr	r0, [pc, #468]	@ (800101c <MX_GPIO_Init+0x29c>)
 8000e48:	f002 f91e 	bl	8003088 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f242 0183 	movw	r1, #8323	@ 0x2083
 8000e52:	4873      	ldr	r0, [pc, #460]	@ (8001020 <MX_GPIO_Init+0x2a0>)
 8000e54:	f002 f918 	bl	8003088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000e5e:	4871      	ldr	r0, [pc, #452]	@ (8001024 <MX_GPIO_Init+0x2a4>)
 8000e60:	f002 f912 	bl	8003088 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000e64:	f240 1305 	movw	r3, #261	@ 0x105
 8000e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4866      	ldr	r0, [pc, #408]	@ (8001018 <MX_GPIO_Init+0x298>)
 8000e7e:	f001 ff71 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8000e82:	237a      	movs	r3, #122	@ 0x7a
 8000e84:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e86:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	4860      	ldr	r0, [pc, #384]	@ (8001018 <MX_GPIO_Init+0x298>)
 8000e98:	f001 ff64 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000e9c:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 8000ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ea6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	485c      	ldr	r0, [pc, #368]	@ (8001024 <MX_GPIO_Init+0x2a4>)
 8000eb4:	f001 ff56 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin PA5
                           SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|GPIO_PIN_5
 8000eb8:	f248 133c 	movw	r3, #33084	@ 0x813c
 8000ebc:	61fb      	str	r3, [r7, #28]
                          |SPBTLE_RF_RST_Pin|ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed4:	f001 ff46 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000ed8:	23c0      	movs	r3, #192	@ 0xc0
 8000eda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ee8:	2305      	movs	r3, #5
 8000eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef6:	f001 ff35 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000efa:	2301      	movs	r3, #1
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000efe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4843      	ldr	r0, [pc, #268]	@ (800101c <MX_GPIO_Init+0x29c>)
 8000f10:	f001 ff28 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000f14:	2302      	movs	r3, #2
 8000f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f24:	2302      	movs	r3, #2
 8000f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	483b      	ldr	r0, [pc, #236]	@ (800101c <MX_GPIO_Init+0x29c>)
 8000f30:	f001 ff18 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f34:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000f38:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4833      	ldr	r0, [pc, #204]	@ (800101c <MX_GPIO_Init+0x29c>)
 8000f4e:	f001 ff09 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8000f52:	f64d 4304 	movw	r3, #56324	@ 0xdc04
 8000f56:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f58:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4619      	mov	r1, r3
 8000f68:	482d      	ldr	r0, [pc, #180]	@ (8001020 <MX_GPIO_Init+0x2a0>)
 8000f6a:	f001 fefb 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000f6e:	f242 0383 	movw	r3, #8323	@ 0x2083
 8000f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4619      	mov	r1, r3
 8000f86:	4826      	ldr	r0, [pc, #152]	@ (8001020 <MX_GPIO_Init+0x2a0>)
 8000f88:	f001 feec 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000f8c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	481f      	ldr	r0, [pc, #124]	@ (8001024 <MX_GPIO_Init+0x2a4>)
 8000fa6:	f001 fedd 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000faa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc2:	f001 fecf 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000fc6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fd8:	230a      	movs	r3, #10
 8000fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fe6:	f001 febd 	bl	8002d64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2105      	movs	r1, #5
 8000fee:	2017      	movs	r0, #23
 8000ff0:	f001 fd82 	bl	8002af8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ff4:	2017      	movs	r0, #23
 8000ff6:	f001 fd9b 	bl	8002b30 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2105      	movs	r1, #5
 8000ffe:	2028      	movs	r0, #40	@ 0x28
 8001000:	f001 fd7a 	bl	8002af8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001004:	2028      	movs	r0, #40	@ 0x28
 8001006:	f001 fd93 	bl	8002b30 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800100a:	bf00      	nop
 800100c:	3730      	adds	r7, #48	@ 0x30
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000
 8001018:	48001000 	.word	0x48001000
 800101c:	48000400 	.word	0x48000400
 8001020:	48000c00 	.word	0x48000c00
 8001024:	48000800 	.word	0x48000800

08001028 <LED_flash_task_run>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMyLedTask */
void LED_flash_task_run(void *argument)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	2120      	movs	r1, #32
 8001034:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001038:	f002 f826 	bl	8003088 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001042:	4821      	ldr	r0, [pc, #132]	@ (80010c8 <LED_flash_task_run+0xa0>)
 8001044:	f002 f820 	bl	8003088 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800104e:	481f      	ldr	r0, [pc, #124]	@ (80010cc <LED_flash_task_run+0xa4>)
 8001050:	f002 f81a 	bl	8003088 <HAL_GPIO_WritePin>
  static GPIO_PinState led_1_2_state = GPIO_PIN_RESET;
  for(;;)
  {

  if(led_1_2_state == GPIO_PIN_SET)
 8001054:	4b1e      	ldr	r3, [pc, #120]	@ (80010d0 <LED_flash_task_run+0xa8>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d103      	bne.n	8001064 <LED_flash_task_run+0x3c>
	  led_1_2_state = GPIO_PIN_RESET;
 800105c:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <LED_flash_task_run+0xa8>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
 8001062:	e002      	b.n	800106a <LED_flash_task_run+0x42>
  else led_1_2_state = GPIO_PIN_SET;
 8001064:	4b1a      	ldr	r3, [pc, #104]	@ (80010d0 <LED_flash_task_run+0xa8>)
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]

	osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 800106a:	4b1a      	ldr	r3, [pc, #104]	@ (80010d4 <LED_flash_task_run+0xac>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f04f 31ff 	mov.w	r1, #4294967295
 8001072:	4618      	mov	r0, r3
 8001074:	f006 f846 	bl	8007104 <osSemaphoreAcquire>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, led_1_2_state); // Toggle
 8001078:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <LED_flash_task_run+0xa8>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	2120      	movs	r1, #32
 8001080:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001084:	f002 f800 	bl	8003088 <HAL_GPIO_WritePin>
	if(acquisition_activated == 0)
 8001088:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <LED_flash_task_run+0xb0>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d107      	bne.n	80010a0 <LED_flash_task_run+0x78>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, led_1_2_state); // Toggle LED 2
 8001090:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <LED_flash_task_run+0xa8>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800109a:	480c      	ldr	r0, [pc, #48]	@ (80010cc <LED_flash_task_run+0xa4>)
 800109c:	f001 fff4 	bl	8003088 <HAL_GPIO_WritePin>

	if(queue_overflow_detected == 0)
 80010a0:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <LED_flash_task_run+0xb4>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d105      	bne.n	80010b4 <LED_flash_task_run+0x8c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010ae:	4806      	ldr	r0, [pc, #24]	@ (80010c8 <LED_flash_task_run+0xa0>)
 80010b0:	f001 ffea 	bl	8003088 <HAL_GPIO_WritePin>

	osSemaphoreRelease(myBinarySem01Handle);
 80010b4:	4b07      	ldr	r3, [pc, #28]	@ (80010d4 <LED_flash_task_run+0xac>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f006 f875 	bl	80071a8 <osSemaphoreRelease>

	osDelay(100);  //100ms delay
 80010be:	2064      	movs	r0, #100	@ 0x64
 80010c0:	f005 ff7c 	bl	8006fbc <osDelay>
  if(led_1_2_state == GPIO_PIN_SET)
 80010c4:	e7c6      	b.n	8001054 <LED_flash_task_run+0x2c>
 80010c6:	bf00      	nop
 80010c8:	48000800 	.word	0x48000800
 80010cc:	48000400 	.word	0x48000400
 80010d0:	200004e8 	.word	0x200004e8
 80010d4:	200004dc 	.word	0x200004dc
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000001 	.word	0x20000001

080010e0 <UART_send_task_run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMyUartTask */
void UART_send_task_run(void *argument)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMyUartTask */
  /* Infinite loop */
  for(;;)
  {
	uint16_t dataOut;
	osStatus_t result = osMessageQueueGet(myDataQueueHandle, &dataOut, NULL, osWaitForever);
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <UART_send_task_run+0x5c>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f107 0112 	add.w	r1, r7, #18
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	2200      	movs	r2, #0
 80010f6:	f006 f96f 	bl	80073d8 <osMessageQueueGet>
 80010fa:	6178      	str	r0, [r7, #20]
	if(result == osOK)
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f2      	bne.n	80010e8 <UART_send_task_run+0x8>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001102:	2120      	movs	r1, #32
 8001104:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001108:	f001 ffd6 	bl	80030b8 <HAL_GPIO_TogglePin>
		uint8_t buffer[5]="";
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	2300      	movs	r3, #0
 8001112:	743b      	strb	r3, [r7, #16]
		sprintf((char *)buffer, "%d\n\r", dataOut);
 8001114:	8a7b      	ldrh	r3, [r7, #18]
 8001116:	461a      	mov	r2, r3
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	4908      	ldr	r1, [pc, #32]	@ (8001140 <UART_send_task_run+0x60>)
 800111e:	4618      	mov	r0, r3
 8001120:	f009 faa2 	bl	800a668 <siprintf>
		HAL_UART_Transmit (&huart1, buffer, sizeof(buffer), 10);
 8001124:	f107 010c 	add.w	r1, r7, #12
 8001128:	230a      	movs	r3, #10
 800112a:	2205      	movs	r2, #5
 800112c:	4805      	ldr	r0, [pc, #20]	@ (8001144 <UART_send_task_run+0x64>)
 800112e:	f004 feb5 	bl	8005e9c <HAL_UART_Transmit>
	    osDelay(1);
 8001132:	2001      	movs	r0, #1
 8001134:	f005 ff42 	bl	8006fbc <osDelay>
  {
 8001138:	e7d6      	b.n	80010e8 <UART_send_task_run+0x8>
 800113a:	bf00      	nop
 800113c:	200004d8 	.word	0x200004d8
 8001140:	0800b0c4 	.word	0x0800b0c4
 8001144:	20000310 	.word	0x20000310

08001148 <UART_RX_task_run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMyCounterTask */
void UART_RX_task_run(void *argument)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMyCounterTask */
  /* Infinite loop */
  for(;;)
  {
	uint8_t received_data;
	HAL_UART_Receive(&huart1, &received_data, 1, 10);
 8001150:	f107 010f 	add.w	r1, r7, #15
 8001154:	230a      	movs	r3, #10
 8001156:	2201      	movs	r2, #1
 8001158:	480c      	ldr	r0, [pc, #48]	@ (800118c <UART_RX_task_run+0x44>)
 800115a:	f004 ff2d 	bl	8005fb8 <HAL_UART_Receive>
	if(received_data == 's')
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	2b73      	cmp	r3, #115	@ 0x73
 8001162:	d102      	bne.n	800116a <UART_RX_task_run+0x22>
		acquisition_activated = 0;
 8001164:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <UART_RX_task_run+0x48>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
	if(received_data == 'x')
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	2b78      	cmp	r3, #120	@ 0x78
 800116e:	d108      	bne.n	8001182 <UART_RX_task_run+0x3a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001176:	4807      	ldr	r0, [pc, #28]	@ (8001194 <UART_RX_task_run+0x4c>)
 8001178:	f001 ff86 	bl	8003088 <HAL_GPIO_WritePin>
		acquisition_activated = 1;
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <UART_RX_task_run+0x48>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
	}
	osDelay(200);
 8001182:	20c8      	movs	r0, #200	@ 0xc8
 8001184:	f005 ff1a 	bl	8006fbc <osDelay>
  {
 8001188:	e7e2      	b.n	8001150 <UART_RX_task_run+0x8>
 800118a:	bf00      	nop
 800118c:	20000310 	.word	0x20000310
 8001190:	20000000 	.word	0x20000000
 8001194:	48000400 	.word	0x48000400

08001198 <TEMP_Read>:
  /* USER CODE END StartMyCounterTask */
}


void TEMP_Read(void *argument)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	for(;;){
		temp_value = BSP_TSENSOR_ReadTemp();
 80011a0:	f000 fcca 	bl	8001b38 <BSP_TSENSOR_ReadTemp>
 80011a4:	eef0 7a40 	vmov.f32	s15, s0
 80011a8:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <TEMP_Read+0x5c>)
 80011aa:	edc3 7a00 	vstr	s15, [r3]
		uint8_t encoded_temp = (uint8_t) (temp_value/2);
 80011ae:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <TEMP_Read+0x5c>)
 80011b0:	ed93 7a00 	vldr	s14, [r3]
 80011b4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80011b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011c0:	edc7 7a00 	vstr	s15, [r7]
 80011c4:	783b      	ldrb	r3, [r7, #0]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	73fb      	strb	r3, [r7, #15]
		encoded_temp |= TEMPERATURE_CHANNEL_MASK;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	73fb      	strb	r3, [r7, #15]
		osMessageQueuePut(myDataQueueHandle, &encoded_temp, 1, osWaitForever);
 80011d4:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <TEMP_Read+0x60>)
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	f107 010f 	add.w	r1, r7, #15
 80011dc:	f04f 33ff 	mov.w	r3, #4294967295
 80011e0:	2201      	movs	r2, #1
 80011e2:	f006 f899 	bl	8007318 <osMessageQueuePut>
		osDelay(500);
 80011e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011ea:	f005 fee7 	bl	8006fbc <osDelay>
	for(;;){
 80011ee:	bf00      	nop
 80011f0:	e7d6      	b.n	80011a0 <TEMP_Read+0x8>
 80011f2:	bf00      	nop
 80011f4:	200004e4 	.word	0x200004e4
 80011f8:	200004d8 	.word	0x200004d8

080011fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a04      	ldr	r2, [pc, #16]	@ (800121c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d101      	bne.n	8001212 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800120e:	f000 fcb9 	bl	8001b84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40001000 	.word	0x40001000

08001220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <Error_Handler+0x8>

0800122c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <HAL_MspInit+0x4c>)
 8001234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001236:	4a10      	ldr	r2, [pc, #64]	@ (8001278 <HAL_MspInit+0x4c>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6613      	str	r3, [r2, #96]	@ 0x60
 800123e:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <HAL_MspInit+0x4c>)
 8001240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124a:	4b0b      	ldr	r3, [pc, #44]	@ (8001278 <HAL_MspInit+0x4c>)
 800124c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800124e:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <HAL_MspInit+0x4c>)
 8001250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001254:	6593      	str	r3, [r2, #88]	@ 0x58
 8001256:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <HAL_MspInit+0x4c>)
 8001258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	210f      	movs	r1, #15
 8001266:	f06f 0001 	mvn.w	r0, #1
 800126a:	f001 fc45 	bl	8002af8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000

0800127c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	@ 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a15      	ldr	r2, [pc, #84]	@ (80012f0 <HAL_ADC_MspInit+0x74>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d123      	bne.n	80012e6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <HAL_ADC_MspInit+0x78>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a2:	4a14      	ldr	r2, [pc, #80]	@ (80012f4 <HAL_ADC_MspInit+0x78>)
 80012a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012aa:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <HAL_ADC_MspInit+0x78>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b6:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <HAL_ADC_MspInit+0x78>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ba:	4a0e      	ldr	r2, [pc, #56]	@ (80012f4 <HAL_ADC_MspInit+0x78>)
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c2:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <HAL_ADC_MspInit+0x78>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80012ce:	233f      	movs	r3, #63	@ 0x3f
 80012d0:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012d2:	230b      	movs	r3, #11
 80012d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <HAL_ADC_MspInit+0x7c>)
 80012e2:	f001 fd3f 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012e6:	bf00      	nop
 80012e8:	3728      	adds	r7, #40	@ 0x28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	50040000 	.word	0x50040000
 80012f4:	40021000 	.word	0x40021000
 80012f8:	48000800 	.word	0x48000800

080012fc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0ae      	sub	sp, #184	@ 0xb8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	2294      	movs	r2, #148	@ 0x94
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f009 f9c3 	bl	800a6a8 <memset>
  if(DFSDM1_Init == 0)
 8001322:	4b25      	ldr	r3, [pc, #148]	@ (80013b8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d142      	bne.n	80013b0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800132a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800132e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	4618      	mov	r0, r3
 800133c:	f003 fce0 	bl	8004d00 <HAL_RCCEx_PeriphCLKConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001346:	f7ff ff6b 	bl	8001220 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800134a:	4b1c      	ldr	r3, [pc, #112]	@ (80013bc <HAL_DFSDM_ChannelMspInit+0xc0>)
 800134c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800134e:	4a1b      	ldr	r2, [pc, #108]	@ (80013bc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001350:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001354:	6613      	str	r3, [r2, #96]	@ 0x60
 8001356:	4b19      	ldr	r3, [pc, #100]	@ (80013bc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800135a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001362:	4b16      	ldr	r3, [pc, #88]	@ (80013bc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	4a15      	ldr	r2, [pc, #84]	@ (80013bc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001368:	f043 0310 	orr.w	r3, r3, #16
 800136c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136e:	4b13      	ldr	r3, [pc, #76]	@ (80013bc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800137a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800137e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001394:	2306      	movs	r3, #6
 8001396:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800139a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800139e:	4619      	mov	r1, r3
 80013a0:	4807      	ldr	r0, [pc, #28]	@ (80013c0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80013a2:	f001 fcdf 	bl	8002d64 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80013a6:	4b04      	ldr	r3, [pc, #16]	@ (80013b8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	4a02      	ldr	r2, [pc, #8]	@ (80013b8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80013ae:	6013      	str	r3, [r2, #0]
  }

}
 80013b0:	bf00      	nop
 80013b2:	37b8      	adds	r7, #184	@ 0xb8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200004ec 	.word	0x200004ec
 80013bc:	40021000 	.word	0x40021000
 80013c0:	48001000 	.word	0x48001000

080013c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b0b0      	sub	sp, #192	@ 0xc0
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013dc:	f107 0318 	add.w	r3, r7, #24
 80013e0:	2294      	movs	r2, #148	@ 0x94
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f009 f95f 	bl	800a6a8 <memset>
  if(hi2c->Instance==I2C1)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a42      	ldr	r2, [pc, #264]	@ (80014f8 <HAL_I2C_MspInit+0x134>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d13c      	bne.n	800146e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013f4:	2340      	movs	r3, #64	@ 0x40
 80013f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013fc:	f107 0318 	add.w	r3, r7, #24
 8001400:	4618      	mov	r0, r3
 8001402:	f003 fc7d 	bl	8004d00 <HAL_RCCEx_PeriphCLKConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800140c:	f7ff ff08 	bl	8001220 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001410:	4b3a      	ldr	r3, [pc, #232]	@ (80014fc <HAL_I2C_MspInit+0x138>)
 8001412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001414:	4a39      	ldr	r2, [pc, #228]	@ (80014fc <HAL_I2C_MspInit+0x138>)
 8001416:	f043 0302 	orr.w	r3, r3, #2
 800141a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800141c:	4b37      	ldr	r3, [pc, #220]	@ (80014fc <HAL_I2C_MspInit+0x138>)
 800141e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001428:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800142c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001430:	2312      	movs	r3, #18
 8001432:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001436:	2301      	movs	r3, #1
 8001438:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001442:	2304      	movs	r3, #4
 8001444:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800144c:	4619      	mov	r1, r3
 800144e:	482c      	ldr	r0, [pc, #176]	@ (8001500 <HAL_I2C_MspInit+0x13c>)
 8001450:	f001 fc88 	bl	8002d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001454:	4b29      	ldr	r3, [pc, #164]	@ (80014fc <HAL_I2C_MspInit+0x138>)
 8001456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001458:	4a28      	ldr	r2, [pc, #160]	@ (80014fc <HAL_I2C_MspInit+0x138>)
 800145a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800145e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001460:	4b26      	ldr	r3, [pc, #152]	@ (80014fc <HAL_I2C_MspInit+0x138>)
 8001462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001464:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800146c:	e040      	b.n	80014f0 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a24      	ldr	r2, [pc, #144]	@ (8001504 <HAL_I2C_MspInit+0x140>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d13b      	bne.n	80014f0 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001478:	2380      	movs	r3, #128	@ 0x80
 800147a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800147c:	2300      	movs	r3, #0
 800147e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001480:	f107 0318 	add.w	r3, r7, #24
 8001484:	4618      	mov	r0, r3
 8001486:	f003 fc3b 	bl	8004d00 <HAL_RCCEx_PeriphCLKConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001490:	f7ff fec6 	bl	8001220 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <HAL_I2C_MspInit+0x138>)
 8001496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001498:	4a18      	ldr	r2, [pc, #96]	@ (80014fc <HAL_I2C_MspInit+0x138>)
 800149a:	f043 0302 	orr.w	r3, r3, #2
 800149e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a0:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <HAL_I2C_MspInit+0x138>)
 80014a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80014ac:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b4:	2312      	movs	r3, #18
 80014b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014c6:	2304      	movs	r3, #4
 80014c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014cc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014d0:	4619      	mov	r1, r3
 80014d2:	480b      	ldr	r0, [pc, #44]	@ (8001500 <HAL_I2C_MspInit+0x13c>)
 80014d4:	f001 fc46 	bl	8002d64 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014d8:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <HAL_I2C_MspInit+0x138>)
 80014da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014dc:	4a07      	ldr	r2, [pc, #28]	@ (80014fc <HAL_I2C_MspInit+0x138>)
 80014de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80014e4:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <HAL_I2C_MspInit+0x138>)
 80014e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
}
 80014f0:	bf00      	nop
 80014f2:	37c0      	adds	r7, #192	@ 0xc0
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40005400 	.word	0x40005400
 80014fc:	40021000 	.word	0x40021000
 8001500:	48000400 	.word	0x48000400
 8001504:	40005800 	.word	0x40005800

08001508 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b0b0      	sub	sp, #192	@ 0xc0
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001520:	f107 0318 	add.w	r3, r7, #24
 8001524:	2294      	movs	r2, #148	@ 0x94
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f009 f8bd 	bl	800a6a8 <memset>
  if(hospi->Instance==OCTOSPI1)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a28      	ldr	r2, [pc, #160]	@ (80015d4 <HAL_OSPI_MspInit+0xcc>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d149      	bne.n	80015cc <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001538:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800153c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800153e:	2300      	movs	r3, #0
 8001540:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001544:	f107 0318 	add.w	r3, r7, #24
 8001548:	4618      	mov	r0, r3
 800154a:	f003 fbd9 	bl	8004d00 <HAL_RCCEx_PeriphCLKConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001554:	f7ff fe64 	bl	8001220 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001558:	4b1f      	ldr	r3, [pc, #124]	@ (80015d8 <HAL_OSPI_MspInit+0xd0>)
 800155a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155c:	4a1e      	ldr	r2, [pc, #120]	@ (80015d8 <HAL_OSPI_MspInit+0xd0>)
 800155e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001562:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001564:	4b1c      	ldr	r3, [pc, #112]	@ (80015d8 <HAL_OSPI_MspInit+0xd0>)
 8001566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001568:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001570:	4b19      	ldr	r3, [pc, #100]	@ (80015d8 <HAL_OSPI_MspInit+0xd0>)
 8001572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001574:	4a18      	ldr	r2, [pc, #96]	@ (80015d8 <HAL_OSPI_MspInit+0xd0>)
 8001576:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800157a:	6513      	str	r3, [r2, #80]	@ 0x50
 800157c:	4b16      	ldr	r3, [pc, #88]	@ (80015d8 <HAL_OSPI_MspInit+0xd0>)
 800157e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001588:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <HAL_OSPI_MspInit+0xd0>)
 800158a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158c:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <HAL_OSPI_MspInit+0xd0>)
 800158e:	f043 0310 	orr.w	r3, r3, #16
 8001592:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001594:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <HAL_OSPI_MspInit+0xd0>)
 8001596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001598:	f003 0310 	and.w	r3, r3, #16
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80015a0:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80015a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b4:	2303      	movs	r3, #3
 80015b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80015ba:	230a      	movs	r3, #10
 80015bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80015c4:	4619      	mov	r1, r3
 80015c6:	4805      	ldr	r0, [pc, #20]	@ (80015dc <HAL_OSPI_MspInit+0xd4>)
 80015c8:	f001 fbcc 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80015cc:	bf00      	nop
 80015ce:	37c0      	adds	r7, #192	@ 0xc0
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	a0001000 	.word	0xa0001000
 80015d8:	40021000 	.word	0x40021000
 80015dc:	48001000 	.word	0x48001000

080015e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	@ 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a17      	ldr	r2, [pc, #92]	@ (800165c <HAL_SPI_MspInit+0x7c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d128      	bne.n	8001654 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001602:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <HAL_SPI_MspInit+0x80>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001606:	4a16      	ldr	r2, [pc, #88]	@ (8001660 <HAL_SPI_MspInit+0x80>)
 8001608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800160c:	6593      	str	r3, [r2, #88]	@ 0x58
 800160e:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <HAL_SPI_MspInit+0x80>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001612:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <HAL_SPI_MspInit+0x80>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161e:	4a10      	ldr	r2, [pc, #64]	@ (8001660 <HAL_SPI_MspInit+0x80>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <HAL_SPI_MspInit+0x80>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001632:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001644:	2306      	movs	r3, #6
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	4805      	ldr	r0, [pc, #20]	@ (8001664 <HAL_SPI_MspInit+0x84>)
 8001650:	f001 fb88 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001654:	bf00      	nop
 8001656:	3728      	adds	r7, #40	@ 0x28
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40003c00 	.word	0x40003c00
 8001660:	40021000 	.word	0x40021000
 8001664:	48000800 	.word	0x48000800

08001668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b0b4      	sub	sp, #208	@ 0xd0
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001680:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001684:	2294      	movs	r2, #148	@ 0x94
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f009 f80d 	bl	800a6a8 <memset>
  if(huart->Instance==UART4)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a83      	ldr	r2, [pc, #524]	@ (80018a0 <HAL_UART_MspInit+0x238>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d13c      	bne.n	8001712 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001698:	2308      	movs	r3, #8
 800169a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800169c:	2300      	movs	r3, #0
 800169e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016a4:	4618      	mov	r0, r3
 80016a6:	f003 fb2b 	bl	8004d00 <HAL_RCCEx_PeriphCLKConfig>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016b0:	f7ff fdb6 	bl	8001220 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80016b4:	4b7b      	ldr	r3, [pc, #492]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 80016b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b8:	4a7a      	ldr	r2, [pc, #488]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 80016ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016be:	6593      	str	r3, [r2, #88]	@ 0x58
 80016c0:	4b78      	ldr	r3, [pc, #480]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 80016c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016cc:	4b75      	ldr	r3, [pc, #468]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d0:	4a74      	ldr	r2, [pc, #464]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d8:	4b72      	ldr	r3, [pc, #456]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	623b      	str	r3, [r7, #32]
 80016e2:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80016e4:	2303      	movs	r3, #3
 80016e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f6:	2303      	movs	r3, #3
 80016f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80016fc:	2308      	movs	r3, #8
 80016fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001706:	4619      	mov	r1, r3
 8001708:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800170c:	f001 fb2a 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001710:	e0c2      	b.n	8001898 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a64      	ldr	r2, [pc, #400]	@ (80018a8 <HAL_UART_MspInit+0x240>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d13b      	bne.n	8001794 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800171c:	2301      	movs	r3, #1
 800171e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001720:	2300      	movs	r3, #0
 8001722:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001724:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001728:	4618      	mov	r0, r3
 800172a:	f003 fae9 	bl	8004d00 <HAL_RCCEx_PeriphCLKConfig>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001734:	f7ff fd74 	bl	8001220 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001738:	4b5a      	ldr	r3, [pc, #360]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 800173a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800173c:	4a59      	ldr	r2, [pc, #356]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 800173e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001742:	6613      	str	r3, [r2, #96]	@ 0x60
 8001744:	4b57      	ldr	r3, [pc, #348]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 8001746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001748:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001750:	4b54      	ldr	r3, [pc, #336]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 8001752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001754:	4a53      	ldr	r2, [pc, #332]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 8001756:	f043 0302 	orr.w	r3, r3, #2
 800175a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800175c:	4b51      	ldr	r3, [pc, #324]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 800175e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	61bb      	str	r3, [r7, #24]
 8001766:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001768:	23c0      	movs	r3, #192	@ 0xc0
 800176a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177a:	2303      	movs	r3, #3
 800177c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001780:	2307      	movs	r3, #7
 8001782:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001786:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800178a:	4619      	mov	r1, r3
 800178c:	4847      	ldr	r0, [pc, #284]	@ (80018ac <HAL_UART_MspInit+0x244>)
 800178e:	f001 fae9 	bl	8002d64 <HAL_GPIO_Init>
}
 8001792:	e081      	b.n	8001898 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a45      	ldr	r2, [pc, #276]	@ (80018b0 <HAL_UART_MspInit+0x248>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d13b      	bne.n	8001816 <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800179e:	2302      	movs	r3, #2
 80017a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017a2:	2300      	movs	r3, #0
 80017a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017aa:	4618      	mov	r0, r3
 80017ac:	f003 faa8 	bl	8004d00 <HAL_RCCEx_PeriphCLKConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_UART_MspInit+0x152>
      Error_Handler();
 80017b6:	f7ff fd33 	bl	8001220 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ba:	4b3a      	ldr	r3, [pc, #232]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 80017bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017be:	4a39      	ldr	r2, [pc, #228]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c6:	4b37      	ldr	r3, [pc, #220]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 80017c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d2:	4b34      	ldr	r3, [pc, #208]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d6:	4a33      	ldr	r2, [pc, #204]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 80017d8:	f043 0308 	orr.w	r3, r3, #8
 80017dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017de:	4b31      	ldr	r3, [pc, #196]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80017ea:	2378      	movs	r3, #120	@ 0x78
 80017ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001802:	2307      	movs	r3, #7
 8001804:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001808:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800180c:	4619      	mov	r1, r3
 800180e:	4829      	ldr	r0, [pc, #164]	@ (80018b4 <HAL_UART_MspInit+0x24c>)
 8001810:	f001 faa8 	bl	8002d64 <HAL_GPIO_Init>
}
 8001814:	e040      	b.n	8001898 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a27      	ldr	r2, [pc, #156]	@ (80018b8 <HAL_UART_MspInit+0x250>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d13b      	bne.n	8001898 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001820:	2304      	movs	r3, #4
 8001822:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001824:	2300      	movs	r3, #0
 8001826:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001828:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800182c:	4618      	mov	r0, r3
 800182e:	f003 fa67 	bl	8004d00 <HAL_RCCEx_PeriphCLKConfig>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8001838:	f7ff fcf2 	bl	8001220 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800183c:	4b19      	ldr	r3, [pc, #100]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 800183e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001840:	4a18      	ldr	r2, [pc, #96]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 8001842:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001846:	6593      	str	r3, [r2, #88]	@ 0x58
 8001848:	4b16      	ldr	r3, [pc, #88]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 800184a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001854:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 8001856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001858:	4a12      	ldr	r2, [pc, #72]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 800185a:	f043 0308 	orr.w	r3, r3, #8
 800185e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001860:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <HAL_UART_MspInit+0x23c>)
 8001862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800186c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001870:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001880:	2303      	movs	r3, #3
 8001882:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001886:	2307      	movs	r3, #7
 8001888:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800188c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001890:	4619      	mov	r1, r3
 8001892:	4808      	ldr	r0, [pc, #32]	@ (80018b4 <HAL_UART_MspInit+0x24c>)
 8001894:	f001 fa66 	bl	8002d64 <HAL_GPIO_Init>
}
 8001898:	bf00      	nop
 800189a:	37d0      	adds	r7, #208	@ 0xd0
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40004c00 	.word	0x40004c00
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40013800 	.word	0x40013800
 80018ac:	48000400 	.word	0x48000400
 80018b0:	40004400 	.word	0x40004400
 80018b4:	48000c00 	.word	0x48000c00
 80018b8:	40004800 	.word	0x40004800

080018bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08e      	sub	sp, #56	@ 0x38
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018ca:	4b34      	ldr	r3, [pc, #208]	@ (800199c <HAL_InitTick+0xe0>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ce:	4a33      	ldr	r2, [pc, #204]	@ (800199c <HAL_InitTick+0xe0>)
 80018d0:	f043 0310 	orr.w	r3, r3, #16
 80018d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80018d6:	4b31      	ldr	r3, [pc, #196]	@ (800199c <HAL_InitTick+0xe0>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018e2:	f107 0210 	add.w	r2, r7, #16
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f003 f915 	bl	8004b1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d103      	bne.n	8001904 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018fc:	f003 f8e2 	bl	8004ac4 <HAL_RCC_GetPCLK1Freq>
 8001900:	6378      	str	r0, [r7, #52]	@ 0x34
 8001902:	e004      	b.n	800190e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001904:	f003 f8de 	bl	8004ac4 <HAL_RCC_GetPCLK1Freq>
 8001908:	4603      	mov	r3, r0
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800190e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001910:	4a23      	ldr	r2, [pc, #140]	@ (80019a0 <HAL_InitTick+0xe4>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	0c9b      	lsrs	r3, r3, #18
 8001918:	3b01      	subs	r3, #1
 800191a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800191c:	4b21      	ldr	r3, [pc, #132]	@ (80019a4 <HAL_InitTick+0xe8>)
 800191e:	4a22      	ldr	r2, [pc, #136]	@ (80019a8 <HAL_InitTick+0xec>)
 8001920:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001922:	4b20      	ldr	r3, [pc, #128]	@ (80019a4 <HAL_InitTick+0xe8>)
 8001924:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001928:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800192a:	4a1e      	ldr	r2, [pc, #120]	@ (80019a4 <HAL_InitTick+0xe8>)
 800192c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800192e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001930:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <HAL_InitTick+0xe8>)
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001936:	4b1b      	ldr	r3, [pc, #108]	@ (80019a4 <HAL_InitTick+0xe8>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193c:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <HAL_InitTick+0xe8>)
 800193e:	2200      	movs	r2, #0
 8001940:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001942:	4818      	ldr	r0, [pc, #96]	@ (80019a4 <HAL_InitTick+0xe8>)
 8001944:	f003 ffa7 	bl	8005896 <HAL_TIM_Base_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800194e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001952:	2b00      	cmp	r3, #0
 8001954:	d11b      	bne.n	800198e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001956:	4813      	ldr	r0, [pc, #76]	@ (80019a4 <HAL_InitTick+0xe8>)
 8001958:	f003 fffe 	bl	8005958 <HAL_TIM_Base_Start_IT>
 800195c:	4603      	mov	r3, r0
 800195e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001962:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001966:	2b00      	cmp	r3, #0
 8001968:	d111      	bne.n	800198e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800196a:	2036      	movs	r0, #54	@ 0x36
 800196c:	f001 f8e0 	bl	8002b30 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b0f      	cmp	r3, #15
 8001974:	d808      	bhi.n	8001988 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001976:	2200      	movs	r2, #0
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	2036      	movs	r0, #54	@ 0x36
 800197c:	f001 f8bc 	bl	8002af8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001980:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <HAL_InitTick+0xf0>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e002      	b.n	800198e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800198e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001992:	4618      	mov	r0, r3
 8001994:	3738      	adds	r7, #56	@ 0x38
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000
 80019a0:	431bde83 	.word	0x431bde83
 80019a4:	200004f0 	.word	0x200004f0
 80019a8:	40001000 	.word	0x40001000
 80019ac:	20000008 	.word	0x20000008

080019b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <NMI_Handler+0x4>

080019b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <HardFault_Handler+0x4>

080019c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <MemManage_Handler+0x4>

080019c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <BusFault_Handler+0x4>

080019d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <UsageFault_Handler+0x4>

080019d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80019ea:	2020      	movs	r0, #32
 80019ec:	f001 fb7e 	bl	80030ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80019f0:	2040      	movs	r0, #64	@ 0x40
 80019f2:	f001 fb7b 	bl	80030ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80019f6:	2080      	movs	r0, #128	@ 0x80
 80019f8:	f001 fb78 	bl	80030ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80019fc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001a00:	f001 fb74 	bl	80030ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8001a0c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001a10:	f001 fb6c 	bl	80030ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001a14:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001a18:	f001 fb68 	bl	80030ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8001a1c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001a20:	f001 fb64 	bl	80030ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001a24:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a28:	f001 fb60 	bl	80030ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001a2c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001a30:	f001 fb5c 	bl	80030ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001a34:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001a38:	f001 fb58 	bl	80030ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a44:	4802      	ldr	r0, [pc, #8]	@ (8001a50 <TIM6_DAC_IRQHandler+0x10>)
 8001a46:	f003 fff7 	bl	8005a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200004f0 	.word	0x200004f0

08001a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a5c:	4a14      	ldr	r2, [pc, #80]	@ (8001ab0 <_sbrk+0x5c>)
 8001a5e:	4b15      	ldr	r3, [pc, #84]	@ (8001ab4 <_sbrk+0x60>)
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a68:	4b13      	ldr	r3, [pc, #76]	@ (8001ab8 <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d102      	bne.n	8001a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a70:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <_sbrk+0x64>)
 8001a72:	4a12      	ldr	r2, [pc, #72]	@ (8001abc <_sbrk+0x68>)
 8001a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a76:	4b10      	ldr	r3, [pc, #64]	@ (8001ab8 <_sbrk+0x64>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d207      	bcs.n	8001a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a84:	f008 fe6e 	bl	800a764 <__errno>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a92:	e009      	b.n	8001aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a94:	4b08      	ldr	r3, [pc, #32]	@ (8001ab8 <_sbrk+0x64>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a9a:	4b07      	ldr	r3, [pc, #28]	@ (8001ab8 <_sbrk+0x64>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	4a05      	ldr	r2, [pc, #20]	@ (8001ab8 <_sbrk+0x64>)
 8001aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200a0000 	.word	0x200a0000
 8001ab4:	00000400 	.word	0x00000400
 8001ab8:	2000053c 	.word	0x2000053c
 8001abc:	20002058 	.word	0x20002058

08001ac0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ac4:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <SystemInit+0x20>)
 8001ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aca:	4a05      	ldr	r2, [pc, #20]	@ (8001ae0 <SystemInit+0x20>)
 8001acc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ad0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ae4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ae8:	f7ff ffea 	bl	8001ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aec:	480c      	ldr	r0, [pc, #48]	@ (8001b20 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aee:	490d      	ldr	r1, [pc, #52]	@ (8001b24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001af0:	4a0d      	ldr	r2, [pc, #52]	@ (8001b28 <LoopForever+0xe>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af4:	e002      	b.n	8001afc <LoopCopyDataInit>

08001af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afa:	3304      	adds	r3, #4

08001afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b00:	d3f9      	bcc.n	8001af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b02:	4a0a      	ldr	r2, [pc, #40]	@ (8001b2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b04:	4c0a      	ldr	r4, [pc, #40]	@ (8001b30 <LoopForever+0x16>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b08:	e001      	b.n	8001b0e <LoopFillZerobss>

08001b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b0c:	3204      	adds	r2, #4

08001b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b10:	d3fb      	bcc.n	8001b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b12:	f008 fe2d 	bl	800a770 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b16:	f7fe fd3b 	bl	8000590 <main>

08001b1a <LoopForever>:

LoopForever:
    b LoopForever
 8001b1a:	e7fe      	b.n	8001b1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b1c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b24:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001b28:	0800b250 	.word	0x0800b250
  ldr r2, =_sbss
 8001b2c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001b30:	20002054 	.word	0x20002054

08001b34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b34:	e7fe      	b.n	8001b34 <ADC1_IRQHandler>
	...

08001b38 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001b3c:	4b04      	ldr	r3, [pc, #16]	@ (8001b50 <BSP_TSENSOR_ReadTemp+0x18>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	20be      	movs	r0, #190	@ 0xbe
 8001b44:	4798      	blx	r3
 8001b46:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000540 	.word	0x20000540

08001b54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b5e:	2003      	movs	r0, #3
 8001b60:	f000 ffbf 	bl	8002ae2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b64:	200f      	movs	r0, #15
 8001b66:	f7ff fea9 	bl	80018bc <HAL_InitTick>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	71fb      	strb	r3, [r7, #7]
 8001b74:	e001      	b.n	8001b7a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b76:	f7ff fb59 	bl	800122c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b88:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <HAL_IncTick+0x20>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_IncTick+0x24>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	4a04      	ldr	r2, [pc, #16]	@ (8001ba8 <HAL_IncTick+0x24>)
 8001b96:	6013      	str	r3, [r2, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	2000000c 	.word	0x2000000c
 8001ba8:	20000544 	.word	0x20000544

08001bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb0:	4b03      	ldr	r3, [pc, #12]	@ (8001bc0 <HAL_GetTick+0x14>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000544 	.word	0x20000544

08001bc4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	609a      	str	r2, [r3, #8]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
 8001c38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3360      	adds	r3, #96	@ 0x60
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <LL_ADC_SetOffset+0x44>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c64:	bf00      	nop
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	03fff000 	.word	0x03fff000

08001c74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3360      	adds	r3, #96	@ 0x60
 8001c82:	461a      	mov	r2, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	3360      	adds	r3, #96	@ 0x60
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cca:	bf00      	nop
 8001ccc:	371c      	adds	r7, #28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	615a      	str	r2, [r3, #20]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3330      	adds	r3, #48	@ 0x30
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	f003 030c 	and.w	r3, r3, #12
 8001d18:	4413      	add	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	211f      	movs	r1, #31
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	401a      	ands	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	0e9b      	lsrs	r3, r3, #26
 8001d34:	f003 011f 	and.w	r1, r3, #31
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f003 031f 	and.w	r3, r3, #31
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	431a      	orrs	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d48:	bf00      	nop
 8001d4a:	371c      	adds	r7, #28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b087      	sub	sp, #28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3314      	adds	r3, #20
 8001d64:	461a      	mov	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	0e5b      	lsrs	r3, r3, #25
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	4413      	add	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	0d1b      	lsrs	r3, r3, #20
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	2107      	movs	r1, #7
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	401a      	ands	r2, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	0d1b      	lsrs	r3, r3, #20
 8001d8e:	f003 031f 	and.w	r3, r3, #31
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d9e:	bf00      	nop
 8001da0:	371c      	adds	r7, #28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f003 0318 	and.w	r3, r3, #24
 8001dce:	4908      	ldr	r1, [pc, #32]	@ (8001df0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001dd0:	40d9      	lsrs	r1, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	400b      	ands	r3, r1
 8001dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	0007ffff 	.word	0x0007ffff

08001df4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6093      	str	r3, [r2, #8]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e2c:	d101      	bne.n	8001e32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e7c:	d101      	bne.n	8001e82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <LL_ADC_IsEnabled+0x18>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <LL_ADC_IsEnabled+0x1a>
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d101      	bne.n	8001ece <LL_ADC_REG_IsConversionOngoing+0x18>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d101      	bne.n	8001ef4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e129      	b.n	8002172 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d109      	bne.n	8001f40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff f9a5 	bl	800127c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff67 	bl	8001e18 <LL_ADC_IsDeepPowerDownEnabled>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d004      	beq.n	8001f5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff4d 	bl	8001df4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff ff82 	bl	8001e68 <LL_ADC_IsInternalRegulatorEnabled>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d115      	bne.n	8001f96 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff ff66 	bl	8001e40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f74:	4b81      	ldr	r3, [pc, #516]	@ (800217c <HAL_ADC_Init+0x278>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	099b      	lsrs	r3, r3, #6
 8001f7a:	4a81      	ldr	r2, [pc, #516]	@ (8002180 <HAL_ADC_Init+0x27c>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	099b      	lsrs	r3, r3, #6
 8001f82:	3301      	adds	r3, #1
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f88:	e002      	b.n	8001f90 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f9      	bne.n	8001f8a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff64 	bl	8001e68 <LL_ADC_IsInternalRegulatorEnabled>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10d      	bne.n	8001fc2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001faa:	f043 0210 	orr.w	r2, r3, #16
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb6:	f043 0201 	orr.w	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ff75 	bl	8001eb6 <LL_ADC_REG_IsConversionOngoing>
 8001fcc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f040 80c2 	bne.w	8002160 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f040 80be 	bne.w	8002160 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001fec:	f043 0202 	orr.w	r2, r3, #2
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff49 	bl	8001e90 <LL_ADC_IsEnabled>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10b      	bne.n	800201c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002004:	485f      	ldr	r0, [pc, #380]	@ (8002184 <HAL_ADC_Init+0x280>)
 8002006:	f7ff ff43 	bl	8001e90 <LL_ADC_IsEnabled>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d105      	bne.n	800201c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4619      	mov	r1, r3
 8002016:	485c      	ldr	r0, [pc, #368]	@ (8002188 <HAL_ADC_Init+0x284>)
 8002018:	f7ff fdd4 	bl	8001bc4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	7e5b      	ldrb	r3, [r3, #25]
 8002020:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002026:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800202c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002032:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3020 	ldrb.w	r3, [r3, #32]
 800203a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d106      	bne.n	8002058 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204e:	3b01      	subs	r3, #1
 8002050:	045b      	lsls	r3, r3, #17
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205c:	2b00      	cmp	r3, #0
 800205e:	d009      	beq.n	8002074 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002064:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	4b44      	ldr	r3, [pc, #272]	@ (800218c <HAL_ADC_Init+0x288>)
 800207c:	4013      	ands	r3, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	69b9      	ldr	r1, [r7, #24]
 8002084:	430b      	orrs	r3, r1
 8002086:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff25 	bl	8001edc <LL_ADC_INJ_IsConversionOngoing>
 8002092:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d140      	bne.n	800211c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d13d      	bne.n	800211c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	7e1b      	ldrb	r3, [r3, #24]
 80020a8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020aa:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020b2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020c2:	f023 0306 	bic.w	r3, r3, #6
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	69b9      	ldr	r1, [r7, #24]
 80020cc:	430b      	orrs	r3, r1
 80020ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d118      	bne.n	800210c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80020e4:	f023 0304 	bic.w	r3, r3, #4
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020f0:	4311      	orrs	r1, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80020f6:	4311      	orrs	r1, r2
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020fc:	430a      	orrs	r2, r1
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0201 	orr.w	r2, r2, #1
 8002108:	611a      	str	r2, [r3, #16]
 800210a:	e007      	b.n	800211c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0201 	bic.w	r2, r2, #1
 800211a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d10c      	bne.n	800213e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212a:	f023 010f 	bic.w	r1, r3, #15
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	1e5a      	subs	r2, r3, #1
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	631a      	str	r2, [r3, #48]	@ 0x30
 800213c:	e007      	b.n	800214e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 020f 	bic.w	r2, r2, #15
 800214c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002152:	f023 0303 	bic.w	r3, r3, #3
 8002156:	f043 0201 	orr.w	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	659a      	str	r2, [r3, #88]	@ 0x58
 800215e:	e007      	b.n	8002170 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002164:	f043 0210 	orr.w	r2, r3, #16
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002170:	7ffb      	ldrb	r3, [r7, #31]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3720      	adds	r7, #32
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000004 	.word	0x20000004
 8002180:	053e2d63 	.word	0x053e2d63
 8002184:	50040000 	.word	0x50040000
 8002188:	50040300 	.word	0x50040300
 800218c:	fff0c007 	.word	0xfff0c007

08002190 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b0b6      	sub	sp, #216	@ 0xd8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x22>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e3d5      	b.n	800295e <HAL_ADC_ConfigChannel+0x7ce>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fe79 	bl	8001eb6 <LL_ADC_REG_IsConversionOngoing>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f040 83ba 	bne.w	8002940 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b05      	cmp	r3, #5
 80021da:	d824      	bhi.n	8002226 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	3b02      	subs	r3, #2
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	d81b      	bhi.n	800221e <HAL_ADC_ConfigChannel+0x8e>
 80021e6:	a201      	add	r2, pc, #4	@ (adr r2, 80021ec <HAL_ADC_ConfigChannel+0x5c>)
 80021e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ec:	080021fd 	.word	0x080021fd
 80021f0:	08002205 	.word	0x08002205
 80021f4:	0800220d 	.word	0x0800220d
 80021f8:	08002215 	.word	0x08002215
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80021fc:	230c      	movs	r3, #12
 80021fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002202:	e010      	b.n	8002226 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002204:	2312      	movs	r3, #18
 8002206:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800220a:	e00c      	b.n	8002226 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800220c:	2318      	movs	r3, #24
 800220e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002212:	e008      	b.n	8002226 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002214:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002218:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800221c:	e003      	b.n	8002226 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800221e:	2306      	movs	r3, #6
 8002220:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002224:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002234:	f7ff fd62 	bl	8001cfc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fe3a 	bl	8001eb6 <LL_ADC_REG_IsConversionOngoing>
 8002242:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fe46 	bl	8001edc <LL_ADC_INJ_IsConversionOngoing>
 8002250:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002254:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002258:	2b00      	cmp	r3, #0
 800225a:	f040 81bf 	bne.w	80025dc <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800225e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002262:	2b00      	cmp	r3, #0
 8002264:	f040 81ba 	bne.w	80025dc <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002270:	d10f      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2200      	movs	r2, #0
 800227c:	4619      	mov	r1, r3
 800227e:	f7ff fd69 	bl	8001d54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fd23 	bl	8001cd6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002290:	e00e      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6819      	ldr	r1, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	461a      	mov	r2, r3
 80022a0:	f7ff fd58 	bl	8001d54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fd13 	bl	8001cd6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	08db      	lsrs	r3, r3, #3
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d00a      	beq.n	80022e8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	6919      	ldr	r1, [r3, #16]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022e2:	f7ff fca3 	bl	8001c2c <LL_ADC_SetOffset>
 80022e6:	e179      	b.n	80025dc <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fcc0 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 80022f4:	4603      	mov	r3, r0
 80022f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10a      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x184>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fcb5 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 800230a:	4603      	mov	r3, r0
 800230c:	0e9b      	lsrs	r3, r3, #26
 800230e:	f003 021f 	and.w	r2, r3, #31
 8002312:	e01e      	b.n	8002352 <HAL_ADC_ConfigChannel+0x1c2>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fcaa 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 8002320:	4603      	mov	r3, r0
 8002322:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002332:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002336:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800233a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002342:	2320      	movs	r3, #32
 8002344:	e004      	b.n	8002350 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002346:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235a:	2b00      	cmp	r3, #0
 800235c:	d105      	bne.n	800236a <HAL_ADC_ConfigChannel+0x1da>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	0e9b      	lsrs	r3, r3, #26
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	e018      	b.n	800239c <HAL_ADC_ConfigChannel+0x20c>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800237e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002382:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002386:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800238e:	2320      	movs	r3, #32
 8002390:	e004      	b.n	800239c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002392:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800239c:	429a      	cmp	r2, r3
 800239e:	d106      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2200      	movs	r2, #0
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fc79 	bl	8001ca0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2101      	movs	r1, #1
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fc5d 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10a      	bne.n	80023da <HAL_ADC_ConfigChannel+0x24a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2101      	movs	r1, #1
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fc52 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 80023d0:	4603      	mov	r3, r0
 80023d2:	0e9b      	lsrs	r3, r3, #26
 80023d4:	f003 021f 	and.w	r2, r3, #31
 80023d8:	e01e      	b.n	8002418 <HAL_ADC_ConfigChannel+0x288>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2101      	movs	r1, #1
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fc47 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80023f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002400:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002408:	2320      	movs	r3, #32
 800240a:	e004      	b.n	8002416 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 800240c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002410:	fab3 f383 	clz	r3, r3
 8002414:	b2db      	uxtb	r3, r3
 8002416:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002420:	2b00      	cmp	r3, #0
 8002422:	d105      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x2a0>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0e9b      	lsrs	r3, r3, #26
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	e018      	b.n	8002462 <HAL_ADC_ConfigChannel+0x2d2>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002444:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002448:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800244c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002454:	2320      	movs	r3, #32
 8002456:	e004      	b.n	8002462 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002458:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002462:	429a      	cmp	r2, r3
 8002464:	d106      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2200      	movs	r2, #0
 800246c:	2101      	movs	r1, #1
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fc16 	bl	8001ca0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2102      	movs	r1, #2
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fbfa 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 8002480:	4603      	mov	r3, r0
 8002482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10a      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x310>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2102      	movs	r1, #2
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fbef 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	0e9b      	lsrs	r3, r3, #26
 800249a:	f003 021f 	and.w	r2, r3, #31
 800249e:	e01e      	b.n	80024de <HAL_ADC_ConfigChannel+0x34e>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2102      	movs	r1, #2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fbe4 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 80024ac:	4603      	mov	r3, r0
 80024ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024b6:	fa93 f3a3 	rbit	r3, r3
 80024ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80024be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80024c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80024ce:	2320      	movs	r3, #32
 80024d0:	e004      	b.n	80024dc <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80024d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d105      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x366>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	0e9b      	lsrs	r3, r3, #26
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	e014      	b.n	8002520 <HAL_ADC_ConfigChannel+0x390>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002504:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002506:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800250a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002512:	2320      	movs	r3, #32
 8002514:	e004      	b.n	8002520 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002516:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002520:	429a      	cmp	r2, r3
 8002522:	d106      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2200      	movs	r2, #0
 800252a:	2102      	movs	r1, #2
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fbb7 	bl	8001ca0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2103      	movs	r1, #3
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fb9b 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 800253e:	4603      	mov	r3, r0
 8002540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10a      	bne.n	800255e <HAL_ADC_ConfigChannel+0x3ce>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2103      	movs	r1, #3
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fb90 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 8002554:	4603      	mov	r3, r0
 8002556:	0e9b      	lsrs	r3, r3, #26
 8002558:	f003 021f 	and.w	r2, r3, #31
 800255c:	e017      	b.n	800258e <HAL_ADC_ConfigChannel+0x3fe>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2103      	movs	r1, #3
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fb85 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 800256a:	4603      	mov	r3, r0
 800256c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002576:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002578:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800257a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002580:	2320      	movs	r3, #32
 8002582:	e003      	b.n	800258c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002584:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002596:	2b00      	cmp	r3, #0
 8002598:	d105      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x416>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	0e9b      	lsrs	r3, r3, #26
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	e011      	b.n	80025ca <HAL_ADC_ConfigChannel+0x43a>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025ae:	fa93 f3a3 	rbit	r3, r3
 80025b2:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80025b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025b6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80025b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80025be:	2320      	movs	r3, #32
 80025c0:	e003      	b.n	80025ca <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80025c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d106      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2200      	movs	r2, #0
 80025d4:	2103      	movs	r1, #3
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fb62 	bl	8001ca0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fc55 	bl	8001e90 <LL_ADC_IsEnabled>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f040 813f 	bne.w	800286c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6819      	ldr	r1, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	461a      	mov	r2, r3
 80025fc:	f7ff fbd6 	bl	8001dac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4a8e      	ldr	r2, [pc, #568]	@ (8002840 <HAL_ADC_ConfigChannel+0x6b0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	f040 8130 	bne.w	800286c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10b      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x4a4>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	0e9b      	lsrs	r3, r3, #26
 8002622:	3301      	adds	r3, #1
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	2b09      	cmp	r3, #9
 800262a:	bf94      	ite	ls
 800262c:	2301      	movls	r3, #1
 800262e:	2300      	movhi	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	e019      	b.n	8002668 <HAL_ADC_ConfigChannel+0x4d8>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002644:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002646:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800264c:	2320      	movs	r3, #32
 800264e:	e003      	b.n	8002658 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002650:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	3301      	adds	r3, #1
 800265a:	f003 031f 	and.w	r3, r3, #31
 800265e:	2b09      	cmp	r3, #9
 8002660:	bf94      	ite	ls
 8002662:	2301      	movls	r3, #1
 8002664:	2300      	movhi	r3, #0
 8002666:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002668:	2b00      	cmp	r3, #0
 800266a:	d079      	beq.n	8002760 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002674:	2b00      	cmp	r3, #0
 8002676:	d107      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x4f8>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	0e9b      	lsrs	r3, r3, #26
 800267e:	3301      	adds	r3, #1
 8002680:	069b      	lsls	r3, r3, #26
 8002682:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002686:	e015      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x524>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002698:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800269a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80026a0:	2320      	movs	r3, #32
 80026a2:	e003      	b.n	80026ac <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80026a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	3301      	adds	r3, #1
 80026ae:	069b      	lsls	r3, r3, #26
 80026b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d109      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x544>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	0e9b      	lsrs	r3, r3, #26
 80026c6:	3301      	adds	r3, #1
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	2101      	movs	r1, #1
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	e017      	b.n	8002704 <HAL_ADC_ConfigChannel+0x574>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80026e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026e4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80026e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80026ec:	2320      	movs	r3, #32
 80026ee:	e003      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80026f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	f003 031f 	and.w	r3, r3, #31
 80026fe:	2101      	movs	r1, #1
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	ea42 0103 	orr.w	r1, r2, r3
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10a      	bne.n	800272a <HAL_ADC_ConfigChannel+0x59a>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	0e9b      	lsrs	r3, r3, #26
 800271a:	3301      	adds	r3, #1
 800271c:	f003 021f 	and.w	r2, r3, #31
 8002720:	4613      	mov	r3, r2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4413      	add	r3, r2
 8002726:	051b      	lsls	r3, r3, #20
 8002728:	e018      	b.n	800275c <HAL_ADC_ConfigChannel+0x5cc>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800273a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800273c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002742:	2320      	movs	r3, #32
 8002744:	e003      	b.n	800274e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002748:	fab3 f383 	clz	r3, r3
 800274c:	b2db      	uxtb	r3, r3
 800274e:	3301      	adds	r3, #1
 8002750:	f003 021f 	and.w	r2, r3, #31
 8002754:	4613      	mov	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4413      	add	r3, r2
 800275a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800275c:	430b      	orrs	r3, r1
 800275e:	e080      	b.n	8002862 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002768:	2b00      	cmp	r3, #0
 800276a:	d107      	bne.n	800277c <HAL_ADC_ConfigChannel+0x5ec>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0e9b      	lsrs	r3, r3, #26
 8002772:	3301      	adds	r3, #1
 8002774:	069b      	lsls	r3, r3, #26
 8002776:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800277a:	e015      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x618>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800278e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002794:	2320      	movs	r3, #32
 8002796:	e003      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	3301      	adds	r3, #1
 80027a2:	069b      	lsls	r3, r3, #26
 80027a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x638>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	0e9b      	lsrs	r3, r3, #26
 80027ba:	3301      	adds	r3, #1
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	2101      	movs	r1, #1
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	e017      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x668>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	61bb      	str	r3, [r7, #24]
  return result;
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80027e0:	2320      	movs	r3, #32
 80027e2:	e003      	b.n	80027ec <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	3301      	adds	r3, #1
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	2101      	movs	r1, #1
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	ea42 0103 	orr.w	r1, r2, r3
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10d      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x694>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	0e9b      	lsrs	r3, r3, #26
 800280e:	3301      	adds	r3, #1
 8002810:	f003 021f 	and.w	r2, r3, #31
 8002814:	4613      	mov	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4413      	add	r3, r2
 800281a:	3b1e      	subs	r3, #30
 800281c:	051b      	lsls	r3, r3, #20
 800281e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002822:	e01d      	b.n	8002860 <HAL_ADC_ConfigChannel+0x6d0>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	60fb      	str	r3, [r7, #12]
  return result;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d103      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800283c:	2320      	movs	r3, #32
 800283e:	e005      	b.n	800284c <HAL_ADC_ConfigChannel+0x6bc>
 8002840:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	3301      	adds	r3, #1
 800284e:	f003 021f 	and.w	r2, r3, #31
 8002852:	4613      	mov	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4413      	add	r3, r2
 8002858:	3b1e      	subs	r3, #30
 800285a:	051b      	lsls	r3, r3, #20
 800285c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002860:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002866:	4619      	mov	r1, r3
 8002868:	f7ff fa74 	bl	8001d54 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b3d      	ldr	r3, [pc, #244]	@ (8002968 <HAL_ADC_ConfigChannel+0x7d8>)
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d06c      	beq.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002878:	483c      	ldr	r0, [pc, #240]	@ (800296c <HAL_ADC_ConfigChannel+0x7dc>)
 800287a:	f7ff f9c9 	bl	8001c10 <LL_ADC_GetCommonPathInternalCh>
 800287e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a3a      	ldr	r2, [pc, #232]	@ (8002970 <HAL_ADC_ConfigChannel+0x7e0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d127      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800288c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002890:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d121      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a35      	ldr	r2, [pc, #212]	@ (8002974 <HAL_ADC_ConfigChannel+0x7e4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d157      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028aa:	4619      	mov	r1, r3
 80028ac:	482f      	ldr	r0, [pc, #188]	@ (800296c <HAL_ADC_ConfigChannel+0x7dc>)
 80028ae:	f7ff f99c 	bl	8001bea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028b2:	4b31      	ldr	r3, [pc, #196]	@ (8002978 <HAL_ADC_ConfigChannel+0x7e8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	099b      	lsrs	r3, r3, #6
 80028b8:	4a30      	ldr	r2, [pc, #192]	@ (800297c <HAL_ADC_ConfigChannel+0x7ec>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	099b      	lsrs	r3, r3, #6
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	4613      	mov	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80028cc:	e002      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f9      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028da:	e03a      	b.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a27      	ldr	r2, [pc, #156]	@ (8002980 <HAL_ADC_ConfigChannel+0x7f0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d113      	bne.n	800290e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10d      	bne.n	800290e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002974 <HAL_ADC_ConfigChannel+0x7e4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d12a      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002900:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002904:	4619      	mov	r1, r3
 8002906:	4819      	ldr	r0, [pc, #100]	@ (800296c <HAL_ADC_ConfigChannel+0x7dc>)
 8002908:	f7ff f96f 	bl	8001bea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800290c:	e021      	b.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a1c      	ldr	r2, [pc, #112]	@ (8002984 <HAL_ADC_ConfigChannel+0x7f4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d11c      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002918:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800291c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d116      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a12      	ldr	r2, [pc, #72]	@ (8002974 <HAL_ADC_ConfigChannel+0x7e4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d111      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800292e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002932:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002936:	4619      	mov	r1, r3
 8002938:	480c      	ldr	r0, [pc, #48]	@ (800296c <HAL_ADC_ConfigChannel+0x7dc>)
 800293a:	f7ff f956 	bl	8001bea <LL_ADC_SetCommonPathInternalCh>
 800293e:	e008      	b.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002944:	f043 0220 	orr.w	r2, r3, #32
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800295a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800295e:	4618      	mov	r0, r3
 8002960:	37d8      	adds	r7, #216	@ 0xd8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	80080000 	.word	0x80080000
 800296c:	50040300 	.word	0x50040300
 8002970:	c7520000 	.word	0xc7520000
 8002974:	50040000 	.word	0x50040000
 8002978:	20000004 	.word	0x20000004
 800297c:	053e2d63 	.word	0x053e2d63
 8002980:	cb840000 	.word	0xcb840000
 8002984:	80000001 	.word	0x80000001

08002988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002998:	4b0c      	ldr	r3, [pc, #48]	@ (80029cc <__NVIC_SetPriorityGrouping+0x44>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029a4:	4013      	ands	r3, r2
 80029a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ba:	4a04      	ldr	r2, [pc, #16]	@ (80029cc <__NVIC_SetPriorityGrouping+0x44>)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	60d3      	str	r3, [r2, #12]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d4:	4b04      	ldr	r3, [pc, #16]	@ (80029e8 <__NVIC_GetPriorityGrouping+0x18>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	0a1b      	lsrs	r3, r3, #8
 80029da:	f003 0307 	and.w	r3, r3, #7
}
 80029de:	4618      	mov	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	db0b      	blt.n	8002a16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	f003 021f 	and.w	r2, r3, #31
 8002a04:	4907      	ldr	r1, [pc, #28]	@ (8002a24 <__NVIC_EnableIRQ+0x38>)
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	e000e100 	.word	0xe000e100

08002a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	6039      	str	r1, [r7, #0]
 8002a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	db0a      	blt.n	8002a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	490c      	ldr	r1, [pc, #48]	@ (8002a74 <__NVIC_SetPriority+0x4c>)
 8002a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a46:	0112      	lsls	r2, r2, #4
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a50:	e00a      	b.n	8002a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4908      	ldr	r1, [pc, #32]	@ (8002a78 <__NVIC_SetPriority+0x50>)
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	3b04      	subs	r3, #4
 8002a60:	0112      	lsls	r2, r2, #4
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	440b      	add	r3, r1
 8002a66:	761a      	strb	r2, [r3, #24]
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000e100 	.word	0xe000e100
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b089      	sub	sp, #36	@ 0x24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f1c3 0307 	rsb	r3, r3, #7
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	bf28      	it	cs
 8002a9a:	2304      	movcs	r3, #4
 8002a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	2b06      	cmp	r3, #6
 8002aa4:	d902      	bls.n	8002aac <NVIC_EncodePriority+0x30>
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	3b03      	subs	r3, #3
 8002aaa:	e000      	b.n	8002aae <NVIC_EncodePriority+0x32>
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43da      	mvns	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	401a      	ands	r2, r3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ace:	43d9      	mvns	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad4:	4313      	orrs	r3, r2
         );
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3724      	adds	r7, #36	@ 0x24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff ff4c 	bl	8002988 <__NVIC_SetPriorityGrouping>
}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b0a:	f7ff ff61 	bl	80029d0 <__NVIC_GetPriorityGrouping>
 8002b0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	68b9      	ldr	r1, [r7, #8]
 8002b14:	6978      	ldr	r0, [r7, #20]
 8002b16:	f7ff ffb1 	bl	8002a7c <NVIC_EncodePriority>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff ff80 	bl	8002a28 <__NVIC_SetPriority>
}
 8002b28:	bf00      	nop
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff ff54 	bl	80029ec <__NVIC_EnableIRQ>
}
 8002b44:	bf00      	nop
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e0ac      	b.n	8002cb8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 f8b2 	bl	8002ccc <DFSDM_GetChannelFromInstance>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4a55      	ldr	r2, [pc, #340]	@ (8002cc0 <HAL_DFSDM_ChannelInit+0x174>)
 8002b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e09f      	b.n	8002cb8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7fe fbbf 	bl	80012fc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002b7e:	4b51      	ldr	r3, [pc, #324]	@ (8002cc4 <HAL_DFSDM_ChannelInit+0x178>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3301      	adds	r3, #1
 8002b84:	4a4f      	ldr	r2, [pc, #316]	@ (8002cc4 <HAL_DFSDM_ChannelInit+0x178>)
 8002b86:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002b88:	4b4e      	ldr	r3, [pc, #312]	@ (8002cc4 <HAL_DFSDM_ChannelInit+0x178>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d125      	bne.n	8002bdc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002b90:	4b4d      	ldr	r3, [pc, #308]	@ (8002cc8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a4c      	ldr	r2, [pc, #304]	@ (8002cc8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b96:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b9a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002b9c:	4b4a      	ldr	r3, [pc, #296]	@ (8002cc8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4948      	ldr	r1, [pc, #288]	@ (8002cc8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002baa:	4b47      	ldr	r3, [pc, #284]	@ (8002cc8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a46      	ldr	r2, [pc, #280]	@ (8002cc8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002bb0:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8002bb4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	791b      	ldrb	r3, [r3, #4]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d108      	bne.n	8002bd0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002bbe:	4b42      	ldr	r3, [pc, #264]	@ (8002cc8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	041b      	lsls	r3, r3, #16
 8002bca:	493f      	ldr	r1, [pc, #252]	@ (8002cc8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002bd0:	4b3d      	ldr	r3, [pc, #244]	@ (8002cc8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a3c      	ldr	r2, [pc, #240]	@ (8002cc8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002bd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002bda:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8002bea:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6819      	ldr	r1, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002bfa:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002c00:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 020f 	bic.w	r2, r2, #15
 8002c18:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6819      	ldr	r1, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8002c40:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6899      	ldr	r1, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c50:	3b01      	subs	r3, #1
 8002c52:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002c54:	431a      	orrs	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f002 0207 	and.w	r2, r2, #7
 8002c6c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c78:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002c80:	431a      	orrs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c98:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 f810 	bl	8002ccc <DFSDM_GetChannelFromInstance>
 8002cac:	4602      	mov	r2, r0
 8002cae:	4904      	ldr	r1, [pc, #16]	@ (8002cc0 <HAL_DFSDM_ChannelInit+0x174>)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	2000054c 	.word	0x2000054c
 8002cc4:	20000548 	.word	0x20000548
 8002cc8:	40016000 	.word	0x40016000

08002ccc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a1c      	ldr	r2, [pc, #112]	@ (8002d48 <DFSDM_GetChannelFromInstance+0x7c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d102      	bne.n	8002ce2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	e02b      	b.n	8002d3a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a19      	ldr	r2, [pc, #100]	@ (8002d4c <DFSDM_GetChannelFromInstance+0x80>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d102      	bne.n	8002cf0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002cea:	2301      	movs	r3, #1
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	e024      	b.n	8002d3a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a17      	ldr	r2, [pc, #92]	@ (8002d50 <DFSDM_GetChannelFromInstance+0x84>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d102      	bne.n	8002cfe <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	e01d      	b.n	8002d3a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a14      	ldr	r2, [pc, #80]	@ (8002d54 <DFSDM_GetChannelFromInstance+0x88>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d102      	bne.n	8002d0c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002d06:	2304      	movs	r3, #4
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	e016      	b.n	8002d3a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a12      	ldr	r2, [pc, #72]	@ (8002d58 <DFSDM_GetChannelFromInstance+0x8c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d102      	bne.n	8002d1a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002d14:	2305      	movs	r3, #5
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	e00f      	b.n	8002d3a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a0f      	ldr	r2, [pc, #60]	@ (8002d5c <DFSDM_GetChannelFromInstance+0x90>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d102      	bne.n	8002d28 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002d22:	2306      	movs	r3, #6
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	e008      	b.n	8002d3a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a0d      	ldr	r2, [pc, #52]	@ (8002d60 <DFSDM_GetChannelFromInstance+0x94>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d102      	bne.n	8002d36 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002d30:	2307      	movs	r3, #7
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	e001      	b.n	8002d3a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002d36:	2303      	movs	r3, #3
 8002d38:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	40016000 	.word	0x40016000
 8002d4c:	40016020 	.word	0x40016020
 8002d50:	40016040 	.word	0x40016040
 8002d54:	40016080 	.word	0x40016080
 8002d58:	400160a0 	.word	0x400160a0
 8002d5c:	400160c0 	.word	0x400160c0
 8002d60:	400160e0 	.word	0x400160e0

08002d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d72:	e166      	b.n	8003042 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	2101      	movs	r1, #1
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d80:	4013      	ands	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 8158 	beq.w	800303c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d005      	beq.n	8002da4 <HAL_GPIO_Init+0x40>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d130      	bne.n	8002e06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	2203      	movs	r2, #3
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4013      	ands	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dda:	2201      	movs	r2, #1
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4013      	ands	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	091b      	lsrs	r3, r3, #4
 8002df0:	f003 0201 	and.w	r2, r3, #1
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d017      	beq.n	8002e42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4013      	ands	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d123      	bne.n	8002e96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	08da      	lsrs	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3208      	adds	r2, #8
 8002e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	220f      	movs	r2, #15
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	08da      	lsrs	r2, r3, #3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3208      	adds	r2, #8
 8002e90:	6939      	ldr	r1, [r7, #16]
 8002e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 0203 	and.w	r2, r3, #3
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 80b2 	beq.w	800303c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed8:	4b61      	ldr	r3, [pc, #388]	@ (8003060 <HAL_GPIO_Init+0x2fc>)
 8002eda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002edc:	4a60      	ldr	r2, [pc, #384]	@ (8003060 <HAL_GPIO_Init+0x2fc>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ee4:	4b5e      	ldr	r3, [pc, #376]	@ (8003060 <HAL_GPIO_Init+0x2fc>)
 8002ee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ef0:	4a5c      	ldr	r2, [pc, #368]	@ (8003064 <HAL_GPIO_Init+0x300>)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	089b      	lsrs	r3, r3, #2
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	220f      	movs	r2, #15
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4013      	ands	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f1a:	d02b      	beq.n	8002f74 <HAL_GPIO_Init+0x210>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a52      	ldr	r2, [pc, #328]	@ (8003068 <HAL_GPIO_Init+0x304>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d025      	beq.n	8002f70 <HAL_GPIO_Init+0x20c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a51      	ldr	r2, [pc, #324]	@ (800306c <HAL_GPIO_Init+0x308>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d01f      	beq.n	8002f6c <HAL_GPIO_Init+0x208>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a50      	ldr	r2, [pc, #320]	@ (8003070 <HAL_GPIO_Init+0x30c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d019      	beq.n	8002f68 <HAL_GPIO_Init+0x204>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a4f      	ldr	r2, [pc, #316]	@ (8003074 <HAL_GPIO_Init+0x310>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d013      	beq.n	8002f64 <HAL_GPIO_Init+0x200>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a4e      	ldr	r2, [pc, #312]	@ (8003078 <HAL_GPIO_Init+0x314>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d00d      	beq.n	8002f60 <HAL_GPIO_Init+0x1fc>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a4d      	ldr	r2, [pc, #308]	@ (800307c <HAL_GPIO_Init+0x318>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d007      	beq.n	8002f5c <HAL_GPIO_Init+0x1f8>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a4c      	ldr	r2, [pc, #304]	@ (8003080 <HAL_GPIO_Init+0x31c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d101      	bne.n	8002f58 <HAL_GPIO_Init+0x1f4>
 8002f54:	2307      	movs	r3, #7
 8002f56:	e00e      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f58:	2308      	movs	r3, #8
 8002f5a:	e00c      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f5c:	2306      	movs	r3, #6
 8002f5e:	e00a      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f60:	2305      	movs	r3, #5
 8002f62:	e008      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f64:	2304      	movs	r3, #4
 8002f66:	e006      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e004      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e002      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f74:	2300      	movs	r3, #0
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	f002 0203 	and.w	r2, r2, #3
 8002f7c:	0092      	lsls	r2, r2, #2
 8002f7e:	4093      	lsls	r3, r2
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f86:	4937      	ldr	r1, [pc, #220]	@ (8003064 <HAL_GPIO_Init+0x300>)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	089b      	lsrs	r3, r3, #2
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f94:	4b3b      	ldr	r3, [pc, #236]	@ (8003084 <HAL_GPIO_Init+0x320>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fb8:	4a32      	ldr	r2, [pc, #200]	@ (8003084 <HAL_GPIO_Init+0x320>)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fbe:	4b31      	ldr	r3, [pc, #196]	@ (8003084 <HAL_GPIO_Init+0x320>)
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fe2:	4a28      	ldr	r2, [pc, #160]	@ (8003084 <HAL_GPIO_Init+0x320>)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002fe8:	4b26      	ldr	r3, [pc, #152]	@ (8003084 <HAL_GPIO_Init+0x320>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4313      	orrs	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800300c:	4a1d      	ldr	r2, [pc, #116]	@ (8003084 <HAL_GPIO_Init+0x320>)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003012:	4b1c      	ldr	r3, [pc, #112]	@ (8003084 <HAL_GPIO_Init+0x320>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	43db      	mvns	r3, r3
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4013      	ands	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003036:	4a13      	ldr	r2, [pc, #76]	@ (8003084 <HAL_GPIO_Init+0x320>)
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	3301      	adds	r3, #1
 8003040:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	fa22 f303 	lsr.w	r3, r2, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	f47f ae91 	bne.w	8002d74 <HAL_GPIO_Init+0x10>
  }
}
 8003052:	bf00      	nop
 8003054:	bf00      	nop
 8003056:	371c      	adds	r7, #28
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	40021000 	.word	0x40021000
 8003064:	40010000 	.word	0x40010000
 8003068:	48000400 	.word	0x48000400
 800306c:	48000800 	.word	0x48000800
 8003070:	48000c00 	.word	0x48000c00
 8003074:	48001000 	.word	0x48001000
 8003078:	48001400 	.word	0x48001400
 800307c:	48001800 	.word	0x48001800
 8003080:	48001c00 	.word	0x48001c00
 8003084:	40010400 	.word	0x40010400

08003088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	807b      	strh	r3, [r7, #2]
 8003094:	4613      	mov	r3, r2
 8003096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003098:	787b      	ldrb	r3, [r7, #1]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800309e:	887a      	ldrh	r2, [r7, #2]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030a4:	e002      	b.n	80030ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030a6:	887a      	ldrh	r2, [r7, #2]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030ca:	887a      	ldrh	r2, [r7, #2]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4013      	ands	r3, r2
 80030d0:	041a      	lsls	r2, r3, #16
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	43d9      	mvns	r1, r3
 80030d6:	887b      	ldrh	r3, [r7, #2]
 80030d8:	400b      	ands	r3, r1
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	619a      	str	r2, [r3, #24]
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030f6:	4b08      	ldr	r3, [pc, #32]	@ (8003118 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030f8:	695a      	ldr	r2, [r3, #20]
 80030fa:	88fb      	ldrh	r3, [r7, #6]
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d006      	beq.n	8003110 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003102:	4a05      	ldr	r2, [pc, #20]	@ (8003118 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	4618      	mov	r0, r3
 800310c:	f000 f806 	bl	800311c <HAL_GPIO_EXTI_Callback>
  }
}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40010400 	.word	0x40010400

0800311c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e08d      	b.n	8003260 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d106      	bne.n	800315e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7fe f933 	bl	80013c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2224      	movs	r2, #36	@ 0x24
 8003162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0201 	bic.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003182:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003192:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d107      	bne.n	80031ac <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031a8:	609a      	str	r2, [r3, #8]
 80031aa:	e006      	b.n	80031ba <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80031b8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d108      	bne.n	80031d4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	e007      	b.n	80031e4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031e2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031f6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003206:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69d9      	ldr	r1, [r3, #28]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1a      	ldr	r2, [r3, #32]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0201 	orr.w	r2, r2, #1
 8003240:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b20      	cmp	r3, #32
 800327c:	d138      	bne.n	80032f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003288:	2302      	movs	r3, #2
 800328a:	e032      	b.n	80032f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2224      	movs	r2, #36	@ 0x24
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6819      	ldr	r1, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	e000      	b.n	80032f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032f0:	2302      	movs	r3, #2
  }
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032fe:	b480      	push	{r7}
 8003300:	b085      	sub	sp, #20
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b20      	cmp	r3, #32
 8003312:	d139      	bne.n	8003388 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800331e:	2302      	movs	r3, #2
 8003320:	e033      	b.n	800338a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2224      	movs	r2, #36	@ 0x24
 800332e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0201 	bic.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003350:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	e000      	b.n	800338a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003388:	2302      	movs	r3, #2
  }
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
	...

08003398 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af02      	add	r7, sp, #8
 800339e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80033a4:	f7fe fc02 	bl	8001bac <HAL_GetTick>
 80033a8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d102      	bne.n	80033b6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
 80033b4:	e092      	b.n	80034dc <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f040 808b 	bne.w	80034dc <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7fe f89e 	bl	8001508 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80033cc:	f241 3188 	movw	r1, #5000	@ 0x1388
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f88b 	bl	80034ec <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	4b42      	ldr	r3, [pc, #264]	@ (80034e8 <HAL_OSPI_Init+0x150>)
 80033de:	4013      	ands	r3, r2
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	68d1      	ldr	r1, [r2, #12]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6912      	ldr	r2, [r2, #16]
 80033e8:	3a01      	subs	r2, #1
 80033ea:	0412      	lsls	r2, r2, #16
 80033ec:	4311      	orrs	r1, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6952      	ldr	r2, [r2, #20]
 80033f2:	3a01      	subs	r2, #1
 80033f4:	0212      	lsls	r2, r2, #8
 80033f6:	4311      	orrs	r1, r2
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80033fc:	4311      	orrs	r1, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	69d2      	ldr	r2, [r2, #28]
 8003402:	4311      	orrs	r1, r2
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	430b      	orrs	r3, r1
 800340a:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	0412      	lsls	r2, r2, #16
 8003416:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	3b01      	subs	r3, #1
 8003428:	021a      	lsls	r2, r3, #8
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2200      	movs	r2, #0
 800343c:	2120      	movs	r1, #32
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fb98 	bl	8003b74 <OSPI_WaitFlagStateUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d146      	bne.n	80034dc <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	1e5a      	subs	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003484:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d107      	bne.n	80034c4 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0202 	orr.w	r2, r2, #2
 80034c2:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034cc:	d103      	bne.n	80034d6 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	645a      	str	r2, [r3, #68]	@ 0x44
 80034d4:	e002      	b.n	80034dc <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2202      	movs	r2, #2
 80034da:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	f8e0f8f4 	.word	0xf8e0f8f4

080034ec <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
	...

0800350c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b092      	sub	sp, #72	@ 0x48
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a08      	ldr	r2, [pc, #32]	@ (800354c <HAL_OSPIM_Config+0x40>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d105      	bne.n	800353a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 1U;
 8003532:	2301      	movs	r3, #1
 8003534:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8003538:	e004      	b.n	8003544 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800353a:	2301      	movs	r3, #1
 800353c:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003544:	2300      	movs	r3, #0
 8003546:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800354a:	e01f      	b.n	800358c <HAL_OSPIM_Config+0x80>
 800354c:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8003550:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003554:	3301      	adds	r3, #1
 8003556:	b2d8      	uxtb	r0, r3
 8003558:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800355c:	f107 0114 	add.w	r1, r7, #20
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	4619      	mov	r1, r3
 800356c:	f000 fb3a 	bl	8003be4 <OSPIM_GetConfig>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2208      	movs	r2, #8
 8003580:	649a      	str	r2, [r3, #72]	@ 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003582:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003586:	3301      	adds	r3, #1
 8003588:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800358c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003590:	2b01      	cmp	r3, #1
 8003592:	d9dd      	bls.n	8003550 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8003594:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003598:	2b00      	cmp	r3, #0
 800359a:	f040 82de 	bne.w	8003b5a <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800359e:	4bc6      	ldr	r3, [pc, #792]	@ (80038b8 <HAL_OSPIM_Config+0x3ac>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00b      	beq.n	80035c2 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80035aa:	4bc3      	ldr	r3, [pc, #780]	@ (80038b8 <HAL_OSPIM_Config+0x3ac>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4ac2      	ldr	r2, [pc, #776]	@ (80038b8 <HAL_OSPIM_Config+0x3ac>)
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80035b6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80035c2:	4bbe      	ldr	r3, [pc, #760]	@ (80038bc <HAL_OSPIM_Config+0x3b0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00b      	beq.n	80035e6 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80035ce:	4bbb      	ldr	r3, [pc, #748]	@ (80038bc <HAL_OSPIM_Config+0x3b0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4aba      	ldr	r2, [pc, #744]	@ (80038bc <HAL_OSPIM_Config+0x3b0>)
 80035d4:	f023 0301 	bic.w	r3, r3, #1
 80035d8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80035da:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80035de:	f043 0302 	orr.w	r3, r3, #2
 80035e2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80035e6:	49b6      	ldr	r1, [pc, #728]	@ (80038c0 <HAL_OSPIM_Config+0x3b4>)
 80035e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	3348      	adds	r3, #72	@ 0x48
 80035f4:	443b      	add	r3, r7
 80035f6:	3b2c      	subs	r3, #44	@ 0x2c
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	440b      	add	r3, r1
 8003600:	6859      	ldr	r1, [r3, #4]
 8003602:	48af      	ldr	r0, [pc, #700]	@ (80038c0 <HAL_OSPIM_Config+0x3b4>)
 8003604:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	3348      	adds	r3, #72	@ 0x48
 8003610:	443b      	add	r3, r7
 8003612:	3b2c      	subs	r3, #44	@ 0x2c
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3b01      	subs	r3, #1
 8003618:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4403      	add	r3, r0
 8003620:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8003622:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003624:	4613      	mov	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	3348      	adds	r3, #72	@ 0x48
 800362e:	443b      	add	r3, r7
 8003630:	3b34      	subs	r3, #52	@ 0x34
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80a1 	beq.w	800377c <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800363a:	49a1      	ldr	r1, [pc, #644]	@ (80038c0 <HAL_OSPIM_Config+0x3b4>)
 800363c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	3348      	adds	r3, #72	@ 0x48
 8003648:	443b      	add	r3, r7
 800364a:	3b34      	subs	r3, #52	@ 0x34
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3b01      	subs	r3, #1
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	6859      	ldr	r1, [r3, #4]
 8003656:	489a      	ldr	r0, [pc, #616]	@ (80038c0 <HAL_OSPIM_Config+0x3b4>)
 8003658:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800365a:	4613      	mov	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	3348      	adds	r3, #72	@ 0x48
 8003664:	443b      	add	r3, r7
 8003666:	3b34      	subs	r3, #52	@ 0x34
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	3b01      	subs	r3, #1
 800366c:	f021 0201 	bic.w	r2, r1, #1
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4403      	add	r3, r0
 8003674:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003676:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	3348      	adds	r3, #72	@ 0x48
 8003682:	443b      	add	r3, r7
 8003684:	3b30      	subs	r3, #48	@ 0x30
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01d      	beq.n	80036c8 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800368c:	498c      	ldr	r1, [pc, #560]	@ (80038c0 <HAL_OSPIM_Config+0x3b4>)
 800368e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	3348      	adds	r3, #72	@ 0x48
 800369a:	443b      	add	r3, r7
 800369c:	3b30      	subs	r3, #48	@ 0x30
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3b01      	subs	r3, #1
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	6859      	ldr	r1, [r3, #4]
 80036a8:	4885      	ldr	r0, [pc, #532]	@ (80038c0 <HAL_OSPIM_Config+0x3b4>)
 80036aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	3348      	adds	r3, #72	@ 0x48
 80036b6:	443b      	add	r3, r7
 80036b8:	3b30      	subs	r3, #48	@ 0x30
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3b01      	subs	r3, #1
 80036be:	f021 0210 	bic.w	r2, r1, #16
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4403      	add	r3, r0
 80036c6:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80036c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	3348      	adds	r3, #72	@ 0x48
 80036d4:	443b      	add	r3, r7
 80036d6:	3b28      	subs	r3, #40	@ 0x28
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d021      	beq.n	8003722 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80036de:	4978      	ldr	r1, [pc, #480]	@ (80038c0 <HAL_OSPIM_Config+0x3b4>)
 80036e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	3348      	adds	r3, #72	@ 0x48
 80036ec:	443b      	add	r3, r7
 80036ee:	3b28      	subs	r3, #40	@ 0x28
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	6859      	ldr	r1, [r3, #4]
 80036fe:	4870      	ldr	r0, [pc, #448]	@ (80038c0 <HAL_OSPIM_Config+0x3b4>)
 8003700:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	3348      	adds	r3, #72	@ 0x48
 800370c:	443b      	add	r3, r7
 800370e:	3b28      	subs	r3, #40	@ 0x28
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3b01      	subs	r3, #1
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4403      	add	r3, r0
 8003720:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003722:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	3348      	adds	r3, #72	@ 0x48
 800372e:	443b      	add	r3, r7
 8003730:	3b24      	subs	r3, #36	@ 0x24
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d021      	beq.n	800377c <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003738:	4961      	ldr	r1, [pc, #388]	@ (80038c0 <HAL_OSPIM_Config+0x3b4>)
 800373a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	3348      	adds	r3, #72	@ 0x48
 8003746:	443b      	add	r3, r7
 8003748:	3b24      	subs	r3, #36	@ 0x24
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3b01      	subs	r3, #1
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	6859      	ldr	r1, [r3, #4]
 8003758:	4859      	ldr	r0, [pc, #356]	@ (80038c0 <HAL_OSPIM_Config+0x3b4>)
 800375a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	3348      	adds	r3, #72	@ 0x48
 8003766:	443b      	add	r3, r7
 8003768:	3b24      	subs	r3, #36	@ 0x24
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3b01      	subs	r3, #1
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4403      	add	r3, r0
 800377a:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	6819      	ldr	r1, [r3, #0]
 8003780:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	3348      	adds	r3, #72	@ 0x48
 800378e:	443b      	add	r3, r7
 8003790:	3b34      	subs	r3, #52	@ 0x34
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4299      	cmp	r1, r3
 8003796:	d038      	beq.n	800380a <HAL_OSPIM_Config+0x2fe>
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	6859      	ldr	r1, [r3, #4]
 800379c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80037a0:	4613      	mov	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	3348      	adds	r3, #72	@ 0x48
 80037aa:	443b      	add	r3, r7
 80037ac:	3b30      	subs	r3, #48	@ 0x30
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4299      	cmp	r1, r3
 80037b2:	d02a      	beq.n	800380a <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	6899      	ldr	r1, [r3, #8]
 80037b8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	3348      	adds	r3, #72	@ 0x48
 80037c6:	443b      	add	r3, r7
 80037c8:	3b2c      	subs	r3, #44	@ 0x2c
 80037ca:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80037cc:	4299      	cmp	r1, r3
 80037ce:	d01c      	beq.n	800380a <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	68d9      	ldr	r1, [r3, #12]
 80037d4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	3348      	adds	r3, #72	@ 0x48
 80037e2:	443b      	add	r3, r7
 80037e4:	3b28      	subs	r3, #40	@ 0x28
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4299      	cmp	r1, r3
 80037ea:	d00e      	beq.n	800380a <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	6919      	ldr	r1, [r3, #16]
 80037f0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	3348      	adds	r3, #72	@ 0x48
 80037fe:	443b      	add	r3, r7
 8003800:	3b24      	subs	r3, #36	@ 0x24
 8003802:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003804:	4299      	cmp	r1, r3
 8003806:	f040 80d3 	bne.w	80039b0 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800380a:	492d      	ldr	r1, [pc, #180]	@ (80038c0 <HAL_OSPIM_Config+0x3b4>)
 800380c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	3348      	adds	r3, #72	@ 0x48
 800381a:	443b      	add	r3, r7
 800381c:	3b34      	subs	r3, #52	@ 0x34
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	3b01      	subs	r3, #1
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	6859      	ldr	r1, [r3, #4]
 8003828:	4825      	ldr	r0, [pc, #148]	@ (80038c0 <HAL_OSPIM_Config+0x3b4>)
 800382a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	3348      	adds	r3, #72	@ 0x48
 8003838:	443b      	add	r3, r7
 800383a:	3b34      	subs	r3, #52	@ 0x34
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3b01      	subs	r3, #1
 8003840:	f021 0201 	bic.w	r2, r1, #1
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4403      	add	r3, r0
 8003848:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800384a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	3348      	adds	r3, #72	@ 0x48
 8003858:	443b      	add	r3, r7
 800385a:	3b30      	subs	r3, #48	@ 0x30
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d01f      	beq.n	80038a2 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003862:	4917      	ldr	r1, [pc, #92]	@ (80038c0 <HAL_OSPIM_Config+0x3b4>)
 8003864:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	3348      	adds	r3, #72	@ 0x48
 8003872:	443b      	add	r3, r7
 8003874:	3b30      	subs	r3, #48	@ 0x30
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3b01      	subs	r3, #1
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	480f      	ldr	r0, [pc, #60]	@ (80038c0 <HAL_OSPIM_Config+0x3b4>)
 8003882:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003886:	4613      	mov	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	3348      	adds	r3, #72	@ 0x48
 8003890:	443b      	add	r3, r7
 8003892:	3b30      	subs	r3, #48	@ 0x30
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3b01      	subs	r3, #1
 8003898:	f021 0210 	bic.w	r2, r1, #16
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4403      	add	r3, r0
 80038a0:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80038a2:	4907      	ldr	r1, [pc, #28]	@ (80038c0 <HAL_OSPIM_Config+0x3b4>)
 80038a4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	3348      	adds	r3, #72	@ 0x48
 80038b2:	443b      	add	r3, r7
 80038b4:	3b2c      	subs	r3, #44	@ 0x2c
 80038b6:	e005      	b.n	80038c4 <HAL_OSPIM_Config+0x3b8>
 80038b8:	a0001000 	.word	0xa0001000
 80038bc:	a0001400 	.word	0xa0001400
 80038c0:	50061c00 	.word	0x50061c00
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	6859      	ldr	r1, [r3, #4]
 80038ce:	48a6      	ldr	r0, [pc, #664]	@ (8003b68 <HAL_OSPIM_Config+0x65c>)
 80038d0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80038d4:	4613      	mov	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	3348      	adds	r3, #72	@ 0x48
 80038de:	443b      	add	r3, r7
 80038e0:	3b2c      	subs	r3, #44	@ 0x2c
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4403      	add	r3, r0
 80038ee:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80038f0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	3348      	adds	r3, #72	@ 0x48
 80038fe:	443b      	add	r3, r7
 8003900:	3b28      	subs	r3, #40	@ 0x28
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d023      	beq.n	8003950 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003908:	4997      	ldr	r1, [pc, #604]	@ (8003b68 <HAL_OSPIM_Config+0x65c>)
 800390a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	3348      	adds	r3, #72	@ 0x48
 8003918:	443b      	add	r3, r7
 800391a:	3b28      	subs	r3, #40	@ 0x28
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3b01      	subs	r3, #1
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	6859      	ldr	r1, [r3, #4]
 800392a:	488f      	ldr	r0, [pc, #572]	@ (8003b68 <HAL_OSPIM_Config+0x65c>)
 800392c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	3348      	adds	r3, #72	@ 0x48
 800393a:	443b      	add	r3, r7
 800393c:	3b28      	subs	r3, #40	@ 0x28
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3b01      	subs	r3, #1
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4403      	add	r3, r0
 800394e:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003950:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	3348      	adds	r3, #72	@ 0x48
 800395e:	443b      	add	r3, r7
 8003960:	3b24      	subs	r3, #36	@ 0x24
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d023      	beq.n	80039b0 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003968:	497f      	ldr	r1, [pc, #508]	@ (8003b68 <HAL_OSPIM_Config+0x65c>)
 800396a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800396e:	4613      	mov	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	3348      	adds	r3, #72	@ 0x48
 8003978:	443b      	add	r3, r7
 800397a:	3b24      	subs	r3, #36	@ 0x24
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	3b01      	subs	r3, #1
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	6859      	ldr	r1, [r3, #4]
 800398a:	4877      	ldr	r0, [pc, #476]	@ (8003b68 <HAL_OSPIM_Config+0x65c>)
 800398c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	3348      	adds	r3, #72	@ 0x48
 800399a:	443b      	add	r3, r7
 800399c:	3b24      	subs	r3, #36	@ 0x24
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4403      	add	r3, r0
 80039ae:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80039b0:	4a6d      	ldr	r2, [pc, #436]	@ (8003b68 <HAL_OSPIM_Config+0x65c>)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039c4:	025b      	lsls	r3, r3, #9
 80039c6:	431a      	orrs	r2, r3
 80039c8:	4967      	ldr	r1, [pc, #412]	@ (8003b68 <HAL_OSPIM_Config+0x65c>)
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80039da:	4a63      	ldr	r2, [pc, #396]	@ (8003b68 <HAL_OSPIM_Config+0x65c>)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f023 0203 	bic.w	r2, r3, #3
 80039ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	431a      	orrs	r2, r3
 80039f2:	495d      	ldr	r1, [pc, #372]	@ (8003b68 <HAL_OSPIM_Config+0x65c>)
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	f042 0201 	orr.w	r2, r2, #1
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d014      	beq.n	8003a36 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003a0c:	4a56      	ldr	r2, [pc, #344]	@ (8003b68 <HAL_OSPIM_Config+0x65c>)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a20:	015b      	lsls	r3, r3, #5
 8003a22:	431a      	orrs	r2, r3
 8003a24:	4950      	ldr	r1, [pc, #320]	@ (8003b68 <HAL_OSPIM_Config+0x65c>)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	f042 0210 	orr.w	r2, r2, #16
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d019      	beq.n	8003a76 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003a42:	4a49      	ldr	r2, [pc, #292]	@ (8003b68 <HAL_OSPIM_Config+0x65c>)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003a58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a5a:	049b      	lsls	r3, r3, #18
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	4942      	ldr	r1, [pc, #264]	@ (8003b68 <HAL_OSPIM_Config+0x65c>)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	605a      	str	r2, [r3, #4]
 8003a74:	e01c      	b.n	8003ab0 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d018      	beq.n	8003ab0 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003a7e:	4a3a      	ldr	r2, [pc, #232]	@ (8003b68 <HAL_OSPIM_Config+0x65c>)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	3b01      	subs	r3, #1
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003a94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a96:	069b      	lsls	r3, r3, #26
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	4933      	ldr	r1, [pc, #204]	@ (8003b68 <HAL_OSPIM_Config+0x65c>)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d019      	beq.n	8003af0 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003abc:	4a2a      	ldr	r2, [pc, #168]	@ (8003b68 <HAL_OSPIM_Config+0x65c>)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ad4:	049b      	lsls	r3, r3, #18
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	4923      	ldr	r1, [pc, #140]	@ (8003b68 <HAL_OSPIM_Config+0x65c>)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	e01c      	b.n	8003b2a <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d018      	beq.n	8003b2a <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003af8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b68 <HAL_OSPIM_Config+0x65c>)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003b0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b10:	069b      	lsls	r3, r3, #26
 8003b12:	431a      	orrs	r2, r3
 8003b14:	4914      	ldr	r1, [pc, #80]	@ (8003b68 <HAL_OSPIM_Config+0x65c>)
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003b2a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003b36:	4b0d      	ldr	r3, [pc, #52]	@ (8003b6c <HAL_OSPIM_Config+0x660>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b6c <HAL_OSPIM_Config+0x660>)
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003b42:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d005      	beq.n	8003b5a <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003b4e:	4b08      	ldr	r3, [pc, #32]	@ (8003b70 <HAL_OSPIM_Config+0x664>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a07      	ldr	r2, [pc, #28]	@ (8003b70 <HAL_OSPIM_Config+0x664>)
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003b5a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3748      	adds	r7, #72	@ 0x48
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	50061c00 	.word	0x50061c00
 8003b6c:	a0001000 	.word	0xa0001000
 8003b70:	a0001400 	.word	0xa0001400

08003b74 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	4613      	mov	r3, r2
 8003b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003b84:	e01a      	b.n	8003bbc <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8c:	d016      	beq.n	8003bbc <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8e:	f7fe f80d 	bl	8001bac <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d302      	bcc.n	8003ba4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10b      	bne.n	8003bbc <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003baa:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bb0:	f043 0201 	orr.w	r2, r3, #1
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	649a      	str	r2, [r3, #72]	@ 0x48

        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e00e      	b.n	8003bda <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6a1a      	ldr	r2, [r3, #32]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	bf14      	ite	ne
 8003bca:	2301      	movne	r3, #1
 8003bcc:	2300      	moveq	r3, #0
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d1d6      	bne.n	8003b86 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	6039      	str	r1, [r7, #0]
 8003bee:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <OSPIM_GetConfig+0x26>
 8003bfe:	79fb      	ldrb	r3, [r7, #7]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d802      	bhi.n	8003c0a <OSPIM_GetConfig+0x26>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d102      	bne.n	8003c10 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	75fb      	strb	r3, [r7, #23]
 8003c0e:	e08e      	b.n	8003d2e <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2200      	movs	r2, #0
 8003c26:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d101      	bne.n	8003c38 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003c34:	4b41      	ldr	r3, [pc, #260]	@ (8003d3c <OSPIM_GetConfig+0x158>)
 8003c36:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	e074      	b.n	8003d28 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8003c3e:	4a40      	ldr	r2, [pc, #256]	@ (8003d40 <OSPIM_GetConfig+0x15c>)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	4053      	eors	r3, r2
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d103      	bne.n	8003c6a <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f003 0310 	and.w	r3, r3, #16
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00a      	beq.n	8003c8a <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4053      	eors	r3, r2
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d103      	bne.n	8003c8a <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	4053      	eors	r3, r2
 8003c9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d103      	bne.n	8003caa <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d018      	beq.n	8003ce6 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	4053      	eors	r3, r2
 8003cba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d111      	bne.n	8003ce6 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d106      	bne.n	8003cda <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	60da      	str	r2, [r3, #12]
 8003cd8:	e005      	b.n	8003ce6 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d018      	beq.n	8003d22 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4053      	eors	r3, r2
 8003cf6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d111      	bne.n	8003d22 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d106      	bne.n	8003d16 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	611a      	str	r2, [r3, #16]
 8003d14:	e005      	b.n	8003d22 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	3301      	adds	r3, #1
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d987      	bls.n	8003c3e <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8003d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	371c      	adds	r7, #28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	04040222 	.word	0x04040222
 8003d40:	50061c00 	.word	0x50061c00

08003d44 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d48:	4b05      	ldr	r3, [pc, #20]	@ (8003d60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a04      	ldr	r2, [pc, #16]	@ (8003d60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d52:	6013      	str	r3, [r2, #0]
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40007000 	.word	0x40007000

08003d64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d68:	4b0d      	ldr	r3, [pc, #52]	@ (8003da0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d74:	d102      	bne.n	8003d7c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003d76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d7a:	e00b      	b.n	8003d94 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003d7c:	4b08      	ldr	r3, [pc, #32]	@ (8003da0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d8a:	d102      	bne.n	8003d92 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003d8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d90:	e000      	b.n	8003d94 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003d92:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40007000 	.word	0x40007000

08003da4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d141      	bne.n	8003e36 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003db2:	4b4b      	ldr	r3, [pc, #300]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dbe:	d131      	bne.n	8003e24 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dc0:	4b47      	ldr	r3, [pc, #284]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dc6:	4a46      	ldr	r2, [pc, #280]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dcc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dd0:	4b43      	ldr	r3, [pc, #268]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003dd8:	4a41      	ldr	r2, [pc, #260]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003de0:	4b40      	ldr	r3, [pc, #256]	@ (8003ee4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2232      	movs	r2, #50	@ 0x32
 8003de6:	fb02 f303 	mul.w	r3, r2, r3
 8003dea:	4a3f      	ldr	r2, [pc, #252]	@ (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003dec:	fba2 2303 	umull	r2, r3, r2, r3
 8003df0:	0c9b      	lsrs	r3, r3, #18
 8003df2:	3301      	adds	r3, #1
 8003df4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003df6:	e002      	b.n	8003dfe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dfe:	4b38      	ldr	r3, [pc, #224]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e0a:	d102      	bne.n	8003e12 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f2      	bne.n	8003df8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e12:	4b33      	ldr	r3, [pc, #204]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e1e:	d158      	bne.n	8003ed2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e057      	b.n	8003ed4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e24:	4b2e      	ldr	r3, [pc, #184]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e2a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003e34:	e04d      	b.n	8003ed2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e3c:	d141      	bne.n	8003ec2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e3e:	4b28      	ldr	r3, [pc, #160]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e4a:	d131      	bne.n	8003eb0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e4c:	4b24      	ldr	r3, [pc, #144]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e52:	4a23      	ldr	r2, [pc, #140]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e5c:	4b20      	ldr	r3, [pc, #128]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e64:	4a1e      	ldr	r2, [pc, #120]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ee4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2232      	movs	r2, #50	@ 0x32
 8003e72:	fb02 f303 	mul.w	r3, r2, r3
 8003e76:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e78:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7c:	0c9b      	lsrs	r3, r3, #18
 8003e7e:	3301      	adds	r3, #1
 8003e80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e82:	e002      	b.n	8003e8a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e8a:	4b15      	ldr	r3, [pc, #84]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e96:	d102      	bne.n	8003e9e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f2      	bne.n	8003e84 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e9e:	4b10      	ldr	r3, [pc, #64]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eaa:	d112      	bne.n	8003ed2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e011      	b.n	8003ed4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ebc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003ec0:	e007      	b.n	8003ed2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ec2:	4b07      	ldr	r3, [pc, #28]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003eca:	4a05      	ldr	r2, [pc, #20]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ecc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ed0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	40007000 	.word	0x40007000
 8003ee4:	20000004 	.word	0x20000004
 8003ee8:	431bde83 	.word	0x431bde83

08003eec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d102      	bne.n	8003f00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	f000 bc08 	b.w	8004710 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f00:	4b96      	ldr	r3, [pc, #600]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 030c 	and.w	r3, r3, #12
 8003f08:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f0a:	4b94      	ldr	r3, [pc, #592]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 80e4 	beq.w	80040ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d007      	beq.n	8003f38 <HAL_RCC_OscConfig+0x4c>
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	2b0c      	cmp	r3, #12
 8003f2c:	f040 808b 	bne.w	8004046 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	f040 8087 	bne.w	8004046 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f38:	4b88      	ldr	r3, [pc, #544]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <HAL_RCC_OscConfig+0x64>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e3df      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1a      	ldr	r2, [r3, #32]
 8003f54:	4b81      	ldr	r3, [pc, #516]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0308 	and.w	r3, r3, #8
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d004      	beq.n	8003f6a <HAL_RCC_OscConfig+0x7e>
 8003f60:	4b7e      	ldr	r3, [pc, #504]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f68:	e005      	b.n	8003f76 <HAL_RCC_OscConfig+0x8a>
 8003f6a:	4b7c      	ldr	r3, [pc, #496]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f70:	091b      	lsrs	r3, r3, #4
 8003f72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d223      	bcs.n	8003fc2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fdfe 	bl	8004b80 <RCC_SetFlashLatencyFromMSIRange>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e3c0      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f8e:	4b73      	ldr	r3, [pc, #460]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a72      	ldr	r2, [pc, #456]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003f94:	f043 0308 	orr.w	r3, r3, #8
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	4b70      	ldr	r3, [pc, #448]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	496d      	ldr	r1, [pc, #436]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fac:	4b6b      	ldr	r3, [pc, #428]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	021b      	lsls	r3, r3, #8
 8003fba:	4968      	ldr	r1, [pc, #416]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	604b      	str	r3, [r1, #4]
 8003fc0:	e025      	b.n	800400e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fc2:	4b66      	ldr	r3, [pc, #408]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a65      	ldr	r2, [pc, #404]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003fc8:	f043 0308 	orr.w	r3, r3, #8
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	4b63      	ldr	r3, [pc, #396]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	4960      	ldr	r1, [pc, #384]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fe0:	4b5e      	ldr	r3, [pc, #376]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	495b      	ldr	r1, [pc, #364]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d109      	bne.n	800400e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fdbe 	bl	8004b80 <RCC_SetFlashLatencyFromMSIRange>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e380      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800400e:	f000 fcc1 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 8004012:	4602      	mov	r2, r0
 8004014:	4b51      	ldr	r3, [pc, #324]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	091b      	lsrs	r3, r3, #4
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	4950      	ldr	r1, [pc, #320]	@ (8004160 <HAL_RCC_OscConfig+0x274>)
 8004020:	5ccb      	ldrb	r3, [r1, r3]
 8004022:	f003 031f 	and.w	r3, r3, #31
 8004026:	fa22 f303 	lsr.w	r3, r2, r3
 800402a:	4a4e      	ldr	r2, [pc, #312]	@ (8004164 <HAL_RCC_OscConfig+0x278>)
 800402c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800402e:	4b4e      	ldr	r3, [pc, #312]	@ (8004168 <HAL_RCC_OscConfig+0x27c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f7fd fc42 	bl	80018bc <HAL_InitTick>
 8004038:	4603      	mov	r3, r0
 800403a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800403c:	7bfb      	ldrb	r3, [r7, #15]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d052      	beq.n	80040e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	e364      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d032      	beq.n	80040b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800404e:	4b43      	ldr	r3, [pc, #268]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a42      	ldr	r2, [pc, #264]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800405a:	f7fd fda7 	bl	8001bac <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004062:	f7fd fda3 	bl	8001bac <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e34d      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004074:	4b39      	ldr	r3, [pc, #228]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0f0      	beq.n	8004062 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004080:	4b36      	ldr	r3, [pc, #216]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a35      	ldr	r2, [pc, #212]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8004086:	f043 0308 	orr.w	r3, r3, #8
 800408a:	6013      	str	r3, [r2, #0]
 800408c:	4b33      	ldr	r3, [pc, #204]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	4930      	ldr	r1, [pc, #192]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 800409a:	4313      	orrs	r3, r2
 800409c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800409e:	4b2f      	ldr	r3, [pc, #188]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	021b      	lsls	r3, r3, #8
 80040ac:	492b      	ldr	r1, [pc, #172]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	604b      	str	r3, [r1, #4]
 80040b2:	e01a      	b.n	80040ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040b4:	4b29      	ldr	r3, [pc, #164]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a28      	ldr	r2, [pc, #160]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 80040ba:	f023 0301 	bic.w	r3, r3, #1
 80040be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040c0:	f7fd fd74 	bl	8001bac <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040c8:	f7fd fd70 	bl	8001bac <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e31a      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040da:	4b20      	ldr	r3, [pc, #128]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x1dc>
 80040e6:	e000      	b.n	80040ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d073      	beq.n	80041de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d005      	beq.n	8004108 <HAL_RCC_OscConfig+0x21c>
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	2b0c      	cmp	r3, #12
 8004100:	d10e      	bne.n	8004120 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2b03      	cmp	r3, #3
 8004106:	d10b      	bne.n	8004120 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004108:	4b14      	ldr	r3, [pc, #80]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d063      	beq.n	80041dc <HAL_RCC_OscConfig+0x2f0>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d15f      	bne.n	80041dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e2f7      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004128:	d106      	bne.n	8004138 <HAL_RCC_OscConfig+0x24c>
 800412a:	4b0c      	ldr	r3, [pc, #48]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a0b      	ldr	r2, [pc, #44]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8004130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	e025      	b.n	8004184 <HAL_RCC_OscConfig+0x298>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004140:	d114      	bne.n	800416c <HAL_RCC_OscConfig+0x280>
 8004142:	4b06      	ldr	r3, [pc, #24]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a05      	ldr	r2, [pc, #20]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8004148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	4b03      	ldr	r3, [pc, #12]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a02      	ldr	r2, [pc, #8]	@ (800415c <HAL_RCC_OscConfig+0x270>)
 8004154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	e013      	b.n	8004184 <HAL_RCC_OscConfig+0x298>
 800415c:	40021000 	.word	0x40021000
 8004160:	0800b19c 	.word	0x0800b19c
 8004164:	20000004 	.word	0x20000004
 8004168:	20000008 	.word	0x20000008
 800416c:	4ba0      	ldr	r3, [pc, #640]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a9f      	ldr	r2, [pc, #636]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004176:	6013      	str	r3, [r2, #0]
 8004178:	4b9d      	ldr	r3, [pc, #628]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a9c      	ldr	r2, [pc, #624]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 800417e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d013      	beq.n	80041b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7fd fd0e 	bl	8001bac <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004194:	f7fd fd0a 	bl	8001bac <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b64      	cmp	r3, #100	@ 0x64
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e2b4      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041a6:	4b92      	ldr	r3, [pc, #584]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0f0      	beq.n	8004194 <HAL_RCC_OscConfig+0x2a8>
 80041b2:	e014      	b.n	80041de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7fd fcfa 	bl	8001bac <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041bc:	f7fd fcf6 	bl	8001bac <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b64      	cmp	r3, #100	@ 0x64
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e2a0      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041ce:	4b88      	ldr	r3, [pc, #544]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f0      	bne.n	80041bc <HAL_RCC_OscConfig+0x2d0>
 80041da:	e000      	b.n	80041de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d060      	beq.n	80042ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d005      	beq.n	80041fc <HAL_RCC_OscConfig+0x310>
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	2b0c      	cmp	r3, #12
 80041f4:	d119      	bne.n	800422a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d116      	bne.n	800422a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041fc:	4b7c      	ldr	r3, [pc, #496]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_RCC_OscConfig+0x328>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e27d      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004214:	4b76      	ldr	r3, [pc, #472]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	061b      	lsls	r3, r3, #24
 8004222:	4973      	ldr	r1, [pc, #460]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004224:	4313      	orrs	r3, r2
 8004226:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004228:	e040      	b.n	80042ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d023      	beq.n	800427a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004232:	4b6f      	ldr	r3, [pc, #444]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a6e      	ldr	r2, [pc, #440]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800423c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423e:	f7fd fcb5 	bl	8001bac <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004246:	f7fd fcb1 	bl	8001bac <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e25b      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004258:	4b65      	ldr	r3, [pc, #404]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0f0      	beq.n	8004246 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004264:	4b62      	ldr	r3, [pc, #392]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	061b      	lsls	r3, r3, #24
 8004272:	495f      	ldr	r1, [pc, #380]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004274:	4313      	orrs	r3, r2
 8004276:	604b      	str	r3, [r1, #4]
 8004278:	e018      	b.n	80042ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800427a:	4b5d      	ldr	r3, [pc, #372]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a5c      	ldr	r2, [pc, #368]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004286:	f7fd fc91 	bl	8001bac <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800428e:	f7fd fc8d 	bl	8001bac <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e237      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042a0:	4b53      	ldr	r3, [pc, #332]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f0      	bne.n	800428e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d03c      	beq.n	8004332 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01c      	beq.n	80042fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042c0:	4b4b      	ldr	r3, [pc, #300]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80042c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042c6:	4a4a      	ldr	r2, [pc, #296]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80042c8:	f043 0301 	orr.w	r3, r3, #1
 80042cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d0:	f7fd fc6c 	bl	8001bac <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d8:	f7fd fc68 	bl	8001bac <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e212      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042ea:	4b41      	ldr	r3, [pc, #260]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80042ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0ef      	beq.n	80042d8 <HAL_RCC_OscConfig+0x3ec>
 80042f8:	e01b      	b.n	8004332 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042fa:	4b3d      	ldr	r3, [pc, #244]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80042fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004300:	4a3b      	ldr	r2, [pc, #236]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004302:	f023 0301 	bic.w	r3, r3, #1
 8004306:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430a:	f7fd fc4f 	bl	8001bac <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004312:	f7fd fc4b 	bl	8001bac <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e1f5      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004324:	4b32      	ldr	r3, [pc, #200]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004326:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1ef      	bne.n	8004312 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 80a6 	beq.w	800448c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004340:	2300      	movs	r3, #0
 8004342:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004344:	4b2a      	ldr	r3, [pc, #168]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10d      	bne.n	800436c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004350:	4b27      	ldr	r3, [pc, #156]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004354:	4a26      	ldr	r2, [pc, #152]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 8004356:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800435a:	6593      	str	r3, [r2, #88]	@ 0x58
 800435c:	4b24      	ldr	r3, [pc, #144]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 800435e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004368:	2301      	movs	r3, #1
 800436a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800436c:	4b21      	ldr	r3, [pc, #132]	@ (80043f4 <HAL_RCC_OscConfig+0x508>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d118      	bne.n	80043aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004378:	4b1e      	ldr	r3, [pc, #120]	@ (80043f4 <HAL_RCC_OscConfig+0x508>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a1d      	ldr	r2, [pc, #116]	@ (80043f4 <HAL_RCC_OscConfig+0x508>)
 800437e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004382:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004384:	f7fd fc12 	bl	8001bac <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800438c:	f7fd fc0e 	bl	8001bac <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e1b8      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800439e:	4b15      	ldr	r3, [pc, #84]	@ (80043f4 <HAL_RCC_OscConfig+0x508>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d108      	bne.n	80043c4 <HAL_RCC_OscConfig+0x4d8>
 80043b2:	4b0f      	ldr	r3, [pc, #60]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80043b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b8:	4a0d      	ldr	r2, [pc, #52]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043c2:	e029      	b.n	8004418 <HAL_RCC_OscConfig+0x52c>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	2b05      	cmp	r3, #5
 80043ca:	d115      	bne.n	80043f8 <HAL_RCC_OscConfig+0x50c>
 80043cc:	4b08      	ldr	r3, [pc, #32]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d2:	4a07      	ldr	r2, [pc, #28]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80043d4:	f043 0304 	orr.w	r3, r3, #4
 80043d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043dc:	4b04      	ldr	r3, [pc, #16]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80043de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e2:	4a03      	ldr	r2, [pc, #12]	@ (80043f0 <HAL_RCC_OscConfig+0x504>)
 80043e4:	f043 0301 	orr.w	r3, r3, #1
 80043e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043ec:	e014      	b.n	8004418 <HAL_RCC_OscConfig+0x52c>
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000
 80043f4:	40007000 	.word	0x40007000
 80043f8:	4b9d      	ldr	r3, [pc, #628]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 80043fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043fe:	4a9c      	ldr	r2, [pc, #624]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004408:	4b99      	ldr	r3, [pc, #612]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 800440a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800440e:	4a98      	ldr	r2, [pc, #608]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 8004410:	f023 0304 	bic.w	r3, r3, #4
 8004414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d016      	beq.n	800444e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004420:	f7fd fbc4 	bl	8001bac <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004426:	e00a      	b.n	800443e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004428:	f7fd fbc0 	bl	8001bac <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004436:	4293      	cmp	r3, r2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e168      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800443e:	4b8c      	ldr	r3, [pc, #560]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0ed      	beq.n	8004428 <HAL_RCC_OscConfig+0x53c>
 800444c:	e015      	b.n	800447a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444e:	f7fd fbad 	bl	8001bac <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004454:	e00a      	b.n	800446c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004456:	f7fd fba9 	bl	8001bac <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004464:	4293      	cmp	r3, r2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e151      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800446c:	4b80      	ldr	r3, [pc, #512]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1ed      	bne.n	8004456 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800447a:	7ffb      	ldrb	r3, [r7, #31]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d105      	bne.n	800448c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004480:	4b7b      	ldr	r3, [pc, #492]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 8004482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004484:	4a7a      	ldr	r2, [pc, #488]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 8004486:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800448a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0320 	and.w	r3, r3, #32
 8004494:	2b00      	cmp	r3, #0
 8004496:	d03c      	beq.n	8004512 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449c:	2b00      	cmp	r3, #0
 800449e:	d01c      	beq.n	80044da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044a0:	4b73      	ldr	r3, [pc, #460]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 80044a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044a6:	4a72      	ldr	r2, [pc, #456]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 80044a8:	f043 0301 	orr.w	r3, r3, #1
 80044ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b0:	f7fd fb7c 	bl	8001bac <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044b8:	f7fd fb78 	bl	8001bac <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e122      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044ca:	4b69      	ldr	r3, [pc, #420]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 80044cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0ef      	beq.n	80044b8 <HAL_RCC_OscConfig+0x5cc>
 80044d8:	e01b      	b.n	8004512 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044da:	4b65      	ldr	r3, [pc, #404]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 80044dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044e0:	4a63      	ldr	r2, [pc, #396]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 80044e2:	f023 0301 	bic.w	r3, r3, #1
 80044e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ea:	f7fd fb5f 	bl	8001bac <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044f2:	f7fd fb5b 	bl	8001bac <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e105      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004504:	4b5a      	ldr	r3, [pc, #360]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 8004506:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1ef      	bne.n	80044f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 80f9 	beq.w	800470e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004520:	2b02      	cmp	r3, #2
 8004522:	f040 80cf 	bne.w	80046c4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004526:	4b52      	ldr	r3, [pc, #328]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f003 0203 	and.w	r2, r3, #3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004536:	429a      	cmp	r2, r3
 8004538:	d12c      	bne.n	8004594 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004544:	3b01      	subs	r3, #1
 8004546:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004548:	429a      	cmp	r2, r3
 800454a:	d123      	bne.n	8004594 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004556:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004558:	429a      	cmp	r2, r3
 800455a:	d11b      	bne.n	8004594 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004566:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004568:	429a      	cmp	r2, r3
 800456a:	d113      	bne.n	8004594 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004576:	085b      	lsrs	r3, r3, #1
 8004578:	3b01      	subs	r3, #1
 800457a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800457c:	429a      	cmp	r2, r3
 800457e:	d109      	bne.n	8004594 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458a:	085b      	lsrs	r3, r3, #1
 800458c:	3b01      	subs	r3, #1
 800458e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004590:	429a      	cmp	r2, r3
 8004592:	d071      	beq.n	8004678 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	2b0c      	cmp	r3, #12
 8004598:	d068      	beq.n	800466c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800459a:	4b35      	ldr	r3, [pc, #212]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d105      	bne.n	80045b2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80045a6:	4b32      	ldr	r3, [pc, #200]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e0ac      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80045b6:	4b2e      	ldr	r3, [pc, #184]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a2d      	ldr	r2, [pc, #180]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 80045bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045c2:	f7fd faf3 	bl	8001bac <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ca:	f7fd faef 	bl	8001bac <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e099      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045dc:	4b24      	ldr	r3, [pc, #144]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f0      	bne.n	80045ca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045e8:	4b21      	ldr	r3, [pc, #132]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	4b21      	ldr	r3, [pc, #132]	@ (8004674 <HAL_RCC_OscConfig+0x788>)
 80045ee:	4013      	ands	r3, r2
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80045f8:	3a01      	subs	r2, #1
 80045fa:	0112      	lsls	r2, r2, #4
 80045fc:	4311      	orrs	r1, r2
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004602:	0212      	lsls	r2, r2, #8
 8004604:	4311      	orrs	r1, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800460a:	0852      	lsrs	r2, r2, #1
 800460c:	3a01      	subs	r2, #1
 800460e:	0552      	lsls	r2, r2, #21
 8004610:	4311      	orrs	r1, r2
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004616:	0852      	lsrs	r2, r2, #1
 8004618:	3a01      	subs	r2, #1
 800461a:	0652      	lsls	r2, r2, #25
 800461c:	4311      	orrs	r1, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004622:	06d2      	lsls	r2, r2, #27
 8004624:	430a      	orrs	r2, r1
 8004626:	4912      	ldr	r1, [pc, #72]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 8004628:	4313      	orrs	r3, r2
 800462a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800462c:	4b10      	ldr	r3, [pc, #64]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a0f      	ldr	r2, [pc, #60]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 8004632:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004636:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004638:	4b0d      	ldr	r3, [pc, #52]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	4a0c      	ldr	r2, [pc, #48]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 800463e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004642:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004644:	f7fd fab2 	bl	8001bac <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464c:	f7fd faae 	bl	8001bac <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e058      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800465e:	4b04      	ldr	r3, [pc, #16]	@ (8004670 <HAL_RCC_OscConfig+0x784>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800466a:	e050      	b.n	800470e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e04f      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
 8004670:	40021000 	.word	0x40021000
 8004674:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004678:	4b27      	ldr	r3, [pc, #156]	@ (8004718 <HAL_RCC_OscConfig+0x82c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d144      	bne.n	800470e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004684:	4b24      	ldr	r3, [pc, #144]	@ (8004718 <HAL_RCC_OscConfig+0x82c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a23      	ldr	r2, [pc, #140]	@ (8004718 <HAL_RCC_OscConfig+0x82c>)
 800468a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800468e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004690:	4b21      	ldr	r3, [pc, #132]	@ (8004718 <HAL_RCC_OscConfig+0x82c>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	4a20      	ldr	r2, [pc, #128]	@ (8004718 <HAL_RCC_OscConfig+0x82c>)
 8004696:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800469a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800469c:	f7fd fa86 	bl	8001bac <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a4:	f7fd fa82 	bl	8001bac <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e02c      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046b6:	4b18      	ldr	r3, [pc, #96]	@ (8004718 <HAL_RCC_OscConfig+0x82c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0f0      	beq.n	80046a4 <HAL_RCC_OscConfig+0x7b8>
 80046c2:	e024      	b.n	800470e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	2b0c      	cmp	r3, #12
 80046c8:	d01f      	beq.n	800470a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ca:	4b13      	ldr	r3, [pc, #76]	@ (8004718 <HAL_RCC_OscConfig+0x82c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a12      	ldr	r2, [pc, #72]	@ (8004718 <HAL_RCC_OscConfig+0x82c>)
 80046d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d6:	f7fd fa69 	bl	8001bac <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046de:	f7fd fa65 	bl	8001bac <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e00f      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f0:	4b09      	ldr	r3, [pc, #36]	@ (8004718 <HAL_RCC_OscConfig+0x82c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1f0      	bne.n	80046de <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80046fc:	4b06      	ldr	r3, [pc, #24]	@ (8004718 <HAL_RCC_OscConfig+0x82c>)
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	4905      	ldr	r1, [pc, #20]	@ (8004718 <HAL_RCC_OscConfig+0x82c>)
 8004702:	4b06      	ldr	r3, [pc, #24]	@ (800471c <HAL_RCC_OscConfig+0x830>)
 8004704:	4013      	ands	r3, r2
 8004706:	60cb      	str	r3, [r1, #12]
 8004708:	e001      	b.n	800470e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3720      	adds	r7, #32
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40021000 	.word	0x40021000
 800471c:	feeefffc 	.word	0xfeeefffc

08004720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e11d      	b.n	8004974 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004738:	4b90      	ldr	r3, [pc, #576]	@ (800497c <HAL_RCC_ClockConfig+0x25c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 030f 	and.w	r3, r3, #15
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d910      	bls.n	8004768 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004746:	4b8d      	ldr	r3, [pc, #564]	@ (800497c <HAL_RCC_ClockConfig+0x25c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f023 020f 	bic.w	r2, r3, #15
 800474e:	498b      	ldr	r1, [pc, #556]	@ (800497c <HAL_RCC_ClockConfig+0x25c>)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	4313      	orrs	r3, r2
 8004754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004756:	4b89      	ldr	r3, [pc, #548]	@ (800497c <HAL_RCC_ClockConfig+0x25c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d001      	beq.n	8004768 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e105      	b.n	8004974 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d010      	beq.n	8004796 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	4b81      	ldr	r3, [pc, #516]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004780:	429a      	cmp	r2, r3
 8004782:	d908      	bls.n	8004796 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004784:	4b7e      	ldr	r3, [pc, #504]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	497b      	ldr	r1, [pc, #492]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 8004792:	4313      	orrs	r3, r2
 8004794:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d079      	beq.n	8004896 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	d11e      	bne.n	80047e8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047aa:	4b75      	ldr	r3, [pc, #468]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e0dc      	b.n	8004974 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80047ba:	f000 fa3b 	bl	8004c34 <RCC_GetSysClockFreqFromPLLSource>
 80047be:	4603      	mov	r3, r0
 80047c0:	4a70      	ldr	r2, [pc, #448]	@ (8004984 <HAL_RCC_ClockConfig+0x264>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d946      	bls.n	8004854 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80047c6:	4b6e      	ldr	r3, [pc, #440]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d140      	bne.n	8004854 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047d2:	4b6b      	ldr	r3, [pc, #428]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047da:	4a69      	ldr	r2, [pc, #420]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 80047dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047e2:	2380      	movs	r3, #128	@ 0x80
 80047e4:	617b      	str	r3, [r7, #20]
 80047e6:	e035      	b.n	8004854 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d107      	bne.n	8004800 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047f0:	4b63      	ldr	r3, [pc, #396]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d115      	bne.n	8004828 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e0b9      	b.n	8004974 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d107      	bne.n	8004818 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004808:	4b5d      	ldr	r3, [pc, #372]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d109      	bne.n	8004828 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e0ad      	b.n	8004974 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004818:	4b59      	ldr	r3, [pc, #356]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e0a5      	b.n	8004974 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004828:	f000 f8b4 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 800482c:	4603      	mov	r3, r0
 800482e:	4a55      	ldr	r2, [pc, #340]	@ (8004984 <HAL_RCC_ClockConfig+0x264>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d90f      	bls.n	8004854 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004834:	4b52      	ldr	r3, [pc, #328]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d109      	bne.n	8004854 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004840:	4b4f      	ldr	r3, [pc, #316]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004848:	4a4d      	ldr	r2, [pc, #308]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 800484a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800484e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004850:	2380      	movs	r3, #128	@ 0x80
 8004852:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004854:	4b4a      	ldr	r3, [pc, #296]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f023 0203 	bic.w	r2, r3, #3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	4947      	ldr	r1, [pc, #284]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 8004862:	4313      	orrs	r3, r2
 8004864:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004866:	f7fd f9a1 	bl	8001bac <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486c:	e00a      	b.n	8004884 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800486e:	f7fd f99d 	bl	8001bac <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800487c:	4293      	cmp	r3, r2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e077      	b.n	8004974 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004884:	4b3e      	ldr	r3, [pc, #248]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 020c 	and.w	r2, r3, #12
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	429a      	cmp	r2, r3
 8004894:	d1eb      	bne.n	800486e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2b80      	cmp	r3, #128	@ 0x80
 800489a:	d105      	bne.n	80048a8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800489c:	4b38      	ldr	r3, [pc, #224]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	4a37      	ldr	r2, [pc, #220]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 80048a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048a6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d010      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	4b31      	ldr	r3, [pc, #196]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d208      	bcs.n	80048d6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	492b      	ldr	r1, [pc, #172]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048d6:	4b29      	ldr	r3, [pc, #164]	@ (800497c <HAL_RCC_ClockConfig+0x25c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d210      	bcs.n	8004906 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e4:	4b25      	ldr	r3, [pc, #148]	@ (800497c <HAL_RCC_ClockConfig+0x25c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f023 020f 	bic.w	r2, r3, #15
 80048ec:	4923      	ldr	r1, [pc, #140]	@ (800497c <HAL_RCC_ClockConfig+0x25c>)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f4:	4b21      	ldr	r3, [pc, #132]	@ (800497c <HAL_RCC_ClockConfig+0x25c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 030f 	and.w	r3, r3, #15
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d001      	beq.n	8004906 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e036      	b.n	8004974 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b00      	cmp	r3, #0
 8004910:	d008      	beq.n	8004924 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004912:	4b1b      	ldr	r3, [pc, #108]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	4918      	ldr	r1, [pc, #96]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 8004920:	4313      	orrs	r3, r2
 8004922:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b00      	cmp	r3, #0
 800492e:	d009      	beq.n	8004944 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004930:	4b13      	ldr	r3, [pc, #76]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	4910      	ldr	r1, [pc, #64]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 8004940:	4313      	orrs	r3, r2
 8004942:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004944:	f000 f826 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 8004948:	4602      	mov	r2, r0
 800494a:	4b0d      	ldr	r3, [pc, #52]	@ (8004980 <HAL_RCC_ClockConfig+0x260>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	091b      	lsrs	r3, r3, #4
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	490c      	ldr	r1, [pc, #48]	@ (8004988 <HAL_RCC_ClockConfig+0x268>)
 8004956:	5ccb      	ldrb	r3, [r1, r3]
 8004958:	f003 031f 	and.w	r3, r3, #31
 800495c:	fa22 f303 	lsr.w	r3, r2, r3
 8004960:	4a0a      	ldr	r2, [pc, #40]	@ (800498c <HAL_RCC_ClockConfig+0x26c>)
 8004962:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004964:	4b0a      	ldr	r3, [pc, #40]	@ (8004990 <HAL_RCC_ClockConfig+0x270>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f7fc ffa7 	bl	80018bc <HAL_InitTick>
 800496e:	4603      	mov	r3, r0
 8004970:	73fb      	strb	r3, [r7, #15]

  return status;
 8004972:	7bfb      	ldrb	r3, [r7, #15]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40022000 	.word	0x40022000
 8004980:	40021000 	.word	0x40021000
 8004984:	04c4b400 	.word	0x04c4b400
 8004988:	0800b19c 	.word	0x0800b19c
 800498c:	20000004 	.word	0x20000004
 8004990:	20000008 	.word	0x20000008

08004994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004994:	b480      	push	{r7}
 8004996:	b089      	sub	sp, #36	@ 0x24
 8004998:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	61fb      	str	r3, [r7, #28]
 800499e:	2300      	movs	r3, #0
 80049a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049a2:	4b3e      	ldr	r3, [pc, #248]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 030c 	and.w	r3, r3, #12
 80049aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049ac:	4b3b      	ldr	r3, [pc, #236]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_RCC_GetSysClockFreq+0x34>
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	2b0c      	cmp	r3, #12
 80049c0:	d121      	bne.n	8004a06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d11e      	bne.n	8004a06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049c8:	4b34      	ldr	r3, [pc, #208]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0308 	and.w	r3, r3, #8
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d107      	bne.n	80049e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049d4:	4b31      	ldr	r3, [pc, #196]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80049d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049da:	0a1b      	lsrs	r3, r3, #8
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	61fb      	str	r3, [r7, #28]
 80049e2:	e005      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049e4:	4b2d      	ldr	r3, [pc, #180]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049f0:	4a2b      	ldr	r2, [pc, #172]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10d      	bne.n	8004a1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a04:	e00a      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d102      	bne.n	8004a12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a0c:	4b25      	ldr	r3, [pc, #148]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a0e:	61bb      	str	r3, [r7, #24]
 8004a10:	e004      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d101      	bne.n	8004a1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a18:	4b23      	ldr	r3, [pc, #140]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	2b0c      	cmp	r3, #12
 8004a20:	d134      	bne.n	8004a8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a22:	4b1e      	ldr	r3, [pc, #120]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d003      	beq.n	8004a3a <HAL_RCC_GetSysClockFreq+0xa6>
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d003      	beq.n	8004a40 <HAL_RCC_GetSysClockFreq+0xac>
 8004a38:	e005      	b.n	8004a46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a3c:	617b      	str	r3, [r7, #20]
      break;
 8004a3e:	e005      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a40:	4b19      	ldr	r3, [pc, #100]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a42:	617b      	str	r3, [r7, #20]
      break;
 8004a44:	e002      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	617b      	str	r3, [r7, #20]
      break;
 8004a4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a4c:	4b13      	ldr	r3, [pc, #76]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	091b      	lsrs	r3, r3, #4
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	3301      	adds	r3, #1
 8004a58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a5a:	4b10      	ldr	r3, [pc, #64]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	fb03 f202 	mul.w	r2, r3, r2
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a72:	4b0a      	ldr	r3, [pc, #40]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	0e5b      	lsrs	r3, r3, #25
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a8c:	69bb      	ldr	r3, [r7, #24]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3724      	adds	r7, #36	@ 0x24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	0800b1b4 	.word	0x0800b1b4
 8004aa4:	00f42400 	.word	0x00f42400
 8004aa8:	007a1200 	.word	0x007a1200

08004aac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ab0:	4b03      	ldr	r3, [pc, #12]	@ (8004ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	20000004 	.word	0x20000004

08004ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ac8:	f7ff fff0 	bl	8004aac <HAL_RCC_GetHCLKFreq>
 8004acc:	4602      	mov	r2, r0
 8004ace:	4b06      	ldr	r3, [pc, #24]	@ (8004ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	0a1b      	lsrs	r3, r3, #8
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	4904      	ldr	r1, [pc, #16]	@ (8004aec <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ada:	5ccb      	ldrb	r3, [r1, r3]
 8004adc:	f003 031f 	and.w	r3, r3, #31
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	0800b1ac 	.word	0x0800b1ac

08004af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004af4:	f7ff ffda 	bl	8004aac <HAL_RCC_GetHCLKFreq>
 8004af8:	4602      	mov	r2, r0
 8004afa:	4b06      	ldr	r3, [pc, #24]	@ (8004b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	0adb      	lsrs	r3, r3, #11
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	4904      	ldr	r1, [pc, #16]	@ (8004b18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b06:	5ccb      	ldrb	r3, [r1, r3]
 8004b08:	f003 031f 	and.w	r3, r3, #31
 8004b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40021000 	.word	0x40021000
 8004b18:	0800b1ac 	.word	0x0800b1ac

08004b1c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	220f      	movs	r2, #15
 8004b2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004b2c:	4b12      	ldr	r3, [pc, #72]	@ (8004b78 <HAL_RCC_GetClockConfig+0x5c>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 0203 	and.w	r2, r3, #3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004b38:	4b0f      	ldr	r3, [pc, #60]	@ (8004b78 <HAL_RCC_GetClockConfig+0x5c>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004b44:	4b0c      	ldr	r3, [pc, #48]	@ (8004b78 <HAL_RCC_GetClockConfig+0x5c>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004b50:	4b09      	ldr	r3, [pc, #36]	@ (8004b78 <HAL_RCC_GetClockConfig+0x5c>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	08db      	lsrs	r3, r3, #3
 8004b56:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004b5e:	4b07      	ldr	r3, [pc, #28]	@ (8004b7c <HAL_RCC_GetClockConfig+0x60>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 020f 	and.w	r2, r3, #15
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	601a      	str	r2, [r3, #0]
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	40022000 	.word	0x40022000

08004b80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b88:	2300      	movs	r3, #0
 8004b8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b8c:	4b27      	ldr	r3, [pc, #156]	@ (8004c2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b98:	f7ff f8e4 	bl	8003d64 <HAL_PWREx_GetVoltageRange>
 8004b9c:	6178      	str	r0, [r7, #20]
 8004b9e:	e014      	b.n	8004bca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ba0:	4b22      	ldr	r3, [pc, #136]	@ (8004c2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba4:	4a21      	ldr	r2, [pc, #132]	@ (8004c2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004baa:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bac:	4b1f      	ldr	r3, [pc, #124]	@ (8004c2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004bb8:	f7ff f8d4 	bl	8003d64 <HAL_PWREx_GetVoltageRange>
 8004bbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8004c2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc2:	4a1a      	ldr	r2, [pc, #104]	@ (8004c2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004bc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bc8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bd0:	d10b      	bne.n	8004bea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b80      	cmp	r3, #128	@ 0x80
 8004bd6:	d913      	bls.n	8004c00 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2ba0      	cmp	r3, #160	@ 0xa0
 8004bdc:	d902      	bls.n	8004be4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004bde:	2302      	movs	r3, #2
 8004be0:	613b      	str	r3, [r7, #16]
 8004be2:	e00d      	b.n	8004c00 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004be4:	2301      	movs	r3, #1
 8004be6:	613b      	str	r3, [r7, #16]
 8004be8:	e00a      	b.n	8004c00 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bee:	d902      	bls.n	8004bf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	e004      	b.n	8004c00 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b70      	cmp	r3, #112	@ 0x70
 8004bfa:	d101      	bne.n	8004c00 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c00:	4b0b      	ldr	r3, [pc, #44]	@ (8004c30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f023 020f 	bic.w	r2, r3, #15
 8004c08:	4909      	ldr	r1, [pc, #36]	@ (8004c30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c10:	4b07      	ldr	r3, [pc, #28]	@ (8004c30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 030f 	and.w	r3, r3, #15
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d001      	beq.n	8004c22 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	40022000 	.word	0x40022000

08004c34 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8004cf0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d00b      	beq.n	8004c62 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b03      	cmp	r3, #3
 8004c4e:	d825      	bhi.n	8004c9c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d008      	beq.n	8004c68 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d11f      	bne.n	8004c9c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004c5c:	4b25      	ldr	r3, [pc, #148]	@ (8004cf4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c5e:	613b      	str	r3, [r7, #16]
    break;
 8004c60:	e01f      	b.n	8004ca2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004c62:	4b25      	ldr	r3, [pc, #148]	@ (8004cf8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004c64:	613b      	str	r3, [r7, #16]
    break;
 8004c66:	e01c      	b.n	8004ca2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c68:	4b21      	ldr	r3, [pc, #132]	@ (8004cf0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d107      	bne.n	8004c84 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c74:	4b1e      	ldr	r3, [pc, #120]	@ (8004cf0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c7a:	0a1b      	lsrs	r3, r3, #8
 8004c7c:	f003 030f 	and.w	r3, r3, #15
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	e005      	b.n	8004c90 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c84:	4b1a      	ldr	r3, [pc, #104]	@ (8004cf0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	091b      	lsrs	r3, r3, #4
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004c90:	4a1a      	ldr	r2, [pc, #104]	@ (8004cfc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c98:	613b      	str	r3, [r7, #16]
    break;
 8004c9a:	e002      	b.n	8004ca2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	613b      	str	r3, [r7, #16]
    break;
 8004ca0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ca2:	4b13      	ldr	r3, [pc, #76]	@ (8004cf0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	091b      	lsrs	r3, r3, #4
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	3301      	adds	r3, #1
 8004cae:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	0a1b      	lsrs	r3, r3, #8
 8004cb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	fb03 f202 	mul.w	r2, r3, r2
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cc8:	4b09      	ldr	r3, [pc, #36]	@ (8004cf0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	0e5b      	lsrs	r3, r3, #25
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004ce2:	683b      	ldr	r3, [r7, #0]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	371c      	adds	r7, #28
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	00f42400 	.word	0x00f42400
 8004cf8:	007a1200 	.word	0x007a1200
 8004cfc:	0800b1b4 	.word	0x0800b1b4

08004d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d08:	2300      	movs	r3, #0
 8004d0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d040      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d20:	2b80      	cmp	r3, #128	@ 0x80
 8004d22:	d02a      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004d24:	2b80      	cmp	r3, #128	@ 0x80
 8004d26:	d825      	bhi.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004d28:	2b60      	cmp	r3, #96	@ 0x60
 8004d2a:	d026      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004d2c:	2b60      	cmp	r3, #96	@ 0x60
 8004d2e:	d821      	bhi.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004d30:	2b40      	cmp	r3, #64	@ 0x40
 8004d32:	d006      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004d34:	2b40      	cmp	r3, #64	@ 0x40
 8004d36:	d81d      	bhi.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d009      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	d010      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004d40:	e018      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d42:	4b89      	ldr	r3, [pc, #548]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	4a88      	ldr	r2, [pc, #544]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d4c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d4e:	e015      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3304      	adds	r3, #4
 8004d54:	2100      	movs	r1, #0
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fb12 	bl	8005380 <RCCEx_PLLSAI1_Config>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d60:	e00c      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3320      	adds	r3, #32
 8004d66:	2100      	movs	r1, #0
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 fbfd 	bl	8005568 <RCCEx_PLLSAI2_Config>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d72:	e003      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	74fb      	strb	r3, [r7, #19]
      break;
 8004d78:	e000      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004d7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d7c:	7cfb      	ldrb	r3, [r7, #19]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10b      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d82:	4b79      	ldr	r3, [pc, #484]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d88:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d90:	4975      	ldr	r1, [pc, #468]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004d98:	e001      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9a:	7cfb      	ldrb	r3, [r7, #19]
 8004d9c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d047      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004db2:	d030      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004db4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004db8:	d82a      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004dba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dbe:	d02a      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004dc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dc4:	d824      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004dc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dca:	d008      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004dcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dd0:	d81e      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004dd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dda:	d010      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004ddc:	e018      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004dde:	4b62      	ldr	r3, [pc, #392]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	4a61      	ldr	r2, [pc, #388]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004de8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dea:	e015      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3304      	adds	r3, #4
 8004df0:	2100      	movs	r1, #0
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fac4 	bl	8005380 <RCCEx_PLLSAI1_Config>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dfc:	e00c      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3320      	adds	r3, #32
 8004e02:	2100      	movs	r1, #0
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fbaf 	bl	8005568 <RCCEx_PLLSAI2_Config>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e0e:	e003      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	74fb      	strb	r3, [r7, #19]
      break;
 8004e14:	e000      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e18:	7cfb      	ldrb	r3, [r7, #19]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10b      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e1e:	4b52      	ldr	r3, [pc, #328]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e2c:	494e      	ldr	r1, [pc, #312]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004e34:	e001      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e36:	7cfb      	ldrb	r3, [r7, #19]
 8004e38:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 809f 	beq.w	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e4c:	4b46      	ldr	r3, [pc, #280]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e000      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00d      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e62:	4b41      	ldr	r3, [pc, #260]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e66:	4a40      	ldr	r2, [pc, #256]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e6e:	4b3e      	ldr	r3, [pc, #248]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e76:	60bb      	str	r3, [r7, #8]
 8004e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e7e:	4b3b      	ldr	r3, [pc, #236]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a3a      	ldr	r2, [pc, #232]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e8a:	f7fc fe8f 	bl	8001bac <HAL_GetTick>
 8004e8e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e90:	e009      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e92:	f7fc fe8b 	bl	8001bac <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d902      	bls.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	74fb      	strb	r3, [r7, #19]
        break;
 8004ea4:	e005      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ea6:	4b31      	ldr	r3, [pc, #196]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0ef      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004eb2:	7cfb      	ldrb	r3, [r7, #19]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d15b      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ec2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d01f      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d019      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ed6:	4b24      	ldr	r3, [pc, #144]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004edc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ee0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ee2:	4b21      	ldr	r3, [pc, #132]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004eea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004efa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004efe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f02:	4a19      	ldr	r2, [pc, #100]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d016      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f14:	f7fc fe4a 	bl	8001bac <HAL_GetTick>
 8004f18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f1a:	e00b      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f1c:	f7fc fe46 	bl	8001bac <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d902      	bls.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	74fb      	strb	r3, [r7, #19]
            break;
 8004f32:	e006      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f34:	4b0c      	ldr	r3, [pc, #48]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0ec      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004f42:	7cfb      	ldrb	r3, [r7, #19]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10c      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f48:	4b07      	ldr	r3, [pc, #28]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f4e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f58:	4903      	ldr	r1, [pc, #12]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f60:	e008      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f62:	7cfb      	ldrb	r3, [r7, #19]
 8004f64:	74bb      	strb	r3, [r7, #18]
 8004f66:	e005      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f70:	7cfb      	ldrb	r3, [r7, #19]
 8004f72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f74:	7c7b      	ldrb	r3, [r7, #17]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d105      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f7a:	4ba0      	ldr	r3, [pc, #640]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f7e:	4a9f      	ldr	r2, [pc, #636]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f84:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00a      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f92:	4b9a      	ldr	r3, [pc, #616]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f98:	f023 0203 	bic.w	r2, r3, #3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa0:	4996      	ldr	r1, [pc, #600]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00a      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fb4:	4b91      	ldr	r3, [pc, #580]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fba:	f023 020c 	bic.w	r2, r3, #12
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc2:	498e      	ldr	r1, [pc, #568]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0304 	and.w	r3, r3, #4
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fd6:	4b89      	ldr	r3, [pc, #548]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fdc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe4:	4985      	ldr	r1, [pc, #532]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00a      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ff8:	4b80      	ldr	r3, [pc, #512]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ffe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005006:	497d      	ldr	r1, [pc, #500]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005008:	4313      	orrs	r3, r2
 800500a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0310 	and.w	r3, r3, #16
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800501a:	4b78      	ldr	r3, [pc, #480]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800501c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005020:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005028:	4974      	ldr	r1, [pc, #464]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800502a:	4313      	orrs	r3, r2
 800502c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0320 	and.w	r3, r3, #32
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00a      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800503c:	4b6f      	ldr	r3, [pc, #444]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800503e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005042:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800504a:	496c      	ldr	r1, [pc, #432]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800504c:	4313      	orrs	r3, r2
 800504e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00a      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800505e:	4b67      	ldr	r3, [pc, #412]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005064:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800506c:	4963      	ldr	r1, [pc, #396]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00a      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005080:	4b5e      	ldr	r3, [pc, #376]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005086:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800508e:	495b      	ldr	r1, [pc, #364]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005090:	4313      	orrs	r3, r2
 8005092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050a2:	4b56      	ldr	r3, [pc, #344]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b0:	4952      	ldr	r1, [pc, #328]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00a      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050c4:	4b4d      	ldr	r3, [pc, #308]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d2:	494a      	ldr	r1, [pc, #296]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050e6:	4b45      	ldr	r3, [pc, #276]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f4:	4941      	ldr	r1, [pc, #260]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005108:	4b3c      	ldr	r3, [pc, #240]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800510a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800510e:	f023 0203 	bic.w	r2, r3, #3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005116:	4939      	ldr	r1, [pc, #228]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005118:	4313      	orrs	r3, r2
 800511a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d028      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800512a:	4b34      	ldr	r3, [pc, #208]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800512c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005130:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005138:	4930      	ldr	r1, [pc, #192]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005144:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005148:	d106      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800514a:	4b2c      	ldr	r3, [pc, #176]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	4a2b      	ldr	r2, [pc, #172]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005150:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005154:	60d3      	str	r3, [r2, #12]
 8005156:	e011      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800515c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005160:	d10c      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3304      	adds	r3, #4
 8005166:	2101      	movs	r1, #1
 8005168:	4618      	mov	r0, r3
 800516a:	f000 f909 	bl	8005380 <RCCEx_PLLSAI1_Config>
 800516e:	4603      	mov	r3, r0
 8005170:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005172:	7cfb      	ldrb	r3, [r7, #19]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005178:	7cfb      	ldrb	r3, [r7, #19]
 800517a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d04d      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800518c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005190:	d108      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005192:	4b1a      	ldr	r3, [pc, #104]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005194:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005198:	4a18      	ldr	r2, [pc, #96]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800519a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800519e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80051a2:	e012      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80051a4:	4b15      	ldr	r3, [pc, #84]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051aa:	4a14      	ldr	r2, [pc, #80]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051b0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80051b4:	4b11      	ldr	r3, [pc, #68]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051c2:	490e      	ldr	r1, [pc, #56]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051d2:	d106      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051d4:	4b09      	ldr	r3, [pc, #36]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	4a08      	ldr	r2, [pc, #32]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051de:	60d3      	str	r3, [r2, #12]
 80051e0:	e020      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051ea:	d109      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051ec:	4b03      	ldr	r3, [pc, #12]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	4a02      	ldr	r2, [pc, #8]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051f6:	60d3      	str	r3, [r2, #12]
 80051f8:	e014      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80051fa:	bf00      	nop
 80051fc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005204:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005208:	d10c      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	3304      	adds	r3, #4
 800520e:	2101      	movs	r1, #1
 8005210:	4618      	mov	r0, r3
 8005212:	f000 f8b5 	bl	8005380 <RCCEx_PLLSAI1_Config>
 8005216:	4603      	mov	r3, r0
 8005218:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800521a:	7cfb      	ldrb	r3, [r7, #19]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005220:	7cfb      	ldrb	r3, [r7, #19]
 8005222:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d028      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005230:	4b4a      	ldr	r3, [pc, #296]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005236:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800523e:	4947      	ldr	r1, [pc, #284]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005240:	4313      	orrs	r3, r2
 8005242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800524a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800524e:	d106      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005250:	4b42      	ldr	r3, [pc, #264]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	4a41      	ldr	r2, [pc, #260]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005256:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800525a:	60d3      	str	r3, [r2, #12]
 800525c:	e011      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005262:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005266:	d10c      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3304      	adds	r3, #4
 800526c:	2101      	movs	r1, #1
 800526e:	4618      	mov	r0, r3
 8005270:	f000 f886 	bl	8005380 <RCCEx_PLLSAI1_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005278:	7cfb      	ldrb	r3, [r7, #19]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800527e:	7cfb      	ldrb	r3, [r7, #19]
 8005280:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d01e      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800528e:	4b33      	ldr	r3, [pc, #204]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005294:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800529e:	492f      	ldr	r1, [pc, #188]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052b0:	d10c      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	3304      	adds	r3, #4
 80052b6:	2102      	movs	r1, #2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 f861 	bl	8005380 <RCCEx_PLLSAI1_Config>
 80052be:	4603      	mov	r3, r0
 80052c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052c2:	7cfb      	ldrb	r3, [r7, #19]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80052c8:	7cfb      	ldrb	r3, [r7, #19]
 80052ca:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00b      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052d8:	4b20      	ldr	r3, [pc, #128]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052de:	f023 0204 	bic.w	r2, r3, #4
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052e8:	491c      	ldr	r1, [pc, #112]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00b      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80052fc:	4b17      	ldr	r3, [pc, #92]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005302:	f023 0218 	bic.w	r2, r3, #24
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800530c:	4913      	ldr	r1, [pc, #76]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800530e:	4313      	orrs	r3, r2
 8005310:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d017      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005320:	4b0e      	ldr	r3, [pc, #56]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005322:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005326:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005330:	490a      	ldr	r1, [pc, #40]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005332:	4313      	orrs	r3, r2
 8005334:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800533e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005342:	d105      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005344:	4b05      	ldr	r3, [pc, #20]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	4a04      	ldr	r2, [pc, #16]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800534a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800534e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005350:	7cbb      	ldrb	r3, [r7, #18]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3718      	adds	r7, #24
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	40021000 	.word	0x40021000

08005360 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005364:	4b05      	ldr	r3, [pc, #20]	@ (800537c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a04      	ldr	r2, [pc, #16]	@ (800537c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800536a:	f043 0304 	orr.w	r3, r3, #4
 800536e:	6013      	str	r3, [r2, #0]
}
 8005370:	bf00      	nop
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40021000 	.word	0x40021000

08005380 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800538e:	4b72      	ldr	r3, [pc, #456]	@ (8005558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00e      	beq.n	80053b8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800539a:	4b6f      	ldr	r3, [pc, #444]	@ (8005558 <RCCEx_PLLSAI1_Config+0x1d8>)
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f003 0203 	and.w	r2, r3, #3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d103      	bne.n	80053b2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
       ||
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d142      	bne.n	8005438 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	73fb      	strb	r3, [r7, #15]
 80053b6:	e03f      	b.n	8005438 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d018      	beq.n	80053f2 <RCCEx_PLLSAI1_Config+0x72>
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d825      	bhi.n	8005410 <RCCEx_PLLSAI1_Config+0x90>
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d002      	beq.n	80053ce <RCCEx_PLLSAI1_Config+0x4e>
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d009      	beq.n	80053e0 <RCCEx_PLLSAI1_Config+0x60>
 80053cc:	e020      	b.n	8005410 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053ce:	4b62      	ldr	r3, [pc, #392]	@ (8005558 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d11d      	bne.n	8005416 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053de:	e01a      	b.n	8005416 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053e0:	4b5d      	ldr	r3, [pc, #372]	@ (8005558 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d116      	bne.n	800541a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053f0:	e013      	b.n	800541a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053f2:	4b59      	ldr	r3, [pc, #356]	@ (8005558 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10f      	bne.n	800541e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053fe:	4b56      	ldr	r3, [pc, #344]	@ (8005558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d109      	bne.n	800541e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800540e:	e006      	b.n	800541e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	73fb      	strb	r3, [r7, #15]
      break;
 8005414:	e004      	b.n	8005420 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005416:	bf00      	nop
 8005418:	e002      	b.n	8005420 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800541a:	bf00      	nop
 800541c:	e000      	b.n	8005420 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800541e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005420:	7bfb      	ldrb	r3, [r7, #15]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d108      	bne.n	8005438 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005426:	4b4c      	ldr	r3, [pc, #304]	@ (8005558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f023 0203 	bic.w	r2, r3, #3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4949      	ldr	r1, [pc, #292]	@ (8005558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005434:	4313      	orrs	r3, r2
 8005436:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005438:	7bfb      	ldrb	r3, [r7, #15]
 800543a:	2b00      	cmp	r3, #0
 800543c:	f040 8086 	bne.w	800554c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005440:	4b45      	ldr	r3, [pc, #276]	@ (8005558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a44      	ldr	r2, [pc, #272]	@ (8005558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005446:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800544a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800544c:	f7fc fbae 	bl	8001bac <HAL_GetTick>
 8005450:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005452:	e009      	b.n	8005468 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005454:	f7fc fbaa 	bl	8001bac <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d902      	bls.n	8005468 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	73fb      	strb	r3, [r7, #15]
        break;
 8005466:	e005      	b.n	8005474 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005468:	4b3b      	ldr	r3, [pc, #236]	@ (8005558 <RCCEx_PLLSAI1_Config+0x1d8>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1ef      	bne.n	8005454 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005474:	7bfb      	ldrb	r3, [r7, #15]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d168      	bne.n	800554c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d113      	bne.n	80054a8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005480:	4b35      	ldr	r3, [pc, #212]	@ (8005558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005482:	691a      	ldr	r2, [r3, #16]
 8005484:	4b35      	ldr	r3, [pc, #212]	@ (800555c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005486:	4013      	ands	r3, r2
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6892      	ldr	r2, [r2, #8]
 800548c:	0211      	lsls	r1, r2, #8
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	68d2      	ldr	r2, [r2, #12]
 8005492:	06d2      	lsls	r2, r2, #27
 8005494:	4311      	orrs	r1, r2
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6852      	ldr	r2, [r2, #4]
 800549a:	3a01      	subs	r2, #1
 800549c:	0112      	lsls	r2, r2, #4
 800549e:	430a      	orrs	r2, r1
 80054a0:	492d      	ldr	r1, [pc, #180]	@ (8005558 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	610b      	str	r3, [r1, #16]
 80054a6:	e02d      	b.n	8005504 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d115      	bne.n	80054da <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054ae:	4b2a      	ldr	r3, [pc, #168]	@ (8005558 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054b0:	691a      	ldr	r2, [r3, #16]
 80054b2:	4b2b      	ldr	r3, [pc, #172]	@ (8005560 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	6892      	ldr	r2, [r2, #8]
 80054ba:	0211      	lsls	r1, r2, #8
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6912      	ldr	r2, [r2, #16]
 80054c0:	0852      	lsrs	r2, r2, #1
 80054c2:	3a01      	subs	r2, #1
 80054c4:	0552      	lsls	r2, r2, #21
 80054c6:	4311      	orrs	r1, r2
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6852      	ldr	r2, [r2, #4]
 80054cc:	3a01      	subs	r2, #1
 80054ce:	0112      	lsls	r2, r2, #4
 80054d0:	430a      	orrs	r2, r1
 80054d2:	4921      	ldr	r1, [pc, #132]	@ (8005558 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	610b      	str	r3, [r1, #16]
 80054d8:	e014      	b.n	8005504 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054da:	4b1f      	ldr	r3, [pc, #124]	@ (8005558 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054dc:	691a      	ldr	r2, [r3, #16]
 80054de:	4b21      	ldr	r3, [pc, #132]	@ (8005564 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	6892      	ldr	r2, [r2, #8]
 80054e6:	0211      	lsls	r1, r2, #8
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6952      	ldr	r2, [r2, #20]
 80054ec:	0852      	lsrs	r2, r2, #1
 80054ee:	3a01      	subs	r2, #1
 80054f0:	0652      	lsls	r2, r2, #25
 80054f2:	4311      	orrs	r1, r2
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6852      	ldr	r2, [r2, #4]
 80054f8:	3a01      	subs	r2, #1
 80054fa:	0112      	lsls	r2, r2, #4
 80054fc:	430a      	orrs	r2, r1
 80054fe:	4916      	ldr	r1, [pc, #88]	@ (8005558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005500:	4313      	orrs	r3, r2
 8005502:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005504:	4b14      	ldr	r3, [pc, #80]	@ (8005558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a13      	ldr	r2, [pc, #76]	@ (8005558 <RCCEx_PLLSAI1_Config+0x1d8>)
 800550a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800550e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005510:	f7fc fb4c 	bl	8001bac <HAL_GetTick>
 8005514:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005516:	e009      	b.n	800552c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005518:	f7fc fb48 	bl	8001bac <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d902      	bls.n	800552c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	73fb      	strb	r3, [r7, #15]
          break;
 800552a:	e005      	b.n	8005538 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800552c:	4b0a      	ldr	r3, [pc, #40]	@ (8005558 <RCCEx_PLLSAI1_Config+0x1d8>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0ef      	beq.n	8005518 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d106      	bne.n	800554c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800553e:	4b06      	ldr	r3, [pc, #24]	@ (8005558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	4904      	ldr	r1, [pc, #16]	@ (8005558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005548:	4313      	orrs	r3, r2
 800554a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800554c:	7bfb      	ldrb	r3, [r7, #15]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	40021000 	.word	0x40021000
 800555c:	07ff800f 	.word	0x07ff800f
 8005560:	ff9f800f 	.word	0xff9f800f
 8005564:	f9ff800f 	.word	0xf9ff800f

08005568 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005576:	4b72      	ldr	r3, [pc, #456]	@ (8005740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00e      	beq.n	80055a0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005582:	4b6f      	ldr	r3, [pc, #444]	@ (8005740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f003 0203 	and.w	r2, r3, #3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	429a      	cmp	r2, r3
 8005590:	d103      	bne.n	800559a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
       ||
 8005596:	2b00      	cmp	r3, #0
 8005598:	d142      	bne.n	8005620 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	73fb      	strb	r3, [r7, #15]
 800559e:	e03f      	b.n	8005620 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d018      	beq.n	80055da <RCCEx_PLLSAI2_Config+0x72>
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d825      	bhi.n	80055f8 <RCCEx_PLLSAI2_Config+0x90>
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d002      	beq.n	80055b6 <RCCEx_PLLSAI2_Config+0x4e>
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d009      	beq.n	80055c8 <RCCEx_PLLSAI2_Config+0x60>
 80055b4:	e020      	b.n	80055f8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055b6:	4b62      	ldr	r3, [pc, #392]	@ (8005740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d11d      	bne.n	80055fe <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055c6:	e01a      	b.n	80055fe <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055c8:	4b5d      	ldr	r3, [pc, #372]	@ (8005740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d116      	bne.n	8005602 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055d8:	e013      	b.n	8005602 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055da:	4b59      	ldr	r3, [pc, #356]	@ (8005740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10f      	bne.n	8005606 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055e6:	4b56      	ldr	r3, [pc, #344]	@ (8005740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d109      	bne.n	8005606 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055f6:	e006      	b.n	8005606 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	73fb      	strb	r3, [r7, #15]
      break;
 80055fc:	e004      	b.n	8005608 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80055fe:	bf00      	nop
 8005600:	e002      	b.n	8005608 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005602:	bf00      	nop
 8005604:	e000      	b.n	8005608 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005606:	bf00      	nop
    }

    if(status == HAL_OK)
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d108      	bne.n	8005620 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800560e:	4b4c      	ldr	r3, [pc, #304]	@ (8005740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f023 0203 	bic.w	r2, r3, #3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4949      	ldr	r1, [pc, #292]	@ (8005740 <RCCEx_PLLSAI2_Config+0x1d8>)
 800561c:	4313      	orrs	r3, r2
 800561e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005620:	7bfb      	ldrb	r3, [r7, #15]
 8005622:	2b00      	cmp	r3, #0
 8005624:	f040 8086 	bne.w	8005734 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005628:	4b45      	ldr	r3, [pc, #276]	@ (8005740 <RCCEx_PLLSAI2_Config+0x1d8>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a44      	ldr	r2, [pc, #272]	@ (8005740 <RCCEx_PLLSAI2_Config+0x1d8>)
 800562e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005634:	f7fc faba 	bl	8001bac <HAL_GetTick>
 8005638:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800563a:	e009      	b.n	8005650 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800563c:	f7fc fab6 	bl	8001bac <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d902      	bls.n	8005650 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	73fb      	strb	r3, [r7, #15]
        break;
 800564e:	e005      	b.n	800565c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005650:	4b3b      	ldr	r3, [pc, #236]	@ (8005740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1ef      	bne.n	800563c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800565c:	7bfb      	ldrb	r3, [r7, #15]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d168      	bne.n	8005734 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d113      	bne.n	8005690 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005668:	4b35      	ldr	r3, [pc, #212]	@ (8005740 <RCCEx_PLLSAI2_Config+0x1d8>)
 800566a:	695a      	ldr	r2, [r3, #20]
 800566c:	4b35      	ldr	r3, [pc, #212]	@ (8005744 <RCCEx_PLLSAI2_Config+0x1dc>)
 800566e:	4013      	ands	r3, r2
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	6892      	ldr	r2, [r2, #8]
 8005674:	0211      	lsls	r1, r2, #8
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	68d2      	ldr	r2, [r2, #12]
 800567a:	06d2      	lsls	r2, r2, #27
 800567c:	4311      	orrs	r1, r2
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6852      	ldr	r2, [r2, #4]
 8005682:	3a01      	subs	r2, #1
 8005684:	0112      	lsls	r2, r2, #4
 8005686:	430a      	orrs	r2, r1
 8005688:	492d      	ldr	r1, [pc, #180]	@ (8005740 <RCCEx_PLLSAI2_Config+0x1d8>)
 800568a:	4313      	orrs	r3, r2
 800568c:	614b      	str	r3, [r1, #20]
 800568e:	e02d      	b.n	80056ec <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d115      	bne.n	80056c2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005696:	4b2a      	ldr	r3, [pc, #168]	@ (8005740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005698:	695a      	ldr	r2, [r3, #20]
 800569a:	4b2b      	ldr	r3, [pc, #172]	@ (8005748 <RCCEx_PLLSAI2_Config+0x1e0>)
 800569c:	4013      	ands	r3, r2
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	6892      	ldr	r2, [r2, #8]
 80056a2:	0211      	lsls	r1, r2, #8
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	6912      	ldr	r2, [r2, #16]
 80056a8:	0852      	lsrs	r2, r2, #1
 80056aa:	3a01      	subs	r2, #1
 80056ac:	0552      	lsls	r2, r2, #21
 80056ae:	4311      	orrs	r1, r2
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6852      	ldr	r2, [r2, #4]
 80056b4:	3a01      	subs	r2, #1
 80056b6:	0112      	lsls	r2, r2, #4
 80056b8:	430a      	orrs	r2, r1
 80056ba:	4921      	ldr	r1, [pc, #132]	@ (8005740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	614b      	str	r3, [r1, #20]
 80056c0:	e014      	b.n	80056ec <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80056c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056c4:	695a      	ldr	r2, [r3, #20]
 80056c6:	4b21      	ldr	r3, [pc, #132]	@ (800574c <RCCEx_PLLSAI2_Config+0x1e4>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6892      	ldr	r2, [r2, #8]
 80056ce:	0211      	lsls	r1, r2, #8
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	6952      	ldr	r2, [r2, #20]
 80056d4:	0852      	lsrs	r2, r2, #1
 80056d6:	3a01      	subs	r2, #1
 80056d8:	0652      	lsls	r2, r2, #25
 80056da:	4311      	orrs	r1, r2
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6852      	ldr	r2, [r2, #4]
 80056e0:	3a01      	subs	r2, #1
 80056e2:	0112      	lsls	r2, r2, #4
 80056e4:	430a      	orrs	r2, r1
 80056e6:	4916      	ldr	r1, [pc, #88]	@ (8005740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80056ec:	4b14      	ldr	r3, [pc, #80]	@ (8005740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a13      	ldr	r2, [pc, #76]	@ (8005740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f8:	f7fc fa58 	bl	8001bac <HAL_GetTick>
 80056fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80056fe:	e009      	b.n	8005714 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005700:	f7fc fa54 	bl	8001bac <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d902      	bls.n	8005714 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	73fb      	strb	r3, [r7, #15]
          break;
 8005712:	e005      	b.n	8005720 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005714:	4b0a      	ldr	r3, [pc, #40]	@ (8005740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0ef      	beq.n	8005700 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005720:	7bfb      	ldrb	r3, [r7, #15]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d106      	bne.n	8005734 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005726:	4b06      	ldr	r3, [pc, #24]	@ (8005740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005728:	695a      	ldr	r2, [r3, #20]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	4904      	ldr	r1, [pc, #16]	@ (8005740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005730:	4313      	orrs	r3, r2
 8005732:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005734:	7bfb      	ldrb	r3, [r7, #15]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	40021000 	.word	0x40021000
 8005744:	07ff800f 	.word	0x07ff800f
 8005748:	ff9f800f 	.word	0xff9f800f
 800574c:	f9ff800f 	.word	0xf9ff800f

08005750 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e095      	b.n	800588e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005766:	2b00      	cmp	r3, #0
 8005768:	d108      	bne.n	800577c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005772:	d009      	beq.n	8005788 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	61da      	str	r2, [r3, #28]
 800577a:	e005      	b.n	8005788 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d106      	bne.n	80057a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fb ff1c 	bl	80015e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057c8:	d902      	bls.n	80057d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80057ca:	2300      	movs	r3, #0
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	e002      	b.n	80057d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80057d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80057d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80057de:	d007      	beq.n	80057f0 <HAL_SPI_Init+0xa0>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057e8:	d002      	beq.n	80057f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005800:	431a      	orrs	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800581e:	431a      	orrs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005832:	ea42 0103 	orr.w	r1, r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	0c1b      	lsrs	r3, r3, #16
 800584c:	f003 0204 	and.w	r2, r3, #4
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005854:	f003 0310 	and.w	r3, r3, #16
 8005858:	431a      	orrs	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800586c:	ea42 0103 	orr.w	r1, r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b082      	sub	sp, #8
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e049      	b.n	800593c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d106      	bne.n	80058c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f841 	bl	8005944 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2202      	movs	r2, #2
 80058c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3304      	adds	r3, #4
 80058d2:	4619      	mov	r1, r3
 80058d4:	4610      	mov	r0, r2
 80058d6:	f000 f9d9 	bl	8005c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b01      	cmp	r3, #1
 800596a:	d001      	beq.n	8005970 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e04f      	b.n	8005a10 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68da      	ldr	r2, [r3, #12]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0201 	orr.w	r2, r2, #1
 8005986:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a23      	ldr	r2, [pc, #140]	@ (8005a1c <HAL_TIM_Base_Start_IT+0xc4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d01d      	beq.n	80059ce <HAL_TIM_Base_Start_IT+0x76>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800599a:	d018      	beq.n	80059ce <HAL_TIM_Base_Start_IT+0x76>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005a20 <HAL_TIM_Base_Start_IT+0xc8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d013      	beq.n	80059ce <HAL_TIM_Base_Start_IT+0x76>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005a24 <HAL_TIM_Base_Start_IT+0xcc>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00e      	beq.n	80059ce <HAL_TIM_Base_Start_IT+0x76>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a28 <HAL_TIM_Base_Start_IT+0xd0>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d009      	beq.n	80059ce <HAL_TIM_Base_Start_IT+0x76>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a1b      	ldr	r2, [pc, #108]	@ (8005a2c <HAL_TIM_Base_Start_IT+0xd4>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d004      	beq.n	80059ce <HAL_TIM_Base_Start_IT+0x76>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a19      	ldr	r2, [pc, #100]	@ (8005a30 <HAL_TIM_Base_Start_IT+0xd8>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d115      	bne.n	80059fa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	4b17      	ldr	r3, [pc, #92]	@ (8005a34 <HAL_TIM_Base_Start_IT+0xdc>)
 80059d6:	4013      	ands	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b06      	cmp	r3, #6
 80059de:	d015      	beq.n	8005a0c <HAL_TIM_Base_Start_IT+0xb4>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059e6:	d011      	beq.n	8005a0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0201 	orr.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f8:	e008      	b.n	8005a0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f042 0201 	orr.w	r2, r2, #1
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	e000      	b.n	8005a0e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	40012c00 	.word	0x40012c00
 8005a20:	40000400 	.word	0x40000400
 8005a24:	40000800 	.word	0x40000800
 8005a28:	40000c00 	.word	0x40000c00
 8005a2c:	40013400 	.word	0x40013400
 8005a30:	40014000 	.word	0x40014000
 8005a34:	00010007 	.word	0x00010007

08005a38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d020      	beq.n	8005a9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01b      	beq.n	8005a9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0202 	mvn.w	r2, #2
 8005a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f8e4 	bl	8005c50 <HAL_TIM_IC_CaptureCallback>
 8005a88:	e005      	b.n	8005a96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f8d6 	bl	8005c3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f8e7 	bl	8005c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f003 0304 	and.w	r3, r3, #4
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d020      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01b      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0204 	mvn.w	r2, #4
 8005ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2202      	movs	r2, #2
 8005abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f8be 	bl	8005c50 <HAL_TIM_IC_CaptureCallback>
 8005ad4:	e005      	b.n	8005ae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f8b0 	bl	8005c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f8c1 	bl	8005c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d020      	beq.n	8005b34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f003 0308 	and.w	r3, r3, #8
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d01b      	beq.n	8005b34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f06f 0208 	mvn.w	r2, #8
 8005b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2204      	movs	r2, #4
 8005b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f898 	bl	8005c50 <HAL_TIM_IC_CaptureCallback>
 8005b20:	e005      	b.n	8005b2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f88a 	bl	8005c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f89b 	bl	8005c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f003 0310 	and.w	r3, r3, #16
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d020      	beq.n	8005b80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f003 0310 	and.w	r3, r3, #16
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01b      	beq.n	8005b80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f06f 0210 	mvn.w	r2, #16
 8005b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2208      	movs	r2, #8
 8005b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f872 	bl	8005c50 <HAL_TIM_IC_CaptureCallback>
 8005b6c:	e005      	b.n	8005b7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f864 	bl	8005c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f875 	bl	8005c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00c      	beq.n	8005ba4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d007      	beq.n	8005ba4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f06f 0201 	mvn.w	r2, #1
 8005b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fb fb2c 	bl	80011fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00c      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f906 	bl	8005dd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00c      	beq.n	8005bec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d007      	beq.n	8005bec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f8fe 	bl	8005de8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00c      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d007      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f834 	bl	8005c78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f003 0320 	and.w	r3, r3, #32
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00c      	beq.n	8005c34 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f003 0320 	and.w	r3, r3, #32
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d007      	beq.n	8005c34 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f06f 0220 	mvn.w	r2, #32
 8005c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f8c6 	bl	8005dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c34:	bf00      	nop
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a40      	ldr	r2, [pc, #256]	@ (8005da0 <TIM_Base_SetConfig+0x114>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d013      	beq.n	8005ccc <TIM_Base_SetConfig+0x40>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005caa:	d00f      	beq.n	8005ccc <TIM_Base_SetConfig+0x40>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a3d      	ldr	r2, [pc, #244]	@ (8005da4 <TIM_Base_SetConfig+0x118>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d00b      	beq.n	8005ccc <TIM_Base_SetConfig+0x40>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a3c      	ldr	r2, [pc, #240]	@ (8005da8 <TIM_Base_SetConfig+0x11c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d007      	beq.n	8005ccc <TIM_Base_SetConfig+0x40>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a3b      	ldr	r2, [pc, #236]	@ (8005dac <TIM_Base_SetConfig+0x120>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d003      	beq.n	8005ccc <TIM_Base_SetConfig+0x40>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a3a      	ldr	r2, [pc, #232]	@ (8005db0 <TIM_Base_SetConfig+0x124>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d108      	bne.n	8005cde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a2f      	ldr	r2, [pc, #188]	@ (8005da0 <TIM_Base_SetConfig+0x114>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d01f      	beq.n	8005d26 <TIM_Base_SetConfig+0x9a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cec:	d01b      	beq.n	8005d26 <TIM_Base_SetConfig+0x9a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a2c      	ldr	r2, [pc, #176]	@ (8005da4 <TIM_Base_SetConfig+0x118>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d017      	beq.n	8005d26 <TIM_Base_SetConfig+0x9a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a2b      	ldr	r2, [pc, #172]	@ (8005da8 <TIM_Base_SetConfig+0x11c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d013      	beq.n	8005d26 <TIM_Base_SetConfig+0x9a>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a2a      	ldr	r2, [pc, #168]	@ (8005dac <TIM_Base_SetConfig+0x120>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d00f      	beq.n	8005d26 <TIM_Base_SetConfig+0x9a>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a29      	ldr	r2, [pc, #164]	@ (8005db0 <TIM_Base_SetConfig+0x124>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d00b      	beq.n	8005d26 <TIM_Base_SetConfig+0x9a>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a28      	ldr	r2, [pc, #160]	@ (8005db4 <TIM_Base_SetConfig+0x128>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d007      	beq.n	8005d26 <TIM_Base_SetConfig+0x9a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a27      	ldr	r2, [pc, #156]	@ (8005db8 <TIM_Base_SetConfig+0x12c>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d003      	beq.n	8005d26 <TIM_Base_SetConfig+0x9a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a26      	ldr	r2, [pc, #152]	@ (8005dbc <TIM_Base_SetConfig+0x130>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d108      	bne.n	8005d38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a10      	ldr	r2, [pc, #64]	@ (8005da0 <TIM_Base_SetConfig+0x114>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d00f      	beq.n	8005d84 <TIM_Base_SetConfig+0xf8>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a12      	ldr	r2, [pc, #72]	@ (8005db0 <TIM_Base_SetConfig+0x124>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00b      	beq.n	8005d84 <TIM_Base_SetConfig+0xf8>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a11      	ldr	r2, [pc, #68]	@ (8005db4 <TIM_Base_SetConfig+0x128>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d007      	beq.n	8005d84 <TIM_Base_SetConfig+0xf8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a10      	ldr	r2, [pc, #64]	@ (8005db8 <TIM_Base_SetConfig+0x12c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d003      	beq.n	8005d84 <TIM_Base_SetConfig+0xf8>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a0f      	ldr	r2, [pc, #60]	@ (8005dbc <TIM_Base_SetConfig+0x130>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d103      	bne.n	8005d8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	691a      	ldr	r2, [r3, #16]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	615a      	str	r2, [r3, #20]
}
 8005d92:	bf00      	nop
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40012c00 	.word	0x40012c00
 8005da4:	40000400 	.word	0x40000400
 8005da8:	40000800 	.word	0x40000800
 8005dac:	40000c00 	.word	0x40000c00
 8005db0:	40013400 	.word	0x40013400
 8005db4:	40014000 	.word	0x40014000
 8005db8:	40014400 	.word	0x40014400
 8005dbc:	40014800 	.word	0x40014800

08005dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e042      	b.n	8005e94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d106      	bne.n	8005e26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7fb fc21 	bl	8001668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2224      	movs	r2, #36	@ 0x24
 8005e2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0201 	bic.w	r2, r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fc7c 	bl	8006744 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f97d 	bl	800614c <UART_SetConfig>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d101      	bne.n	8005e5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e01b      	b.n	8005e94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689a      	ldr	r2, [r3, #8]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fcfb 	bl	8006888 <UART_CheckIdleState>
 8005e92:	4603      	mov	r3, r0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08a      	sub	sp, #40	@ 0x28
 8005ea0:	af02      	add	r7, sp, #8
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	d17b      	bne.n	8005fae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d002      	beq.n	8005ec2 <HAL_UART_Transmit+0x26>
 8005ebc:	88fb      	ldrh	r3, [r7, #6]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e074      	b.n	8005fb0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2221      	movs	r2, #33	@ 0x21
 8005ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ed6:	f7fb fe69 	bl	8001bac <HAL_GetTick>
 8005eda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	88fa      	ldrh	r2, [r7, #6]
 8005ee0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	88fa      	ldrh	r2, [r7, #6]
 8005ee8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ef4:	d108      	bne.n	8005f08 <HAL_UART_Transmit+0x6c>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d104      	bne.n	8005f08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	61bb      	str	r3, [r7, #24]
 8005f06:	e003      	b.n	8005f10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f10:	e030      	b.n	8005f74 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2180      	movs	r1, #128	@ 0x80
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 fd5d 	bl	80069dc <UART_WaitOnFlagUntilTimeout>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e03d      	b.n	8005fb0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10b      	bne.n	8005f52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	881a      	ldrh	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f46:	b292      	uxth	r2, r2
 8005f48:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	3302      	adds	r3, #2
 8005f4e:	61bb      	str	r3, [r7, #24]
 8005f50:	e007      	b.n	8005f62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	781a      	ldrb	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1c8      	bne.n	8005f12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	2200      	movs	r2, #0
 8005f88:	2140      	movs	r1, #64	@ 0x40
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f000 fd26 	bl	80069dc <UART_WaitOnFlagUntilTimeout>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d005      	beq.n	8005fa2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e006      	b.n	8005fb0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	e000      	b.n	8005fb0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005fae:	2302      	movs	r3, #2
  }
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3720      	adds	r7, #32
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08a      	sub	sp, #40	@ 0x28
 8005fbc:	af02      	add	r7, sp, #8
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fce:	2b20      	cmp	r3, #32
 8005fd0:	f040 80b6 	bne.w	8006140 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <HAL_UART_Receive+0x28>
 8005fda:	88fb      	ldrh	r3, [r7, #6]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e0ae      	b.n	8006142 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2222      	movs	r2, #34	@ 0x22
 8005ff0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ffa:	f7fb fdd7 	bl	8001bac <HAL_GetTick>
 8005ffe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	88fa      	ldrh	r2, [r7, #6]
 8006004:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	88fa      	ldrh	r2, [r7, #6]
 800600c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006018:	d10e      	bne.n	8006038 <HAL_UART_Receive+0x80>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d105      	bne.n	800602e <HAL_UART_Receive+0x76>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006028:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800602c:	e02d      	b.n	800608a <HAL_UART_Receive+0xd2>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	22ff      	movs	r2, #255	@ 0xff
 8006032:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006036:	e028      	b.n	800608a <HAL_UART_Receive+0xd2>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10d      	bne.n	800605c <HAL_UART_Receive+0xa4>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d104      	bne.n	8006052 <HAL_UART_Receive+0x9a>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	22ff      	movs	r2, #255	@ 0xff
 800604c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006050:	e01b      	b.n	800608a <HAL_UART_Receive+0xd2>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	227f      	movs	r2, #127	@ 0x7f
 8006056:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800605a:	e016      	b.n	800608a <HAL_UART_Receive+0xd2>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006064:	d10d      	bne.n	8006082 <HAL_UART_Receive+0xca>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d104      	bne.n	8006078 <HAL_UART_Receive+0xc0>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	227f      	movs	r2, #127	@ 0x7f
 8006072:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006076:	e008      	b.n	800608a <HAL_UART_Receive+0xd2>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	223f      	movs	r2, #63	@ 0x3f
 800607c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006080:	e003      	b.n	800608a <HAL_UART_Receive+0xd2>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006090:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800609a:	d108      	bne.n	80060ae <HAL_UART_Receive+0xf6>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d104      	bne.n	80060ae <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80060a4:	2300      	movs	r3, #0
 80060a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	61bb      	str	r3, [r7, #24]
 80060ac:	e003      	b.n	80060b6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060b2:	2300      	movs	r3, #0
 80060b4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80060b6:	e037      	b.n	8006128 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2200      	movs	r2, #0
 80060c0:	2120      	movs	r1, #32
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 fc8a 	bl	80069dc <UART_WaitOnFlagUntilTimeout>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d005      	beq.n	80060da <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e033      	b.n	8006142 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10c      	bne.n	80060fa <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	8a7b      	ldrh	r3, [r7, #18]
 80060ea:	4013      	ands	r3, r2
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	3302      	adds	r3, #2
 80060f6:	61bb      	str	r3, [r7, #24]
 80060f8:	e00d      	b.n	8006116 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006100:	b29b      	uxth	r3, r3
 8006102:	b2da      	uxtb	r2, r3
 8006104:	8a7b      	ldrh	r3, [r7, #18]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	4013      	ands	r3, r2
 800610a:	b2da      	uxtb	r2, r3
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	3301      	adds	r3, #1
 8006114:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800612e:	b29b      	uxth	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1c1      	bne.n	80060b8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2220      	movs	r2, #32
 8006138:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800613c:	2300      	movs	r3, #0
 800613e:	e000      	b.n	8006142 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006140:	2302      	movs	r3, #2
  }
}
 8006142:	4618      	mov	r0, r3
 8006144:	3720      	adds	r7, #32
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
	...

0800614c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800614c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006150:	b08c      	sub	sp, #48	@ 0x30
 8006152:	af00      	add	r7, sp, #0
 8006154:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	431a      	orrs	r2, r3
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	431a      	orrs	r2, r3
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	4313      	orrs	r3, r2
 8006172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	4baa      	ldr	r3, [pc, #680]	@ (8006424 <UART_SetConfig+0x2d8>)
 800617c:	4013      	ands	r3, r2
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	6812      	ldr	r2, [r2, #0]
 8006182:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006184:	430b      	orrs	r3, r1
 8006186:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a9f      	ldr	r2, [pc, #636]	@ (8006428 <UART_SetConfig+0x2dc>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d004      	beq.n	80061b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061b4:	4313      	orrs	r3, r2
 80061b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80061c2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	6812      	ldr	r2, [r2, #0]
 80061ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061cc:	430b      	orrs	r3, r1
 80061ce:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d6:	f023 010f 	bic.w	r1, r3, #15
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a90      	ldr	r2, [pc, #576]	@ (800642c <UART_SetConfig+0x2e0>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d125      	bne.n	800623c <UART_SetConfig+0xf0>
 80061f0:	4b8f      	ldr	r3, [pc, #572]	@ (8006430 <UART_SetConfig+0x2e4>)
 80061f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061f6:	f003 0303 	and.w	r3, r3, #3
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d81a      	bhi.n	8006234 <UART_SetConfig+0xe8>
 80061fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006204 <UART_SetConfig+0xb8>)
 8006200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006204:	08006215 	.word	0x08006215
 8006208:	08006225 	.word	0x08006225
 800620c:	0800621d 	.word	0x0800621d
 8006210:	0800622d 	.word	0x0800622d
 8006214:	2301      	movs	r3, #1
 8006216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800621a:	e116      	b.n	800644a <UART_SetConfig+0x2fe>
 800621c:	2302      	movs	r3, #2
 800621e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006222:	e112      	b.n	800644a <UART_SetConfig+0x2fe>
 8006224:	2304      	movs	r3, #4
 8006226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800622a:	e10e      	b.n	800644a <UART_SetConfig+0x2fe>
 800622c:	2308      	movs	r3, #8
 800622e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006232:	e10a      	b.n	800644a <UART_SetConfig+0x2fe>
 8006234:	2310      	movs	r3, #16
 8006236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800623a:	e106      	b.n	800644a <UART_SetConfig+0x2fe>
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a7c      	ldr	r2, [pc, #496]	@ (8006434 <UART_SetConfig+0x2e8>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d138      	bne.n	80062b8 <UART_SetConfig+0x16c>
 8006246:	4b7a      	ldr	r3, [pc, #488]	@ (8006430 <UART_SetConfig+0x2e4>)
 8006248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800624c:	f003 030c 	and.w	r3, r3, #12
 8006250:	2b0c      	cmp	r3, #12
 8006252:	d82d      	bhi.n	80062b0 <UART_SetConfig+0x164>
 8006254:	a201      	add	r2, pc, #4	@ (adr r2, 800625c <UART_SetConfig+0x110>)
 8006256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625a:	bf00      	nop
 800625c:	08006291 	.word	0x08006291
 8006260:	080062b1 	.word	0x080062b1
 8006264:	080062b1 	.word	0x080062b1
 8006268:	080062b1 	.word	0x080062b1
 800626c:	080062a1 	.word	0x080062a1
 8006270:	080062b1 	.word	0x080062b1
 8006274:	080062b1 	.word	0x080062b1
 8006278:	080062b1 	.word	0x080062b1
 800627c:	08006299 	.word	0x08006299
 8006280:	080062b1 	.word	0x080062b1
 8006284:	080062b1 	.word	0x080062b1
 8006288:	080062b1 	.word	0x080062b1
 800628c:	080062a9 	.word	0x080062a9
 8006290:	2300      	movs	r3, #0
 8006292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006296:	e0d8      	b.n	800644a <UART_SetConfig+0x2fe>
 8006298:	2302      	movs	r3, #2
 800629a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800629e:	e0d4      	b.n	800644a <UART_SetConfig+0x2fe>
 80062a0:	2304      	movs	r3, #4
 80062a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062a6:	e0d0      	b.n	800644a <UART_SetConfig+0x2fe>
 80062a8:	2308      	movs	r3, #8
 80062aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ae:	e0cc      	b.n	800644a <UART_SetConfig+0x2fe>
 80062b0:	2310      	movs	r3, #16
 80062b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062b6:	e0c8      	b.n	800644a <UART_SetConfig+0x2fe>
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a5e      	ldr	r2, [pc, #376]	@ (8006438 <UART_SetConfig+0x2ec>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d125      	bne.n	800630e <UART_SetConfig+0x1c2>
 80062c2:	4b5b      	ldr	r3, [pc, #364]	@ (8006430 <UART_SetConfig+0x2e4>)
 80062c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80062cc:	2b30      	cmp	r3, #48	@ 0x30
 80062ce:	d016      	beq.n	80062fe <UART_SetConfig+0x1b2>
 80062d0:	2b30      	cmp	r3, #48	@ 0x30
 80062d2:	d818      	bhi.n	8006306 <UART_SetConfig+0x1ba>
 80062d4:	2b20      	cmp	r3, #32
 80062d6:	d00a      	beq.n	80062ee <UART_SetConfig+0x1a2>
 80062d8:	2b20      	cmp	r3, #32
 80062da:	d814      	bhi.n	8006306 <UART_SetConfig+0x1ba>
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <UART_SetConfig+0x19a>
 80062e0:	2b10      	cmp	r3, #16
 80062e2:	d008      	beq.n	80062f6 <UART_SetConfig+0x1aa>
 80062e4:	e00f      	b.n	8006306 <UART_SetConfig+0x1ba>
 80062e6:	2300      	movs	r3, #0
 80062e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ec:	e0ad      	b.n	800644a <UART_SetConfig+0x2fe>
 80062ee:	2302      	movs	r3, #2
 80062f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062f4:	e0a9      	b.n	800644a <UART_SetConfig+0x2fe>
 80062f6:	2304      	movs	r3, #4
 80062f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062fc:	e0a5      	b.n	800644a <UART_SetConfig+0x2fe>
 80062fe:	2308      	movs	r3, #8
 8006300:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006304:	e0a1      	b.n	800644a <UART_SetConfig+0x2fe>
 8006306:	2310      	movs	r3, #16
 8006308:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800630c:	e09d      	b.n	800644a <UART_SetConfig+0x2fe>
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a4a      	ldr	r2, [pc, #296]	@ (800643c <UART_SetConfig+0x2f0>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d125      	bne.n	8006364 <UART_SetConfig+0x218>
 8006318:	4b45      	ldr	r3, [pc, #276]	@ (8006430 <UART_SetConfig+0x2e4>)
 800631a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800631e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006322:	2bc0      	cmp	r3, #192	@ 0xc0
 8006324:	d016      	beq.n	8006354 <UART_SetConfig+0x208>
 8006326:	2bc0      	cmp	r3, #192	@ 0xc0
 8006328:	d818      	bhi.n	800635c <UART_SetConfig+0x210>
 800632a:	2b80      	cmp	r3, #128	@ 0x80
 800632c:	d00a      	beq.n	8006344 <UART_SetConfig+0x1f8>
 800632e:	2b80      	cmp	r3, #128	@ 0x80
 8006330:	d814      	bhi.n	800635c <UART_SetConfig+0x210>
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <UART_SetConfig+0x1f0>
 8006336:	2b40      	cmp	r3, #64	@ 0x40
 8006338:	d008      	beq.n	800634c <UART_SetConfig+0x200>
 800633a:	e00f      	b.n	800635c <UART_SetConfig+0x210>
 800633c:	2300      	movs	r3, #0
 800633e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006342:	e082      	b.n	800644a <UART_SetConfig+0x2fe>
 8006344:	2302      	movs	r3, #2
 8006346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800634a:	e07e      	b.n	800644a <UART_SetConfig+0x2fe>
 800634c:	2304      	movs	r3, #4
 800634e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006352:	e07a      	b.n	800644a <UART_SetConfig+0x2fe>
 8006354:	2308      	movs	r3, #8
 8006356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800635a:	e076      	b.n	800644a <UART_SetConfig+0x2fe>
 800635c:	2310      	movs	r3, #16
 800635e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006362:	e072      	b.n	800644a <UART_SetConfig+0x2fe>
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a35      	ldr	r2, [pc, #212]	@ (8006440 <UART_SetConfig+0x2f4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d12a      	bne.n	80063c4 <UART_SetConfig+0x278>
 800636e:	4b30      	ldr	r3, [pc, #192]	@ (8006430 <UART_SetConfig+0x2e4>)
 8006370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006374:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006378:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800637c:	d01a      	beq.n	80063b4 <UART_SetConfig+0x268>
 800637e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006382:	d81b      	bhi.n	80063bc <UART_SetConfig+0x270>
 8006384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006388:	d00c      	beq.n	80063a4 <UART_SetConfig+0x258>
 800638a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800638e:	d815      	bhi.n	80063bc <UART_SetConfig+0x270>
 8006390:	2b00      	cmp	r3, #0
 8006392:	d003      	beq.n	800639c <UART_SetConfig+0x250>
 8006394:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006398:	d008      	beq.n	80063ac <UART_SetConfig+0x260>
 800639a:	e00f      	b.n	80063bc <UART_SetConfig+0x270>
 800639c:	2300      	movs	r3, #0
 800639e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063a2:	e052      	b.n	800644a <UART_SetConfig+0x2fe>
 80063a4:	2302      	movs	r3, #2
 80063a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063aa:	e04e      	b.n	800644a <UART_SetConfig+0x2fe>
 80063ac:	2304      	movs	r3, #4
 80063ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063b2:	e04a      	b.n	800644a <UART_SetConfig+0x2fe>
 80063b4:	2308      	movs	r3, #8
 80063b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ba:	e046      	b.n	800644a <UART_SetConfig+0x2fe>
 80063bc:	2310      	movs	r3, #16
 80063be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063c2:	e042      	b.n	800644a <UART_SetConfig+0x2fe>
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a17      	ldr	r2, [pc, #92]	@ (8006428 <UART_SetConfig+0x2dc>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d13a      	bne.n	8006444 <UART_SetConfig+0x2f8>
 80063ce:	4b18      	ldr	r3, [pc, #96]	@ (8006430 <UART_SetConfig+0x2e4>)
 80063d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80063d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063dc:	d01a      	beq.n	8006414 <UART_SetConfig+0x2c8>
 80063de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063e2:	d81b      	bhi.n	800641c <UART_SetConfig+0x2d0>
 80063e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063e8:	d00c      	beq.n	8006404 <UART_SetConfig+0x2b8>
 80063ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063ee:	d815      	bhi.n	800641c <UART_SetConfig+0x2d0>
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <UART_SetConfig+0x2b0>
 80063f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063f8:	d008      	beq.n	800640c <UART_SetConfig+0x2c0>
 80063fa:	e00f      	b.n	800641c <UART_SetConfig+0x2d0>
 80063fc:	2300      	movs	r3, #0
 80063fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006402:	e022      	b.n	800644a <UART_SetConfig+0x2fe>
 8006404:	2302      	movs	r3, #2
 8006406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800640a:	e01e      	b.n	800644a <UART_SetConfig+0x2fe>
 800640c:	2304      	movs	r3, #4
 800640e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006412:	e01a      	b.n	800644a <UART_SetConfig+0x2fe>
 8006414:	2308      	movs	r3, #8
 8006416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800641a:	e016      	b.n	800644a <UART_SetConfig+0x2fe>
 800641c:	2310      	movs	r3, #16
 800641e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006422:	e012      	b.n	800644a <UART_SetConfig+0x2fe>
 8006424:	cfff69f3 	.word	0xcfff69f3
 8006428:	40008000 	.word	0x40008000
 800642c:	40013800 	.word	0x40013800
 8006430:	40021000 	.word	0x40021000
 8006434:	40004400 	.word	0x40004400
 8006438:	40004800 	.word	0x40004800
 800643c:	40004c00 	.word	0x40004c00
 8006440:	40005000 	.word	0x40005000
 8006444:	2310      	movs	r3, #16
 8006446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4aae      	ldr	r2, [pc, #696]	@ (8006708 <UART_SetConfig+0x5bc>)
 8006450:	4293      	cmp	r3, r2
 8006452:	f040 8097 	bne.w	8006584 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006456:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800645a:	2b08      	cmp	r3, #8
 800645c:	d823      	bhi.n	80064a6 <UART_SetConfig+0x35a>
 800645e:	a201      	add	r2, pc, #4	@ (adr r2, 8006464 <UART_SetConfig+0x318>)
 8006460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006464:	08006489 	.word	0x08006489
 8006468:	080064a7 	.word	0x080064a7
 800646c:	08006491 	.word	0x08006491
 8006470:	080064a7 	.word	0x080064a7
 8006474:	08006497 	.word	0x08006497
 8006478:	080064a7 	.word	0x080064a7
 800647c:	080064a7 	.word	0x080064a7
 8006480:	080064a7 	.word	0x080064a7
 8006484:	0800649f 	.word	0x0800649f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006488:	f7fe fb1c 	bl	8004ac4 <HAL_RCC_GetPCLK1Freq>
 800648c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800648e:	e010      	b.n	80064b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006490:	4b9e      	ldr	r3, [pc, #632]	@ (800670c <UART_SetConfig+0x5c0>)
 8006492:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006494:	e00d      	b.n	80064b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006496:	f7fe fa7d 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 800649a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800649c:	e009      	b.n	80064b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800649e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064a4:	e005      	b.n	80064b2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80064a6:	2300      	movs	r3, #0
 80064a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80064b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 8130 	beq.w	800671a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064be:	4a94      	ldr	r2, [pc, #592]	@ (8006710 <UART_SetConfig+0x5c4>)
 80064c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064c4:	461a      	mov	r2, r3
 80064c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80064cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	4613      	mov	r3, r2
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	4413      	add	r3, r2
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d305      	bcc.n	80064ea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d903      	bls.n	80064f2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80064f0:	e113      	b.n	800671a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	2200      	movs	r2, #0
 80064f6:	60bb      	str	r3, [r7, #8]
 80064f8:	60fa      	str	r2, [r7, #12]
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fe:	4a84      	ldr	r2, [pc, #528]	@ (8006710 <UART_SetConfig+0x5c4>)
 8006500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006504:	b29b      	uxth	r3, r3
 8006506:	2200      	movs	r2, #0
 8006508:	603b      	str	r3, [r7, #0]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006510:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006514:	f7f9 fec4 	bl	80002a0 <__aeabi_uldivmod>
 8006518:	4602      	mov	r2, r0
 800651a:	460b      	mov	r3, r1
 800651c:	4610      	mov	r0, r2
 800651e:	4619      	mov	r1, r3
 8006520:	f04f 0200 	mov.w	r2, #0
 8006524:	f04f 0300 	mov.w	r3, #0
 8006528:	020b      	lsls	r3, r1, #8
 800652a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800652e:	0202      	lsls	r2, r0, #8
 8006530:	6979      	ldr	r1, [r7, #20]
 8006532:	6849      	ldr	r1, [r1, #4]
 8006534:	0849      	lsrs	r1, r1, #1
 8006536:	2000      	movs	r0, #0
 8006538:	460c      	mov	r4, r1
 800653a:	4605      	mov	r5, r0
 800653c:	eb12 0804 	adds.w	r8, r2, r4
 8006540:	eb43 0905 	adc.w	r9, r3, r5
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	469a      	mov	sl, r3
 800654c:	4693      	mov	fp, r2
 800654e:	4652      	mov	r2, sl
 8006550:	465b      	mov	r3, fp
 8006552:	4640      	mov	r0, r8
 8006554:	4649      	mov	r1, r9
 8006556:	f7f9 fea3 	bl	80002a0 <__aeabi_uldivmod>
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	4613      	mov	r3, r2
 8006560:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006568:	d308      	bcc.n	800657c <UART_SetConfig+0x430>
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006570:	d204      	bcs.n	800657c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6a3a      	ldr	r2, [r7, #32]
 8006578:	60da      	str	r2, [r3, #12]
 800657a:	e0ce      	b.n	800671a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006582:	e0ca      	b.n	800671a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800658c:	d166      	bne.n	800665c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800658e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006592:	2b08      	cmp	r3, #8
 8006594:	d827      	bhi.n	80065e6 <UART_SetConfig+0x49a>
 8006596:	a201      	add	r2, pc, #4	@ (adr r2, 800659c <UART_SetConfig+0x450>)
 8006598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659c:	080065c1 	.word	0x080065c1
 80065a0:	080065c9 	.word	0x080065c9
 80065a4:	080065d1 	.word	0x080065d1
 80065a8:	080065e7 	.word	0x080065e7
 80065ac:	080065d7 	.word	0x080065d7
 80065b0:	080065e7 	.word	0x080065e7
 80065b4:	080065e7 	.word	0x080065e7
 80065b8:	080065e7 	.word	0x080065e7
 80065bc:	080065df 	.word	0x080065df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065c0:	f7fe fa80 	bl	8004ac4 <HAL_RCC_GetPCLK1Freq>
 80065c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065c6:	e014      	b.n	80065f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065c8:	f7fe fa92 	bl	8004af0 <HAL_RCC_GetPCLK2Freq>
 80065cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065ce:	e010      	b.n	80065f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065d0:	4b4e      	ldr	r3, [pc, #312]	@ (800670c <UART_SetConfig+0x5c0>)
 80065d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80065d4:	e00d      	b.n	80065f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065d6:	f7fe f9dd 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 80065da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065dc:	e009      	b.n	80065f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80065e4:	e005      	b.n	80065f2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80065f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 8090 	beq.w	800671a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fe:	4a44      	ldr	r2, [pc, #272]	@ (8006710 <UART_SetConfig+0x5c4>)
 8006600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006604:	461a      	mov	r2, r3
 8006606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006608:	fbb3 f3f2 	udiv	r3, r3, r2
 800660c:	005a      	lsls	r2, r3, #1
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	085b      	lsrs	r3, r3, #1
 8006614:	441a      	add	r2, r3
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	fbb2 f3f3 	udiv	r3, r2, r3
 800661e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	2b0f      	cmp	r3, #15
 8006624:	d916      	bls.n	8006654 <UART_SetConfig+0x508>
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800662c:	d212      	bcs.n	8006654 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	b29b      	uxth	r3, r3
 8006632:	f023 030f 	bic.w	r3, r3, #15
 8006636:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	085b      	lsrs	r3, r3, #1
 800663c:	b29b      	uxth	r3, r3
 800663e:	f003 0307 	and.w	r3, r3, #7
 8006642:	b29a      	uxth	r2, r3
 8006644:	8bfb      	ldrh	r3, [r7, #30]
 8006646:	4313      	orrs	r3, r2
 8006648:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	8bfa      	ldrh	r2, [r7, #30]
 8006650:	60da      	str	r2, [r3, #12]
 8006652:	e062      	b.n	800671a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800665a:	e05e      	b.n	800671a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800665c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006660:	2b08      	cmp	r3, #8
 8006662:	d828      	bhi.n	80066b6 <UART_SetConfig+0x56a>
 8006664:	a201      	add	r2, pc, #4	@ (adr r2, 800666c <UART_SetConfig+0x520>)
 8006666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666a:	bf00      	nop
 800666c:	08006691 	.word	0x08006691
 8006670:	08006699 	.word	0x08006699
 8006674:	080066a1 	.word	0x080066a1
 8006678:	080066b7 	.word	0x080066b7
 800667c:	080066a7 	.word	0x080066a7
 8006680:	080066b7 	.word	0x080066b7
 8006684:	080066b7 	.word	0x080066b7
 8006688:	080066b7 	.word	0x080066b7
 800668c:	080066af 	.word	0x080066af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006690:	f7fe fa18 	bl	8004ac4 <HAL_RCC_GetPCLK1Freq>
 8006694:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006696:	e014      	b.n	80066c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006698:	f7fe fa2a 	bl	8004af0 <HAL_RCC_GetPCLK2Freq>
 800669c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800669e:	e010      	b.n	80066c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066a0:	4b1a      	ldr	r3, [pc, #104]	@ (800670c <UART_SetConfig+0x5c0>)
 80066a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066a4:	e00d      	b.n	80066c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066a6:	f7fe f975 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 80066aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066ac:	e009      	b.n	80066c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066b4:	e005      	b.n	80066c2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80066c0:	bf00      	nop
    }

    if (pclk != 0U)
 80066c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d028      	beq.n	800671a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066cc:	4a10      	ldr	r2, [pc, #64]	@ (8006710 <UART_SetConfig+0x5c4>)
 80066ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066d2:	461a      	mov	r2, r3
 80066d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	085b      	lsrs	r3, r3, #1
 80066e0:	441a      	add	r2, r3
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ea:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	2b0f      	cmp	r3, #15
 80066f0:	d910      	bls.n	8006714 <UART_SetConfig+0x5c8>
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066f8:	d20c      	bcs.n	8006714 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	60da      	str	r2, [r3, #12]
 8006704:	e009      	b.n	800671a <UART_SetConfig+0x5ce>
 8006706:	bf00      	nop
 8006708:	40008000 	.word	0x40008000
 800670c:	00f42400 	.word	0x00f42400
 8006710:	0800b1e4 	.word	0x0800b1e4
      }
      else
      {
        ret = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2201      	movs	r2, #1
 800671e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2201      	movs	r2, #1
 8006726:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2200      	movs	r2, #0
 800672e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	2200      	movs	r2, #0
 8006734:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006736:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800673a:	4618      	mov	r0, r3
 800673c:	3730      	adds	r7, #48	@ 0x30
 800673e:	46bd      	mov	sp, r7
 8006740:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006750:	f003 0308 	and.w	r3, r3, #8
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00a      	beq.n	800676e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00a      	beq.n	80067b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b6:	f003 0304 	and.w	r3, r3, #4
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00a      	beq.n	80067d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d8:	f003 0310 	and.w	r3, r3, #16
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00a      	beq.n	80067f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fa:	f003 0320 	and.w	r3, r3, #32
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00a      	beq.n	8006818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800681c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006820:	2b00      	cmp	r3, #0
 8006822:	d01a      	beq.n	800685a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800683e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006842:	d10a      	bne.n	800685a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800685e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00a      	beq.n	800687c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	430a      	orrs	r2, r1
 800687a:	605a      	str	r2, [r3, #4]
  }
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b098      	sub	sp, #96	@ 0x60
 800688c:	af02      	add	r7, sp, #8
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006898:	f7fb f988 	bl	8001bac <HAL_GetTick>
 800689c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0308 	and.w	r3, r3, #8
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d12f      	bne.n	800690c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068b4:	2200      	movs	r2, #0
 80068b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f88e 	bl	80069dc <UART_WaitOnFlagUntilTimeout>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d022      	beq.n	800690c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068da:	653b      	str	r3, [r7, #80]	@ 0x50
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	461a      	mov	r2, r3
 80068e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80068e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068ec:	e841 2300 	strex	r3, r2, [r1]
 80068f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e6      	bne.n	80068c6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e063      	b.n	80069d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0304 	and.w	r3, r3, #4
 8006916:	2b04      	cmp	r3, #4
 8006918:	d149      	bne.n	80069ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800691a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006922:	2200      	movs	r2, #0
 8006924:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f857 	bl	80069dc <UART_WaitOnFlagUntilTimeout>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d03c      	beq.n	80069ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693c:	e853 3f00 	ldrex	r3, [r3]
 8006940:	623b      	str	r3, [r7, #32]
   return(result);
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006948:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006952:	633b      	str	r3, [r7, #48]	@ 0x30
 8006954:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006956:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006958:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e6      	bne.n	8006934 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3308      	adds	r3, #8
 800696c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	e853 3f00 	ldrex	r3, [r3]
 8006974:	60fb      	str	r3, [r7, #12]
   return(result);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f023 0301 	bic.w	r3, r3, #1
 800697c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3308      	adds	r3, #8
 8006984:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006986:	61fa      	str	r2, [r7, #28]
 8006988:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698a:	69b9      	ldr	r1, [r7, #24]
 800698c:	69fa      	ldr	r2, [r7, #28]
 800698e:	e841 2300 	strex	r3, r2, [r1]
 8006992:	617b      	str	r3, [r7, #20]
   return(result);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1e5      	bne.n	8006966 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2220      	movs	r2, #32
 800699e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e012      	b.n	80069d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2220      	movs	r2, #32
 80069b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3758      	adds	r7, #88	@ 0x58
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	603b      	str	r3, [r7, #0]
 80069e8:	4613      	mov	r3, r2
 80069ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ec:	e049      	b.n	8006a82 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f4:	d045      	beq.n	8006a82 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069f6:	f7fb f8d9 	bl	8001bac <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d302      	bcc.n	8006a0c <UART_WaitOnFlagUntilTimeout+0x30>
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e048      	b.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0304 	and.w	r3, r3, #4
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d031      	beq.n	8006a82 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	f003 0308 	and.w	r3, r3, #8
 8006a28:	2b08      	cmp	r3, #8
 8006a2a:	d110      	bne.n	8006a4e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2208      	movs	r2, #8
 8006a32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 f838 	bl	8006aaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2208      	movs	r2, #8
 8006a3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e029      	b.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a5c:	d111      	bne.n	8006a82 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 f81e 	bl	8006aaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e00f      	b.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69da      	ldr	r2, [r3, #28]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	bf0c      	ite	eq
 8006a92:	2301      	moveq	r3, #1
 8006a94:	2300      	movne	r3, #0
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	461a      	mov	r2, r3
 8006a9a:	79fb      	ldrb	r3, [r7, #7]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d0a6      	beq.n	80069ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b095      	sub	sp, #84	@ 0x54
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aba:	e853 3f00 	ldrex	r3, [r3]
 8006abe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	461a      	mov	r2, r3
 8006ace:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ad0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ad2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ad6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e6      	bne.n	8006ab2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3308      	adds	r3, #8
 8006aea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006afa:	f023 0301 	bic.w	r3, r3, #1
 8006afe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	3308      	adds	r3, #8
 8006b06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b10:	e841 2300 	strex	r3, r2, [r1]
 8006b14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1e3      	bne.n	8006ae4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d118      	bne.n	8006b56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	f023 0310 	bic.w	r3, r3, #16
 8006b38:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b42:	61bb      	str	r3, [r7, #24]
 8006b44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	6979      	ldr	r1, [r7, #20]
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e6      	bne.n	8006b24 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006b6a:	bf00      	nop
 8006b6c:	3754      	adds	r7, #84	@ 0x54
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b085      	sub	sp, #20
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d101      	bne.n	8006b8c <HAL_UARTEx_DisableFifoMode+0x16>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e027      	b.n	8006bdc <HAL_UARTEx_DisableFifoMode+0x66>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2224      	movs	r2, #36	@ 0x24
 8006b98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0201 	bic.w	r2, r2, #1
 8006bb2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006bba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d101      	bne.n	8006c00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	e02d      	b.n	8006c5c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2224      	movs	r2, #36	@ 0x24
 8006c0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f022 0201 	bic.w	r2, r2, #1
 8006c26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f84f 	bl	8006ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d101      	bne.n	8006c7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	e02d      	b.n	8006cd8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2224      	movs	r2, #36	@ 0x24
 8006c88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f022 0201 	bic.w	r2, r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f811 	bl	8006ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d108      	bne.n	8006d02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d00:	e031      	b.n	8006d66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d02:	2308      	movs	r3, #8
 8006d04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d06:	2308      	movs	r3, #8
 8006d08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	0e5b      	lsrs	r3, r3, #25
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	0f5b      	lsrs	r3, r3, #29
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	f003 0307 	and.w	r3, r3, #7
 8006d28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	7b3a      	ldrb	r2, [r7, #12]
 8006d2e:	4911      	ldr	r1, [pc, #68]	@ (8006d74 <UARTEx_SetNbDataToProcess+0x94>)
 8006d30:	5c8a      	ldrb	r2, [r1, r2]
 8006d32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d36:	7b3a      	ldrb	r2, [r7, #12]
 8006d38:	490f      	ldr	r1, [pc, #60]	@ (8006d78 <UARTEx_SetNbDataToProcess+0x98>)
 8006d3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
 8006d4a:	7b7a      	ldrb	r2, [r7, #13]
 8006d4c:	4909      	ldr	r1, [pc, #36]	@ (8006d74 <UARTEx_SetNbDataToProcess+0x94>)
 8006d4e:	5c8a      	ldrb	r2, [r1, r2]
 8006d50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d54:	7b7a      	ldrb	r2, [r7, #13]
 8006d56:	4908      	ldr	r1, [pc, #32]	@ (8006d78 <UARTEx_SetNbDataToProcess+0x98>)
 8006d58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006d66:	bf00      	nop
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	0800b1fc 	.word	0x0800b1fc
 8006d78:	0800b204 	.word	0x0800b204

08006d7c <__NVIC_SetPriority>:
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	4603      	mov	r3, r0
 8006d84:	6039      	str	r1, [r7, #0]
 8006d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	db0a      	blt.n	8006da6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	490c      	ldr	r1, [pc, #48]	@ (8006dc8 <__NVIC_SetPriority+0x4c>)
 8006d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d9a:	0112      	lsls	r2, r2, #4
 8006d9c:	b2d2      	uxtb	r2, r2
 8006d9e:	440b      	add	r3, r1
 8006da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006da4:	e00a      	b.n	8006dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	4908      	ldr	r1, [pc, #32]	@ (8006dcc <__NVIC_SetPriority+0x50>)
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	f003 030f 	and.w	r3, r3, #15
 8006db2:	3b04      	subs	r3, #4
 8006db4:	0112      	lsls	r2, r2, #4
 8006db6:	b2d2      	uxtb	r2, r2
 8006db8:	440b      	add	r3, r1
 8006dba:	761a      	strb	r2, [r3, #24]
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	e000e100 	.word	0xe000e100
 8006dcc:	e000ed00 	.word	0xe000ed00

08006dd0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006dd4:	4b05      	ldr	r3, [pc, #20]	@ (8006dec <SysTick_Handler+0x1c>)
 8006dd6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006dd8:	f002 fac8 	bl	800936c <xTaskGetSchedulerState>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d001      	beq.n	8006de6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006de2:	f003 f9c1 	bl	800a168 <xPortSysTickHandler>
  }
}
 8006de6:	bf00      	nop
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	e000e010 	.word	0xe000e010

08006df0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006df0:	b580      	push	{r7, lr}
 8006df2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006df4:	2100      	movs	r1, #0
 8006df6:	f06f 0004 	mvn.w	r0, #4
 8006dfa:	f7ff ffbf 	bl	8006d7c <__NVIC_SetPriority>
#endif
}
 8006dfe:	bf00      	nop
 8006e00:	bd80      	pop	{r7, pc}
	...

08006e04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e0a:	f3ef 8305 	mrs	r3, IPSR
 8006e0e:	603b      	str	r3, [r7, #0]
  return(result);
 8006e10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d003      	beq.n	8006e1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006e16:	f06f 0305 	mvn.w	r3, #5
 8006e1a:	607b      	str	r3, [r7, #4]
 8006e1c:	e00c      	b.n	8006e38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8006e48 <osKernelInitialize+0x44>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d105      	bne.n	8006e32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006e26:	4b08      	ldr	r3, [pc, #32]	@ (8006e48 <osKernelInitialize+0x44>)
 8006e28:	2201      	movs	r2, #1
 8006e2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	607b      	str	r3, [r7, #4]
 8006e30:	e002      	b.n	8006e38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006e32:	f04f 33ff 	mov.w	r3, #4294967295
 8006e36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e38:	687b      	ldr	r3, [r7, #4]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	2000056c 	.word	0x2000056c

08006e4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e52:	f3ef 8305 	mrs	r3, IPSR
 8006e56:	603b      	str	r3, [r7, #0]
  return(result);
 8006e58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006e5e:	f06f 0305 	mvn.w	r3, #5
 8006e62:	607b      	str	r3, [r7, #4]
 8006e64:	e010      	b.n	8006e88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006e66:	4b0b      	ldr	r3, [pc, #44]	@ (8006e94 <osKernelStart+0x48>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d109      	bne.n	8006e82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006e6e:	f7ff ffbf 	bl	8006df0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006e72:	4b08      	ldr	r3, [pc, #32]	@ (8006e94 <osKernelStart+0x48>)
 8006e74:	2202      	movs	r2, #2
 8006e76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006e78:	f001 fe14 	bl	8008aa4 <vTaskStartScheduler>
      stat = osOK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	607b      	str	r3, [r7, #4]
 8006e80:	e002      	b.n	8006e88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006e82:	f04f 33ff 	mov.w	r3, #4294967295
 8006e86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e88:	687b      	ldr	r3, [r7, #4]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	2000056c 	.word	0x2000056c

08006e98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b08e      	sub	sp, #56	@ 0x38
 8006e9c:	af04      	add	r7, sp, #16
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ea8:	f3ef 8305 	mrs	r3, IPSR
 8006eac:	617b      	str	r3, [r7, #20]
  return(result);
 8006eae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d17e      	bne.n	8006fb2 <osThreadNew+0x11a>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d07b      	beq.n	8006fb2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006eba:	2380      	movs	r3, #128	@ 0x80
 8006ebc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006ebe:	2318      	movs	r3, #24
 8006ec0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8006eca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d045      	beq.n	8006f5e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <osThreadNew+0x48>
        name = attr->name;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d008      	beq.n	8006f06 <osThreadNew+0x6e>
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	2b38      	cmp	r3, #56	@ 0x38
 8006ef8:	d805      	bhi.n	8006f06 <osThreadNew+0x6e>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <osThreadNew+0x72>
        return (NULL);
 8006f06:	2300      	movs	r3, #0
 8006f08:	e054      	b.n	8006fb4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	089b      	lsrs	r3, r3, #2
 8006f18:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00e      	beq.n	8006f40 <osThreadNew+0xa8>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	2ba7      	cmp	r3, #167	@ 0xa7
 8006f28:	d90a      	bls.n	8006f40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d006      	beq.n	8006f40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d002      	beq.n	8006f40 <osThreadNew+0xa8>
        mem = 1;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	61bb      	str	r3, [r7, #24]
 8006f3e:	e010      	b.n	8006f62 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10c      	bne.n	8006f62 <osThreadNew+0xca>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d108      	bne.n	8006f62 <osThreadNew+0xca>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d104      	bne.n	8006f62 <osThreadNew+0xca>
          mem = 0;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	61bb      	str	r3, [r7, #24]
 8006f5c:	e001      	b.n	8006f62 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d110      	bne.n	8006f8a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f70:	9202      	str	r2, [sp, #8]
 8006f72:	9301      	str	r3, [sp, #4]
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	6a3a      	ldr	r2, [r7, #32]
 8006f7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f001 fb9c 	bl	80086bc <xTaskCreateStatic>
 8006f84:	4603      	mov	r3, r0
 8006f86:	613b      	str	r3, [r7, #16]
 8006f88:	e013      	b.n	8006fb2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d110      	bne.n	8006fb2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	f107 0310 	add.w	r3, r7, #16
 8006f98:	9301      	str	r3, [sp, #4]
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f001 fbea 	bl	800877c <xTaskCreate>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d001      	beq.n	8006fb2 <osThreadNew+0x11a>
            hTask = NULL;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006fb2:	693b      	ldr	r3, [r7, #16]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3728      	adds	r7, #40	@ 0x28
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fc4:	f3ef 8305 	mrs	r3, IPSR
 8006fc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d003      	beq.n	8006fd8 <osDelay+0x1c>
    stat = osErrorISR;
 8006fd0:	f06f 0305 	mvn.w	r3, #5
 8006fd4:	60fb      	str	r3, [r7, #12]
 8006fd6:	e007      	b.n	8006fe8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d002      	beq.n	8006fe8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f001 fd28 	bl	8008a38 <vTaskDelay>
    }
  }

  return (stat);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b08a      	sub	sp, #40	@ 0x28
 8006ff6:	af02      	add	r7, sp, #8
 8006ff8:	60f8      	str	r0, [r7, #12]
 8006ffa:	60b9      	str	r1, [r7, #8]
 8006ffc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007002:	f3ef 8305 	mrs	r3, IPSR
 8007006:	613b      	str	r3, [r7, #16]
  return(result);
 8007008:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800700a:	2b00      	cmp	r3, #0
 800700c:	d175      	bne.n	80070fa <osSemaphoreNew+0x108>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d072      	beq.n	80070fa <osSemaphoreNew+0x108>
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	429a      	cmp	r2, r3
 800701a:	d86e      	bhi.n	80070fa <osSemaphoreNew+0x108>
    mem = -1;
 800701c:	f04f 33ff 	mov.w	r3, #4294967295
 8007020:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d015      	beq.n	8007054 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d006      	beq.n	800703e <osSemaphoreNew+0x4c>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	2b4f      	cmp	r3, #79	@ 0x4f
 8007036:	d902      	bls.n	800703e <osSemaphoreNew+0x4c>
        mem = 1;
 8007038:	2301      	movs	r3, #1
 800703a:	61bb      	str	r3, [r7, #24]
 800703c:	e00c      	b.n	8007058 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d108      	bne.n	8007058 <osSemaphoreNew+0x66>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d104      	bne.n	8007058 <osSemaphoreNew+0x66>
          mem = 0;
 800704e:	2300      	movs	r3, #0
 8007050:	61bb      	str	r3, [r7, #24]
 8007052:	e001      	b.n	8007058 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007054:	2300      	movs	r3, #0
 8007056:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705e:	d04c      	beq.n	80070fa <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d128      	bne.n	80070b8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d10a      	bne.n	8007082 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	2203      	movs	r2, #3
 8007072:	9200      	str	r2, [sp, #0]
 8007074:	2200      	movs	r2, #0
 8007076:	2100      	movs	r1, #0
 8007078:	2001      	movs	r0, #1
 800707a:	f000 fb5d 	bl	8007738 <xQueueGenericCreateStatic>
 800707e:	61f8      	str	r0, [r7, #28]
 8007080:	e005      	b.n	800708e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007082:	2203      	movs	r2, #3
 8007084:	2100      	movs	r1, #0
 8007086:	2001      	movs	r0, #1
 8007088:	f000 fbd3 	bl	8007832 <xQueueGenericCreate>
 800708c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d022      	beq.n	80070da <osSemaphoreNew+0xe8>
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d01f      	beq.n	80070da <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800709a:	2300      	movs	r3, #0
 800709c:	2200      	movs	r2, #0
 800709e:	2100      	movs	r1, #0
 80070a0:	69f8      	ldr	r0, [r7, #28]
 80070a2:	f000 fc93 	bl	80079cc <xQueueGenericSend>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d016      	beq.n	80070da <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80070ac:	69f8      	ldr	r0, [r7, #28]
 80070ae:	f001 f931 	bl	8008314 <vQueueDelete>
            hSemaphore = NULL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	61fb      	str	r3, [r7, #28]
 80070b6:	e010      	b.n	80070da <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d108      	bne.n	80070d0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	461a      	mov	r2, r3
 80070c4:	68b9      	ldr	r1, [r7, #8]
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 fc11 	bl	80078ee <xQueueCreateCountingSemaphoreStatic>
 80070cc:	61f8      	str	r0, [r7, #28]
 80070ce:	e004      	b.n	80070da <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80070d0:	68b9      	ldr	r1, [r7, #8]
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f000 fc44 	bl	8007960 <xQueueCreateCountingSemaphore>
 80070d8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00c      	beq.n	80070fa <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <osSemaphoreNew+0xfc>
          name = attr->name;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	617b      	str	r3, [r7, #20]
 80070ec:	e001      	b.n	80070f2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80070ee:	2300      	movs	r3, #0
 80070f0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80070f2:	6979      	ldr	r1, [r7, #20]
 80070f4:	69f8      	ldr	r0, [r7, #28]
 80070f6:	f001 fa59 	bl	80085ac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80070fa:	69fb      	ldr	r3, [r7, #28]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3720      	adds	r7, #32
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007112:	2300      	movs	r3, #0
 8007114:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d103      	bne.n	8007124 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800711c:	f06f 0303 	mvn.w	r3, #3
 8007120:	617b      	str	r3, [r7, #20]
 8007122:	e039      	b.n	8007198 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007124:	f3ef 8305 	mrs	r3, IPSR
 8007128:	60fb      	str	r3, [r7, #12]
  return(result);
 800712a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800712c:	2b00      	cmp	r3, #0
 800712e:	d022      	beq.n	8007176 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d003      	beq.n	800713e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8007136:	f06f 0303 	mvn.w	r3, #3
 800713a:	617b      	str	r3, [r7, #20]
 800713c:	e02c      	b.n	8007198 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800713e:	2300      	movs	r3, #0
 8007140:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007142:	f107 0308 	add.w	r3, r7, #8
 8007146:	461a      	mov	r2, r3
 8007148:	2100      	movs	r1, #0
 800714a:	6938      	ldr	r0, [r7, #16]
 800714c:	f001 f860 	bl	8008210 <xQueueReceiveFromISR>
 8007150:	4603      	mov	r3, r0
 8007152:	2b01      	cmp	r3, #1
 8007154:	d003      	beq.n	800715e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8007156:	f06f 0302 	mvn.w	r3, #2
 800715a:	617b      	str	r3, [r7, #20]
 800715c:	e01c      	b.n	8007198 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d019      	beq.n	8007198 <osSemaphoreAcquire+0x94>
 8007164:	4b0f      	ldr	r3, [pc, #60]	@ (80071a4 <osSemaphoreAcquire+0xa0>)
 8007166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	e010      	b.n	8007198 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6938      	ldr	r0, [r7, #16]
 800717a:	f000 ff39 	bl	8007ff0 <xQueueSemaphoreTake>
 800717e:	4603      	mov	r3, r0
 8007180:	2b01      	cmp	r3, #1
 8007182:	d009      	beq.n	8007198 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800718a:	f06f 0301 	mvn.w	r3, #1
 800718e:	617b      	str	r3, [r7, #20]
 8007190:	e002      	b.n	8007198 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8007192:	f06f 0302 	mvn.w	r3, #2
 8007196:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007198:	697b      	ldr	r3, [r7, #20]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	e000ed04 	.word	0xe000ed04

080071a8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80071b4:	2300      	movs	r3, #0
 80071b6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d103      	bne.n	80071c6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80071be:	f06f 0303 	mvn.w	r3, #3
 80071c2:	617b      	str	r3, [r7, #20]
 80071c4:	e02c      	b.n	8007220 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071c6:	f3ef 8305 	mrs	r3, IPSR
 80071ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80071cc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d01a      	beq.n	8007208 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80071d6:	f107 0308 	add.w	r3, r7, #8
 80071da:	4619      	mov	r1, r3
 80071dc:	6938      	ldr	r0, [r7, #16]
 80071de:	f000 fd95 	bl	8007d0c <xQueueGiveFromISR>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d003      	beq.n	80071f0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80071e8:	f06f 0302 	mvn.w	r3, #2
 80071ec:	617b      	str	r3, [r7, #20]
 80071ee:	e017      	b.n	8007220 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d014      	beq.n	8007220 <osSemaphoreRelease+0x78>
 80071f6:	4b0d      	ldr	r3, [pc, #52]	@ (800722c <osSemaphoreRelease+0x84>)
 80071f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	e00b      	b.n	8007220 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007208:	2300      	movs	r3, #0
 800720a:	2200      	movs	r2, #0
 800720c:	2100      	movs	r1, #0
 800720e:	6938      	ldr	r0, [r7, #16]
 8007210:	f000 fbdc 	bl	80079cc <xQueueGenericSend>
 8007214:	4603      	mov	r3, r0
 8007216:	2b01      	cmp	r3, #1
 8007218:	d002      	beq.n	8007220 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800721a:	f06f 0302 	mvn.w	r3, #2
 800721e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007220:	697b      	ldr	r3, [r7, #20]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3718      	adds	r7, #24
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	e000ed04 	.word	0xe000ed04

08007230 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007230:	b580      	push	{r7, lr}
 8007232:	b08a      	sub	sp, #40	@ 0x28
 8007234:	af02      	add	r7, sp, #8
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800723c:	2300      	movs	r3, #0
 800723e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007240:	f3ef 8305 	mrs	r3, IPSR
 8007244:	613b      	str	r3, [r7, #16]
  return(result);
 8007246:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007248:	2b00      	cmp	r3, #0
 800724a:	d15f      	bne.n	800730c <osMessageQueueNew+0xdc>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d05c      	beq.n	800730c <osMessageQueueNew+0xdc>
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d059      	beq.n	800730c <osMessageQueueNew+0xdc>
    mem = -1;
 8007258:	f04f 33ff 	mov.w	r3, #4294967295
 800725c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d029      	beq.n	80072b8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d012      	beq.n	8007292 <osMessageQueueNew+0x62>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	2b4f      	cmp	r3, #79	@ 0x4f
 8007272:	d90e      	bls.n	8007292 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00a      	beq.n	8007292 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	695a      	ldr	r2, [r3, #20]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	68b9      	ldr	r1, [r7, #8]
 8007284:	fb01 f303 	mul.w	r3, r1, r3
 8007288:	429a      	cmp	r2, r3
 800728a:	d302      	bcc.n	8007292 <osMessageQueueNew+0x62>
        mem = 1;
 800728c:	2301      	movs	r3, #1
 800728e:	61bb      	str	r3, [r7, #24]
 8007290:	e014      	b.n	80072bc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d110      	bne.n	80072bc <osMessageQueueNew+0x8c>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10c      	bne.n	80072bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d108      	bne.n	80072bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d104      	bne.n	80072bc <osMessageQueueNew+0x8c>
          mem = 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	61bb      	str	r3, [r7, #24]
 80072b6:	e001      	b.n	80072bc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80072b8:	2300      	movs	r3, #0
 80072ba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d10b      	bne.n	80072da <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	691a      	ldr	r2, [r3, #16]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	2100      	movs	r1, #0
 80072cc:	9100      	str	r1, [sp, #0]
 80072ce:	68b9      	ldr	r1, [r7, #8]
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 fa31 	bl	8007738 <xQueueGenericCreateStatic>
 80072d6:	61f8      	str	r0, [r7, #28]
 80072d8:	e008      	b.n	80072ec <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d105      	bne.n	80072ec <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80072e0:	2200      	movs	r2, #0
 80072e2:	68b9      	ldr	r1, [r7, #8]
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 faa4 	bl	8007832 <xQueueGenericCreate>
 80072ea:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00c      	beq.n	800730c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d003      	beq.n	8007300 <osMessageQueueNew+0xd0>
        name = attr->name;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	617b      	str	r3, [r7, #20]
 80072fe:	e001      	b.n	8007304 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007300:	2300      	movs	r3, #0
 8007302:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007304:	6979      	ldr	r1, [r7, #20]
 8007306:	69f8      	ldr	r0, [r7, #28]
 8007308:	f001 f950 	bl	80085ac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800730c:	69fb      	ldr	r3, [r7, #28]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3720      	adds	r7, #32
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
	...

08007318 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007318:	b580      	push	{r7, lr}
 800731a:	b088      	sub	sp, #32
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	603b      	str	r3, [r7, #0]
 8007324:	4613      	mov	r3, r2
 8007326:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800732c:	2300      	movs	r3, #0
 800732e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007330:	f3ef 8305 	mrs	r3, IPSR
 8007334:	617b      	str	r3, [r7, #20]
  return(result);
 8007336:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007338:	2b00      	cmp	r3, #0
 800733a:	d028      	beq.n	800738e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d005      	beq.n	800734e <osMessageQueuePut+0x36>
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <osMessageQueuePut+0x36>
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d003      	beq.n	8007356 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800734e:	f06f 0303 	mvn.w	r3, #3
 8007352:	61fb      	str	r3, [r7, #28]
 8007354:	e038      	b.n	80073c8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007356:	2300      	movs	r3, #0
 8007358:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800735a:	f107 0210 	add.w	r2, r7, #16
 800735e:	2300      	movs	r3, #0
 8007360:	68b9      	ldr	r1, [r7, #8]
 8007362:	69b8      	ldr	r0, [r7, #24]
 8007364:	f000 fc34 	bl	8007bd0 <xQueueGenericSendFromISR>
 8007368:	4603      	mov	r3, r0
 800736a:	2b01      	cmp	r3, #1
 800736c:	d003      	beq.n	8007376 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800736e:	f06f 0302 	mvn.w	r3, #2
 8007372:	61fb      	str	r3, [r7, #28]
 8007374:	e028      	b.n	80073c8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d025      	beq.n	80073c8 <osMessageQueuePut+0xb0>
 800737c:	4b15      	ldr	r3, [pc, #84]	@ (80073d4 <osMessageQueuePut+0xbc>)
 800737e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	e01c      	b.n	80073c8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <osMessageQueuePut+0x82>
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d103      	bne.n	80073a2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800739a:	f06f 0303 	mvn.w	r3, #3
 800739e:	61fb      	str	r3, [r7, #28]
 80073a0:	e012      	b.n	80073c8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80073a2:	2300      	movs	r3, #0
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	68b9      	ldr	r1, [r7, #8]
 80073a8:	69b8      	ldr	r0, [r7, #24]
 80073aa:	f000 fb0f 	bl	80079cc <xQueueGenericSend>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d009      	beq.n	80073c8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80073ba:	f06f 0301 	mvn.w	r3, #1
 80073be:	61fb      	str	r3, [r7, #28]
 80073c0:	e002      	b.n	80073c8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80073c2:	f06f 0302 	mvn.w	r3, #2
 80073c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80073c8:	69fb      	ldr	r3, [r7, #28]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3720      	adds	r7, #32
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	e000ed04 	.word	0xe000ed04

080073d8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80073d8:	b580      	push	{r7, lr}
 80073da:	b088      	sub	sp, #32
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
 80073e4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073ee:	f3ef 8305 	mrs	r3, IPSR
 80073f2:	617b      	str	r3, [r7, #20]
  return(result);
 80073f4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d028      	beq.n	800744c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d005      	beq.n	800740c <osMessageQueueGet+0x34>
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d002      	beq.n	800740c <osMessageQueueGet+0x34>
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d003      	beq.n	8007414 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800740c:	f06f 0303 	mvn.w	r3, #3
 8007410:	61fb      	str	r3, [r7, #28]
 8007412:	e037      	b.n	8007484 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007414:	2300      	movs	r3, #0
 8007416:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007418:	f107 0310 	add.w	r3, r7, #16
 800741c:	461a      	mov	r2, r3
 800741e:	68b9      	ldr	r1, [r7, #8]
 8007420:	69b8      	ldr	r0, [r7, #24]
 8007422:	f000 fef5 	bl	8008210 <xQueueReceiveFromISR>
 8007426:	4603      	mov	r3, r0
 8007428:	2b01      	cmp	r3, #1
 800742a:	d003      	beq.n	8007434 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800742c:	f06f 0302 	mvn.w	r3, #2
 8007430:	61fb      	str	r3, [r7, #28]
 8007432:	e027      	b.n	8007484 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d024      	beq.n	8007484 <osMessageQueueGet+0xac>
 800743a:	4b15      	ldr	r3, [pc, #84]	@ (8007490 <osMessageQueueGet+0xb8>)
 800743c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007440:	601a      	str	r2, [r3, #0]
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	e01b      	b.n	8007484 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <osMessageQueueGet+0x80>
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d103      	bne.n	8007460 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007458:	f06f 0303 	mvn.w	r3, #3
 800745c:	61fb      	str	r3, [r7, #28]
 800745e:	e011      	b.n	8007484 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007460:	683a      	ldr	r2, [r7, #0]
 8007462:	68b9      	ldr	r1, [r7, #8]
 8007464:	69b8      	ldr	r0, [r7, #24]
 8007466:	f000 fce1 	bl	8007e2c <xQueueReceive>
 800746a:	4603      	mov	r3, r0
 800746c:	2b01      	cmp	r3, #1
 800746e:	d009      	beq.n	8007484 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007476:	f06f 0301 	mvn.w	r3, #1
 800747a:	61fb      	str	r3, [r7, #28]
 800747c:	e002      	b.n	8007484 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800747e:	f06f 0302 	mvn.w	r3, #2
 8007482:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007484:	69fb      	ldr	r3, [r7, #28]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3720      	adds	r7, #32
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	e000ed04 	.word	0xe000ed04

08007494 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	4a07      	ldr	r2, [pc, #28]	@ (80074c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80074a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	4a06      	ldr	r2, [pc, #24]	@ (80074c4 <vApplicationGetIdleTaskMemory+0x30>)
 80074aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2280      	movs	r2, #128	@ 0x80
 80074b0:	601a      	str	r2, [r3, #0]
}
 80074b2:	bf00      	nop
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	20000570 	.word	0x20000570
 80074c4:	20000618 	.word	0x20000618

080074c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	4a07      	ldr	r2, [pc, #28]	@ (80074f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80074d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	4a06      	ldr	r2, [pc, #24]	@ (80074f8 <vApplicationGetTimerTaskMemory+0x30>)
 80074de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074e6:	601a      	str	r2, [r3, #0]
}
 80074e8:	bf00      	nop
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	20000818 	.word	0x20000818
 80074f8:	200008c0 	.word	0x200008c0

080074fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f103 0208 	add.w	r2, r3, #8
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f04f 32ff 	mov.w	r2, #4294967295
 8007514:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f103 0208 	add.w	r2, r3, #8
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f103 0208 	add.w	r2, r3, #8
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800754a:	bf00      	nop
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007556:	b480      	push	{r7}
 8007558:	b085      	sub	sp, #20
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	1c5a      	adds	r2, r3, #1
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	601a      	str	r2, [r3, #0]
}
 8007592:	bf00      	nop
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800759e:	b480      	push	{r7}
 80075a0:	b085      	sub	sp, #20
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b4:	d103      	bne.n	80075be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	60fb      	str	r3, [r7, #12]
 80075bc:	e00c      	b.n	80075d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	3308      	adds	r3, #8
 80075c2:	60fb      	str	r3, [r7, #12]
 80075c4:	e002      	b.n	80075cc <vListInsert+0x2e>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d2f6      	bcs.n	80075c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	683a      	ldr	r2, [r7, #0]
 80075e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	1c5a      	adds	r2, r3, #1
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	601a      	str	r2, [r3, #0]
}
 8007604:	bf00      	nop
 8007606:	3714      	adds	r7, #20
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	6892      	ldr	r2, [r2, #8]
 8007626:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	6852      	ldr	r2, [r2, #4]
 8007630:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	429a      	cmp	r2, r3
 800763a:	d103      	bne.n	8007644 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	689a      	ldr	r2, [r3, #8]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	1e5a      	subs	r2, r3, #1
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10b      	bne.n	8007690 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800768a:	bf00      	nop
 800768c:	bf00      	nop
 800768e:	e7fd      	b.n	800768c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007690:	f002 fcda 	bl	800a048 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800769c:	68f9      	ldr	r1, [r7, #12]
 800769e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80076a0:	fb01 f303 	mul.w	r3, r1, r3
 80076a4:	441a      	add	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076c0:	3b01      	subs	r3, #1
 80076c2:	68f9      	ldr	r1, [r7, #12]
 80076c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80076c6:	fb01 f303 	mul.w	r3, r1, r3
 80076ca:	441a      	add	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	22ff      	movs	r2, #255	@ 0xff
 80076d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	22ff      	movs	r2, #255	@ 0xff
 80076dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d114      	bne.n	8007710 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d01a      	beq.n	8007724 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	3310      	adds	r3, #16
 80076f2:	4618      	mov	r0, r3
 80076f4:	f001 fc74 	bl	8008fe0 <xTaskRemoveFromEventList>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d012      	beq.n	8007724 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80076fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007734 <xQueueGenericReset+0xd0>)
 8007700:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007704:	601a      	str	r2, [r3, #0]
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	e009      	b.n	8007724 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	3310      	adds	r3, #16
 8007714:	4618      	mov	r0, r3
 8007716:	f7ff fef1 	bl	80074fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3324      	adds	r3, #36	@ 0x24
 800771e:	4618      	mov	r0, r3
 8007720:	f7ff feec 	bl	80074fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007724:	f002 fcc2 	bl	800a0ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007728:	2301      	movs	r3, #1
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	e000ed04 	.word	0xe000ed04

08007738 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08e      	sub	sp, #56	@ 0x38
 800773c:	af02      	add	r7, sp, #8
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
 8007744:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10b      	bne.n	8007764 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800774c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007750:	f383 8811 	msr	BASEPRI, r3
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800775e:	bf00      	nop
 8007760:	bf00      	nop
 8007762:	e7fd      	b.n	8007760 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10b      	bne.n	8007782 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800776a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800777c:	bf00      	nop
 800777e:	bf00      	nop
 8007780:	e7fd      	b.n	800777e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <xQueueGenericCreateStatic+0x56>
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <xQueueGenericCreateStatic+0x5a>
 800778e:	2301      	movs	r3, #1
 8007790:	e000      	b.n	8007794 <xQueueGenericCreateStatic+0x5c>
 8007792:	2300      	movs	r3, #0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10b      	bne.n	80077b0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800779c:	f383 8811 	msr	BASEPRI, r3
 80077a0:	f3bf 8f6f 	isb	sy
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	623b      	str	r3, [r7, #32]
}
 80077aa:	bf00      	nop
 80077ac:	bf00      	nop
 80077ae:	e7fd      	b.n	80077ac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d102      	bne.n	80077bc <xQueueGenericCreateStatic+0x84>
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <xQueueGenericCreateStatic+0x88>
 80077bc:	2301      	movs	r3, #1
 80077be:	e000      	b.n	80077c2 <xQueueGenericCreateStatic+0x8a>
 80077c0:	2300      	movs	r3, #0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10b      	bne.n	80077de <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80077c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	61fb      	str	r3, [r7, #28]
}
 80077d8:	bf00      	nop
 80077da:	bf00      	nop
 80077dc:	e7fd      	b.n	80077da <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80077de:	2350      	movs	r3, #80	@ 0x50
 80077e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2b50      	cmp	r3, #80	@ 0x50
 80077e6:	d00b      	beq.n	8007800 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80077e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	61bb      	str	r3, [r7, #24]
}
 80077fa:	bf00      	nop
 80077fc:	bf00      	nop
 80077fe:	e7fd      	b.n	80077fc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007800:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00d      	beq.n	8007828 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800780c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007814:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	4613      	mov	r3, r2
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	68b9      	ldr	r1, [r7, #8]
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 f840 	bl	80078a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800782a:	4618      	mov	r0, r3
 800782c:	3730      	adds	r7, #48	@ 0x30
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007832:	b580      	push	{r7, lr}
 8007834:	b08a      	sub	sp, #40	@ 0x28
 8007836:	af02      	add	r7, sp, #8
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	4613      	mov	r3, r2
 800783e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10b      	bne.n	800785e <xQueueGenericCreate+0x2c>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	613b      	str	r3, [r7, #16]
}
 8007858:	bf00      	nop
 800785a:	bf00      	nop
 800785c:	e7fd      	b.n	800785a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	fb02 f303 	mul.w	r3, r2, r3
 8007866:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	3350      	adds	r3, #80	@ 0x50
 800786c:	4618      	mov	r0, r3
 800786e:	f002 fd0d 	bl	800a28c <pvPortMalloc>
 8007872:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d011      	beq.n	800789e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	3350      	adds	r3, #80	@ 0x50
 8007882:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800788c:	79fa      	ldrb	r2, [r7, #7]
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	4613      	mov	r3, r2
 8007894:	697a      	ldr	r2, [r7, #20]
 8007896:	68b9      	ldr	r1, [r7, #8]
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 f805 	bl	80078a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800789e:	69bb      	ldr	r3, [r7, #24]
	}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3720      	adds	r7, #32
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
 80078b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d103      	bne.n	80078c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	e002      	b.n	80078ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80078d6:	2101      	movs	r1, #1
 80078d8:	69b8      	ldr	r0, [r7, #24]
 80078da:	f7ff fec3 	bl	8007664 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	78fa      	ldrb	r2, [r7, #3]
 80078e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80078e6:	bf00      	nop
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b08a      	sub	sp, #40	@ 0x28
 80078f2:	af02      	add	r7, sp, #8
 80078f4:	60f8      	str	r0, [r7, #12]
 80078f6:	60b9      	str	r1, [r7, #8]
 80078f8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10b      	bne.n	8007918 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	61bb      	str	r3, [r7, #24]
}
 8007912:	bf00      	nop
 8007914:	bf00      	nop
 8007916:	e7fd      	b.n	8007914 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	429a      	cmp	r2, r3
 800791e:	d90b      	bls.n	8007938 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	617b      	str	r3, [r7, #20]
}
 8007932:	bf00      	nop
 8007934:	bf00      	nop
 8007936:	e7fd      	b.n	8007934 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007938:	2302      	movs	r3, #2
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	2100      	movs	r1, #0
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f7ff fef8 	bl	8007738 <xQueueGenericCreateStatic>
 8007948:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d002      	beq.n	8007956 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007956:	69fb      	ldr	r3, [r7, #28]
	}
 8007958:	4618      	mov	r0, r3
 800795a:	3720      	adds	r7, #32
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10b      	bne.n	8007988 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	613b      	str	r3, [r7, #16]
}
 8007982:	bf00      	nop
 8007984:	bf00      	nop
 8007986:	e7fd      	b.n	8007984 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	429a      	cmp	r2, r3
 800798e:	d90b      	bls.n	80079a8 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8007990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	60fb      	str	r3, [r7, #12]
}
 80079a2:	bf00      	nop
 80079a4:	bf00      	nop
 80079a6:	e7fd      	b.n	80079a4 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80079a8:	2202      	movs	r2, #2
 80079aa:	2100      	movs	r1, #0
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7ff ff40 	bl	8007832 <xQueueGenericCreate>
 80079b2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d002      	beq.n	80079c0 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	683a      	ldr	r2, [r7, #0]
 80079be:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80079c0:	697b      	ldr	r3, [r7, #20]
	}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
	...

080079cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b08e      	sub	sp, #56	@ 0x38
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
 80079d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80079da:	2300      	movs	r3, #0
 80079dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80079e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10b      	bne.n	8007a00 <xQueueGenericSend+0x34>
	__asm volatile
 80079e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ec:	f383 8811 	msr	BASEPRI, r3
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80079fa:	bf00      	nop
 80079fc:	bf00      	nop
 80079fe:	e7fd      	b.n	80079fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d103      	bne.n	8007a0e <xQueueGenericSend+0x42>
 8007a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <xQueueGenericSend+0x46>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e000      	b.n	8007a14 <xQueueGenericSend+0x48>
 8007a12:	2300      	movs	r3, #0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10b      	bne.n	8007a30 <xQueueGenericSend+0x64>
	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a2a:	bf00      	nop
 8007a2c:	bf00      	nop
 8007a2e:	e7fd      	b.n	8007a2c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d103      	bne.n	8007a3e <xQueueGenericSend+0x72>
 8007a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d101      	bne.n	8007a42 <xQueueGenericSend+0x76>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e000      	b.n	8007a44 <xQueueGenericSend+0x78>
 8007a42:	2300      	movs	r3, #0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10b      	bne.n	8007a60 <xQueueGenericSend+0x94>
	__asm volatile
 8007a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	623b      	str	r3, [r7, #32]
}
 8007a5a:	bf00      	nop
 8007a5c:	bf00      	nop
 8007a5e:	e7fd      	b.n	8007a5c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a60:	f001 fc84 	bl	800936c <xTaskGetSchedulerState>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d102      	bne.n	8007a70 <xQueueGenericSend+0xa4>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <xQueueGenericSend+0xa8>
 8007a70:	2301      	movs	r3, #1
 8007a72:	e000      	b.n	8007a76 <xQueueGenericSend+0xaa>
 8007a74:	2300      	movs	r3, #0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10b      	bne.n	8007a92 <xQueueGenericSend+0xc6>
	__asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	61fb      	str	r3, [r7, #28]
}
 8007a8c:	bf00      	nop
 8007a8e:	bf00      	nop
 8007a90:	e7fd      	b.n	8007a8e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a92:	f002 fad9 	bl	800a048 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d302      	bcc.n	8007aa8 <xQueueGenericSend+0xdc>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d129      	bne.n	8007afc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007aa8:	683a      	ldr	r2, [r7, #0]
 8007aaa:	68b9      	ldr	r1, [r7, #8]
 8007aac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007aae:	f000 fc6d 	bl	800838c <prvCopyDataToQueue>
 8007ab2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d010      	beq.n	8007ade <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007abe:	3324      	adds	r3, #36	@ 0x24
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f001 fa8d 	bl	8008fe0 <xTaskRemoveFromEventList>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d013      	beq.n	8007af4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007acc:	4b3f      	ldr	r3, [pc, #252]	@ (8007bcc <xQueueGenericSend+0x200>)
 8007ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	e00a      	b.n	8007af4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d007      	beq.n	8007af4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ae4:	4b39      	ldr	r3, [pc, #228]	@ (8007bcc <xQueueGenericSend+0x200>)
 8007ae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aea:	601a      	str	r2, [r3, #0]
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007af4:	f002 fada 	bl	800a0ac <vPortExitCritical>
				return pdPASS;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e063      	b.n	8007bc4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d103      	bne.n	8007b0a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b02:	f002 fad3 	bl	800a0ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b06:	2300      	movs	r3, #0
 8007b08:	e05c      	b.n	8007bc4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d106      	bne.n	8007b1e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b10:	f107 0314 	add.w	r3, r7, #20
 8007b14:	4618      	mov	r0, r3
 8007b16:	f001 fac7 	bl	80090a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b1e:	f002 fac5 	bl	800a0ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b22:	f001 f82f 	bl	8008b84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b26:	f002 fa8f 	bl	800a048 <vPortEnterCritical>
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b30:	b25b      	sxtb	r3, r3
 8007b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b36:	d103      	bne.n	8007b40 <xQueueGenericSend+0x174>
 8007b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b46:	b25b      	sxtb	r3, r3
 8007b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4c:	d103      	bne.n	8007b56 <xQueueGenericSend+0x18a>
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b56:	f002 faa9 	bl	800a0ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b5a:	1d3a      	adds	r2, r7, #4
 8007b5c:	f107 0314 	add.w	r3, r7, #20
 8007b60:	4611      	mov	r1, r2
 8007b62:	4618      	mov	r0, r3
 8007b64:	f001 fab6 	bl	80090d4 <xTaskCheckForTimeOut>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d124      	bne.n	8007bb8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b70:	f000 fd04 	bl	800857c <prvIsQueueFull>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d018      	beq.n	8007bac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7c:	3310      	adds	r3, #16
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	4611      	mov	r1, r2
 8007b82:	4618      	mov	r0, r3
 8007b84:	f001 f9da 	bl	8008f3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007b88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b8a:	f000 fc8f 	bl	80084ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007b8e:	f001 f807 	bl	8008ba0 <xTaskResumeAll>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f47f af7c 	bne.w	8007a92 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8007bcc <xQueueGenericSend+0x200>)
 8007b9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ba0:	601a      	str	r2, [r3, #0]
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	e772      	b.n	8007a92 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007bac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bae:	f000 fc7d 	bl	80084ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bb2:	f000 fff5 	bl	8008ba0 <xTaskResumeAll>
 8007bb6:	e76c      	b.n	8007a92 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007bb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bba:	f000 fc77 	bl	80084ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bbe:	f000 ffef 	bl	8008ba0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007bc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3738      	adds	r7, #56	@ 0x38
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	e000ed04 	.word	0xe000ed04

08007bd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b090      	sub	sp, #64	@ 0x40
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
 8007bdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10b      	bne.n	8007c00 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007bfa:	bf00      	nop
 8007bfc:	bf00      	nop
 8007bfe:	e7fd      	b.n	8007bfc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d103      	bne.n	8007c0e <xQueueGenericSendFromISR+0x3e>
 8007c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d101      	bne.n	8007c12 <xQueueGenericSendFromISR+0x42>
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e000      	b.n	8007c14 <xQueueGenericSendFromISR+0x44>
 8007c12:	2300      	movs	r3, #0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10b      	bne.n	8007c30 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c1c:	f383 8811 	msr	BASEPRI, r3
 8007c20:	f3bf 8f6f 	isb	sy
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c2a:	bf00      	nop
 8007c2c:	bf00      	nop
 8007c2e:	e7fd      	b.n	8007c2c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d103      	bne.n	8007c3e <xQueueGenericSendFromISR+0x6e>
 8007c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d101      	bne.n	8007c42 <xQueueGenericSendFromISR+0x72>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e000      	b.n	8007c44 <xQueueGenericSendFromISR+0x74>
 8007c42:	2300      	movs	r3, #0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10b      	bne.n	8007c60 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c4c:	f383 8811 	msr	BASEPRI, r3
 8007c50:	f3bf 8f6f 	isb	sy
 8007c54:	f3bf 8f4f 	dsb	sy
 8007c58:	623b      	str	r3, [r7, #32]
}
 8007c5a:	bf00      	nop
 8007c5c:	bf00      	nop
 8007c5e:	e7fd      	b.n	8007c5c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c60:	f002 fad2 	bl	800a208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007c64:	f3ef 8211 	mrs	r2, BASEPRI
 8007c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	61fa      	str	r2, [r7, #28]
 8007c7a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007c7c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c7e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d302      	bcc.n	8007c92 <xQueueGenericSendFromISR+0xc2>
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d12f      	bne.n	8007cf2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ca2:	683a      	ldr	r2, [r7, #0]
 8007ca4:	68b9      	ldr	r1, [r7, #8]
 8007ca6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007ca8:	f000 fb70 	bl	800838c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007cac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb4:	d112      	bne.n	8007cdc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d016      	beq.n	8007cec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc0:	3324      	adds	r3, #36	@ 0x24
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f001 f98c 	bl	8008fe0 <xTaskRemoveFromEventList>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00e      	beq.n	8007cec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00b      	beq.n	8007cec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	601a      	str	r2, [r3, #0]
 8007cda:	e007      	b.n	8007cec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007cdc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	b25a      	sxtb	r2, r3
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007cec:	2301      	movs	r3, #1
 8007cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007cf0:	e001      	b.n	8007cf6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cf8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3740      	adds	r7, #64	@ 0x40
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b08e      	sub	sp, #56	@ 0x38
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10b      	bne.n	8007d38 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	623b      	str	r3, [r7, #32]
}
 8007d32:	bf00      	nop
 8007d34:	bf00      	nop
 8007d36:	e7fd      	b.n	8007d34 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00b      	beq.n	8007d58 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	61fb      	str	r3, [r7, #28]
}
 8007d52:	bf00      	nop
 8007d54:	bf00      	nop
 8007d56:	e7fd      	b.n	8007d54 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d103      	bne.n	8007d68 <xQueueGiveFromISR+0x5c>
 8007d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <xQueueGiveFromISR+0x60>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e000      	b.n	8007d6e <xQueueGiveFromISR+0x62>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10b      	bne.n	8007d8a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8007d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	61bb      	str	r3, [r7, #24]
}
 8007d84:	bf00      	nop
 8007d86:	bf00      	nop
 8007d88:	e7fd      	b.n	8007d86 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d8a:	f002 fa3d 	bl	800a208 <vPortValidateInterruptPriority>
	__asm volatile
 8007d8e:	f3ef 8211 	mrs	r2, BASEPRI
 8007d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	617a      	str	r2, [r7, #20]
 8007da4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007da6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007db4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d22b      	bcs.n	8007e12 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dbc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007dc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc6:	1c5a      	adds	r2, r3, #1
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007dcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd4:	d112      	bne.n	8007dfc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d016      	beq.n	8007e0c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de0:	3324      	adds	r3, #36	@ 0x24
 8007de2:	4618      	mov	r0, r3
 8007de4:	f001 f8fc 	bl	8008fe0 <xTaskRemoveFromEventList>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00e      	beq.n	8007e0c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00b      	beq.n	8007e0c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	2201      	movs	r2, #1
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	e007      	b.n	8007e0c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e00:	3301      	adds	r3, #1
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	b25a      	sxtb	r2, r3
 8007e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e10:	e001      	b.n	8007e16 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e12:	2300      	movs	r3, #0
 8007e14:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e18:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f383 8811 	msr	BASEPRI, r3
}
 8007e20:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3738      	adds	r7, #56	@ 0x38
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08c      	sub	sp, #48	@ 0x30
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d10b      	bne.n	8007e5e <xQueueReceive+0x32>
	__asm volatile
 8007e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	623b      	str	r3, [r7, #32]
}
 8007e58:	bf00      	nop
 8007e5a:	bf00      	nop
 8007e5c:	e7fd      	b.n	8007e5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d103      	bne.n	8007e6c <xQueueReceive+0x40>
 8007e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d101      	bne.n	8007e70 <xQueueReceive+0x44>
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e000      	b.n	8007e72 <xQueueReceive+0x46>
 8007e70:	2300      	movs	r3, #0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10b      	bne.n	8007e8e <xQueueReceive+0x62>
	__asm volatile
 8007e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e7a:	f383 8811 	msr	BASEPRI, r3
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	61fb      	str	r3, [r7, #28]
}
 8007e88:	bf00      	nop
 8007e8a:	bf00      	nop
 8007e8c:	e7fd      	b.n	8007e8a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e8e:	f001 fa6d 	bl	800936c <xTaskGetSchedulerState>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d102      	bne.n	8007e9e <xQueueReceive+0x72>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <xQueueReceive+0x76>
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e000      	b.n	8007ea4 <xQueueReceive+0x78>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10b      	bne.n	8007ec0 <xQueueReceive+0x94>
	__asm volatile
 8007ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	61bb      	str	r3, [r7, #24]
}
 8007eba:	bf00      	nop
 8007ebc:	bf00      	nop
 8007ebe:	e7fd      	b.n	8007ebc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ec0:	f002 f8c2 	bl	800a048 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ec8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d01f      	beq.n	8007f10 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ed0:	68b9      	ldr	r1, [r7, #8]
 8007ed2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ed4:	f000 fac4 	bl	8008460 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eda:	1e5a      	subs	r2, r3, #1
 8007edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ede:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00f      	beq.n	8007f08 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eea:	3310      	adds	r3, #16
 8007eec:	4618      	mov	r0, r3
 8007eee:	f001 f877 	bl	8008fe0 <xTaskRemoveFromEventList>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d007      	beq.n	8007f08 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ef8:	4b3c      	ldr	r3, [pc, #240]	@ (8007fec <xQueueReceive+0x1c0>)
 8007efa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007efe:	601a      	str	r2, [r3, #0]
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f08:	f002 f8d0 	bl	800a0ac <vPortExitCritical>
				return pdPASS;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e069      	b.n	8007fe4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d103      	bne.n	8007f1e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f16:	f002 f8c9 	bl	800a0ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	e062      	b.n	8007fe4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d106      	bne.n	8007f32 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f24:	f107 0310 	add.w	r3, r7, #16
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f001 f8bd 	bl	80090a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f32:	f002 f8bb 	bl	800a0ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f36:	f000 fe25 	bl	8008b84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f3a:	f002 f885 	bl	800a048 <vPortEnterCritical>
 8007f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f44:	b25b      	sxtb	r3, r3
 8007f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4a:	d103      	bne.n	8007f54 <xQueueReceive+0x128>
 8007f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f5a:	b25b      	sxtb	r3, r3
 8007f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f60:	d103      	bne.n	8007f6a <xQueueReceive+0x13e>
 8007f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f6a:	f002 f89f 	bl	800a0ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f6e:	1d3a      	adds	r2, r7, #4
 8007f70:	f107 0310 	add.w	r3, r7, #16
 8007f74:	4611      	mov	r1, r2
 8007f76:	4618      	mov	r0, r3
 8007f78:	f001 f8ac 	bl	80090d4 <xTaskCheckForTimeOut>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d123      	bne.n	8007fca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f84:	f000 fae4 	bl	8008550 <prvIsQueueEmpty>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d017      	beq.n	8007fbe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f90:	3324      	adds	r3, #36	@ 0x24
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	4611      	mov	r1, r2
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 ffd0 	bl	8008f3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f9e:	f000 fa85 	bl	80084ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007fa2:	f000 fdfd 	bl	8008ba0 <xTaskResumeAll>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d189      	bne.n	8007ec0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007fac:	4b0f      	ldr	r3, [pc, #60]	@ (8007fec <xQueueReceive+0x1c0>)
 8007fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	f3bf 8f4f 	dsb	sy
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	e780      	b.n	8007ec0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007fbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fc0:	f000 fa74 	bl	80084ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fc4:	f000 fdec 	bl	8008ba0 <xTaskResumeAll>
 8007fc8:	e77a      	b.n	8007ec0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007fca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fcc:	f000 fa6e 	bl	80084ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fd0:	f000 fde6 	bl	8008ba0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fd6:	f000 fabb 	bl	8008550 <prvIsQueueEmpty>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f43f af6f 	beq.w	8007ec0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007fe2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3730      	adds	r7, #48	@ 0x30
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	e000ed04 	.word	0xe000ed04

08007ff0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b08e      	sub	sp, #56	@ 0x38
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008002:	2300      	movs	r3, #0
 8008004:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10b      	bne.n	8008024 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800800c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008010:	f383 8811 	msr	BASEPRI, r3
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	623b      	str	r3, [r7, #32]
}
 800801e:	bf00      	nop
 8008020:	bf00      	nop
 8008022:	e7fd      	b.n	8008020 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00b      	beq.n	8008044 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	61fb      	str	r3, [r7, #28]
}
 800803e:	bf00      	nop
 8008040:	bf00      	nop
 8008042:	e7fd      	b.n	8008040 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008044:	f001 f992 	bl	800936c <xTaskGetSchedulerState>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d102      	bne.n	8008054 <xQueueSemaphoreTake+0x64>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d101      	bne.n	8008058 <xQueueSemaphoreTake+0x68>
 8008054:	2301      	movs	r3, #1
 8008056:	e000      	b.n	800805a <xQueueSemaphoreTake+0x6a>
 8008058:	2300      	movs	r3, #0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d10b      	bne.n	8008076 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800805e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008062:	f383 8811 	msr	BASEPRI, r3
 8008066:	f3bf 8f6f 	isb	sy
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	61bb      	str	r3, [r7, #24]
}
 8008070:	bf00      	nop
 8008072:	bf00      	nop
 8008074:	e7fd      	b.n	8008072 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008076:	f001 ffe7 	bl	800a048 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800807a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800807e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008082:	2b00      	cmp	r3, #0
 8008084:	d024      	beq.n	80080d0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008088:	1e5a      	subs	r2, r3, #1
 800808a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800808c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800808e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d104      	bne.n	80080a0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008096:	f001 fae3 	bl	8009660 <pvTaskIncrementMutexHeldCount>
 800809a:	4602      	mov	r2, r0
 800809c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800809e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00f      	beq.n	80080c8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080aa:	3310      	adds	r3, #16
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 ff97 	bl	8008fe0 <xTaskRemoveFromEventList>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d007      	beq.n	80080c8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80080b8:	4b54      	ldr	r3, [pc, #336]	@ (800820c <xQueueSemaphoreTake+0x21c>)
 80080ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080be:	601a      	str	r2, [r3, #0]
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080c8:	f001 fff0 	bl	800a0ac <vPortExitCritical>
				return pdPASS;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e098      	b.n	8008202 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d112      	bne.n	80080fc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80080d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00b      	beq.n	80080f4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80080dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e0:	f383 8811 	msr	BASEPRI, r3
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	617b      	str	r3, [r7, #20]
}
 80080ee:	bf00      	nop
 80080f0:	bf00      	nop
 80080f2:	e7fd      	b.n	80080f0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80080f4:	f001 ffda 	bl	800a0ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080f8:	2300      	movs	r3, #0
 80080fa:	e082      	b.n	8008202 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d106      	bne.n	8008110 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008102:	f107 030c 	add.w	r3, r7, #12
 8008106:	4618      	mov	r0, r3
 8008108:	f000 ffce 	bl	80090a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800810c:	2301      	movs	r3, #1
 800810e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008110:	f001 ffcc 	bl	800a0ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008114:	f000 fd36 	bl	8008b84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008118:	f001 ff96 	bl	800a048 <vPortEnterCritical>
 800811c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800811e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008122:	b25b      	sxtb	r3, r3
 8008124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008128:	d103      	bne.n	8008132 <xQueueSemaphoreTake+0x142>
 800812a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008134:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008138:	b25b      	sxtb	r3, r3
 800813a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813e:	d103      	bne.n	8008148 <xQueueSemaphoreTake+0x158>
 8008140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008142:	2200      	movs	r2, #0
 8008144:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008148:	f001 ffb0 	bl	800a0ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800814c:	463a      	mov	r2, r7
 800814e:	f107 030c 	add.w	r3, r7, #12
 8008152:	4611      	mov	r1, r2
 8008154:	4618      	mov	r0, r3
 8008156:	f000 ffbd 	bl	80090d4 <xTaskCheckForTimeOut>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d132      	bne.n	80081c6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008160:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008162:	f000 f9f5 	bl	8008550 <prvIsQueueEmpty>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d026      	beq.n	80081ba <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800816c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d109      	bne.n	8008188 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008174:	f001 ff68 	bl	800a048 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	4618      	mov	r0, r3
 800817e:	f001 f913 	bl	80093a8 <xTaskPriorityInherit>
 8008182:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008184:	f001 ff92 	bl	800a0ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800818a:	3324      	adds	r3, #36	@ 0x24
 800818c:	683a      	ldr	r2, [r7, #0]
 800818e:	4611      	mov	r1, r2
 8008190:	4618      	mov	r0, r3
 8008192:	f000 fed3 	bl	8008f3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008196:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008198:	f000 f988 	bl	80084ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800819c:	f000 fd00 	bl	8008ba0 <xTaskResumeAll>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f47f af67 	bne.w	8008076 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80081a8:	4b18      	ldr	r3, [pc, #96]	@ (800820c <xQueueSemaphoreTake+0x21c>)
 80081aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081ae:	601a      	str	r2, [r3, #0]
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	e75d      	b.n	8008076 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80081ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081bc:	f000 f976 	bl	80084ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081c0:	f000 fcee 	bl	8008ba0 <xTaskResumeAll>
 80081c4:	e757      	b.n	8008076 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80081c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081c8:	f000 f970 	bl	80084ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081cc:	f000 fce8 	bl	8008ba0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081d2:	f000 f9bd 	bl	8008550 <prvIsQueueEmpty>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f43f af4c 	beq.w	8008076 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80081de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00d      	beq.n	8008200 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80081e4:	f001 ff30 	bl	800a048 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80081e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081ea:	f000 f8b7 	bl	800835c <prvGetDisinheritPriorityAfterTimeout>
 80081ee:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80081f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80081f6:	4618      	mov	r0, r3
 80081f8:	f001 f9ae 	bl	8009558 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80081fc:	f001 ff56 	bl	800a0ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008200:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008202:	4618      	mov	r0, r3
 8008204:	3738      	adds	r7, #56	@ 0x38
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	e000ed04 	.word	0xe000ed04

08008210 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b08e      	sub	sp, #56	@ 0x38
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10b      	bne.n	800823e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	623b      	str	r3, [r7, #32]
}
 8008238:	bf00      	nop
 800823a:	bf00      	nop
 800823c:	e7fd      	b.n	800823a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d103      	bne.n	800824c <xQueueReceiveFromISR+0x3c>
 8008244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008248:	2b00      	cmp	r3, #0
 800824a:	d101      	bne.n	8008250 <xQueueReceiveFromISR+0x40>
 800824c:	2301      	movs	r3, #1
 800824e:	e000      	b.n	8008252 <xQueueReceiveFromISR+0x42>
 8008250:	2300      	movs	r3, #0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10b      	bne.n	800826e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800825a:	f383 8811 	msr	BASEPRI, r3
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	f3bf 8f4f 	dsb	sy
 8008266:	61fb      	str	r3, [r7, #28]
}
 8008268:	bf00      	nop
 800826a:	bf00      	nop
 800826c:	e7fd      	b.n	800826a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800826e:	f001 ffcb 	bl	800a208 <vPortValidateInterruptPriority>
	__asm volatile
 8008272:	f3ef 8211 	mrs	r2, BASEPRI
 8008276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800827a:	f383 8811 	msr	BASEPRI, r3
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	f3bf 8f4f 	dsb	sy
 8008286:	61ba      	str	r2, [r7, #24]
 8008288:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800828a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800828c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800828e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008292:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008296:	2b00      	cmp	r3, #0
 8008298:	d02f      	beq.n	80082fa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800829a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800829c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082a4:	68b9      	ldr	r1, [r7, #8]
 80082a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082a8:	f000 f8da 	bl	8008460 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ae:	1e5a      	subs	r2, r3, #1
 80082b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80082b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80082b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082bc:	d112      	bne.n	80082e4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d016      	beq.n	80082f4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c8:	3310      	adds	r3, #16
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 fe88 	bl	8008fe0 <xTaskRemoveFromEventList>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00e      	beq.n	80082f4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00b      	beq.n	80082f4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	e007      	b.n	80082f4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80082e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082e8:	3301      	adds	r3, #1
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	b25a      	sxtb	r2, r3
 80082ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80082f4:	2301      	movs	r3, #1
 80082f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80082f8:	e001      	b.n	80082fe <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80082fa:	2300      	movs	r3, #0
 80082fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80082fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008300:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f383 8811 	msr	BASEPRI, r3
}
 8008308:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800830a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800830c:	4618      	mov	r0, r3
 800830e:	3738      	adds	r7, #56	@ 0x38
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10b      	bne.n	800833e <vQueueDelete+0x2a>
	__asm volatile
 8008326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	60bb      	str	r3, [r7, #8]
}
 8008338:	bf00      	nop
 800833a:	bf00      	nop
 800833c:	e7fd      	b.n	800833a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f000 f95e 	bl	8008600 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800834a:	2b00      	cmp	r3, #0
 800834c:	d102      	bne.n	8008354 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f002 f86a 	bl	800a428 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008354:	bf00      	nop
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008368:	2b00      	cmp	r3, #0
 800836a:	d006      	beq.n	800837a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008376:	60fb      	str	r3, [r7, #12]
 8008378:	e001      	b.n	800837e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800837a:	2300      	movs	r3, #0
 800837c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800837e:	68fb      	ldr	r3, [r7, #12]
	}
 8008380:	4618      	mov	r0, r3
 8008382:	3714      	adds	r7, #20
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008398:	2300      	movs	r3, #0
 800839a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d10d      	bne.n	80083c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d14d      	bne.n	800844e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f001 f85e 	bl	8009478 <xTaskPriorityDisinherit>
 80083bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	609a      	str	r2, [r3, #8]
 80083c4:	e043      	b.n	800844e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d119      	bne.n	8008400 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6858      	ldr	r0, [r3, #4]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d4:	461a      	mov	r2, r3
 80083d6:	68b9      	ldr	r1, [r7, #8]
 80083d8:	f002 f9f0 	bl	800a7bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e4:	441a      	add	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	685a      	ldr	r2, [r3, #4]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d32b      	bcc.n	800844e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	605a      	str	r2, [r3, #4]
 80083fe:	e026      	b.n	800844e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	68d8      	ldr	r0, [r3, #12]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008408:	461a      	mov	r2, r3
 800840a:	68b9      	ldr	r1, [r7, #8]
 800840c:	f002 f9d6 	bl	800a7bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	68da      	ldr	r2, [r3, #12]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008418:	425b      	negs	r3, r3
 800841a:	441a      	add	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	68da      	ldr	r2, [r3, #12]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	429a      	cmp	r2, r3
 800842a:	d207      	bcs.n	800843c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	689a      	ldr	r2, [r3, #8]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008434:	425b      	negs	r3, r3
 8008436:	441a      	add	r2, r3
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2b02      	cmp	r3, #2
 8008440:	d105      	bne.n	800844e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	3b01      	subs	r3, #1
 800844c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	1c5a      	adds	r2, r3, #1
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008456:	697b      	ldr	r3, [r7, #20]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3718      	adds	r7, #24
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800846e:	2b00      	cmp	r3, #0
 8008470:	d018      	beq.n	80084a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	68da      	ldr	r2, [r3, #12]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800847a:	441a      	add	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	68da      	ldr	r2, [r3, #12]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	429a      	cmp	r2, r3
 800848a:	d303      	bcc.n	8008494 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	68d9      	ldr	r1, [r3, #12]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800849c:	461a      	mov	r2, r3
 800849e:	6838      	ldr	r0, [r7, #0]
 80084a0:	f002 f98c 	bl	800a7bc <memcpy>
	}
}
 80084a4:	bf00      	nop
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084b4:	f001 fdc8 	bl	800a048 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084c0:	e011      	b.n	80084e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d012      	beq.n	80084f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	3324      	adds	r3, #36	@ 0x24
 80084ce:	4618      	mov	r0, r3
 80084d0:	f000 fd86 	bl	8008fe0 <xTaskRemoveFromEventList>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80084da:	f000 fe5f 	bl	800919c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80084de:	7bfb      	ldrb	r3, [r7, #15]
 80084e0:	3b01      	subs	r3, #1
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	dce9      	bgt.n	80084c2 <prvUnlockQueue+0x16>
 80084ee:	e000      	b.n	80084f2 <prvUnlockQueue+0x46>
					break;
 80084f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	22ff      	movs	r2, #255	@ 0xff
 80084f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80084fa:	f001 fdd7 	bl	800a0ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80084fe:	f001 fda3 	bl	800a048 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008508:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800850a:	e011      	b.n	8008530 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d012      	beq.n	800853a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	3310      	adds	r3, #16
 8008518:	4618      	mov	r0, r3
 800851a:	f000 fd61 	bl	8008fe0 <xTaskRemoveFromEventList>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d001      	beq.n	8008528 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008524:	f000 fe3a 	bl	800919c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008528:	7bbb      	ldrb	r3, [r7, #14]
 800852a:	3b01      	subs	r3, #1
 800852c:	b2db      	uxtb	r3, r3
 800852e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008530:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008534:	2b00      	cmp	r3, #0
 8008536:	dce9      	bgt.n	800850c <prvUnlockQueue+0x60>
 8008538:	e000      	b.n	800853c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800853a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	22ff      	movs	r2, #255	@ 0xff
 8008540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008544:	f001 fdb2 	bl	800a0ac <vPortExitCritical>
}
 8008548:	bf00      	nop
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008558:	f001 fd76 	bl	800a048 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008560:	2b00      	cmp	r3, #0
 8008562:	d102      	bne.n	800856a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008564:	2301      	movs	r3, #1
 8008566:	60fb      	str	r3, [r7, #12]
 8008568:	e001      	b.n	800856e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800856a:	2300      	movs	r3, #0
 800856c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800856e:	f001 fd9d 	bl	800a0ac <vPortExitCritical>

	return xReturn;
 8008572:	68fb      	ldr	r3, [r7, #12]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008584:	f001 fd60 	bl	800a048 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008590:	429a      	cmp	r2, r3
 8008592:	d102      	bne.n	800859a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008594:	2301      	movs	r3, #1
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	e001      	b.n	800859e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800859a:	2300      	movs	r3, #0
 800859c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800859e:	f001 fd85 	bl	800a0ac <vPortExitCritical>

	return xReturn;
 80085a2:	68fb      	ldr	r3, [r7, #12]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085b6:	2300      	movs	r3, #0
 80085b8:	60fb      	str	r3, [r7, #12]
 80085ba:	e014      	b.n	80085e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80085bc:	4a0f      	ldr	r2, [pc, #60]	@ (80085fc <vQueueAddToRegistry+0x50>)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10b      	bne.n	80085e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80085c8:	490c      	ldr	r1, [pc, #48]	@ (80085fc <vQueueAddToRegistry+0x50>)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	683a      	ldr	r2, [r7, #0]
 80085ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80085d2:	4a0a      	ldr	r2, [pc, #40]	@ (80085fc <vQueueAddToRegistry+0x50>)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	00db      	lsls	r3, r3, #3
 80085d8:	4413      	add	r3, r2
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80085de:	e006      	b.n	80085ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	3301      	adds	r3, #1
 80085e4:	60fb      	str	r3, [r7, #12]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2b07      	cmp	r3, #7
 80085ea:	d9e7      	bls.n	80085bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80085ec:	bf00      	nop
 80085ee:	bf00      	nop
 80085f0:	3714      	adds	r7, #20
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	20000cc0 	.word	0x20000cc0

08008600 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008608:	2300      	movs	r3, #0
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	e016      	b.n	800863c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800860e:	4a10      	ldr	r2, [pc, #64]	@ (8008650 <vQueueUnregisterQueue+0x50>)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	4413      	add	r3, r2
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	429a      	cmp	r2, r3
 800861c:	d10b      	bne.n	8008636 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800861e:	4a0c      	ldr	r2, [pc, #48]	@ (8008650 <vQueueUnregisterQueue+0x50>)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2100      	movs	r1, #0
 8008624:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008628:	4a09      	ldr	r2, [pc, #36]	@ (8008650 <vQueueUnregisterQueue+0x50>)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	00db      	lsls	r3, r3, #3
 800862e:	4413      	add	r3, r2
 8008630:	2200      	movs	r2, #0
 8008632:	605a      	str	r2, [r3, #4]
				break;
 8008634:	e006      	b.n	8008644 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	3301      	adds	r3, #1
 800863a:	60fb      	str	r3, [r7, #12]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2b07      	cmp	r3, #7
 8008640:	d9e5      	bls.n	800860e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008642:	bf00      	nop
 8008644:	bf00      	nop
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	20000cc0 	.word	0x20000cc0

08008654 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008664:	f001 fcf0 	bl	800a048 <vPortEnterCritical>
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800866e:	b25b      	sxtb	r3, r3
 8008670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008674:	d103      	bne.n	800867e <vQueueWaitForMessageRestricted+0x2a>
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008684:	b25b      	sxtb	r3, r3
 8008686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800868a:	d103      	bne.n	8008694 <vQueueWaitForMessageRestricted+0x40>
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008694:	f001 fd0a 	bl	800a0ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800869c:	2b00      	cmp	r3, #0
 800869e:	d106      	bne.n	80086ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	3324      	adds	r3, #36	@ 0x24
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	68b9      	ldr	r1, [r7, #8]
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 fc6d 	bl	8008f88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80086ae:	6978      	ldr	r0, [r7, #20]
 80086b0:	f7ff fefc 	bl	80084ac <prvUnlockQueue>
	}
 80086b4:	bf00      	nop
 80086b6:	3718      	adds	r7, #24
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b08e      	sub	sp, #56	@ 0x38
 80086c0:	af04      	add	r7, sp, #16
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
 80086c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80086ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10b      	bne.n	80086e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	623b      	str	r3, [r7, #32]
}
 80086e2:	bf00      	nop
 80086e4:	bf00      	nop
 80086e6:	e7fd      	b.n	80086e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80086e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10b      	bne.n	8008706 <xTaskCreateStatic+0x4a>
	__asm volatile
 80086ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	61fb      	str	r3, [r7, #28]
}
 8008700:	bf00      	nop
 8008702:	bf00      	nop
 8008704:	e7fd      	b.n	8008702 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008706:	23a8      	movs	r3, #168	@ 0xa8
 8008708:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	2ba8      	cmp	r3, #168	@ 0xa8
 800870e:	d00b      	beq.n	8008728 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	61bb      	str	r3, [r7, #24]
}
 8008722:	bf00      	nop
 8008724:	bf00      	nop
 8008726:	e7fd      	b.n	8008724 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008728:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800872a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872c:	2b00      	cmp	r3, #0
 800872e:	d01e      	beq.n	800876e <xTaskCreateStatic+0xb2>
 8008730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008732:	2b00      	cmp	r3, #0
 8008734:	d01b      	beq.n	800876e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008738:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800873a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800873e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008742:	2202      	movs	r2, #2
 8008744:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008748:	2300      	movs	r3, #0
 800874a:	9303      	str	r3, [sp, #12]
 800874c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800874e:	9302      	str	r3, [sp, #8]
 8008750:	f107 0314 	add.w	r3, r7, #20
 8008754:	9301      	str	r3, [sp, #4]
 8008756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	68b9      	ldr	r1, [r7, #8]
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f000 f851 	bl	8008808 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008766:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008768:	f000 f8f6 	bl	8008958 <prvAddNewTaskToReadyList>
 800876c:	e001      	b.n	8008772 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800876e:	2300      	movs	r3, #0
 8008770:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008772:	697b      	ldr	r3, [r7, #20]
	}
 8008774:	4618      	mov	r0, r3
 8008776:	3728      	adds	r7, #40	@ 0x28
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800877c:	b580      	push	{r7, lr}
 800877e:	b08c      	sub	sp, #48	@ 0x30
 8008780:	af04      	add	r7, sp, #16
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	603b      	str	r3, [r7, #0]
 8008788:	4613      	mov	r3, r2
 800878a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800878c:	88fb      	ldrh	r3, [r7, #6]
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4618      	mov	r0, r3
 8008792:	f001 fd7b 	bl	800a28c <pvPortMalloc>
 8008796:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00e      	beq.n	80087bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800879e:	20a8      	movs	r0, #168	@ 0xa8
 80087a0:	f001 fd74 	bl	800a28c <pvPortMalloc>
 80087a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80087b2:	e005      	b.n	80087c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80087b4:	6978      	ldr	r0, [r7, #20]
 80087b6:	f001 fe37 	bl	800a428 <vPortFree>
 80087ba:	e001      	b.n	80087c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80087bc:	2300      	movs	r3, #0
 80087be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d017      	beq.n	80087f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087ce:	88fa      	ldrh	r2, [r7, #6]
 80087d0:	2300      	movs	r3, #0
 80087d2:	9303      	str	r3, [sp, #12]
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	9302      	str	r3, [sp, #8]
 80087d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087da:	9301      	str	r3, [sp, #4]
 80087dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	68b9      	ldr	r1, [r7, #8]
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f000 f80f 	bl	8008808 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087ea:	69f8      	ldr	r0, [r7, #28]
 80087ec:	f000 f8b4 	bl	8008958 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087f0:	2301      	movs	r3, #1
 80087f2:	61bb      	str	r3, [r7, #24]
 80087f4:	e002      	b.n	80087fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087f6:	f04f 33ff 	mov.w	r3, #4294967295
 80087fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087fc:	69bb      	ldr	r3, [r7, #24]
	}
 80087fe:	4618      	mov	r0, r3
 8008800:	3720      	adds	r7, #32
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
	...

08008808 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b088      	sub	sp, #32
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
 8008814:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008818:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	461a      	mov	r2, r3
 8008820:	21a5      	movs	r1, #165	@ 0xa5
 8008822:	f001 ff41 	bl	800a6a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008828:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008830:	3b01      	subs	r3, #1
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	4413      	add	r3, r2
 8008836:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	f023 0307 	bic.w	r3, r3, #7
 800883e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	f003 0307 	and.w	r3, r3, #7
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00b      	beq.n	8008862 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800884a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884e:	f383 8811 	msr	BASEPRI, r3
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	617b      	str	r3, [r7, #20]
}
 800885c:	bf00      	nop
 800885e:	bf00      	nop
 8008860:	e7fd      	b.n	800885e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d01f      	beq.n	80088a8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008868:	2300      	movs	r3, #0
 800886a:	61fb      	str	r3, [r7, #28]
 800886c:	e012      	b.n	8008894 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	4413      	add	r3, r2
 8008874:	7819      	ldrb	r1, [r3, #0]
 8008876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	4413      	add	r3, r2
 800887c:	3334      	adds	r3, #52	@ 0x34
 800887e:	460a      	mov	r2, r1
 8008880:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	4413      	add	r3, r2
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d006      	beq.n	800889c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	3301      	adds	r3, #1
 8008892:	61fb      	str	r3, [r7, #28]
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	2b0f      	cmp	r3, #15
 8008898:	d9e9      	bls.n	800886e <prvInitialiseNewTask+0x66>
 800889a:	e000      	b.n	800889e <prvInitialiseNewTask+0x96>
			{
				break;
 800889c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800889e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80088a6:	e003      	b.n	80088b0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80088a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80088b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b2:	2b37      	cmp	r3, #55	@ 0x37
 80088b4:	d901      	bls.n	80088ba <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80088b6:	2337      	movs	r3, #55	@ 0x37
 80088b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80088ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088be:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80088c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088c4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80088c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c8:	2200      	movs	r2, #0
 80088ca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ce:	3304      	adds	r3, #4
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fe fe33 	bl	800753c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	3318      	adds	r3, #24
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fe fe2e 	bl	800753c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80088ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088f4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f8:	2200      	movs	r2, #0
 80088fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008900:	2200      	movs	r2, #0
 8008902:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008908:	3354      	adds	r3, #84	@ 0x54
 800890a:	224c      	movs	r2, #76	@ 0x4c
 800890c:	2100      	movs	r1, #0
 800890e:	4618      	mov	r0, r3
 8008910:	f001 feca 	bl	800a6a8 <memset>
 8008914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008916:	4a0d      	ldr	r2, [pc, #52]	@ (800894c <prvInitialiseNewTask+0x144>)
 8008918:	659a      	str	r2, [r3, #88]	@ 0x58
 800891a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891c:	4a0c      	ldr	r2, [pc, #48]	@ (8008950 <prvInitialiseNewTask+0x148>)
 800891e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008922:	4a0c      	ldr	r2, [pc, #48]	@ (8008954 <prvInitialiseNewTask+0x14c>)
 8008924:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008926:	683a      	ldr	r2, [r7, #0]
 8008928:	68f9      	ldr	r1, [r7, #12]
 800892a:	69b8      	ldr	r0, [r7, #24]
 800892c:	f001 fa5a 	bl	8009de4 <pxPortInitialiseStack>
 8008930:	4602      	mov	r2, r0
 8008932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008934:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800893c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800893e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008940:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008942:	bf00      	nop
 8008944:	3720      	adds	r7, #32
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	20001f0c 	.word	0x20001f0c
 8008950:	20001f74 	.word	0x20001f74
 8008954:	20001fdc 	.word	0x20001fdc

08008958 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008960:	f001 fb72 	bl	800a048 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008964:	4b2d      	ldr	r3, [pc, #180]	@ (8008a1c <prvAddNewTaskToReadyList+0xc4>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	3301      	adds	r3, #1
 800896a:	4a2c      	ldr	r2, [pc, #176]	@ (8008a1c <prvAddNewTaskToReadyList+0xc4>)
 800896c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800896e:	4b2c      	ldr	r3, [pc, #176]	@ (8008a20 <prvAddNewTaskToReadyList+0xc8>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d109      	bne.n	800898a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008976:	4a2a      	ldr	r2, [pc, #168]	@ (8008a20 <prvAddNewTaskToReadyList+0xc8>)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800897c:	4b27      	ldr	r3, [pc, #156]	@ (8008a1c <prvAddNewTaskToReadyList+0xc4>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d110      	bne.n	80089a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008984:	f000 fc2e 	bl	80091e4 <prvInitialiseTaskLists>
 8008988:	e00d      	b.n	80089a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800898a:	4b26      	ldr	r3, [pc, #152]	@ (8008a24 <prvAddNewTaskToReadyList+0xcc>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d109      	bne.n	80089a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008992:	4b23      	ldr	r3, [pc, #140]	@ (8008a20 <prvAddNewTaskToReadyList+0xc8>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800899c:	429a      	cmp	r2, r3
 800899e:	d802      	bhi.n	80089a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80089a0:	4a1f      	ldr	r2, [pc, #124]	@ (8008a20 <prvAddNewTaskToReadyList+0xc8>)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80089a6:	4b20      	ldr	r3, [pc, #128]	@ (8008a28 <prvAddNewTaskToReadyList+0xd0>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	3301      	adds	r3, #1
 80089ac:	4a1e      	ldr	r2, [pc, #120]	@ (8008a28 <prvAddNewTaskToReadyList+0xd0>)
 80089ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80089b0:	4b1d      	ldr	r3, [pc, #116]	@ (8008a28 <prvAddNewTaskToReadyList+0xd0>)
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089bc:	4b1b      	ldr	r3, [pc, #108]	@ (8008a2c <prvAddNewTaskToReadyList+0xd4>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d903      	bls.n	80089cc <prvAddNewTaskToReadyList+0x74>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c8:	4a18      	ldr	r2, [pc, #96]	@ (8008a2c <prvAddNewTaskToReadyList+0xd4>)
 80089ca:	6013      	str	r3, [r2, #0]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089d0:	4613      	mov	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4a15      	ldr	r2, [pc, #84]	@ (8008a30 <prvAddNewTaskToReadyList+0xd8>)
 80089da:	441a      	add	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	3304      	adds	r3, #4
 80089e0:	4619      	mov	r1, r3
 80089e2:	4610      	mov	r0, r2
 80089e4:	f7fe fdb7 	bl	8007556 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089e8:	f001 fb60 	bl	800a0ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008a24 <prvAddNewTaskToReadyList+0xcc>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00e      	beq.n	8008a12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008a20 <prvAddNewTaskToReadyList+0xc8>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d207      	bcs.n	8008a12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a02:	4b0c      	ldr	r3, [pc, #48]	@ (8008a34 <prvAddNewTaskToReadyList+0xdc>)
 8008a04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a12:	bf00      	nop
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	200011d4 	.word	0x200011d4
 8008a20:	20000d00 	.word	0x20000d00
 8008a24:	200011e0 	.word	0x200011e0
 8008a28:	200011f0 	.word	0x200011f0
 8008a2c:	200011dc 	.word	0x200011dc
 8008a30:	20000d04 	.word	0x20000d04
 8008a34:	e000ed04 	.word	0xe000ed04

08008a38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a40:	2300      	movs	r3, #0
 8008a42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d018      	beq.n	8008a7c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a4a:	4b14      	ldr	r3, [pc, #80]	@ (8008a9c <vTaskDelay+0x64>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00b      	beq.n	8008a6a <vTaskDelay+0x32>
	__asm volatile
 8008a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a56:	f383 8811 	msr	BASEPRI, r3
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	60bb      	str	r3, [r7, #8]
}
 8008a64:	bf00      	nop
 8008a66:	bf00      	nop
 8008a68:	e7fd      	b.n	8008a66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a6a:	f000 f88b 	bl	8008b84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a6e:	2100      	movs	r1, #0
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 fe09 	bl	8009688 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a76:	f000 f893 	bl	8008ba0 <xTaskResumeAll>
 8008a7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d107      	bne.n	8008a92 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008a82:	4b07      	ldr	r3, [pc, #28]	@ (8008aa0 <vTaskDelay+0x68>)
 8008a84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a88:	601a      	str	r2, [r3, #0]
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a92:	bf00      	nop
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	200011fc 	.word	0x200011fc
 8008aa0:	e000ed04 	.word	0xe000ed04

08008aa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b08a      	sub	sp, #40	@ 0x28
 8008aa8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ab2:	463a      	mov	r2, r7
 8008ab4:	1d39      	adds	r1, r7, #4
 8008ab6:	f107 0308 	add.w	r3, r7, #8
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fe fcea 	bl	8007494 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ac0:	6839      	ldr	r1, [r7, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	9202      	str	r2, [sp, #8]
 8008ac8:	9301      	str	r3, [sp, #4]
 8008aca:	2300      	movs	r3, #0
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	2300      	movs	r3, #0
 8008ad0:	460a      	mov	r2, r1
 8008ad2:	4924      	ldr	r1, [pc, #144]	@ (8008b64 <vTaskStartScheduler+0xc0>)
 8008ad4:	4824      	ldr	r0, [pc, #144]	@ (8008b68 <vTaskStartScheduler+0xc4>)
 8008ad6:	f7ff fdf1 	bl	80086bc <xTaskCreateStatic>
 8008ada:	4603      	mov	r3, r0
 8008adc:	4a23      	ldr	r2, [pc, #140]	@ (8008b6c <vTaskStartScheduler+0xc8>)
 8008ade:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ae0:	4b22      	ldr	r3, [pc, #136]	@ (8008b6c <vTaskStartScheduler+0xc8>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d002      	beq.n	8008aee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	617b      	str	r3, [r7, #20]
 8008aec:	e001      	b.n	8008af2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008aee:	2300      	movs	r3, #0
 8008af0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d102      	bne.n	8008afe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008af8:	f000 fe1a 	bl	8009730 <xTimerCreateTimerTask>
 8008afc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d11b      	bne.n	8008b3c <vTaskStartScheduler+0x98>
	__asm volatile
 8008b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b08:	f383 8811 	msr	BASEPRI, r3
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	613b      	str	r3, [r7, #16]
}
 8008b16:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008b18:	4b15      	ldr	r3, [pc, #84]	@ (8008b70 <vTaskStartScheduler+0xcc>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	3354      	adds	r3, #84	@ 0x54
 8008b1e:	4a15      	ldr	r2, [pc, #84]	@ (8008b74 <vTaskStartScheduler+0xd0>)
 8008b20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008b22:	4b15      	ldr	r3, [pc, #84]	@ (8008b78 <vTaskStartScheduler+0xd4>)
 8008b24:	f04f 32ff 	mov.w	r2, #4294967295
 8008b28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008b2a:	4b14      	ldr	r3, [pc, #80]	@ (8008b7c <vTaskStartScheduler+0xd8>)
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008b30:	4b13      	ldr	r3, [pc, #76]	@ (8008b80 <vTaskStartScheduler+0xdc>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008b36:	f001 f9e3 	bl	8009f00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b3a:	e00f      	b.n	8008b5c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b42:	d10b      	bne.n	8008b5c <vTaskStartScheduler+0xb8>
	__asm volatile
 8008b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	60fb      	str	r3, [r7, #12]
}
 8008b56:	bf00      	nop
 8008b58:	bf00      	nop
 8008b5a:	e7fd      	b.n	8008b58 <vTaskStartScheduler+0xb4>
}
 8008b5c:	bf00      	nop
 8008b5e:	3718      	adds	r7, #24
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	0800b0cc 	.word	0x0800b0cc
 8008b68:	080091b5 	.word	0x080091b5
 8008b6c:	200011f8 	.word	0x200011f8
 8008b70:	20000d00 	.word	0x20000d00
 8008b74:	20000014 	.word	0x20000014
 8008b78:	200011f4 	.word	0x200011f4
 8008b7c:	200011e0 	.word	0x200011e0
 8008b80:	200011d8 	.word	0x200011d8

08008b84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b84:	b480      	push	{r7}
 8008b86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008b88:	4b04      	ldr	r3, [pc, #16]	@ (8008b9c <vTaskSuspendAll+0x18>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	4a03      	ldr	r2, [pc, #12]	@ (8008b9c <vTaskSuspendAll+0x18>)
 8008b90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008b92:	bf00      	nop
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr
 8008b9c:	200011fc 	.word	0x200011fc

08008ba0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008baa:	2300      	movs	r3, #0
 8008bac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008bae:	4b42      	ldr	r3, [pc, #264]	@ (8008cb8 <xTaskResumeAll+0x118>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10b      	bne.n	8008bce <xTaskResumeAll+0x2e>
	__asm volatile
 8008bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bba:	f383 8811 	msr	BASEPRI, r3
 8008bbe:	f3bf 8f6f 	isb	sy
 8008bc2:	f3bf 8f4f 	dsb	sy
 8008bc6:	603b      	str	r3, [r7, #0]
}
 8008bc8:	bf00      	nop
 8008bca:	bf00      	nop
 8008bcc:	e7fd      	b.n	8008bca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008bce:	f001 fa3b 	bl	800a048 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008bd2:	4b39      	ldr	r3, [pc, #228]	@ (8008cb8 <xTaskResumeAll+0x118>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	4a37      	ldr	r2, [pc, #220]	@ (8008cb8 <xTaskResumeAll+0x118>)
 8008bda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bdc:	4b36      	ldr	r3, [pc, #216]	@ (8008cb8 <xTaskResumeAll+0x118>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d162      	bne.n	8008caa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008be4:	4b35      	ldr	r3, [pc, #212]	@ (8008cbc <xTaskResumeAll+0x11c>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d05e      	beq.n	8008caa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bec:	e02f      	b.n	8008c4e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bee:	4b34      	ldr	r3, [pc, #208]	@ (8008cc0 <xTaskResumeAll+0x120>)
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	3318      	adds	r3, #24
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fe fd08 	bl	8007610 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	3304      	adds	r3, #4
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7fe fd03 	bl	8007610 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8008cc4 <xTaskResumeAll+0x124>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d903      	bls.n	8008c1e <xTaskResumeAll+0x7e>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c1a:	4a2a      	ldr	r2, [pc, #168]	@ (8008cc4 <xTaskResumeAll+0x124>)
 8008c1c:	6013      	str	r3, [r2, #0]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c22:	4613      	mov	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	4a27      	ldr	r2, [pc, #156]	@ (8008cc8 <xTaskResumeAll+0x128>)
 8008c2c:	441a      	add	r2, r3
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	3304      	adds	r3, #4
 8008c32:	4619      	mov	r1, r3
 8008c34:	4610      	mov	r0, r2
 8008c36:	f7fe fc8e 	bl	8007556 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c3e:	4b23      	ldr	r3, [pc, #140]	@ (8008ccc <xTaskResumeAll+0x12c>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d302      	bcc.n	8008c4e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008c48:	4b21      	ldr	r3, [pc, #132]	@ (8008cd0 <xTaskResumeAll+0x130>)
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8008cc0 <xTaskResumeAll+0x120>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1cb      	bne.n	8008bee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d001      	beq.n	8008c60 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c5c:	f000 fb66 	bl	800932c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008c60:	4b1c      	ldr	r3, [pc, #112]	@ (8008cd4 <xTaskResumeAll+0x134>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d010      	beq.n	8008c8e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c6c:	f000 f846 	bl	8008cfc <xTaskIncrementTick>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d002      	beq.n	8008c7c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008c76:	4b16      	ldr	r3, [pc, #88]	@ (8008cd0 <xTaskResumeAll+0x130>)
 8008c78:	2201      	movs	r2, #1
 8008c7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1f1      	bne.n	8008c6c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008c88:	4b12      	ldr	r3, [pc, #72]	@ (8008cd4 <xTaskResumeAll+0x134>)
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c8e:	4b10      	ldr	r3, [pc, #64]	@ (8008cd0 <xTaskResumeAll+0x130>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d009      	beq.n	8008caa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c96:	2301      	movs	r3, #1
 8008c98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8008cd8 <xTaskResumeAll+0x138>)
 8008c9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ca0:	601a      	str	r2, [r3, #0]
 8008ca2:	f3bf 8f4f 	dsb	sy
 8008ca6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008caa:	f001 f9ff 	bl	800a0ac <vPortExitCritical>

	return xAlreadyYielded;
 8008cae:	68bb      	ldr	r3, [r7, #8]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	200011fc 	.word	0x200011fc
 8008cbc:	200011d4 	.word	0x200011d4
 8008cc0:	20001194 	.word	0x20001194
 8008cc4:	200011dc 	.word	0x200011dc
 8008cc8:	20000d04 	.word	0x20000d04
 8008ccc:	20000d00 	.word	0x20000d00
 8008cd0:	200011e8 	.word	0x200011e8
 8008cd4:	200011e4 	.word	0x200011e4
 8008cd8:	e000ed04 	.word	0xe000ed04

08008cdc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ce2:	4b05      	ldr	r3, [pc, #20]	@ (8008cf8 <xTaskGetTickCount+0x1c>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ce8:	687b      	ldr	r3, [r7, #4]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	370c      	adds	r7, #12
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	200011d8 	.word	0x200011d8

08008cfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008d02:	2300      	movs	r3, #0
 8008d04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d06:	4b4f      	ldr	r3, [pc, #316]	@ (8008e44 <xTaskIncrementTick+0x148>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f040 8090 	bne.w	8008e30 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d10:	4b4d      	ldr	r3, [pc, #308]	@ (8008e48 <xTaskIncrementTick+0x14c>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	3301      	adds	r3, #1
 8008d16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008d18:	4a4b      	ldr	r2, [pc, #300]	@ (8008e48 <xTaskIncrementTick+0x14c>)
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d121      	bne.n	8008d68 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d24:	4b49      	ldr	r3, [pc, #292]	@ (8008e4c <xTaskIncrementTick+0x150>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00b      	beq.n	8008d46 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d32:	f383 8811 	msr	BASEPRI, r3
 8008d36:	f3bf 8f6f 	isb	sy
 8008d3a:	f3bf 8f4f 	dsb	sy
 8008d3e:	603b      	str	r3, [r7, #0]
}
 8008d40:	bf00      	nop
 8008d42:	bf00      	nop
 8008d44:	e7fd      	b.n	8008d42 <xTaskIncrementTick+0x46>
 8008d46:	4b41      	ldr	r3, [pc, #260]	@ (8008e4c <xTaskIncrementTick+0x150>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	60fb      	str	r3, [r7, #12]
 8008d4c:	4b40      	ldr	r3, [pc, #256]	@ (8008e50 <xTaskIncrementTick+0x154>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a3e      	ldr	r2, [pc, #248]	@ (8008e4c <xTaskIncrementTick+0x150>)
 8008d52:	6013      	str	r3, [r2, #0]
 8008d54:	4a3e      	ldr	r2, [pc, #248]	@ (8008e50 <xTaskIncrementTick+0x154>)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6013      	str	r3, [r2, #0]
 8008d5a:	4b3e      	ldr	r3, [pc, #248]	@ (8008e54 <xTaskIncrementTick+0x158>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	4a3c      	ldr	r2, [pc, #240]	@ (8008e54 <xTaskIncrementTick+0x158>)
 8008d62:	6013      	str	r3, [r2, #0]
 8008d64:	f000 fae2 	bl	800932c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d68:	4b3b      	ldr	r3, [pc, #236]	@ (8008e58 <xTaskIncrementTick+0x15c>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d349      	bcc.n	8008e06 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d72:	4b36      	ldr	r3, [pc, #216]	@ (8008e4c <xTaskIncrementTick+0x150>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d104      	bne.n	8008d86 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d7c:	4b36      	ldr	r3, [pc, #216]	@ (8008e58 <xTaskIncrementTick+0x15c>)
 8008d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d82:	601a      	str	r2, [r3, #0]
					break;
 8008d84:	e03f      	b.n	8008e06 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d86:	4b31      	ldr	r3, [pc, #196]	@ (8008e4c <xTaskIncrementTick+0x150>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d96:	693a      	ldr	r2, [r7, #16]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d203      	bcs.n	8008da6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d9e:	4a2e      	ldr	r2, [pc, #184]	@ (8008e58 <xTaskIncrementTick+0x15c>)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008da4:	e02f      	b.n	8008e06 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	3304      	adds	r3, #4
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fe fc30 	bl	8007610 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d004      	beq.n	8008dc2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	3318      	adds	r3, #24
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7fe fc27 	bl	8007610 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dc6:	4b25      	ldr	r3, [pc, #148]	@ (8008e5c <xTaskIncrementTick+0x160>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d903      	bls.n	8008dd6 <xTaskIncrementTick+0xda>
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd2:	4a22      	ldr	r2, [pc, #136]	@ (8008e5c <xTaskIncrementTick+0x160>)
 8008dd4:	6013      	str	r3, [r2, #0]
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dda:	4613      	mov	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4a1f      	ldr	r2, [pc, #124]	@ (8008e60 <xTaskIncrementTick+0x164>)
 8008de4:	441a      	add	r2, r3
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	3304      	adds	r3, #4
 8008dea:	4619      	mov	r1, r3
 8008dec:	4610      	mov	r0, r2
 8008dee:	f7fe fbb2 	bl	8007556 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008df6:	4b1b      	ldr	r3, [pc, #108]	@ (8008e64 <xTaskIncrementTick+0x168>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d3b8      	bcc.n	8008d72 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008e00:	2301      	movs	r3, #1
 8008e02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e04:	e7b5      	b.n	8008d72 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e06:	4b17      	ldr	r3, [pc, #92]	@ (8008e64 <xTaskIncrementTick+0x168>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e0c:	4914      	ldr	r1, [pc, #80]	@ (8008e60 <xTaskIncrementTick+0x164>)
 8008e0e:	4613      	mov	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4413      	add	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	440b      	add	r3, r1
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d901      	bls.n	8008e22 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008e22:	4b11      	ldr	r3, [pc, #68]	@ (8008e68 <xTaskIncrementTick+0x16c>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d007      	beq.n	8008e3a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	617b      	str	r3, [r7, #20]
 8008e2e:	e004      	b.n	8008e3a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008e30:	4b0e      	ldr	r3, [pc, #56]	@ (8008e6c <xTaskIncrementTick+0x170>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	3301      	adds	r3, #1
 8008e36:	4a0d      	ldr	r2, [pc, #52]	@ (8008e6c <xTaskIncrementTick+0x170>)
 8008e38:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008e3a:	697b      	ldr	r3, [r7, #20]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3718      	adds	r7, #24
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	200011fc 	.word	0x200011fc
 8008e48:	200011d8 	.word	0x200011d8
 8008e4c:	2000118c 	.word	0x2000118c
 8008e50:	20001190 	.word	0x20001190
 8008e54:	200011ec 	.word	0x200011ec
 8008e58:	200011f4 	.word	0x200011f4
 8008e5c:	200011dc 	.word	0x200011dc
 8008e60:	20000d04 	.word	0x20000d04
 8008e64:	20000d00 	.word	0x20000d00
 8008e68:	200011e8 	.word	0x200011e8
 8008e6c:	200011e4 	.word	0x200011e4

08008e70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e76:	4b2b      	ldr	r3, [pc, #172]	@ (8008f24 <vTaskSwitchContext+0xb4>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d003      	beq.n	8008e86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8008f28 <vTaskSwitchContext+0xb8>)
 8008e80:	2201      	movs	r2, #1
 8008e82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e84:	e047      	b.n	8008f16 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008e86:	4b28      	ldr	r3, [pc, #160]	@ (8008f28 <vTaskSwitchContext+0xb8>)
 8008e88:	2200      	movs	r2, #0
 8008e8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e8c:	4b27      	ldr	r3, [pc, #156]	@ (8008f2c <vTaskSwitchContext+0xbc>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	60fb      	str	r3, [r7, #12]
 8008e92:	e011      	b.n	8008eb8 <vTaskSwitchContext+0x48>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10b      	bne.n	8008eb2 <vTaskSwitchContext+0x42>
	__asm volatile
 8008e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e9e:	f383 8811 	msr	BASEPRI, r3
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	607b      	str	r3, [r7, #4]
}
 8008eac:	bf00      	nop
 8008eae:	bf00      	nop
 8008eb0:	e7fd      	b.n	8008eae <vTaskSwitchContext+0x3e>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	60fb      	str	r3, [r7, #12]
 8008eb8:	491d      	ldr	r1, [pc, #116]	@ (8008f30 <vTaskSwitchContext+0xc0>)
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4413      	add	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	440b      	add	r3, r1
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d0e3      	beq.n	8008e94 <vTaskSwitchContext+0x24>
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	4613      	mov	r3, r2
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	4413      	add	r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4a16      	ldr	r2, [pc, #88]	@ (8008f30 <vTaskSwitchContext+0xc0>)
 8008ed8:	4413      	add	r3, r2
 8008eda:	60bb      	str	r3, [r7, #8]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	685a      	ldr	r2, [r3, #4]
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	605a      	str	r2, [r3, #4]
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	685a      	ldr	r2, [r3, #4]
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	3308      	adds	r3, #8
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d104      	bne.n	8008efc <vTaskSwitchContext+0x8c>
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	685a      	ldr	r2, [r3, #4]
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	605a      	str	r2, [r3, #4]
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	4a0c      	ldr	r2, [pc, #48]	@ (8008f34 <vTaskSwitchContext+0xc4>)
 8008f04:	6013      	str	r3, [r2, #0]
 8008f06:	4a09      	ldr	r2, [pc, #36]	@ (8008f2c <vTaskSwitchContext+0xbc>)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f0c:	4b09      	ldr	r3, [pc, #36]	@ (8008f34 <vTaskSwitchContext+0xc4>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	3354      	adds	r3, #84	@ 0x54
 8008f12:	4a09      	ldr	r2, [pc, #36]	@ (8008f38 <vTaskSwitchContext+0xc8>)
 8008f14:	6013      	str	r3, [r2, #0]
}
 8008f16:	bf00      	nop
 8008f18:	3714      	adds	r7, #20
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	200011fc 	.word	0x200011fc
 8008f28:	200011e8 	.word	0x200011e8
 8008f2c:	200011dc 	.word	0x200011dc
 8008f30:	20000d04 	.word	0x20000d04
 8008f34:	20000d00 	.word	0x20000d00
 8008f38:	20000014 	.word	0x20000014

08008f3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10b      	bne.n	8008f64 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	60fb      	str	r3, [r7, #12]
}
 8008f5e:	bf00      	nop
 8008f60:	bf00      	nop
 8008f62:	e7fd      	b.n	8008f60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f64:	4b07      	ldr	r3, [pc, #28]	@ (8008f84 <vTaskPlaceOnEventList+0x48>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	3318      	adds	r3, #24
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f7fe fb16 	bl	800759e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f72:	2101      	movs	r1, #1
 8008f74:	6838      	ldr	r0, [r7, #0]
 8008f76:	f000 fb87 	bl	8009688 <prvAddCurrentTaskToDelayedList>
}
 8008f7a:	bf00      	nop
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	20000d00 	.word	0x20000d00

08008f88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b086      	sub	sp, #24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10b      	bne.n	8008fb2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	617b      	str	r3, [r7, #20]
}
 8008fac:	bf00      	nop
 8008fae:	bf00      	nop
 8008fb0:	e7fd      	b.n	8008fae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8008fdc <vTaskPlaceOnEventListRestricted+0x54>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3318      	adds	r3, #24
 8008fb8:	4619      	mov	r1, r3
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f7fe facb 	bl	8007556 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d002      	beq.n	8008fcc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8008fca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008fcc:	6879      	ldr	r1, [r7, #4]
 8008fce:	68b8      	ldr	r0, [r7, #8]
 8008fd0:	f000 fb5a 	bl	8009688 <prvAddCurrentTaskToDelayedList>
	}
 8008fd4:	bf00      	nop
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	20000d00 	.word	0x20000d00

08008fe0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b086      	sub	sp, #24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d10b      	bne.n	800900e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ffa:	f383 8811 	msr	BASEPRI, r3
 8008ffe:	f3bf 8f6f 	isb	sy
 8009002:	f3bf 8f4f 	dsb	sy
 8009006:	60fb      	str	r3, [r7, #12]
}
 8009008:	bf00      	nop
 800900a:	bf00      	nop
 800900c:	e7fd      	b.n	800900a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	3318      	adds	r3, #24
 8009012:	4618      	mov	r0, r3
 8009014:	f7fe fafc 	bl	8007610 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009018:	4b1d      	ldr	r3, [pc, #116]	@ (8009090 <xTaskRemoveFromEventList+0xb0>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d11d      	bne.n	800905c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	3304      	adds	r3, #4
 8009024:	4618      	mov	r0, r3
 8009026:	f7fe faf3 	bl	8007610 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800902e:	4b19      	ldr	r3, [pc, #100]	@ (8009094 <xTaskRemoveFromEventList+0xb4>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	429a      	cmp	r2, r3
 8009034:	d903      	bls.n	800903e <xTaskRemoveFromEventList+0x5e>
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800903a:	4a16      	ldr	r2, [pc, #88]	@ (8009094 <xTaskRemoveFromEventList+0xb4>)
 800903c:	6013      	str	r3, [r2, #0]
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009042:	4613      	mov	r3, r2
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	4413      	add	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4a13      	ldr	r2, [pc, #76]	@ (8009098 <xTaskRemoveFromEventList+0xb8>)
 800904c:	441a      	add	r2, r3
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	3304      	adds	r3, #4
 8009052:	4619      	mov	r1, r3
 8009054:	4610      	mov	r0, r2
 8009056:	f7fe fa7e 	bl	8007556 <vListInsertEnd>
 800905a:	e005      	b.n	8009068 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	3318      	adds	r3, #24
 8009060:	4619      	mov	r1, r3
 8009062:	480e      	ldr	r0, [pc, #56]	@ (800909c <xTaskRemoveFromEventList+0xbc>)
 8009064:	f7fe fa77 	bl	8007556 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800906c:	4b0c      	ldr	r3, [pc, #48]	@ (80090a0 <xTaskRemoveFromEventList+0xc0>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009072:	429a      	cmp	r2, r3
 8009074:	d905      	bls.n	8009082 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009076:	2301      	movs	r3, #1
 8009078:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800907a:	4b0a      	ldr	r3, [pc, #40]	@ (80090a4 <xTaskRemoveFromEventList+0xc4>)
 800907c:	2201      	movs	r2, #1
 800907e:	601a      	str	r2, [r3, #0]
 8009080:	e001      	b.n	8009086 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009082:	2300      	movs	r3, #0
 8009084:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009086:	697b      	ldr	r3, [r7, #20]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3718      	adds	r7, #24
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	200011fc 	.word	0x200011fc
 8009094:	200011dc 	.word	0x200011dc
 8009098:	20000d04 	.word	0x20000d04
 800909c:	20001194 	.word	0x20001194
 80090a0:	20000d00 	.word	0x20000d00
 80090a4:	200011e8 	.word	0x200011e8

080090a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090b0:	4b06      	ldr	r3, [pc, #24]	@ (80090cc <vTaskInternalSetTimeOutState+0x24>)
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80090b8:	4b05      	ldr	r3, [pc, #20]	@ (80090d0 <vTaskInternalSetTimeOutState+0x28>)
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	605a      	str	r2, [r3, #4]
}
 80090c0:	bf00      	nop
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	200011ec 	.word	0x200011ec
 80090d0:	200011d8 	.word	0x200011d8

080090d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b088      	sub	sp, #32
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d10b      	bne.n	80090fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80090e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e8:	f383 8811 	msr	BASEPRI, r3
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	613b      	str	r3, [r7, #16]
}
 80090f6:	bf00      	nop
 80090f8:	bf00      	nop
 80090fa:	e7fd      	b.n	80090f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10b      	bne.n	800911a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009106:	f383 8811 	msr	BASEPRI, r3
 800910a:	f3bf 8f6f 	isb	sy
 800910e:	f3bf 8f4f 	dsb	sy
 8009112:	60fb      	str	r3, [r7, #12]
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop
 8009118:	e7fd      	b.n	8009116 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800911a:	f000 ff95 	bl	800a048 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800911e:	4b1d      	ldr	r3, [pc, #116]	@ (8009194 <xTaskCheckForTimeOut+0xc0>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	69ba      	ldr	r2, [r7, #24]
 800912a:	1ad3      	subs	r3, r2, r3
 800912c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009136:	d102      	bne.n	800913e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009138:	2300      	movs	r3, #0
 800913a:	61fb      	str	r3, [r7, #28]
 800913c:	e023      	b.n	8009186 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	4b15      	ldr	r3, [pc, #84]	@ (8009198 <xTaskCheckForTimeOut+0xc4>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	429a      	cmp	r2, r3
 8009148:	d007      	beq.n	800915a <xTaskCheckForTimeOut+0x86>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	69ba      	ldr	r2, [r7, #24]
 8009150:	429a      	cmp	r2, r3
 8009152:	d302      	bcc.n	800915a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009154:	2301      	movs	r3, #1
 8009156:	61fb      	str	r3, [r7, #28]
 8009158:	e015      	b.n	8009186 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	429a      	cmp	r2, r3
 8009162:	d20b      	bcs.n	800917c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	1ad2      	subs	r2, r2, r3
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7ff ff99 	bl	80090a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009176:	2300      	movs	r3, #0
 8009178:	61fb      	str	r3, [r7, #28]
 800917a:	e004      	b.n	8009186 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	2200      	movs	r2, #0
 8009180:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009182:	2301      	movs	r3, #1
 8009184:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009186:	f000 ff91 	bl	800a0ac <vPortExitCritical>

	return xReturn;
 800918a:	69fb      	ldr	r3, [r7, #28]
}
 800918c:	4618      	mov	r0, r3
 800918e:	3720      	adds	r7, #32
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	200011d8 	.word	0x200011d8
 8009198:	200011ec 	.word	0x200011ec

0800919c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800919c:	b480      	push	{r7}
 800919e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80091a0:	4b03      	ldr	r3, [pc, #12]	@ (80091b0 <vTaskMissedYield+0x14>)
 80091a2:	2201      	movs	r2, #1
 80091a4:	601a      	str	r2, [r3, #0]
}
 80091a6:	bf00      	nop
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr
 80091b0:	200011e8 	.word	0x200011e8

080091b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80091bc:	f000 f852 	bl	8009264 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80091c0:	4b06      	ldr	r3, [pc, #24]	@ (80091dc <prvIdleTask+0x28>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d9f9      	bls.n	80091bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80091c8:	4b05      	ldr	r3, [pc, #20]	@ (80091e0 <prvIdleTask+0x2c>)
 80091ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	f3bf 8f4f 	dsb	sy
 80091d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80091d8:	e7f0      	b.n	80091bc <prvIdleTask+0x8>
 80091da:	bf00      	nop
 80091dc:	20000d04 	.word	0x20000d04
 80091e0:	e000ed04 	.word	0xe000ed04

080091e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091ea:	2300      	movs	r3, #0
 80091ec:	607b      	str	r3, [r7, #4]
 80091ee:	e00c      	b.n	800920a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	4613      	mov	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	4413      	add	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4a12      	ldr	r2, [pc, #72]	@ (8009244 <prvInitialiseTaskLists+0x60>)
 80091fc:	4413      	add	r3, r2
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fe f97c 	bl	80074fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	3301      	adds	r3, #1
 8009208:	607b      	str	r3, [r7, #4]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2b37      	cmp	r3, #55	@ 0x37
 800920e:	d9ef      	bls.n	80091f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009210:	480d      	ldr	r0, [pc, #52]	@ (8009248 <prvInitialiseTaskLists+0x64>)
 8009212:	f7fe f973 	bl	80074fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009216:	480d      	ldr	r0, [pc, #52]	@ (800924c <prvInitialiseTaskLists+0x68>)
 8009218:	f7fe f970 	bl	80074fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800921c:	480c      	ldr	r0, [pc, #48]	@ (8009250 <prvInitialiseTaskLists+0x6c>)
 800921e:	f7fe f96d 	bl	80074fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009222:	480c      	ldr	r0, [pc, #48]	@ (8009254 <prvInitialiseTaskLists+0x70>)
 8009224:	f7fe f96a 	bl	80074fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009228:	480b      	ldr	r0, [pc, #44]	@ (8009258 <prvInitialiseTaskLists+0x74>)
 800922a:	f7fe f967 	bl	80074fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800922e:	4b0b      	ldr	r3, [pc, #44]	@ (800925c <prvInitialiseTaskLists+0x78>)
 8009230:	4a05      	ldr	r2, [pc, #20]	@ (8009248 <prvInitialiseTaskLists+0x64>)
 8009232:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009234:	4b0a      	ldr	r3, [pc, #40]	@ (8009260 <prvInitialiseTaskLists+0x7c>)
 8009236:	4a05      	ldr	r2, [pc, #20]	@ (800924c <prvInitialiseTaskLists+0x68>)
 8009238:	601a      	str	r2, [r3, #0]
}
 800923a:	bf00      	nop
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	20000d04 	.word	0x20000d04
 8009248:	20001164 	.word	0x20001164
 800924c:	20001178 	.word	0x20001178
 8009250:	20001194 	.word	0x20001194
 8009254:	200011a8 	.word	0x200011a8
 8009258:	200011c0 	.word	0x200011c0
 800925c:	2000118c 	.word	0x2000118c
 8009260:	20001190 	.word	0x20001190

08009264 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800926a:	e019      	b.n	80092a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800926c:	f000 feec 	bl	800a048 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009270:	4b10      	ldr	r3, [pc, #64]	@ (80092b4 <prvCheckTasksWaitingTermination+0x50>)
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	3304      	adds	r3, #4
 800927c:	4618      	mov	r0, r3
 800927e:	f7fe f9c7 	bl	8007610 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009282:	4b0d      	ldr	r3, [pc, #52]	@ (80092b8 <prvCheckTasksWaitingTermination+0x54>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3b01      	subs	r3, #1
 8009288:	4a0b      	ldr	r2, [pc, #44]	@ (80092b8 <prvCheckTasksWaitingTermination+0x54>)
 800928a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800928c:	4b0b      	ldr	r3, [pc, #44]	@ (80092bc <prvCheckTasksWaitingTermination+0x58>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	3b01      	subs	r3, #1
 8009292:	4a0a      	ldr	r2, [pc, #40]	@ (80092bc <prvCheckTasksWaitingTermination+0x58>)
 8009294:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009296:	f000 ff09 	bl	800a0ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f810 	bl	80092c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092a0:	4b06      	ldr	r3, [pc, #24]	@ (80092bc <prvCheckTasksWaitingTermination+0x58>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1e1      	bne.n	800926c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80092a8:	bf00      	nop
 80092aa:	bf00      	nop
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	200011a8 	.word	0x200011a8
 80092b8:	200011d4 	.word	0x200011d4
 80092bc:	200011bc 	.word	0x200011bc

080092c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	3354      	adds	r3, #84	@ 0x54
 80092cc:	4618      	mov	r0, r3
 80092ce:	f001 f9f3 	bl	800a6b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d108      	bne.n	80092ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092e0:	4618      	mov	r0, r3
 80092e2:	f001 f8a1 	bl	800a428 <vPortFree>
				vPortFree( pxTCB );
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f001 f89e 	bl	800a428 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80092ec:	e019      	b.n	8009322 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d103      	bne.n	8009300 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f001 f895 	bl	800a428 <vPortFree>
	}
 80092fe:	e010      	b.n	8009322 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009306:	2b02      	cmp	r3, #2
 8009308:	d00b      	beq.n	8009322 <prvDeleteTCB+0x62>
	__asm volatile
 800930a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800930e:	f383 8811 	msr	BASEPRI, r3
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	60fb      	str	r3, [r7, #12]
}
 800931c:	bf00      	nop
 800931e:	bf00      	nop
 8009320:	e7fd      	b.n	800931e <prvDeleteTCB+0x5e>
	}
 8009322:	bf00      	nop
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
	...

0800932c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009332:	4b0c      	ldr	r3, [pc, #48]	@ (8009364 <prvResetNextTaskUnblockTime+0x38>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d104      	bne.n	8009346 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800933c:	4b0a      	ldr	r3, [pc, #40]	@ (8009368 <prvResetNextTaskUnblockTime+0x3c>)
 800933e:	f04f 32ff 	mov.w	r2, #4294967295
 8009342:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009344:	e008      	b.n	8009358 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009346:	4b07      	ldr	r3, [pc, #28]	@ (8009364 <prvResetNextTaskUnblockTime+0x38>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	4a04      	ldr	r2, [pc, #16]	@ (8009368 <prvResetNextTaskUnblockTime+0x3c>)
 8009356:	6013      	str	r3, [r2, #0]
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr
 8009364:	2000118c 	.word	0x2000118c
 8009368:	200011f4 	.word	0x200011f4

0800936c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009372:	4b0b      	ldr	r3, [pc, #44]	@ (80093a0 <xTaskGetSchedulerState+0x34>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d102      	bne.n	8009380 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800937a:	2301      	movs	r3, #1
 800937c:	607b      	str	r3, [r7, #4]
 800937e:	e008      	b.n	8009392 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009380:	4b08      	ldr	r3, [pc, #32]	@ (80093a4 <xTaskGetSchedulerState+0x38>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d102      	bne.n	800938e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009388:	2302      	movs	r3, #2
 800938a:	607b      	str	r3, [r7, #4]
 800938c:	e001      	b.n	8009392 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800938e:	2300      	movs	r3, #0
 8009390:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009392:	687b      	ldr	r3, [r7, #4]
	}
 8009394:	4618      	mov	r0, r3
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	200011e0 	.word	0x200011e0
 80093a4:	200011fc 	.word	0x200011fc

080093a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80093b4:	2300      	movs	r3, #0
 80093b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d051      	beq.n	8009462 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093c2:	4b2a      	ldr	r3, [pc, #168]	@ (800946c <xTaskPriorityInherit+0xc4>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d241      	bcs.n	8009450 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	db06      	blt.n	80093e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093d4:	4b25      	ldr	r3, [pc, #148]	@ (800946c <xTaskPriorityInherit+0xc4>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	6959      	ldr	r1, [r3, #20]
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093ea:	4613      	mov	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4413      	add	r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4a1f      	ldr	r2, [pc, #124]	@ (8009470 <xTaskPriorityInherit+0xc8>)
 80093f4:	4413      	add	r3, r2
 80093f6:	4299      	cmp	r1, r3
 80093f8:	d122      	bne.n	8009440 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	3304      	adds	r3, #4
 80093fe:	4618      	mov	r0, r3
 8009400:	f7fe f906 	bl	8007610 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009404:	4b19      	ldr	r3, [pc, #100]	@ (800946c <xTaskPriorityInherit+0xc4>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009412:	4b18      	ldr	r3, [pc, #96]	@ (8009474 <xTaskPriorityInherit+0xcc>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	429a      	cmp	r2, r3
 8009418:	d903      	bls.n	8009422 <xTaskPriorityInherit+0x7a>
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800941e:	4a15      	ldr	r2, [pc, #84]	@ (8009474 <xTaskPriorityInherit+0xcc>)
 8009420:	6013      	str	r3, [r2, #0]
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009426:	4613      	mov	r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	4413      	add	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4a10      	ldr	r2, [pc, #64]	@ (8009470 <xTaskPriorityInherit+0xc8>)
 8009430:	441a      	add	r2, r3
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	3304      	adds	r3, #4
 8009436:	4619      	mov	r1, r3
 8009438:	4610      	mov	r0, r2
 800943a:	f7fe f88c 	bl	8007556 <vListInsertEnd>
 800943e:	e004      	b.n	800944a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009440:	4b0a      	ldr	r3, [pc, #40]	@ (800946c <xTaskPriorityInherit+0xc4>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800944a:	2301      	movs	r3, #1
 800944c:	60fb      	str	r3, [r7, #12]
 800944e:	e008      	b.n	8009462 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009454:	4b05      	ldr	r3, [pc, #20]	@ (800946c <xTaskPriorityInherit+0xc4>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945a:	429a      	cmp	r2, r3
 800945c:	d201      	bcs.n	8009462 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800945e:	2301      	movs	r3, #1
 8009460:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009462:	68fb      	ldr	r3, [r7, #12]
	}
 8009464:	4618      	mov	r0, r3
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	20000d00 	.word	0x20000d00
 8009470:	20000d04 	.word	0x20000d04
 8009474:	200011dc 	.word	0x200011dc

08009478 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009478:	b580      	push	{r7, lr}
 800947a:	b086      	sub	sp, #24
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009484:	2300      	movs	r3, #0
 8009486:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d058      	beq.n	8009540 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800948e:	4b2f      	ldr	r3, [pc, #188]	@ (800954c <xTaskPriorityDisinherit+0xd4>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	693a      	ldr	r2, [r7, #16]
 8009494:	429a      	cmp	r2, r3
 8009496:	d00b      	beq.n	80094b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949c:	f383 8811 	msr	BASEPRI, r3
 80094a0:	f3bf 8f6f 	isb	sy
 80094a4:	f3bf 8f4f 	dsb	sy
 80094a8:	60fb      	str	r3, [r7, #12]
}
 80094aa:	bf00      	nop
 80094ac:	bf00      	nop
 80094ae:	e7fd      	b.n	80094ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10b      	bne.n	80094d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80094b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	60bb      	str	r3, [r7, #8]
}
 80094ca:	bf00      	nop
 80094cc:	bf00      	nop
 80094ce:	e7fd      	b.n	80094cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094d4:	1e5a      	subs	r2, r3, #1
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d02c      	beq.n	8009540 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d128      	bne.n	8009540 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	3304      	adds	r3, #4
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fe f88c 	bl	8007610 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009504:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009510:	4b0f      	ldr	r3, [pc, #60]	@ (8009550 <xTaskPriorityDisinherit+0xd8>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	429a      	cmp	r2, r3
 8009516:	d903      	bls.n	8009520 <xTaskPriorityDisinherit+0xa8>
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800951c:	4a0c      	ldr	r2, [pc, #48]	@ (8009550 <xTaskPriorityDisinherit+0xd8>)
 800951e:	6013      	str	r3, [r2, #0]
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009524:	4613      	mov	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4413      	add	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	4a09      	ldr	r2, [pc, #36]	@ (8009554 <xTaskPriorityDisinherit+0xdc>)
 800952e:	441a      	add	r2, r3
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	3304      	adds	r3, #4
 8009534:	4619      	mov	r1, r3
 8009536:	4610      	mov	r0, r2
 8009538:	f7fe f80d 	bl	8007556 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800953c:	2301      	movs	r3, #1
 800953e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009540:	697b      	ldr	r3, [r7, #20]
	}
 8009542:	4618      	mov	r0, r3
 8009544:	3718      	adds	r7, #24
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	20000d00 	.word	0x20000d00
 8009550:	200011dc 	.word	0x200011dc
 8009554:	20000d04 	.word	0x20000d04

08009558 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009558:	b580      	push	{r7, lr}
 800955a:	b088      	sub	sp, #32
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009566:	2301      	movs	r3, #1
 8009568:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d06c      	beq.n	800964a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009574:	2b00      	cmp	r3, #0
 8009576:	d10b      	bne.n	8009590 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800957c:	f383 8811 	msr	BASEPRI, r3
 8009580:	f3bf 8f6f 	isb	sy
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	60fb      	str	r3, [r7, #12]
}
 800958a:	bf00      	nop
 800958c:	bf00      	nop
 800958e:	e7fd      	b.n	800958c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009594:	683a      	ldr	r2, [r7, #0]
 8009596:	429a      	cmp	r2, r3
 8009598:	d902      	bls.n	80095a0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	61fb      	str	r3, [r7, #28]
 800959e:	e002      	b.n	80095a6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095a4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095aa:	69fa      	ldr	r2, [r7, #28]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d04c      	beq.n	800964a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095b4:	697a      	ldr	r2, [r7, #20]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d147      	bne.n	800964a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80095ba:	4b26      	ldr	r3, [pc, #152]	@ (8009654 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	69ba      	ldr	r2, [r7, #24]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d10b      	bne.n	80095dc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80095c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c8:	f383 8811 	msr	BASEPRI, r3
 80095cc:	f3bf 8f6f 	isb	sy
 80095d0:	f3bf 8f4f 	dsb	sy
 80095d4:	60bb      	str	r3, [r7, #8]
}
 80095d6:	bf00      	nop
 80095d8:	bf00      	nop
 80095da:	e7fd      	b.n	80095d8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	69fa      	ldr	r2, [r7, #28]
 80095e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	db04      	blt.n	80095fa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	6959      	ldr	r1, [r3, #20]
 80095fe:	693a      	ldr	r2, [r7, #16]
 8009600:	4613      	mov	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4413      	add	r3, r2
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	4a13      	ldr	r2, [pc, #76]	@ (8009658 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800960a:	4413      	add	r3, r2
 800960c:	4299      	cmp	r1, r3
 800960e:	d11c      	bne.n	800964a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	3304      	adds	r3, #4
 8009614:	4618      	mov	r0, r3
 8009616:	f7fd fffb 	bl	8007610 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800961e:	4b0f      	ldr	r3, [pc, #60]	@ (800965c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	429a      	cmp	r2, r3
 8009624:	d903      	bls.n	800962e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800962a:	4a0c      	ldr	r2, [pc, #48]	@ (800965c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800962c:	6013      	str	r3, [r2, #0]
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009632:	4613      	mov	r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	4413      	add	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4a07      	ldr	r2, [pc, #28]	@ (8009658 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800963c:	441a      	add	r2, r3
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	3304      	adds	r3, #4
 8009642:	4619      	mov	r1, r3
 8009644:	4610      	mov	r0, r2
 8009646:	f7fd ff86 	bl	8007556 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800964a:	bf00      	nop
 800964c:	3720      	adds	r7, #32
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	20000d00 	.word	0x20000d00
 8009658:	20000d04 	.word	0x20000d04
 800965c:	200011dc 	.word	0x200011dc

08009660 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009660:	b480      	push	{r7}
 8009662:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009664:	4b07      	ldr	r3, [pc, #28]	@ (8009684 <pvTaskIncrementMutexHeldCount+0x24>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d004      	beq.n	8009676 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800966c:	4b05      	ldr	r3, [pc, #20]	@ (8009684 <pvTaskIncrementMutexHeldCount+0x24>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009672:	3201      	adds	r2, #1
 8009674:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009676:	4b03      	ldr	r3, [pc, #12]	@ (8009684 <pvTaskIncrementMutexHeldCount+0x24>)
 8009678:	681b      	ldr	r3, [r3, #0]
	}
 800967a:	4618      	mov	r0, r3
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr
 8009684:	20000d00 	.word	0x20000d00

08009688 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009692:	4b21      	ldr	r3, [pc, #132]	@ (8009718 <prvAddCurrentTaskToDelayedList+0x90>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009698:	4b20      	ldr	r3, [pc, #128]	@ (800971c <prvAddCurrentTaskToDelayedList+0x94>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	3304      	adds	r3, #4
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fd ffb6 	bl	8007610 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096aa:	d10a      	bne.n	80096c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d007      	beq.n	80096c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096b2:	4b1a      	ldr	r3, [pc, #104]	@ (800971c <prvAddCurrentTaskToDelayedList+0x94>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3304      	adds	r3, #4
 80096b8:	4619      	mov	r1, r3
 80096ba:	4819      	ldr	r0, [pc, #100]	@ (8009720 <prvAddCurrentTaskToDelayedList+0x98>)
 80096bc:	f7fd ff4b 	bl	8007556 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096c0:	e026      	b.n	8009710 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4413      	add	r3, r2
 80096c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80096ca:	4b14      	ldr	r3, [pc, #80]	@ (800971c <prvAddCurrentTaskToDelayedList+0x94>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68ba      	ldr	r2, [r7, #8]
 80096d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d209      	bcs.n	80096ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096da:	4b12      	ldr	r3, [pc, #72]	@ (8009724 <prvAddCurrentTaskToDelayedList+0x9c>)
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	4b0f      	ldr	r3, [pc, #60]	@ (800971c <prvAddCurrentTaskToDelayedList+0x94>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	3304      	adds	r3, #4
 80096e4:	4619      	mov	r1, r3
 80096e6:	4610      	mov	r0, r2
 80096e8:	f7fd ff59 	bl	800759e <vListInsert>
}
 80096ec:	e010      	b.n	8009710 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009728 <prvAddCurrentTaskToDelayedList+0xa0>)
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	4b0a      	ldr	r3, [pc, #40]	@ (800971c <prvAddCurrentTaskToDelayedList+0x94>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	3304      	adds	r3, #4
 80096f8:	4619      	mov	r1, r3
 80096fa:	4610      	mov	r0, r2
 80096fc:	f7fd ff4f 	bl	800759e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009700:	4b0a      	ldr	r3, [pc, #40]	@ (800972c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	429a      	cmp	r2, r3
 8009708:	d202      	bcs.n	8009710 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800970a:	4a08      	ldr	r2, [pc, #32]	@ (800972c <prvAddCurrentTaskToDelayedList+0xa4>)
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	6013      	str	r3, [r2, #0]
}
 8009710:	bf00      	nop
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	200011d8 	.word	0x200011d8
 800971c:	20000d00 	.word	0x20000d00
 8009720:	200011c0 	.word	0x200011c0
 8009724:	20001190 	.word	0x20001190
 8009728:	2000118c 	.word	0x2000118c
 800972c:	200011f4 	.word	0x200011f4

08009730 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b08a      	sub	sp, #40	@ 0x28
 8009734:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009736:	2300      	movs	r3, #0
 8009738:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800973a:	f000 fb13 	bl	8009d64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800973e:	4b1d      	ldr	r3, [pc, #116]	@ (80097b4 <xTimerCreateTimerTask+0x84>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d021      	beq.n	800978a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009746:	2300      	movs	r3, #0
 8009748:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800974a:	2300      	movs	r3, #0
 800974c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800974e:	1d3a      	adds	r2, r7, #4
 8009750:	f107 0108 	add.w	r1, r7, #8
 8009754:	f107 030c 	add.w	r3, r7, #12
 8009758:	4618      	mov	r0, r3
 800975a:	f7fd feb5 	bl	80074c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800975e:	6879      	ldr	r1, [r7, #4]
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	9202      	str	r2, [sp, #8]
 8009766:	9301      	str	r3, [sp, #4]
 8009768:	2302      	movs	r3, #2
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	2300      	movs	r3, #0
 800976e:	460a      	mov	r2, r1
 8009770:	4911      	ldr	r1, [pc, #68]	@ (80097b8 <xTimerCreateTimerTask+0x88>)
 8009772:	4812      	ldr	r0, [pc, #72]	@ (80097bc <xTimerCreateTimerTask+0x8c>)
 8009774:	f7fe ffa2 	bl	80086bc <xTaskCreateStatic>
 8009778:	4603      	mov	r3, r0
 800977a:	4a11      	ldr	r2, [pc, #68]	@ (80097c0 <xTimerCreateTimerTask+0x90>)
 800977c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800977e:	4b10      	ldr	r3, [pc, #64]	@ (80097c0 <xTimerCreateTimerTask+0x90>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d001      	beq.n	800978a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009786:	2301      	movs	r3, #1
 8009788:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10b      	bne.n	80097a8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009794:	f383 8811 	msr	BASEPRI, r3
 8009798:	f3bf 8f6f 	isb	sy
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	613b      	str	r3, [r7, #16]
}
 80097a2:	bf00      	nop
 80097a4:	bf00      	nop
 80097a6:	e7fd      	b.n	80097a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80097a8:	697b      	ldr	r3, [r7, #20]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3718      	adds	r7, #24
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	20001230 	.word	0x20001230
 80097b8:	0800b0d4 	.word	0x0800b0d4
 80097bc:	080098fd 	.word	0x080098fd
 80097c0:	20001234 	.word	0x20001234

080097c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b08a      	sub	sp, #40	@ 0x28
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
 80097d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80097d2:	2300      	movs	r3, #0
 80097d4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10b      	bne.n	80097f4 <xTimerGenericCommand+0x30>
	__asm volatile
 80097dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e0:	f383 8811 	msr	BASEPRI, r3
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	623b      	str	r3, [r7, #32]
}
 80097ee:	bf00      	nop
 80097f0:	bf00      	nop
 80097f2:	e7fd      	b.n	80097f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80097f4:	4b19      	ldr	r3, [pc, #100]	@ (800985c <xTimerGenericCommand+0x98>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d02a      	beq.n	8009852 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	2b05      	cmp	r3, #5
 800980c:	dc18      	bgt.n	8009840 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800980e:	f7ff fdad 	bl	800936c <xTaskGetSchedulerState>
 8009812:	4603      	mov	r3, r0
 8009814:	2b02      	cmp	r3, #2
 8009816:	d109      	bne.n	800982c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009818:	4b10      	ldr	r3, [pc, #64]	@ (800985c <xTimerGenericCommand+0x98>)
 800981a:	6818      	ldr	r0, [r3, #0]
 800981c:	f107 0110 	add.w	r1, r7, #16
 8009820:	2300      	movs	r3, #0
 8009822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009824:	f7fe f8d2 	bl	80079cc <xQueueGenericSend>
 8009828:	6278      	str	r0, [r7, #36]	@ 0x24
 800982a:	e012      	b.n	8009852 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800982c:	4b0b      	ldr	r3, [pc, #44]	@ (800985c <xTimerGenericCommand+0x98>)
 800982e:	6818      	ldr	r0, [r3, #0]
 8009830:	f107 0110 	add.w	r1, r7, #16
 8009834:	2300      	movs	r3, #0
 8009836:	2200      	movs	r2, #0
 8009838:	f7fe f8c8 	bl	80079cc <xQueueGenericSend>
 800983c:	6278      	str	r0, [r7, #36]	@ 0x24
 800983e:	e008      	b.n	8009852 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009840:	4b06      	ldr	r3, [pc, #24]	@ (800985c <xTimerGenericCommand+0x98>)
 8009842:	6818      	ldr	r0, [r3, #0]
 8009844:	f107 0110 	add.w	r1, r7, #16
 8009848:	2300      	movs	r3, #0
 800984a:	683a      	ldr	r2, [r7, #0]
 800984c:	f7fe f9c0 	bl	8007bd0 <xQueueGenericSendFromISR>
 8009850:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009854:	4618      	mov	r0, r3
 8009856:	3728      	adds	r7, #40	@ 0x28
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	20001230 	.word	0x20001230

08009860 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b088      	sub	sp, #32
 8009864:	af02      	add	r7, sp, #8
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800986a:	4b23      	ldr	r3, [pc, #140]	@ (80098f8 <prvProcessExpiredTimer+0x98>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	3304      	adds	r3, #4
 8009878:	4618      	mov	r0, r3
 800987a:	f7fd fec9 	bl	8007610 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009884:	f003 0304 	and.w	r3, r3, #4
 8009888:	2b00      	cmp	r3, #0
 800988a:	d023      	beq.n	80098d4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	699a      	ldr	r2, [r3, #24]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	18d1      	adds	r1, r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	683a      	ldr	r2, [r7, #0]
 8009898:	6978      	ldr	r0, [r7, #20]
 800989a:	f000 f8d5 	bl	8009a48 <prvInsertTimerInActiveList>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d020      	beq.n	80098e6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098a4:	2300      	movs	r3, #0
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	2300      	movs	r3, #0
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	2100      	movs	r1, #0
 80098ae:	6978      	ldr	r0, [r7, #20]
 80098b0:	f7ff ff88 	bl	80097c4 <xTimerGenericCommand>
 80098b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d114      	bne.n	80098e6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80098bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c0:	f383 8811 	msr	BASEPRI, r3
 80098c4:	f3bf 8f6f 	isb	sy
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	60fb      	str	r3, [r7, #12]
}
 80098ce:	bf00      	nop
 80098d0:	bf00      	nop
 80098d2:	e7fd      	b.n	80098d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098da:	f023 0301 	bic.w	r3, r3, #1
 80098de:	b2da      	uxtb	r2, r3
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	6a1b      	ldr	r3, [r3, #32]
 80098ea:	6978      	ldr	r0, [r7, #20]
 80098ec:	4798      	blx	r3
}
 80098ee:	bf00      	nop
 80098f0:	3718      	adds	r7, #24
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	20001228 	.word	0x20001228

080098fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009904:	f107 0308 	add.w	r3, r7, #8
 8009908:	4618      	mov	r0, r3
 800990a:	f000 f859 	bl	80099c0 <prvGetNextExpireTime>
 800990e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	4619      	mov	r1, r3
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f000 f805 	bl	8009924 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800991a:	f000 f8d7 	bl	8009acc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800991e:	bf00      	nop
 8009920:	e7f0      	b.n	8009904 <prvTimerTask+0x8>
	...

08009924 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800992e:	f7ff f929 	bl	8008b84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009932:	f107 0308 	add.w	r3, r7, #8
 8009936:	4618      	mov	r0, r3
 8009938:	f000 f866 	bl	8009a08 <prvSampleTimeNow>
 800993c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d130      	bne.n	80099a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d10a      	bne.n	8009960 <prvProcessTimerOrBlockTask+0x3c>
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	429a      	cmp	r2, r3
 8009950:	d806      	bhi.n	8009960 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009952:	f7ff f925 	bl	8008ba0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009956:	68f9      	ldr	r1, [r7, #12]
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f7ff ff81 	bl	8009860 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800995e:	e024      	b.n	80099aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d008      	beq.n	8009978 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009966:	4b13      	ldr	r3, [pc, #76]	@ (80099b4 <prvProcessTimerOrBlockTask+0x90>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d101      	bne.n	8009974 <prvProcessTimerOrBlockTask+0x50>
 8009970:	2301      	movs	r3, #1
 8009972:	e000      	b.n	8009976 <prvProcessTimerOrBlockTask+0x52>
 8009974:	2300      	movs	r3, #0
 8009976:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009978:	4b0f      	ldr	r3, [pc, #60]	@ (80099b8 <prvProcessTimerOrBlockTask+0x94>)
 800997a:	6818      	ldr	r0, [r3, #0]
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	1ad3      	subs	r3, r2, r3
 8009982:	683a      	ldr	r2, [r7, #0]
 8009984:	4619      	mov	r1, r3
 8009986:	f7fe fe65 	bl	8008654 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800998a:	f7ff f909 	bl	8008ba0 <xTaskResumeAll>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10a      	bne.n	80099aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009994:	4b09      	ldr	r3, [pc, #36]	@ (80099bc <prvProcessTimerOrBlockTask+0x98>)
 8009996:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800999a:	601a      	str	r2, [r3, #0]
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	f3bf 8f6f 	isb	sy
}
 80099a4:	e001      	b.n	80099aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80099a6:	f7ff f8fb 	bl	8008ba0 <xTaskResumeAll>
}
 80099aa:	bf00      	nop
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	2000122c 	.word	0x2000122c
 80099b8:	20001230 	.word	0x20001230
 80099bc:	e000ed04 	.word	0xe000ed04

080099c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80099c0:	b480      	push	{r7}
 80099c2:	b085      	sub	sp, #20
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80099c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009a04 <prvGetNextExpireTime+0x44>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d101      	bne.n	80099d6 <prvGetNextExpireTime+0x16>
 80099d2:	2201      	movs	r2, #1
 80099d4:	e000      	b.n	80099d8 <prvGetNextExpireTime+0x18>
 80099d6:	2200      	movs	r2, #0
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d105      	bne.n	80099f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099e4:	4b07      	ldr	r3, [pc, #28]	@ (8009a04 <prvGetNextExpireTime+0x44>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	60fb      	str	r3, [r7, #12]
 80099ee:	e001      	b.n	80099f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80099f0:	2300      	movs	r3, #0
 80099f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80099f4:	68fb      	ldr	r3, [r7, #12]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3714      	adds	r7, #20
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	20001228 	.word	0x20001228

08009a08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009a10:	f7ff f964 	bl	8008cdc <xTaskGetTickCount>
 8009a14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009a16:	4b0b      	ldr	r3, [pc, #44]	@ (8009a44 <prvSampleTimeNow+0x3c>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d205      	bcs.n	8009a2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009a20:	f000 f93a 	bl	8009c98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2201      	movs	r2, #1
 8009a28:	601a      	str	r2, [r3, #0]
 8009a2a:	e002      	b.n	8009a32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009a32:	4a04      	ldr	r2, [pc, #16]	@ (8009a44 <prvSampleTimeNow+0x3c>)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009a38:	68fb      	ldr	r3, [r7, #12]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	20001238 	.word	0x20001238

08009a48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b086      	sub	sp, #24
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	607a      	str	r2, [r7, #4]
 8009a54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a56:	2300      	movs	r3, #0
 8009a58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a66:	68ba      	ldr	r2, [r7, #8]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d812      	bhi.n	8009a94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	1ad2      	subs	r2, r2, r3
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	699b      	ldr	r3, [r3, #24]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d302      	bcc.n	8009a82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	617b      	str	r3, [r7, #20]
 8009a80:	e01b      	b.n	8009aba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a82:	4b10      	ldr	r3, [pc, #64]	@ (8009ac4 <prvInsertTimerInActiveList+0x7c>)
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	3304      	adds	r3, #4
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	f7fd fd86 	bl	800759e <vListInsert>
 8009a92:	e012      	b.n	8009aba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d206      	bcs.n	8009aaa <prvInsertTimerInActiveList+0x62>
 8009a9c:	68ba      	ldr	r2, [r7, #8]
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d302      	bcc.n	8009aaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	617b      	str	r3, [r7, #20]
 8009aa8:	e007      	b.n	8009aba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009aaa:	4b07      	ldr	r3, [pc, #28]	@ (8009ac8 <prvInsertTimerInActiveList+0x80>)
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	3304      	adds	r3, #4
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	4610      	mov	r0, r2
 8009ab6:	f7fd fd72 	bl	800759e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009aba:	697b      	ldr	r3, [r7, #20]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3718      	adds	r7, #24
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	2000122c 	.word	0x2000122c
 8009ac8:	20001228 	.word	0x20001228

08009acc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b08e      	sub	sp, #56	@ 0x38
 8009ad0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ad2:	e0ce      	b.n	8009c72 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	da19      	bge.n	8009b0e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009ada:	1d3b      	adds	r3, r7, #4
 8009adc:	3304      	adds	r3, #4
 8009ade:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10b      	bne.n	8009afe <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aea:	f383 8811 	msr	BASEPRI, r3
 8009aee:	f3bf 8f6f 	isb	sy
 8009af2:	f3bf 8f4f 	dsb	sy
 8009af6:	61fb      	str	r3, [r7, #28]
}
 8009af8:	bf00      	nop
 8009afa:	bf00      	nop
 8009afc:	e7fd      	b.n	8009afa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b04:	6850      	ldr	r0, [r2, #4]
 8009b06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b08:	6892      	ldr	r2, [r2, #8]
 8009b0a:	4611      	mov	r1, r2
 8009b0c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f2c0 80ae 	blt.w	8009c72 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1c:	695b      	ldr	r3, [r3, #20]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d004      	beq.n	8009b2c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b24:	3304      	adds	r3, #4
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fd fd72 	bl	8007610 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b2c:	463b      	mov	r3, r7
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7ff ff6a 	bl	8009a08 <prvSampleTimeNow>
 8009b34:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2b09      	cmp	r3, #9
 8009b3a:	f200 8097 	bhi.w	8009c6c <prvProcessReceivedCommands+0x1a0>
 8009b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b44 <prvProcessReceivedCommands+0x78>)
 8009b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b44:	08009b6d 	.word	0x08009b6d
 8009b48:	08009b6d 	.word	0x08009b6d
 8009b4c:	08009b6d 	.word	0x08009b6d
 8009b50:	08009be3 	.word	0x08009be3
 8009b54:	08009bf7 	.word	0x08009bf7
 8009b58:	08009c43 	.word	0x08009c43
 8009b5c:	08009b6d 	.word	0x08009b6d
 8009b60:	08009b6d 	.word	0x08009b6d
 8009b64:	08009be3 	.word	0x08009be3
 8009b68:	08009bf7 	.word	0x08009bf7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b72:	f043 0301 	orr.w	r3, r3, #1
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	18d1      	adds	r1, r2, r3
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b8c:	f7ff ff5c 	bl	8009a48 <prvInsertTimerInActiveList>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d06c      	beq.n	8009c70 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b98:	6a1b      	ldr	r3, [r3, #32]
 8009b9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ba4:	f003 0304 	and.w	r3, r3, #4
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d061      	beq.n	8009c70 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	441a      	add	r2, r3
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	2300      	movs	r3, #0
 8009bba:	2100      	movs	r1, #0
 8009bbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bbe:	f7ff fe01 	bl	80097c4 <xTimerGenericCommand>
 8009bc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009bc4:	6a3b      	ldr	r3, [r7, #32]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d152      	bne.n	8009c70 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bce:	f383 8811 	msr	BASEPRI, r3
 8009bd2:	f3bf 8f6f 	isb	sy
 8009bd6:	f3bf 8f4f 	dsb	sy
 8009bda:	61bb      	str	r3, [r7, #24]
}
 8009bdc:	bf00      	nop
 8009bde:	bf00      	nop
 8009be0:	e7fd      	b.n	8009bde <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009be8:	f023 0301 	bic.w	r3, r3, #1
 8009bec:	b2da      	uxtb	r2, r3
 8009bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009bf4:	e03d      	b.n	8009c72 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bfc:	f043 0301 	orr.w	r3, r3, #1
 8009c00:	b2da      	uxtb	r2, r3
 8009c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c08:	68ba      	ldr	r2, [r7, #8]
 8009c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c0c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c10:	699b      	ldr	r3, [r3, #24]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d10b      	bne.n	8009c2e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	617b      	str	r3, [r7, #20]
}
 8009c28:	bf00      	nop
 8009c2a:	bf00      	nop
 8009c2c:	e7fd      	b.n	8009c2a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c30:	699a      	ldr	r2, [r3, #24]
 8009c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c34:	18d1      	adds	r1, r2, r3
 8009c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c3c:	f7ff ff04 	bl	8009a48 <prvInsertTimerInActiveList>
					break;
 8009c40:	e017      	b.n	8009c72 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c48:	f003 0302 	and.w	r3, r3, #2
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d103      	bne.n	8009c58 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009c50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c52:	f000 fbe9 	bl	800a428 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009c56:	e00c      	b.n	8009c72 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c5e:	f023 0301 	bic.w	r3, r3, #1
 8009c62:	b2da      	uxtb	r2, r3
 8009c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009c6a:	e002      	b.n	8009c72 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009c6c:	bf00      	nop
 8009c6e:	e000      	b.n	8009c72 <prvProcessReceivedCommands+0x1a6>
					break;
 8009c70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c72:	4b08      	ldr	r3, [pc, #32]	@ (8009c94 <prvProcessReceivedCommands+0x1c8>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	1d39      	adds	r1, r7, #4
 8009c78:	2200      	movs	r2, #0
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7fe f8d6 	bl	8007e2c <xQueueReceive>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	f47f af26 	bne.w	8009ad4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009c88:	bf00      	nop
 8009c8a:	bf00      	nop
 8009c8c:	3730      	adds	r7, #48	@ 0x30
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	20001230 	.word	0x20001230

08009c98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b088      	sub	sp, #32
 8009c9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c9e:	e049      	b.n	8009d34 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ca0:	4b2e      	ldr	r3, [pc, #184]	@ (8009d5c <prvSwitchTimerLists+0xc4>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009caa:	4b2c      	ldr	r3, [pc, #176]	@ (8009d5c <prvSwitchTimerLists+0xc4>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fd fca9 	bl	8007610 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6a1b      	ldr	r3, [r3, #32]
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ccc:	f003 0304 	and.w	r3, r3, #4
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d02f      	beq.n	8009d34 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	693a      	ldr	r2, [r7, #16]
 8009cda:	4413      	add	r3, r2
 8009cdc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d90e      	bls.n	8009d04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	68ba      	ldr	r2, [r7, #8]
 8009cea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8009d5c <prvSwitchTimerLists+0xc4>)
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	3304      	adds	r3, #4
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	4610      	mov	r0, r2
 8009cfe:	f7fd fc4e 	bl	800759e <vListInsert>
 8009d02:	e017      	b.n	8009d34 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d04:	2300      	movs	r3, #0
 8009d06:	9300      	str	r3, [sp, #0]
 8009d08:	2300      	movs	r3, #0
 8009d0a:	693a      	ldr	r2, [r7, #16]
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f7ff fd58 	bl	80097c4 <xTimerGenericCommand>
 8009d14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d10b      	bne.n	8009d34 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	603b      	str	r3, [r7, #0]
}
 8009d2e:	bf00      	nop
 8009d30:	bf00      	nop
 8009d32:	e7fd      	b.n	8009d30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d34:	4b09      	ldr	r3, [pc, #36]	@ (8009d5c <prvSwitchTimerLists+0xc4>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d1b0      	bne.n	8009ca0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009d3e:	4b07      	ldr	r3, [pc, #28]	@ (8009d5c <prvSwitchTimerLists+0xc4>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d44:	4b06      	ldr	r3, [pc, #24]	@ (8009d60 <prvSwitchTimerLists+0xc8>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a04      	ldr	r2, [pc, #16]	@ (8009d5c <prvSwitchTimerLists+0xc4>)
 8009d4a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d4c:	4a04      	ldr	r2, [pc, #16]	@ (8009d60 <prvSwitchTimerLists+0xc8>)
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	6013      	str	r3, [r2, #0]
}
 8009d52:	bf00      	nop
 8009d54:	3718      	adds	r7, #24
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20001228 	.word	0x20001228
 8009d60:	2000122c 	.word	0x2000122c

08009d64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009d6a:	f000 f96d 	bl	800a048 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009d6e:	4b15      	ldr	r3, [pc, #84]	@ (8009dc4 <prvCheckForValidListAndQueue+0x60>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d120      	bne.n	8009db8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009d76:	4814      	ldr	r0, [pc, #80]	@ (8009dc8 <prvCheckForValidListAndQueue+0x64>)
 8009d78:	f7fd fbc0 	bl	80074fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009d7c:	4813      	ldr	r0, [pc, #76]	@ (8009dcc <prvCheckForValidListAndQueue+0x68>)
 8009d7e:	f7fd fbbd 	bl	80074fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009d82:	4b13      	ldr	r3, [pc, #76]	@ (8009dd0 <prvCheckForValidListAndQueue+0x6c>)
 8009d84:	4a10      	ldr	r2, [pc, #64]	@ (8009dc8 <prvCheckForValidListAndQueue+0x64>)
 8009d86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009d88:	4b12      	ldr	r3, [pc, #72]	@ (8009dd4 <prvCheckForValidListAndQueue+0x70>)
 8009d8a:	4a10      	ldr	r2, [pc, #64]	@ (8009dcc <prvCheckForValidListAndQueue+0x68>)
 8009d8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009d8e:	2300      	movs	r3, #0
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	4b11      	ldr	r3, [pc, #68]	@ (8009dd8 <prvCheckForValidListAndQueue+0x74>)
 8009d94:	4a11      	ldr	r2, [pc, #68]	@ (8009ddc <prvCheckForValidListAndQueue+0x78>)
 8009d96:	2110      	movs	r1, #16
 8009d98:	200a      	movs	r0, #10
 8009d9a:	f7fd fccd 	bl	8007738 <xQueueGenericCreateStatic>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	4a08      	ldr	r2, [pc, #32]	@ (8009dc4 <prvCheckForValidListAndQueue+0x60>)
 8009da2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009da4:	4b07      	ldr	r3, [pc, #28]	@ (8009dc4 <prvCheckForValidListAndQueue+0x60>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d005      	beq.n	8009db8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009dac:	4b05      	ldr	r3, [pc, #20]	@ (8009dc4 <prvCheckForValidListAndQueue+0x60>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	490b      	ldr	r1, [pc, #44]	@ (8009de0 <prvCheckForValidListAndQueue+0x7c>)
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fe fbfa 	bl	80085ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009db8:	f000 f978 	bl	800a0ac <vPortExitCritical>
}
 8009dbc:	bf00      	nop
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20001230 	.word	0x20001230
 8009dc8:	20001200 	.word	0x20001200
 8009dcc:	20001214 	.word	0x20001214
 8009dd0:	20001228 	.word	0x20001228
 8009dd4:	2000122c 	.word	0x2000122c
 8009dd8:	200012dc 	.word	0x200012dc
 8009ddc:	2000123c 	.word	0x2000123c
 8009de0:	0800b0dc 	.word	0x0800b0dc

08009de4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	3b04      	subs	r3, #4
 8009df4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009dfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	3b04      	subs	r3, #4
 8009e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	f023 0201 	bic.w	r2, r3, #1
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	3b04      	subs	r3, #4
 8009e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e14:	4a0c      	ldr	r2, [pc, #48]	@ (8009e48 <pxPortInitialiseStack+0x64>)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	3b14      	subs	r3, #20
 8009e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	3b04      	subs	r3, #4
 8009e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f06f 0202 	mvn.w	r2, #2
 8009e32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	3b20      	subs	r3, #32
 8009e38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr
 8009e48:	08009e4d 	.word	0x08009e4d

08009e4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e52:	2300      	movs	r3, #0
 8009e54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e56:	4b13      	ldr	r3, [pc, #76]	@ (8009ea4 <prvTaskExitError+0x58>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e5e:	d00b      	beq.n	8009e78 <prvTaskExitError+0x2c>
	__asm volatile
 8009e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	60fb      	str	r3, [r7, #12]
}
 8009e72:	bf00      	nop
 8009e74:	bf00      	nop
 8009e76:	e7fd      	b.n	8009e74 <prvTaskExitError+0x28>
	__asm volatile
 8009e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e7c:	f383 8811 	msr	BASEPRI, r3
 8009e80:	f3bf 8f6f 	isb	sy
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	60bb      	str	r3, [r7, #8]
}
 8009e8a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e8c:	bf00      	nop
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d0fc      	beq.n	8009e8e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop
 8009e98:	3714      	adds	r7, #20
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	20000010 	.word	0x20000010
	...

08009eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009eb0:	4b07      	ldr	r3, [pc, #28]	@ (8009ed0 <pxCurrentTCBConst2>)
 8009eb2:	6819      	ldr	r1, [r3, #0]
 8009eb4:	6808      	ldr	r0, [r1, #0]
 8009eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eba:	f380 8809 	msr	PSP, r0
 8009ebe:	f3bf 8f6f 	isb	sy
 8009ec2:	f04f 0000 	mov.w	r0, #0
 8009ec6:	f380 8811 	msr	BASEPRI, r0
 8009eca:	4770      	bx	lr
 8009ecc:	f3af 8000 	nop.w

08009ed0 <pxCurrentTCBConst2>:
 8009ed0:	20000d00 	.word	0x20000d00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ed4:	bf00      	nop
 8009ed6:	bf00      	nop

08009ed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ed8:	4808      	ldr	r0, [pc, #32]	@ (8009efc <prvPortStartFirstTask+0x24>)
 8009eda:	6800      	ldr	r0, [r0, #0]
 8009edc:	6800      	ldr	r0, [r0, #0]
 8009ede:	f380 8808 	msr	MSP, r0
 8009ee2:	f04f 0000 	mov.w	r0, #0
 8009ee6:	f380 8814 	msr	CONTROL, r0
 8009eea:	b662      	cpsie	i
 8009eec:	b661      	cpsie	f
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	f3bf 8f6f 	isb	sy
 8009ef6:	df00      	svc	0
 8009ef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009efa:	bf00      	nop
 8009efc:	e000ed08 	.word	0xe000ed08

08009f00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009f06:	4b47      	ldr	r3, [pc, #284]	@ (800a024 <xPortStartScheduler+0x124>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a47      	ldr	r2, [pc, #284]	@ (800a028 <xPortStartScheduler+0x128>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d10b      	bne.n	8009f28 <xPortStartScheduler+0x28>
	__asm volatile
 8009f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	613b      	str	r3, [r7, #16]
}
 8009f22:	bf00      	nop
 8009f24:	bf00      	nop
 8009f26:	e7fd      	b.n	8009f24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009f28:	4b3e      	ldr	r3, [pc, #248]	@ (800a024 <xPortStartScheduler+0x124>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a3f      	ldr	r2, [pc, #252]	@ (800a02c <xPortStartScheduler+0x12c>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d10b      	bne.n	8009f4a <xPortStartScheduler+0x4a>
	__asm volatile
 8009f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f36:	f383 8811 	msr	BASEPRI, r3
 8009f3a:	f3bf 8f6f 	isb	sy
 8009f3e:	f3bf 8f4f 	dsb	sy
 8009f42:	60fb      	str	r3, [r7, #12]
}
 8009f44:	bf00      	nop
 8009f46:	bf00      	nop
 8009f48:	e7fd      	b.n	8009f46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f4a:	4b39      	ldr	r3, [pc, #228]	@ (800a030 <xPortStartScheduler+0x130>)
 8009f4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	22ff      	movs	r2, #255	@ 0xff
 8009f5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f64:	78fb      	ldrb	r3, [r7, #3]
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009f6c:	b2da      	uxtb	r2, r3
 8009f6e:	4b31      	ldr	r3, [pc, #196]	@ (800a034 <xPortStartScheduler+0x134>)
 8009f70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f72:	4b31      	ldr	r3, [pc, #196]	@ (800a038 <xPortStartScheduler+0x138>)
 8009f74:	2207      	movs	r2, #7
 8009f76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f78:	e009      	b.n	8009f8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009f7a:	4b2f      	ldr	r3, [pc, #188]	@ (800a038 <xPortStartScheduler+0x138>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	4a2d      	ldr	r2, [pc, #180]	@ (800a038 <xPortStartScheduler+0x138>)
 8009f82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f84:	78fb      	ldrb	r3, [r7, #3]
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	005b      	lsls	r3, r3, #1
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f8e:	78fb      	ldrb	r3, [r7, #3]
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f96:	2b80      	cmp	r3, #128	@ 0x80
 8009f98:	d0ef      	beq.n	8009f7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f9a:	4b27      	ldr	r3, [pc, #156]	@ (800a038 <xPortStartScheduler+0x138>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f1c3 0307 	rsb	r3, r3, #7
 8009fa2:	2b04      	cmp	r3, #4
 8009fa4:	d00b      	beq.n	8009fbe <xPortStartScheduler+0xbe>
	__asm volatile
 8009fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009faa:	f383 8811 	msr	BASEPRI, r3
 8009fae:	f3bf 8f6f 	isb	sy
 8009fb2:	f3bf 8f4f 	dsb	sy
 8009fb6:	60bb      	str	r3, [r7, #8]
}
 8009fb8:	bf00      	nop
 8009fba:	bf00      	nop
 8009fbc:	e7fd      	b.n	8009fba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009fbe:	4b1e      	ldr	r3, [pc, #120]	@ (800a038 <xPortStartScheduler+0x138>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	021b      	lsls	r3, r3, #8
 8009fc4:	4a1c      	ldr	r2, [pc, #112]	@ (800a038 <xPortStartScheduler+0x138>)
 8009fc6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009fc8:	4b1b      	ldr	r3, [pc, #108]	@ (800a038 <xPortStartScheduler+0x138>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009fd0:	4a19      	ldr	r2, [pc, #100]	@ (800a038 <xPortStartScheduler+0x138>)
 8009fd2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	b2da      	uxtb	r2, r3
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009fdc:	4b17      	ldr	r3, [pc, #92]	@ (800a03c <xPortStartScheduler+0x13c>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a16      	ldr	r2, [pc, #88]	@ (800a03c <xPortStartScheduler+0x13c>)
 8009fe2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009fe6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009fe8:	4b14      	ldr	r3, [pc, #80]	@ (800a03c <xPortStartScheduler+0x13c>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a13      	ldr	r2, [pc, #76]	@ (800a03c <xPortStartScheduler+0x13c>)
 8009fee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009ff2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ff4:	f000 f8da 	bl	800a1ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ff8:	4b11      	ldr	r3, [pc, #68]	@ (800a040 <xPortStartScheduler+0x140>)
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ffe:	f000 f8f9 	bl	800a1f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a002:	4b10      	ldr	r3, [pc, #64]	@ (800a044 <xPortStartScheduler+0x144>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a0f      	ldr	r2, [pc, #60]	@ (800a044 <xPortStartScheduler+0x144>)
 800a008:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a00c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a00e:	f7ff ff63 	bl	8009ed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a012:	f7fe ff2d 	bl	8008e70 <vTaskSwitchContext>
	prvTaskExitError();
 800a016:	f7ff ff19 	bl	8009e4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3718      	adds	r7, #24
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	e000ed00 	.word	0xe000ed00
 800a028:	410fc271 	.word	0x410fc271
 800a02c:	410fc270 	.word	0x410fc270
 800a030:	e000e400 	.word	0xe000e400
 800a034:	2000132c 	.word	0x2000132c
 800a038:	20001330 	.word	0x20001330
 800a03c:	e000ed20 	.word	0xe000ed20
 800a040:	20000010 	.word	0x20000010
 800a044:	e000ef34 	.word	0xe000ef34

0800a048 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	607b      	str	r3, [r7, #4]
}
 800a060:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a062:	4b10      	ldr	r3, [pc, #64]	@ (800a0a4 <vPortEnterCritical+0x5c>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	3301      	adds	r3, #1
 800a068:	4a0e      	ldr	r2, [pc, #56]	@ (800a0a4 <vPortEnterCritical+0x5c>)
 800a06a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a06c:	4b0d      	ldr	r3, [pc, #52]	@ (800a0a4 <vPortEnterCritical+0x5c>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2b01      	cmp	r3, #1
 800a072:	d110      	bne.n	800a096 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a074:	4b0c      	ldr	r3, [pc, #48]	@ (800a0a8 <vPortEnterCritical+0x60>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00b      	beq.n	800a096 <vPortEnterCritical+0x4e>
	__asm volatile
 800a07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	603b      	str	r3, [r7, #0]
}
 800a090:	bf00      	nop
 800a092:	bf00      	nop
 800a094:	e7fd      	b.n	800a092 <vPortEnterCritical+0x4a>
	}
}
 800a096:	bf00      	nop
 800a098:	370c      	adds	r7, #12
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop
 800a0a4:	20000010 	.word	0x20000010
 800a0a8:	e000ed04 	.word	0xe000ed04

0800a0ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a0b2:	4b12      	ldr	r3, [pc, #72]	@ (800a0fc <vPortExitCritical+0x50>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d10b      	bne.n	800a0d2 <vPortExitCritical+0x26>
	__asm volatile
 800a0ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0be:	f383 8811 	msr	BASEPRI, r3
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	f3bf 8f4f 	dsb	sy
 800a0ca:	607b      	str	r3, [r7, #4]
}
 800a0cc:	bf00      	nop
 800a0ce:	bf00      	nop
 800a0d0:	e7fd      	b.n	800a0ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a0d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a0fc <vPortExitCritical+0x50>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	4a08      	ldr	r2, [pc, #32]	@ (800a0fc <vPortExitCritical+0x50>)
 800a0da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a0dc:	4b07      	ldr	r3, [pc, #28]	@ (800a0fc <vPortExitCritical+0x50>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d105      	bne.n	800a0f0 <vPortExitCritical+0x44>
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	f383 8811 	msr	BASEPRI, r3
}
 800a0ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr
 800a0fc:	20000010 	.word	0x20000010

0800a100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a100:	f3ef 8009 	mrs	r0, PSP
 800a104:	f3bf 8f6f 	isb	sy
 800a108:	4b15      	ldr	r3, [pc, #84]	@ (800a160 <pxCurrentTCBConst>)
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	f01e 0f10 	tst.w	lr, #16
 800a110:	bf08      	it	eq
 800a112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a11a:	6010      	str	r0, [r2, #0]
 800a11c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a120:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a124:	f380 8811 	msr	BASEPRI, r0
 800a128:	f3bf 8f4f 	dsb	sy
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	f7fe fe9e 	bl	8008e70 <vTaskSwitchContext>
 800a134:	f04f 0000 	mov.w	r0, #0
 800a138:	f380 8811 	msr	BASEPRI, r0
 800a13c:	bc09      	pop	{r0, r3}
 800a13e:	6819      	ldr	r1, [r3, #0]
 800a140:	6808      	ldr	r0, [r1, #0]
 800a142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a146:	f01e 0f10 	tst.w	lr, #16
 800a14a:	bf08      	it	eq
 800a14c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a150:	f380 8809 	msr	PSP, r0
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	f3af 8000 	nop.w

0800a160 <pxCurrentTCBConst>:
 800a160:	20000d00 	.word	0x20000d00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a164:	bf00      	nop
 800a166:	bf00      	nop

0800a168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
	__asm volatile
 800a16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a172:	f383 8811 	msr	BASEPRI, r3
 800a176:	f3bf 8f6f 	isb	sy
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	607b      	str	r3, [r7, #4]
}
 800a180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a182:	f7fe fdbb 	bl	8008cfc <xTaskIncrementTick>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d003      	beq.n	800a194 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a18c:	4b06      	ldr	r3, [pc, #24]	@ (800a1a8 <xPortSysTickHandler+0x40>)
 800a18e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a192:	601a      	str	r2, [r3, #0]
 800a194:	2300      	movs	r3, #0
 800a196:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	f383 8811 	msr	BASEPRI, r3
}
 800a19e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a1a0:	bf00      	nop
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	e000ed04 	.word	0xe000ed04

0800a1ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a1b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a1e0 <vPortSetupTimerInterrupt+0x34>)
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a1b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a1e4 <vPortSetupTimerInterrupt+0x38>)
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a1bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a1e8 <vPortSetupTimerInterrupt+0x3c>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a0a      	ldr	r2, [pc, #40]	@ (800a1ec <vPortSetupTimerInterrupt+0x40>)
 800a1c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1c6:	099b      	lsrs	r3, r3, #6
 800a1c8:	4a09      	ldr	r2, [pc, #36]	@ (800a1f0 <vPortSetupTimerInterrupt+0x44>)
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a1ce:	4b04      	ldr	r3, [pc, #16]	@ (800a1e0 <vPortSetupTimerInterrupt+0x34>)
 800a1d0:	2207      	movs	r2, #7
 800a1d2:	601a      	str	r2, [r3, #0]
}
 800a1d4:	bf00      	nop
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	e000e010 	.word	0xe000e010
 800a1e4:	e000e018 	.word	0xe000e018
 800a1e8:	20000004 	.word	0x20000004
 800a1ec:	10624dd3 	.word	0x10624dd3
 800a1f0:	e000e014 	.word	0xe000e014

0800a1f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a1f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a204 <vPortEnableVFP+0x10>
 800a1f8:	6801      	ldr	r1, [r0, #0]
 800a1fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a1fe:	6001      	str	r1, [r0, #0]
 800a200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a202:	bf00      	nop
 800a204:	e000ed88 	.word	0xe000ed88

0800a208 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a208:	b480      	push	{r7}
 800a20a:	b085      	sub	sp, #20
 800a20c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a20e:	f3ef 8305 	mrs	r3, IPSR
 800a212:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2b0f      	cmp	r3, #15
 800a218:	d915      	bls.n	800a246 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a21a:	4a18      	ldr	r2, [pc, #96]	@ (800a27c <vPortValidateInterruptPriority+0x74>)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	4413      	add	r3, r2
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a224:	4b16      	ldr	r3, [pc, #88]	@ (800a280 <vPortValidateInterruptPriority+0x78>)
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	7afa      	ldrb	r2, [r7, #11]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d20b      	bcs.n	800a246 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a232:	f383 8811 	msr	BASEPRI, r3
 800a236:	f3bf 8f6f 	isb	sy
 800a23a:	f3bf 8f4f 	dsb	sy
 800a23e:	607b      	str	r3, [r7, #4]
}
 800a240:	bf00      	nop
 800a242:	bf00      	nop
 800a244:	e7fd      	b.n	800a242 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a246:	4b0f      	ldr	r3, [pc, #60]	@ (800a284 <vPortValidateInterruptPriority+0x7c>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a24e:	4b0e      	ldr	r3, [pc, #56]	@ (800a288 <vPortValidateInterruptPriority+0x80>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	429a      	cmp	r2, r3
 800a254:	d90b      	bls.n	800a26e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a25a:	f383 8811 	msr	BASEPRI, r3
 800a25e:	f3bf 8f6f 	isb	sy
 800a262:	f3bf 8f4f 	dsb	sy
 800a266:	603b      	str	r3, [r7, #0]
}
 800a268:	bf00      	nop
 800a26a:	bf00      	nop
 800a26c:	e7fd      	b.n	800a26a <vPortValidateInterruptPriority+0x62>
	}
 800a26e:	bf00      	nop
 800a270:	3714      	adds	r7, #20
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	e000e3f0 	.word	0xe000e3f0
 800a280:	2000132c 	.word	0x2000132c
 800a284:	e000ed0c 	.word	0xe000ed0c
 800a288:	20001330 	.word	0x20001330

0800a28c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b08a      	sub	sp, #40	@ 0x28
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a294:	2300      	movs	r3, #0
 800a296:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a298:	f7fe fc74 	bl	8008b84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a29c:	4b5c      	ldr	r3, [pc, #368]	@ (800a410 <pvPortMalloc+0x184>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d101      	bne.n	800a2a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a2a4:	f000 f924 	bl	800a4f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a2a8:	4b5a      	ldr	r3, [pc, #360]	@ (800a414 <pvPortMalloc+0x188>)
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f040 8095 	bne.w	800a3e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d01e      	beq.n	800a2fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a2bc:	2208      	movs	r2, #8
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f003 0307 	and.w	r3, r3, #7
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d015      	beq.n	800a2fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f023 0307 	bic.w	r3, r3, #7
 800a2d4:	3308      	adds	r3, #8
 800a2d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f003 0307 	and.w	r3, r3, #7
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d00b      	beq.n	800a2fa <pvPortMalloc+0x6e>
	__asm volatile
 800a2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e6:	f383 8811 	msr	BASEPRI, r3
 800a2ea:	f3bf 8f6f 	isb	sy
 800a2ee:	f3bf 8f4f 	dsb	sy
 800a2f2:	617b      	str	r3, [r7, #20]
}
 800a2f4:	bf00      	nop
 800a2f6:	bf00      	nop
 800a2f8:	e7fd      	b.n	800a2f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d06f      	beq.n	800a3e0 <pvPortMalloc+0x154>
 800a300:	4b45      	ldr	r3, [pc, #276]	@ (800a418 <pvPortMalloc+0x18c>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	429a      	cmp	r2, r3
 800a308:	d86a      	bhi.n	800a3e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a30a:	4b44      	ldr	r3, [pc, #272]	@ (800a41c <pvPortMalloc+0x190>)
 800a30c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a30e:	4b43      	ldr	r3, [pc, #268]	@ (800a41c <pvPortMalloc+0x190>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a314:	e004      	b.n	800a320 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a318:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	429a      	cmp	r2, r3
 800a328:	d903      	bls.n	800a332 <pvPortMalloc+0xa6>
 800a32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1f1      	bne.n	800a316 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a332:	4b37      	ldr	r3, [pc, #220]	@ (800a410 <pvPortMalloc+0x184>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a338:	429a      	cmp	r2, r3
 800a33a:	d051      	beq.n	800a3e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a33c:	6a3b      	ldr	r3, [r7, #32]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2208      	movs	r2, #8
 800a342:	4413      	add	r3, r2
 800a344:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	6a3b      	ldr	r3, [r7, #32]
 800a34c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a350:	685a      	ldr	r2, [r3, #4]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	1ad2      	subs	r2, r2, r3
 800a356:	2308      	movs	r3, #8
 800a358:	005b      	lsls	r3, r3, #1
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d920      	bls.n	800a3a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a35e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4413      	add	r3, r2
 800a364:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	f003 0307 	and.w	r3, r3, #7
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d00b      	beq.n	800a388 <pvPortMalloc+0xfc>
	__asm volatile
 800a370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a374:	f383 8811 	msr	BASEPRI, r3
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	613b      	str	r3, [r7, #16]
}
 800a382:	bf00      	nop
 800a384:	bf00      	nop
 800a386:	e7fd      	b.n	800a384 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38a:	685a      	ldr	r2, [r3, #4]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	1ad2      	subs	r2, r2, r3
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a39a:	69b8      	ldr	r0, [r7, #24]
 800a39c:	f000 f90a 	bl	800a5b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a3a0:	4b1d      	ldr	r3, [pc, #116]	@ (800a418 <pvPortMalloc+0x18c>)
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	4a1b      	ldr	r2, [pc, #108]	@ (800a418 <pvPortMalloc+0x18c>)
 800a3ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a3ae:	4b1a      	ldr	r3, [pc, #104]	@ (800a418 <pvPortMalloc+0x18c>)
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	4b1b      	ldr	r3, [pc, #108]	@ (800a420 <pvPortMalloc+0x194>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d203      	bcs.n	800a3c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a3ba:	4b17      	ldr	r3, [pc, #92]	@ (800a418 <pvPortMalloc+0x18c>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a18      	ldr	r2, [pc, #96]	@ (800a420 <pvPortMalloc+0x194>)
 800a3c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c4:	685a      	ldr	r2, [r3, #4]
 800a3c6:	4b13      	ldr	r3, [pc, #76]	@ (800a414 <pvPortMalloc+0x188>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	431a      	orrs	r2, r3
 800a3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a3d6:	4b13      	ldr	r3, [pc, #76]	@ (800a424 <pvPortMalloc+0x198>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	4a11      	ldr	r2, [pc, #68]	@ (800a424 <pvPortMalloc+0x198>)
 800a3de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a3e0:	f7fe fbde 	bl	8008ba0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3e4:	69fb      	ldr	r3, [r7, #28]
 800a3e6:	f003 0307 	and.w	r3, r3, #7
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00b      	beq.n	800a406 <pvPortMalloc+0x17a>
	__asm volatile
 800a3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f2:	f383 8811 	msr	BASEPRI, r3
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	60fb      	str	r3, [r7, #12]
}
 800a400:	bf00      	nop
 800a402:	bf00      	nop
 800a404:	e7fd      	b.n	800a402 <pvPortMalloc+0x176>
	return pvReturn;
 800a406:	69fb      	ldr	r3, [r7, #28]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3728      	adds	r7, #40	@ 0x28
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	20001ef4 	.word	0x20001ef4
 800a414:	20001f08 	.word	0x20001f08
 800a418:	20001ef8 	.word	0x20001ef8
 800a41c:	20001eec 	.word	0x20001eec
 800a420:	20001efc 	.word	0x20001efc
 800a424:	20001f00 	.word	0x20001f00

0800a428 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b086      	sub	sp, #24
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d04f      	beq.n	800a4da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a43a:	2308      	movs	r3, #8
 800a43c:	425b      	negs	r3, r3
 800a43e:	697a      	ldr	r2, [r7, #20]
 800a440:	4413      	add	r3, r2
 800a442:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	685a      	ldr	r2, [r3, #4]
 800a44c:	4b25      	ldr	r3, [pc, #148]	@ (800a4e4 <vPortFree+0xbc>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4013      	ands	r3, r2
 800a452:	2b00      	cmp	r3, #0
 800a454:	d10b      	bne.n	800a46e <vPortFree+0x46>
	__asm volatile
 800a456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a45a:	f383 8811 	msr	BASEPRI, r3
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	60fb      	str	r3, [r7, #12]
}
 800a468:	bf00      	nop
 800a46a:	bf00      	nop
 800a46c:	e7fd      	b.n	800a46a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00b      	beq.n	800a48e <vPortFree+0x66>
	__asm volatile
 800a476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a47a:	f383 8811 	msr	BASEPRI, r3
 800a47e:	f3bf 8f6f 	isb	sy
 800a482:	f3bf 8f4f 	dsb	sy
 800a486:	60bb      	str	r3, [r7, #8]
}
 800a488:	bf00      	nop
 800a48a:	bf00      	nop
 800a48c:	e7fd      	b.n	800a48a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	685a      	ldr	r2, [r3, #4]
 800a492:	4b14      	ldr	r3, [pc, #80]	@ (800a4e4 <vPortFree+0xbc>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4013      	ands	r3, r2
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d01e      	beq.n	800a4da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d11a      	bne.n	800a4da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	685a      	ldr	r2, [r3, #4]
 800a4a8:	4b0e      	ldr	r3, [pc, #56]	@ (800a4e4 <vPortFree+0xbc>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	43db      	mvns	r3, r3
 800a4ae:	401a      	ands	r2, r3
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a4b4:	f7fe fb66 	bl	8008b84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	685a      	ldr	r2, [r3, #4]
 800a4bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a4e8 <vPortFree+0xc0>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	4a09      	ldr	r2, [pc, #36]	@ (800a4e8 <vPortFree+0xc0>)
 800a4c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a4c6:	6938      	ldr	r0, [r7, #16]
 800a4c8:	f000 f874 	bl	800a5b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a4cc:	4b07      	ldr	r3, [pc, #28]	@ (800a4ec <vPortFree+0xc4>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	4a06      	ldr	r2, [pc, #24]	@ (800a4ec <vPortFree+0xc4>)
 800a4d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a4d6:	f7fe fb63 	bl	8008ba0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a4da:	bf00      	nop
 800a4dc:	3718      	adds	r7, #24
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	20001f08 	.word	0x20001f08
 800a4e8:	20001ef8 	.word	0x20001ef8
 800a4ec:	20001f04 	.word	0x20001f04

0800a4f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a4f6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800a4fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a4fc:	4b27      	ldr	r3, [pc, #156]	@ (800a59c <prvHeapInit+0xac>)
 800a4fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f003 0307 	and.w	r3, r3, #7
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00c      	beq.n	800a524 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	3307      	adds	r3, #7
 800a50e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f023 0307 	bic.w	r3, r3, #7
 800a516:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	1ad3      	subs	r3, r2, r3
 800a51e:	4a1f      	ldr	r2, [pc, #124]	@ (800a59c <prvHeapInit+0xac>)
 800a520:	4413      	add	r3, r2
 800a522:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a528:	4a1d      	ldr	r2, [pc, #116]	@ (800a5a0 <prvHeapInit+0xb0>)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a52e:	4b1c      	ldr	r3, [pc, #112]	@ (800a5a0 <prvHeapInit+0xb0>)
 800a530:	2200      	movs	r2, #0
 800a532:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	68ba      	ldr	r2, [r7, #8]
 800a538:	4413      	add	r3, r2
 800a53a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a53c:	2208      	movs	r2, #8
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	1a9b      	subs	r3, r3, r2
 800a542:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f023 0307 	bic.w	r3, r3, #7
 800a54a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	4a15      	ldr	r2, [pc, #84]	@ (800a5a4 <prvHeapInit+0xb4>)
 800a550:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a552:	4b14      	ldr	r3, [pc, #80]	@ (800a5a4 <prvHeapInit+0xb4>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	2200      	movs	r2, #0
 800a558:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a55a:	4b12      	ldr	r3, [pc, #72]	@ (800a5a4 <prvHeapInit+0xb4>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2200      	movs	r2, #0
 800a560:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	1ad2      	subs	r2, r2, r3
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a570:	4b0c      	ldr	r3, [pc, #48]	@ (800a5a4 <prvHeapInit+0xb4>)
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	4a0a      	ldr	r2, [pc, #40]	@ (800a5a8 <prvHeapInit+0xb8>)
 800a57e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	4a09      	ldr	r2, [pc, #36]	@ (800a5ac <prvHeapInit+0xbc>)
 800a586:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a588:	4b09      	ldr	r3, [pc, #36]	@ (800a5b0 <prvHeapInit+0xc0>)
 800a58a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a58e:	601a      	str	r2, [r3, #0]
}
 800a590:	bf00      	nop
 800a592:	3714      	adds	r7, #20
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr
 800a59c:	20001334 	.word	0x20001334
 800a5a0:	20001eec 	.word	0x20001eec
 800a5a4:	20001ef4 	.word	0x20001ef4
 800a5a8:	20001efc 	.word	0x20001efc
 800a5ac:	20001ef8 	.word	0x20001ef8
 800a5b0:	20001f08 	.word	0x20001f08

0800a5b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a5bc:	4b28      	ldr	r3, [pc, #160]	@ (800a660 <prvInsertBlockIntoFreeList+0xac>)
 800a5be:	60fb      	str	r3, [r7, #12]
 800a5c0:	e002      	b.n	800a5c8 <prvInsertBlockIntoFreeList+0x14>
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	60fb      	str	r3, [r7, #12]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d8f7      	bhi.n	800a5c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	68ba      	ldr	r2, [r7, #8]
 800a5dc:	4413      	add	r3, r2
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d108      	bne.n	800a5f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	441a      	add	r2, r3
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	441a      	add	r2, r3
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	429a      	cmp	r2, r3
 800a608:	d118      	bne.n	800a63c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	4b15      	ldr	r3, [pc, #84]	@ (800a664 <prvInsertBlockIntoFreeList+0xb0>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	429a      	cmp	r2, r3
 800a614:	d00d      	beq.n	800a632 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	685a      	ldr	r2, [r3, #4]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	441a      	add	r2, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	601a      	str	r2, [r3, #0]
 800a630:	e008      	b.n	800a644 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a632:	4b0c      	ldr	r3, [pc, #48]	@ (800a664 <prvInsertBlockIntoFreeList+0xb0>)
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	601a      	str	r2, [r3, #0]
 800a63a:	e003      	b.n	800a644 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d002      	beq.n	800a652 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a652:	bf00      	nop
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	20001eec 	.word	0x20001eec
 800a664:	20001ef4 	.word	0x20001ef4

0800a668 <siprintf>:
 800a668:	b40e      	push	{r1, r2, r3}
 800a66a:	b500      	push	{lr}
 800a66c:	b09c      	sub	sp, #112	@ 0x70
 800a66e:	ab1d      	add	r3, sp, #116	@ 0x74
 800a670:	9002      	str	r0, [sp, #8]
 800a672:	9006      	str	r0, [sp, #24]
 800a674:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a678:	4809      	ldr	r0, [pc, #36]	@ (800a6a0 <siprintf+0x38>)
 800a67a:	9107      	str	r1, [sp, #28]
 800a67c:	9104      	str	r1, [sp, #16]
 800a67e:	4909      	ldr	r1, [pc, #36]	@ (800a6a4 <siprintf+0x3c>)
 800a680:	f853 2b04 	ldr.w	r2, [r3], #4
 800a684:	9105      	str	r1, [sp, #20]
 800a686:	6800      	ldr	r0, [r0, #0]
 800a688:	9301      	str	r3, [sp, #4]
 800a68a:	a902      	add	r1, sp, #8
 800a68c:	f000 f9f8 	bl	800aa80 <_svfiprintf_r>
 800a690:	9b02      	ldr	r3, [sp, #8]
 800a692:	2200      	movs	r2, #0
 800a694:	701a      	strb	r2, [r3, #0]
 800a696:	b01c      	add	sp, #112	@ 0x70
 800a698:	f85d eb04 	ldr.w	lr, [sp], #4
 800a69c:	b003      	add	sp, #12
 800a69e:	4770      	bx	lr
 800a6a0:	20000014 	.word	0x20000014
 800a6a4:	ffff0208 	.word	0xffff0208

0800a6a8 <memset>:
 800a6a8:	4402      	add	r2, r0
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d100      	bne.n	800a6b2 <memset+0xa>
 800a6b0:	4770      	bx	lr
 800a6b2:	f803 1b01 	strb.w	r1, [r3], #1
 800a6b6:	e7f9      	b.n	800a6ac <memset+0x4>

0800a6b8 <_reclaim_reent>:
 800a6b8:	4b29      	ldr	r3, [pc, #164]	@ (800a760 <_reclaim_reent+0xa8>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4283      	cmp	r3, r0
 800a6be:	b570      	push	{r4, r5, r6, lr}
 800a6c0:	4604      	mov	r4, r0
 800a6c2:	d04b      	beq.n	800a75c <_reclaim_reent+0xa4>
 800a6c4:	69c3      	ldr	r3, [r0, #28]
 800a6c6:	b1ab      	cbz	r3, 800a6f4 <_reclaim_reent+0x3c>
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	b16b      	cbz	r3, 800a6e8 <_reclaim_reent+0x30>
 800a6cc:	2500      	movs	r5, #0
 800a6ce:	69e3      	ldr	r3, [r4, #28]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	5959      	ldr	r1, [r3, r5]
 800a6d4:	2900      	cmp	r1, #0
 800a6d6:	d13b      	bne.n	800a750 <_reclaim_reent+0x98>
 800a6d8:	3504      	adds	r5, #4
 800a6da:	2d80      	cmp	r5, #128	@ 0x80
 800a6dc:	d1f7      	bne.n	800a6ce <_reclaim_reent+0x16>
 800a6de:	69e3      	ldr	r3, [r4, #28]
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	68d9      	ldr	r1, [r3, #12]
 800a6e4:	f000 f878 	bl	800a7d8 <_free_r>
 800a6e8:	69e3      	ldr	r3, [r4, #28]
 800a6ea:	6819      	ldr	r1, [r3, #0]
 800a6ec:	b111      	cbz	r1, 800a6f4 <_reclaim_reent+0x3c>
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f000 f872 	bl	800a7d8 <_free_r>
 800a6f4:	6961      	ldr	r1, [r4, #20]
 800a6f6:	b111      	cbz	r1, 800a6fe <_reclaim_reent+0x46>
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f000 f86d 	bl	800a7d8 <_free_r>
 800a6fe:	69e1      	ldr	r1, [r4, #28]
 800a700:	b111      	cbz	r1, 800a708 <_reclaim_reent+0x50>
 800a702:	4620      	mov	r0, r4
 800a704:	f000 f868 	bl	800a7d8 <_free_r>
 800a708:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a70a:	b111      	cbz	r1, 800a712 <_reclaim_reent+0x5a>
 800a70c:	4620      	mov	r0, r4
 800a70e:	f000 f863 	bl	800a7d8 <_free_r>
 800a712:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a714:	b111      	cbz	r1, 800a71c <_reclaim_reent+0x64>
 800a716:	4620      	mov	r0, r4
 800a718:	f000 f85e 	bl	800a7d8 <_free_r>
 800a71c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a71e:	b111      	cbz	r1, 800a726 <_reclaim_reent+0x6e>
 800a720:	4620      	mov	r0, r4
 800a722:	f000 f859 	bl	800a7d8 <_free_r>
 800a726:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a728:	b111      	cbz	r1, 800a730 <_reclaim_reent+0x78>
 800a72a:	4620      	mov	r0, r4
 800a72c:	f000 f854 	bl	800a7d8 <_free_r>
 800a730:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a732:	b111      	cbz	r1, 800a73a <_reclaim_reent+0x82>
 800a734:	4620      	mov	r0, r4
 800a736:	f000 f84f 	bl	800a7d8 <_free_r>
 800a73a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a73c:	b111      	cbz	r1, 800a744 <_reclaim_reent+0x8c>
 800a73e:	4620      	mov	r0, r4
 800a740:	f000 f84a 	bl	800a7d8 <_free_r>
 800a744:	6a23      	ldr	r3, [r4, #32]
 800a746:	b14b      	cbz	r3, 800a75c <_reclaim_reent+0xa4>
 800a748:	4620      	mov	r0, r4
 800a74a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a74e:	4718      	bx	r3
 800a750:	680e      	ldr	r6, [r1, #0]
 800a752:	4620      	mov	r0, r4
 800a754:	f000 f840 	bl	800a7d8 <_free_r>
 800a758:	4631      	mov	r1, r6
 800a75a:	e7bb      	b.n	800a6d4 <_reclaim_reent+0x1c>
 800a75c:	bd70      	pop	{r4, r5, r6, pc}
 800a75e:	bf00      	nop
 800a760:	20000014 	.word	0x20000014

0800a764 <__errno>:
 800a764:	4b01      	ldr	r3, [pc, #4]	@ (800a76c <__errno+0x8>)
 800a766:	6818      	ldr	r0, [r3, #0]
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	20000014 	.word	0x20000014

0800a770 <__libc_init_array>:
 800a770:	b570      	push	{r4, r5, r6, lr}
 800a772:	4d0d      	ldr	r5, [pc, #52]	@ (800a7a8 <__libc_init_array+0x38>)
 800a774:	4c0d      	ldr	r4, [pc, #52]	@ (800a7ac <__libc_init_array+0x3c>)
 800a776:	1b64      	subs	r4, r4, r5
 800a778:	10a4      	asrs	r4, r4, #2
 800a77a:	2600      	movs	r6, #0
 800a77c:	42a6      	cmp	r6, r4
 800a77e:	d109      	bne.n	800a794 <__libc_init_array+0x24>
 800a780:	4d0b      	ldr	r5, [pc, #44]	@ (800a7b0 <__libc_init_array+0x40>)
 800a782:	4c0c      	ldr	r4, [pc, #48]	@ (800a7b4 <__libc_init_array+0x44>)
 800a784:	f000 fc66 	bl	800b054 <_init>
 800a788:	1b64      	subs	r4, r4, r5
 800a78a:	10a4      	asrs	r4, r4, #2
 800a78c:	2600      	movs	r6, #0
 800a78e:	42a6      	cmp	r6, r4
 800a790:	d105      	bne.n	800a79e <__libc_init_array+0x2e>
 800a792:	bd70      	pop	{r4, r5, r6, pc}
 800a794:	f855 3b04 	ldr.w	r3, [r5], #4
 800a798:	4798      	blx	r3
 800a79a:	3601      	adds	r6, #1
 800a79c:	e7ee      	b.n	800a77c <__libc_init_array+0xc>
 800a79e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7a2:	4798      	blx	r3
 800a7a4:	3601      	adds	r6, #1
 800a7a6:	e7f2      	b.n	800a78e <__libc_init_array+0x1e>
 800a7a8:	0800b248 	.word	0x0800b248
 800a7ac:	0800b248 	.word	0x0800b248
 800a7b0:	0800b248 	.word	0x0800b248
 800a7b4:	0800b24c 	.word	0x0800b24c

0800a7b8 <__retarget_lock_acquire_recursive>:
 800a7b8:	4770      	bx	lr

0800a7ba <__retarget_lock_release_recursive>:
 800a7ba:	4770      	bx	lr

0800a7bc <memcpy>:
 800a7bc:	440a      	add	r2, r1
 800a7be:	4291      	cmp	r1, r2
 800a7c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7c4:	d100      	bne.n	800a7c8 <memcpy+0xc>
 800a7c6:	4770      	bx	lr
 800a7c8:	b510      	push	{r4, lr}
 800a7ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7d2:	4291      	cmp	r1, r2
 800a7d4:	d1f9      	bne.n	800a7ca <memcpy+0xe>
 800a7d6:	bd10      	pop	{r4, pc}

0800a7d8 <_free_r>:
 800a7d8:	b538      	push	{r3, r4, r5, lr}
 800a7da:	4605      	mov	r5, r0
 800a7dc:	2900      	cmp	r1, #0
 800a7de:	d041      	beq.n	800a864 <_free_r+0x8c>
 800a7e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7e4:	1f0c      	subs	r4, r1, #4
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	bfb8      	it	lt
 800a7ea:	18e4      	addlt	r4, r4, r3
 800a7ec:	f000 f8e0 	bl	800a9b0 <__malloc_lock>
 800a7f0:	4a1d      	ldr	r2, [pc, #116]	@ (800a868 <_free_r+0x90>)
 800a7f2:	6813      	ldr	r3, [r2, #0]
 800a7f4:	b933      	cbnz	r3, 800a804 <_free_r+0x2c>
 800a7f6:	6063      	str	r3, [r4, #4]
 800a7f8:	6014      	str	r4, [r2, #0]
 800a7fa:	4628      	mov	r0, r5
 800a7fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a800:	f000 b8dc 	b.w	800a9bc <__malloc_unlock>
 800a804:	42a3      	cmp	r3, r4
 800a806:	d908      	bls.n	800a81a <_free_r+0x42>
 800a808:	6820      	ldr	r0, [r4, #0]
 800a80a:	1821      	adds	r1, r4, r0
 800a80c:	428b      	cmp	r3, r1
 800a80e:	bf01      	itttt	eq
 800a810:	6819      	ldreq	r1, [r3, #0]
 800a812:	685b      	ldreq	r3, [r3, #4]
 800a814:	1809      	addeq	r1, r1, r0
 800a816:	6021      	streq	r1, [r4, #0]
 800a818:	e7ed      	b.n	800a7f6 <_free_r+0x1e>
 800a81a:	461a      	mov	r2, r3
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	b10b      	cbz	r3, 800a824 <_free_r+0x4c>
 800a820:	42a3      	cmp	r3, r4
 800a822:	d9fa      	bls.n	800a81a <_free_r+0x42>
 800a824:	6811      	ldr	r1, [r2, #0]
 800a826:	1850      	adds	r0, r2, r1
 800a828:	42a0      	cmp	r0, r4
 800a82a:	d10b      	bne.n	800a844 <_free_r+0x6c>
 800a82c:	6820      	ldr	r0, [r4, #0]
 800a82e:	4401      	add	r1, r0
 800a830:	1850      	adds	r0, r2, r1
 800a832:	4283      	cmp	r3, r0
 800a834:	6011      	str	r1, [r2, #0]
 800a836:	d1e0      	bne.n	800a7fa <_free_r+0x22>
 800a838:	6818      	ldr	r0, [r3, #0]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	6053      	str	r3, [r2, #4]
 800a83e:	4408      	add	r0, r1
 800a840:	6010      	str	r0, [r2, #0]
 800a842:	e7da      	b.n	800a7fa <_free_r+0x22>
 800a844:	d902      	bls.n	800a84c <_free_r+0x74>
 800a846:	230c      	movs	r3, #12
 800a848:	602b      	str	r3, [r5, #0]
 800a84a:	e7d6      	b.n	800a7fa <_free_r+0x22>
 800a84c:	6820      	ldr	r0, [r4, #0]
 800a84e:	1821      	adds	r1, r4, r0
 800a850:	428b      	cmp	r3, r1
 800a852:	bf04      	itt	eq
 800a854:	6819      	ldreq	r1, [r3, #0]
 800a856:	685b      	ldreq	r3, [r3, #4]
 800a858:	6063      	str	r3, [r4, #4]
 800a85a:	bf04      	itt	eq
 800a85c:	1809      	addeq	r1, r1, r0
 800a85e:	6021      	streq	r1, [r4, #0]
 800a860:	6054      	str	r4, [r2, #4]
 800a862:	e7ca      	b.n	800a7fa <_free_r+0x22>
 800a864:	bd38      	pop	{r3, r4, r5, pc}
 800a866:	bf00      	nop
 800a868:	20002050 	.word	0x20002050

0800a86c <sbrk_aligned>:
 800a86c:	b570      	push	{r4, r5, r6, lr}
 800a86e:	4e0f      	ldr	r6, [pc, #60]	@ (800a8ac <sbrk_aligned+0x40>)
 800a870:	460c      	mov	r4, r1
 800a872:	6831      	ldr	r1, [r6, #0]
 800a874:	4605      	mov	r5, r0
 800a876:	b911      	cbnz	r1, 800a87e <sbrk_aligned+0x12>
 800a878:	f000 fba6 	bl	800afc8 <_sbrk_r>
 800a87c:	6030      	str	r0, [r6, #0]
 800a87e:	4621      	mov	r1, r4
 800a880:	4628      	mov	r0, r5
 800a882:	f000 fba1 	bl	800afc8 <_sbrk_r>
 800a886:	1c43      	adds	r3, r0, #1
 800a888:	d103      	bne.n	800a892 <sbrk_aligned+0x26>
 800a88a:	f04f 34ff 	mov.w	r4, #4294967295
 800a88e:	4620      	mov	r0, r4
 800a890:	bd70      	pop	{r4, r5, r6, pc}
 800a892:	1cc4      	adds	r4, r0, #3
 800a894:	f024 0403 	bic.w	r4, r4, #3
 800a898:	42a0      	cmp	r0, r4
 800a89a:	d0f8      	beq.n	800a88e <sbrk_aligned+0x22>
 800a89c:	1a21      	subs	r1, r4, r0
 800a89e:	4628      	mov	r0, r5
 800a8a0:	f000 fb92 	bl	800afc8 <_sbrk_r>
 800a8a4:	3001      	adds	r0, #1
 800a8a6:	d1f2      	bne.n	800a88e <sbrk_aligned+0x22>
 800a8a8:	e7ef      	b.n	800a88a <sbrk_aligned+0x1e>
 800a8aa:	bf00      	nop
 800a8ac:	2000204c 	.word	0x2000204c

0800a8b0 <_malloc_r>:
 800a8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8b4:	1ccd      	adds	r5, r1, #3
 800a8b6:	f025 0503 	bic.w	r5, r5, #3
 800a8ba:	3508      	adds	r5, #8
 800a8bc:	2d0c      	cmp	r5, #12
 800a8be:	bf38      	it	cc
 800a8c0:	250c      	movcc	r5, #12
 800a8c2:	2d00      	cmp	r5, #0
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	db01      	blt.n	800a8cc <_malloc_r+0x1c>
 800a8c8:	42a9      	cmp	r1, r5
 800a8ca:	d904      	bls.n	800a8d6 <_malloc_r+0x26>
 800a8cc:	230c      	movs	r3, #12
 800a8ce:	6033      	str	r3, [r6, #0]
 800a8d0:	2000      	movs	r0, #0
 800a8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a9ac <_malloc_r+0xfc>
 800a8da:	f000 f869 	bl	800a9b0 <__malloc_lock>
 800a8de:	f8d8 3000 	ldr.w	r3, [r8]
 800a8e2:	461c      	mov	r4, r3
 800a8e4:	bb44      	cbnz	r4, 800a938 <_malloc_r+0x88>
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	f7ff ffbf 	bl	800a86c <sbrk_aligned>
 800a8ee:	1c43      	adds	r3, r0, #1
 800a8f0:	4604      	mov	r4, r0
 800a8f2:	d158      	bne.n	800a9a6 <_malloc_r+0xf6>
 800a8f4:	f8d8 4000 	ldr.w	r4, [r8]
 800a8f8:	4627      	mov	r7, r4
 800a8fa:	2f00      	cmp	r7, #0
 800a8fc:	d143      	bne.n	800a986 <_malloc_r+0xd6>
 800a8fe:	2c00      	cmp	r4, #0
 800a900:	d04b      	beq.n	800a99a <_malloc_r+0xea>
 800a902:	6823      	ldr	r3, [r4, #0]
 800a904:	4639      	mov	r1, r7
 800a906:	4630      	mov	r0, r6
 800a908:	eb04 0903 	add.w	r9, r4, r3
 800a90c:	f000 fb5c 	bl	800afc8 <_sbrk_r>
 800a910:	4581      	cmp	r9, r0
 800a912:	d142      	bne.n	800a99a <_malloc_r+0xea>
 800a914:	6821      	ldr	r1, [r4, #0]
 800a916:	1a6d      	subs	r5, r5, r1
 800a918:	4629      	mov	r1, r5
 800a91a:	4630      	mov	r0, r6
 800a91c:	f7ff ffa6 	bl	800a86c <sbrk_aligned>
 800a920:	3001      	adds	r0, #1
 800a922:	d03a      	beq.n	800a99a <_malloc_r+0xea>
 800a924:	6823      	ldr	r3, [r4, #0]
 800a926:	442b      	add	r3, r5
 800a928:	6023      	str	r3, [r4, #0]
 800a92a:	f8d8 3000 	ldr.w	r3, [r8]
 800a92e:	685a      	ldr	r2, [r3, #4]
 800a930:	bb62      	cbnz	r2, 800a98c <_malloc_r+0xdc>
 800a932:	f8c8 7000 	str.w	r7, [r8]
 800a936:	e00f      	b.n	800a958 <_malloc_r+0xa8>
 800a938:	6822      	ldr	r2, [r4, #0]
 800a93a:	1b52      	subs	r2, r2, r5
 800a93c:	d420      	bmi.n	800a980 <_malloc_r+0xd0>
 800a93e:	2a0b      	cmp	r2, #11
 800a940:	d917      	bls.n	800a972 <_malloc_r+0xc2>
 800a942:	1961      	adds	r1, r4, r5
 800a944:	42a3      	cmp	r3, r4
 800a946:	6025      	str	r5, [r4, #0]
 800a948:	bf18      	it	ne
 800a94a:	6059      	strne	r1, [r3, #4]
 800a94c:	6863      	ldr	r3, [r4, #4]
 800a94e:	bf08      	it	eq
 800a950:	f8c8 1000 	streq.w	r1, [r8]
 800a954:	5162      	str	r2, [r4, r5]
 800a956:	604b      	str	r3, [r1, #4]
 800a958:	4630      	mov	r0, r6
 800a95a:	f000 f82f 	bl	800a9bc <__malloc_unlock>
 800a95e:	f104 000b 	add.w	r0, r4, #11
 800a962:	1d23      	adds	r3, r4, #4
 800a964:	f020 0007 	bic.w	r0, r0, #7
 800a968:	1ac2      	subs	r2, r0, r3
 800a96a:	bf1c      	itt	ne
 800a96c:	1a1b      	subne	r3, r3, r0
 800a96e:	50a3      	strne	r3, [r4, r2]
 800a970:	e7af      	b.n	800a8d2 <_malloc_r+0x22>
 800a972:	6862      	ldr	r2, [r4, #4]
 800a974:	42a3      	cmp	r3, r4
 800a976:	bf0c      	ite	eq
 800a978:	f8c8 2000 	streq.w	r2, [r8]
 800a97c:	605a      	strne	r2, [r3, #4]
 800a97e:	e7eb      	b.n	800a958 <_malloc_r+0xa8>
 800a980:	4623      	mov	r3, r4
 800a982:	6864      	ldr	r4, [r4, #4]
 800a984:	e7ae      	b.n	800a8e4 <_malloc_r+0x34>
 800a986:	463c      	mov	r4, r7
 800a988:	687f      	ldr	r7, [r7, #4]
 800a98a:	e7b6      	b.n	800a8fa <_malloc_r+0x4a>
 800a98c:	461a      	mov	r2, r3
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	42a3      	cmp	r3, r4
 800a992:	d1fb      	bne.n	800a98c <_malloc_r+0xdc>
 800a994:	2300      	movs	r3, #0
 800a996:	6053      	str	r3, [r2, #4]
 800a998:	e7de      	b.n	800a958 <_malloc_r+0xa8>
 800a99a:	230c      	movs	r3, #12
 800a99c:	6033      	str	r3, [r6, #0]
 800a99e:	4630      	mov	r0, r6
 800a9a0:	f000 f80c 	bl	800a9bc <__malloc_unlock>
 800a9a4:	e794      	b.n	800a8d0 <_malloc_r+0x20>
 800a9a6:	6005      	str	r5, [r0, #0]
 800a9a8:	e7d6      	b.n	800a958 <_malloc_r+0xa8>
 800a9aa:	bf00      	nop
 800a9ac:	20002050 	.word	0x20002050

0800a9b0 <__malloc_lock>:
 800a9b0:	4801      	ldr	r0, [pc, #4]	@ (800a9b8 <__malloc_lock+0x8>)
 800a9b2:	f7ff bf01 	b.w	800a7b8 <__retarget_lock_acquire_recursive>
 800a9b6:	bf00      	nop
 800a9b8:	20002048 	.word	0x20002048

0800a9bc <__malloc_unlock>:
 800a9bc:	4801      	ldr	r0, [pc, #4]	@ (800a9c4 <__malloc_unlock+0x8>)
 800a9be:	f7ff befc 	b.w	800a7ba <__retarget_lock_release_recursive>
 800a9c2:	bf00      	nop
 800a9c4:	20002048 	.word	0x20002048

0800a9c8 <__ssputs_r>:
 800a9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9cc:	688e      	ldr	r6, [r1, #8]
 800a9ce:	461f      	mov	r7, r3
 800a9d0:	42be      	cmp	r6, r7
 800a9d2:	680b      	ldr	r3, [r1, #0]
 800a9d4:	4682      	mov	sl, r0
 800a9d6:	460c      	mov	r4, r1
 800a9d8:	4690      	mov	r8, r2
 800a9da:	d82d      	bhi.n	800aa38 <__ssputs_r+0x70>
 800a9dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a9e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a9e4:	d026      	beq.n	800aa34 <__ssputs_r+0x6c>
 800a9e6:	6965      	ldr	r5, [r4, #20]
 800a9e8:	6909      	ldr	r1, [r1, #16]
 800a9ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9ee:	eba3 0901 	sub.w	r9, r3, r1
 800a9f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9f6:	1c7b      	adds	r3, r7, #1
 800a9f8:	444b      	add	r3, r9
 800a9fa:	106d      	asrs	r5, r5, #1
 800a9fc:	429d      	cmp	r5, r3
 800a9fe:	bf38      	it	cc
 800aa00:	461d      	movcc	r5, r3
 800aa02:	0553      	lsls	r3, r2, #21
 800aa04:	d527      	bpl.n	800aa56 <__ssputs_r+0x8e>
 800aa06:	4629      	mov	r1, r5
 800aa08:	f7ff ff52 	bl	800a8b0 <_malloc_r>
 800aa0c:	4606      	mov	r6, r0
 800aa0e:	b360      	cbz	r0, 800aa6a <__ssputs_r+0xa2>
 800aa10:	6921      	ldr	r1, [r4, #16]
 800aa12:	464a      	mov	r2, r9
 800aa14:	f7ff fed2 	bl	800a7bc <memcpy>
 800aa18:	89a3      	ldrh	r3, [r4, #12]
 800aa1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aa1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa22:	81a3      	strh	r3, [r4, #12]
 800aa24:	6126      	str	r6, [r4, #16]
 800aa26:	6165      	str	r5, [r4, #20]
 800aa28:	444e      	add	r6, r9
 800aa2a:	eba5 0509 	sub.w	r5, r5, r9
 800aa2e:	6026      	str	r6, [r4, #0]
 800aa30:	60a5      	str	r5, [r4, #8]
 800aa32:	463e      	mov	r6, r7
 800aa34:	42be      	cmp	r6, r7
 800aa36:	d900      	bls.n	800aa3a <__ssputs_r+0x72>
 800aa38:	463e      	mov	r6, r7
 800aa3a:	6820      	ldr	r0, [r4, #0]
 800aa3c:	4632      	mov	r2, r6
 800aa3e:	4641      	mov	r1, r8
 800aa40:	f000 faa8 	bl	800af94 <memmove>
 800aa44:	68a3      	ldr	r3, [r4, #8]
 800aa46:	1b9b      	subs	r3, r3, r6
 800aa48:	60a3      	str	r3, [r4, #8]
 800aa4a:	6823      	ldr	r3, [r4, #0]
 800aa4c:	4433      	add	r3, r6
 800aa4e:	6023      	str	r3, [r4, #0]
 800aa50:	2000      	movs	r0, #0
 800aa52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa56:	462a      	mov	r2, r5
 800aa58:	f000 fac6 	bl	800afe8 <_realloc_r>
 800aa5c:	4606      	mov	r6, r0
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	d1e0      	bne.n	800aa24 <__ssputs_r+0x5c>
 800aa62:	6921      	ldr	r1, [r4, #16]
 800aa64:	4650      	mov	r0, sl
 800aa66:	f7ff feb7 	bl	800a7d8 <_free_r>
 800aa6a:	230c      	movs	r3, #12
 800aa6c:	f8ca 3000 	str.w	r3, [sl]
 800aa70:	89a3      	ldrh	r3, [r4, #12]
 800aa72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa76:	81a3      	strh	r3, [r4, #12]
 800aa78:	f04f 30ff 	mov.w	r0, #4294967295
 800aa7c:	e7e9      	b.n	800aa52 <__ssputs_r+0x8a>
	...

0800aa80 <_svfiprintf_r>:
 800aa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa84:	4698      	mov	r8, r3
 800aa86:	898b      	ldrh	r3, [r1, #12]
 800aa88:	061b      	lsls	r3, r3, #24
 800aa8a:	b09d      	sub	sp, #116	@ 0x74
 800aa8c:	4607      	mov	r7, r0
 800aa8e:	460d      	mov	r5, r1
 800aa90:	4614      	mov	r4, r2
 800aa92:	d510      	bpl.n	800aab6 <_svfiprintf_r+0x36>
 800aa94:	690b      	ldr	r3, [r1, #16]
 800aa96:	b973      	cbnz	r3, 800aab6 <_svfiprintf_r+0x36>
 800aa98:	2140      	movs	r1, #64	@ 0x40
 800aa9a:	f7ff ff09 	bl	800a8b0 <_malloc_r>
 800aa9e:	6028      	str	r0, [r5, #0]
 800aaa0:	6128      	str	r0, [r5, #16]
 800aaa2:	b930      	cbnz	r0, 800aab2 <_svfiprintf_r+0x32>
 800aaa4:	230c      	movs	r3, #12
 800aaa6:	603b      	str	r3, [r7, #0]
 800aaa8:	f04f 30ff 	mov.w	r0, #4294967295
 800aaac:	b01d      	add	sp, #116	@ 0x74
 800aaae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aab2:	2340      	movs	r3, #64	@ 0x40
 800aab4:	616b      	str	r3, [r5, #20]
 800aab6:	2300      	movs	r3, #0
 800aab8:	9309      	str	r3, [sp, #36]	@ 0x24
 800aaba:	2320      	movs	r3, #32
 800aabc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aac0:	f8cd 800c 	str.w	r8, [sp, #12]
 800aac4:	2330      	movs	r3, #48	@ 0x30
 800aac6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ac64 <_svfiprintf_r+0x1e4>
 800aaca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aace:	f04f 0901 	mov.w	r9, #1
 800aad2:	4623      	mov	r3, r4
 800aad4:	469a      	mov	sl, r3
 800aad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aada:	b10a      	cbz	r2, 800aae0 <_svfiprintf_r+0x60>
 800aadc:	2a25      	cmp	r2, #37	@ 0x25
 800aade:	d1f9      	bne.n	800aad4 <_svfiprintf_r+0x54>
 800aae0:	ebba 0b04 	subs.w	fp, sl, r4
 800aae4:	d00b      	beq.n	800aafe <_svfiprintf_r+0x7e>
 800aae6:	465b      	mov	r3, fp
 800aae8:	4622      	mov	r2, r4
 800aaea:	4629      	mov	r1, r5
 800aaec:	4638      	mov	r0, r7
 800aaee:	f7ff ff6b 	bl	800a9c8 <__ssputs_r>
 800aaf2:	3001      	adds	r0, #1
 800aaf4:	f000 80a7 	beq.w	800ac46 <_svfiprintf_r+0x1c6>
 800aaf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aafa:	445a      	add	r2, fp
 800aafc:	9209      	str	r2, [sp, #36]	@ 0x24
 800aafe:	f89a 3000 	ldrb.w	r3, [sl]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	f000 809f 	beq.w	800ac46 <_svfiprintf_r+0x1c6>
 800ab08:	2300      	movs	r3, #0
 800ab0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab12:	f10a 0a01 	add.w	sl, sl, #1
 800ab16:	9304      	str	r3, [sp, #16]
 800ab18:	9307      	str	r3, [sp, #28]
 800ab1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab1e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab20:	4654      	mov	r4, sl
 800ab22:	2205      	movs	r2, #5
 800ab24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab28:	484e      	ldr	r0, [pc, #312]	@ (800ac64 <_svfiprintf_r+0x1e4>)
 800ab2a:	f7f5 fb69 	bl	8000200 <memchr>
 800ab2e:	9a04      	ldr	r2, [sp, #16]
 800ab30:	b9d8      	cbnz	r0, 800ab6a <_svfiprintf_r+0xea>
 800ab32:	06d0      	lsls	r0, r2, #27
 800ab34:	bf44      	itt	mi
 800ab36:	2320      	movmi	r3, #32
 800ab38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab3c:	0711      	lsls	r1, r2, #28
 800ab3e:	bf44      	itt	mi
 800ab40:	232b      	movmi	r3, #43	@ 0x2b
 800ab42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab46:	f89a 3000 	ldrb.w	r3, [sl]
 800ab4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab4c:	d015      	beq.n	800ab7a <_svfiprintf_r+0xfa>
 800ab4e:	9a07      	ldr	r2, [sp, #28]
 800ab50:	4654      	mov	r4, sl
 800ab52:	2000      	movs	r0, #0
 800ab54:	f04f 0c0a 	mov.w	ip, #10
 800ab58:	4621      	mov	r1, r4
 800ab5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab5e:	3b30      	subs	r3, #48	@ 0x30
 800ab60:	2b09      	cmp	r3, #9
 800ab62:	d94b      	bls.n	800abfc <_svfiprintf_r+0x17c>
 800ab64:	b1b0      	cbz	r0, 800ab94 <_svfiprintf_r+0x114>
 800ab66:	9207      	str	r2, [sp, #28]
 800ab68:	e014      	b.n	800ab94 <_svfiprintf_r+0x114>
 800ab6a:	eba0 0308 	sub.w	r3, r0, r8
 800ab6e:	fa09 f303 	lsl.w	r3, r9, r3
 800ab72:	4313      	orrs	r3, r2
 800ab74:	9304      	str	r3, [sp, #16]
 800ab76:	46a2      	mov	sl, r4
 800ab78:	e7d2      	b.n	800ab20 <_svfiprintf_r+0xa0>
 800ab7a:	9b03      	ldr	r3, [sp, #12]
 800ab7c:	1d19      	adds	r1, r3, #4
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	9103      	str	r1, [sp, #12]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	bfbb      	ittet	lt
 800ab86:	425b      	neglt	r3, r3
 800ab88:	f042 0202 	orrlt.w	r2, r2, #2
 800ab8c:	9307      	strge	r3, [sp, #28]
 800ab8e:	9307      	strlt	r3, [sp, #28]
 800ab90:	bfb8      	it	lt
 800ab92:	9204      	strlt	r2, [sp, #16]
 800ab94:	7823      	ldrb	r3, [r4, #0]
 800ab96:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab98:	d10a      	bne.n	800abb0 <_svfiprintf_r+0x130>
 800ab9a:	7863      	ldrb	r3, [r4, #1]
 800ab9c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab9e:	d132      	bne.n	800ac06 <_svfiprintf_r+0x186>
 800aba0:	9b03      	ldr	r3, [sp, #12]
 800aba2:	1d1a      	adds	r2, r3, #4
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	9203      	str	r2, [sp, #12]
 800aba8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800abac:	3402      	adds	r4, #2
 800abae:	9305      	str	r3, [sp, #20]
 800abb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ac74 <_svfiprintf_r+0x1f4>
 800abb4:	7821      	ldrb	r1, [r4, #0]
 800abb6:	2203      	movs	r2, #3
 800abb8:	4650      	mov	r0, sl
 800abba:	f7f5 fb21 	bl	8000200 <memchr>
 800abbe:	b138      	cbz	r0, 800abd0 <_svfiprintf_r+0x150>
 800abc0:	9b04      	ldr	r3, [sp, #16]
 800abc2:	eba0 000a 	sub.w	r0, r0, sl
 800abc6:	2240      	movs	r2, #64	@ 0x40
 800abc8:	4082      	lsls	r2, r0
 800abca:	4313      	orrs	r3, r2
 800abcc:	3401      	adds	r4, #1
 800abce:	9304      	str	r3, [sp, #16]
 800abd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abd4:	4824      	ldr	r0, [pc, #144]	@ (800ac68 <_svfiprintf_r+0x1e8>)
 800abd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800abda:	2206      	movs	r2, #6
 800abdc:	f7f5 fb10 	bl	8000200 <memchr>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	d036      	beq.n	800ac52 <_svfiprintf_r+0x1d2>
 800abe4:	4b21      	ldr	r3, [pc, #132]	@ (800ac6c <_svfiprintf_r+0x1ec>)
 800abe6:	bb1b      	cbnz	r3, 800ac30 <_svfiprintf_r+0x1b0>
 800abe8:	9b03      	ldr	r3, [sp, #12]
 800abea:	3307      	adds	r3, #7
 800abec:	f023 0307 	bic.w	r3, r3, #7
 800abf0:	3308      	adds	r3, #8
 800abf2:	9303      	str	r3, [sp, #12]
 800abf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abf6:	4433      	add	r3, r6
 800abf8:	9309      	str	r3, [sp, #36]	@ 0x24
 800abfa:	e76a      	b.n	800aad2 <_svfiprintf_r+0x52>
 800abfc:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac00:	460c      	mov	r4, r1
 800ac02:	2001      	movs	r0, #1
 800ac04:	e7a8      	b.n	800ab58 <_svfiprintf_r+0xd8>
 800ac06:	2300      	movs	r3, #0
 800ac08:	3401      	adds	r4, #1
 800ac0a:	9305      	str	r3, [sp, #20]
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	f04f 0c0a 	mov.w	ip, #10
 800ac12:	4620      	mov	r0, r4
 800ac14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac18:	3a30      	subs	r2, #48	@ 0x30
 800ac1a:	2a09      	cmp	r2, #9
 800ac1c:	d903      	bls.n	800ac26 <_svfiprintf_r+0x1a6>
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d0c6      	beq.n	800abb0 <_svfiprintf_r+0x130>
 800ac22:	9105      	str	r1, [sp, #20]
 800ac24:	e7c4      	b.n	800abb0 <_svfiprintf_r+0x130>
 800ac26:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e7f0      	b.n	800ac12 <_svfiprintf_r+0x192>
 800ac30:	ab03      	add	r3, sp, #12
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	462a      	mov	r2, r5
 800ac36:	4b0e      	ldr	r3, [pc, #56]	@ (800ac70 <_svfiprintf_r+0x1f0>)
 800ac38:	a904      	add	r1, sp, #16
 800ac3a:	4638      	mov	r0, r7
 800ac3c:	f3af 8000 	nop.w
 800ac40:	1c42      	adds	r2, r0, #1
 800ac42:	4606      	mov	r6, r0
 800ac44:	d1d6      	bne.n	800abf4 <_svfiprintf_r+0x174>
 800ac46:	89ab      	ldrh	r3, [r5, #12]
 800ac48:	065b      	lsls	r3, r3, #25
 800ac4a:	f53f af2d 	bmi.w	800aaa8 <_svfiprintf_r+0x28>
 800ac4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac50:	e72c      	b.n	800aaac <_svfiprintf_r+0x2c>
 800ac52:	ab03      	add	r3, sp, #12
 800ac54:	9300      	str	r3, [sp, #0]
 800ac56:	462a      	mov	r2, r5
 800ac58:	4b05      	ldr	r3, [pc, #20]	@ (800ac70 <_svfiprintf_r+0x1f0>)
 800ac5a:	a904      	add	r1, sp, #16
 800ac5c:	4638      	mov	r0, r7
 800ac5e:	f000 f879 	bl	800ad54 <_printf_i>
 800ac62:	e7ed      	b.n	800ac40 <_svfiprintf_r+0x1c0>
 800ac64:	0800b20c 	.word	0x0800b20c
 800ac68:	0800b216 	.word	0x0800b216
 800ac6c:	00000000 	.word	0x00000000
 800ac70:	0800a9c9 	.word	0x0800a9c9
 800ac74:	0800b212 	.word	0x0800b212

0800ac78 <_printf_common>:
 800ac78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac7c:	4616      	mov	r6, r2
 800ac7e:	4698      	mov	r8, r3
 800ac80:	688a      	ldr	r2, [r1, #8]
 800ac82:	690b      	ldr	r3, [r1, #16]
 800ac84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	bfb8      	it	lt
 800ac8c:	4613      	movlt	r3, r2
 800ac8e:	6033      	str	r3, [r6, #0]
 800ac90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ac94:	4607      	mov	r7, r0
 800ac96:	460c      	mov	r4, r1
 800ac98:	b10a      	cbz	r2, 800ac9e <_printf_common+0x26>
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	6033      	str	r3, [r6, #0]
 800ac9e:	6823      	ldr	r3, [r4, #0]
 800aca0:	0699      	lsls	r1, r3, #26
 800aca2:	bf42      	ittt	mi
 800aca4:	6833      	ldrmi	r3, [r6, #0]
 800aca6:	3302      	addmi	r3, #2
 800aca8:	6033      	strmi	r3, [r6, #0]
 800acaa:	6825      	ldr	r5, [r4, #0]
 800acac:	f015 0506 	ands.w	r5, r5, #6
 800acb0:	d106      	bne.n	800acc0 <_printf_common+0x48>
 800acb2:	f104 0a19 	add.w	sl, r4, #25
 800acb6:	68e3      	ldr	r3, [r4, #12]
 800acb8:	6832      	ldr	r2, [r6, #0]
 800acba:	1a9b      	subs	r3, r3, r2
 800acbc:	42ab      	cmp	r3, r5
 800acbe:	dc26      	bgt.n	800ad0e <_printf_common+0x96>
 800acc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800acc4:	6822      	ldr	r2, [r4, #0]
 800acc6:	3b00      	subs	r3, #0
 800acc8:	bf18      	it	ne
 800acca:	2301      	movne	r3, #1
 800accc:	0692      	lsls	r2, r2, #26
 800acce:	d42b      	bmi.n	800ad28 <_printf_common+0xb0>
 800acd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800acd4:	4641      	mov	r1, r8
 800acd6:	4638      	mov	r0, r7
 800acd8:	47c8      	blx	r9
 800acda:	3001      	adds	r0, #1
 800acdc:	d01e      	beq.n	800ad1c <_printf_common+0xa4>
 800acde:	6823      	ldr	r3, [r4, #0]
 800ace0:	6922      	ldr	r2, [r4, #16]
 800ace2:	f003 0306 	and.w	r3, r3, #6
 800ace6:	2b04      	cmp	r3, #4
 800ace8:	bf02      	ittt	eq
 800acea:	68e5      	ldreq	r5, [r4, #12]
 800acec:	6833      	ldreq	r3, [r6, #0]
 800acee:	1aed      	subeq	r5, r5, r3
 800acf0:	68a3      	ldr	r3, [r4, #8]
 800acf2:	bf0c      	ite	eq
 800acf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acf8:	2500      	movne	r5, #0
 800acfa:	4293      	cmp	r3, r2
 800acfc:	bfc4      	itt	gt
 800acfe:	1a9b      	subgt	r3, r3, r2
 800ad00:	18ed      	addgt	r5, r5, r3
 800ad02:	2600      	movs	r6, #0
 800ad04:	341a      	adds	r4, #26
 800ad06:	42b5      	cmp	r5, r6
 800ad08:	d11a      	bne.n	800ad40 <_printf_common+0xc8>
 800ad0a:	2000      	movs	r0, #0
 800ad0c:	e008      	b.n	800ad20 <_printf_common+0xa8>
 800ad0e:	2301      	movs	r3, #1
 800ad10:	4652      	mov	r2, sl
 800ad12:	4641      	mov	r1, r8
 800ad14:	4638      	mov	r0, r7
 800ad16:	47c8      	blx	r9
 800ad18:	3001      	adds	r0, #1
 800ad1a:	d103      	bne.n	800ad24 <_printf_common+0xac>
 800ad1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad24:	3501      	adds	r5, #1
 800ad26:	e7c6      	b.n	800acb6 <_printf_common+0x3e>
 800ad28:	18e1      	adds	r1, r4, r3
 800ad2a:	1c5a      	adds	r2, r3, #1
 800ad2c:	2030      	movs	r0, #48	@ 0x30
 800ad2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ad32:	4422      	add	r2, r4
 800ad34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ad38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ad3c:	3302      	adds	r3, #2
 800ad3e:	e7c7      	b.n	800acd0 <_printf_common+0x58>
 800ad40:	2301      	movs	r3, #1
 800ad42:	4622      	mov	r2, r4
 800ad44:	4641      	mov	r1, r8
 800ad46:	4638      	mov	r0, r7
 800ad48:	47c8      	blx	r9
 800ad4a:	3001      	adds	r0, #1
 800ad4c:	d0e6      	beq.n	800ad1c <_printf_common+0xa4>
 800ad4e:	3601      	adds	r6, #1
 800ad50:	e7d9      	b.n	800ad06 <_printf_common+0x8e>
	...

0800ad54 <_printf_i>:
 800ad54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad58:	7e0f      	ldrb	r7, [r1, #24]
 800ad5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ad5c:	2f78      	cmp	r7, #120	@ 0x78
 800ad5e:	4691      	mov	r9, r2
 800ad60:	4680      	mov	r8, r0
 800ad62:	460c      	mov	r4, r1
 800ad64:	469a      	mov	sl, r3
 800ad66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ad6a:	d807      	bhi.n	800ad7c <_printf_i+0x28>
 800ad6c:	2f62      	cmp	r7, #98	@ 0x62
 800ad6e:	d80a      	bhi.n	800ad86 <_printf_i+0x32>
 800ad70:	2f00      	cmp	r7, #0
 800ad72:	f000 80d2 	beq.w	800af1a <_printf_i+0x1c6>
 800ad76:	2f58      	cmp	r7, #88	@ 0x58
 800ad78:	f000 80b9 	beq.w	800aeee <_printf_i+0x19a>
 800ad7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ad84:	e03a      	b.n	800adfc <_printf_i+0xa8>
 800ad86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ad8a:	2b15      	cmp	r3, #21
 800ad8c:	d8f6      	bhi.n	800ad7c <_printf_i+0x28>
 800ad8e:	a101      	add	r1, pc, #4	@ (adr r1, 800ad94 <_printf_i+0x40>)
 800ad90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad94:	0800aded 	.word	0x0800aded
 800ad98:	0800ae01 	.word	0x0800ae01
 800ad9c:	0800ad7d 	.word	0x0800ad7d
 800ada0:	0800ad7d 	.word	0x0800ad7d
 800ada4:	0800ad7d 	.word	0x0800ad7d
 800ada8:	0800ad7d 	.word	0x0800ad7d
 800adac:	0800ae01 	.word	0x0800ae01
 800adb0:	0800ad7d 	.word	0x0800ad7d
 800adb4:	0800ad7d 	.word	0x0800ad7d
 800adb8:	0800ad7d 	.word	0x0800ad7d
 800adbc:	0800ad7d 	.word	0x0800ad7d
 800adc0:	0800af01 	.word	0x0800af01
 800adc4:	0800ae2b 	.word	0x0800ae2b
 800adc8:	0800aebb 	.word	0x0800aebb
 800adcc:	0800ad7d 	.word	0x0800ad7d
 800add0:	0800ad7d 	.word	0x0800ad7d
 800add4:	0800af23 	.word	0x0800af23
 800add8:	0800ad7d 	.word	0x0800ad7d
 800addc:	0800ae2b 	.word	0x0800ae2b
 800ade0:	0800ad7d 	.word	0x0800ad7d
 800ade4:	0800ad7d 	.word	0x0800ad7d
 800ade8:	0800aec3 	.word	0x0800aec3
 800adec:	6833      	ldr	r3, [r6, #0]
 800adee:	1d1a      	adds	r2, r3, #4
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	6032      	str	r2, [r6, #0]
 800adf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800adf8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800adfc:	2301      	movs	r3, #1
 800adfe:	e09d      	b.n	800af3c <_printf_i+0x1e8>
 800ae00:	6833      	ldr	r3, [r6, #0]
 800ae02:	6820      	ldr	r0, [r4, #0]
 800ae04:	1d19      	adds	r1, r3, #4
 800ae06:	6031      	str	r1, [r6, #0]
 800ae08:	0606      	lsls	r6, r0, #24
 800ae0a:	d501      	bpl.n	800ae10 <_printf_i+0xbc>
 800ae0c:	681d      	ldr	r5, [r3, #0]
 800ae0e:	e003      	b.n	800ae18 <_printf_i+0xc4>
 800ae10:	0645      	lsls	r5, r0, #25
 800ae12:	d5fb      	bpl.n	800ae0c <_printf_i+0xb8>
 800ae14:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ae18:	2d00      	cmp	r5, #0
 800ae1a:	da03      	bge.n	800ae24 <_printf_i+0xd0>
 800ae1c:	232d      	movs	r3, #45	@ 0x2d
 800ae1e:	426d      	negs	r5, r5
 800ae20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae24:	4859      	ldr	r0, [pc, #356]	@ (800af8c <_printf_i+0x238>)
 800ae26:	230a      	movs	r3, #10
 800ae28:	e011      	b.n	800ae4e <_printf_i+0xfa>
 800ae2a:	6821      	ldr	r1, [r4, #0]
 800ae2c:	6833      	ldr	r3, [r6, #0]
 800ae2e:	0608      	lsls	r0, r1, #24
 800ae30:	f853 5b04 	ldr.w	r5, [r3], #4
 800ae34:	d402      	bmi.n	800ae3c <_printf_i+0xe8>
 800ae36:	0649      	lsls	r1, r1, #25
 800ae38:	bf48      	it	mi
 800ae3a:	b2ad      	uxthmi	r5, r5
 800ae3c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ae3e:	4853      	ldr	r0, [pc, #332]	@ (800af8c <_printf_i+0x238>)
 800ae40:	6033      	str	r3, [r6, #0]
 800ae42:	bf14      	ite	ne
 800ae44:	230a      	movne	r3, #10
 800ae46:	2308      	moveq	r3, #8
 800ae48:	2100      	movs	r1, #0
 800ae4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ae4e:	6866      	ldr	r6, [r4, #4]
 800ae50:	60a6      	str	r6, [r4, #8]
 800ae52:	2e00      	cmp	r6, #0
 800ae54:	bfa2      	ittt	ge
 800ae56:	6821      	ldrge	r1, [r4, #0]
 800ae58:	f021 0104 	bicge.w	r1, r1, #4
 800ae5c:	6021      	strge	r1, [r4, #0]
 800ae5e:	b90d      	cbnz	r5, 800ae64 <_printf_i+0x110>
 800ae60:	2e00      	cmp	r6, #0
 800ae62:	d04b      	beq.n	800aefc <_printf_i+0x1a8>
 800ae64:	4616      	mov	r6, r2
 800ae66:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae6a:	fb03 5711 	mls	r7, r3, r1, r5
 800ae6e:	5dc7      	ldrb	r7, [r0, r7]
 800ae70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae74:	462f      	mov	r7, r5
 800ae76:	42bb      	cmp	r3, r7
 800ae78:	460d      	mov	r5, r1
 800ae7a:	d9f4      	bls.n	800ae66 <_printf_i+0x112>
 800ae7c:	2b08      	cmp	r3, #8
 800ae7e:	d10b      	bne.n	800ae98 <_printf_i+0x144>
 800ae80:	6823      	ldr	r3, [r4, #0]
 800ae82:	07df      	lsls	r7, r3, #31
 800ae84:	d508      	bpl.n	800ae98 <_printf_i+0x144>
 800ae86:	6923      	ldr	r3, [r4, #16]
 800ae88:	6861      	ldr	r1, [r4, #4]
 800ae8a:	4299      	cmp	r1, r3
 800ae8c:	bfde      	ittt	le
 800ae8e:	2330      	movle	r3, #48	@ 0x30
 800ae90:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ae94:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ae98:	1b92      	subs	r2, r2, r6
 800ae9a:	6122      	str	r2, [r4, #16]
 800ae9c:	f8cd a000 	str.w	sl, [sp]
 800aea0:	464b      	mov	r3, r9
 800aea2:	aa03      	add	r2, sp, #12
 800aea4:	4621      	mov	r1, r4
 800aea6:	4640      	mov	r0, r8
 800aea8:	f7ff fee6 	bl	800ac78 <_printf_common>
 800aeac:	3001      	adds	r0, #1
 800aeae:	d14a      	bne.n	800af46 <_printf_i+0x1f2>
 800aeb0:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb4:	b004      	add	sp, #16
 800aeb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeba:	6823      	ldr	r3, [r4, #0]
 800aebc:	f043 0320 	orr.w	r3, r3, #32
 800aec0:	6023      	str	r3, [r4, #0]
 800aec2:	4833      	ldr	r0, [pc, #204]	@ (800af90 <_printf_i+0x23c>)
 800aec4:	2778      	movs	r7, #120	@ 0x78
 800aec6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aeca:	6823      	ldr	r3, [r4, #0]
 800aecc:	6831      	ldr	r1, [r6, #0]
 800aece:	061f      	lsls	r7, r3, #24
 800aed0:	f851 5b04 	ldr.w	r5, [r1], #4
 800aed4:	d402      	bmi.n	800aedc <_printf_i+0x188>
 800aed6:	065f      	lsls	r7, r3, #25
 800aed8:	bf48      	it	mi
 800aeda:	b2ad      	uxthmi	r5, r5
 800aedc:	6031      	str	r1, [r6, #0]
 800aede:	07d9      	lsls	r1, r3, #31
 800aee0:	bf44      	itt	mi
 800aee2:	f043 0320 	orrmi.w	r3, r3, #32
 800aee6:	6023      	strmi	r3, [r4, #0]
 800aee8:	b11d      	cbz	r5, 800aef2 <_printf_i+0x19e>
 800aeea:	2310      	movs	r3, #16
 800aeec:	e7ac      	b.n	800ae48 <_printf_i+0xf4>
 800aeee:	4827      	ldr	r0, [pc, #156]	@ (800af8c <_printf_i+0x238>)
 800aef0:	e7e9      	b.n	800aec6 <_printf_i+0x172>
 800aef2:	6823      	ldr	r3, [r4, #0]
 800aef4:	f023 0320 	bic.w	r3, r3, #32
 800aef8:	6023      	str	r3, [r4, #0]
 800aefa:	e7f6      	b.n	800aeea <_printf_i+0x196>
 800aefc:	4616      	mov	r6, r2
 800aefe:	e7bd      	b.n	800ae7c <_printf_i+0x128>
 800af00:	6833      	ldr	r3, [r6, #0]
 800af02:	6825      	ldr	r5, [r4, #0]
 800af04:	6961      	ldr	r1, [r4, #20]
 800af06:	1d18      	adds	r0, r3, #4
 800af08:	6030      	str	r0, [r6, #0]
 800af0a:	062e      	lsls	r6, r5, #24
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	d501      	bpl.n	800af14 <_printf_i+0x1c0>
 800af10:	6019      	str	r1, [r3, #0]
 800af12:	e002      	b.n	800af1a <_printf_i+0x1c6>
 800af14:	0668      	lsls	r0, r5, #25
 800af16:	d5fb      	bpl.n	800af10 <_printf_i+0x1bc>
 800af18:	8019      	strh	r1, [r3, #0]
 800af1a:	2300      	movs	r3, #0
 800af1c:	6123      	str	r3, [r4, #16]
 800af1e:	4616      	mov	r6, r2
 800af20:	e7bc      	b.n	800ae9c <_printf_i+0x148>
 800af22:	6833      	ldr	r3, [r6, #0]
 800af24:	1d1a      	adds	r2, r3, #4
 800af26:	6032      	str	r2, [r6, #0]
 800af28:	681e      	ldr	r6, [r3, #0]
 800af2a:	6862      	ldr	r2, [r4, #4]
 800af2c:	2100      	movs	r1, #0
 800af2e:	4630      	mov	r0, r6
 800af30:	f7f5 f966 	bl	8000200 <memchr>
 800af34:	b108      	cbz	r0, 800af3a <_printf_i+0x1e6>
 800af36:	1b80      	subs	r0, r0, r6
 800af38:	6060      	str	r0, [r4, #4]
 800af3a:	6863      	ldr	r3, [r4, #4]
 800af3c:	6123      	str	r3, [r4, #16]
 800af3e:	2300      	movs	r3, #0
 800af40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af44:	e7aa      	b.n	800ae9c <_printf_i+0x148>
 800af46:	6923      	ldr	r3, [r4, #16]
 800af48:	4632      	mov	r2, r6
 800af4a:	4649      	mov	r1, r9
 800af4c:	4640      	mov	r0, r8
 800af4e:	47d0      	blx	sl
 800af50:	3001      	adds	r0, #1
 800af52:	d0ad      	beq.n	800aeb0 <_printf_i+0x15c>
 800af54:	6823      	ldr	r3, [r4, #0]
 800af56:	079b      	lsls	r3, r3, #30
 800af58:	d413      	bmi.n	800af82 <_printf_i+0x22e>
 800af5a:	68e0      	ldr	r0, [r4, #12]
 800af5c:	9b03      	ldr	r3, [sp, #12]
 800af5e:	4298      	cmp	r0, r3
 800af60:	bfb8      	it	lt
 800af62:	4618      	movlt	r0, r3
 800af64:	e7a6      	b.n	800aeb4 <_printf_i+0x160>
 800af66:	2301      	movs	r3, #1
 800af68:	4632      	mov	r2, r6
 800af6a:	4649      	mov	r1, r9
 800af6c:	4640      	mov	r0, r8
 800af6e:	47d0      	blx	sl
 800af70:	3001      	adds	r0, #1
 800af72:	d09d      	beq.n	800aeb0 <_printf_i+0x15c>
 800af74:	3501      	adds	r5, #1
 800af76:	68e3      	ldr	r3, [r4, #12]
 800af78:	9903      	ldr	r1, [sp, #12]
 800af7a:	1a5b      	subs	r3, r3, r1
 800af7c:	42ab      	cmp	r3, r5
 800af7e:	dcf2      	bgt.n	800af66 <_printf_i+0x212>
 800af80:	e7eb      	b.n	800af5a <_printf_i+0x206>
 800af82:	2500      	movs	r5, #0
 800af84:	f104 0619 	add.w	r6, r4, #25
 800af88:	e7f5      	b.n	800af76 <_printf_i+0x222>
 800af8a:	bf00      	nop
 800af8c:	0800b21d 	.word	0x0800b21d
 800af90:	0800b22e 	.word	0x0800b22e

0800af94 <memmove>:
 800af94:	4288      	cmp	r0, r1
 800af96:	b510      	push	{r4, lr}
 800af98:	eb01 0402 	add.w	r4, r1, r2
 800af9c:	d902      	bls.n	800afa4 <memmove+0x10>
 800af9e:	4284      	cmp	r4, r0
 800afa0:	4623      	mov	r3, r4
 800afa2:	d807      	bhi.n	800afb4 <memmove+0x20>
 800afa4:	1e43      	subs	r3, r0, #1
 800afa6:	42a1      	cmp	r1, r4
 800afa8:	d008      	beq.n	800afbc <memmove+0x28>
 800afaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800afb2:	e7f8      	b.n	800afa6 <memmove+0x12>
 800afb4:	4402      	add	r2, r0
 800afb6:	4601      	mov	r1, r0
 800afb8:	428a      	cmp	r2, r1
 800afba:	d100      	bne.n	800afbe <memmove+0x2a>
 800afbc:	bd10      	pop	{r4, pc}
 800afbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800afc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800afc6:	e7f7      	b.n	800afb8 <memmove+0x24>

0800afc8 <_sbrk_r>:
 800afc8:	b538      	push	{r3, r4, r5, lr}
 800afca:	4d06      	ldr	r5, [pc, #24]	@ (800afe4 <_sbrk_r+0x1c>)
 800afcc:	2300      	movs	r3, #0
 800afce:	4604      	mov	r4, r0
 800afd0:	4608      	mov	r0, r1
 800afd2:	602b      	str	r3, [r5, #0]
 800afd4:	f7f6 fd3e 	bl	8001a54 <_sbrk>
 800afd8:	1c43      	adds	r3, r0, #1
 800afda:	d102      	bne.n	800afe2 <_sbrk_r+0x1a>
 800afdc:	682b      	ldr	r3, [r5, #0]
 800afde:	b103      	cbz	r3, 800afe2 <_sbrk_r+0x1a>
 800afe0:	6023      	str	r3, [r4, #0]
 800afe2:	bd38      	pop	{r3, r4, r5, pc}
 800afe4:	20002044 	.word	0x20002044

0800afe8 <_realloc_r>:
 800afe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afec:	4680      	mov	r8, r0
 800afee:	4615      	mov	r5, r2
 800aff0:	460c      	mov	r4, r1
 800aff2:	b921      	cbnz	r1, 800affe <_realloc_r+0x16>
 800aff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aff8:	4611      	mov	r1, r2
 800affa:	f7ff bc59 	b.w	800a8b0 <_malloc_r>
 800affe:	b92a      	cbnz	r2, 800b00c <_realloc_r+0x24>
 800b000:	f7ff fbea 	bl	800a7d8 <_free_r>
 800b004:	2400      	movs	r4, #0
 800b006:	4620      	mov	r0, r4
 800b008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b00c:	f000 f81a 	bl	800b044 <_malloc_usable_size_r>
 800b010:	4285      	cmp	r5, r0
 800b012:	4606      	mov	r6, r0
 800b014:	d802      	bhi.n	800b01c <_realloc_r+0x34>
 800b016:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b01a:	d8f4      	bhi.n	800b006 <_realloc_r+0x1e>
 800b01c:	4629      	mov	r1, r5
 800b01e:	4640      	mov	r0, r8
 800b020:	f7ff fc46 	bl	800a8b0 <_malloc_r>
 800b024:	4607      	mov	r7, r0
 800b026:	2800      	cmp	r0, #0
 800b028:	d0ec      	beq.n	800b004 <_realloc_r+0x1c>
 800b02a:	42b5      	cmp	r5, r6
 800b02c:	462a      	mov	r2, r5
 800b02e:	4621      	mov	r1, r4
 800b030:	bf28      	it	cs
 800b032:	4632      	movcs	r2, r6
 800b034:	f7ff fbc2 	bl	800a7bc <memcpy>
 800b038:	4621      	mov	r1, r4
 800b03a:	4640      	mov	r0, r8
 800b03c:	f7ff fbcc 	bl	800a7d8 <_free_r>
 800b040:	463c      	mov	r4, r7
 800b042:	e7e0      	b.n	800b006 <_realloc_r+0x1e>

0800b044 <_malloc_usable_size_r>:
 800b044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b048:	1f18      	subs	r0, r3, #4
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	bfbc      	itt	lt
 800b04e:	580b      	ldrlt	r3, [r1, r0]
 800b050:	18c0      	addlt	r0, r0, r3
 800b052:	4770      	bx	lr

0800b054 <_init>:
 800b054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b056:	bf00      	nop
 800b058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b05a:	bc08      	pop	{r3}
 800b05c:	469e      	mov	lr, r3
 800b05e:	4770      	bx	lr

0800b060 <_fini>:
 800b060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b062:	bf00      	nop
 800b064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b066:	bc08      	pop	{r3}
 800b068:	469e      	mov	lr, r3
 800b06a:	4770      	bx	lr
