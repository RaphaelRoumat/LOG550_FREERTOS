
DEMO_FREERTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c70c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  0800c8cc  0800c8cc  0000d8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cad8  0800cad8  0000e074  2**0
                  CONTENTS
  4 .ARM          00000008  0800cad8  0800cad8  0000dad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cae0  0800cae0  0000e074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cae0  0800cae0  0000dae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cae4  0800cae4  0000dae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800cae8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002048  20000074  0800cb5c  0000e074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020bc  0800cb5c  0000e0bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cb9a  00000000  00000000  0000e0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005073  00000000  00000000  0003ac3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002518  00000000  00000000  0003fcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ced  00000000  00000000  000421d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006163  00000000  00000000  00043ebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002af73  00000000  00000000  0004a020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00133d44  00000000  00000000  00074f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a8cd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a468  00000000  00000000  001a8d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  001b3184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c8b4 	.word	0x0800c8b4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	0800c8b4 	.word	0x0800c8b4

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f001 fda4 	bl	80020e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f886 	bl	80006a8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800059c:	f000 f8e6 	bl	800076c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 fbfe 	bl	8000da0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005a4:	f000 f912 	bl	80007cc <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80005a8:	f000 f974 	bl	8000894 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 80005ac:	f000 f9aa 	bl	8000904 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005b0:	f000 f9e8 	bl	8000984 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80005b4:	f000 fa26 	bl	8000a04 <MX_OCTOSPI1_Init>
  MX_SPI3_Init();
 80005b8:	f000 fa7a 	bl	8000ab0 <MX_SPI3_Init>
  MX_UART4_Init();
 80005bc:	f000 fab6 	bl	8000b2c <MX_UART4_Init>
  MX_USART1_UART_Init();
 80005c0:	f000 fb00 	bl	8000bc4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005c4:	f000 fb4a 	bl	8000c5c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005c8:	f000 fb96 	bl	8000cf8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80005cc:	f000 fbe0 	bl	8000d90 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  BSP_TSENSOR_Init();
 80005d0:	f001 fca8 	bl	8001f24 <BSP_TSENSOR_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005d4:	f007 fea4 	bl	8008320 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 0, &myBinarySem01_attributes);
 80005d8:	4a20      	ldr	r2, [pc, #128]	@ (800065c <main+0xcc>)
 80005da:	2100      	movs	r1, #0
 80005dc:	2001      	movs	r0, #1
 80005de:	f007 ffd8 	bl	8008592 <osSemaphoreNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a1e      	ldr	r2, [pc, #120]	@ (8000660 <main+0xd0>)
 80005e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	osSemaphoreRelease(myBinarySem01Handle);
 80005e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000660 <main+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f008 f8ab 	bl	8008748 <osSemaphoreRelease>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myDataQueue */
  myDataQueueHandle = osMessageQueueNew (2, sizeof(uint16_t), &myDataQueue_attributes);
 80005f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000664 <main+0xd4>)
 80005f4:	2102      	movs	r1, #2
 80005f6:	2002      	movs	r0, #2
 80005f8:	f008 f8ea 	bl	80087d0 <osMessageQueueNew>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a1a      	ldr	r2, [pc, #104]	@ (8000668 <main+0xd8>)
 8000600:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  myLedTaskHandle = osThreadNew(LED_flash_task_run, NULL, &myLedTask_attributes);
 8000602:	4a1a      	ldr	r2, [pc, #104]	@ (800066c <main+0xdc>)
 8000604:	2100      	movs	r1, #0
 8000606:	481a      	ldr	r0, [pc, #104]	@ (8000670 <main+0xe0>)
 8000608:	f007 fed4 	bl	80083b4 <osThreadNew>
 800060c:	4603      	mov	r3, r0
 800060e:	4a19      	ldr	r2, [pc, #100]	@ (8000674 <main+0xe4>)
 8000610:	6013      	str	r3, [r2, #0]

  myUART_RX_TaskHandle = osThreadNew(UART_RX_task_run, NULL, &myUART_RX_TaskHandle_attributes);
 8000612:	4a19      	ldr	r2, [pc, #100]	@ (8000678 <main+0xe8>)
 8000614:	2100      	movs	r1, #0
 8000616:	4819      	ldr	r0, [pc, #100]	@ (800067c <main+0xec>)
 8000618:	f007 fecc 	bl	80083b4 <osThreadNew>
 800061c:	4603      	mov	r3, r0
 800061e:	4a18      	ldr	r2, [pc, #96]	@ (8000680 <main+0xf0>)
 8000620:	6013      	str	r3, [r2, #0]

  myUartSendTaskHandle = osThreadNew(UART_send_task_run, NULL, &myUartSendTask_attributes);
 8000622:	4a18      	ldr	r2, [pc, #96]	@ (8000684 <main+0xf4>)
 8000624:	2100      	movs	r1, #0
 8000626:	4818      	ldr	r0, [pc, #96]	@ (8000688 <main+0xf8>)
 8000628:	f007 fec4 	bl	80083b4 <osThreadNew>
 800062c:	4603      	mov	r3, r0
 800062e:	4a17      	ldr	r2, [pc, #92]	@ (800068c <main+0xfc>)
 8000630:	6013      	str	r3, [r2, #0]

  myADC_Cmd_TaskHandle = osThreadNew(ADC_CMD_task_run, NULL, &myADC_Cmd__TaskHandle_attributes);
 8000632:	4a17      	ldr	r2, [pc, #92]	@ (8000690 <main+0x100>)
 8000634:	2100      	movs	r1, #0
 8000636:	4817      	ldr	r0, [pc, #92]	@ (8000694 <main+0x104>)
 8000638:	f007 febc 	bl	80083b4 <osThreadNew>
 800063c:	4603      	mov	r3, r0
 800063e:	4a16      	ldr	r2, [pc, #88]	@ (8000698 <main+0x108>)
 8000640:	6013      	str	r3, [r2, #0]

  myTempReadingTaskHandle = osThreadNew(TEMP_Read,NULL, &myTempReadingTaskHandle_attributes);
 8000642:	4a16      	ldr	r2, [pc, #88]	@ (800069c <main+0x10c>)
 8000644:	2100      	movs	r1, #0
 8000646:	4816      	ldr	r0, [pc, #88]	@ (80006a0 <main+0x110>)
 8000648:	f007 feb4 	bl	80083b4 <osThreadNew>
 800064c:	4603      	mov	r3, r0
 800064e:	4a15      	ldr	r2, [pc, #84]	@ (80006a4 <main+0x114>)
 8000650:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000652:	f007 fe89 	bl	8008368 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000656:	bf00      	nop
 8000658:	e7fd      	b.n	8000656 <main+0xc6>
 800065a:	bf00      	nop
 800065c:	0800ca00 	.word	0x0800ca00
 8000660:	200004f0 	.word	0x200004f0
 8000664:	0800c9e8 	.word	0x0800c9e8
 8000668:	200004ec 	.word	0x200004ec
 800066c:	0800c958 	.word	0x0800c958
 8000670:	08001049 	.word	0x08001049
 8000674:	200004dc 	.word	0x200004dc
 8000678:	0800c9a0 	.word	0x0800c9a0
 800067c:	08001169 	.word	0x08001169
 8000680:	200004e4 	.word	0x200004e4
 8000684:	0800c97c 	.word	0x0800c97c
 8000688:	08001101 	.word	0x08001101
 800068c:	200004e0 	.word	0x200004e0
 8000690:	0800c9c4 	.word	0x0800c9c4
 8000694:	08001265 	.word	0x08001265
 8000698:	200004e8 	.word	0x200004e8
 800069c:	0800ca10 	.word	0x0800ca10
 80006a0:	08001205 	.word	0x08001205
 80006a4:	200004f4 	.word	0x200004f4

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b096      	sub	sp, #88	@ 0x58
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	2244      	movs	r2, #68	@ 0x44
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f00b fc26 	bl	800bf08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	463b      	mov	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80006ca:	2000      	movs	r0, #0
 80006cc:	f004 fdf8 	bl	80052c0 <HAL_PWREx_ControlVoltageScaling>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x32>
  {
    Error_Handler();
 80006d6:	f000 fe0d 	bl	80012f4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006da:	f004 fdc1 	bl	8005260 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006de:	4b22      	ldr	r3, [pc, #136]	@ (8000768 <SystemClock_Config+0xc0>)
 80006e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80006e4:	4a20      	ldr	r2, [pc, #128]	@ (8000768 <SystemClock_Config+0xc0>)
 80006e6:	f023 0318 	bic.w	r3, r3, #24
 80006ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006ee:	2314      	movs	r3, #20
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006f2:	2301      	movs	r3, #1
 80006f4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006f6:	2301      	movs	r3, #1
 80006f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006fe:	2360      	movs	r3, #96	@ 0x60
 8000700:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000706:	2301      	movs	r3, #1
 8000708:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800070a:	2301      	movs	r3, #1
 800070c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800070e:	233c      	movs	r3, #60	@ 0x3c
 8000710:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000712:	2302      	movs	r3, #2
 8000714:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000716:	2302      	movs	r3, #2
 8000718:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800071a:	2302      	movs	r3, #2
 800071c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4618      	mov	r0, r3
 8000724:	f004 fe70 	bl	8005408 <HAL_RCC_OscConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800072e:	f000 fde1 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	230f      	movs	r3, #15
 8000734:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	2303      	movs	r3, #3
 8000738:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000746:	463b      	mov	r3, r7
 8000748:	2105      	movs	r1, #5
 800074a:	4618      	mov	r0, r3
 800074c:	f005 fa76 	bl	8005c3c <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000756:	f000 fdcd 	bl	80012f4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800075a:	f006 f88f 	bl	800687c <HAL_RCCEx_EnableMSIPLLMode>
}
 800075e:	bf00      	nop
 8000760:	3758      	adds	r7, #88	@ 0x58
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000

0800076c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b0a6      	sub	sp, #152	@ 0x98
 8000770:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2294      	movs	r2, #148	@ 0x94
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f00b fbc5 	bl	800bf08 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800077e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000782:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000784:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000788:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800078c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000790:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000792:	2301      	movs	r3, #1
 8000794:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000796:	2301      	movs	r3, #1
 8000798:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800079a:	2318      	movs	r3, #24
 800079c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800079e:	2302      	movs	r3, #2
 80007a0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80007aa:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 80007ae:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	4618      	mov	r0, r3
 80007b4:	f005 fd32 	bl	800621c <HAL_RCCEx_PeriphCLKConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80007be:	f000 fd99 	bl	80012f4 <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3798      	adds	r7, #152	@ 0x98
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007d2:	463b      	mov	r3, r7
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
 80007e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007e2:	4b29      	ldr	r3, [pc, #164]	@ (8000888 <MX_ADC1_Init+0xbc>)
 80007e4:	4a29      	ldr	r2, [pc, #164]	@ (800088c <MX_ADC1_Init+0xc0>)
 80007e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007e8:	4b27      	ldr	r3, [pc, #156]	@ (8000888 <MX_ADC1_Init+0xbc>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ee:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <MX_ADC1_Init+0xbc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f4:	4b24      	ldr	r3, [pc, #144]	@ (8000888 <MX_ADC1_Init+0xbc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007fa:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <MX_ADC1_Init+0xbc>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000800:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <MX_ADC1_Init+0xbc>)
 8000802:	2204      	movs	r2, #4
 8000804:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000806:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <MX_ADC1_Init+0xbc>)
 8000808:	2200      	movs	r2, #0
 800080a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800080c:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <MX_ADC1_Init+0xbc>)
 800080e:	2200      	movs	r2, #0
 8000810:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000812:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <MX_ADC1_Init+0xbc>)
 8000814:	2201      	movs	r2, #1
 8000816:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000818:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_ADC1_Init+0xbc>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000820:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <MX_ADC1_Init+0xbc>)
 8000822:	2200      	movs	r2, #0
 8000824:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000826:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <MX_ADC1_Init+0xbc>)
 8000828:	2200      	movs	r2, #0
 800082a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800082c:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <MX_ADC1_Init+0xbc>)
 800082e:	2200      	movs	r2, #0
 8000830:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000834:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <MX_ADC1_Init+0xbc>)
 8000836:	2200      	movs	r2, #0
 8000838:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800083a:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <MX_ADC1_Init+0xbc>)
 800083c:	2200      	movs	r2, #0
 800083e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000842:	4811      	ldr	r0, [pc, #68]	@ (8000888 <MX_ADC1_Init+0xbc>)
 8000844:	f001 fe5e 	bl	8002504 <HAL_ADC_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800084e:	f000 fd51 	bl	80012f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000852:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_ADC1_Init+0xc4>)
 8000854:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000856:	2306      	movs	r3, #6
 8000858:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800085e:	237f      	movs	r3, #127	@ 0x7f
 8000860:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000862:	2304      	movs	r3, #4
 8000864:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086a:	463b      	mov	r3, r7
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	@ (8000888 <MX_ADC1_Init+0xbc>)
 8000870:	f002 f88e 	bl	8002990 <HAL_ADC_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800087a:	f000 fd3b 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000090 	.word	0x20000090
 800088c:	50040000 	.word	0x50040000
 8000890:	04300002 	.word	0x04300002

08000894 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000898:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <MX_DFSDM1_Init+0x68>)
 800089a:	4a19      	ldr	r2, [pc, #100]	@ (8000900 <MX_DFSDM1_Init+0x6c>)
 800089c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800089e:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <MX_DFSDM1_Init+0x68>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008a4:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <MX_DFSDM1_Init+0x68>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 80008aa:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <MX_DFSDM1_Init+0x68>)
 80008ac:	2202      	movs	r2, #2
 80008ae:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008b0:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <MX_DFSDM1_Init+0x68>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_DFSDM1_Init+0x68>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <MX_DFSDM1_Init+0x68>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <MX_DFSDM1_Init+0x68>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_DFSDM1_Init+0x68>)
 80008ca:	2204      	movs	r2, #4
 80008cc:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <MX_DFSDM1_Init+0x68>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_DFSDM1_Init+0x68>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <MX_DFSDM1_Init+0x68>)
 80008dc:	2200      	movs	r2, #0
 80008de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_DFSDM1_Init+0x68>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_DFSDM1_Init+0x68>)
 80008e8:	f002 fdb6 	bl	8003458 <HAL_DFSDM_ChannelInit>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80008f2:	f000 fcff 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200000f8 	.word	0x200000f8
 8000900:	40016040 	.word	0x40016040

08000904 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000908:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <MX_I2C1_Init+0x74>)
 800090a:	4a1c      	ldr	r2, [pc, #112]	@ (800097c <MX_I2C1_Init+0x78>)
 800090c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800090e:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000910:	4a1b      	ldr	r2, [pc, #108]	@ (8000980 <MX_I2C1_Init+0x7c>)
 8000912:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000914:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800091a:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <MX_I2C1_Init+0x74>)
 800091c:	2201      	movs	r2, #1
 800091e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000920:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000926:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_I2C1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800093e:	480e      	ldr	r0, [pc, #56]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000940:	f003 f96f 	bl	8003c22 <HAL_I2C_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800094a:	f000 fcd3 	bl	80012f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4809      	ldr	r0, [pc, #36]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000952:	f003 ff17 	bl	8004784 <HAL_I2CEx_ConfigAnalogFilter>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800095c:	f000 fcca 	bl	80012f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000960:	2100      	movs	r1, #0
 8000962:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000964:	f003 ff59 	bl	800481a <HAL_I2CEx_ConfigDigitalFilter>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800096e:	f000 fcc1 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000130 	.word	0x20000130
 800097c:	40005400 	.word	0x40005400
 8000980:	307075b1 	.word	0x307075b1

08000984 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000988:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <MX_I2C2_Init+0x74>)
 800098a:	4a1c      	ldr	r2, [pc, #112]	@ (80009fc <MX_I2C2_Init+0x78>)
 800098c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800098e:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <MX_I2C2_Init+0x74>)
 8000990:	4a1b      	ldr	r2, [pc, #108]	@ (8000a00 <MX_I2C2_Init+0x7c>)
 8000992:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000994:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <MX_I2C2_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800099a:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <MX_I2C2_Init+0x74>)
 800099c:	2201      	movs	r2, #1
 800099e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a0:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <MX_I2C2_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009a6:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <MX_I2C2_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <MX_I2C2_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b2:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <MX_I2C2_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <MX_I2C2_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009be:	480e      	ldr	r0, [pc, #56]	@ (80009f8 <MX_I2C2_Init+0x74>)
 80009c0:	f003 f92f 	bl	8003c22 <HAL_I2C_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009ca:	f000 fc93 	bl	80012f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4809      	ldr	r0, [pc, #36]	@ (80009f8 <MX_I2C2_Init+0x74>)
 80009d2:	f003 fed7 	bl	8004784 <HAL_I2CEx_ConfigAnalogFilter>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009dc:	f000 fc8a 	bl	80012f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009e0:	2100      	movs	r1, #0
 80009e2:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <MX_I2C2_Init+0x74>)
 80009e4:	f003 ff19 	bl	800481a <HAL_I2CEx_ConfigDigitalFilter>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009ee:	f000 fc81 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000184 	.word	0x20000184
 80009fc:	40005800 	.word	0x40005800
 8000a00:	307075b1 	.word	0x307075b1

08000a04 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000a18:	4b23      	ldr	r3, [pc, #140]	@ (8000aa8 <MX_OCTOSPI1_Init+0xa4>)
 8000a1a:	4a24      	ldr	r2, [pc, #144]	@ (8000aac <MX_OCTOSPI1_Init+0xa8>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000a1e:	4b22      	ldr	r3, [pc, #136]	@ (8000aa8 <MX_OCTOSPI1_Init+0xa4>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000a24:	4b20      	ldr	r3, [pc, #128]	@ (8000aa8 <MX_OCTOSPI1_Init+0xa4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa8 <MX_OCTOSPI1_Init+0xa4>)
 8000a2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000a30:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000a32:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa8 <MX_OCTOSPI1_Init+0xa4>)
 8000a34:	2220      	movs	r2, #32
 8000a36:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <MX_OCTOSPI1_Init+0xa4>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa8 <MX_OCTOSPI1_Init+0xa4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000a44:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <MX_OCTOSPI1_Init+0xa4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	@ (8000aa8 <MX_OCTOSPI1_Init+0xa4>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000a50:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <MX_OCTOSPI1_Init+0xa4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000a56:	4b14      	ldr	r3, [pc, #80]	@ (8000aa8 <MX_OCTOSPI1_Init+0xa4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <MX_OCTOSPI1_Init+0xa4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000a62:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <MX_OCTOSPI1_Init+0xa4>)
 8000a64:	2208      	movs	r2, #8
 8000a66:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000a68:	480f      	ldr	r0, [pc, #60]	@ (8000aa8 <MX_OCTOSPI1_Init+0xa4>)
 8000a6a:	f003 ff23 	bl	80048b4 <HAL_OSPI_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000a74:	f000 fc3e 	bl	80012f4 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000a80:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000a84:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4806      	ldr	r0, [pc, #24]	@ (8000aa8 <MX_OCTOSPI1_Init+0xa4>)
 8000a90:	f003 ffca 	bl	8004a28 <HAL_OSPIM_Config>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000a9a:	f000 fc2b 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200001d8 	.word	0x200001d8
 8000aac:	a0001000 	.word	0xa0001000

08000ab0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b24 <MX_SPI3_Init+0x74>)
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b28 <MX_SPI3_Init+0x78>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	@ (8000b24 <MX_SPI3_Init+0x74>)
 8000abc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ac0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	@ (8000b24 <MX_SPI3_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <MX_SPI3_Init+0x74>)
 8000aca:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000ace:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <MX_SPI3_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <MX_SPI3_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000adc:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <MX_SPI3_Init+0x74>)
 8000ade:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ae2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <MX_SPI3_Init+0x74>)
 8000ae6:	2208      	movs	r2, #8
 8000ae8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <MX_SPI3_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <MX_SPI3_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <MX_SPI3_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000afc:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <MX_SPI3_Init+0x74>)
 8000afe:	2207      	movs	r2, #7
 8000b00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <MX_SPI3_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <MX_SPI3_Init+0x74>)
 8000b0a:	2208      	movs	r2, #8
 8000b0c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <MX_SPI3_Init+0x74>)
 8000b10:	f006 f8ac 	bl	8006c6c <HAL_SPI_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b1a:	f000 fbeb 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000228 	.word	0x20000228
 8000b28:	40003c00 	.word	0x40003c00

08000b2c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b30:	4b22      	ldr	r3, [pc, #136]	@ (8000bbc <MX_UART4_Init+0x90>)
 8000b32:	4a23      	ldr	r2, [pc, #140]	@ (8000bc0 <MX_UART4_Init+0x94>)
 8000b34:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b36:	4b21      	ldr	r3, [pc, #132]	@ (8000bbc <MX_UART4_Init+0x90>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bbc <MX_UART4_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b1d      	ldr	r3, [pc, #116]	@ (8000bbc <MX_UART4_Init+0x90>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bbc <MX_UART4_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b1a      	ldr	r3, [pc, #104]	@ (8000bbc <MX_UART4_Init+0x90>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b19      	ldr	r3, [pc, #100]	@ (8000bbc <MX_UART4_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <MX_UART4_Init+0x90>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b62:	4b16      	ldr	r3, [pc, #88]	@ (8000bbc <MX_UART4_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b68:	4b14      	ldr	r3, [pc, #80]	@ (8000bbc <MX_UART4_Init+0x90>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	@ (8000bbc <MX_UART4_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b74:	4811      	ldr	r0, [pc, #68]	@ (8000bbc <MX_UART4_Init+0x90>)
 8000b76:	f006 fbcf 	bl	8007318 <HAL_UART_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000b80:	f000 fbb8 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b84:	2100      	movs	r1, #0
 8000b86:	480d      	ldr	r0, [pc, #52]	@ (8000bbc <MX_UART4_Init+0x90>)
 8000b88:	f007 fabc 	bl	8008104 <HAL_UARTEx_SetTxFifoThreshold>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000b92:	f000 fbaf 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b96:	2100      	movs	r1, #0
 8000b98:	4808      	ldr	r0, [pc, #32]	@ (8000bbc <MX_UART4_Init+0x90>)
 8000b9a:	f007 faf1 	bl	8008180 <HAL_UARTEx_SetRxFifoThreshold>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000ba4:	f000 fba6 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000ba8:	4804      	ldr	r0, [pc, #16]	@ (8000bbc <MX_UART4_Init+0x90>)
 8000baa:	f007 fa72 	bl	8008092 <HAL_UARTEx_DisableFifoMode>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000bb4:	f000 fb9e 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	2000028c 	.word	0x2000028c
 8000bc0:	40004c00 	.word	0x40004c00

08000bc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bc8:	4b22      	ldr	r3, [pc, #136]	@ (8000c54 <MX_USART1_UART_Init+0x90>)
 8000bca:	4a23      	ldr	r2, [pc, #140]	@ (8000c58 <MX_USART1_UART_Init+0x94>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bce:	4b21      	ldr	r3, [pc, #132]	@ (8000c54 <MX_USART1_UART_Init+0x90>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c54 <MX_USART1_UART_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c54 <MX_USART1_UART_Init+0x90>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c54 <MX_USART1_UART_Init+0x90>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <MX_USART1_UART_Init+0x90>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b19      	ldr	r3, [pc, #100]	@ (8000c54 <MX_USART1_UART_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <MX_USART1_UART_Init+0x90>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfa:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <MX_USART1_UART_Init+0x90>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c00:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <MX_USART1_UART_Init+0x90>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c06:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <MX_USART1_UART_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c0c:	4811      	ldr	r0, [pc, #68]	@ (8000c54 <MX_USART1_UART_Init+0x90>)
 8000c0e:	f006 fb83 	bl	8007318 <HAL_UART_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c18:	f000 fb6c 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	480d      	ldr	r0, [pc, #52]	@ (8000c54 <MX_USART1_UART_Init+0x90>)
 8000c20:	f007 fa70 	bl	8008104 <HAL_UARTEx_SetTxFifoThreshold>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c2a:	f000 fb63 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4808      	ldr	r0, [pc, #32]	@ (8000c54 <MX_USART1_UART_Init+0x90>)
 8000c32:	f007 faa5 	bl	8008180 <HAL_UARTEx_SetRxFifoThreshold>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c3c:	f000 fb5a 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c40:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <MX_USART1_UART_Init+0x90>)
 8000c42:	f007 fa26 	bl	8008092 <HAL_UARTEx_DisableFifoMode>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c4c:	f000 fb52 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000320 	.word	0x20000320
 8000c58:	40013800 	.word	0x40013800

08000c5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c60:	4b23      	ldr	r3, [pc, #140]	@ (8000cf0 <MX_USART2_UART_Init+0x94>)
 8000c62:	4a24      	ldr	r2, [pc, #144]	@ (8000cf4 <MX_USART2_UART_Init+0x98>)
 8000c64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c66:	4b22      	ldr	r3, [pc, #136]	@ (8000cf0 <MX_USART2_UART_Init+0x94>)
 8000c68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6e:	4b20      	ldr	r3, [pc, #128]	@ (8000cf0 <MX_USART2_UART_Init+0x94>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c74:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf0 <MX_USART2_UART_Init+0x94>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf0 <MX_USART2_UART_Init+0x94>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf0 <MX_USART2_UART_Init+0x94>)
 8000c82:	220c      	movs	r2, #12
 8000c84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <MX_USART2_UART_Init+0x94>)
 8000c88:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c8c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c8e:	4b18      	ldr	r3, [pc, #96]	@ (8000cf0 <MX_USART2_UART_Init+0x94>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c94:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <MX_USART2_UART_Init+0x94>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c9a:	4b15      	ldr	r3, [pc, #84]	@ (8000cf0 <MX_USART2_UART_Init+0x94>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca0:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <MX_USART2_UART_Init+0x94>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ca6:	4812      	ldr	r0, [pc, #72]	@ (8000cf0 <MX_USART2_UART_Init+0x94>)
 8000ca8:	f006 fb36 	bl	8007318 <HAL_UART_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000cb2:	f000 fb1f 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	480d      	ldr	r0, [pc, #52]	@ (8000cf0 <MX_USART2_UART_Init+0x94>)
 8000cba:	f007 fa23 	bl	8008104 <HAL_UARTEx_SetTxFifoThreshold>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000cc4:	f000 fb16 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4809      	ldr	r0, [pc, #36]	@ (8000cf0 <MX_USART2_UART_Init+0x94>)
 8000ccc:	f007 fa58 	bl	8008180 <HAL_UARTEx_SetRxFifoThreshold>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000cd6:	f000 fb0d 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cda:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <MX_USART2_UART_Init+0x94>)
 8000cdc:	f007 f9d9 	bl	8008092 <HAL_UARTEx_DisableFifoMode>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000ce6:	f000 fb05 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200003b4 	.word	0x200003b4
 8000cf4:	40004400 	.word	0x40004400

08000cf8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cfc:	4b22      	ldr	r3, [pc, #136]	@ (8000d88 <MX_USART3_UART_Init+0x90>)
 8000cfe:	4a23      	ldr	r2, [pc, #140]	@ (8000d8c <MX_USART3_UART_Init+0x94>)
 8000d00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d02:	4b21      	ldr	r3, [pc, #132]	@ (8000d88 <MX_USART3_UART_Init+0x90>)
 8000d04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d88 <MX_USART3_UART_Init+0x90>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d10:	4b1d      	ldr	r3, [pc, #116]	@ (8000d88 <MX_USART3_UART_Init+0x90>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d16:	4b1c      	ldr	r3, [pc, #112]	@ (8000d88 <MX_USART3_UART_Init+0x90>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d88 <MX_USART3_UART_Init+0x90>)
 8000d1e:	220c      	movs	r2, #12
 8000d20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d22:	4b19      	ldr	r3, [pc, #100]	@ (8000d88 <MX_USART3_UART_Init+0x90>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d28:	4b17      	ldr	r3, [pc, #92]	@ (8000d88 <MX_USART3_UART_Init+0x90>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d2e:	4b16      	ldr	r3, [pc, #88]	@ (8000d88 <MX_USART3_UART_Init+0x90>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d34:	4b14      	ldr	r3, [pc, #80]	@ (8000d88 <MX_USART3_UART_Init+0x90>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d3a:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <MX_USART3_UART_Init+0x90>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d40:	4811      	ldr	r0, [pc, #68]	@ (8000d88 <MX_USART3_UART_Init+0x90>)
 8000d42:	f006 fae9 	bl	8007318 <HAL_UART_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d4c:	f000 fad2 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d50:	2100      	movs	r1, #0
 8000d52:	480d      	ldr	r0, [pc, #52]	@ (8000d88 <MX_USART3_UART_Init+0x90>)
 8000d54:	f007 f9d6 	bl	8008104 <HAL_UARTEx_SetTxFifoThreshold>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d5e:	f000 fac9 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d62:	2100      	movs	r1, #0
 8000d64:	4808      	ldr	r0, [pc, #32]	@ (8000d88 <MX_USART3_UART_Init+0x90>)
 8000d66:	f007 fa0b 	bl	8008180 <HAL_UARTEx_SetRxFifoThreshold>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d70:	f000 fac0 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d74:	4804      	ldr	r0, [pc, #16]	@ (8000d88 <MX_USART3_UART_Init+0x90>)
 8000d76:	f007 f98c 	bl	8008092 <HAL_UARTEx_DisableFifoMode>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d80:	f000 fab8 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000448 	.word	0x20000448
 8000d8c:	40004800 	.word	0x40004800

08000d90 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08c      	sub	sp, #48	@ 0x30
 8000da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db6:	4b9f      	ldr	r3, [pc, #636]	@ (8001034 <MX_GPIO_Init+0x294>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dba:	4a9e      	ldr	r2, [pc, #632]	@ (8001034 <MX_GPIO_Init+0x294>)
 8000dbc:	f043 0310 	orr.w	r3, r3, #16
 8000dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc2:	4b9c      	ldr	r3, [pc, #624]	@ (8001034 <MX_GPIO_Init+0x294>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc6:	f003 0310 	and.w	r3, r3, #16
 8000dca:	61bb      	str	r3, [r7, #24]
 8000dcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	4b99      	ldr	r3, [pc, #612]	@ (8001034 <MX_GPIO_Init+0x294>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	4a98      	ldr	r2, [pc, #608]	@ (8001034 <MX_GPIO_Init+0x294>)
 8000dd4:	f043 0304 	orr.w	r3, r3, #4
 8000dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dda:	4b96      	ldr	r3, [pc, #600]	@ (8001034 <MX_GPIO_Init+0x294>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000de6:	4b93      	ldr	r3, [pc, #588]	@ (8001034 <MX_GPIO_Init+0x294>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dea:	4a92      	ldr	r2, [pc, #584]	@ (8001034 <MX_GPIO_Init+0x294>)
 8000dec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df2:	4b90      	ldr	r3, [pc, #576]	@ (8001034 <MX_GPIO_Init+0x294>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4b8d      	ldr	r3, [pc, #564]	@ (8001034 <MX_GPIO_Init+0x294>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	4a8c      	ldr	r2, [pc, #560]	@ (8001034 <MX_GPIO_Init+0x294>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0a:	4b8a      	ldr	r3, [pc, #552]	@ (8001034 <MX_GPIO_Init+0x294>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	4b87      	ldr	r3, [pc, #540]	@ (8001034 <MX_GPIO_Init+0x294>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1a:	4a86      	ldr	r2, [pc, #536]	@ (8001034 <MX_GPIO_Init+0x294>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e22:	4b84      	ldr	r3, [pc, #528]	@ (8001034 <MX_GPIO_Init+0x294>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2e:	4b81      	ldr	r3, [pc, #516]	@ (8001034 <MX_GPIO_Init+0x294>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e32:	4a80      	ldr	r2, [pc, #512]	@ (8001034 <MX_GPIO_Init+0x294>)
 8000e34:	f043 0308 	orr.w	r3, r3, #8
 8000e38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3a:	4b7e      	ldr	r3, [pc, #504]	@ (8001034 <MX_GPIO_Init+0x294>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f240 1105 	movw	r1, #261	@ 0x105
 8000e4c:	487a      	ldr	r0, [pc, #488]	@ (8001038 <MX_GPIO_Init+0x298>)
 8000e4e:	f002 fe93 	bl	8003b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|GPIO_PIN_5
 8000e52:	2200      	movs	r2, #0
 8000e54:	f248 113c 	movw	r1, #33084	@ 0x813c
 8000e58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5c:	f002 fe8c 	bl	8003b78 <HAL_GPIO_WritePin>
                          |SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e60:	2200      	movs	r2, #0
 8000e62:	f24f 0134 	movw	r1, #61492	@ 0xf034
 8000e66:	4875      	ldr	r0, [pc, #468]	@ (800103c <MX_GPIO_Init+0x29c>)
 8000e68:	f002 fe86 	bl	8003b78 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f242 0183 	movw	r1, #8323	@ 0x2083
 8000e72:	4873      	ldr	r0, [pc, #460]	@ (8001040 <MX_GPIO_Init+0x2a0>)
 8000e74:	f002 fe80 	bl	8003b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000e7e:	4871      	ldr	r0, [pc, #452]	@ (8001044 <MX_GPIO_Init+0x2a4>)
 8000e80:	f002 fe7a 	bl	8003b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000e84:	f240 1305 	movw	r3, #261	@ 0x105
 8000e88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4866      	ldr	r0, [pc, #408]	@ (8001038 <MX_GPIO_Init+0x298>)
 8000e9e:	f002 fbe7 	bl	8003670 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8000ea2:	237a      	movs	r3, #122	@ 0x7a
 8000ea4:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000eaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eb0:	f107 031c 	add.w	r3, r7, #28
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4860      	ldr	r0, [pc, #384]	@ (8001038 <MX_GPIO_Init+0x298>)
 8000eb8:	f002 fbda 	bl	8003670 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000ebc:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 8000ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	485c      	ldr	r0, [pc, #368]	@ (8001044 <MX_GPIO_Init+0x2a4>)
 8000ed4:	f002 fbcc 	bl	8003670 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin PA5
                           SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|GPIO_PIN_5
 8000ed8:	f248 133c 	movw	r3, #33084	@ 0x813c
 8000edc:	61fb      	str	r3, [r7, #28]
                          |SPBTLE_RF_RST_Pin|ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef4:	f002 fbbc 	bl	8003670 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000ef8:	23c0      	movs	r3, #192	@ 0xc0
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f08:	2305      	movs	r3, #5
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f16:	f002 fbab 	bl	8003670 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f1e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4843      	ldr	r0, [pc, #268]	@ (800103c <MX_GPIO_Init+0x29c>)
 8000f30:	f002 fb9e 	bl	8003670 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f44:	2302      	movs	r3, #2
 8000f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	483b      	ldr	r0, [pc, #236]	@ (800103c <MX_GPIO_Init+0x29c>)
 8000f50:	f002 fb8e 	bl	8003670 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f54:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000f58:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4833      	ldr	r0, [pc, #204]	@ (800103c <MX_GPIO_Init+0x29c>)
 8000f6e:	f002 fb7f 	bl	8003670 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8000f72:	f64d 4304 	movw	r3, #56324	@ 0xdc04
 8000f76:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f78:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	4619      	mov	r1, r3
 8000f88:	482d      	ldr	r0, [pc, #180]	@ (8001040 <MX_GPIO_Init+0x2a0>)
 8000f8a:	f002 fb71 	bl	8003670 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000f8e:	f242 0383 	movw	r3, #8323	@ 0x2083
 8000f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4826      	ldr	r0, [pc, #152]	@ (8001040 <MX_GPIO_Init+0x2a0>)
 8000fa8:	f002 fb62 	bl	8003670 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000fac:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	481f      	ldr	r0, [pc, #124]	@ (8001044 <MX_GPIO_Init+0x2a4>)
 8000fc6:	f002 fb53 	bl	8003670 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000fca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fe2:	f002 fb45 	bl	8003670 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000fe6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ff8:	230a      	movs	r3, #10
 8000ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001006:	f002 fb33 	bl	8003670 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2105      	movs	r1, #5
 800100e:	2017      	movs	r0, #23
 8001010:	f002 f9f8 	bl	8003404 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001014:	2017      	movs	r0, #23
 8001016:	f002 fa11 	bl	800343c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2105      	movs	r1, #5
 800101e:	2028      	movs	r0, #40	@ 0x28
 8001020:	f002 f9f0 	bl	8003404 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001024:	2028      	movs	r0, #40	@ 0x28
 8001026:	f002 fa09 	bl	800343c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800102a:	bf00      	nop
 800102c:	3730      	adds	r7, #48	@ 0x30
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40021000 	.word	0x40021000
 8001038:	48001000 	.word	0x48001000
 800103c:	48000400 	.word	0x48000400
 8001040:	48000c00 	.word	0x48000c00
 8001044:	48000800 	.word	0x48000800

08001048 <LED_flash_task_run>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMyLedTask */
void LED_flash_task_run(void *argument)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2120      	movs	r1, #32
 8001054:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001058:	f002 fd8e 	bl	8003b78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001062:	4821      	ldr	r0, [pc, #132]	@ (80010e8 <LED_flash_task_run+0xa0>)
 8001064:	f002 fd88 	bl	8003b78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800106e:	481f      	ldr	r0, [pc, #124]	@ (80010ec <LED_flash_task_run+0xa4>)
 8001070:	f002 fd82 	bl	8003b78 <HAL_GPIO_WritePin>
  static GPIO_PinState led_1_2_state = GPIO_PIN_RESET;
  for(;;)
  {

  if(led_1_2_state == GPIO_PIN_SET)
 8001074:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <LED_flash_task_run+0xa8>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d103      	bne.n	8001084 <LED_flash_task_run+0x3c>
	  led_1_2_state = GPIO_PIN_RESET;
 800107c:	4b1c      	ldr	r3, [pc, #112]	@ (80010f0 <LED_flash_task_run+0xa8>)
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
 8001082:	e002      	b.n	800108a <LED_flash_task_run+0x42>
  else led_1_2_state = GPIO_PIN_SET;
 8001084:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <LED_flash_task_run+0xa8>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]

	osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 800108a:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <LED_flash_task_run+0xac>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f04f 31ff 	mov.w	r1, #4294967295
 8001092:	4618      	mov	r0, r3
 8001094:	f007 fb06 	bl	80086a4 <osSemaphoreAcquire>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, led_1_2_state); // Toggle
 8001098:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <LED_flash_task_run+0xa8>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	2120      	movs	r1, #32
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a4:	f002 fd68 	bl	8003b78 <HAL_GPIO_WritePin>
	if(acquisition_activated == 0)
 80010a8:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <LED_flash_task_run+0xb0>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d107      	bne.n	80010c0 <LED_flash_task_run+0x78>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, led_1_2_state); // Toggle LED 2
 80010b0:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <LED_flash_task_run+0xa8>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010ba:	480c      	ldr	r0, [pc, #48]	@ (80010ec <LED_flash_task_run+0xa4>)
 80010bc:	f002 fd5c 	bl	8003b78 <HAL_GPIO_WritePin>

	if(queue_overflow_detected == 0)
 80010c0:	4b0e      	ldr	r3, [pc, #56]	@ (80010fc <LED_flash_task_run+0xb4>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d105      	bne.n	80010d4 <LED_flash_task_run+0x8c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010ce:	4806      	ldr	r0, [pc, #24]	@ (80010e8 <LED_flash_task_run+0xa0>)
 80010d0:	f002 fd52 	bl	8003b78 <HAL_GPIO_WritePin>

	osSemaphoreRelease(myBinarySem01Handle);
 80010d4:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <LED_flash_task_run+0xac>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f007 fb35 	bl	8008748 <osSemaphoreRelease>

	osDelay(100);  //100ms delay
 80010de:	2064      	movs	r0, #100	@ 0x64
 80010e0:	f007 fa3c 	bl	800855c <osDelay>
  if(led_1_2_state == GPIO_PIN_SET)
 80010e4:	e7c6      	b.n	8001074 <LED_flash_task_run+0x2c>
 80010e6:	bf00      	nop
 80010e8:	48000800 	.word	0x48000800
 80010ec:	48000400 	.word	0x48000400
 80010f0:	200004fc 	.word	0x200004fc
 80010f4:	200004f0 	.word	0x200004f0
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000001 	.word	0x20000001

08001100 <UART_send_task_run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMyUartTask */
void UART_send_task_run(void *argument)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMyUartTask */
  /* Infinite loop */
  for(;;)
  {
	uint16_t dataOut;
	osStatus_t result = osMessageQueueGet(myDataQueueHandle, &dataOut, NULL, osWaitForever);
 8001108:	4b14      	ldr	r3, [pc, #80]	@ (800115c <UART_send_task_run+0x5c>)
 800110a:	6818      	ldr	r0, [r3, #0]
 800110c:	f107 0112 	add.w	r1, r7, #18
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	2200      	movs	r2, #0
 8001116:	f007 fc2f 	bl	8008978 <osMessageQueueGet>
 800111a:	6178      	str	r0, [r7, #20]
	if(result == osOK)
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f2      	bne.n	8001108 <UART_send_task_run+0x8>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001122:	2120      	movs	r1, #32
 8001124:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001128:	f002 fd3e 	bl	8003ba8 <HAL_GPIO_TogglePin>
		uint8_t buffer[5]="";
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	2300      	movs	r3, #0
 8001132:	743b      	strb	r3, [r7, #16]
		sprintf((char *)buffer, "%d\n\r", dataOut);
 8001134:	8a7b      	ldrh	r3, [r7, #18]
 8001136:	461a      	mov	r2, r3
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	4908      	ldr	r1, [pc, #32]	@ (8001160 <UART_send_task_run+0x60>)
 800113e:	4618      	mov	r0, r3
 8001140:	f00a fec2 	bl	800bec8 <siprintf>
		HAL_UART_Transmit (&huart1, buffer, sizeof(buffer), 10);
 8001144:	f107 010c 	add.w	r1, r7, #12
 8001148:	230a      	movs	r3, #10
 800114a:	2205      	movs	r2, #5
 800114c:	4805      	ldr	r0, [pc, #20]	@ (8001164 <UART_send_task_run+0x64>)
 800114e:	f006 f933 	bl	80073b8 <HAL_UART_Transmit>
	    osDelay(1);
 8001152:	2001      	movs	r0, #1
 8001154:	f007 fa02 	bl	800855c <osDelay>
  {
 8001158:	e7d6      	b.n	8001108 <UART_send_task_run+0x8>
 800115a:	bf00      	nop
 800115c:	200004ec 	.word	0x200004ec
 8001160:	0800c938 	.word	0x0800c938
 8001164:	20000320 	.word	0x20000320

08001168 <UART_RX_task_run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMyCounterTask */
void UART_RX_task_run(void *argument)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMyCounterTask */
  /* Infinite loop */
  for(;;)
  {
	uint8_t received_data;
	HAL_UART_Receive(&huart1, &received_data, 1, 10);
 8001170:	f107 010f 	add.w	r1, r7, #15
 8001174:	230a      	movs	r3, #10
 8001176:	2201      	movs	r2, #1
 8001178:	481d      	ldr	r0, [pc, #116]	@ (80011f0 <UART_RX_task_run+0x88>)
 800117a:	f006 f9ab 	bl	80074d4 <HAL_UART_Receive>
	if(received_data == 's')
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	2b73      	cmp	r3, #115	@ 0x73
 8001182:	d113      	bne.n	80011ac <UART_RX_task_run+0x44>
	{
		osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 8001184:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <UART_RX_task_run+0x8c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f04f 31ff 	mov.w	r1, #4294967295
 800118c:	4618      	mov	r0, r3
 800118e:	f007 fa89 	bl	80086a4 <osSemaphoreAcquire>
		acquisition_activated = 0;
 8001192:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <UART_RX_task_run+0x90>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
		osSemaphoreRelease(myBinarySem01Handle);
 8001198:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <UART_RX_task_run+0x8c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f007 fad3 	bl	8008748 <osSemaphoreRelease>
		osThreadResume(myADC_Cmd_TaskHandle);
 80011a2:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <UART_RX_task_run+0x94>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f007 f9b7 	bl	800851a <osThreadResume>
	}
	if(received_data == 'x')
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	2b78      	cmp	r3, #120	@ 0x78
 80011b0:	d119      	bne.n	80011e6 <UART_RX_task_run+0x7e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011b8:	4811      	ldr	r0, [pc, #68]	@ (8001200 <UART_RX_task_run+0x98>)
 80011ba:	f002 fcdd 	bl	8003b78 <HAL_GPIO_WritePin>
		osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 80011be:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <UART_RX_task_run+0x8c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f04f 31ff 	mov.w	r1, #4294967295
 80011c6:	4618      	mov	r0, r3
 80011c8:	f007 fa6c 	bl	80086a4 <osSemaphoreAcquire>
		acquisition_activated = 1;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <UART_RX_task_run+0x90>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
		osSemaphoreRelease(myBinarySem01Handle);
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <UART_RX_task_run+0x8c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f007 fab6 	bl	8008748 <osSemaphoreRelease>
		osThreadSuspend(myADC_Cmd_TaskHandle);
 80011dc:	4b07      	ldr	r3, [pc, #28]	@ (80011fc <UART_RX_task_run+0x94>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f007 f979 	bl	80084d8 <osThreadSuspend>
	}
	osDelay(200);
 80011e6:	20c8      	movs	r0, #200	@ 0xc8
 80011e8:	f007 f9b8 	bl	800855c <osDelay>
  {
 80011ec:	e7c0      	b.n	8001170 <UART_RX_task_run+0x8>
 80011ee:	bf00      	nop
 80011f0:	20000320 	.word	0x20000320
 80011f4:	200004f0 	.word	0x200004f0
 80011f8:	20000000 	.word	0x20000000
 80011fc:	200004e8 	.word	0x200004e8
 8001200:	48000400 	.word	0x48000400

08001204 <TEMP_Read>:
  /* USER CODE END StartMyCounterTask */
}


void TEMP_Read(void *argument)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	for(;;){
		temp_value = BSP_TSENSOR_ReadTemp();
 800120c:	f000 fea6 	bl	8001f5c <BSP_TSENSOR_ReadTemp>
 8001210:	eef0 7a40 	vmov.f32	s15, s0
 8001214:	4b11      	ldr	r3, [pc, #68]	@ (800125c <TEMP_Read+0x58>)
 8001216:	edc3 7a00 	vstr	s15, [r3]
		uint8_t encoded_temp = (uint8_t) (temp_value/2);
 800121a:	4b10      	ldr	r3, [pc, #64]	@ (800125c <TEMP_Read+0x58>)
 800121c:	ed93 7a00 	vldr	s14, [r3]
 8001220:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001224:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800122c:	edc7 7a00 	vstr	s15, [r7]
 8001230:	783b      	ldrb	r3, [r7, #0]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	73fb      	strb	r3, [r7, #15]
		encoded_temp |= TEMPERATURE_CHANNEL_MASK;
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	b2db      	uxtb	r3, r3
 800123e:	73fb      	strb	r3, [r7, #15]
		osMessageQueuePut(myDataQueueHandle, &encoded_temp, 1, 10);
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <TEMP_Read+0x5c>)
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	f107 010f 	add.w	r1, r7, #15
 8001248:	230a      	movs	r3, #10
 800124a:	2201      	movs	r2, #1
 800124c:	f007 fb34 	bl	80088b8 <osMessageQueuePut>
		osDelay(500);
 8001250:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001254:	f007 f982 	bl	800855c <osDelay>
	for(;;){
 8001258:	bf00      	nop
 800125a:	e7d7      	b.n	800120c <TEMP_Read+0x8>
 800125c:	200004f8 	.word	0x200004f8
 8001260:	200004ec 	.word	0x200004ec

08001264 <ADC_CMD_task_run>:
	}
}

#define SOUND_CHANNEL_MASK  0xFE  // 1111 1110
void ADC_CMD_task_run(void *argument)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
      HAL_ADC_Start(&hadc1);
 800126c:	4816      	ldr	r0, [pc, #88]	@ (80012c8 <ADC_CMD_task_run+0x64>)
 800126e:	f001 fa8f 	bl	8002790 <HAL_ADC_Start>

      // Wait for conversion to complete (blocking)
      if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001272:	f04f 31ff 	mov.w	r1, #4294967295
 8001276:	4814      	ldr	r0, [pc, #80]	@ (80012c8 <ADC_CMD_task_run+0x64>)
 8001278:	f001 faed 	bl	8002856 <HAL_ADC_PollForConversion>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d11d      	bne.n	80012be <ADC_CMD_task_run+0x5a>
          // Read ADC value
          uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 8001282:	4811      	ldr	r0, [pc, #68]	@ (80012c8 <ADC_CMD_task_run+0x64>)
 8001284:	f001 fb76 	bl	8002974 <HAL_ADC_GetValue>
 8001288:	6178      	str	r0, [r7, #20]
          uint8_t encoded_sound = (uint8_t) (adc_value/2);
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	085b      	lsrs	r3, r3, #1
 800128e:	b2db      	uxtb	r3, r3
 8001290:	73fb      	strb	r3, [r7, #15]
          encoded_sound &= SOUND_CHANNEL_MASK;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	f023 0301 	bic.w	r3, r3, #1
 8001298:	b2db      	uxtb	r3, r3
 800129a:	73fb      	strb	r3, [r7, #15]
          if(osMessageQueueGetSpace(myDataQueueHandle) == 0)
 800129c:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <ADC_CMD_task_run+0x68>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f007 fbc7 	bl	8008a34 <osMessageQueueGetSpace>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d008      	beq.n	80012be <ADC_CMD_task_run+0x5a>
          {
        	  //TODO enable AlarmMsgQ
          }
          else
          {
        	 osStatus_t result = osMessageQueuePut(myDataQueueHandle, &encoded_sound, 0, 10);
 80012ac:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <ADC_CMD_task_run+0x68>)
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	f107 010f 	add.w	r1, r7, #15
 80012b4:	230a      	movs	r3, #10
 80012b6:	2200      	movs	r2, #0
 80012b8:	f007 fafe 	bl	80088b8 <osMessageQueuePut>
 80012bc:	6138      	str	r0, [r7, #16]
        	 {
           	  //TODO enable AlarmMsgQ
        	 }
          }
      }
	osDelay(2);
 80012be:	2002      	movs	r0, #2
 80012c0:	f007 f94c 	bl	800855c <osDelay>
      HAL_ADC_Start(&hadc1);
 80012c4:	e7d2      	b.n	800126c <ADC_CMD_task_run+0x8>
 80012c6:	bf00      	nop
 80012c8:	20000090 	.word	0x20000090
 80012cc:	200004ec 	.word	0x200004ec

080012d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d101      	bne.n	80012e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012e2:	f000 ff15 	bl	8002110 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40001000 	.word	0x40001000

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <Error_Handler+0x8>

08001300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <HAL_MspInit+0x4c>)
 8001308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800130a:	4a10      	ldr	r2, [pc, #64]	@ (800134c <HAL_MspInit+0x4c>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6613      	str	r3, [r2, #96]	@ 0x60
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <HAL_MspInit+0x4c>)
 8001314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <HAL_MspInit+0x4c>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001322:	4a0a      	ldr	r2, [pc, #40]	@ (800134c <HAL_MspInit+0x4c>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001328:	6593      	str	r3, [r2, #88]	@ 0x58
 800132a:	4b08      	ldr	r3, [pc, #32]	@ (800134c <HAL_MspInit+0x4c>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	210f      	movs	r1, #15
 800133a:	f06f 0001 	mvn.w	r0, #1
 800133e:	f002 f861 	bl	8003404 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000

08001350 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	@ 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a15      	ldr	r2, [pc, #84]	@ (80013c4 <HAL_ADC_MspInit+0x74>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d123      	bne.n	80013ba <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <HAL_ADC_MspInit+0x78>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	4a14      	ldr	r2, [pc, #80]	@ (80013c8 <HAL_ADC_MspInit+0x78>)
 8001378:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800137c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137e:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <HAL_ADC_MspInit+0x78>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800138a:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <HAL_ADC_MspInit+0x78>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	4a0e      	ldr	r2, [pc, #56]	@ (80013c8 <HAL_ADC_MspInit+0x78>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001396:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <HAL_ADC_MspInit+0x78>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80013a2:	233f      	movs	r3, #63	@ 0x3f
 80013a4:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013a6:	230b      	movs	r3, #11
 80013a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	@ (80013cc <HAL_ADC_MspInit+0x7c>)
 80013b6:	f002 f95b 	bl	8003670 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	@ 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	50040000 	.word	0x50040000
 80013c8:	40021000 	.word	0x40021000
 80013cc:	48000800 	.word	0x48000800

080013d0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b0ae      	sub	sp, #184	@ 0xb8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	2294      	movs	r2, #148	@ 0x94
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f00a fd89 	bl	800bf08 <memset>
  if(DFSDM1_Init == 0)
 80013f6:	4b25      	ldr	r3, [pc, #148]	@ (800148c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d142      	bne.n	8001484 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80013fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001402:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	4618      	mov	r0, r3
 8001410:	f004 ff04 	bl	800621c <HAL_RCCEx_PeriphCLKConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800141a:	f7ff ff6b 	bl	80012f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800141e:	4b1c      	ldr	r3, [pc, #112]	@ (8001490 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001422:	4a1b      	ldr	r2, [pc, #108]	@ (8001490 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001424:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001428:	6613      	str	r3, [r2, #96]	@ 0x60
 800142a:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800142c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800142e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001436:	4b16      	ldr	r3, [pc, #88]	@ (8001490 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	4a15      	ldr	r2, [pc, #84]	@ (8001490 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800143c:	f043 0310 	orr.w	r3, r3, #16
 8001440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001442:	4b13      	ldr	r3, [pc, #76]	@ (8001490 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	f003 0310 	and.w	r3, r3, #16
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800144e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001452:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001468:	2306      	movs	r3, #6
 800146a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800146e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001472:	4619      	mov	r1, r3
 8001474:	4807      	ldr	r0, [pc, #28]	@ (8001494 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001476:	f002 f8fb 	bl	8003670 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800147a:	4b04      	ldr	r3, [pc, #16]	@ (800148c <HAL_DFSDM_ChannelMspInit+0xbc>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	4a02      	ldr	r2, [pc, #8]	@ (800148c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001482:	6013      	str	r3, [r2, #0]
  }

}
 8001484:	bf00      	nop
 8001486:	37b8      	adds	r7, #184	@ 0xb8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000500 	.word	0x20000500
 8001490:	40021000 	.word	0x40021000
 8001494:	48001000 	.word	0x48001000

08001498 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b0b0      	sub	sp, #192	@ 0xc0
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b0:	f107 0318 	add.w	r3, r7, #24
 80014b4:	2294      	movs	r2, #148	@ 0x94
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f00a fd25 	bl	800bf08 <memset>
  if(hi2c->Instance==I2C1)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a42      	ldr	r2, [pc, #264]	@ (80015cc <HAL_I2C_MspInit+0x134>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d13c      	bne.n	8001542 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014c8:	2340      	movs	r3, #64	@ 0x40
 80014ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d0:	f107 0318 	add.w	r3, r7, #24
 80014d4:	4618      	mov	r0, r3
 80014d6:	f004 fea1 	bl	800621c <HAL_RCCEx_PeriphCLKConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80014e0:	f7ff ff08 	bl	80012f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e4:	4b3a      	ldr	r3, [pc, #232]	@ (80015d0 <HAL_I2C_MspInit+0x138>)
 80014e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e8:	4a39      	ldr	r2, [pc, #228]	@ (80015d0 <HAL_I2C_MspInit+0x138>)
 80014ea:	f043 0302 	orr.w	r3, r3, #2
 80014ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f0:	4b37      	ldr	r3, [pc, #220]	@ (80015d0 <HAL_I2C_MspInit+0x138>)
 80014f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80014fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001500:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001504:	2312      	movs	r3, #18
 8001506:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150a:	2301      	movs	r3, #1
 800150c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001516:	2304      	movs	r3, #4
 8001518:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001520:	4619      	mov	r1, r3
 8001522:	482c      	ldr	r0, [pc, #176]	@ (80015d4 <HAL_I2C_MspInit+0x13c>)
 8001524:	f002 f8a4 	bl	8003670 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001528:	4b29      	ldr	r3, [pc, #164]	@ (80015d0 <HAL_I2C_MspInit+0x138>)
 800152a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152c:	4a28      	ldr	r2, [pc, #160]	@ (80015d0 <HAL_I2C_MspInit+0x138>)
 800152e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001532:	6593      	str	r3, [r2, #88]	@ 0x58
 8001534:	4b26      	ldr	r3, [pc, #152]	@ (80015d0 <HAL_I2C_MspInit+0x138>)
 8001536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001538:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001540:	e040      	b.n	80015c4 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a24      	ldr	r2, [pc, #144]	@ (80015d8 <HAL_I2C_MspInit+0x140>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d13b      	bne.n	80015c4 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800154c:	2380      	movs	r3, #128	@ 0x80
 800154e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001550:	2300      	movs	r3, #0
 8001552:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001554:	f107 0318 	add.w	r3, r7, #24
 8001558:	4618      	mov	r0, r3
 800155a:	f004 fe5f 	bl	800621c <HAL_RCCEx_PeriphCLKConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001564:	f7ff fec6 	bl	80012f4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001568:	4b19      	ldr	r3, [pc, #100]	@ (80015d0 <HAL_I2C_MspInit+0x138>)
 800156a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156c:	4a18      	ldr	r2, [pc, #96]	@ (80015d0 <HAL_I2C_MspInit+0x138>)
 800156e:	f043 0302 	orr.w	r3, r3, #2
 8001572:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001574:	4b16      	ldr	r3, [pc, #88]	@ (80015d0 <HAL_I2C_MspInit+0x138>)
 8001576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001580:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001584:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001588:	2312      	movs	r3, #18
 800158a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800158e:	2301      	movs	r3, #1
 8001590:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800159a:	2304      	movs	r3, #4
 800159c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80015a4:	4619      	mov	r1, r3
 80015a6:	480b      	ldr	r0, [pc, #44]	@ (80015d4 <HAL_I2C_MspInit+0x13c>)
 80015a8:	f002 f862 	bl	8003670 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015ac:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <HAL_I2C_MspInit+0x138>)
 80015ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b0:	4a07      	ldr	r2, [pc, #28]	@ (80015d0 <HAL_I2C_MspInit+0x138>)
 80015b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80015b8:	4b05      	ldr	r3, [pc, #20]	@ (80015d0 <HAL_I2C_MspInit+0x138>)
 80015ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
}
 80015c4:	bf00      	nop
 80015c6:	37c0      	adds	r7, #192	@ 0xc0
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40005400 	.word	0x40005400
 80015d0:	40021000 	.word	0x40021000
 80015d4:	48000400 	.word	0x48000400
 80015d8:	40005800 	.word	0x40005800

080015dc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a16      	ldr	r2, [pc, #88]	@ (8001644 <HAL_I2C_MspDeInit+0x68>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d110      	bne.n	8001610 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80015ee:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <HAL_I2C_MspDeInit+0x6c>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f2:	4a15      	ldr	r2, [pc, #84]	@ (8001648 <HAL_I2C_MspDeInit+0x6c>)
 80015f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80015f8:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 80015fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015fe:	4813      	ldr	r0, [pc, #76]	@ (800164c <HAL_I2C_MspDeInit+0x70>)
 8001600:	f002 f9c8 	bl	8003994 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 8001604:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001608:	4810      	ldr	r0, [pc, #64]	@ (800164c <HAL_I2C_MspDeInit+0x70>)
 800160a:	f002 f9c3 	bl	8003994 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800160e:	e014      	b.n	800163a <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0e      	ldr	r2, [pc, #56]	@ (8001650 <HAL_I2C_MspDeInit+0x74>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d10f      	bne.n	800163a <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800161a:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <HAL_I2C_MspDeInit+0x6c>)
 800161c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161e:	4a0a      	ldr	r2, [pc, #40]	@ (8001648 <HAL_I2C_MspDeInit+0x6c>)
 8001620:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001624:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001626:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800162a:	4808      	ldr	r0, [pc, #32]	@ (800164c <HAL_I2C_MspDeInit+0x70>)
 800162c:	f002 f9b2 	bl	8003994 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001630:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001634:	4805      	ldr	r0, [pc, #20]	@ (800164c <HAL_I2C_MspDeInit+0x70>)
 8001636:	f002 f9ad 	bl	8003994 <HAL_GPIO_DeInit>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40005400 	.word	0x40005400
 8001648:	40021000 	.word	0x40021000
 800164c:	48000400 	.word	0x48000400
 8001650:	40005800 	.word	0x40005800

08001654 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b0b0      	sub	sp, #192	@ 0xc0
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800166c:	f107 0318 	add.w	r3, r7, #24
 8001670:	2294      	movs	r2, #148	@ 0x94
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f00a fc47 	bl	800bf08 <memset>
  if(hospi->Instance==OCTOSPI1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a28      	ldr	r2, [pc, #160]	@ (8001720 <HAL_OSPI_MspInit+0xcc>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d149      	bne.n	8001718 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001684:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001688:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800168a:	2300      	movs	r3, #0
 800168c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001690:	f107 0318 	add.w	r3, r7, #24
 8001694:	4618      	mov	r0, r3
 8001696:	f004 fdc1 	bl	800621c <HAL_RCCEx_PeriphCLKConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 80016a0:	f7ff fe28 	bl	80012f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 80016a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001724 <HAL_OSPI_MspInit+0xd0>)
 80016a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001724 <HAL_OSPI_MspInit+0xd0>)
 80016aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80016ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001724 <HAL_OSPI_MspInit+0xd0>)
 80016b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80016bc:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <HAL_OSPI_MspInit+0xd0>)
 80016be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016c0:	4a18      	ldr	r2, [pc, #96]	@ (8001724 <HAL_OSPI_MspInit+0xd0>)
 80016c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80016c8:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <HAL_OSPI_MspInit+0xd0>)
 80016ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016d4:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <HAL_OSPI_MspInit+0xd0>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d8:	4a12      	ldr	r2, [pc, #72]	@ (8001724 <HAL_OSPI_MspInit+0xd0>)
 80016da:	f043 0310 	orr.w	r3, r3, #16
 80016de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e0:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <HAL_OSPI_MspInit+0xd0>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80016ec:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80016f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	2302      	movs	r3, #2
 80016f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001700:	2303      	movs	r3, #3
 8001702:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001706:	230a      	movs	r3, #10
 8001708:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800170c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001710:	4619      	mov	r1, r3
 8001712:	4805      	ldr	r0, [pc, #20]	@ (8001728 <HAL_OSPI_MspInit+0xd4>)
 8001714:	f001 ffac 	bl	8003670 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001718:	bf00      	nop
 800171a:	37c0      	adds	r7, #192	@ 0xc0
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	a0001000 	.word	0xa0001000
 8001724:	40021000 	.word	0x40021000
 8001728:	48001000 	.word	0x48001000

0800172c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	@ 0x28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a17      	ldr	r2, [pc, #92]	@ (80017a8 <HAL_SPI_MspInit+0x7c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d128      	bne.n	80017a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800174e:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <HAL_SPI_MspInit+0x80>)
 8001750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001752:	4a16      	ldr	r2, [pc, #88]	@ (80017ac <HAL_SPI_MspInit+0x80>)
 8001754:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001758:	6593      	str	r3, [r2, #88]	@ 0x58
 800175a:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <HAL_SPI_MspInit+0x80>)
 800175c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001766:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <HAL_SPI_MspInit+0x80>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176a:	4a10      	ldr	r2, [pc, #64]	@ (80017ac <HAL_SPI_MspInit+0x80>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001772:	4b0e      	ldr	r3, [pc, #56]	@ (80017ac <HAL_SPI_MspInit+0x80>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800177e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178c:	2303      	movs	r3, #3
 800178e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001790:	2306      	movs	r3, #6
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <HAL_SPI_MspInit+0x84>)
 800179c:	f001 ff68 	bl	8003670 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017a0:	bf00      	nop
 80017a2:	3728      	adds	r7, #40	@ 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40003c00 	.word	0x40003c00
 80017ac:	40021000 	.word	0x40021000
 80017b0:	48000800 	.word	0x48000800

080017b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b0b4      	sub	sp, #208	@ 0xd0
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017d0:	2294      	movs	r2, #148	@ 0x94
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f00a fb97 	bl	800bf08 <memset>
  if(huart->Instance==UART4)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a83      	ldr	r2, [pc, #524]	@ (80019ec <HAL_UART_MspInit+0x238>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d13c      	bne.n	800185e <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80017e4:	2308      	movs	r3, #8
 80017e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017f0:	4618      	mov	r0, r3
 80017f2:	f004 fd13 	bl	800621c <HAL_RCCEx_PeriphCLKConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017fc:	f7ff fd7a 	bl	80012f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001800:	4b7b      	ldr	r3, [pc, #492]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 8001802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001804:	4a7a      	ldr	r2, [pc, #488]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 8001806:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800180a:	6593      	str	r3, [r2, #88]	@ 0x58
 800180c:	4b78      	ldr	r3, [pc, #480]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 800180e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001810:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001814:	627b      	str	r3, [r7, #36]	@ 0x24
 8001816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001818:	4b75      	ldr	r3, [pc, #468]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 800181a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181c:	4a74      	ldr	r2, [pc, #464]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001824:	4b72      	ldr	r3, [pc, #456]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 8001826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	623b      	str	r3, [r7, #32]
 800182e:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001830:	2303      	movs	r3, #3
 8001832:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001848:	2308      	movs	r3, #8
 800184a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001852:	4619      	mov	r1, r3
 8001854:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001858:	f001 ff0a 	bl	8003670 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800185c:	e0c2      	b.n	80019e4 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a64      	ldr	r2, [pc, #400]	@ (80019f4 <HAL_UART_MspInit+0x240>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d13b      	bne.n	80018e0 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001868:	2301      	movs	r3, #1
 800186a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800186c:	2300      	movs	r3, #0
 800186e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001870:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001874:	4618      	mov	r0, r3
 8001876:	f004 fcd1 	bl	800621c <HAL_RCCEx_PeriphCLKConfig>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001880:	f7ff fd38 	bl	80012f4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001884:	4b5a      	ldr	r3, [pc, #360]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 8001886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001888:	4a59      	ldr	r2, [pc, #356]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 800188a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800188e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001890:	4b57      	ldr	r3, [pc, #348]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 8001892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001894:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189c:	4b54      	ldr	r3, [pc, #336]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 800189e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a0:	4a53      	ldr	r2, [pc, #332]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 80018a2:	f043 0302 	orr.w	r3, r3, #2
 80018a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018a8:	4b51      	ldr	r3, [pc, #324]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 80018aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80018b4:	23c0      	movs	r3, #192	@ 0xc0
 80018b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c6:	2303      	movs	r3, #3
 80018c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018cc:	2307      	movs	r3, #7
 80018ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d2:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80018d6:	4619      	mov	r1, r3
 80018d8:	4847      	ldr	r0, [pc, #284]	@ (80019f8 <HAL_UART_MspInit+0x244>)
 80018da:	f001 fec9 	bl	8003670 <HAL_GPIO_Init>
}
 80018de:	e081      	b.n	80019e4 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a45      	ldr	r2, [pc, #276]	@ (80019fc <HAL_UART_MspInit+0x248>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d13b      	bne.n	8001962 <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018ea:	2302      	movs	r3, #2
 80018ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018ee:	2300      	movs	r3, #0
 80018f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018f6:	4618      	mov	r0, r3
 80018f8:	f004 fc90 	bl	800621c <HAL_RCCEx_PeriphCLKConfig>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_UART_MspInit+0x152>
      Error_Handler();
 8001902:	f7ff fcf7 	bl	80012f4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001906:	4b3a      	ldr	r3, [pc, #232]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 8001908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190a:	4a39      	ldr	r2, [pc, #228]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 800190c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001910:	6593      	str	r3, [r2, #88]	@ 0x58
 8001912:	4b37      	ldr	r3, [pc, #220]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 8001914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800191e:	4b34      	ldr	r3, [pc, #208]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001922:	4a33      	ldr	r2, [pc, #204]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 8001924:	f043 0308 	orr.w	r3, r3, #8
 8001928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800192a:	4b31      	ldr	r3, [pc, #196]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001936:	2378      	movs	r3, #120	@ 0x78
 8001938:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800194e:	2307      	movs	r3, #7
 8001950:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001954:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001958:	4619      	mov	r1, r3
 800195a:	4829      	ldr	r0, [pc, #164]	@ (8001a00 <HAL_UART_MspInit+0x24c>)
 800195c:	f001 fe88 	bl	8003670 <HAL_GPIO_Init>
}
 8001960:	e040      	b.n	80019e4 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a27      	ldr	r2, [pc, #156]	@ (8001a04 <HAL_UART_MspInit+0x250>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d13b      	bne.n	80019e4 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800196c:	2304      	movs	r3, #4
 800196e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001970:	2300      	movs	r3, #0
 8001972:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001974:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001978:	4618      	mov	r0, r3
 800197a:	f004 fc4f 	bl	800621c <HAL_RCCEx_PeriphCLKConfig>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8001984:	f7ff fcb6 	bl	80012f4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001988:	4b19      	ldr	r3, [pc, #100]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 800198a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198c:	4a18      	ldr	r2, [pc, #96]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 800198e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001992:	6593      	str	r3, [r2, #88]	@ 0x58
 8001994:	4b16      	ldr	r3, [pc, #88]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 8001996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001998:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019a0:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 80019a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a4:	4a12      	ldr	r2, [pc, #72]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 80019a6:	f043 0308 	orr.w	r3, r3, #8
 80019aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ac:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <HAL_UART_MspInit+0x23c>)
 80019ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80019b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019d2:	2307      	movs	r3, #7
 80019d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019d8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80019dc:	4619      	mov	r1, r3
 80019de:	4808      	ldr	r0, [pc, #32]	@ (8001a00 <HAL_UART_MspInit+0x24c>)
 80019e0:	f001 fe46 	bl	8003670 <HAL_GPIO_Init>
}
 80019e4:	bf00      	nop
 80019e6:	37d0      	adds	r7, #208	@ 0xd0
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40004c00 	.word	0x40004c00
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40013800 	.word	0x40013800
 80019f8:	48000400 	.word	0x48000400
 80019fc:	40004400 	.word	0x40004400
 8001a00:	48000c00 	.word	0x48000c00
 8001a04:	40004800 	.word	0x40004800

08001a08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08e      	sub	sp, #56	@ 0x38
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a16:	4b34      	ldr	r3, [pc, #208]	@ (8001ae8 <HAL_InitTick+0xe0>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1a:	4a33      	ldr	r2, [pc, #204]	@ (8001ae8 <HAL_InitTick+0xe0>)
 8001a1c:	f043 0310 	orr.w	r3, r3, #16
 8001a20:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a22:	4b31      	ldr	r3, [pc, #196]	@ (8001ae8 <HAL_InitTick+0xe0>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a26:	f003 0310 	and.w	r3, r3, #16
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a2e:	f107 0210 	add.w	r2, r7, #16
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4611      	mov	r1, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f004 fafd 	bl	8006038 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a3e:	6a3b      	ldr	r3, [r7, #32]
 8001a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d103      	bne.n	8001a50 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a48:	f004 faca 	bl	8005fe0 <HAL_RCC_GetPCLK1Freq>
 8001a4c:	6378      	str	r0, [r7, #52]	@ 0x34
 8001a4e:	e004      	b.n	8001a5a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a50:	f004 fac6 	bl	8005fe0 <HAL_RCC_GetPCLK1Freq>
 8001a54:	4603      	mov	r3, r0
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a5c:	4a23      	ldr	r2, [pc, #140]	@ (8001aec <HAL_InitTick+0xe4>)
 8001a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a62:	0c9b      	lsrs	r3, r3, #18
 8001a64:	3b01      	subs	r3, #1
 8001a66:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a68:	4b21      	ldr	r3, [pc, #132]	@ (8001af0 <HAL_InitTick+0xe8>)
 8001a6a:	4a22      	ldr	r2, [pc, #136]	@ (8001af4 <HAL_InitTick+0xec>)
 8001a6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a6e:	4b20      	ldr	r3, [pc, #128]	@ (8001af0 <HAL_InitTick+0xe8>)
 8001a70:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a74:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a76:	4a1e      	ldr	r2, [pc, #120]	@ (8001af0 <HAL_InitTick+0xe8>)
 8001a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a7a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001af0 <HAL_InitTick+0xe8>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a82:	4b1b      	ldr	r3, [pc, #108]	@ (8001af0 <HAL_InitTick+0xe8>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a88:	4b19      	ldr	r3, [pc, #100]	@ (8001af0 <HAL_InitTick+0xe8>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a8e:	4818      	ldr	r0, [pc, #96]	@ (8001af0 <HAL_InitTick+0xe8>)
 8001a90:	f005 f98f 	bl	8006db2 <HAL_TIM_Base_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001a9a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d11b      	bne.n	8001ada <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001aa2:	4813      	ldr	r0, [pc, #76]	@ (8001af0 <HAL_InitTick+0xe8>)
 8001aa4:	f005 f9e6 	bl	8006e74 <HAL_TIM_Base_Start_IT>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001aae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d111      	bne.n	8001ada <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ab6:	2036      	movs	r0, #54	@ 0x36
 8001ab8:	f001 fcc0 	bl	800343c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b0f      	cmp	r3, #15
 8001ac0:	d808      	bhi.n	8001ad4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	2036      	movs	r0, #54	@ 0x36
 8001ac8:	f001 fc9c 	bl	8003404 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001acc:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <HAL_InitTick+0xf0>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e002      	b.n	8001ada <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ada:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3738      	adds	r7, #56	@ 0x38
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	431bde83 	.word	0x431bde83
 8001af0:	20000504 	.word	0x20000504
 8001af4:	40001000 	.word	0x40001000
 8001af8:	20000018 	.word	0x20000018

08001afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <NMI_Handler+0x4>

08001b04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <HardFault_Handler+0x4>

08001b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <MemManage_Handler+0x4>

08001b14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <BusFault_Handler+0x4>

08001b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <UsageFault_Handler+0x4>

08001b24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001b36:	2020      	movs	r0, #32
 8001b38:	f002 f850 	bl	8003bdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001b3c:	2040      	movs	r0, #64	@ 0x40
 8001b3e:	f002 f84d 	bl	8003bdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001b42:	2080      	movs	r0, #128	@ 0x80
 8001b44:	f002 f84a 	bl	8003bdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001b48:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001b4c:	f002 f846 	bl	8003bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8001b58:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001b5c:	f002 f83e 	bl	8003bdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001b60:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001b64:	f002 f83a 	bl	8003bdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8001b68:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001b6c:	f002 f836 	bl	8003bdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001b70:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b74:	f002 f832 	bl	8003bdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001b78:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001b7c:	f002 f82e 	bl	8003bdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001b80:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001b84:	f002 f82a 	bl	8003bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b90:	4802      	ldr	r0, [pc, #8]	@ (8001b9c <TIM6_DAC_IRQHandler+0x10>)
 8001b92:	f005 f9df 	bl	8006f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000504 	.word	0x20000504

08001ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba8:	4a14      	ldr	r2, [pc, #80]	@ (8001bfc <_sbrk+0x5c>)
 8001baa:	4b15      	ldr	r3, [pc, #84]	@ (8001c00 <_sbrk+0x60>)
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb4:	4b13      	ldr	r3, [pc, #76]	@ (8001c04 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d102      	bne.n	8001bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <_sbrk+0x64>)
 8001bbe:	4a12      	ldr	r2, [pc, #72]	@ (8001c08 <_sbrk+0x68>)
 8001bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bc2:	4b10      	ldr	r3, [pc, #64]	@ (8001c04 <_sbrk+0x64>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d207      	bcs.n	8001be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd0:	f00a f9f8 	bl	800bfc4 <__errno>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
 8001bde:	e009      	b.n	8001bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be0:	4b08      	ldr	r3, [pc, #32]	@ (8001c04 <_sbrk+0x64>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001be6:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <_sbrk+0x64>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	4a05      	ldr	r2, [pc, #20]	@ (8001c04 <_sbrk+0x64>)
 8001bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	200a0000 	.word	0x200a0000
 8001c00:	00000400 	.word	0x00000400
 8001c04:	20000550 	.word	0x20000550
 8001c08:	200020c0 	.word	0x200020c0

08001c0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c10:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <SystemInit+0x20>)
 8001c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c16:	4a05      	ldr	r2, [pc, #20]	@ (8001c2c <SystemInit+0x20>)
 8001c18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c34:	f7ff ffea 	bl	8001c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c38:	480c      	ldr	r0, [pc, #48]	@ (8001c6c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c3a:	490d      	ldr	r1, [pc, #52]	@ (8001c70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c74 <LoopForever+0xe>)
  movs r3, #0
 8001c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c40:	e002      	b.n	8001c48 <LoopCopyDataInit>

08001c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c46:	3304      	adds	r3, #4

08001c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c4c:	d3f9      	bcc.n	8001c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c50:	4c0a      	ldr	r4, [pc, #40]	@ (8001c7c <LoopForever+0x16>)
  movs r3, #0
 8001c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c54:	e001      	b.n	8001c5a <LoopFillZerobss>

08001c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c58:	3204      	adds	r2, #4

08001c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c5c:	d3fb      	bcc.n	8001c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c5e:	f00a f9b7 	bl	800bfd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c62:	f7fe fc95 	bl	8000590 <main>

08001c66 <LoopForever>:

LoopForever:
    b LoopForever
 8001c66:	e7fe      	b.n	8001c66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c68:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c70:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c74:	0800cae8 	.word	0x0800cae8
  ldr r2, =_sbss
 8001c78:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001c7c:	200020bc 	.word	0x200020bc

08001c80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c80:	e7fe      	b.n	8001c80 <ADC1_IRQHandler>
	...

08001c84 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	@ 0x28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001c8c:	4b27      	ldr	r3, [pc, #156]	@ (8001d2c <I2Cx_MspInit+0xa8>)
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c90:	4a26      	ldr	r2, [pc, #152]	@ (8001d2c <I2Cx_MspInit+0xa8>)
 8001c92:	f043 0302 	orr.w	r3, r3, #2
 8001c96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c98:	4b24      	ldr	r3, [pc, #144]	@ (8001d2c <I2Cx_MspInit+0xa8>)
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001ca4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ca8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001caa:	2312      	movs	r3, #18
 8001cac:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	481b      	ldr	r0, [pc, #108]	@ (8001d30 <I2Cx_MspInit+0xac>)
 8001cc2:	f001 fcd5 	bl	8003670 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4818      	ldr	r0, [pc, #96]	@ (8001d30 <I2Cx_MspInit+0xac>)
 8001cce:	f001 fccf 	bl	8003670 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001cd2:	4b16      	ldr	r3, [pc, #88]	@ (8001d2c <I2Cx_MspInit+0xa8>)
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd6:	4a15      	ldr	r2, [pc, #84]	@ (8001d2c <I2Cx_MspInit+0xa8>)
 8001cd8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cde:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <I2Cx_MspInit+0xa8>)
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001cea:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <I2Cx_MspInit+0xa8>)
 8001cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cee:	4a0f      	ldr	r2, [pc, #60]	@ (8001d2c <I2Cx_MspInit+0xa8>)
 8001cf0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cf4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d2c <I2Cx_MspInit+0xa8>)
 8001cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cfa:	4a0c      	ldr	r2, [pc, #48]	@ (8001d2c <I2Cx_MspInit+0xa8>)
 8001cfc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001d00:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	210f      	movs	r1, #15
 8001d06:	2021      	movs	r0, #33	@ 0x21
 8001d08:	f001 fb7c 	bl	8003404 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001d0c:	2021      	movs	r0, #33	@ 0x21
 8001d0e:	f001 fb95 	bl	800343c <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	210f      	movs	r1, #15
 8001d16:	2022      	movs	r0, #34	@ 0x22
 8001d18:	f001 fb74 	bl	8003404 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001d1c:	2022      	movs	r0, #34	@ 0x22
 8001d1e:	f001 fb8d 	bl	800343c <HAL_NVIC_EnableIRQ>
}
 8001d22:	bf00      	nop
 8001d24:	3728      	adds	r7, #40	@ 0x28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	48000400 	.word	0x48000400

08001d34 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a12      	ldr	r2, [pc, #72]	@ (8001d88 <I2Cx_Init+0x54>)
 8001d40:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a11      	ldr	r2, [pc, #68]	@ (8001d8c <I2Cx_Init+0x58>)
 8001d46:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ff89 	bl	8001c84 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f001 ff55 	bl	8003c22 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001d78:	2100      	movs	r1, #0
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f002 fd02 	bl	8004784 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40005800 	.word	0x40005800
 8001d8c:	00702681 	.word	0x00702681

08001d90 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	@ 0x28
 8001d94:	af04      	add	r7, sp, #16
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	4608      	mov	r0, r1
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4603      	mov	r3, r0
 8001da0:	72fb      	strb	r3, [r7, #11]
 8001da2:	460b      	mov	r3, r1
 8001da4:	813b      	strh	r3, [r7, #8]
 8001da6:	4613      	mov	r3, r2
 8001da8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001dae:	7afb      	ldrb	r3, [r7, #11]
 8001db0:	b299      	uxth	r1, r3
 8001db2:	88f8      	ldrh	r0, [r7, #6]
 8001db4:	893a      	ldrh	r2, [r7, #8]
 8001db6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dba:	9302      	str	r3, [sp, #8]
 8001dbc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f002 f90a 	bl	8003fe0 <HAL_I2C_Mem_Read>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001dd0:	7dfb      	ldrb	r3, [r7, #23]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d004      	beq.n	8001de0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001dd6:	7afb      	ldrb	r3, [r7, #11]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 f832 	bl	8001e44 <I2Cx_Error>
  }
  return status;
 8001de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b08a      	sub	sp, #40	@ 0x28
 8001dee:	af04      	add	r7, sp, #16
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	4608      	mov	r0, r1
 8001df4:	4611      	mov	r1, r2
 8001df6:	461a      	mov	r2, r3
 8001df8:	4603      	mov	r3, r0
 8001dfa:	72fb      	strb	r3, [r7, #11]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	813b      	strh	r3, [r7, #8]
 8001e00:	4613      	mov	r3, r2
 8001e02:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001e08:	7afb      	ldrb	r3, [r7, #11]
 8001e0a:	b299      	uxth	r1, r3
 8001e0c:	88f8      	ldrh	r0, [r7, #6]
 8001e0e:	893a      	ldrh	r2, [r7, #8]
 8001e10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e14:	9302      	str	r3, [sp, #8]
 8001e16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	4603      	mov	r3, r0
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f001 ffc9 	bl	8003db8 <HAL_I2C_Mem_Write>
 8001e26:	4603      	mov	r3, r0
 8001e28:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d004      	beq.n	8001e3a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001e30:	7afb      	ldrb	r3, [r7, #11]
 8001e32:	4619      	mov	r1, r3
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 f805 	bl	8001e44 <I2Cx_Error>
  }
  return status;
 8001e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f001 ff81 	bl	8003d58 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ff6c 	bl	8001d34 <I2Cx_Init>
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001e68:	4802      	ldr	r0, [pc, #8]	@ (8001e74 <SENSOR_IO_Init+0x10>)
 8001e6a:	f7ff ff63 	bl	8001d34 <I2Cx_Init>
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000554 	.word	0x20000554

08001e78 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af02      	add	r7, sp, #8
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
 8001e82:	460b      	mov	r3, r1
 8001e84:	71bb      	strb	r3, [r7, #6]
 8001e86:	4613      	mov	r3, r2
 8001e88:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001e8a:	79bb      	ldrb	r3, [r7, #6]
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	79f9      	ldrb	r1, [r7, #7]
 8001e90:	2301      	movs	r3, #1
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	1d7b      	adds	r3, r7, #5
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	2301      	movs	r3, #1
 8001e9a:	4803      	ldr	r0, [pc, #12]	@ (8001ea8 <SENSOR_IO_Write+0x30>)
 8001e9c:	f7ff ffa5 	bl	8001dea <I2Cx_WriteMultiple>
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000554 	.word	0x20000554

08001eac <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	460a      	mov	r2, r1
 8001eb6:	71fb      	strb	r3, [r7, #7]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001ec0:	79bb      	ldrb	r3, [r7, #6]
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	79f9      	ldrb	r1, [r7, #7]
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	f107 030f 	add.w	r3, r7, #15
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	4804      	ldr	r0, [pc, #16]	@ (8001ee4 <SENSOR_IO_Read+0x38>)
 8001ed4:	f7ff ff5c 	bl	8001d90 <I2Cx_ReadMultiple>

  return read_value;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000554 	.word	0x20000554

08001ee8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af02      	add	r7, sp, #8
 8001eee:	603a      	str	r2, [r7, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	71bb      	strb	r3, [r7, #6]
 8001efa:	4613      	mov	r3, r2
 8001efc:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001efe:	79bb      	ldrb	r3, [r7, #6]
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	79f9      	ldrb	r1, [r7, #7]
 8001f04:	88bb      	ldrh	r3, [r7, #4]
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	4804      	ldr	r0, [pc, #16]	@ (8001f20 <SENSOR_IO_ReadMultiple+0x38>)
 8001f10:	f7ff ff3e 	bl	8001d90 <I2Cx_ReadMultiple>
 8001f14:	4603      	mov	r3, r0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000554 	.word	0x20000554

08001f24 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001f2e:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <BSP_TSENSOR_Init+0x30>)
 8001f30:	4a09      	ldr	r2, [pc, #36]	@ (8001f58 <BSP_TSENSOR_Init+0x34>)
 8001f32:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001f34:	f7ff ff96 	bl	8001e64 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001f38:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <BSP_TSENSOR_Init+0x30>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2100      	movs	r1, #0
 8001f40:	20be      	movs	r0, #190	@ 0xbe
 8001f42:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001f48:	79fb      	ldrb	r3, [r7, #7]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200005a8 	.word	0x200005a8
 8001f58:	20000008 	.word	0x20000008

08001f5c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001f60:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <BSP_TSENSOR_ReadTemp+0x18>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	20be      	movs	r0, #190	@ 0xbe
 8001f68:	4798      	blx	r3
 8001f6a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200005a8 	.word	0x200005a8

08001f78 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2120      	movs	r1, #32
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff ff8e 	bl	8001eac <SENSOR_IO_Read>
 8001f90:	4603      	mov	r3, r0
 8001f92:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	f023 0304 	bic.w	r3, r3, #4
 8001f9a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	f043 0304 	orr.w	r3, r3, #4
 8001fa2:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	f023 0303 	bic.w	r3, r3, #3
 8001faa:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001fba:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	2120      	movs	r1, #32
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff57 	bl	8001e78 <SENSOR_IO_Write>
}
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b088      	sub	sp, #32
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	4603      	mov	r3, r0
 8001fda:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	b2d8      	uxtb	r0, r3
 8001fe0:	f107 0208 	add.w	r2, r7, #8
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	21b2      	movs	r1, #178	@ 0xb2
 8001fe8:	f7ff ff7e 	bl	8001ee8 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001fec:	88fb      	ldrh	r3, [r7, #6]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2135      	movs	r1, #53	@ 0x35
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ff5a 	bl	8001eac <SENSOR_IO_Read>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001ffc:	7ffb      	ldrb	r3, [r7, #31]
 8001ffe:	021b      	lsls	r3, r3, #8
 8002000:	b21b      	sxth	r3, r3
 8002002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002006:	b21a      	sxth	r2, r3
 8002008:	7a3b      	ldrb	r3, [r7, #8]
 800200a:	b21b      	sxth	r3, r3
 800200c:	4313      	orrs	r3, r2
 800200e:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002010:	7ffb      	ldrb	r3, [r7, #31]
 8002012:	019b      	lsls	r3, r3, #6
 8002014:	b21b      	sxth	r3, r3
 8002016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800201a:	b21a      	sxth	r2, r3
 800201c:	7a7b      	ldrb	r3, [r7, #9]
 800201e:	b21b      	sxth	r3, r3
 8002020:	4313      	orrs	r3, r2
 8002022:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002024:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002028:	10db      	asrs	r3, r3, #3
 800202a:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 800202c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002030:	10db      	asrs	r3, r3, #3
 8002032:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	b2d8      	uxtb	r0, r3
 8002038:	f107 0208 	add.w	r2, r7, #8
 800203c:	2304      	movs	r3, #4
 800203e:	21bc      	movs	r1, #188	@ 0xbc
 8002040:	f7ff ff52 	bl	8001ee8 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002044:	7a7b      	ldrb	r3, [r7, #9]
 8002046:	021b      	lsls	r3, r3, #8
 8002048:	b21a      	sxth	r2, r3
 800204a:	7a3b      	ldrb	r3, [r7, #8]
 800204c:	b21b      	sxth	r3, r3
 800204e:	4313      	orrs	r3, r2
 8002050:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002052:	7afb      	ldrb	r3, [r7, #11]
 8002054:	021b      	lsls	r3, r3, #8
 8002056:	b21a      	sxth	r2, r3
 8002058:	7abb      	ldrb	r3, [r7, #10]
 800205a:	b21b      	sxth	r3, r3
 800205c:	4313      	orrs	r3, r2
 800205e:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002060:	88fb      	ldrh	r3, [r7, #6]
 8002062:	b2d8      	uxtb	r0, r3
 8002064:	f107 0208 	add.w	r2, r7, #8
 8002068:	2302      	movs	r3, #2
 800206a:	21aa      	movs	r1, #170	@ 0xaa
 800206c:	f7ff ff3c 	bl	8001ee8 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002070:	7a7b      	ldrb	r3, [r7, #9]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	b21a      	sxth	r2, r3
 8002076:	7a3b      	ldrb	r3, [r7, #8]
 8002078:	b21b      	sxth	r3, r3
 800207a:	4313      	orrs	r3, r2
 800207c:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800207e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002082:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	ee07 3a90 	vmov	s15, r3
 800208c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002090:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002094:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020a2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80020a6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80020aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	ee07 3a90 	vmov	s15, r3
 80020b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020bc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80020c0:	ee07 3a90 	vmov	s15, r3
 80020c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020cc:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	ee07 3a90 	vmov	s15, r3
}
 80020d6:	eeb0 0a67 	vmov.f32	s0, s15
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ea:	2003      	movs	r0, #3
 80020ec:	f001 f97f 	bl	80033ee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020f0:	200f      	movs	r0, #15
 80020f2:	f7ff fc89 	bl	8001a08 <HAL_InitTick>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	71fb      	strb	r3, [r7, #7]
 8002100:	e001      	b.n	8002106 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002102:	f7ff f8fd 	bl	8001300 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002106:	79fb      	ldrb	r3, [r7, #7]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002114:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <HAL_IncTick+0x20>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <HAL_IncTick+0x24>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4413      	add	r3, r2
 8002120:	4a04      	ldr	r2, [pc, #16]	@ (8002134 <HAL_IncTick+0x24>)
 8002122:	6013      	str	r3, [r2, #0]
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	2000001c 	.word	0x2000001c
 8002134:	200005ac 	.word	0x200005ac

08002138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return uwTick;
 800213c:	4b03      	ldr	r3, [pc, #12]	@ (800214c <HAL_GetTick+0x14>)
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	200005ac 	.word	0x200005ac

08002150 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	609a      	str	r2, [r3, #8]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	609a      	str	r2, [r3, #8]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	3360      	adds	r3, #96	@ 0x60
 80021ca:	461a      	mov	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <LL_ADC_SetOffset+0x44>)
 80021da:	4013      	ands	r3, r2
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021f0:	bf00      	nop
 80021f2:	371c      	adds	r7, #28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	03fff000 	.word	0x03fff000

08002200 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3360      	adds	r3, #96	@ 0x60
 800220e:	461a      	mov	r2, r3
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002220:	4618      	mov	r0, r3
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	3360      	adds	r3, #96	@ 0x60
 800223c:	461a      	mov	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	431a      	orrs	r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002256:	bf00      	nop
 8002258:	371c      	adds	r7, #28
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	615a      	str	r2, [r3, #20]
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b087      	sub	sp, #28
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	3330      	adds	r3, #48	@ 0x30
 80022be:	461a      	mov	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	4413      	add	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	211f      	movs	r1, #31
 80022da:	fa01 f303 	lsl.w	r3, r1, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	401a      	ands	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	0e9b      	lsrs	r3, r3, #26
 80022e6:	f003 011f 	and.w	r1, r3, #31
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	fa01 f303 	lsl.w	r3, r1, r3
 80022f4:	431a      	orrs	r2, r3
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022fa:	bf00      	nop
 80022fc:	371c      	adds	r7, #28
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002306:	b480      	push	{r7}
 8002308:	b087      	sub	sp, #28
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	3314      	adds	r3, #20
 8002316:	461a      	mov	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	0e5b      	lsrs	r3, r3, #25
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	4413      	add	r3, r2
 8002324:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	0d1b      	lsrs	r3, r3, #20
 800232e:	f003 031f 	and.w	r3, r3, #31
 8002332:	2107      	movs	r1, #7
 8002334:	fa01 f303 	lsl.w	r3, r1, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	401a      	ands	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	0d1b      	lsrs	r3, r3, #20
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	431a      	orrs	r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002350:	bf00      	nop
 8002352:	371c      	adds	r7, #28
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002374:	43db      	mvns	r3, r3
 8002376:	401a      	ands	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f003 0318 	and.w	r3, r3, #24
 800237e:	4908      	ldr	r1, [pc, #32]	@ (80023a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002380:	40d9      	lsrs	r1, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	400b      	ands	r3, r1
 8002386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238a:	431a      	orrs	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002392:	bf00      	nop
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	0007ffff 	.word	0x0007ffff

080023a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80023b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6093      	str	r3, [r2, #8]
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023dc:	d101      	bne.n	80023e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002400:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002404:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002428:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800242c:	d101      	bne.n	8002432 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002450:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002454:	f043 0201 	orr.w	r2, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <LL_ADC_IsEnabled+0x18>
 800247c:	2301      	movs	r3, #1
 800247e:	e000      	b.n	8002482 <LL_ADC_IsEnabled+0x1a>
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800249e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024a2:	f043 0204 	orr.w	r2, r3, #4
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d101      	bne.n	80024ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d101      	bne.n	80024f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e129      	b.n	8002772 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002528:	2b00      	cmp	r3, #0
 800252a:	d109      	bne.n	8002540 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7fe ff0f 	bl	8001350 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff3f 	bl	80023c8 <LL_ADC_IsDeepPowerDownEnabled>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d004      	beq.n	800255a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff25 	bl	80023a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff ff5a 	bl	8002418 <LL_ADC_IsInternalRegulatorEnabled>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d115      	bne.n	8002596 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff ff3e 	bl	80023f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002574:	4b81      	ldr	r3, [pc, #516]	@ (800277c <HAL_ADC_Init+0x278>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	099b      	lsrs	r3, r3, #6
 800257a:	4a81      	ldr	r2, [pc, #516]	@ (8002780 <HAL_ADC_Init+0x27c>)
 800257c:	fba2 2303 	umull	r2, r3, r2, r3
 8002580:	099b      	lsrs	r3, r3, #6
 8002582:	3301      	adds	r3, #1
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002588:	e002      	b.n	8002590 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	3b01      	subs	r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f9      	bne.n	800258a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff ff3c 	bl	8002418 <LL_ADC_IsInternalRegulatorEnabled>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10d      	bne.n	80025c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025aa:	f043 0210 	orr.w	r2, r3, #16
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b6:	f043 0201 	orr.w	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff ff75 	bl	80024b6 <LL_ADC_REG_IsConversionOngoing>
 80025cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f040 80c2 	bne.w	8002760 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f040 80be 	bne.w	8002760 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80025ec:	f043 0202 	orr.w	r2, r3, #2
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff35 	bl	8002468 <LL_ADC_IsEnabled>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10b      	bne.n	800261c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002604:	485f      	ldr	r0, [pc, #380]	@ (8002784 <HAL_ADC_Init+0x280>)
 8002606:	f7ff ff2f 	bl	8002468 <LL_ADC_IsEnabled>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d105      	bne.n	800261c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4619      	mov	r1, r3
 8002616:	485c      	ldr	r0, [pc, #368]	@ (8002788 <HAL_ADC_Init+0x284>)
 8002618:	f7ff fd9a 	bl	8002150 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7e5b      	ldrb	r3, [r3, #25]
 8002620:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002626:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800262c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002632:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3020 	ldrb.w	r3, [r3, #32]
 800263a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d106      	bne.n	8002658 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264e:	3b01      	subs	r3, #1
 8002650:	045b      	lsls	r3, r3, #17
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265c:	2b00      	cmp	r3, #0
 800265e:	d009      	beq.n	8002674 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002664:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	4b44      	ldr	r3, [pc, #272]	@ (800278c <HAL_ADC_Init+0x288>)
 800267c:	4013      	ands	r3, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	69b9      	ldr	r1, [r7, #24]
 8002684:	430b      	orrs	r3, r1
 8002686:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff25 	bl	80024dc <LL_ADC_INJ_IsConversionOngoing>
 8002692:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d140      	bne.n	800271c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d13d      	bne.n	800271c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	7e1b      	ldrb	r3, [r3, #24]
 80026a8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026aa:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026b2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026c2:	f023 0306 	bic.w	r3, r3, #6
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	69b9      	ldr	r1, [r7, #24]
 80026cc:	430b      	orrs	r3, r1
 80026ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d118      	bne.n	800270c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80026e4:	f023 0304 	bic.w	r3, r3, #4
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026f0:	4311      	orrs	r1, r2
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80026f6:	4311      	orrs	r1, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80026fc:	430a      	orrs	r2, r1
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f042 0201 	orr.w	r2, r2, #1
 8002708:	611a      	str	r2, [r3, #16]
 800270a:	e007      	b.n	800271c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691a      	ldr	r2, [r3, #16]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d10c      	bne.n	800273e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272a:	f023 010f 	bic.w	r1, r3, #15
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	1e5a      	subs	r2, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	631a      	str	r2, [r3, #48]	@ 0x30
 800273c:	e007      	b.n	800274e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 020f 	bic.w	r2, r2, #15
 800274c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002752:	f023 0303 	bic.w	r3, r3, #3
 8002756:	f043 0201 	orr.w	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	659a      	str	r2, [r3, #88]	@ 0x58
 800275e:	e007      	b.n	8002770 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002764:	f043 0210 	orr.w	r2, r3, #16
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002770:	7ffb      	ldrb	r3, [r7, #31]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3720      	adds	r7, #32
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000004 	.word	0x20000004
 8002780:	053e2d63 	.word	0x053e2d63
 8002784:	50040000 	.word	0x50040000
 8002788:	50040300 	.word	0x50040300
 800278c:	fff0c007 	.word	0xfff0c007

08002790 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fe8a 	bl	80024b6 <LL_ADC_REG_IsConversionOngoing>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d14f      	bne.n	8002848 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_Start+0x26>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e04b      	b.n	800284e <HAL_ADC_Start+0xbe>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fce2 	bl	8003188 <ADC_Enable>
 80027c4:	4603      	mov	r3, r0
 80027c6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d137      	bne.n	800283e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80027d6:	f023 0301 	bic.w	r3, r3, #1
 80027da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ee:	d106      	bne.n	80027fe <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f4:	f023 0206 	bic.w	r2, r3, #6
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027fc:	e002      	b.n	8002804 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	221c      	movs	r2, #28
 800280a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d007      	beq.n	8002832 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002826:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800282a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fe29 	bl	800248e <LL_ADC_REG_StartConversion>
 800283c:	e006      	b.n	800284c <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002846:	e001      	b.n	800284c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002848:	2302      	movs	r3, #2
 800284a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800284c:	7bfb      	ldrb	r3, [r7, #15]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	2b08      	cmp	r3, #8
 8002866:	d102      	bne.n	800286e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002868:	2308      	movs	r3, #8
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	e010      	b.n	8002890 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d007      	beq.n	800288c <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002880:	f043 0220 	orr.w	r2, r3, #32
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e06f      	b.n	800296c <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800288c:	2304      	movs	r3, #4
 800288e:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002890:	f7ff fc52 	bl	8002138 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002896:	e021      	b.n	80028dc <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289e:	d01d      	beq.n	80028dc <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80028a0:	f7ff fc4a 	bl	8002138 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d302      	bcc.n	80028b6 <HAL_ADC_PollForConversion+0x60>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d112      	bne.n	80028dc <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	4013      	ands	r3, r2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10b      	bne.n	80028dc <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c8:	f043 0204 	orr.w	r2, r3, #4
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e047      	b.n	800296c <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	4013      	ands	r3, r2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0d6      	beq.n	8002898 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fcc4 	bl	8002288 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d01c      	beq.n	8002940 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	7e5b      	ldrb	r3, [r3, #25]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d118      	bne.n	8002940 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	2b08      	cmp	r3, #8
 800291a:	d111      	bne.n	8002940 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002920:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800292c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d105      	bne.n	8002940 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002938:	f043 0201 	orr.w	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2b08      	cmp	r3, #8
 800294c:	d104      	bne.n	8002958 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2208      	movs	r2, #8
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	e008      	b.n	800296a <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d103      	bne.n	800296a <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	220c      	movs	r2, #12
 8002968:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002982:	4618      	mov	r0, r3
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b0b6      	sub	sp, #216	@ 0xd8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x22>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e3d5      	b.n	800315e <HAL_ADC_ConfigChannel+0x7ce>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fd79 	bl	80024b6 <LL_ADC_REG_IsConversionOngoing>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f040 83ba 	bne.w	8003140 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b05      	cmp	r3, #5
 80029da:	d824      	bhi.n	8002a26 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	3b02      	subs	r3, #2
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d81b      	bhi.n	8002a1e <HAL_ADC_ConfigChannel+0x8e>
 80029e6:	a201      	add	r2, pc, #4	@ (adr r2, 80029ec <HAL_ADC_ConfigChannel+0x5c>)
 80029e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ec:	080029fd 	.word	0x080029fd
 80029f0:	08002a05 	.word	0x08002a05
 80029f4:	08002a0d 	.word	0x08002a0d
 80029f8:	08002a15 	.word	0x08002a15
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80029fc:	230c      	movs	r3, #12
 80029fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a02:	e010      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002a04:	2312      	movs	r3, #18
 8002a06:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a0a:	e00c      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002a0c:	2318      	movs	r3, #24
 8002a0e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a12:	e008      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002a14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a1c:	e003      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002a1e:	2306      	movs	r3, #6
 8002a20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a24:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002a34:	f7ff fc3b 	bl	80022ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fd3a 	bl	80024b6 <LL_ADC_REG_IsConversionOngoing>
 8002a42:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fd46 	bl	80024dc <LL_ADC_INJ_IsConversionOngoing>
 8002a50:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f040 81bf 	bne.w	8002ddc <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f040 81ba 	bne.w	8002ddc <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a70:	d10f      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	f7ff fc42 	bl	8002306 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fbe9 	bl	8002262 <LL_ADC_SetSamplingTimeCommonConfig>
 8002a90:	e00e      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	6819      	ldr	r1, [r3, #0]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f7ff fc31 	bl	8002306 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fbd9 	bl	8002262 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	08db      	lsrs	r3, r3, #3
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6818      	ldr	r0, [r3, #0]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	6919      	ldr	r1, [r3, #16]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ae2:	f7ff fb69 	bl	80021b8 <LL_ADC_SetOffset>
 8002ae6:	e179      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2100      	movs	r1, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff fb86 	bl	8002200 <LL_ADC_GetOffsetChannel>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10a      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x184>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2100      	movs	r1, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fb7b 	bl	8002200 <LL_ADC_GetOffsetChannel>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	0e9b      	lsrs	r3, r3, #26
 8002b0e:	f003 021f 	and.w	r2, r3, #31
 8002b12:	e01e      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x1c2>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fb70 	bl	8002200 <LL_ADC_GetOffsetChannel>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002b42:	2320      	movs	r3, #32
 8002b44:	e004      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002b46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d105      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x1da>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	0e9b      	lsrs	r3, r3, #26
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	e018      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x20c>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b76:	fa93 f3a3 	rbit	r3, r3
 8002b7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002b7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002b86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002b8e:	2320      	movs	r3, #32
 8002b90:	e004      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002b92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d106      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fb3f 	bl	800222c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff fb23 	bl	8002200 <LL_ADC_GetOffsetChannel>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10a      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x24a>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2101      	movs	r1, #1
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fb18 	bl	8002200 <LL_ADC_GetOffsetChannel>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	0e9b      	lsrs	r3, r3, #26
 8002bd4:	f003 021f 	and.w	r2, r3, #31
 8002bd8:	e01e      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x288>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2101      	movs	r1, #1
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fb0d 	bl	8002200 <LL_ADC_GetOffsetChannel>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002bf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002c00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002c08:	2320      	movs	r3, #32
 8002c0a:	e004      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002c0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c10:	fab3 f383 	clz	r3, r3
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d105      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x2a0>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	0e9b      	lsrs	r3, r3, #26
 8002c2a:	f003 031f 	and.w	r3, r3, #31
 8002c2e:	e018      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x2d2>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c3c:	fa93 f3a3 	rbit	r3, r3
 8002c40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002c44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002c54:	2320      	movs	r3, #32
 8002c56:	e004      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002c58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c5c:	fab3 f383 	clz	r3, r3
 8002c60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d106      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff fadc 	bl	800222c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2102      	movs	r1, #2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff fac0 	bl	8002200 <LL_ADC_GetOffsetChannel>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10a      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x310>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2102      	movs	r1, #2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fab5 	bl	8002200 <LL_ADC_GetOffsetChannel>
 8002c96:	4603      	mov	r3, r0
 8002c98:	0e9b      	lsrs	r3, r3, #26
 8002c9a:	f003 021f 	and.w	r2, r3, #31
 8002c9e:	e01e      	b.n	8002cde <HAL_ADC_ConfigChannel+0x34e>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2102      	movs	r1, #2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff faaa 	bl	8002200 <LL_ADC_GetOffsetChannel>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002cb6:	fa93 f3a3 	rbit	r3, r3
 8002cba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002cbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002cce:	2320      	movs	r3, #32
 8002cd0:	e004      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d105      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x366>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	0e9b      	lsrs	r3, r3, #26
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	e014      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x390>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cfe:	fa93 f3a3 	rbit	r3, r3
 8002d02:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002d04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002d0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002d12:	2320      	movs	r3, #32
 8002d14:	e004      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002d16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d106      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2102      	movs	r1, #2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fa7d 	bl	800222c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2103      	movs	r1, #3
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fa61 	bl	8002200 <LL_ADC_GetOffsetChannel>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10a      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x3ce>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2103      	movs	r1, #3
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fa56 	bl	8002200 <LL_ADC_GetOffsetChannel>
 8002d54:	4603      	mov	r3, r0
 8002d56:	0e9b      	lsrs	r3, r3, #26
 8002d58:	f003 021f 	and.w	r2, r3, #31
 8002d5c:	e017      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x3fe>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2103      	movs	r1, #3
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff fa4b 	bl	8002200 <LL_ADC_GetOffsetChannel>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002d76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d78:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002d7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002d80:	2320      	movs	r3, #32
 8002d82:	e003      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002d84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d105      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x416>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	0e9b      	lsrs	r3, r3, #26
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	e011      	b.n	8002dca <HAL_ADC_ConfigChannel+0x43a>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002db4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002db6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002db8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002dbe:	2320      	movs	r3, #32
 8002dc0:	e003      	b.n	8002dca <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002dc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002dc4:	fab3 f383 	clz	r3, r3
 8002dc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d106      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2103      	movs	r1, #3
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fa28 	bl	800222c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fb41 	bl	8002468 <LL_ADC_IsEnabled>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f040 813f 	bne.w	800306c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	6819      	ldr	r1, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f7ff faae 	bl	800235c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	4a8e      	ldr	r2, [pc, #568]	@ (8003040 <HAL_ADC_ConfigChannel+0x6b0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	f040 8130 	bne.w	800306c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10b      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x4a4>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	0e9b      	lsrs	r3, r3, #26
 8002e22:	3301      	adds	r3, #1
 8002e24:	f003 031f 	and.w	r3, r3, #31
 8002e28:	2b09      	cmp	r3, #9
 8002e2a:	bf94      	ite	ls
 8002e2c:	2301      	movls	r3, #1
 8002e2e:	2300      	movhi	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	e019      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x4d8>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e44:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002e46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002e4c:	2320      	movs	r3, #32
 8002e4e:	e003      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002e50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	3301      	adds	r3, #1
 8002e5a:	f003 031f 	and.w	r3, r3, #31
 8002e5e:	2b09      	cmp	r3, #9
 8002e60:	bf94      	ite	ls
 8002e62:	2301      	movls	r3, #1
 8002e64:	2300      	movhi	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d079      	beq.n	8002f60 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d107      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x4f8>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	0e9b      	lsrs	r3, r3, #26
 8002e7e:	3301      	adds	r3, #1
 8002e80:	069b      	lsls	r3, r3, #26
 8002e82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e86:	e015      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x524>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e90:	fa93 f3a3 	rbit	r3, r3
 8002e94:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002e96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e98:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002e9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002ea0:	2320      	movs	r3, #32
 8002ea2:	e003      	b.n	8002eac <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002ea4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ea6:	fab3 f383 	clz	r3, r3
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	3301      	adds	r3, #1
 8002eae:	069b      	lsls	r3, r3, #26
 8002eb0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x544>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	0e9b      	lsrs	r3, r3, #26
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	2101      	movs	r1, #1
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	e017      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x574>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002edc:	fa93 f3a3 	rbit	r3, r3
 8002ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002ee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ee4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002ee6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002eec:	2320      	movs	r3, #32
 8002eee:	e003      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ef2:	fab3 f383 	clz	r3, r3
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	3301      	adds	r3, #1
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	2101      	movs	r1, #1
 8002f00:	fa01 f303 	lsl.w	r3, r1, r3
 8002f04:	ea42 0103 	orr.w	r1, r2, r3
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10a      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x59a>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	0e9b      	lsrs	r3, r3, #26
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f003 021f 	and.w	r2, r3, #31
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	051b      	lsls	r3, r3, #20
 8002f28:	e018      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x5cc>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f32:	fa93 f3a3 	rbit	r3, r3
 8002f36:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002f42:	2320      	movs	r3, #32
 8002f44:	e003      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	f003 021f 	and.w	r2, r3, #31
 8002f54:	4613      	mov	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4413      	add	r3, r2
 8002f5a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	e080      	b.n	8003062 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d107      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x5ec>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	0e9b      	lsrs	r3, r3, #26
 8002f72:	3301      	adds	r3, #1
 8002f74:	069b      	lsls	r3, r3, #26
 8002f76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f7a:	e015      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0x618>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f84:	fa93 f3a3 	rbit	r3, r3
 8002f88:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002f94:	2320      	movs	r3, #32
 8002f96:	e003      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f9a:	fab3 f383 	clz	r3, r3
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	069b      	lsls	r3, r3, #26
 8002fa4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d109      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x638>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	0e9b      	lsrs	r3, r3, #26
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f003 031f 	and.w	r3, r3, #31
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc6:	e017      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x668>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	fa93 f3a3 	rbit	r3, r3
 8002fd4:	61bb      	str	r3, [r7, #24]
  return result;
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002fe0:	2320      	movs	r3, #32
 8002fe2:	e003      	b.n	8002fec <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	fab3 f383 	clz	r3, r3
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	3301      	adds	r3, #1
 8002fee:	f003 031f 	and.w	r3, r3, #31
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff8:	ea42 0103 	orr.w	r1, r2, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10d      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x694>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	0e9b      	lsrs	r3, r3, #26
 800300e:	3301      	adds	r3, #1
 8003010:	f003 021f 	and.w	r2, r3, #31
 8003014:	4613      	mov	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	4413      	add	r3, r2
 800301a:	3b1e      	subs	r3, #30
 800301c:	051b      	lsls	r3, r3, #20
 800301e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003022:	e01d      	b.n	8003060 <HAL_ADC_ConfigChannel+0x6d0>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	fa93 f3a3 	rbit	r3, r3
 8003030:	60fb      	str	r3, [r7, #12]
  return result;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d103      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800303c:	2320      	movs	r3, #32
 800303e:	e005      	b.n	800304c <HAL_ADC_ConfigChannel+0x6bc>
 8003040:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	3301      	adds	r3, #1
 800304e:	f003 021f 	and.w	r2, r3, #31
 8003052:	4613      	mov	r3, r2
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	4413      	add	r3, r2
 8003058:	3b1e      	subs	r3, #30
 800305a:	051b      	lsls	r3, r3, #20
 800305c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003060:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003066:	4619      	mov	r1, r3
 8003068:	f7ff f94d 	bl	8002306 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	4b3d      	ldr	r3, [pc, #244]	@ (8003168 <HAL_ADC_ConfigChannel+0x7d8>)
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d06c      	beq.n	8003152 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003078:	483c      	ldr	r0, [pc, #240]	@ (800316c <HAL_ADC_ConfigChannel+0x7dc>)
 800307a:	f7ff f88f 	bl	800219c <LL_ADC_GetCommonPathInternalCh>
 800307e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a3a      	ldr	r2, [pc, #232]	@ (8003170 <HAL_ADC_ConfigChannel+0x7e0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d127      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800308c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003090:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d121      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a35      	ldr	r2, [pc, #212]	@ (8003174 <HAL_ADC_ConfigChannel+0x7e4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d157      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030aa:	4619      	mov	r1, r3
 80030ac:	482f      	ldr	r0, [pc, #188]	@ (800316c <HAL_ADC_ConfigChannel+0x7dc>)
 80030ae:	f7ff f862 	bl	8002176 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030b2:	4b31      	ldr	r3, [pc, #196]	@ (8003178 <HAL_ADC_ConfigChannel+0x7e8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	099b      	lsrs	r3, r3, #6
 80030b8:	4a30      	ldr	r2, [pc, #192]	@ (800317c <HAL_ADC_ConfigChannel+0x7ec>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	099b      	lsrs	r3, r3, #6
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	4613      	mov	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80030cc:	e002      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	3b01      	subs	r3, #1
 80030d2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f9      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030da:	e03a      	b.n	8003152 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a27      	ldr	r2, [pc, #156]	@ (8003180 <HAL_ADC_ConfigChannel+0x7f0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d113      	bne.n	800310e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10d      	bne.n	800310e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003174 <HAL_ADC_ConfigChannel+0x7e4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d12a      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003100:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003104:	4619      	mov	r1, r3
 8003106:	4819      	ldr	r0, [pc, #100]	@ (800316c <HAL_ADC_ConfigChannel+0x7dc>)
 8003108:	f7ff f835 	bl	8002176 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800310c:	e021      	b.n	8003152 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a1c      	ldr	r2, [pc, #112]	@ (8003184 <HAL_ADC_ConfigChannel+0x7f4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d11c      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003118:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800311c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d116      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a12      	ldr	r2, [pc, #72]	@ (8003174 <HAL_ADC_ConfigChannel+0x7e4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d111      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800312e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003132:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003136:	4619      	mov	r1, r3
 8003138:	480c      	ldr	r0, [pc, #48]	@ (800316c <HAL_ADC_ConfigChannel+0x7dc>)
 800313a:	f7ff f81c 	bl	8002176 <LL_ADC_SetCommonPathInternalCh>
 800313e:	e008      	b.n	8003152 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003144:	f043 0220 	orr.w	r2, r3, #32
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800315a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800315e:	4618      	mov	r0, r3
 8003160:	37d8      	adds	r7, #216	@ 0xd8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	80080000 	.word	0x80080000
 800316c:	50040300 	.word	0x50040300
 8003170:	c7520000 	.word	0xc7520000
 8003174:	50040000 	.word	0x50040000
 8003178:	20000004 	.word	0x20000004
 800317c:	053e2d63 	.word	0x053e2d63
 8003180:	cb840000 	.word	0xcb840000
 8003184:	80000001 	.word	0x80000001

08003188 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003190:	2300      	movs	r3, #0
 8003192:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff f965 	bl	8002468 <LL_ADC_IsEnabled>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d169      	bne.n	8003278 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	4b36      	ldr	r3, [pc, #216]	@ (8003284 <ADC_Enable+0xfc>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00d      	beq.n	80031ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b6:	f043 0210 	orr.w	r2, r3, #16
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c2:	f043 0201 	orr.w	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e055      	b.n	800327a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff f934 	bl	8002440 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80031d8:	482b      	ldr	r0, [pc, #172]	@ (8003288 <ADC_Enable+0x100>)
 80031da:	f7fe ffdf 	bl	800219c <LL_ADC_GetCommonPathInternalCh>
 80031de:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80031e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d013      	beq.n	8003210 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031e8:	4b28      	ldr	r3, [pc, #160]	@ (800328c <ADC_Enable+0x104>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	099b      	lsrs	r3, r3, #6
 80031ee:	4a28      	ldr	r2, [pc, #160]	@ (8003290 <ADC_Enable+0x108>)
 80031f0:	fba2 2303 	umull	r2, r3, r2, r3
 80031f4:	099b      	lsrs	r3, r3, #6
 80031f6:	1c5a      	adds	r2, r3, #1
 80031f8:	4613      	mov	r3, r2
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	4413      	add	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003202:	e002      	b.n	800320a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	3b01      	subs	r3, #1
 8003208:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1f9      	bne.n	8003204 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003210:	f7fe ff92 	bl	8002138 <HAL_GetTick>
 8003214:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003216:	e028      	b.n	800326a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff f923 	bl	8002468 <LL_ADC_IsEnabled>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d104      	bne.n	8003232 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff f907 	bl	8002440 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003232:	f7fe ff81 	bl	8002138 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d914      	bls.n	800326a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b01      	cmp	r3, #1
 800324c:	d00d      	beq.n	800326a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003252:	f043 0210 	orr.w	r2, r3, #16
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325e:	f043 0201 	orr.w	r2, r3, #1
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e007      	b.n	800327a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	d1cf      	bne.n	8003218 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	8000003f 	.word	0x8000003f
 8003288:	50040300 	.word	0x50040300
 800328c:	20000004 	.word	0x20000004
 8003290:	053e2d63 	.word	0x053e2d63

08003294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032a4:	4b0c      	ldr	r3, [pc, #48]	@ (80032d8 <__NVIC_SetPriorityGrouping+0x44>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032b0:	4013      	ands	r3, r2
 80032b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032c6:	4a04      	ldr	r2, [pc, #16]	@ (80032d8 <__NVIC_SetPriorityGrouping+0x44>)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	60d3      	str	r3, [r2, #12]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032e0:	4b04      	ldr	r3, [pc, #16]	@ (80032f4 <__NVIC_GetPriorityGrouping+0x18>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	0a1b      	lsrs	r3, r3, #8
 80032e6:	f003 0307 	and.w	r3, r3, #7
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003306:	2b00      	cmp	r3, #0
 8003308:	db0b      	blt.n	8003322 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	f003 021f 	and.w	r2, r3, #31
 8003310:	4907      	ldr	r1, [pc, #28]	@ (8003330 <__NVIC_EnableIRQ+0x38>)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	2001      	movs	r0, #1
 800331a:	fa00 f202 	lsl.w	r2, r0, r2
 800331e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	e000e100 	.word	0xe000e100

08003334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	6039      	str	r1, [r7, #0]
 800333e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003344:	2b00      	cmp	r3, #0
 8003346:	db0a      	blt.n	800335e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	b2da      	uxtb	r2, r3
 800334c:	490c      	ldr	r1, [pc, #48]	@ (8003380 <__NVIC_SetPriority+0x4c>)
 800334e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003352:	0112      	lsls	r2, r2, #4
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	440b      	add	r3, r1
 8003358:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800335c:	e00a      	b.n	8003374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	b2da      	uxtb	r2, r3
 8003362:	4908      	ldr	r1, [pc, #32]	@ (8003384 <__NVIC_SetPriority+0x50>)
 8003364:	79fb      	ldrb	r3, [r7, #7]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	3b04      	subs	r3, #4
 800336c:	0112      	lsls	r2, r2, #4
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	440b      	add	r3, r1
 8003372:	761a      	strb	r2, [r3, #24]
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000e100 	.word	0xe000e100
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003388:	b480      	push	{r7}
 800338a:	b089      	sub	sp, #36	@ 0x24
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f1c3 0307 	rsb	r3, r3, #7
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	bf28      	it	cs
 80033a6:	2304      	movcs	r3, #4
 80033a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	3304      	adds	r3, #4
 80033ae:	2b06      	cmp	r3, #6
 80033b0:	d902      	bls.n	80033b8 <NVIC_EncodePriority+0x30>
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	3b03      	subs	r3, #3
 80033b6:	e000      	b.n	80033ba <NVIC_EncodePriority+0x32>
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033bc:	f04f 32ff 	mov.w	r2, #4294967295
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43da      	mvns	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	401a      	ands	r2, r3
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033d0:	f04f 31ff 	mov.w	r1, #4294967295
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	fa01 f303 	lsl.w	r3, r1, r3
 80033da:	43d9      	mvns	r1, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e0:	4313      	orrs	r3, r2
         );
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3724      	adds	r7, #36	@ 0x24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7ff ff4c 	bl	8003294 <__NVIC_SetPriorityGrouping>
}
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003416:	f7ff ff61 	bl	80032dc <__NVIC_GetPriorityGrouping>
 800341a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	6978      	ldr	r0, [r7, #20]
 8003422:	f7ff ffb1 	bl	8003388 <NVIC_EncodePriority>
 8003426:	4602      	mov	r2, r0
 8003428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342c:	4611      	mov	r1, r2
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff ff80 	bl	8003334 <__NVIC_SetPriority>
}
 8003434:	bf00      	nop
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff ff54 	bl	80032f8 <__NVIC_EnableIRQ>
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e0ac      	b.n	80035c4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f000 f8b2 	bl	80035d8 <DFSDM_GetChannelFromInstance>
 8003474:	4603      	mov	r3, r0
 8003476:	4a55      	ldr	r2, [pc, #340]	@ (80035cc <HAL_DFSDM_ChannelInit+0x174>)
 8003478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e09f      	b.n	80035c4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7fd ffa3 	bl	80013d0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800348a:	4b51      	ldr	r3, [pc, #324]	@ (80035d0 <HAL_DFSDM_ChannelInit+0x178>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	3301      	adds	r3, #1
 8003490:	4a4f      	ldr	r2, [pc, #316]	@ (80035d0 <HAL_DFSDM_ChannelInit+0x178>)
 8003492:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003494:	4b4e      	ldr	r3, [pc, #312]	@ (80035d0 <HAL_DFSDM_ChannelInit+0x178>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d125      	bne.n	80034e8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800349c:	4b4d      	ldr	r3, [pc, #308]	@ (80035d4 <HAL_DFSDM_ChannelInit+0x17c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a4c      	ldr	r2, [pc, #304]	@ (80035d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80034a6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80034a8:	4b4a      	ldr	r3, [pc, #296]	@ (80035d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	4948      	ldr	r1, [pc, #288]	@ (80035d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80034b6:	4b47      	ldr	r3, [pc, #284]	@ (80035d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a46      	ldr	r2, [pc, #280]	@ (80035d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034bc:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80034c0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	791b      	ldrb	r3, [r3, #4]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d108      	bne.n	80034dc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80034ca:	4b42      	ldr	r3, [pc, #264]	@ (80035d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	041b      	lsls	r3, r3, #16
 80034d6:	493f      	ldr	r1, [pc, #252]	@ (80035d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80034dc:	4b3d      	ldr	r3, [pc, #244]	@ (80035d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a3c      	ldr	r2, [pc, #240]	@ (80035d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034e6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80034f6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6819      	ldr	r1, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003506:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800350c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 020f 	bic.w	r2, r2, #15
 8003524:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6819      	ldr	r1, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 800354c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6899      	ldr	r1, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355c:	3b01      	subs	r3, #1
 800355e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003560:	431a      	orrs	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f002 0207 	and.w	r2, r2, #7
 8003578:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6859      	ldr	r1, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003584:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800358c:	431a      	orrs	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035a4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 f810 	bl	80035d8 <DFSDM_GetChannelFromInstance>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4904      	ldr	r1, [pc, #16]	@ (80035cc <HAL_DFSDM_ChannelInit+0x174>)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	200005b4 	.word	0x200005b4
 80035d0:	200005b0 	.word	0x200005b0
 80035d4:	40016000 	.word	0x40016000

080035d8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003654 <DFSDM_GetChannelFromInstance+0x7c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d102      	bne.n	80035ee <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	e02b      	b.n	8003646 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a19      	ldr	r2, [pc, #100]	@ (8003658 <DFSDM_GetChannelFromInstance+0x80>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d102      	bne.n	80035fc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80035f6:	2301      	movs	r3, #1
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	e024      	b.n	8003646 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a17      	ldr	r2, [pc, #92]	@ (800365c <DFSDM_GetChannelFromInstance+0x84>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d102      	bne.n	800360a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003604:	2302      	movs	r3, #2
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	e01d      	b.n	8003646 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a14      	ldr	r2, [pc, #80]	@ (8003660 <DFSDM_GetChannelFromInstance+0x88>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d102      	bne.n	8003618 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003612:	2304      	movs	r3, #4
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	e016      	b.n	8003646 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a12      	ldr	r2, [pc, #72]	@ (8003664 <DFSDM_GetChannelFromInstance+0x8c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d102      	bne.n	8003626 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003620:	2305      	movs	r3, #5
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	e00f      	b.n	8003646 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a0f      	ldr	r2, [pc, #60]	@ (8003668 <DFSDM_GetChannelFromInstance+0x90>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d102      	bne.n	8003634 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800362e:	2306      	movs	r3, #6
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	e008      	b.n	8003646 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a0d      	ldr	r2, [pc, #52]	@ (800366c <DFSDM_GetChannelFromInstance+0x94>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d102      	bne.n	8003642 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800363c:	2307      	movs	r3, #7
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	e001      	b.n	8003646 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003642:	2303      	movs	r3, #3
 8003644:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003646:	68fb      	ldr	r3, [r7, #12]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	40016000 	.word	0x40016000
 8003658:	40016020 	.word	0x40016020
 800365c:	40016040 	.word	0x40016040
 8003660:	40016080 	.word	0x40016080
 8003664:	400160a0 	.word	0x400160a0
 8003668:	400160c0 	.word	0x400160c0
 800366c:	400160e0 	.word	0x400160e0

08003670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800367e:	e166      	b.n	800394e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	2101      	movs	r1, #1
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	fa01 f303 	lsl.w	r3, r1, r3
 800368c:	4013      	ands	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8158 	beq.w	8003948 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d005      	beq.n	80036b0 <HAL_GPIO_Init+0x40>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d130      	bne.n	8003712 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	2203      	movs	r2, #3
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	43db      	mvns	r3, r3
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4013      	ands	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036e6:	2201      	movs	r2, #1
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	43db      	mvns	r3, r3
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4013      	ands	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	091b      	lsrs	r3, r3, #4
 80036fc:	f003 0201 	and.w	r2, r3, #1
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	2b03      	cmp	r3, #3
 800371c:	d017      	beq.n	800374e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	2203      	movs	r2, #3
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43db      	mvns	r3, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4013      	ands	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d123      	bne.n	80037a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	08da      	lsrs	r2, r3, #3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3208      	adds	r2, #8
 8003762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003766:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	220f      	movs	r2, #15
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4013      	ands	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	08da      	lsrs	r2, r3, #3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3208      	adds	r2, #8
 800379c:	6939      	ldr	r1, [r7, #16]
 800379e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	2203      	movs	r2, #3
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4013      	ands	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f003 0203 	and.w	r2, r3, #3
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 80b2 	beq.w	8003948 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037e4:	4b61      	ldr	r3, [pc, #388]	@ (800396c <HAL_GPIO_Init+0x2fc>)
 80037e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e8:	4a60      	ldr	r2, [pc, #384]	@ (800396c <HAL_GPIO_Init+0x2fc>)
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80037f0:	4b5e      	ldr	r3, [pc, #376]	@ (800396c <HAL_GPIO_Init+0x2fc>)
 80037f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037fc:	4a5c      	ldr	r2, [pc, #368]	@ (8003970 <HAL_GPIO_Init+0x300>)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	089b      	lsrs	r3, r3, #2
 8003802:	3302      	adds	r3, #2
 8003804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003808:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	220f      	movs	r2, #15
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4013      	ands	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003826:	d02b      	beq.n	8003880 <HAL_GPIO_Init+0x210>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a52      	ldr	r2, [pc, #328]	@ (8003974 <HAL_GPIO_Init+0x304>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d025      	beq.n	800387c <HAL_GPIO_Init+0x20c>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a51      	ldr	r2, [pc, #324]	@ (8003978 <HAL_GPIO_Init+0x308>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d01f      	beq.n	8003878 <HAL_GPIO_Init+0x208>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a50      	ldr	r2, [pc, #320]	@ (800397c <HAL_GPIO_Init+0x30c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d019      	beq.n	8003874 <HAL_GPIO_Init+0x204>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a4f      	ldr	r2, [pc, #316]	@ (8003980 <HAL_GPIO_Init+0x310>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d013      	beq.n	8003870 <HAL_GPIO_Init+0x200>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a4e      	ldr	r2, [pc, #312]	@ (8003984 <HAL_GPIO_Init+0x314>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d00d      	beq.n	800386c <HAL_GPIO_Init+0x1fc>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a4d      	ldr	r2, [pc, #308]	@ (8003988 <HAL_GPIO_Init+0x318>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d007      	beq.n	8003868 <HAL_GPIO_Init+0x1f8>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a4c      	ldr	r2, [pc, #304]	@ (800398c <HAL_GPIO_Init+0x31c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d101      	bne.n	8003864 <HAL_GPIO_Init+0x1f4>
 8003860:	2307      	movs	r3, #7
 8003862:	e00e      	b.n	8003882 <HAL_GPIO_Init+0x212>
 8003864:	2308      	movs	r3, #8
 8003866:	e00c      	b.n	8003882 <HAL_GPIO_Init+0x212>
 8003868:	2306      	movs	r3, #6
 800386a:	e00a      	b.n	8003882 <HAL_GPIO_Init+0x212>
 800386c:	2305      	movs	r3, #5
 800386e:	e008      	b.n	8003882 <HAL_GPIO_Init+0x212>
 8003870:	2304      	movs	r3, #4
 8003872:	e006      	b.n	8003882 <HAL_GPIO_Init+0x212>
 8003874:	2303      	movs	r3, #3
 8003876:	e004      	b.n	8003882 <HAL_GPIO_Init+0x212>
 8003878:	2302      	movs	r3, #2
 800387a:	e002      	b.n	8003882 <HAL_GPIO_Init+0x212>
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <HAL_GPIO_Init+0x212>
 8003880:	2300      	movs	r3, #0
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	f002 0203 	and.w	r2, r2, #3
 8003888:	0092      	lsls	r2, r2, #2
 800388a:	4093      	lsls	r3, r2
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003892:	4937      	ldr	r1, [pc, #220]	@ (8003970 <HAL_GPIO_Init+0x300>)
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	089b      	lsrs	r3, r3, #2
 8003898:	3302      	adds	r3, #2
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003990 <HAL_GPIO_Init+0x320>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4013      	ands	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80038c4:	4a32      	ldr	r2, [pc, #200]	@ (8003990 <HAL_GPIO_Init+0x320>)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80038ca:	4b31      	ldr	r3, [pc, #196]	@ (8003990 <HAL_GPIO_Init+0x320>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4013      	ands	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038ee:	4a28      	ldr	r2, [pc, #160]	@ (8003990 <HAL_GPIO_Init+0x320>)
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80038f4:	4b26      	ldr	r3, [pc, #152]	@ (8003990 <HAL_GPIO_Init+0x320>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	43db      	mvns	r3, r3
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003918:	4a1d      	ldr	r2, [pc, #116]	@ (8003990 <HAL_GPIO_Init+0x320>)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800391e:	4b1c      	ldr	r3, [pc, #112]	@ (8003990 <HAL_GPIO_Init+0x320>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	43db      	mvns	r3, r3
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4013      	ands	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003942:	4a13      	ldr	r2, [pc, #76]	@ (8003990 <HAL_GPIO_Init+0x320>)
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	3301      	adds	r3, #1
 800394c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	f47f ae91 	bne.w	8003680 <HAL_GPIO_Init+0x10>
  }
}
 800395e:	bf00      	nop
 8003960:	bf00      	nop
 8003962:	371c      	adds	r7, #28
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	40021000 	.word	0x40021000
 8003970:	40010000 	.word	0x40010000
 8003974:	48000400 	.word	0x48000400
 8003978:	48000800 	.word	0x48000800
 800397c:	48000c00 	.word	0x48000c00
 8003980:	48001000 	.word	0x48001000
 8003984:	48001400 	.word	0x48001400
 8003988:	48001800 	.word	0x48001800
 800398c:	48001c00 	.word	0x48001c00
 8003990:	40010400 	.word	0x40010400

08003994 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80039a2:	e0c9      	b.n	8003b38 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80039a4:	2201      	movs	r2, #1
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	4013      	ands	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 80bc 	beq.w	8003b32 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80039ba:	4a66      	ldr	r2, [pc, #408]	@ (8003b54 <HAL_GPIO_DeInit+0x1c0>)
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	089b      	lsrs	r3, r3, #2
 80039c0:	3302      	adds	r3, #2
 80039c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	220f      	movs	r2, #15
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4013      	ands	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80039e2:	d02b      	beq.n	8003a3c <HAL_GPIO_DeInit+0xa8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a5c      	ldr	r2, [pc, #368]	@ (8003b58 <HAL_GPIO_DeInit+0x1c4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d025      	beq.n	8003a38 <HAL_GPIO_DeInit+0xa4>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a5b      	ldr	r2, [pc, #364]	@ (8003b5c <HAL_GPIO_DeInit+0x1c8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d01f      	beq.n	8003a34 <HAL_GPIO_DeInit+0xa0>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a5a      	ldr	r2, [pc, #360]	@ (8003b60 <HAL_GPIO_DeInit+0x1cc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d019      	beq.n	8003a30 <HAL_GPIO_DeInit+0x9c>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a59      	ldr	r2, [pc, #356]	@ (8003b64 <HAL_GPIO_DeInit+0x1d0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d013      	beq.n	8003a2c <HAL_GPIO_DeInit+0x98>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a58      	ldr	r2, [pc, #352]	@ (8003b68 <HAL_GPIO_DeInit+0x1d4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00d      	beq.n	8003a28 <HAL_GPIO_DeInit+0x94>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a57      	ldr	r2, [pc, #348]	@ (8003b6c <HAL_GPIO_DeInit+0x1d8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d007      	beq.n	8003a24 <HAL_GPIO_DeInit+0x90>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a56      	ldr	r2, [pc, #344]	@ (8003b70 <HAL_GPIO_DeInit+0x1dc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d101      	bne.n	8003a20 <HAL_GPIO_DeInit+0x8c>
 8003a1c:	2307      	movs	r3, #7
 8003a1e:	e00e      	b.n	8003a3e <HAL_GPIO_DeInit+0xaa>
 8003a20:	2308      	movs	r3, #8
 8003a22:	e00c      	b.n	8003a3e <HAL_GPIO_DeInit+0xaa>
 8003a24:	2306      	movs	r3, #6
 8003a26:	e00a      	b.n	8003a3e <HAL_GPIO_DeInit+0xaa>
 8003a28:	2305      	movs	r3, #5
 8003a2a:	e008      	b.n	8003a3e <HAL_GPIO_DeInit+0xaa>
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	e006      	b.n	8003a3e <HAL_GPIO_DeInit+0xaa>
 8003a30:	2303      	movs	r3, #3
 8003a32:	e004      	b.n	8003a3e <HAL_GPIO_DeInit+0xaa>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e002      	b.n	8003a3e <HAL_GPIO_DeInit+0xaa>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <HAL_GPIO_DeInit+0xaa>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	f002 0203 	and.w	r2, r2, #3
 8003a44:	0092      	lsls	r2, r2, #2
 8003a46:	4093      	lsls	r3, r2
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d132      	bne.n	8003ab4 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003a4e:	4b49      	ldr	r3, [pc, #292]	@ (8003b74 <HAL_GPIO_DeInit+0x1e0>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	43db      	mvns	r3, r3
 8003a56:	4947      	ldr	r1, [pc, #284]	@ (8003b74 <HAL_GPIO_DeInit+0x1e0>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003a5c:	4b45      	ldr	r3, [pc, #276]	@ (8003b74 <HAL_GPIO_DeInit+0x1e0>)
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	43db      	mvns	r3, r3
 8003a64:	4943      	ldr	r1, [pc, #268]	@ (8003b74 <HAL_GPIO_DeInit+0x1e0>)
 8003a66:	4013      	ands	r3, r2
 8003a68:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003a6a:	4b42      	ldr	r3, [pc, #264]	@ (8003b74 <HAL_GPIO_DeInit+0x1e0>)
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	43db      	mvns	r3, r3
 8003a72:	4940      	ldr	r1, [pc, #256]	@ (8003b74 <HAL_GPIO_DeInit+0x1e0>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003a78:	4b3e      	ldr	r3, [pc, #248]	@ (8003b74 <HAL_GPIO_DeInit+0x1e0>)
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	493c      	ldr	r1, [pc, #240]	@ (8003b74 <HAL_GPIO_DeInit+0x1e0>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	220f      	movs	r2, #15
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003a96:	4a2f      	ldr	r2, [pc, #188]	@ (8003b54 <HAL_GPIO_DeInit+0x1c0>)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	089b      	lsrs	r3, r3, #2
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	43da      	mvns	r2, r3
 8003aa6:	482b      	ldr	r0, [pc, #172]	@ (8003b54 <HAL_GPIO_DeInit+0x1c0>)
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	089b      	lsrs	r3, r3, #2
 8003aac:	400a      	ands	r2, r1
 8003aae:	3302      	adds	r3, #2
 8003ab0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	2103      	movs	r1, #3
 8003abe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	08da      	lsrs	r2, r3, #3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3208      	adds	r2, #8
 8003ad0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	220f      	movs	r2, #15
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	08d2      	lsrs	r2, r2, #3
 8003ae8:	4019      	ands	r1, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3208      	adds	r2, #8
 8003aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	2103      	movs	r1, #3
 8003afc:	fa01 f303 	lsl.w	r3, r1, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	401a      	ands	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	fa01 f303 	lsl.w	r3, r1, r3
 8003b14:	43db      	mvns	r3, r3
 8003b16:	401a      	ands	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	2103      	movs	r1, #3
 8003b26:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	401a      	ands	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	3301      	adds	r3, #1
 8003b36:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f47f af2f 	bne.w	80039a4 <HAL_GPIO_DeInit+0x10>
  }
}
 8003b46:	bf00      	nop
 8003b48:	bf00      	nop
 8003b4a:	371c      	adds	r7, #28
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	40010000 	.word	0x40010000
 8003b58:	48000400 	.word	0x48000400
 8003b5c:	48000800 	.word	0x48000800
 8003b60:	48000c00 	.word	0x48000c00
 8003b64:	48001000 	.word	0x48001000
 8003b68:	48001400 	.word	0x48001400
 8003b6c:	48001800 	.word	0x48001800
 8003b70:	48001c00 	.word	0x48001c00
 8003b74:	40010400 	.word	0x40010400

08003b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	807b      	strh	r3, [r7, #2]
 8003b84:	4613      	mov	r3, r2
 8003b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b88:	787b      	ldrb	r3, [r7, #1]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b8e:	887a      	ldrh	r2, [r7, #2]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b94:	e002      	b.n	8003b9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b96:	887a      	ldrh	r2, [r7, #2]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bba:	887a      	ldrh	r2, [r7, #2]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	041a      	lsls	r2, r3, #16
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	43d9      	mvns	r1, r3
 8003bc6:	887b      	ldrh	r3, [r7, #2]
 8003bc8:	400b      	ands	r3, r1
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	619a      	str	r2, [r3, #24]
}
 8003bd0:	bf00      	nop
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	4603      	mov	r3, r0
 8003be4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003be6:	4b08      	ldr	r3, [pc, #32]	@ (8003c08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	88fb      	ldrh	r3, [r7, #6]
 8003bec:	4013      	ands	r3, r2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d006      	beq.n	8003c00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bf2:	4a05      	ldr	r2, [pc, #20]	@ (8003c08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bf4:	88fb      	ldrh	r3, [r7, #6]
 8003bf6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 f806 	bl	8003c0c <HAL_GPIO_EXTI_Callback>
  }
}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40010400 	.word	0x40010400

08003c0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e08d      	b.n	8003d50 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d106      	bne.n	8003c4e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7fd fc25 	bl	8001498 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2224      	movs	r2, #36	@ 0x24
 8003c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0201 	bic.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c72:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c82:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d107      	bne.n	8003c9c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c98:	609a      	str	r2, [r3, #8]
 8003c9a:	e006      	b.n	8003caa <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003ca8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d108      	bne.n	8003cc4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	e007      	b.n	8003cd4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cd2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6812      	ldr	r2, [r2, #0]
 8003cde:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ce6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cf6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69d9      	ldr	r1, [r3, #28]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1a      	ldr	r2, [r3, #32]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0201 	orr.w	r2, r2, #1
 8003d30:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e021      	b.n	8003dae <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2224      	movs	r2, #36	@ 0x24
 8003d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0201 	bic.w	r2, r2, #1
 8003d80:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fd fc2a 	bl	80015dc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af02      	add	r7, sp, #8
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	4608      	mov	r0, r1
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	817b      	strh	r3, [r7, #10]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	813b      	strh	r3, [r7, #8]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	f040 80f9 	bne.w	8003fd2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_I2C_Mem_Write+0x34>
 8003de6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d105      	bne.n	8003df8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003df2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0ed      	b.n	8003fd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_I2C_Mem_Write+0x4e>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e0e6      	b.n	8003fd4 <HAL_I2C_Mem_Write+0x21c>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e0e:	f7fe f993 	bl	8002138 <HAL_GetTick>
 8003e12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	2319      	movs	r3, #25
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 fac3 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0d1      	b.n	8003fd4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2221      	movs	r2, #33	@ 0x21
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2240      	movs	r2, #64	@ 0x40
 8003e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a3a      	ldr	r2, [r7, #32]
 8003e4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e58:	88f8      	ldrh	r0, [r7, #6]
 8003e5a:	893a      	ldrh	r2, [r7, #8]
 8003e5c:	8979      	ldrh	r1, [r7, #10]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	9301      	str	r3, [sp, #4]
 8003e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	4603      	mov	r3, r0
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 f9d3 	bl	8004214 <I2C_RequestMemoryWrite>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e0a9      	b.n	8003fd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2bff      	cmp	r3, #255	@ 0xff
 8003e88:	d90e      	bls.n	8003ea8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	22ff      	movs	r2, #255	@ 0xff
 8003e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	8979      	ldrh	r1, [r7, #10]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 fc3d 	bl	8004720 <I2C_TransferConfig>
 8003ea6:	e00f      	b.n	8003ec8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	8979      	ldrh	r1, [r7, #10]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 fc2c 	bl	8004720 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 fabc 	bl	800444a <I2C_WaitOnTXISFlagUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e07b      	b.n	8003fd4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee0:	781a      	ldrb	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d034      	beq.n	8003f80 <HAL_I2C_Mem_Write+0x1c8>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d130      	bne.n	8003f80 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f24:	2200      	movs	r2, #0
 8003f26:	2180      	movs	r1, #128	@ 0x80
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 fa3f 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e04d      	b.n	8003fd4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2bff      	cmp	r3, #255	@ 0xff
 8003f40:	d90e      	bls.n	8003f60 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	22ff      	movs	r2, #255	@ 0xff
 8003f46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	8979      	ldrh	r1, [r7, #10]
 8003f50:	2300      	movs	r3, #0
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 fbe1 	bl	8004720 <I2C_TransferConfig>
 8003f5e:	e00f      	b.n	8003f80 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	8979      	ldrh	r1, [r7, #10]
 8003f72:	2300      	movs	r3, #0
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fbd0 	bl	8004720 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d19e      	bne.n	8003ec8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 faa2 	bl	80044d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e01a      	b.n	8003fd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6859      	ldr	r1, [r3, #4]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8003fdc <HAL_I2C_Mem_Write+0x224>)
 8003fb2:	400b      	ands	r3, r1
 8003fb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e000      	b.n	8003fd4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003fd2:	2302      	movs	r3, #2
  }
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	fe00e800 	.word	0xfe00e800

08003fe0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	4608      	mov	r0, r1
 8003fea:	4611      	mov	r1, r2
 8003fec:	461a      	mov	r2, r3
 8003fee:	4603      	mov	r3, r0
 8003ff0:	817b      	strh	r3, [r7, #10]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	813b      	strh	r3, [r7, #8]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b20      	cmp	r3, #32
 8004004:	f040 80fd 	bne.w	8004202 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <HAL_I2C_Mem_Read+0x34>
 800400e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004010:	2b00      	cmp	r3, #0
 8004012:	d105      	bne.n	8004020 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800401a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0f1      	b.n	8004204 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_I2C_Mem_Read+0x4e>
 800402a:	2302      	movs	r3, #2
 800402c:	e0ea      	b.n	8004204 <HAL_I2C_Mem_Read+0x224>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004036:	f7fe f87f 	bl	8002138 <HAL_GetTick>
 800403a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	2319      	movs	r3, #25
 8004042:	2201      	movs	r2, #1
 8004044:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 f9af 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e0d5      	b.n	8004204 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2222      	movs	r2, #34	@ 0x22
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2240      	movs	r2, #64	@ 0x40
 8004064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a3a      	ldr	r2, [r7, #32]
 8004072:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004078:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004080:	88f8      	ldrh	r0, [r7, #6]
 8004082:	893a      	ldrh	r2, [r7, #8]
 8004084:	8979      	ldrh	r1, [r7, #10]
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	4603      	mov	r3, r0
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f913 	bl	80042bc <I2C_RequestMemoryRead>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0ad      	b.n	8004204 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2bff      	cmp	r3, #255	@ 0xff
 80040b0:	d90e      	bls.n	80040d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	22ff      	movs	r2, #255	@ 0xff
 80040b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	8979      	ldrh	r1, [r7, #10]
 80040c0:	4b52      	ldr	r3, [pc, #328]	@ (800420c <HAL_I2C_Mem_Read+0x22c>)
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 fb29 	bl	8004720 <I2C_TransferConfig>
 80040ce:	e00f      	b.n	80040f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	8979      	ldrh	r1, [r7, #10]
 80040e2:	4b4a      	ldr	r3, [pc, #296]	@ (800420c <HAL_I2C_Mem_Read+0x22c>)
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 fb18 	bl	8004720 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f6:	2200      	movs	r2, #0
 80040f8:	2104      	movs	r1, #4
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 f956 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e07c      	b.n	8004204 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d034      	beq.n	80041b0 <HAL_I2C_Mem_Read+0x1d0>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800414a:	2b00      	cmp	r3, #0
 800414c:	d130      	bne.n	80041b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004154:	2200      	movs	r2, #0
 8004156:	2180      	movs	r1, #128	@ 0x80
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f927 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e04d      	b.n	8004204 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	2bff      	cmp	r3, #255	@ 0xff
 8004170:	d90e      	bls.n	8004190 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	22ff      	movs	r2, #255	@ 0xff
 8004176:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800417c:	b2da      	uxtb	r2, r3
 800417e:	8979      	ldrh	r1, [r7, #10]
 8004180:	2300      	movs	r3, #0
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 fac9 	bl	8004720 <I2C_TransferConfig>
 800418e:	e00f      	b.n	80041b0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	8979      	ldrh	r1, [r7, #10]
 80041a2:	2300      	movs	r3, #0
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 fab8 	bl	8004720 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d19a      	bne.n	80040f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 f98a 	bl	80044d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e01a      	b.n	8004204 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2220      	movs	r2, #32
 80041d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6859      	ldr	r1, [r3, #4]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004210 <HAL_I2C_Mem_Read+0x230>)
 80041e2:	400b      	ands	r3, r1
 80041e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	e000      	b.n	8004204 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004202:	2302      	movs	r3, #2
  }
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	80002400 	.word	0x80002400
 8004210:	fe00e800 	.word	0xfe00e800

08004214 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af02      	add	r7, sp, #8
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	4608      	mov	r0, r1
 800421e:	4611      	mov	r1, r2
 8004220:	461a      	mov	r2, r3
 8004222:	4603      	mov	r3, r0
 8004224:	817b      	strh	r3, [r7, #10]
 8004226:	460b      	mov	r3, r1
 8004228:	813b      	strh	r3, [r7, #8]
 800422a:	4613      	mov	r3, r2
 800422c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800422e:	88fb      	ldrh	r3, [r7, #6]
 8004230:	b2da      	uxtb	r2, r3
 8004232:	8979      	ldrh	r1, [r7, #10]
 8004234:	4b20      	ldr	r3, [pc, #128]	@ (80042b8 <I2C_RequestMemoryWrite+0xa4>)
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 fa6f 	bl	8004720 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	69b9      	ldr	r1, [r7, #24]
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 f8ff 	bl	800444a <I2C_WaitOnTXISFlagUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e02c      	b.n	80042b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004256:	88fb      	ldrh	r3, [r7, #6]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d105      	bne.n	8004268 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800425c:	893b      	ldrh	r3, [r7, #8]
 800425e:	b2da      	uxtb	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	629a      	str	r2, [r3, #40]	@ 0x28
 8004266:	e015      	b.n	8004294 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004268:	893b      	ldrh	r3, [r7, #8]
 800426a:	0a1b      	lsrs	r3, r3, #8
 800426c:	b29b      	uxth	r3, r3
 800426e:	b2da      	uxtb	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004276:	69fa      	ldr	r2, [r7, #28]
 8004278:	69b9      	ldr	r1, [r7, #24]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f8e5 	bl	800444a <I2C_WaitOnTXISFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e012      	b.n	80042b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800428a:	893b      	ldrh	r3, [r7, #8]
 800428c:	b2da      	uxtb	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	2200      	movs	r2, #0
 800429c:	2180      	movs	r1, #128	@ 0x80
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f884 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	80002000 	.word	0x80002000

080042bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	4608      	mov	r0, r1
 80042c6:	4611      	mov	r1, r2
 80042c8:	461a      	mov	r2, r3
 80042ca:	4603      	mov	r3, r0
 80042cc:	817b      	strh	r3, [r7, #10]
 80042ce:	460b      	mov	r3, r1
 80042d0:	813b      	strh	r3, [r7, #8]
 80042d2:	4613      	mov	r3, r2
 80042d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80042d6:	88fb      	ldrh	r3, [r7, #6]
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	8979      	ldrh	r1, [r7, #10]
 80042dc:	4b20      	ldr	r3, [pc, #128]	@ (8004360 <I2C_RequestMemoryRead+0xa4>)
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	2300      	movs	r3, #0
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 fa1c 	bl	8004720 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042e8:	69fa      	ldr	r2, [r7, #28]
 80042ea:	69b9      	ldr	r1, [r7, #24]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f8ac 	bl	800444a <I2C_WaitOnTXISFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e02c      	b.n	8004356 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d105      	bne.n	800430e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004302:	893b      	ldrh	r3, [r7, #8]
 8004304:	b2da      	uxtb	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	629a      	str	r2, [r3, #40]	@ 0x28
 800430c:	e015      	b.n	800433a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800430e:	893b      	ldrh	r3, [r7, #8]
 8004310:	0a1b      	lsrs	r3, r3, #8
 8004312:	b29b      	uxth	r3, r3
 8004314:	b2da      	uxtb	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	69b9      	ldr	r1, [r7, #24]
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f892 	bl	800444a <I2C_WaitOnTXISFlagUntilTimeout>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e012      	b.n	8004356 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004330:	893b      	ldrh	r3, [r7, #8]
 8004332:	b2da      	uxtb	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	2200      	movs	r2, #0
 8004342:	2140      	movs	r1, #64	@ 0x40
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 f831 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	80002000 	.word	0x80002000

08004364 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b02      	cmp	r3, #2
 8004378:	d103      	bne.n	8004382 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2200      	movs	r2, #0
 8004380:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b01      	cmp	r3, #1
 800438e:	d007      	beq.n	80043a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699a      	ldr	r2, [r3, #24]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0201 	orr.w	r2, r2, #1
 800439e:	619a      	str	r2, [r3, #24]
  }
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	603b      	str	r3, [r7, #0]
 80043b8:	4613      	mov	r3, r2
 80043ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043bc:	e031      	b.n	8004422 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c4:	d02d      	beq.n	8004422 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c6:	f7fd feb7 	bl	8002138 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d302      	bcc.n	80043dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d122      	bne.n	8004422 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4013      	ands	r3, r2
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	bf0c      	ite	eq
 80043ec:	2301      	moveq	r3, #1
 80043ee:	2300      	movne	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	461a      	mov	r2, r3
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d113      	bne.n	8004422 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e00f      	b.n	8004442 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699a      	ldr	r2, [r3, #24]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4013      	ands	r3, r2
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	429a      	cmp	r2, r3
 8004430:	bf0c      	ite	eq
 8004432:	2301      	moveq	r3, #1
 8004434:	2300      	movne	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	461a      	mov	r2, r3
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	429a      	cmp	r2, r3
 800443e:	d0be      	beq.n	80043be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004456:	e033      	b.n	80044c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f87f 	bl	8004560 <I2C_IsErrorOccurred>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e031      	b.n	80044d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004472:	d025      	beq.n	80044c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004474:	f7fd fe60 	bl	8002138 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	429a      	cmp	r2, r3
 8004482:	d302      	bcc.n	800448a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d11a      	bne.n	80044c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b02      	cmp	r3, #2
 8004496:	d013      	beq.n	80044c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449c:	f043 0220 	orr.w	r2, r3, #32
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e007      	b.n	80044d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d1c4      	bne.n	8004458 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044e4:	e02f      	b.n	8004546 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f838 	bl	8004560 <I2C_IsErrorOccurred>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e02d      	b.n	8004556 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fa:	f7fd fe1d 	bl	8002138 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	429a      	cmp	r2, r3
 8004508:	d302      	bcc.n	8004510 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d11a      	bne.n	8004546 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b20      	cmp	r3, #32
 800451c:	d013      	beq.n	8004546 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004522:	f043 0220 	orr.w	r2, r3, #32
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e007      	b.n	8004556 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b20      	cmp	r3, #32
 8004552:	d1c8      	bne.n	80044e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	@ 0x28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800456c:	2300      	movs	r3, #0
 800456e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	f003 0310 	and.w	r3, r3, #16
 8004588:	2b00      	cmp	r3, #0
 800458a:	d068      	beq.n	800465e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2210      	movs	r2, #16
 8004592:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004594:	e049      	b.n	800462a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459c:	d045      	beq.n	800462a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800459e:	f7fd fdcb 	bl	8002138 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d302      	bcc.n	80045b4 <I2C_IsErrorOccurred+0x54>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d13a      	bne.n	800462a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045d6:	d121      	bne.n	800461c <I2C_IsErrorOccurred+0xbc>
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045de:	d01d      	beq.n	800461c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80045e0:	7cfb      	ldrb	r3, [r7, #19]
 80045e2:	2b20      	cmp	r3, #32
 80045e4:	d01a      	beq.n	800461c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80045f6:	f7fd fd9f 	bl	8002138 <HAL_GetTick>
 80045fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045fc:	e00e      	b.n	800461c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80045fe:	f7fd fd9b 	bl	8002138 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b19      	cmp	r3, #25
 800460a:	d907      	bls.n	800461c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	f043 0320 	orr.w	r3, r3, #32
 8004612:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800461a:	e006      	b.n	800462a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b20      	cmp	r3, #32
 8004628:	d1e9      	bne.n	80045fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	f003 0320 	and.w	r3, r3, #32
 8004634:	2b20      	cmp	r3, #32
 8004636:	d003      	beq.n	8004640 <I2C_IsErrorOccurred+0xe0>
 8004638:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0aa      	beq.n	8004596 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004640:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004644:	2b00      	cmp	r3, #0
 8004646:	d103      	bne.n	8004650 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2220      	movs	r2, #32
 800464e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	f043 0304 	orr.w	r3, r3, #4
 8004656:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00b      	beq.n	8004688 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004680:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00b      	beq.n	80046aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	f043 0308 	orr.w	r3, r3, #8
 8004698:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00b      	beq.n	80046cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	f043 0302 	orr.w	r3, r3, #2
 80046ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80046cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01c      	beq.n	800470e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f7ff fe45 	bl	8004364 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6859      	ldr	r1, [r3, #4]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	4b0d      	ldr	r3, [pc, #52]	@ (800471c <I2C_IsErrorOccurred+0x1bc>)
 80046e6:	400b      	ands	r3, r1
 80046e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	431a      	orrs	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800470e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004712:	4618      	mov	r0, r3
 8004714:	3728      	adds	r7, #40	@ 0x28
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	fe00e800 	.word	0xfe00e800

08004720 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	607b      	str	r3, [r7, #4]
 800472a:	460b      	mov	r3, r1
 800472c:	817b      	strh	r3, [r7, #10]
 800472e:	4613      	mov	r3, r2
 8004730:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004732:	897b      	ldrh	r3, [r7, #10]
 8004734:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004738:	7a7b      	ldrb	r3, [r7, #9]
 800473a:	041b      	lsls	r3, r3, #16
 800473c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004740:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	4313      	orrs	r3, r2
 800474a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800474e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	0d5b      	lsrs	r3, r3, #21
 800475a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800475e:	4b08      	ldr	r3, [pc, #32]	@ (8004780 <I2C_TransferConfig+0x60>)
 8004760:	430b      	orrs	r3, r1
 8004762:	43db      	mvns	r3, r3
 8004764:	ea02 0103 	and.w	r1, r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	430a      	orrs	r2, r1
 8004770:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004772:	bf00      	nop
 8004774:	371c      	adds	r7, #28
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	03ff63ff 	.word	0x03ff63ff

08004784 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b20      	cmp	r3, #32
 8004798:	d138      	bne.n	800480c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e032      	b.n	800480e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2224      	movs	r2, #36	@ 0x24
 80047b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0201 	bic.w	r2, r2, #1
 80047c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80047d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6819      	ldr	r1, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004808:	2300      	movs	r3, #0
 800480a:	e000      	b.n	800480e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800480c:	2302      	movs	r3, #2
  }
}
 800480e:	4618      	mov	r0, r3
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800481a:	b480      	push	{r7}
 800481c:	b085      	sub	sp, #20
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b20      	cmp	r3, #32
 800482e:	d139      	bne.n	80048a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800483a:	2302      	movs	r3, #2
 800483c:	e033      	b.n	80048a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2224      	movs	r2, #36	@ 0x24
 800484a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0201 	bic.w	r2, r2, #1
 800485c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800486c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0201 	orr.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	e000      	b.n	80048a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048a4:	2302      	movs	r3, #2
  }
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048bc:	2300      	movs	r3, #0
 80048be:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80048c0:	f7fd fc3a 	bl	8002138 <HAL_GetTick>
 80048c4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d102      	bne.n	80048d2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	73fb      	strb	r3, [r7, #15]
 80048d0:	e092      	b.n	80049f8 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f040 808b 	bne.w	80049f8 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fc feb6 	bl	8001654 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80048e8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f88b 	bl	8004a08 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	4b42      	ldr	r3, [pc, #264]	@ (8004a04 <HAL_OSPI_Init+0x150>)
 80048fa:	4013      	ands	r3, r2
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	68d1      	ldr	r1, [r2, #12]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6912      	ldr	r2, [r2, #16]
 8004904:	3a01      	subs	r2, #1
 8004906:	0412      	lsls	r2, r2, #16
 8004908:	4311      	orrs	r1, r2
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6952      	ldr	r2, [r2, #20]
 800490e:	3a01      	subs	r2, #1
 8004910:	0212      	lsls	r2, r2, #8
 8004912:	4311      	orrs	r1, r2
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004918:	4311      	orrs	r1, r2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	69d2      	ldr	r2, [r2, #28]
 800491e:	4311      	orrs	r1, r2
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6812      	ldr	r2, [r2, #0]
 8004924:	430b      	orrs	r3, r1
 8004926:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	0412      	lsls	r2, r2, #16
 8004932:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	3b01      	subs	r3, #1
 8004944:	021a      	lsls	r2, r3, #8
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2200      	movs	r2, #0
 8004958:	2120      	movs	r1, #32
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fb98 	bl	8005090 <OSPI_WaitFlagStateUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d146      	bne.n	80049f8 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	1e5a      	subs	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80049a0:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d107      	bne.n	80049e0 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0202 	orr.w	r2, r2, #2
 80049de:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049e8:	d103      	bne.n	80049f2 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	645a      	str	r2, [r3, #68]	@ 0x44
 80049f0:	e002      	b.n	80049f8 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2202      	movs	r2, #2
 80049f6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	f8e0f8f4 	.word	0xf8e0f8f4

08004a08 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	64da      	str	r2, [r3, #76]	@ 0x4c
  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
	...

08004a28 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b092      	sub	sp, #72	@ 0x48
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a08      	ldr	r2, [pc, #32]	@ (8004a68 <HAL_OSPIM_Config+0x40>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d105      	bne.n	8004a56 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 1U;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8004a54:	e004      	b.n	8004a60 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8004a56:	2301      	movs	r3, #1
 8004a58:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004a60:	2300      	movs	r3, #0
 8004a62:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004a66:	e01f      	b.n	8004aa8 <HAL_OSPIM_Config+0x80>
 8004a68:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8004a6c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004a70:	3301      	adds	r3, #1
 8004a72:	b2d8      	uxtb	r0, r3
 8004a74:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8004a78:	f107 0114 	add.w	r1, r7, #20
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	4619      	mov	r1, r3
 8004a88:	f000 fb3a 	bl	8005100 <OSPIM_GetConfig>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d005      	beq.n	8004a9e <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2208      	movs	r2, #8
 8004a9c:	649a      	str	r2, [r3, #72]	@ 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004a9e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004aa8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d9dd      	bls.n	8004a6c <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8004ab0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f040 82de 	bne.w	8005076 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8004aba:	4bc6      	ldr	r3, [pc, #792]	@ (8004dd4 <HAL_OSPIM_Config+0x3ac>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00b      	beq.n	8004ade <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004ac6:	4bc3      	ldr	r3, [pc, #780]	@ (8004dd4 <HAL_OSPIM_Config+0x3ac>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4ac2      	ldr	r2, [pc, #776]	@ (8004dd4 <HAL_OSPIM_Config+0x3ac>)
 8004acc:	f023 0301 	bic.w	r3, r3, #1
 8004ad0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8004ad2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004ad6:	f043 0301 	orr.w	r3, r3, #1
 8004ada:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8004ade:	4bbe      	ldr	r3, [pc, #760]	@ (8004dd8 <HAL_OSPIM_Config+0x3b0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00b      	beq.n	8004b02 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004aea:	4bbb      	ldr	r3, [pc, #748]	@ (8004dd8 <HAL_OSPIM_Config+0x3b0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4aba      	ldr	r2, [pc, #744]	@ (8004dd8 <HAL_OSPIM_Config+0x3b0>)
 8004af0:	f023 0301 	bic.w	r3, r3, #1
 8004af4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8004af6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004afa:	f043 0302 	orr.w	r3, r3, #2
 8004afe:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004b02:	49b6      	ldr	r1, [pc, #728]	@ (8004ddc <HAL_OSPIM_Config+0x3b4>)
 8004b04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b06:	4613      	mov	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	3348      	adds	r3, #72	@ 0x48
 8004b10:	443b      	add	r3, r7
 8004b12:	3b2c      	subs	r3, #44	@ 0x2c
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	440b      	add	r3, r1
 8004b1c:	6859      	ldr	r1, [r3, #4]
 8004b1e:	48af      	ldr	r0, [pc, #700]	@ (8004ddc <HAL_OSPIM_Config+0x3b4>)
 8004b20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b22:	4613      	mov	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	3348      	adds	r3, #72	@ 0x48
 8004b2c:	443b      	add	r3, r7
 8004b2e:	3b2c      	subs	r3, #44	@ 0x2c
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4403      	add	r3, r0
 8004b3c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8004b3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	3348      	adds	r3, #72	@ 0x48
 8004b4a:	443b      	add	r3, r7
 8004b4c:	3b34      	subs	r3, #52	@ 0x34
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 80a1 	beq.w	8004c98 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004b56:	49a1      	ldr	r1, [pc, #644]	@ (8004ddc <HAL_OSPIM_Config+0x3b4>)
 8004b58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	3348      	adds	r3, #72	@ 0x48
 8004b64:	443b      	add	r3, r7
 8004b66:	3b34      	subs	r3, #52	@ 0x34
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	440b      	add	r3, r1
 8004b70:	6859      	ldr	r1, [r3, #4]
 8004b72:	489a      	ldr	r0, [pc, #616]	@ (8004ddc <HAL_OSPIM_Config+0x3b4>)
 8004b74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b76:	4613      	mov	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	3348      	adds	r3, #72	@ 0x48
 8004b80:	443b      	add	r3, r7
 8004b82:	3b34      	subs	r3, #52	@ 0x34
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	f021 0201 	bic.w	r2, r1, #1
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4403      	add	r3, r0
 8004b90:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004b92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	3348      	adds	r3, #72	@ 0x48
 8004b9e:	443b      	add	r3, r7
 8004ba0:	3b30      	subs	r3, #48	@ 0x30
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01d      	beq.n	8004be4 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004ba8:	498c      	ldr	r1, [pc, #560]	@ (8004ddc <HAL_OSPIM_Config+0x3b4>)
 8004baa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	3348      	adds	r3, #72	@ 0x48
 8004bb6:	443b      	add	r3, r7
 8004bb8:	3b30      	subs	r3, #48	@ 0x30
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	6859      	ldr	r1, [r3, #4]
 8004bc4:	4885      	ldr	r0, [pc, #532]	@ (8004ddc <HAL_OSPIM_Config+0x3b4>)
 8004bc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bc8:	4613      	mov	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	3348      	adds	r3, #72	@ 0x48
 8004bd2:	443b      	add	r3, r7
 8004bd4:	3b30      	subs	r3, #48	@ 0x30
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	f021 0210 	bic.w	r2, r1, #16
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4403      	add	r3, r0
 8004be2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004be4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004be6:	4613      	mov	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	3348      	adds	r3, #72	@ 0x48
 8004bf0:	443b      	add	r3, r7
 8004bf2:	3b28      	subs	r3, #40	@ 0x28
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d021      	beq.n	8004c3e <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004bfa:	4978      	ldr	r1, [pc, #480]	@ (8004ddc <HAL_OSPIM_Config+0x3b4>)
 8004bfc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bfe:	4613      	mov	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	3348      	adds	r3, #72	@ 0x48
 8004c08:	443b      	add	r3, r7
 8004c0a:	3b28      	subs	r3, #40	@ 0x28
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	440b      	add	r3, r1
 8004c18:	6859      	ldr	r1, [r3, #4]
 8004c1a:	4870      	ldr	r0, [pc, #448]	@ (8004ddc <HAL_OSPIM_Config+0x3b4>)
 8004c1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c1e:	4613      	mov	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	3348      	adds	r3, #72	@ 0x48
 8004c28:	443b      	add	r3, r7
 8004c2a:	3b28      	subs	r3, #40	@ 0x28
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4403      	add	r3, r0
 8004c3c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004c3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c40:	4613      	mov	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	3348      	adds	r3, #72	@ 0x48
 8004c4a:	443b      	add	r3, r7
 8004c4c:	3b24      	subs	r3, #36	@ 0x24
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d021      	beq.n	8004c98 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004c54:	4961      	ldr	r1, [pc, #388]	@ (8004ddc <HAL_OSPIM_Config+0x3b4>)
 8004c56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	3348      	adds	r3, #72	@ 0x48
 8004c62:	443b      	add	r3, r7
 8004c64:	3b24      	subs	r3, #36	@ 0x24
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	6859      	ldr	r1, [r3, #4]
 8004c74:	4859      	ldr	r0, [pc, #356]	@ (8004ddc <HAL_OSPIM_Config+0x3b4>)
 8004c76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	3348      	adds	r3, #72	@ 0x48
 8004c82:	443b      	add	r3, r7
 8004c84:	3b24      	subs	r3, #36	@ 0x24
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4403      	add	r3, r0
 8004c96:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	6819      	ldr	r1, [r3, #0]
 8004c9c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	3348      	adds	r3, #72	@ 0x48
 8004caa:	443b      	add	r3, r7
 8004cac:	3b34      	subs	r3, #52	@ 0x34
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4299      	cmp	r1, r3
 8004cb2:	d038      	beq.n	8004d26 <HAL_OSPIM_Config+0x2fe>
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	6859      	ldr	r1, [r3, #4]
 8004cb8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	3348      	adds	r3, #72	@ 0x48
 8004cc6:	443b      	add	r3, r7
 8004cc8:	3b30      	subs	r3, #48	@ 0x30
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4299      	cmp	r1, r3
 8004cce:	d02a      	beq.n	8004d26 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	6899      	ldr	r1, [r3, #8]
 8004cd4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004cd8:	4613      	mov	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	3348      	adds	r3, #72	@ 0x48
 8004ce2:	443b      	add	r3, r7
 8004ce4:	3b2c      	subs	r3, #44	@ 0x2c
 8004ce6:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004ce8:	4299      	cmp	r1, r3
 8004cea:	d01c      	beq.n	8004d26 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	68d9      	ldr	r1, [r3, #12]
 8004cf0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	3348      	adds	r3, #72	@ 0x48
 8004cfe:	443b      	add	r3, r7
 8004d00:	3b28      	subs	r3, #40	@ 0x28
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4299      	cmp	r1, r3
 8004d06:	d00e      	beq.n	8004d26 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	6919      	ldr	r1, [r3, #16]
 8004d0c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	3348      	adds	r3, #72	@ 0x48
 8004d1a:	443b      	add	r3, r7
 8004d1c:	3b24      	subs	r3, #36	@ 0x24
 8004d1e:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004d20:	4299      	cmp	r1, r3
 8004d22:	f040 80d3 	bne.w	8004ecc <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004d26:	492d      	ldr	r1, [pc, #180]	@ (8004ddc <HAL_OSPIM_Config+0x3b4>)
 8004d28:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	3348      	adds	r3, #72	@ 0x48
 8004d36:	443b      	add	r3, r7
 8004d38:	3b34      	subs	r3, #52	@ 0x34
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	6859      	ldr	r1, [r3, #4]
 8004d44:	4825      	ldr	r0, [pc, #148]	@ (8004ddc <HAL_OSPIM_Config+0x3b4>)
 8004d46:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	3348      	adds	r3, #72	@ 0x48
 8004d54:	443b      	add	r3, r7
 8004d56:	3b34      	subs	r3, #52	@ 0x34
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	f021 0201 	bic.w	r2, r1, #1
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4403      	add	r3, r0
 8004d64:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004d66:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	3348      	adds	r3, #72	@ 0x48
 8004d74:	443b      	add	r3, r7
 8004d76:	3b30      	subs	r3, #48	@ 0x30
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d01f      	beq.n	8004dbe <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004d7e:	4917      	ldr	r1, [pc, #92]	@ (8004ddc <HAL_OSPIM_Config+0x3b4>)
 8004d80:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	3348      	adds	r3, #72	@ 0x48
 8004d8e:	443b      	add	r3, r7
 8004d90:	3b30      	subs	r3, #48	@ 0x30
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	6859      	ldr	r1, [r3, #4]
 8004d9c:	480f      	ldr	r0, [pc, #60]	@ (8004ddc <HAL_OSPIM_Config+0x3b4>)
 8004d9e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	3348      	adds	r3, #72	@ 0x48
 8004dac:	443b      	add	r3, r7
 8004dae:	3b30      	subs	r3, #48	@ 0x30
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	f021 0210 	bic.w	r2, r1, #16
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4403      	add	r3, r0
 8004dbc:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004dbe:	4907      	ldr	r1, [pc, #28]	@ (8004ddc <HAL_OSPIM_Config+0x3b4>)
 8004dc0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	3348      	adds	r3, #72	@ 0x48
 8004dce:	443b      	add	r3, r7
 8004dd0:	3b2c      	subs	r3, #44	@ 0x2c
 8004dd2:	e005      	b.n	8004de0 <HAL_OSPIM_Config+0x3b8>
 8004dd4:	a0001000 	.word	0xa0001000
 8004dd8:	a0001400 	.word	0xa0001400
 8004ddc:	50061c00 	.word	0x50061c00
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	440b      	add	r3, r1
 8004de8:	6859      	ldr	r1, [r3, #4]
 8004dea:	48a6      	ldr	r0, [pc, #664]	@ (8005084 <HAL_OSPIM_Config+0x65c>)
 8004dec:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004df0:	4613      	mov	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	3348      	adds	r3, #72	@ 0x48
 8004dfa:	443b      	add	r3, r7
 8004dfc:	3b2c      	subs	r3, #44	@ 0x2c
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4403      	add	r3, r0
 8004e0a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004e0c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004e10:	4613      	mov	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	3348      	adds	r3, #72	@ 0x48
 8004e1a:	443b      	add	r3, r7
 8004e1c:	3b28      	subs	r3, #40	@ 0x28
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d023      	beq.n	8004e6c <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e24:	4997      	ldr	r1, [pc, #604]	@ (8005084 <HAL_OSPIM_Config+0x65c>)
 8004e26:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	3348      	adds	r3, #72	@ 0x48
 8004e34:	443b      	add	r3, r7
 8004e36:	3b28      	subs	r3, #40	@ 0x28
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	440b      	add	r3, r1
 8004e44:	6859      	ldr	r1, [r3, #4]
 8004e46:	488f      	ldr	r0, [pc, #572]	@ (8005084 <HAL_OSPIM_Config+0x65c>)
 8004e48:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	3348      	adds	r3, #72	@ 0x48
 8004e56:	443b      	add	r3, r7
 8004e58:	3b28      	subs	r3, #40	@ 0x28
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4403      	add	r3, r0
 8004e6a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004e6c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	3348      	adds	r3, #72	@ 0x48
 8004e7a:	443b      	add	r3, r7
 8004e7c:	3b24      	subs	r3, #36	@ 0x24
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d023      	beq.n	8004ecc <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e84:	497f      	ldr	r1, [pc, #508]	@ (8005084 <HAL_OSPIM_Config+0x65c>)
 8004e86:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	3348      	adds	r3, #72	@ 0x48
 8004e94:	443b      	add	r3, r7
 8004e96:	3b24      	subs	r3, #36	@ 0x24
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	440b      	add	r3, r1
 8004ea4:	6859      	ldr	r1, [r3, #4]
 8004ea6:	4877      	ldr	r0, [pc, #476]	@ (8005084 <HAL_OSPIM_Config+0x65c>)
 8004ea8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	3348      	adds	r3, #72	@ 0x48
 8004eb6:	443b      	add	r3, r7
 8004eb8:	3b24      	subs	r3, #36	@ 0x24
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4403      	add	r3, r0
 8004eca:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004ecc:	4a6d      	ldr	r2, [pc, #436]	@ (8005084 <HAL_OSPIM_Config+0x65c>)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ee0:	025b      	lsls	r3, r3, #9
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	4967      	ldr	r1, [pc, #412]	@ (8005084 <HAL_OSPIM_Config+0x65c>)
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004ef6:	4a63      	ldr	r2, [pc, #396]	@ (8005084 <HAL_OSPIM_Config+0x65c>)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f023 0203 	bic.w	r2, r3, #3
 8004f08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	495d      	ldr	r1, [pc, #372]	@ (8005084 <HAL_OSPIM_Config+0x65c>)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	f042 0201 	orr.w	r2, r2, #1
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d014      	beq.n	8004f52 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004f28:	4a56      	ldr	r2, [pc, #344]	@ (8005084 <HAL_OSPIM_Config+0x65c>)
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f3c:	015b      	lsls	r3, r3, #5
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	4950      	ldr	r1, [pc, #320]	@ (8005084 <HAL_OSPIM_Config+0x65c>)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	f042 0210 	orr.w	r2, r2, #16
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	440b      	add	r3, r1
 8004f50:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d019      	beq.n	8004f92 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004f5e:	4a49      	ldr	r2, [pc, #292]	@ (8005084 <HAL_OSPIM_Config+0x65c>)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	3b01      	subs	r3, #1
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f76:	049b      	lsls	r3, r3, #18
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	4942      	ldr	r1, [pc, #264]	@ (8005084 <HAL_OSPIM_Config+0x65c>)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	3b01      	subs	r3, #1
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	440b      	add	r3, r1
 8004f8e:	605a      	str	r2, [r3, #4]
 8004f90:	e01c      	b.n	8004fcc <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d018      	beq.n	8004fcc <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004f9a:	4a3a      	ldr	r2, [pc, #232]	@ (8005084 <HAL_OSPIM_Config+0x65c>)
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8004fb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fb2:	069b      	lsls	r3, r3, #26
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	4933      	ldr	r1, [pc, #204]	@ (8005084 <HAL_OSPIM_Config+0x65c>)
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d019      	beq.n	800500c <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004fd8:	4a2a      	ldr	r2, [pc, #168]	@ (8005084 <HAL_OSPIM_Config+0x65c>)
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ff0:	049b      	lsls	r3, r3, #18
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	4923      	ldr	r1, [pc, #140]	@ (8005084 <HAL_OSPIM_Config+0x65c>)
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	440b      	add	r3, r1
 8005008:	605a      	str	r2, [r3, #4]
 800500a:	e01c      	b.n	8005046 <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d018      	beq.n	8005046 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005014:	4a1b      	ldr	r2, [pc, #108]	@ (8005084 <HAL_OSPIM_Config+0x65c>)
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	3b01      	subs	r3, #1
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800502a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800502c:	069b      	lsls	r3, r3, #26
 800502e:	431a      	orrs	r2, r3
 8005030:	4914      	ldr	r1, [pc, #80]	@ (8005084 <HAL_OSPIM_Config+0x65c>)
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	3b01      	subs	r3, #1
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	440b      	add	r3, r1
 8005044:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8005046:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d005      	beq.n	800505e <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005052:	4b0d      	ldr	r3, [pc, #52]	@ (8005088 <HAL_OSPIM_Config+0x660>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a0c      	ldr	r2, [pc, #48]	@ (8005088 <HAL_OSPIM_Config+0x660>)
 8005058:	f043 0301 	orr.w	r3, r3, #1
 800505c:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800505e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d005      	beq.n	8005076 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800506a:	4b08      	ldr	r3, [pc, #32]	@ (800508c <HAL_OSPIM_Config+0x664>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a07      	ldr	r2, [pc, #28]	@ (800508c <HAL_OSPIM_Config+0x664>)
 8005070:	f043 0301 	orr.w	r3, r3, #1
 8005074:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8005076:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800507a:	4618      	mov	r0, r3
 800507c:	3748      	adds	r7, #72	@ 0x48
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	50061c00 	.word	0x50061c00
 8005088:	a0001000 	.word	0xa0001000
 800508c:	a0001400 	.word	0xa0001400

08005090 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	4613      	mov	r3, r2
 800509e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80050a0:	e01a      	b.n	80050d8 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a8:	d016      	beq.n	80050d8 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050aa:	f7fd f845 	bl	8002138 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d302      	bcc.n	80050c0 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10b      	bne.n	80050d8 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050c6:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050cc:	f043 0201 	orr.w	r2, r3, #1
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	649a      	str	r2, [r3, #72]	@ 0x48

        return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e00e      	b.n	80050f6 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6a1a      	ldr	r2, [r3, #32]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	4013      	ands	r3, r2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	bf14      	ite	ne
 80050e6:	2301      	movne	r3, #1
 80050e8:	2300      	moveq	r3, #0
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	461a      	mov	r2, r3
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d1d6      	bne.n	80050a2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	4603      	mov	r3, r0
 8005108:	6039      	str	r1, [r7, #0]
 800510a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800510c:	2300      	movs	r3, #0
 800510e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8005114:	79fb      	ldrb	r3, [r7, #7]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <OSPIM_GetConfig+0x26>
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	2b02      	cmp	r3, #2
 800511e:	d802      	bhi.n	8005126 <OSPIM_GetConfig+0x26>
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d102      	bne.n	800512c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	75fb      	strb	r3, [r7, #23]
 800512a:	e08e      	b.n	800524a <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	2200      	movs	r2, #0
 8005130:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2200      	movs	r2, #0
 8005136:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2200      	movs	r2, #0
 800513c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2200      	movs	r2, #0
 8005142:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2200      	movs	r2, #0
 8005148:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	2b02      	cmp	r3, #2
 800514e:	d101      	bne.n	8005154 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8005150:	4b41      	ldr	r3, [pc, #260]	@ (8005258 <OSPIM_GetConfig+0x158>)
 8005152:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005154:	2300      	movs	r3, #0
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	e074      	b.n	8005244 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 800515a:	4a40      	ldr	r2, [pc, #256]	@ (800525c <OSPIM_GetConfig+0x15c>)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4053      	eors	r3, r2
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d103      	bne.n	8005186 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	f003 0310 	and.w	r3, r3, #16
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00a      	beq.n	80051a6 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	4053      	eors	r3, r2
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b00      	cmp	r3, #0
 800519c:	d103      	bne.n	80051a6 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	4053      	eors	r3, r2
 80051b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d103      	bne.n	80051c6 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d018      	beq.n	8005202 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	4053      	eors	r3, r2
 80051d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d111      	bne.n	8005202 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d106      	bne.n	80051f6 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	3301      	adds	r3, #1
 80051ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	60da      	str	r2, [r3, #12]
 80051f4:	e005      	b.n	8005202 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3301      	adds	r3, #1
 80051fa:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d018      	beq.n	800523e <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	4053      	eors	r3, r2
 8005212:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d111      	bne.n	800523e <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d106      	bne.n	8005232 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3301      	adds	r3, #1
 8005228:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	611a      	str	r2, [r3, #16]
 8005230:	e005      	b.n	800523e <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3301      	adds	r3, #1
 8005236:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3301      	adds	r3, #1
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d987      	bls.n	800515a <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 800524a:	7dfb      	ldrb	r3, [r7, #23]
}
 800524c:	4618      	mov	r0, r3
 800524e:	371c      	adds	r7, #28
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	04040222 	.word	0x04040222
 800525c:	50061c00 	.word	0x50061c00

08005260 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005264:	4b05      	ldr	r3, [pc, #20]	@ (800527c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a04      	ldr	r2, [pc, #16]	@ (800527c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800526a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800526e:	6013      	str	r3, [r2, #0]
}
 8005270:	bf00      	nop
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40007000 	.word	0x40007000

08005280 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005284:	4b0d      	ldr	r3, [pc, #52]	@ (80052bc <HAL_PWREx_GetVoltageRange+0x3c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800528c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005290:	d102      	bne.n	8005298 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005296:	e00b      	b.n	80052b0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005298:	4b08      	ldr	r3, [pc, #32]	@ (80052bc <HAL_PWREx_GetVoltageRange+0x3c>)
 800529a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800529e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052a6:	d102      	bne.n	80052ae <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80052a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052ac:	e000      	b.n	80052b0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80052ae:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	40007000 	.word	0x40007000

080052c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d141      	bne.n	8005352 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052ce:	4b4b      	ldr	r3, [pc, #300]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80052d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052da:	d131      	bne.n	8005340 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052dc:	4b47      	ldr	r3, [pc, #284]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052e2:	4a46      	ldr	r2, [pc, #280]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052ec:	4b43      	ldr	r3, [pc, #268]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80052f4:	4a41      	ldr	r2, [pc, #260]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80052fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80052fc:	4b40      	ldr	r3, [pc, #256]	@ (8005400 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2232      	movs	r2, #50	@ 0x32
 8005302:	fb02 f303 	mul.w	r3, r2, r3
 8005306:	4a3f      	ldr	r2, [pc, #252]	@ (8005404 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005308:	fba2 2303 	umull	r2, r3, r2, r3
 800530c:	0c9b      	lsrs	r3, r3, #18
 800530e:	3301      	adds	r3, #1
 8005310:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005312:	e002      	b.n	800531a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	3b01      	subs	r3, #1
 8005318:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800531a:	4b38      	ldr	r3, [pc, #224]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005326:	d102      	bne.n	800532e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1f2      	bne.n	8005314 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800532e:	4b33      	ldr	r3, [pc, #204]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800533a:	d158      	bne.n	80053ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e057      	b.n	80053f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005340:	4b2e      	ldr	r3, [pc, #184]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005346:	4a2d      	ldr	r2, [pc, #180]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005348:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800534c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005350:	e04d      	b.n	80053ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005358:	d141      	bne.n	80053de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800535a:	4b28      	ldr	r3, [pc, #160]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005366:	d131      	bne.n	80053cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005368:	4b24      	ldr	r3, [pc, #144]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800536a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800536e:	4a23      	ldr	r2, [pc, #140]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005374:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005378:	4b20      	ldr	r3, [pc, #128]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005380:	4a1e      	ldr	r2, [pc, #120]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005382:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005386:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005388:	4b1d      	ldr	r3, [pc, #116]	@ (8005400 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2232      	movs	r2, #50	@ 0x32
 800538e:	fb02 f303 	mul.w	r3, r2, r3
 8005392:	4a1c      	ldr	r2, [pc, #112]	@ (8005404 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005394:	fba2 2303 	umull	r2, r3, r2, r3
 8005398:	0c9b      	lsrs	r3, r3, #18
 800539a:	3301      	adds	r3, #1
 800539c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800539e:	e002      	b.n	80053a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053a6:	4b15      	ldr	r3, [pc, #84]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053b2:	d102      	bne.n	80053ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1f2      	bne.n	80053a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053ba:	4b10      	ldr	r3, [pc, #64]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053c6:	d112      	bne.n	80053ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e011      	b.n	80053f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053cc:	4b0b      	ldr	r3, [pc, #44]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053d2:	4a0a      	ldr	r2, [pc, #40]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80053dc:	e007      	b.n	80053ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80053de:	4b07      	ldr	r3, [pc, #28]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80053e6:	4a05      	ldr	r2, [pc, #20]	@ (80053fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80053ec:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	40007000 	.word	0x40007000
 8005400:	20000004 	.word	0x20000004
 8005404:	431bde83 	.word	0x431bde83

08005408 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d102      	bne.n	800541c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	f000 bc08 	b.w	8005c2c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800541c:	4b96      	ldr	r3, [pc, #600]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 030c 	and.w	r3, r3, #12
 8005424:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005426:	4b94      	ldr	r3, [pc, #592]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0310 	and.w	r3, r3, #16
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 80e4 	beq.w	8005606 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d007      	beq.n	8005454 <HAL_RCC_OscConfig+0x4c>
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	2b0c      	cmp	r3, #12
 8005448:	f040 808b 	bne.w	8005562 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2b01      	cmp	r3, #1
 8005450:	f040 8087 	bne.w	8005562 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005454:	4b88      	ldr	r3, [pc, #544]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <HAL_RCC_OscConfig+0x64>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e3df      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a1a      	ldr	r2, [r3, #32]
 8005470:	4b81      	ldr	r3, [pc, #516]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0308 	and.w	r3, r3, #8
 8005478:	2b00      	cmp	r3, #0
 800547a:	d004      	beq.n	8005486 <HAL_RCC_OscConfig+0x7e>
 800547c:	4b7e      	ldr	r3, [pc, #504]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005484:	e005      	b.n	8005492 <HAL_RCC_OscConfig+0x8a>
 8005486:	4b7c      	ldr	r3, [pc, #496]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 8005488:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800548c:	091b      	lsrs	r3, r3, #4
 800548e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005492:	4293      	cmp	r3, r2
 8005494:	d223      	bcs.n	80054de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fdfe 	bl	800609c <RCC_SetFlashLatencyFromMSIRange>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e3c0      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054aa:	4b73      	ldr	r3, [pc, #460]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a72      	ldr	r2, [pc, #456]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 80054b0:	f043 0308 	orr.w	r3, r3, #8
 80054b4:	6013      	str	r3, [r2, #0]
 80054b6:	4b70      	ldr	r3, [pc, #448]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	496d      	ldr	r1, [pc, #436]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054c8:	4b6b      	ldr	r3, [pc, #428]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	021b      	lsls	r3, r3, #8
 80054d6:	4968      	ldr	r1, [pc, #416]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	604b      	str	r3, [r1, #4]
 80054dc:	e025      	b.n	800552a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054de:	4b66      	ldr	r3, [pc, #408]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a65      	ldr	r2, [pc, #404]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 80054e4:	f043 0308 	orr.w	r3, r3, #8
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	4b63      	ldr	r3, [pc, #396]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	4960      	ldr	r1, [pc, #384]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054fc:	4b5e      	ldr	r3, [pc, #376]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	495b      	ldr	r1, [pc, #364]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 800550c:	4313      	orrs	r3, r2
 800550e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d109      	bne.n	800552a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fdbe 	bl	800609c <RCC_SetFlashLatencyFromMSIRange>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e380      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800552a:	f000 fcc1 	bl	8005eb0 <HAL_RCC_GetSysClockFreq>
 800552e:	4602      	mov	r2, r0
 8005530:	4b51      	ldr	r3, [pc, #324]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	091b      	lsrs	r3, r3, #4
 8005536:	f003 030f 	and.w	r3, r3, #15
 800553a:	4950      	ldr	r1, [pc, #320]	@ (800567c <HAL_RCC_OscConfig+0x274>)
 800553c:	5ccb      	ldrb	r3, [r1, r3]
 800553e:	f003 031f 	and.w	r3, r3, #31
 8005542:	fa22 f303 	lsr.w	r3, r2, r3
 8005546:	4a4e      	ldr	r2, [pc, #312]	@ (8005680 <HAL_RCC_OscConfig+0x278>)
 8005548:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800554a:	4b4e      	ldr	r3, [pc, #312]	@ (8005684 <HAL_RCC_OscConfig+0x27c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4618      	mov	r0, r3
 8005550:	f7fc fa5a 	bl	8001a08 <HAL_InitTick>
 8005554:	4603      	mov	r3, r0
 8005556:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005558:	7bfb      	ldrb	r3, [r7, #15]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d052      	beq.n	8005604 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800555e:	7bfb      	ldrb	r3, [r7, #15]
 8005560:	e364      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d032      	beq.n	80055d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800556a:	4b43      	ldr	r3, [pc, #268]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a42      	ldr	r2, [pc, #264]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 8005570:	f043 0301 	orr.w	r3, r3, #1
 8005574:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005576:	f7fc fddf 	bl	8002138 <HAL_GetTick>
 800557a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800557c:	e008      	b.n	8005590 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800557e:	f7fc fddb 	bl	8002138 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e34d      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005590:	4b39      	ldr	r3, [pc, #228]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0f0      	beq.n	800557e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800559c:	4b36      	ldr	r3, [pc, #216]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a35      	ldr	r2, [pc, #212]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 80055a2:	f043 0308 	orr.w	r3, r3, #8
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	4b33      	ldr	r3, [pc, #204]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	4930      	ldr	r1, [pc, #192]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	492b      	ldr	r1, [pc, #172]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	604b      	str	r3, [r1, #4]
 80055ce:	e01a      	b.n	8005606 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80055d0:	4b29      	ldr	r3, [pc, #164]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a28      	ldr	r2, [pc, #160]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 80055d6:	f023 0301 	bic.w	r3, r3, #1
 80055da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055dc:	f7fc fdac 	bl	8002138 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055e4:	f7fc fda8 	bl	8002138 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e31a      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055f6:	4b20      	ldr	r3, [pc, #128]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1f0      	bne.n	80055e4 <HAL_RCC_OscConfig+0x1dc>
 8005602:	e000      	b.n	8005606 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005604:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d073      	beq.n	80056fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	2b08      	cmp	r3, #8
 8005616:	d005      	beq.n	8005624 <HAL_RCC_OscConfig+0x21c>
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	2b0c      	cmp	r3, #12
 800561c:	d10e      	bne.n	800563c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2b03      	cmp	r3, #3
 8005622:	d10b      	bne.n	800563c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005624:	4b14      	ldr	r3, [pc, #80]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d063      	beq.n	80056f8 <HAL_RCC_OscConfig+0x2f0>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d15f      	bne.n	80056f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e2f7      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005644:	d106      	bne.n	8005654 <HAL_RCC_OscConfig+0x24c>
 8005646:	4b0c      	ldr	r3, [pc, #48]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a0b      	ldr	r2, [pc, #44]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 800564c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	e025      	b.n	80056a0 <HAL_RCC_OscConfig+0x298>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800565c:	d114      	bne.n	8005688 <HAL_RCC_OscConfig+0x280>
 800565e:	4b06      	ldr	r3, [pc, #24]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a05      	ldr	r2, [pc, #20]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 8005664:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	4b03      	ldr	r3, [pc, #12]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a02      	ldr	r2, [pc, #8]	@ (8005678 <HAL_RCC_OscConfig+0x270>)
 8005670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	e013      	b.n	80056a0 <HAL_RCC_OscConfig+0x298>
 8005678:	40021000 	.word	0x40021000
 800567c:	0800ca34 	.word	0x0800ca34
 8005680:	20000004 	.word	0x20000004
 8005684:	20000018 	.word	0x20000018
 8005688:	4ba0      	ldr	r3, [pc, #640]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a9f      	ldr	r2, [pc, #636]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 800568e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	4b9d      	ldr	r3, [pc, #628]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a9c      	ldr	r2, [pc, #624]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 800569a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800569e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d013      	beq.n	80056d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a8:	f7fc fd46 	bl	8002138 <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056b0:	f7fc fd42 	bl	8002138 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b64      	cmp	r3, #100	@ 0x64
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e2b4      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056c2:	4b92      	ldr	r3, [pc, #584]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0f0      	beq.n	80056b0 <HAL_RCC_OscConfig+0x2a8>
 80056ce:	e014      	b.n	80056fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d0:	f7fc fd32 	bl	8002138 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056d8:	f7fc fd2e 	bl	8002138 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b64      	cmp	r3, #100	@ 0x64
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e2a0      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056ea:	4b88      	ldr	r3, [pc, #544]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f0      	bne.n	80056d8 <HAL_RCC_OscConfig+0x2d0>
 80056f6:	e000      	b.n	80056fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d060      	beq.n	80057c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b04      	cmp	r3, #4
 800570a:	d005      	beq.n	8005718 <HAL_RCC_OscConfig+0x310>
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	2b0c      	cmp	r3, #12
 8005710:	d119      	bne.n	8005746 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2b02      	cmp	r3, #2
 8005716:	d116      	bne.n	8005746 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005718:	4b7c      	ldr	r3, [pc, #496]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005720:	2b00      	cmp	r3, #0
 8005722:	d005      	beq.n	8005730 <HAL_RCC_OscConfig+0x328>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e27d      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005730:	4b76      	ldr	r3, [pc, #472]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	061b      	lsls	r3, r3, #24
 800573e:	4973      	ldr	r1, [pc, #460]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 8005740:	4313      	orrs	r3, r2
 8005742:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005744:	e040      	b.n	80057c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d023      	beq.n	8005796 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800574e:	4b6f      	ldr	r3, [pc, #444]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a6e      	ldr	r2, [pc, #440]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 8005754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575a:	f7fc fced 	bl	8002138 <HAL_GetTick>
 800575e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005760:	e008      	b.n	8005774 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005762:	f7fc fce9 	bl	8002138 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b02      	cmp	r3, #2
 800576e:	d901      	bls.n	8005774 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e25b      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005774:	4b65      	ldr	r3, [pc, #404]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0f0      	beq.n	8005762 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005780:	4b62      	ldr	r3, [pc, #392]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	061b      	lsls	r3, r3, #24
 800578e:	495f      	ldr	r1, [pc, #380]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 8005790:	4313      	orrs	r3, r2
 8005792:	604b      	str	r3, [r1, #4]
 8005794:	e018      	b.n	80057c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005796:	4b5d      	ldr	r3, [pc, #372]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a5c      	ldr	r2, [pc, #368]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 800579c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a2:	f7fc fcc9 	bl	8002138 <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057aa:	f7fc fcc5 	bl	8002138 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e237      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057bc:	4b53      	ldr	r3, [pc, #332]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1f0      	bne.n	80057aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0308 	and.w	r3, r3, #8
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d03c      	beq.n	800584e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d01c      	beq.n	8005816 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057dc:	4b4b      	ldr	r3, [pc, #300]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 80057de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057e2:	4a4a      	ldr	r2, [pc, #296]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 80057e4:	f043 0301 	orr.w	r3, r3, #1
 80057e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ec:	f7fc fca4 	bl	8002138 <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057f2:	e008      	b.n	8005806 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057f4:	f7fc fca0 	bl	8002138 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e212      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005806:	4b41      	ldr	r3, [pc, #260]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 8005808:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0ef      	beq.n	80057f4 <HAL_RCC_OscConfig+0x3ec>
 8005814:	e01b      	b.n	800584e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005816:	4b3d      	ldr	r3, [pc, #244]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 8005818:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800581c:	4a3b      	ldr	r2, [pc, #236]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 800581e:	f023 0301 	bic.w	r3, r3, #1
 8005822:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005826:	f7fc fc87 	bl	8002138 <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800582e:	f7fc fc83 	bl	8002138 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e1f5      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005840:	4b32      	ldr	r3, [pc, #200]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 8005842:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1ef      	bne.n	800582e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0304 	and.w	r3, r3, #4
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 80a6 	beq.w	80059a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800585c:	2300      	movs	r3, #0
 800585e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005860:	4b2a      	ldr	r3, [pc, #168]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 8005862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10d      	bne.n	8005888 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800586c:	4b27      	ldr	r3, [pc, #156]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 800586e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005870:	4a26      	ldr	r2, [pc, #152]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 8005872:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005876:	6593      	str	r3, [r2, #88]	@ 0x58
 8005878:	4b24      	ldr	r3, [pc, #144]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 800587a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800587c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005880:	60bb      	str	r3, [r7, #8]
 8005882:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005884:	2301      	movs	r3, #1
 8005886:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005888:	4b21      	ldr	r3, [pc, #132]	@ (8005910 <HAL_RCC_OscConfig+0x508>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005890:	2b00      	cmp	r3, #0
 8005892:	d118      	bne.n	80058c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005894:	4b1e      	ldr	r3, [pc, #120]	@ (8005910 <HAL_RCC_OscConfig+0x508>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a1d      	ldr	r2, [pc, #116]	@ (8005910 <HAL_RCC_OscConfig+0x508>)
 800589a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800589e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058a0:	f7fc fc4a 	bl	8002138 <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058a8:	f7fc fc46 	bl	8002138 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e1b8      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058ba:	4b15      	ldr	r3, [pc, #84]	@ (8005910 <HAL_RCC_OscConfig+0x508>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d0f0      	beq.n	80058a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d108      	bne.n	80058e0 <HAL_RCC_OscConfig+0x4d8>
 80058ce:	4b0f      	ldr	r3, [pc, #60]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 80058d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d4:	4a0d      	ldr	r2, [pc, #52]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 80058d6:	f043 0301 	orr.w	r3, r3, #1
 80058da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058de:	e029      	b.n	8005934 <HAL_RCC_OscConfig+0x52c>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	2b05      	cmp	r3, #5
 80058e6:	d115      	bne.n	8005914 <HAL_RCC_OscConfig+0x50c>
 80058e8:	4b08      	ldr	r3, [pc, #32]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 80058ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ee:	4a07      	ldr	r2, [pc, #28]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 80058f0:	f043 0304 	orr.w	r3, r3, #4
 80058f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058f8:	4b04      	ldr	r3, [pc, #16]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 80058fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058fe:	4a03      	ldr	r2, [pc, #12]	@ (800590c <HAL_RCC_OscConfig+0x504>)
 8005900:	f043 0301 	orr.w	r3, r3, #1
 8005904:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005908:	e014      	b.n	8005934 <HAL_RCC_OscConfig+0x52c>
 800590a:	bf00      	nop
 800590c:	40021000 	.word	0x40021000
 8005910:	40007000 	.word	0x40007000
 8005914:	4b9d      	ldr	r3, [pc, #628]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 8005916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800591a:	4a9c      	ldr	r2, [pc, #624]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 800591c:	f023 0301 	bic.w	r3, r3, #1
 8005920:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005924:	4b99      	ldr	r3, [pc, #612]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 8005926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800592a:	4a98      	ldr	r2, [pc, #608]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 800592c:	f023 0304 	bic.w	r3, r3, #4
 8005930:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d016      	beq.n	800596a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593c:	f7fc fbfc 	bl	8002138 <HAL_GetTick>
 8005940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005942:	e00a      	b.n	800595a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005944:	f7fc fbf8 	bl	8002138 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005952:	4293      	cmp	r3, r2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e168      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800595a:	4b8c      	ldr	r3, [pc, #560]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 800595c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0ed      	beq.n	8005944 <HAL_RCC_OscConfig+0x53c>
 8005968:	e015      	b.n	8005996 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800596a:	f7fc fbe5 	bl	8002138 <HAL_GetTick>
 800596e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005970:	e00a      	b.n	8005988 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005972:	f7fc fbe1 	bl	8002138 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005980:	4293      	cmp	r3, r2
 8005982:	d901      	bls.n	8005988 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e151      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005988:	4b80      	ldr	r3, [pc, #512]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 800598a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1ed      	bne.n	8005972 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005996:	7ffb      	ldrb	r3, [r7, #31]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d105      	bne.n	80059a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800599c:	4b7b      	ldr	r3, [pc, #492]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 800599e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059a0:	4a7a      	ldr	r2, [pc, #488]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 80059a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0320 	and.w	r3, r3, #32
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d03c      	beq.n	8005a2e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d01c      	beq.n	80059f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80059bc:	4b73      	ldr	r3, [pc, #460]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 80059be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059c2:	4a72      	ldr	r2, [pc, #456]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 80059c4:	f043 0301 	orr.w	r3, r3, #1
 80059c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059cc:	f7fc fbb4 	bl	8002138 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059d4:	f7fc fbb0 	bl	8002138 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e122      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059e6:	4b69      	ldr	r3, [pc, #420]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 80059e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0ef      	beq.n	80059d4 <HAL_RCC_OscConfig+0x5cc>
 80059f4:	e01b      	b.n	8005a2e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059f6:	4b65      	ldr	r3, [pc, #404]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 80059f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059fc:	4a63      	ldr	r2, [pc, #396]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 80059fe:	f023 0301 	bic.w	r3, r3, #1
 8005a02:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a06:	f7fc fb97 	bl	8002138 <HAL_GetTick>
 8005a0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a0c:	e008      	b.n	8005a20 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a0e:	f7fc fb93 	bl	8002138 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e105      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a20:	4b5a      	ldr	r3, [pc, #360]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 8005a22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1ef      	bne.n	8005a0e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 80f9 	beq.w	8005c2a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	f040 80cf 	bne.w	8005be0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005a42:	4b52      	ldr	r3, [pc, #328]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f003 0203 	and.w	r2, r3, #3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d12c      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a60:	3b01      	subs	r3, #1
 8005a62:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d123      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a72:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d11b      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a82:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d113      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a92:	085b      	lsrs	r3, r3, #1
 8005a94:	3b01      	subs	r3, #1
 8005a96:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d109      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa6:	085b      	lsrs	r3, r3, #1
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d071      	beq.n	8005b94 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	2b0c      	cmp	r3, #12
 8005ab4:	d068      	beq.n	8005b88 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005ab6:	4b35      	ldr	r3, [pc, #212]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d105      	bne.n	8005ace <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005ac2:	4b32      	ldr	r3, [pc, #200]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e0ac      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005ad2:	4b2e      	ldr	r3, [pc, #184]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a2d      	ldr	r2, [pc, #180]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 8005ad8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005adc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ade:	f7fc fb2b 	bl	8002138 <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ae4:	e008      	b.n	8005af8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ae6:	f7fc fb27 	bl	8002138 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e099      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005af8:	4b24      	ldr	r3, [pc, #144]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1f0      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b04:	4b21      	ldr	r3, [pc, #132]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	4b21      	ldr	r3, [pc, #132]	@ (8005b90 <HAL_RCC_OscConfig+0x788>)
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005b14:	3a01      	subs	r2, #1
 8005b16:	0112      	lsls	r2, r2, #4
 8005b18:	4311      	orrs	r1, r2
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005b1e:	0212      	lsls	r2, r2, #8
 8005b20:	4311      	orrs	r1, r2
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b26:	0852      	lsrs	r2, r2, #1
 8005b28:	3a01      	subs	r2, #1
 8005b2a:	0552      	lsls	r2, r2, #21
 8005b2c:	4311      	orrs	r1, r2
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005b32:	0852      	lsrs	r2, r2, #1
 8005b34:	3a01      	subs	r2, #1
 8005b36:	0652      	lsls	r2, r2, #25
 8005b38:	4311      	orrs	r1, r2
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005b3e:	06d2      	lsls	r2, r2, #27
 8005b40:	430a      	orrs	r2, r1
 8005b42:	4912      	ldr	r1, [pc, #72]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b48:	4b10      	ldr	r3, [pc, #64]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a0f      	ldr	r2, [pc, #60]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 8005b4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b54:	4b0d      	ldr	r3, [pc, #52]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	4a0c      	ldr	r2, [pc, #48]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 8005b5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b60:	f7fc faea 	bl	8002138 <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b68:	f7fc fae6 	bl	8002138 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e058      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b7a:	4b04      	ldr	r3, [pc, #16]	@ (8005b8c <HAL_RCC_OscConfig+0x784>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0f0      	beq.n	8005b68 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b86:	e050      	b.n	8005c2a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e04f      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b94:	4b27      	ldr	r3, [pc, #156]	@ (8005c34 <HAL_RCC_OscConfig+0x82c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d144      	bne.n	8005c2a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005ba0:	4b24      	ldr	r3, [pc, #144]	@ (8005c34 <HAL_RCC_OscConfig+0x82c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a23      	ldr	r2, [pc, #140]	@ (8005c34 <HAL_RCC_OscConfig+0x82c>)
 8005ba6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005baa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bac:	4b21      	ldr	r3, [pc, #132]	@ (8005c34 <HAL_RCC_OscConfig+0x82c>)
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	4a20      	ldr	r2, [pc, #128]	@ (8005c34 <HAL_RCC_OscConfig+0x82c>)
 8005bb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005bb8:	f7fc fabe 	bl	8002138 <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bc0:	f7fc faba 	bl	8002138 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e02c      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bd2:	4b18      	ldr	r3, [pc, #96]	@ (8005c34 <HAL_RCC_OscConfig+0x82c>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0f0      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x7b8>
 8005bde:	e024      	b.n	8005c2a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	2b0c      	cmp	r3, #12
 8005be4:	d01f      	beq.n	8005c26 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005be6:	4b13      	ldr	r3, [pc, #76]	@ (8005c34 <HAL_RCC_OscConfig+0x82c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a12      	ldr	r2, [pc, #72]	@ (8005c34 <HAL_RCC_OscConfig+0x82c>)
 8005bec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf2:	f7fc faa1 	bl	8002138 <HAL_GetTick>
 8005bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bf8:	e008      	b.n	8005c0c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bfa:	f7fc fa9d 	bl	8002138 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d901      	bls.n	8005c0c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e00f      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c0c:	4b09      	ldr	r3, [pc, #36]	@ (8005c34 <HAL_RCC_OscConfig+0x82c>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1f0      	bne.n	8005bfa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005c18:	4b06      	ldr	r3, [pc, #24]	@ (8005c34 <HAL_RCC_OscConfig+0x82c>)
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	4905      	ldr	r1, [pc, #20]	@ (8005c34 <HAL_RCC_OscConfig+0x82c>)
 8005c1e:	4b06      	ldr	r3, [pc, #24]	@ (8005c38 <HAL_RCC_OscConfig+0x830>)
 8005c20:	4013      	ands	r3, r2
 8005c22:	60cb      	str	r3, [r1, #12]
 8005c24:	e001      	b.n	8005c2a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e000      	b.n	8005c2c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3720      	adds	r7, #32
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	40021000 	.word	0x40021000
 8005c38:	feeefffc 	.word	0xfeeefffc

08005c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005c46:	2300      	movs	r3, #0
 8005c48:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e11d      	b.n	8005e90 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c54:	4b90      	ldr	r3, [pc, #576]	@ (8005e98 <HAL_RCC_ClockConfig+0x25c>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 030f 	and.w	r3, r3, #15
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d910      	bls.n	8005c84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c62:	4b8d      	ldr	r3, [pc, #564]	@ (8005e98 <HAL_RCC_ClockConfig+0x25c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f023 020f 	bic.w	r2, r3, #15
 8005c6a:	498b      	ldr	r1, [pc, #556]	@ (8005e98 <HAL_RCC_ClockConfig+0x25c>)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c72:	4b89      	ldr	r3, [pc, #548]	@ (8005e98 <HAL_RCC_ClockConfig+0x25c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d001      	beq.n	8005c84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e105      	b.n	8005e90 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d010      	beq.n	8005cb2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	4b81      	ldr	r3, [pc, #516]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d908      	bls.n	8005cb2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ca0:	4b7e      	ldr	r3, [pc, #504]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	497b      	ldr	r1, [pc, #492]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d079      	beq.n	8005db2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	d11e      	bne.n	8005d04 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cc6:	4b75      	ldr	r3, [pc, #468]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e0dc      	b.n	8005e90 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005cd6:	f000 fa3b 	bl	8006150 <RCC_GetSysClockFreqFromPLLSource>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	4a70      	ldr	r2, [pc, #448]	@ (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d946      	bls.n	8005d70 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005ce2:	4b6e      	ldr	r3, [pc, #440]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d140      	bne.n	8005d70 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005cee:	4b6b      	ldr	r3, [pc, #428]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cf6:	4a69      	ldr	r2, [pc, #420]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005cf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cfc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005cfe:	2380      	movs	r3, #128	@ 0x80
 8005d00:	617b      	str	r3, [r7, #20]
 8005d02:	e035      	b.n	8005d70 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d107      	bne.n	8005d1c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d0c:	4b63      	ldr	r3, [pc, #396]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d115      	bne.n	8005d44 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e0b9      	b.n	8005e90 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d107      	bne.n	8005d34 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d24:	4b5d      	ldr	r3, [pc, #372]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d109      	bne.n	8005d44 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e0ad      	b.n	8005e90 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d34:	4b59      	ldr	r3, [pc, #356]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e0a5      	b.n	8005e90 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005d44:	f000 f8b4 	bl	8005eb0 <HAL_RCC_GetSysClockFreq>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	4a55      	ldr	r2, [pc, #340]	@ (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d90f      	bls.n	8005d70 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005d50:	4b52      	ldr	r3, [pc, #328]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d109      	bne.n	8005d70 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d5c:	4b4f      	ldr	r3, [pc, #316]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d64:	4a4d      	ldr	r2, [pc, #308]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d6a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005d6c:	2380      	movs	r3, #128	@ 0x80
 8005d6e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d70:	4b4a      	ldr	r3, [pc, #296]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f023 0203 	bic.w	r2, r3, #3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	4947      	ldr	r1, [pc, #284]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d82:	f7fc f9d9 	bl	8002138 <HAL_GetTick>
 8005d86:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d88:	e00a      	b.n	8005da0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d8a:	f7fc f9d5 	bl	8002138 <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d901      	bls.n	8005da0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e077      	b.n	8005e90 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005da0:	4b3e      	ldr	r3, [pc, #248]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f003 020c 	and.w	r2, r3, #12
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d1eb      	bne.n	8005d8a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	2b80      	cmp	r3, #128	@ 0x80
 8005db6:	d105      	bne.n	8005dc4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005db8:	4b38      	ldr	r3, [pc, #224]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	4a37      	ldr	r2, [pc, #220]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005dbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dc2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d010      	beq.n	8005df2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	4b31      	ldr	r3, [pc, #196]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d208      	bcs.n	8005df2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005de0:	4b2e      	ldr	r3, [pc, #184]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	492b      	ldr	r1, [pc, #172]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005df2:	4b29      	ldr	r3, [pc, #164]	@ (8005e98 <HAL_RCC_ClockConfig+0x25c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d210      	bcs.n	8005e22 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e00:	4b25      	ldr	r3, [pc, #148]	@ (8005e98 <HAL_RCC_ClockConfig+0x25c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f023 020f 	bic.w	r2, r3, #15
 8005e08:	4923      	ldr	r1, [pc, #140]	@ (8005e98 <HAL_RCC_ClockConfig+0x25c>)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e10:	4b21      	ldr	r3, [pc, #132]	@ (8005e98 <HAL_RCC_ClockConfig+0x25c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 030f 	and.w	r3, r3, #15
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d001      	beq.n	8005e22 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e036      	b.n	8005e90 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d008      	beq.n	8005e40 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	4918      	ldr	r1, [pc, #96]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0308 	and.w	r3, r3, #8
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d009      	beq.n	8005e60 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e4c:	4b13      	ldr	r3, [pc, #76]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	4910      	ldr	r1, [pc, #64]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e60:	f000 f826 	bl	8005eb0 <HAL_RCC_GetSysClockFreq>
 8005e64:	4602      	mov	r2, r0
 8005e66:	4b0d      	ldr	r3, [pc, #52]	@ (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	091b      	lsrs	r3, r3, #4
 8005e6c:	f003 030f 	and.w	r3, r3, #15
 8005e70:	490c      	ldr	r1, [pc, #48]	@ (8005ea4 <HAL_RCC_ClockConfig+0x268>)
 8005e72:	5ccb      	ldrb	r3, [r1, r3]
 8005e74:	f003 031f 	and.w	r3, r3, #31
 8005e78:	fa22 f303 	lsr.w	r3, r2, r3
 8005e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8005ea8 <HAL_RCC_ClockConfig+0x26c>)
 8005e7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e80:	4b0a      	ldr	r3, [pc, #40]	@ (8005eac <HAL_RCC_ClockConfig+0x270>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fb fdbf 	bl	8001a08 <HAL_InitTick>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	73fb      	strb	r3, [r7, #15]

  return status;
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3718      	adds	r7, #24
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	40022000 	.word	0x40022000
 8005e9c:	40021000 	.word	0x40021000
 8005ea0:	04c4b400 	.word	0x04c4b400
 8005ea4:	0800ca34 	.word	0x0800ca34
 8005ea8:	20000004 	.word	0x20000004
 8005eac:	20000018 	.word	0x20000018

08005eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b089      	sub	sp, #36	@ 0x24
 8005eb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61fb      	str	r3, [r7, #28]
 8005eba:	2300      	movs	r3, #0
 8005ebc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 030c 	and.w	r3, r3, #12
 8005ec6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f003 0303 	and.w	r3, r3, #3
 8005ed0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d005      	beq.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x34>
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	2b0c      	cmp	r3, #12
 8005edc:	d121      	bne.n	8005f22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d11e      	bne.n	8005f22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ee4:	4b34      	ldr	r3, [pc, #208]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0308 	and.w	r3, r3, #8
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d107      	bne.n	8005f00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ef0:	4b31      	ldr	r3, [pc, #196]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ef6:	0a1b      	lsrs	r3, r3, #8
 8005ef8:	f003 030f 	and.w	r3, r3, #15
 8005efc:	61fb      	str	r3, [r7, #28]
 8005efe:	e005      	b.n	8005f0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f00:	4b2d      	ldr	r3, [pc, #180]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	091b      	lsrs	r3, r3, #4
 8005f06:	f003 030f 	and.w	r3, r3, #15
 8005f0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f0c:	4a2b      	ldr	r2, [pc, #172]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10d      	bne.n	8005f38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f20:	e00a      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d102      	bne.n	8005f2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f28:	4b25      	ldr	r3, [pc, #148]	@ (8005fc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f2a:	61bb      	str	r3, [r7, #24]
 8005f2c:	e004      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	2b08      	cmp	r3, #8
 8005f32:	d101      	bne.n	8005f38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f34:	4b23      	ldr	r3, [pc, #140]	@ (8005fc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	2b0c      	cmp	r3, #12
 8005f3c:	d134      	bne.n	8005fa8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d003      	beq.n	8005f56 <HAL_RCC_GetSysClockFreq+0xa6>
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	2b03      	cmp	r3, #3
 8005f52:	d003      	beq.n	8005f5c <HAL_RCC_GetSysClockFreq+0xac>
 8005f54:	e005      	b.n	8005f62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005f56:	4b1a      	ldr	r3, [pc, #104]	@ (8005fc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f58:	617b      	str	r3, [r7, #20]
      break;
 8005f5a:	e005      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005f5c:	4b19      	ldr	r3, [pc, #100]	@ (8005fc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f5e:	617b      	str	r3, [r7, #20]
      break;
 8005f60:	e002      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	617b      	str	r3, [r7, #20]
      break;
 8005f66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f68:	4b13      	ldr	r3, [pc, #76]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	091b      	lsrs	r3, r3, #4
 8005f6e:	f003 030f 	and.w	r3, r3, #15
 8005f72:	3301      	adds	r3, #1
 8005f74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f76:	4b10      	ldr	r3, [pc, #64]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	0a1b      	lsrs	r3, r3, #8
 8005f7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	fb03 f202 	mul.w	r2, r3, r2
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	0e5b      	lsrs	r3, r3, #25
 8005f94:	f003 0303 	and.w	r3, r3, #3
 8005f98:	3301      	adds	r3, #1
 8005f9a:	005b      	lsls	r3, r3, #1
 8005f9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005fa8:	69bb      	ldr	r3, [r7, #24]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3724      	adds	r7, #36	@ 0x24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	40021000 	.word	0x40021000
 8005fbc:	0800ca4c 	.word	0x0800ca4c
 8005fc0:	00f42400 	.word	0x00f42400
 8005fc4:	007a1200 	.word	0x007a1200

08005fc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fcc:	4b03      	ldr	r3, [pc, #12]	@ (8005fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8005fce:	681b      	ldr	r3, [r3, #0]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	20000004 	.word	0x20000004

08005fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005fe4:	f7ff fff0 	bl	8005fc8 <HAL_RCC_GetHCLKFreq>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	4b06      	ldr	r3, [pc, #24]	@ (8006004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	0a1b      	lsrs	r3, r3, #8
 8005ff0:	f003 0307 	and.w	r3, r3, #7
 8005ff4:	4904      	ldr	r1, [pc, #16]	@ (8006008 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ff6:	5ccb      	ldrb	r3, [r1, r3]
 8005ff8:	f003 031f 	and.w	r3, r3, #31
 8005ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006000:	4618      	mov	r0, r3
 8006002:	bd80      	pop	{r7, pc}
 8006004:	40021000 	.word	0x40021000
 8006008:	0800ca44 	.word	0x0800ca44

0800600c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006010:	f7ff ffda 	bl	8005fc8 <HAL_RCC_GetHCLKFreq>
 8006014:	4602      	mov	r2, r0
 8006016:	4b06      	ldr	r3, [pc, #24]	@ (8006030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	0adb      	lsrs	r3, r3, #11
 800601c:	f003 0307 	and.w	r3, r3, #7
 8006020:	4904      	ldr	r1, [pc, #16]	@ (8006034 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006022:	5ccb      	ldrb	r3, [r1, r3]
 8006024:	f003 031f 	and.w	r3, r3, #31
 8006028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800602c:	4618      	mov	r0, r3
 800602e:	bd80      	pop	{r7, pc}
 8006030:	40021000 	.word	0x40021000
 8006034:	0800ca44 	.word	0x0800ca44

08006038 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	220f      	movs	r2, #15
 8006046:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006048:	4b12      	ldr	r3, [pc, #72]	@ (8006094 <HAL_RCC_GetClockConfig+0x5c>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f003 0203 	and.w	r2, r3, #3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006054:	4b0f      	ldr	r3, [pc, #60]	@ (8006094 <HAL_RCC_GetClockConfig+0x5c>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006060:	4b0c      	ldr	r3, [pc, #48]	@ (8006094 <HAL_RCC_GetClockConfig+0x5c>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800606c:	4b09      	ldr	r3, [pc, #36]	@ (8006094 <HAL_RCC_GetClockConfig+0x5c>)
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	08db      	lsrs	r3, r3, #3
 8006072:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800607a:	4b07      	ldr	r3, [pc, #28]	@ (8006098 <HAL_RCC_GetClockConfig+0x60>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 020f 	and.w	r2, r3, #15
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	601a      	str	r2, [r3, #0]
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	40021000 	.word	0x40021000
 8006098:	40022000 	.word	0x40022000

0800609c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80060a4:	2300      	movs	r3, #0
 80060a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80060a8:	4b27      	ldr	r3, [pc, #156]	@ (8006148 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80060aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d003      	beq.n	80060bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80060b4:	f7ff f8e4 	bl	8005280 <HAL_PWREx_GetVoltageRange>
 80060b8:	6178      	str	r0, [r7, #20]
 80060ba:	e014      	b.n	80060e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80060bc:	4b22      	ldr	r3, [pc, #136]	@ (8006148 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80060be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060c0:	4a21      	ldr	r2, [pc, #132]	@ (8006148 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80060c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80060c8:	4b1f      	ldr	r3, [pc, #124]	@ (8006148 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80060ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80060d4:	f7ff f8d4 	bl	8005280 <HAL_PWREx_GetVoltageRange>
 80060d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80060da:	4b1b      	ldr	r3, [pc, #108]	@ (8006148 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80060dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060de:	4a1a      	ldr	r2, [pc, #104]	@ (8006148 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80060e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060ec:	d10b      	bne.n	8006106 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b80      	cmp	r3, #128	@ 0x80
 80060f2:	d913      	bls.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80060f8:	d902      	bls.n	8006100 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060fa:	2302      	movs	r3, #2
 80060fc:	613b      	str	r3, [r7, #16]
 80060fe:	e00d      	b.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006100:	2301      	movs	r3, #1
 8006102:	613b      	str	r3, [r7, #16]
 8006104:	e00a      	b.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b7f      	cmp	r3, #127	@ 0x7f
 800610a:	d902      	bls.n	8006112 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800610c:	2302      	movs	r3, #2
 800610e:	613b      	str	r3, [r7, #16]
 8006110:	e004      	b.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b70      	cmp	r3, #112	@ 0x70
 8006116:	d101      	bne.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006118:	2301      	movs	r3, #1
 800611a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800611c:	4b0b      	ldr	r3, [pc, #44]	@ (800614c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f023 020f 	bic.w	r2, r3, #15
 8006124:	4909      	ldr	r1, [pc, #36]	@ (800614c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	4313      	orrs	r3, r2
 800612a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800612c:	4b07      	ldr	r3, [pc, #28]	@ (800614c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 030f 	and.w	r3, r3, #15
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	429a      	cmp	r2, r3
 8006138:	d001      	beq.n	800613e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	40021000 	.word	0x40021000
 800614c:	40022000 	.word	0x40022000

08006150 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006156:	4b2d      	ldr	r3, [pc, #180]	@ (800620c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f003 0303 	and.w	r3, r3, #3
 800615e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b03      	cmp	r3, #3
 8006164:	d00b      	beq.n	800617e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b03      	cmp	r3, #3
 800616a:	d825      	bhi.n	80061b8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d008      	beq.n	8006184 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2b02      	cmp	r3, #2
 8006176:	d11f      	bne.n	80061b8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006178:	4b25      	ldr	r3, [pc, #148]	@ (8006210 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800617a:	613b      	str	r3, [r7, #16]
    break;
 800617c:	e01f      	b.n	80061be <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800617e:	4b25      	ldr	r3, [pc, #148]	@ (8006214 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006180:	613b      	str	r3, [r7, #16]
    break;
 8006182:	e01c      	b.n	80061be <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006184:	4b21      	ldr	r3, [pc, #132]	@ (800620c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0308 	and.w	r3, r3, #8
 800618c:	2b00      	cmp	r3, #0
 800618e:	d107      	bne.n	80061a0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006190:	4b1e      	ldr	r3, [pc, #120]	@ (800620c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006192:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006196:	0a1b      	lsrs	r3, r3, #8
 8006198:	f003 030f 	and.w	r3, r3, #15
 800619c:	617b      	str	r3, [r7, #20]
 800619e:	e005      	b.n	80061ac <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80061a0:	4b1a      	ldr	r3, [pc, #104]	@ (800620c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	091b      	lsrs	r3, r3, #4
 80061a6:	f003 030f 	and.w	r3, r3, #15
 80061aa:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80061ac:	4a1a      	ldr	r2, [pc, #104]	@ (8006218 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061b4:	613b      	str	r3, [r7, #16]
    break;
 80061b6:	e002      	b.n	80061be <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	613b      	str	r3, [r7, #16]
    break;
 80061bc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061be:	4b13      	ldr	r3, [pc, #76]	@ (800620c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	091b      	lsrs	r3, r3, #4
 80061c4:	f003 030f 	and.w	r3, r3, #15
 80061c8:	3301      	adds	r3, #1
 80061ca:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80061cc:	4b0f      	ldr	r3, [pc, #60]	@ (800620c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	0a1b      	lsrs	r3, r3, #8
 80061d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	fb03 f202 	mul.w	r2, r3, r2
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061e4:	4b09      	ldr	r3, [pc, #36]	@ (800620c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	0e5b      	lsrs	r3, r3, #25
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	3301      	adds	r3, #1
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80061fe:	683b      	ldr	r3, [r7, #0]
}
 8006200:	4618      	mov	r0, r3
 8006202:	371c      	adds	r7, #28
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	40021000 	.word	0x40021000
 8006210:	00f42400 	.word	0x00f42400
 8006214:	007a1200 	.word	0x007a1200
 8006218:	0800ca4c 	.word	0x0800ca4c

0800621c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006224:	2300      	movs	r3, #0
 8006226:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006228:	2300      	movs	r3, #0
 800622a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006234:	2b00      	cmp	r3, #0
 8006236:	d040      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800623c:	2b80      	cmp	r3, #128	@ 0x80
 800623e:	d02a      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006240:	2b80      	cmp	r3, #128	@ 0x80
 8006242:	d825      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006244:	2b60      	cmp	r3, #96	@ 0x60
 8006246:	d026      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006248:	2b60      	cmp	r3, #96	@ 0x60
 800624a:	d821      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800624c:	2b40      	cmp	r3, #64	@ 0x40
 800624e:	d006      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006250:	2b40      	cmp	r3, #64	@ 0x40
 8006252:	d81d      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006254:	2b00      	cmp	r3, #0
 8006256:	d009      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006258:	2b20      	cmp	r3, #32
 800625a:	d010      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800625c:	e018      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800625e:	4b89      	ldr	r3, [pc, #548]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	4a88      	ldr	r2, [pc, #544]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006268:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800626a:	e015      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3304      	adds	r3, #4
 8006270:	2100      	movs	r1, #0
 8006272:	4618      	mov	r0, r3
 8006274:	f000 fb12 	bl	800689c <RCCEx_PLLSAI1_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800627c:	e00c      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3320      	adds	r3, #32
 8006282:	2100      	movs	r1, #0
 8006284:	4618      	mov	r0, r3
 8006286:	f000 fbfd 	bl	8006a84 <RCCEx_PLLSAI2_Config>
 800628a:	4603      	mov	r3, r0
 800628c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800628e:	e003      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	74fb      	strb	r3, [r7, #19]
      break;
 8006294:	e000      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006298:	7cfb      	ldrb	r3, [r7, #19]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10b      	bne.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800629e:	4b79      	ldr	r3, [pc, #484]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062a4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062ac:	4975      	ldr	r1, [pc, #468]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80062b4:	e001      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b6:	7cfb      	ldrb	r3, [r7, #19]
 80062b8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d047      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062ce:	d030      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80062d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062d4:	d82a      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80062d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062da:	d02a      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80062dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062e0:	d824      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80062e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062e6:	d008      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xde>
 80062e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062ec:	d81e      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00a      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80062f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062f6:	d010      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80062f8:	e018      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80062fa:	4b62      	ldr	r3, [pc, #392]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	4a61      	ldr	r2, [pc, #388]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006304:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006306:	e015      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	3304      	adds	r3, #4
 800630c:	2100      	movs	r1, #0
 800630e:	4618      	mov	r0, r3
 8006310:	f000 fac4 	bl	800689c <RCCEx_PLLSAI1_Config>
 8006314:	4603      	mov	r3, r0
 8006316:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006318:	e00c      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3320      	adds	r3, #32
 800631e:	2100      	movs	r1, #0
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fbaf 	bl	8006a84 <RCCEx_PLLSAI2_Config>
 8006326:	4603      	mov	r3, r0
 8006328:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800632a:	e003      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	74fb      	strb	r3, [r7, #19]
      break;
 8006330:	e000      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006334:	7cfb      	ldrb	r3, [r7, #19]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10b      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800633a:	4b52      	ldr	r3, [pc, #328]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800633c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006340:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006348:	494e      	ldr	r1, [pc, #312]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800634a:	4313      	orrs	r3, r2
 800634c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006350:	e001      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006352:	7cfb      	ldrb	r3, [r7, #19]
 8006354:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 809f 	beq.w	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006364:	2300      	movs	r3, #0
 8006366:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006368:	4b46      	ldr	r3, [pc, #280]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800636a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800636c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006374:	2301      	movs	r3, #1
 8006376:	e000      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006378:	2300      	movs	r3, #0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00d      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800637e:	4b41      	ldr	r3, [pc, #260]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006382:	4a40      	ldr	r2, [pc, #256]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006388:	6593      	str	r3, [r2, #88]	@ 0x58
 800638a:	4b3e      	ldr	r3, [pc, #248]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800638c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800638e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006392:	60bb      	str	r3, [r7, #8]
 8006394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006396:	2301      	movs	r3, #1
 8006398:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800639a:	4b3b      	ldr	r3, [pc, #236]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a3a      	ldr	r2, [pc, #232]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80063a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063a6:	f7fb fec7 	bl	8002138 <HAL_GetTick>
 80063aa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80063ac:	e009      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ae:	f7fb fec3 	bl	8002138 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d902      	bls.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	74fb      	strb	r3, [r7, #19]
        break;
 80063c0:	e005      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80063c2:	4b31      	ldr	r3, [pc, #196]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d0ef      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80063ce:	7cfb      	ldrb	r3, [r7, #19]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d15b      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063d4:	4b2b      	ldr	r3, [pc, #172]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063de:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d01f      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d019      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063f2:	4b24      	ldr	r3, [pc, #144]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063fe:	4b21      	ldr	r3, [pc, #132]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006404:	4a1f      	ldr	r2, [pc, #124]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006406:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800640a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800640e:	4b1d      	ldr	r3, [pc, #116]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006414:	4a1b      	ldr	r2, [pc, #108]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006416:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800641a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800641e:	4a19      	ldr	r2, [pc, #100]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b00      	cmp	r3, #0
 800642e:	d016      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006430:	f7fb fe82 	bl	8002138 <HAL_GetTick>
 8006434:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006436:	e00b      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006438:	f7fb fe7e 	bl	8002138 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006446:	4293      	cmp	r3, r2
 8006448:	d902      	bls.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	74fb      	strb	r3, [r7, #19]
            break;
 800644e:	e006      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006450:	4b0c      	ldr	r3, [pc, #48]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d0ec      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800645e:	7cfb      	ldrb	r3, [r7, #19]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10c      	bne.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006464:	4b07      	ldr	r3, [pc, #28]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800646a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006474:	4903      	ldr	r1, [pc, #12]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006476:	4313      	orrs	r3, r2
 8006478:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800647c:	e008      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800647e:	7cfb      	ldrb	r3, [r7, #19]
 8006480:	74bb      	strb	r3, [r7, #18]
 8006482:	e005      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006484:	40021000 	.word	0x40021000
 8006488:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648c:	7cfb      	ldrb	r3, [r7, #19]
 800648e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006490:	7c7b      	ldrb	r3, [r7, #17]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d105      	bne.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006496:	4ba0      	ldr	r3, [pc, #640]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800649a:	4a9f      	ldr	r2, [pc, #636]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800649c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064ae:	4b9a      	ldr	r3, [pc, #616]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b4:	f023 0203 	bic.w	r2, r3, #3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064bc:	4996      	ldr	r1, [pc, #600]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00a      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064d0:	4b91      	ldr	r3, [pc, #580]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d6:	f023 020c 	bic.w	r2, r3, #12
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064de:	498e      	ldr	r1, [pc, #568]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0304 	and.w	r3, r3, #4
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00a      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064f2:	4b89      	ldr	r3, [pc, #548]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006500:	4985      	ldr	r1, [pc, #532]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006502:	4313      	orrs	r3, r2
 8006504:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0308 	and.w	r3, r3, #8
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00a      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006514:	4b80      	ldr	r3, [pc, #512]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800651a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006522:	497d      	ldr	r1, [pc, #500]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006524:	4313      	orrs	r3, r2
 8006526:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0310 	and.w	r3, r3, #16
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00a      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006536:	4b78      	ldr	r3, [pc, #480]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800653c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006544:	4974      	ldr	r1, [pc, #464]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006546:	4313      	orrs	r3, r2
 8006548:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0320 	and.w	r3, r3, #32
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00a      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006558:	4b6f      	ldr	r3, [pc, #444]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800655a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800655e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006566:	496c      	ldr	r1, [pc, #432]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006568:	4313      	orrs	r3, r2
 800656a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800657a:	4b67      	ldr	r3, [pc, #412]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800657c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006580:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006588:	4963      	ldr	r1, [pc, #396]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800658a:	4313      	orrs	r3, r2
 800658c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800659c:	4b5e      	ldr	r3, [pc, #376]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800659e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065aa:	495b      	ldr	r1, [pc, #364]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065be:	4b56      	ldr	r3, [pc, #344]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065cc:	4952      	ldr	r1, [pc, #328]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00a      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80065e0:	4b4d      	ldr	r3, [pc, #308]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ee:	494a      	ldr	r1, [pc, #296]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006602:	4b45      	ldr	r3, [pc, #276]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006608:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006610:	4941      	ldr	r1, [pc, #260]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006612:	4313      	orrs	r3, r2
 8006614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00a      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006624:	4b3c      	ldr	r3, [pc, #240]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006626:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800662a:	f023 0203 	bic.w	r2, r3, #3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006632:	4939      	ldr	r1, [pc, #228]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006634:	4313      	orrs	r3, r2
 8006636:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d028      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006646:	4b34      	ldr	r3, [pc, #208]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800664c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006654:	4930      	ldr	r1, [pc, #192]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006656:	4313      	orrs	r3, r2
 8006658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006660:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006664:	d106      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006666:	4b2c      	ldr	r3, [pc, #176]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	4a2b      	ldr	r2, [pc, #172]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800666c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006670:	60d3      	str	r3, [r2, #12]
 8006672:	e011      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006678:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800667c:	d10c      	bne.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3304      	adds	r3, #4
 8006682:	2101      	movs	r1, #1
 8006684:	4618      	mov	r0, r3
 8006686:	f000 f909 	bl	800689c <RCCEx_PLLSAI1_Config>
 800668a:	4603      	mov	r3, r0
 800668c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800668e:	7cfb      	ldrb	r3, [r7, #19]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006694:	7cfb      	ldrb	r3, [r7, #19]
 8006696:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d04d      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066ac:	d108      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80066ae:	4b1a      	ldr	r3, [pc, #104]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066b4:	4a18      	ldr	r2, [pc, #96]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80066ba:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80066be:	e012      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80066c0:	4b15      	ldr	r3, [pc, #84]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066c6:	4a14      	ldr	r2, [pc, #80]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066cc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80066d0:	4b11      	ldr	r3, [pc, #68]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066de:	490e      	ldr	r1, [pc, #56]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066ee:	d106      	bne.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066f0:	4b09      	ldr	r3, [pc, #36]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	4a08      	ldr	r2, [pc, #32]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066fa:	60d3      	str	r3, [r2, #12]
 80066fc:	e020      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006702:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006706:	d109      	bne.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006708:	4b03      	ldr	r3, [pc, #12]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	4a02      	ldr	r2, [pc, #8]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800670e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006712:	60d3      	str	r3, [r2, #12]
 8006714:	e014      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006716:	bf00      	nop
 8006718:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006720:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006724:	d10c      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3304      	adds	r3, #4
 800672a:	2101      	movs	r1, #1
 800672c:	4618      	mov	r0, r3
 800672e:	f000 f8b5 	bl	800689c <RCCEx_PLLSAI1_Config>
 8006732:	4603      	mov	r3, r0
 8006734:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006736:	7cfb      	ldrb	r3, [r7, #19]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800673c:	7cfb      	ldrb	r3, [r7, #19]
 800673e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d028      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800674c:	4b4a      	ldr	r3, [pc, #296]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800674e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006752:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800675a:	4947      	ldr	r1, [pc, #284]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800675c:	4313      	orrs	r3, r2
 800675e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006766:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800676a:	d106      	bne.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800676c:	4b42      	ldr	r3, [pc, #264]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	4a41      	ldr	r2, [pc, #260]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006772:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006776:	60d3      	str	r3, [r2, #12]
 8006778:	e011      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800677e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006782:	d10c      	bne.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3304      	adds	r3, #4
 8006788:	2101      	movs	r1, #1
 800678a:	4618      	mov	r0, r3
 800678c:	f000 f886 	bl	800689c <RCCEx_PLLSAI1_Config>
 8006790:	4603      	mov	r3, r0
 8006792:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006794:	7cfb      	ldrb	r3, [r7, #19]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800679a:	7cfb      	ldrb	r3, [r7, #19]
 800679c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d01e      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067aa:	4b33      	ldr	r3, [pc, #204]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067ba:	492f      	ldr	r1, [pc, #188]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067cc:	d10c      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	3304      	adds	r3, #4
 80067d2:	2102      	movs	r1, #2
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 f861 	bl	800689c <RCCEx_PLLSAI1_Config>
 80067da:	4603      	mov	r3, r0
 80067dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80067de:	7cfb      	ldrb	r3, [r7, #19]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80067e4:	7cfb      	ldrb	r3, [r7, #19]
 80067e6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00b      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80067f4:	4b20      	ldr	r3, [pc, #128]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067fa:	f023 0204 	bic.w	r2, r3, #4
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006804:	491c      	ldr	r1, [pc, #112]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006806:	4313      	orrs	r3, r2
 8006808:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00b      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006818:	4b17      	ldr	r3, [pc, #92]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800681a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800681e:	f023 0218 	bic.w	r2, r3, #24
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006828:	4913      	ldr	r1, [pc, #76]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800682a:	4313      	orrs	r3, r2
 800682c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d017      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800683c:	4b0e      	ldr	r3, [pc, #56]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800683e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006842:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800684c:	490a      	ldr	r1, [pc, #40]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800684e:	4313      	orrs	r3, r2
 8006850:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800685a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800685e:	d105      	bne.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006860:	4b05      	ldr	r3, [pc, #20]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	4a04      	ldr	r2, [pc, #16]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006866:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800686a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800686c:	7cbb      	ldrb	r3, [r7, #18]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3718      	adds	r7, #24
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	40021000 	.word	0x40021000

0800687c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006880:	4b05      	ldr	r3, [pc, #20]	@ (8006898 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a04      	ldr	r2, [pc, #16]	@ (8006898 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006886:	f043 0304 	orr.w	r3, r3, #4
 800688a:	6013      	str	r3, [r2, #0]
}
 800688c:	bf00      	nop
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	40021000 	.word	0x40021000

0800689c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80068aa:	4b72      	ldr	r3, [pc, #456]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f003 0303 	and.w	r3, r3, #3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00e      	beq.n	80068d4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80068b6:	4b6f      	ldr	r3, [pc, #444]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f003 0203 	and.w	r2, r3, #3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d103      	bne.n	80068ce <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
       ||
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d142      	bne.n	8006954 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	73fb      	strb	r3, [r7, #15]
 80068d2:	e03f      	b.n	8006954 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b03      	cmp	r3, #3
 80068da:	d018      	beq.n	800690e <RCCEx_PLLSAI1_Config+0x72>
 80068dc:	2b03      	cmp	r3, #3
 80068de:	d825      	bhi.n	800692c <RCCEx_PLLSAI1_Config+0x90>
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d002      	beq.n	80068ea <RCCEx_PLLSAI1_Config+0x4e>
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d009      	beq.n	80068fc <RCCEx_PLLSAI1_Config+0x60>
 80068e8:	e020      	b.n	800692c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80068ea:	4b62      	ldr	r3, [pc, #392]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d11d      	bne.n	8006932 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068fa:	e01a      	b.n	8006932 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80068fc:	4b5d      	ldr	r3, [pc, #372]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006904:	2b00      	cmp	r3, #0
 8006906:	d116      	bne.n	8006936 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800690c:	e013      	b.n	8006936 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800690e:	4b59      	ldr	r3, [pc, #356]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10f      	bne.n	800693a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800691a:	4b56      	ldr	r3, [pc, #344]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d109      	bne.n	800693a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800692a:	e006      	b.n	800693a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	73fb      	strb	r3, [r7, #15]
      break;
 8006930:	e004      	b.n	800693c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006932:	bf00      	nop
 8006934:	e002      	b.n	800693c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006936:	bf00      	nop
 8006938:	e000      	b.n	800693c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800693a:	bf00      	nop
    }

    if(status == HAL_OK)
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d108      	bne.n	8006954 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006942:	4b4c      	ldr	r3, [pc, #304]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	f023 0203 	bic.w	r2, r3, #3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4949      	ldr	r1, [pc, #292]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006950:	4313      	orrs	r3, r2
 8006952:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006954:	7bfb      	ldrb	r3, [r7, #15]
 8006956:	2b00      	cmp	r3, #0
 8006958:	f040 8086 	bne.w	8006a68 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800695c:	4b45      	ldr	r3, [pc, #276]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a44      	ldr	r2, [pc, #272]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006962:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006966:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006968:	f7fb fbe6 	bl	8002138 <HAL_GetTick>
 800696c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800696e:	e009      	b.n	8006984 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006970:	f7fb fbe2 	bl	8002138 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	2b02      	cmp	r3, #2
 800697c:	d902      	bls.n	8006984 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	73fb      	strb	r3, [r7, #15]
        break;
 8006982:	e005      	b.n	8006990 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006984:	4b3b      	ldr	r3, [pc, #236]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1ef      	bne.n	8006970 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006990:	7bfb      	ldrb	r3, [r7, #15]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d168      	bne.n	8006a68 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d113      	bne.n	80069c4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800699c:	4b35      	ldr	r3, [pc, #212]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 800699e:	691a      	ldr	r2, [r3, #16]
 80069a0:	4b35      	ldr	r3, [pc, #212]	@ (8006a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 80069a2:	4013      	ands	r3, r2
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6892      	ldr	r2, [r2, #8]
 80069a8:	0211      	lsls	r1, r2, #8
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	68d2      	ldr	r2, [r2, #12]
 80069ae:	06d2      	lsls	r2, r2, #27
 80069b0:	4311      	orrs	r1, r2
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6852      	ldr	r2, [r2, #4]
 80069b6:	3a01      	subs	r2, #1
 80069b8:	0112      	lsls	r2, r2, #4
 80069ba:	430a      	orrs	r2, r1
 80069bc:	492d      	ldr	r1, [pc, #180]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	610b      	str	r3, [r1, #16]
 80069c2:	e02d      	b.n	8006a20 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d115      	bne.n	80069f6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069ca:	4b2a      	ldr	r3, [pc, #168]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069cc:	691a      	ldr	r2, [r3, #16]
 80069ce:	4b2b      	ldr	r3, [pc, #172]	@ (8006a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80069d0:	4013      	ands	r3, r2
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	6892      	ldr	r2, [r2, #8]
 80069d6:	0211      	lsls	r1, r2, #8
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6912      	ldr	r2, [r2, #16]
 80069dc:	0852      	lsrs	r2, r2, #1
 80069de:	3a01      	subs	r2, #1
 80069e0:	0552      	lsls	r2, r2, #21
 80069e2:	4311      	orrs	r1, r2
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	6852      	ldr	r2, [r2, #4]
 80069e8:	3a01      	subs	r2, #1
 80069ea:	0112      	lsls	r2, r2, #4
 80069ec:	430a      	orrs	r2, r1
 80069ee:	4921      	ldr	r1, [pc, #132]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	610b      	str	r3, [r1, #16]
 80069f4:	e014      	b.n	8006a20 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069f6:	4b1f      	ldr	r3, [pc, #124]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069f8:	691a      	ldr	r2, [r3, #16]
 80069fa:	4b21      	ldr	r3, [pc, #132]	@ (8006a80 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6892      	ldr	r2, [r2, #8]
 8006a02:	0211      	lsls	r1, r2, #8
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	6952      	ldr	r2, [r2, #20]
 8006a08:	0852      	lsrs	r2, r2, #1
 8006a0a:	3a01      	subs	r2, #1
 8006a0c:	0652      	lsls	r2, r2, #25
 8006a0e:	4311      	orrs	r1, r2
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	6852      	ldr	r2, [r2, #4]
 8006a14:	3a01      	subs	r2, #1
 8006a16:	0112      	lsls	r2, r2, #4
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	4916      	ldr	r1, [pc, #88]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006a20:	4b14      	ldr	r3, [pc, #80]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a13      	ldr	r2, [pc, #76]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a2c:	f7fb fb84 	bl	8002138 <HAL_GetTick>
 8006a30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a32:	e009      	b.n	8006a48 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a34:	f7fb fb80 	bl	8002138 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d902      	bls.n	8006a48 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	73fb      	strb	r3, [r7, #15]
          break;
 8006a46:	e005      	b.n	8006a54 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a48:	4b0a      	ldr	r3, [pc, #40]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0ef      	beq.n	8006a34 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d106      	bne.n	8006a68 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006a5a:	4b06      	ldr	r3, [pc, #24]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a5c:	691a      	ldr	r2, [r3, #16]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	4904      	ldr	r1, [pc, #16]	@ (8006a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	40021000 	.word	0x40021000
 8006a78:	07ff800f 	.word	0x07ff800f
 8006a7c:	ff9f800f 	.word	0xff9f800f
 8006a80:	f9ff800f 	.word	0xf9ff800f

08006a84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a92:	4b72      	ldr	r3, [pc, #456]	@ (8006c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f003 0303 	and.w	r3, r3, #3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00e      	beq.n	8006abc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006a9e:	4b6f      	ldr	r3, [pc, #444]	@ (8006c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	f003 0203 	and.w	r2, r3, #3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d103      	bne.n	8006ab6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
       ||
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d142      	bne.n	8006b3c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	73fb      	strb	r3, [r7, #15]
 8006aba:	e03f      	b.n	8006b3c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2b03      	cmp	r3, #3
 8006ac2:	d018      	beq.n	8006af6 <RCCEx_PLLSAI2_Config+0x72>
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	d825      	bhi.n	8006b14 <RCCEx_PLLSAI2_Config+0x90>
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d002      	beq.n	8006ad2 <RCCEx_PLLSAI2_Config+0x4e>
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d009      	beq.n	8006ae4 <RCCEx_PLLSAI2_Config+0x60>
 8006ad0:	e020      	b.n	8006b14 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006ad2:	4b62      	ldr	r3, [pc, #392]	@ (8006c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d11d      	bne.n	8006b1a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ae2:	e01a      	b.n	8006b1a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006ae4:	4b5d      	ldr	r3, [pc, #372]	@ (8006c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d116      	bne.n	8006b1e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006af4:	e013      	b.n	8006b1e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006af6:	4b59      	ldr	r3, [pc, #356]	@ (8006c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10f      	bne.n	8006b22 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b02:	4b56      	ldr	r3, [pc, #344]	@ (8006c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d109      	bne.n	8006b22 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b12:	e006      	b.n	8006b22 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	73fb      	strb	r3, [r7, #15]
      break;
 8006b18:	e004      	b.n	8006b24 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006b1a:	bf00      	nop
 8006b1c:	e002      	b.n	8006b24 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006b1e:	bf00      	nop
 8006b20:	e000      	b.n	8006b24 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006b22:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d108      	bne.n	8006b3c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8006c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	f023 0203 	bic.w	r2, r3, #3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4949      	ldr	r1, [pc, #292]	@ (8006c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f040 8086 	bne.w	8006c50 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006b44:	4b45      	ldr	r3, [pc, #276]	@ (8006c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a44      	ldr	r2, [pc, #272]	@ (8006c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b50:	f7fb faf2 	bl	8002138 <HAL_GetTick>
 8006b54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b56:	e009      	b.n	8006b6c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b58:	f7fb faee 	bl	8002138 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d902      	bls.n	8006b6c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	73fb      	strb	r3, [r7, #15]
        break;
 8006b6a:	e005      	b.n	8006b78 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b6c:	4b3b      	ldr	r3, [pc, #236]	@ (8006c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1ef      	bne.n	8006b58 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d168      	bne.n	8006c50 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d113      	bne.n	8006bac <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b84:	4b35      	ldr	r3, [pc, #212]	@ (8006c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b86:	695a      	ldr	r2, [r3, #20]
 8006b88:	4b35      	ldr	r3, [pc, #212]	@ (8006c60 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6892      	ldr	r2, [r2, #8]
 8006b90:	0211      	lsls	r1, r2, #8
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	68d2      	ldr	r2, [r2, #12]
 8006b96:	06d2      	lsls	r2, r2, #27
 8006b98:	4311      	orrs	r1, r2
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	6852      	ldr	r2, [r2, #4]
 8006b9e:	3a01      	subs	r2, #1
 8006ba0:	0112      	lsls	r2, r2, #4
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	492d      	ldr	r1, [pc, #180]	@ (8006c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	614b      	str	r3, [r1, #20]
 8006baa:	e02d      	b.n	8006c08 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d115      	bne.n	8006bde <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8006c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bb4:	695a      	ldr	r2, [r3, #20]
 8006bb6:	4b2b      	ldr	r3, [pc, #172]	@ (8006c64 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006bb8:	4013      	ands	r3, r2
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6892      	ldr	r2, [r2, #8]
 8006bbe:	0211      	lsls	r1, r2, #8
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	6912      	ldr	r2, [r2, #16]
 8006bc4:	0852      	lsrs	r2, r2, #1
 8006bc6:	3a01      	subs	r2, #1
 8006bc8:	0552      	lsls	r2, r2, #21
 8006bca:	4311      	orrs	r1, r2
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	6852      	ldr	r2, [r2, #4]
 8006bd0:	3a01      	subs	r2, #1
 8006bd2:	0112      	lsls	r2, r2, #4
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	4921      	ldr	r1, [pc, #132]	@ (8006c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	614b      	str	r3, [r1, #20]
 8006bdc:	e014      	b.n	8006c08 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006bde:	4b1f      	ldr	r3, [pc, #124]	@ (8006c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006be0:	695a      	ldr	r2, [r3, #20]
 8006be2:	4b21      	ldr	r3, [pc, #132]	@ (8006c68 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6892      	ldr	r2, [r2, #8]
 8006bea:	0211      	lsls	r1, r2, #8
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	6952      	ldr	r2, [r2, #20]
 8006bf0:	0852      	lsrs	r2, r2, #1
 8006bf2:	3a01      	subs	r2, #1
 8006bf4:	0652      	lsls	r2, r2, #25
 8006bf6:	4311      	orrs	r1, r2
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	6852      	ldr	r2, [r2, #4]
 8006bfc:	3a01      	subs	r2, #1
 8006bfe:	0112      	lsls	r2, r2, #4
 8006c00:	430a      	orrs	r2, r1
 8006c02:	4916      	ldr	r1, [pc, #88]	@ (8006c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006c08:	4b14      	ldr	r3, [pc, #80]	@ (8006c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a13      	ldr	r2, [pc, #76]	@ (8006c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c14:	f7fb fa90 	bl	8002138 <HAL_GetTick>
 8006c18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c1a:	e009      	b.n	8006c30 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006c1c:	f7fb fa8c 	bl	8002138 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d902      	bls.n	8006c30 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	73fb      	strb	r3, [r7, #15]
          break;
 8006c2e:	e005      	b.n	8006c3c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c30:	4b0a      	ldr	r3, [pc, #40]	@ (8006c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d0ef      	beq.n	8006c1c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d106      	bne.n	8006c50 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006c42:	4b06      	ldr	r3, [pc, #24]	@ (8006c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c44:	695a      	ldr	r2, [r3, #20]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	4904      	ldr	r1, [pc, #16]	@ (8006c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	40021000 	.word	0x40021000
 8006c60:	07ff800f 	.word	0x07ff800f
 8006c64:	ff9f800f 	.word	0xff9f800f
 8006c68:	f9ff800f 	.word	0xf9ff800f

08006c6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e095      	b.n	8006daa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d108      	bne.n	8006c98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c8e:	d009      	beq.n	8006ca4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	61da      	str	r2, [r3, #28]
 8006c96:	e005      	b.n	8006ca4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d106      	bne.n	8006cc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7fa fd34 	bl	800172c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ce4:	d902      	bls.n	8006cec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	e002      	b.n	8006cf2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006cec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006cf0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006cfa:	d007      	beq.n	8006d0c <HAL_SPI_Init+0xa0>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d04:	d002      	beq.n	8006d0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006d1c:	431a      	orrs	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	f003 0302 	and.w	r3, r3, #2
 8006d26:	431a      	orrs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	431a      	orrs	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d44:	431a      	orrs	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d4e:	ea42 0103 	orr.w	r1, r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d56:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	0c1b      	lsrs	r3, r3, #16
 8006d68:	f003 0204 	and.w	r2, r3, #4
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d70:	f003 0310 	and.w	r3, r3, #16
 8006d74:	431a      	orrs	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d7a:	f003 0308 	and.w	r3, r3, #8
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006d88:	ea42 0103 	orr.w	r1, r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b082      	sub	sp, #8
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e049      	b.n	8006e58 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d106      	bne.n	8006dde <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f841 	bl	8006e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2202      	movs	r2, #2
 8006de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	3304      	adds	r3, #4
 8006dee:	4619      	mov	r1, r3
 8006df0:	4610      	mov	r0, r2
 8006df2:	f000 f9d9 	bl	80071a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d001      	beq.n	8006e8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e04f      	b.n	8006f2c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68da      	ldr	r2, [r3, #12]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f042 0201 	orr.w	r2, r2, #1
 8006ea2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a23      	ldr	r2, [pc, #140]	@ (8006f38 <HAL_TIM_Base_Start_IT+0xc4>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d01d      	beq.n	8006eea <HAL_TIM_Base_Start_IT+0x76>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eb6:	d018      	beq.n	8006eea <HAL_TIM_Base_Start_IT+0x76>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8006f3c <HAL_TIM_Base_Start_IT+0xc8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d013      	beq.n	8006eea <HAL_TIM_Base_Start_IT+0x76>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8006f40 <HAL_TIM_Base_Start_IT+0xcc>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d00e      	beq.n	8006eea <HAL_TIM_Base_Start_IT+0x76>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8006f44 <HAL_TIM_Base_Start_IT+0xd0>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d009      	beq.n	8006eea <HAL_TIM_Base_Start_IT+0x76>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a1b      	ldr	r2, [pc, #108]	@ (8006f48 <HAL_TIM_Base_Start_IT+0xd4>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d004      	beq.n	8006eea <HAL_TIM_Base_Start_IT+0x76>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a19      	ldr	r2, [pc, #100]	@ (8006f4c <HAL_TIM_Base_Start_IT+0xd8>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d115      	bne.n	8006f16 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	689a      	ldr	r2, [r3, #8]
 8006ef0:	4b17      	ldr	r3, [pc, #92]	@ (8006f50 <HAL_TIM_Base_Start_IT+0xdc>)
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2b06      	cmp	r3, #6
 8006efa:	d015      	beq.n	8006f28 <HAL_TIM_Base_Start_IT+0xb4>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f02:	d011      	beq.n	8006f28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f042 0201 	orr.w	r2, r2, #1
 8006f12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f14:	e008      	b.n	8006f28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f042 0201 	orr.w	r2, r2, #1
 8006f24:	601a      	str	r2, [r3, #0]
 8006f26:	e000      	b.n	8006f2a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	40012c00 	.word	0x40012c00
 8006f3c:	40000400 	.word	0x40000400
 8006f40:	40000800 	.word	0x40000800
 8006f44:	40000c00 	.word	0x40000c00
 8006f48:	40013400 	.word	0x40013400
 8006f4c:	40014000 	.word	0x40014000
 8006f50:	00010007 	.word	0x00010007

08006f54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d020      	beq.n	8006fb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f003 0302 	and.w	r3, r3, #2
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d01b      	beq.n	8006fb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f06f 0202 	mvn.w	r2, #2
 8006f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	f003 0303 	and.w	r3, r3, #3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f8e4 	bl	800716c <HAL_TIM_IC_CaptureCallback>
 8006fa4:	e005      	b.n	8006fb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f8d6 	bl	8007158 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f8e7 	bl	8007180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	f003 0304 	and.w	r3, r3, #4
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d020      	beq.n	8007004 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f003 0304 	and.w	r3, r3, #4
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d01b      	beq.n	8007004 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f06f 0204 	mvn.w	r2, #4
 8006fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2202      	movs	r2, #2
 8006fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f8be 	bl	800716c <HAL_TIM_IC_CaptureCallback>
 8006ff0:	e005      	b.n	8006ffe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f8b0 	bl	8007158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f8c1 	bl	8007180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	f003 0308 	and.w	r3, r3, #8
 800700a:	2b00      	cmp	r3, #0
 800700c:	d020      	beq.n	8007050 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f003 0308 	and.w	r3, r3, #8
 8007014:	2b00      	cmp	r3, #0
 8007016:	d01b      	beq.n	8007050 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f06f 0208 	mvn.w	r2, #8
 8007020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2204      	movs	r2, #4
 8007026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	f003 0303 	and.w	r3, r3, #3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d003      	beq.n	800703e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f898 	bl	800716c <HAL_TIM_IC_CaptureCallback>
 800703c:	e005      	b.n	800704a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f88a 	bl	8007158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f89b 	bl	8007180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f003 0310 	and.w	r3, r3, #16
 8007056:	2b00      	cmp	r3, #0
 8007058:	d020      	beq.n	800709c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f003 0310 	and.w	r3, r3, #16
 8007060:	2b00      	cmp	r3, #0
 8007062:	d01b      	beq.n	800709c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f06f 0210 	mvn.w	r2, #16
 800706c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2208      	movs	r2, #8
 8007072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800707e:	2b00      	cmp	r3, #0
 8007080:	d003      	beq.n	800708a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f872 	bl	800716c <HAL_TIM_IC_CaptureCallback>
 8007088:	e005      	b.n	8007096 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f864 	bl	8007158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f875 	bl	8007180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00c      	beq.n	80070c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d007      	beq.n	80070c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f06f 0201 	mvn.w	r2, #1
 80070b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7fa f908 	bl	80012d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00c      	beq.n	80070e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d007      	beq.n	80070e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80070dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f906 	bl	80072f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00c      	beq.n	8007108 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d007      	beq.n	8007108 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f8fe 	bl	8007304 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00c      	beq.n	800712c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007118:	2b00      	cmp	r3, #0
 800711a:	d007      	beq.n	800712c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f834 	bl	8007194 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	f003 0320 	and.w	r3, r3, #32
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00c      	beq.n	8007150 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f003 0320 	and.w	r3, r3, #32
 800713c:	2b00      	cmp	r3, #0
 800713e:	d007      	beq.n	8007150 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f06f 0220 	mvn.w	r2, #32
 8007148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f8c6 	bl	80072dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007150:	bf00      	nop
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a40      	ldr	r2, [pc, #256]	@ (80072bc <TIM_Base_SetConfig+0x114>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d013      	beq.n	80071e8 <TIM_Base_SetConfig+0x40>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071c6:	d00f      	beq.n	80071e8 <TIM_Base_SetConfig+0x40>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a3d      	ldr	r2, [pc, #244]	@ (80072c0 <TIM_Base_SetConfig+0x118>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d00b      	beq.n	80071e8 <TIM_Base_SetConfig+0x40>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a3c      	ldr	r2, [pc, #240]	@ (80072c4 <TIM_Base_SetConfig+0x11c>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d007      	beq.n	80071e8 <TIM_Base_SetConfig+0x40>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a3b      	ldr	r2, [pc, #236]	@ (80072c8 <TIM_Base_SetConfig+0x120>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d003      	beq.n	80071e8 <TIM_Base_SetConfig+0x40>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a3a      	ldr	r2, [pc, #232]	@ (80072cc <TIM_Base_SetConfig+0x124>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d108      	bne.n	80071fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a2f      	ldr	r2, [pc, #188]	@ (80072bc <TIM_Base_SetConfig+0x114>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d01f      	beq.n	8007242 <TIM_Base_SetConfig+0x9a>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007208:	d01b      	beq.n	8007242 <TIM_Base_SetConfig+0x9a>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a2c      	ldr	r2, [pc, #176]	@ (80072c0 <TIM_Base_SetConfig+0x118>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d017      	beq.n	8007242 <TIM_Base_SetConfig+0x9a>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a2b      	ldr	r2, [pc, #172]	@ (80072c4 <TIM_Base_SetConfig+0x11c>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d013      	beq.n	8007242 <TIM_Base_SetConfig+0x9a>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a2a      	ldr	r2, [pc, #168]	@ (80072c8 <TIM_Base_SetConfig+0x120>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d00f      	beq.n	8007242 <TIM_Base_SetConfig+0x9a>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a29      	ldr	r2, [pc, #164]	@ (80072cc <TIM_Base_SetConfig+0x124>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d00b      	beq.n	8007242 <TIM_Base_SetConfig+0x9a>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a28      	ldr	r2, [pc, #160]	@ (80072d0 <TIM_Base_SetConfig+0x128>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d007      	beq.n	8007242 <TIM_Base_SetConfig+0x9a>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a27      	ldr	r2, [pc, #156]	@ (80072d4 <TIM_Base_SetConfig+0x12c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d003      	beq.n	8007242 <TIM_Base_SetConfig+0x9a>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a26      	ldr	r2, [pc, #152]	@ (80072d8 <TIM_Base_SetConfig+0x130>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d108      	bne.n	8007254 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	4313      	orrs	r3, r2
 8007252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	4313      	orrs	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	689a      	ldr	r2, [r3, #8]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a10      	ldr	r2, [pc, #64]	@ (80072bc <TIM_Base_SetConfig+0x114>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d00f      	beq.n	80072a0 <TIM_Base_SetConfig+0xf8>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a12      	ldr	r2, [pc, #72]	@ (80072cc <TIM_Base_SetConfig+0x124>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d00b      	beq.n	80072a0 <TIM_Base_SetConfig+0xf8>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a11      	ldr	r2, [pc, #68]	@ (80072d0 <TIM_Base_SetConfig+0x128>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d007      	beq.n	80072a0 <TIM_Base_SetConfig+0xf8>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a10      	ldr	r2, [pc, #64]	@ (80072d4 <TIM_Base_SetConfig+0x12c>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d003      	beq.n	80072a0 <TIM_Base_SetConfig+0xf8>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a0f      	ldr	r2, [pc, #60]	@ (80072d8 <TIM_Base_SetConfig+0x130>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d103      	bne.n	80072a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	691a      	ldr	r2, [r3, #16]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	615a      	str	r2, [r3, #20]
}
 80072ae:	bf00      	nop
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	40012c00 	.word	0x40012c00
 80072c0:	40000400 	.word	0x40000400
 80072c4:	40000800 	.word	0x40000800
 80072c8:	40000c00 	.word	0x40000c00
 80072cc:	40013400 	.word	0x40013400
 80072d0:	40014000 	.word	0x40014000
 80072d4:	40014400 	.word	0x40014400
 80072d8:	40014800 	.word	0x40014800

080072dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e042      	b.n	80073b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007330:	2b00      	cmp	r3, #0
 8007332:	d106      	bne.n	8007342 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7fa fa39 	bl	80017b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2224      	movs	r2, #36	@ 0x24
 8007346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f022 0201 	bic.w	r2, r2, #1
 8007358:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735e:	2b00      	cmp	r3, #0
 8007360:	d002      	beq.n	8007368 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fc7c 	bl	8007c60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f97d 	bl	8007668 <UART_SetConfig>
 800736e:	4603      	mov	r3, r0
 8007370:	2b01      	cmp	r3, #1
 8007372:	d101      	bne.n	8007378 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e01b      	b.n	80073b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007386:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689a      	ldr	r2, [r3, #8]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007396:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f042 0201 	orr.w	r2, r2, #1
 80073a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fcfb 	bl	8007da4 <UART_CheckIdleState>
 80073ae:	4603      	mov	r3, r0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b08a      	sub	sp, #40	@ 0x28
 80073bc:	af02      	add	r7, sp, #8
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	603b      	str	r3, [r7, #0]
 80073c4:	4613      	mov	r3, r2
 80073c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073ce:	2b20      	cmp	r3, #32
 80073d0:	d17b      	bne.n	80074ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <HAL_UART_Transmit+0x26>
 80073d8:	88fb      	ldrh	r3, [r7, #6]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d101      	bne.n	80073e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e074      	b.n	80074cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2221      	movs	r2, #33	@ 0x21
 80073ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073f2:	f7fa fea1 	bl	8002138 <HAL_GetTick>
 80073f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	88fa      	ldrh	r2, [r7, #6]
 80073fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	88fa      	ldrh	r2, [r7, #6]
 8007404:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007410:	d108      	bne.n	8007424 <HAL_UART_Transmit+0x6c>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d104      	bne.n	8007424 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800741a:	2300      	movs	r3, #0
 800741c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	61bb      	str	r3, [r7, #24]
 8007422:	e003      	b.n	800742c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007428:	2300      	movs	r3, #0
 800742a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800742c:	e030      	b.n	8007490 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2200      	movs	r2, #0
 8007436:	2180      	movs	r1, #128	@ 0x80
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 fd5d 	bl	8007ef8 <UART_WaitOnFlagUntilTimeout>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d005      	beq.n	8007450 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2220      	movs	r2, #32
 8007448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e03d      	b.n	80074cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10b      	bne.n	800746e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	881a      	ldrh	r2, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007462:	b292      	uxth	r2, r2
 8007464:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	3302      	adds	r3, #2
 800746a:	61bb      	str	r3, [r7, #24]
 800746c:	e007      	b.n	800747e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	781a      	ldrb	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	3301      	adds	r3, #1
 800747c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007484:	b29b      	uxth	r3, r3
 8007486:	3b01      	subs	r3, #1
 8007488:	b29a      	uxth	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007496:	b29b      	uxth	r3, r3
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1c8      	bne.n	800742e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	2200      	movs	r2, #0
 80074a4:	2140      	movs	r1, #64	@ 0x40
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f000 fd26 	bl	8007ef8 <UART_WaitOnFlagUntilTimeout>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d005      	beq.n	80074be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2220      	movs	r2, #32
 80074b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e006      	b.n	80074cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2220      	movs	r2, #32
 80074c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	e000      	b.n	80074cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80074ca:	2302      	movs	r3, #2
  }
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3720      	adds	r7, #32
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b08a      	sub	sp, #40	@ 0x28
 80074d8:	af02      	add	r7, sp, #8
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	603b      	str	r3, [r7, #0]
 80074e0:	4613      	mov	r3, r2
 80074e2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074ea:	2b20      	cmp	r3, #32
 80074ec:	f040 80b6 	bne.w	800765c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d002      	beq.n	80074fc <HAL_UART_Receive+0x28>
 80074f6:	88fb      	ldrh	r3, [r7, #6]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d101      	bne.n	8007500 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e0ae      	b.n	800765e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2222      	movs	r2, #34	@ 0x22
 800750c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007516:	f7fa fe0f 	bl	8002138 <HAL_GetTick>
 800751a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	88fa      	ldrh	r2, [r7, #6]
 8007520:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	88fa      	ldrh	r2, [r7, #6]
 8007528:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007534:	d10e      	bne.n	8007554 <HAL_UART_Receive+0x80>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d105      	bne.n	800754a <HAL_UART_Receive+0x76>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007544:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007548:	e02d      	b.n	80075a6 <HAL_UART_Receive+0xd2>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	22ff      	movs	r2, #255	@ 0xff
 800754e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007552:	e028      	b.n	80075a6 <HAL_UART_Receive+0xd2>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10d      	bne.n	8007578 <HAL_UART_Receive+0xa4>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d104      	bne.n	800756e <HAL_UART_Receive+0x9a>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	22ff      	movs	r2, #255	@ 0xff
 8007568:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800756c:	e01b      	b.n	80075a6 <HAL_UART_Receive+0xd2>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	227f      	movs	r2, #127	@ 0x7f
 8007572:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007576:	e016      	b.n	80075a6 <HAL_UART_Receive+0xd2>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007580:	d10d      	bne.n	800759e <HAL_UART_Receive+0xca>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d104      	bne.n	8007594 <HAL_UART_Receive+0xc0>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	227f      	movs	r2, #127	@ 0x7f
 800758e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007592:	e008      	b.n	80075a6 <HAL_UART_Receive+0xd2>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	223f      	movs	r2, #63	@ 0x3f
 8007598:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800759c:	e003      	b.n	80075a6 <HAL_UART_Receive+0xd2>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80075ac:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075b6:	d108      	bne.n	80075ca <HAL_UART_Receive+0xf6>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d104      	bne.n	80075ca <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80075c0:	2300      	movs	r3, #0
 80075c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	61bb      	str	r3, [r7, #24]
 80075c8:	e003      	b.n	80075d2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075ce:	2300      	movs	r3, #0
 80075d0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80075d2:	e037      	b.n	8007644 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2200      	movs	r2, #0
 80075dc:	2120      	movs	r1, #32
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 fc8a 	bl	8007ef8 <UART_WaitOnFlagUntilTimeout>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d005      	beq.n	80075f6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2220      	movs	r2, #32
 80075ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e033      	b.n	800765e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10c      	bne.n	8007616 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007602:	b29a      	uxth	r2, r3
 8007604:	8a7b      	ldrh	r3, [r7, #18]
 8007606:	4013      	ands	r3, r2
 8007608:	b29a      	uxth	r2, r3
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	3302      	adds	r3, #2
 8007612:	61bb      	str	r3, [r7, #24]
 8007614:	e00d      	b.n	8007632 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800761c:	b29b      	uxth	r3, r3
 800761e:	b2da      	uxtb	r2, r3
 8007620:	8a7b      	ldrh	r3, [r7, #18]
 8007622:	b2db      	uxtb	r3, r3
 8007624:	4013      	ands	r3, r2
 8007626:	b2da      	uxtb	r2, r3
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	3301      	adds	r3, #1
 8007630:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007638:	b29b      	uxth	r3, r3
 800763a:	3b01      	subs	r3, #1
 800763c:	b29a      	uxth	r2, r3
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800764a:	b29b      	uxth	r3, r3
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1c1      	bne.n	80075d4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2220      	movs	r2, #32
 8007654:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8007658:	2300      	movs	r3, #0
 800765a:	e000      	b.n	800765e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800765c:	2302      	movs	r3, #2
  }
}
 800765e:	4618      	mov	r0, r3
 8007660:	3720      	adds	r7, #32
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
	...

08007668 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800766c:	b08c      	sub	sp, #48	@ 0x30
 800766e:	af00      	add	r7, sp, #0
 8007670:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	431a      	orrs	r2, r3
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	431a      	orrs	r2, r3
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	4313      	orrs	r3, r2
 800768e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	4baa      	ldr	r3, [pc, #680]	@ (8007940 <UART_SetConfig+0x2d8>)
 8007698:	4013      	ands	r3, r2
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	6812      	ldr	r2, [r2, #0]
 800769e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076a0:	430b      	orrs	r3, r1
 80076a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	68da      	ldr	r2, [r3, #12]
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a9f      	ldr	r2, [pc, #636]	@ (8007944 <UART_SetConfig+0x2dc>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d004      	beq.n	80076d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076d0:	4313      	orrs	r3, r2
 80076d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80076de:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	6812      	ldr	r2, [r2, #0]
 80076e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076e8:	430b      	orrs	r3, r1
 80076ea:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f2:	f023 010f 	bic.w	r1, r3, #15
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a90      	ldr	r2, [pc, #576]	@ (8007948 <UART_SetConfig+0x2e0>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d125      	bne.n	8007758 <UART_SetConfig+0xf0>
 800770c:	4b8f      	ldr	r3, [pc, #572]	@ (800794c <UART_SetConfig+0x2e4>)
 800770e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007712:	f003 0303 	and.w	r3, r3, #3
 8007716:	2b03      	cmp	r3, #3
 8007718:	d81a      	bhi.n	8007750 <UART_SetConfig+0xe8>
 800771a:	a201      	add	r2, pc, #4	@ (adr r2, 8007720 <UART_SetConfig+0xb8>)
 800771c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007720:	08007731 	.word	0x08007731
 8007724:	08007741 	.word	0x08007741
 8007728:	08007739 	.word	0x08007739
 800772c:	08007749 	.word	0x08007749
 8007730:	2301      	movs	r3, #1
 8007732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007736:	e116      	b.n	8007966 <UART_SetConfig+0x2fe>
 8007738:	2302      	movs	r3, #2
 800773a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800773e:	e112      	b.n	8007966 <UART_SetConfig+0x2fe>
 8007740:	2304      	movs	r3, #4
 8007742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007746:	e10e      	b.n	8007966 <UART_SetConfig+0x2fe>
 8007748:	2308      	movs	r3, #8
 800774a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800774e:	e10a      	b.n	8007966 <UART_SetConfig+0x2fe>
 8007750:	2310      	movs	r3, #16
 8007752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007756:	e106      	b.n	8007966 <UART_SetConfig+0x2fe>
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a7c      	ldr	r2, [pc, #496]	@ (8007950 <UART_SetConfig+0x2e8>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d138      	bne.n	80077d4 <UART_SetConfig+0x16c>
 8007762:	4b7a      	ldr	r3, [pc, #488]	@ (800794c <UART_SetConfig+0x2e4>)
 8007764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007768:	f003 030c 	and.w	r3, r3, #12
 800776c:	2b0c      	cmp	r3, #12
 800776e:	d82d      	bhi.n	80077cc <UART_SetConfig+0x164>
 8007770:	a201      	add	r2, pc, #4	@ (adr r2, 8007778 <UART_SetConfig+0x110>)
 8007772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007776:	bf00      	nop
 8007778:	080077ad 	.word	0x080077ad
 800777c:	080077cd 	.word	0x080077cd
 8007780:	080077cd 	.word	0x080077cd
 8007784:	080077cd 	.word	0x080077cd
 8007788:	080077bd 	.word	0x080077bd
 800778c:	080077cd 	.word	0x080077cd
 8007790:	080077cd 	.word	0x080077cd
 8007794:	080077cd 	.word	0x080077cd
 8007798:	080077b5 	.word	0x080077b5
 800779c:	080077cd 	.word	0x080077cd
 80077a0:	080077cd 	.word	0x080077cd
 80077a4:	080077cd 	.word	0x080077cd
 80077a8:	080077c5 	.word	0x080077c5
 80077ac:	2300      	movs	r3, #0
 80077ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077b2:	e0d8      	b.n	8007966 <UART_SetConfig+0x2fe>
 80077b4:	2302      	movs	r3, #2
 80077b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ba:	e0d4      	b.n	8007966 <UART_SetConfig+0x2fe>
 80077bc:	2304      	movs	r3, #4
 80077be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077c2:	e0d0      	b.n	8007966 <UART_SetConfig+0x2fe>
 80077c4:	2308      	movs	r3, #8
 80077c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ca:	e0cc      	b.n	8007966 <UART_SetConfig+0x2fe>
 80077cc:	2310      	movs	r3, #16
 80077ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077d2:	e0c8      	b.n	8007966 <UART_SetConfig+0x2fe>
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a5e      	ldr	r2, [pc, #376]	@ (8007954 <UART_SetConfig+0x2ec>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d125      	bne.n	800782a <UART_SetConfig+0x1c2>
 80077de:	4b5b      	ldr	r3, [pc, #364]	@ (800794c <UART_SetConfig+0x2e4>)
 80077e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80077e8:	2b30      	cmp	r3, #48	@ 0x30
 80077ea:	d016      	beq.n	800781a <UART_SetConfig+0x1b2>
 80077ec:	2b30      	cmp	r3, #48	@ 0x30
 80077ee:	d818      	bhi.n	8007822 <UART_SetConfig+0x1ba>
 80077f0:	2b20      	cmp	r3, #32
 80077f2:	d00a      	beq.n	800780a <UART_SetConfig+0x1a2>
 80077f4:	2b20      	cmp	r3, #32
 80077f6:	d814      	bhi.n	8007822 <UART_SetConfig+0x1ba>
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <UART_SetConfig+0x19a>
 80077fc:	2b10      	cmp	r3, #16
 80077fe:	d008      	beq.n	8007812 <UART_SetConfig+0x1aa>
 8007800:	e00f      	b.n	8007822 <UART_SetConfig+0x1ba>
 8007802:	2300      	movs	r3, #0
 8007804:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007808:	e0ad      	b.n	8007966 <UART_SetConfig+0x2fe>
 800780a:	2302      	movs	r3, #2
 800780c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007810:	e0a9      	b.n	8007966 <UART_SetConfig+0x2fe>
 8007812:	2304      	movs	r3, #4
 8007814:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007818:	e0a5      	b.n	8007966 <UART_SetConfig+0x2fe>
 800781a:	2308      	movs	r3, #8
 800781c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007820:	e0a1      	b.n	8007966 <UART_SetConfig+0x2fe>
 8007822:	2310      	movs	r3, #16
 8007824:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007828:	e09d      	b.n	8007966 <UART_SetConfig+0x2fe>
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a4a      	ldr	r2, [pc, #296]	@ (8007958 <UART_SetConfig+0x2f0>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d125      	bne.n	8007880 <UART_SetConfig+0x218>
 8007834:	4b45      	ldr	r3, [pc, #276]	@ (800794c <UART_SetConfig+0x2e4>)
 8007836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800783a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800783e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007840:	d016      	beq.n	8007870 <UART_SetConfig+0x208>
 8007842:	2bc0      	cmp	r3, #192	@ 0xc0
 8007844:	d818      	bhi.n	8007878 <UART_SetConfig+0x210>
 8007846:	2b80      	cmp	r3, #128	@ 0x80
 8007848:	d00a      	beq.n	8007860 <UART_SetConfig+0x1f8>
 800784a:	2b80      	cmp	r3, #128	@ 0x80
 800784c:	d814      	bhi.n	8007878 <UART_SetConfig+0x210>
 800784e:	2b00      	cmp	r3, #0
 8007850:	d002      	beq.n	8007858 <UART_SetConfig+0x1f0>
 8007852:	2b40      	cmp	r3, #64	@ 0x40
 8007854:	d008      	beq.n	8007868 <UART_SetConfig+0x200>
 8007856:	e00f      	b.n	8007878 <UART_SetConfig+0x210>
 8007858:	2300      	movs	r3, #0
 800785a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800785e:	e082      	b.n	8007966 <UART_SetConfig+0x2fe>
 8007860:	2302      	movs	r3, #2
 8007862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007866:	e07e      	b.n	8007966 <UART_SetConfig+0x2fe>
 8007868:	2304      	movs	r3, #4
 800786a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800786e:	e07a      	b.n	8007966 <UART_SetConfig+0x2fe>
 8007870:	2308      	movs	r3, #8
 8007872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007876:	e076      	b.n	8007966 <UART_SetConfig+0x2fe>
 8007878:	2310      	movs	r3, #16
 800787a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800787e:	e072      	b.n	8007966 <UART_SetConfig+0x2fe>
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a35      	ldr	r2, [pc, #212]	@ (800795c <UART_SetConfig+0x2f4>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d12a      	bne.n	80078e0 <UART_SetConfig+0x278>
 800788a:	4b30      	ldr	r3, [pc, #192]	@ (800794c <UART_SetConfig+0x2e4>)
 800788c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007890:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007894:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007898:	d01a      	beq.n	80078d0 <UART_SetConfig+0x268>
 800789a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800789e:	d81b      	bhi.n	80078d8 <UART_SetConfig+0x270>
 80078a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078a4:	d00c      	beq.n	80078c0 <UART_SetConfig+0x258>
 80078a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078aa:	d815      	bhi.n	80078d8 <UART_SetConfig+0x270>
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d003      	beq.n	80078b8 <UART_SetConfig+0x250>
 80078b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078b4:	d008      	beq.n	80078c8 <UART_SetConfig+0x260>
 80078b6:	e00f      	b.n	80078d8 <UART_SetConfig+0x270>
 80078b8:	2300      	movs	r3, #0
 80078ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078be:	e052      	b.n	8007966 <UART_SetConfig+0x2fe>
 80078c0:	2302      	movs	r3, #2
 80078c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078c6:	e04e      	b.n	8007966 <UART_SetConfig+0x2fe>
 80078c8:	2304      	movs	r3, #4
 80078ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ce:	e04a      	b.n	8007966 <UART_SetConfig+0x2fe>
 80078d0:	2308      	movs	r3, #8
 80078d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078d6:	e046      	b.n	8007966 <UART_SetConfig+0x2fe>
 80078d8:	2310      	movs	r3, #16
 80078da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078de:	e042      	b.n	8007966 <UART_SetConfig+0x2fe>
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a17      	ldr	r2, [pc, #92]	@ (8007944 <UART_SetConfig+0x2dc>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d13a      	bne.n	8007960 <UART_SetConfig+0x2f8>
 80078ea:	4b18      	ldr	r3, [pc, #96]	@ (800794c <UART_SetConfig+0x2e4>)
 80078ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80078f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078f8:	d01a      	beq.n	8007930 <UART_SetConfig+0x2c8>
 80078fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078fe:	d81b      	bhi.n	8007938 <UART_SetConfig+0x2d0>
 8007900:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007904:	d00c      	beq.n	8007920 <UART_SetConfig+0x2b8>
 8007906:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800790a:	d815      	bhi.n	8007938 <UART_SetConfig+0x2d0>
 800790c:	2b00      	cmp	r3, #0
 800790e:	d003      	beq.n	8007918 <UART_SetConfig+0x2b0>
 8007910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007914:	d008      	beq.n	8007928 <UART_SetConfig+0x2c0>
 8007916:	e00f      	b.n	8007938 <UART_SetConfig+0x2d0>
 8007918:	2300      	movs	r3, #0
 800791a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800791e:	e022      	b.n	8007966 <UART_SetConfig+0x2fe>
 8007920:	2302      	movs	r3, #2
 8007922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007926:	e01e      	b.n	8007966 <UART_SetConfig+0x2fe>
 8007928:	2304      	movs	r3, #4
 800792a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800792e:	e01a      	b.n	8007966 <UART_SetConfig+0x2fe>
 8007930:	2308      	movs	r3, #8
 8007932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007936:	e016      	b.n	8007966 <UART_SetConfig+0x2fe>
 8007938:	2310      	movs	r3, #16
 800793a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800793e:	e012      	b.n	8007966 <UART_SetConfig+0x2fe>
 8007940:	cfff69f3 	.word	0xcfff69f3
 8007944:	40008000 	.word	0x40008000
 8007948:	40013800 	.word	0x40013800
 800794c:	40021000 	.word	0x40021000
 8007950:	40004400 	.word	0x40004400
 8007954:	40004800 	.word	0x40004800
 8007958:	40004c00 	.word	0x40004c00
 800795c:	40005000 	.word	0x40005000
 8007960:	2310      	movs	r3, #16
 8007962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4aae      	ldr	r2, [pc, #696]	@ (8007c24 <UART_SetConfig+0x5bc>)
 800796c:	4293      	cmp	r3, r2
 800796e:	f040 8097 	bne.w	8007aa0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007972:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007976:	2b08      	cmp	r3, #8
 8007978:	d823      	bhi.n	80079c2 <UART_SetConfig+0x35a>
 800797a:	a201      	add	r2, pc, #4	@ (adr r2, 8007980 <UART_SetConfig+0x318>)
 800797c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007980:	080079a5 	.word	0x080079a5
 8007984:	080079c3 	.word	0x080079c3
 8007988:	080079ad 	.word	0x080079ad
 800798c:	080079c3 	.word	0x080079c3
 8007990:	080079b3 	.word	0x080079b3
 8007994:	080079c3 	.word	0x080079c3
 8007998:	080079c3 	.word	0x080079c3
 800799c:	080079c3 	.word	0x080079c3
 80079a0:	080079bb 	.word	0x080079bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079a4:	f7fe fb1c 	bl	8005fe0 <HAL_RCC_GetPCLK1Freq>
 80079a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079aa:	e010      	b.n	80079ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079ac:	4b9e      	ldr	r3, [pc, #632]	@ (8007c28 <UART_SetConfig+0x5c0>)
 80079ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80079b0:	e00d      	b.n	80079ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079b2:	f7fe fa7d 	bl	8005eb0 <HAL_RCC_GetSysClockFreq>
 80079b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079b8:	e009      	b.n	80079ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80079c0:	e005      	b.n	80079ce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80079cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80079ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 8130 	beq.w	8007c36 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079da:	4a94      	ldr	r2, [pc, #592]	@ (8007c2c <UART_SetConfig+0x5c4>)
 80079dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079e0:	461a      	mov	r2, r3
 80079e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80079e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	4613      	mov	r3, r2
 80079f0:	005b      	lsls	r3, r3, #1
 80079f2:	4413      	add	r3, r2
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d305      	bcc.n	8007a06 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a00:	69ba      	ldr	r2, [r7, #24]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d903      	bls.n	8007a0e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a0c:	e113      	b.n	8007c36 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a10:	2200      	movs	r2, #0
 8007a12:	60bb      	str	r3, [r7, #8]
 8007a14:	60fa      	str	r2, [r7, #12]
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a1a:	4a84      	ldr	r2, [pc, #528]	@ (8007c2c <UART_SetConfig+0x5c4>)
 8007a1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	2200      	movs	r2, #0
 8007a24:	603b      	str	r3, [r7, #0]
 8007a26:	607a      	str	r2, [r7, #4]
 8007a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a30:	f7f8 fc36 	bl	80002a0 <__aeabi_uldivmod>
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	4610      	mov	r0, r2
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	f04f 0200 	mov.w	r2, #0
 8007a40:	f04f 0300 	mov.w	r3, #0
 8007a44:	020b      	lsls	r3, r1, #8
 8007a46:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a4a:	0202      	lsls	r2, r0, #8
 8007a4c:	6979      	ldr	r1, [r7, #20]
 8007a4e:	6849      	ldr	r1, [r1, #4]
 8007a50:	0849      	lsrs	r1, r1, #1
 8007a52:	2000      	movs	r0, #0
 8007a54:	460c      	mov	r4, r1
 8007a56:	4605      	mov	r5, r0
 8007a58:	eb12 0804 	adds.w	r8, r2, r4
 8007a5c:	eb43 0905 	adc.w	r9, r3, r5
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	469a      	mov	sl, r3
 8007a68:	4693      	mov	fp, r2
 8007a6a:	4652      	mov	r2, sl
 8007a6c:	465b      	mov	r3, fp
 8007a6e:	4640      	mov	r0, r8
 8007a70:	4649      	mov	r1, r9
 8007a72:	f7f8 fc15 	bl	80002a0 <__aeabi_uldivmod>
 8007a76:	4602      	mov	r2, r0
 8007a78:	460b      	mov	r3, r1
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a84:	d308      	bcc.n	8007a98 <UART_SetConfig+0x430>
 8007a86:	6a3b      	ldr	r3, [r7, #32]
 8007a88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a8c:	d204      	bcs.n	8007a98 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6a3a      	ldr	r2, [r7, #32]
 8007a94:	60da      	str	r2, [r3, #12]
 8007a96:	e0ce      	b.n	8007c36 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a9e:	e0ca      	b.n	8007c36 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	69db      	ldr	r3, [r3, #28]
 8007aa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007aa8:	d166      	bne.n	8007b78 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007aaa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007aae:	2b08      	cmp	r3, #8
 8007ab0:	d827      	bhi.n	8007b02 <UART_SetConfig+0x49a>
 8007ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab8 <UART_SetConfig+0x450>)
 8007ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab8:	08007add 	.word	0x08007add
 8007abc:	08007ae5 	.word	0x08007ae5
 8007ac0:	08007aed 	.word	0x08007aed
 8007ac4:	08007b03 	.word	0x08007b03
 8007ac8:	08007af3 	.word	0x08007af3
 8007acc:	08007b03 	.word	0x08007b03
 8007ad0:	08007b03 	.word	0x08007b03
 8007ad4:	08007b03 	.word	0x08007b03
 8007ad8:	08007afb 	.word	0x08007afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007adc:	f7fe fa80 	bl	8005fe0 <HAL_RCC_GetPCLK1Freq>
 8007ae0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ae2:	e014      	b.n	8007b0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ae4:	f7fe fa92 	bl	800600c <HAL_RCC_GetPCLK2Freq>
 8007ae8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007aea:	e010      	b.n	8007b0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007aec:	4b4e      	ldr	r3, [pc, #312]	@ (8007c28 <UART_SetConfig+0x5c0>)
 8007aee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007af0:	e00d      	b.n	8007b0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007af2:	f7fe f9dd 	bl	8005eb0 <HAL_RCC_GetSysClockFreq>
 8007af6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007af8:	e009      	b.n	8007b0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007afa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007afe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b00:	e005      	b.n	8007b0e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007b02:	2300      	movs	r3, #0
 8007b04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007b0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 8090 	beq.w	8007c36 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1a:	4a44      	ldr	r2, [pc, #272]	@ (8007c2c <UART_SetConfig+0x5c4>)
 8007b1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b20:	461a      	mov	r2, r3
 8007b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b24:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b28:	005a      	lsls	r2, r3, #1
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	085b      	lsrs	r3, r3, #1
 8007b30:	441a      	add	r2, r3
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b3a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	2b0f      	cmp	r3, #15
 8007b40:	d916      	bls.n	8007b70 <UART_SetConfig+0x508>
 8007b42:	6a3b      	ldr	r3, [r7, #32]
 8007b44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b48:	d212      	bcs.n	8007b70 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b4a:	6a3b      	ldr	r3, [r7, #32]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	f023 030f 	bic.w	r3, r3, #15
 8007b52:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b54:	6a3b      	ldr	r3, [r7, #32]
 8007b56:	085b      	lsrs	r3, r3, #1
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	f003 0307 	and.w	r3, r3, #7
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	8bfb      	ldrh	r3, [r7, #30]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	8bfa      	ldrh	r2, [r7, #30]
 8007b6c:	60da      	str	r2, [r3, #12]
 8007b6e:	e062      	b.n	8007c36 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007b76:	e05e      	b.n	8007c36 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b78:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b7c:	2b08      	cmp	r3, #8
 8007b7e:	d828      	bhi.n	8007bd2 <UART_SetConfig+0x56a>
 8007b80:	a201      	add	r2, pc, #4	@ (adr r2, 8007b88 <UART_SetConfig+0x520>)
 8007b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b86:	bf00      	nop
 8007b88:	08007bad 	.word	0x08007bad
 8007b8c:	08007bb5 	.word	0x08007bb5
 8007b90:	08007bbd 	.word	0x08007bbd
 8007b94:	08007bd3 	.word	0x08007bd3
 8007b98:	08007bc3 	.word	0x08007bc3
 8007b9c:	08007bd3 	.word	0x08007bd3
 8007ba0:	08007bd3 	.word	0x08007bd3
 8007ba4:	08007bd3 	.word	0x08007bd3
 8007ba8:	08007bcb 	.word	0x08007bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bac:	f7fe fa18 	bl	8005fe0 <HAL_RCC_GetPCLK1Freq>
 8007bb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007bb2:	e014      	b.n	8007bde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bb4:	f7fe fa2a 	bl	800600c <HAL_RCC_GetPCLK2Freq>
 8007bb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007bba:	e010      	b.n	8007bde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8007c28 <UART_SetConfig+0x5c0>)
 8007bbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007bc0:	e00d      	b.n	8007bde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bc2:	f7fe f975 	bl	8005eb0 <HAL_RCC_GetSysClockFreq>
 8007bc6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007bc8:	e009      	b.n	8007bde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007bd0:	e005      	b.n	8007bde <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007bdc:	bf00      	nop
    }

    if (pclk != 0U)
 8007bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d028      	beq.n	8007c36 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be8:	4a10      	ldr	r2, [pc, #64]	@ (8007c2c <UART_SetConfig+0x5c4>)
 8007bea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	085b      	lsrs	r3, r3, #1
 8007bfc:	441a      	add	r2, r3
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c06:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	2b0f      	cmp	r3, #15
 8007c0c:	d910      	bls.n	8007c30 <UART_SetConfig+0x5c8>
 8007c0e:	6a3b      	ldr	r3, [r7, #32]
 8007c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c14:	d20c      	bcs.n	8007c30 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	60da      	str	r2, [r3, #12]
 8007c20:	e009      	b.n	8007c36 <UART_SetConfig+0x5ce>
 8007c22:	bf00      	nop
 8007c24:	40008000 	.word	0x40008000
 8007c28:	00f42400 	.word	0x00f42400
 8007c2c:	0800ca7c 	.word	0x0800ca7c
      }
      else
      {
        ret = HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007c52:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3730      	adds	r7, #48	@ 0x30
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007c60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c6c:	f003 0308 	and.w	r3, r3, #8
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00a      	beq.n	8007c8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c8e:	f003 0301 	and.w	r3, r3, #1
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00a      	beq.n	8007cac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb0:	f003 0302 	and.w	r3, r3, #2
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00a      	beq.n	8007cce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd2:	f003 0304 	and.w	r3, r3, #4
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	430a      	orrs	r2, r1
 8007cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cf4:	f003 0310 	and.w	r3, r3, #16
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00a      	beq.n	8007d12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	430a      	orrs	r2, r1
 8007d10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d16:	f003 0320 	and.w	r3, r3, #32
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00a      	beq.n	8007d34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	430a      	orrs	r2, r1
 8007d32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d01a      	beq.n	8007d76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	430a      	orrs	r2, r1
 8007d54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d5e:	d10a      	bne.n	8007d76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	430a      	orrs	r2, r1
 8007d74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00a      	beq.n	8007d98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	430a      	orrs	r2, r1
 8007d96:	605a      	str	r2, [r3, #4]
  }
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b098      	sub	sp, #96	@ 0x60
 8007da8:	af02      	add	r7, sp, #8
 8007daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007db4:	f7fa f9c0 	bl	8002138 <HAL_GetTick>
 8007db8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0308 	and.w	r3, r3, #8
 8007dc4:	2b08      	cmp	r3, #8
 8007dc6:	d12f      	bne.n	8007e28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f88e 	bl	8007ef8 <UART_WaitOnFlagUntilTimeout>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d022      	beq.n	8007e28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dea:	e853 3f00 	ldrex	r3, [r3]
 8007dee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007df2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007df6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e00:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e02:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e08:	e841 2300 	strex	r3, r2, [r1]
 8007e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d1e6      	bne.n	8007de2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2220      	movs	r2, #32
 8007e18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e063      	b.n	8007ef0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 0304 	and.w	r3, r3, #4
 8007e32:	2b04      	cmp	r3, #4
 8007e34:	d149      	bne.n	8007eca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e36:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f857 	bl	8007ef8 <UART_WaitOnFlagUntilTimeout>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d03c      	beq.n	8007eca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e58:	e853 3f00 	ldrex	r3, [r3]
 8007e5c:	623b      	str	r3, [r7, #32]
   return(result);
 8007e5e:	6a3b      	ldr	r3, [r7, #32]
 8007e60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e70:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e76:	e841 2300 	strex	r3, r2, [r1]
 8007e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1e6      	bne.n	8007e50 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	3308      	adds	r3, #8
 8007e88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	e853 3f00 	ldrex	r3, [r3]
 8007e90:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f023 0301 	bic.w	r3, r3, #1
 8007e98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	3308      	adds	r3, #8
 8007ea0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ea2:	61fa      	str	r2, [r7, #28]
 8007ea4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea6:	69b9      	ldr	r1, [r7, #24]
 8007ea8:	69fa      	ldr	r2, [r7, #28]
 8007eaa:	e841 2300 	strex	r3, r2, [r1]
 8007eae:	617b      	str	r3, [r7, #20]
   return(result);
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1e5      	bne.n	8007e82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e012      	b.n	8007ef0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3758      	adds	r7, #88	@ 0x58
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	603b      	str	r3, [r7, #0]
 8007f04:	4613      	mov	r3, r2
 8007f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f08:	e049      	b.n	8007f9e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f10:	d045      	beq.n	8007f9e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f12:	f7fa f911 	bl	8002138 <HAL_GetTick>
 8007f16:	4602      	mov	r2, r0
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	69ba      	ldr	r2, [r7, #24]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d302      	bcc.n	8007f28 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e048      	b.n	8007fbe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0304 	and.w	r3, r3, #4
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d031      	beq.n	8007f9e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69db      	ldr	r3, [r3, #28]
 8007f40:	f003 0308 	and.w	r3, r3, #8
 8007f44:	2b08      	cmp	r3, #8
 8007f46:	d110      	bne.n	8007f6a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2208      	movs	r2, #8
 8007f4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 f838 	bl	8007fc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2208      	movs	r2, #8
 8007f5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e029      	b.n	8007fbe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	69db      	ldr	r3, [r3, #28]
 8007f70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f78:	d111      	bne.n	8007f9e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 f81e 	bl	8007fc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2220      	movs	r2, #32
 8007f8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e00f      	b.n	8007fbe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	69da      	ldr	r2, [r3, #28]
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	bf0c      	ite	eq
 8007fae:	2301      	moveq	r3, #1
 8007fb0:	2300      	movne	r3, #0
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	79fb      	ldrb	r3, [r7, #7]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d0a6      	beq.n	8007f0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b095      	sub	sp, #84	@ 0x54
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd6:	e853 3f00 	ldrex	r3, [r3]
 8007fda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fec:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ff2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ff4:	e841 2300 	strex	r3, r2, [r1]
 8007ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1e6      	bne.n	8007fce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	3308      	adds	r3, #8
 8008006:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008008:	6a3b      	ldr	r3, [r7, #32]
 800800a:	e853 3f00 	ldrex	r3, [r3]
 800800e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008016:	f023 0301 	bic.w	r3, r3, #1
 800801a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	3308      	adds	r3, #8
 8008022:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008024:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008026:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008028:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800802a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800802c:	e841 2300 	strex	r3, r2, [r1]
 8008030:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1e3      	bne.n	8008000 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800803c:	2b01      	cmp	r3, #1
 800803e:	d118      	bne.n	8008072 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	e853 3f00 	ldrex	r3, [r3]
 800804c:	60bb      	str	r3, [r7, #8]
   return(result);
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	f023 0310 	bic.w	r3, r3, #16
 8008054:	647b      	str	r3, [r7, #68]	@ 0x44
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	461a      	mov	r2, r3
 800805c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800805e:	61bb      	str	r3, [r7, #24]
 8008060:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008062:	6979      	ldr	r1, [r7, #20]
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	e841 2300 	strex	r3, r2, [r1]
 800806a:	613b      	str	r3, [r7, #16]
   return(result);
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1e6      	bne.n	8008040 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2220      	movs	r2, #32
 8008076:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008086:	bf00      	nop
 8008088:	3754      	adds	r7, #84	@ 0x54
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008092:	b480      	push	{r7}
 8008094:	b085      	sub	sp, #20
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d101      	bne.n	80080a8 <HAL_UARTEx_DisableFifoMode+0x16>
 80080a4:	2302      	movs	r3, #2
 80080a6:	e027      	b.n	80080f8 <HAL_UARTEx_DisableFifoMode+0x66>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2224      	movs	r2, #36	@ 0x24
 80080b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f022 0201 	bic.w	r2, r2, #1
 80080ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80080d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2220      	movs	r2, #32
 80080ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3714      	adds	r7, #20
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008114:	2b01      	cmp	r3, #1
 8008116:	d101      	bne.n	800811c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008118:	2302      	movs	r3, #2
 800811a:	e02d      	b.n	8008178 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2224      	movs	r2, #36	@ 0x24
 8008128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f022 0201 	bic.w	r2, r2, #1
 8008142:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	430a      	orrs	r2, r1
 8008156:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f84f 	bl	80081fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2220      	movs	r2, #32
 800816a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008190:	2b01      	cmp	r3, #1
 8008192:	d101      	bne.n	8008198 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008194:	2302      	movs	r3, #2
 8008196:	e02d      	b.n	80081f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2224      	movs	r2, #36	@ 0x24
 80081a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0201 	bic.w	r2, r2, #1
 80081be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	430a      	orrs	r2, r1
 80081d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 f811 	bl	80081fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2220      	movs	r2, #32
 80081e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008208:	2b00      	cmp	r3, #0
 800820a:	d108      	bne.n	800821e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800821c:	e031      	b.n	8008282 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800821e:	2308      	movs	r3, #8
 8008220:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008222:	2308      	movs	r3, #8
 8008224:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	0e5b      	lsrs	r3, r3, #25
 800822e:	b2db      	uxtb	r3, r3
 8008230:	f003 0307 	and.w	r3, r3, #7
 8008234:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	0f5b      	lsrs	r3, r3, #29
 800823e:	b2db      	uxtb	r3, r3
 8008240:	f003 0307 	and.w	r3, r3, #7
 8008244:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008246:	7bbb      	ldrb	r3, [r7, #14]
 8008248:	7b3a      	ldrb	r2, [r7, #12]
 800824a:	4911      	ldr	r1, [pc, #68]	@ (8008290 <UARTEx_SetNbDataToProcess+0x94>)
 800824c:	5c8a      	ldrb	r2, [r1, r2]
 800824e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008252:	7b3a      	ldrb	r2, [r7, #12]
 8008254:	490f      	ldr	r1, [pc, #60]	@ (8008294 <UARTEx_SetNbDataToProcess+0x98>)
 8008256:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008258:	fb93 f3f2 	sdiv	r3, r3, r2
 800825c:	b29a      	uxth	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008264:	7bfb      	ldrb	r3, [r7, #15]
 8008266:	7b7a      	ldrb	r2, [r7, #13]
 8008268:	4909      	ldr	r1, [pc, #36]	@ (8008290 <UARTEx_SetNbDataToProcess+0x94>)
 800826a:	5c8a      	ldrb	r2, [r1, r2]
 800826c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008270:	7b7a      	ldrb	r2, [r7, #13]
 8008272:	4908      	ldr	r1, [pc, #32]	@ (8008294 <UARTEx_SetNbDataToProcess+0x98>)
 8008274:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008276:	fb93 f3f2 	sdiv	r3, r3, r2
 800827a:	b29a      	uxth	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008282:	bf00      	nop
 8008284:	3714      	adds	r7, #20
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	0800ca94 	.word	0x0800ca94
 8008294:	0800ca9c 	.word	0x0800ca9c

08008298 <__NVIC_SetPriority>:
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	4603      	mov	r3, r0
 80082a0:	6039      	str	r1, [r7, #0]
 80082a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	db0a      	blt.n	80082c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	490c      	ldr	r1, [pc, #48]	@ (80082e4 <__NVIC_SetPriority+0x4c>)
 80082b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082b6:	0112      	lsls	r2, r2, #4
 80082b8:	b2d2      	uxtb	r2, r2
 80082ba:	440b      	add	r3, r1
 80082bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80082c0:	e00a      	b.n	80082d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	4908      	ldr	r1, [pc, #32]	@ (80082e8 <__NVIC_SetPriority+0x50>)
 80082c8:	79fb      	ldrb	r3, [r7, #7]
 80082ca:	f003 030f 	and.w	r3, r3, #15
 80082ce:	3b04      	subs	r3, #4
 80082d0:	0112      	lsls	r2, r2, #4
 80082d2:	b2d2      	uxtb	r2, r2
 80082d4:	440b      	add	r3, r1
 80082d6:	761a      	strb	r2, [r3, #24]
}
 80082d8:	bf00      	nop
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	e000e100 	.word	0xe000e100
 80082e8:	e000ed00 	.word	0xe000ed00

080082ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80082ec:	b580      	push	{r7, lr}
 80082ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80082f0:	4b05      	ldr	r3, [pc, #20]	@ (8008308 <SysTick_Handler+0x1c>)
 80082f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80082f4:	f002 fc6c 	bl	800abd0 <xTaskGetSchedulerState>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d001      	beq.n	8008302 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80082fe:	f003 fb63 	bl	800b9c8 <xPortSysTickHandler>
  }
}
 8008302:	bf00      	nop
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	e000e010 	.word	0xe000e010

0800830c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800830c:	b580      	push	{r7, lr}
 800830e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008310:	2100      	movs	r1, #0
 8008312:	f06f 0004 	mvn.w	r0, #4
 8008316:	f7ff ffbf 	bl	8008298 <__NVIC_SetPriority>
#endif
}
 800831a:	bf00      	nop
 800831c:	bd80      	pop	{r7, pc}
	...

08008320 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008326:	f3ef 8305 	mrs	r3, IPSR
 800832a:	603b      	str	r3, [r7, #0]
  return(result);
 800832c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008332:	f06f 0305 	mvn.w	r3, #5
 8008336:	607b      	str	r3, [r7, #4]
 8008338:	e00c      	b.n	8008354 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800833a:	4b0a      	ldr	r3, [pc, #40]	@ (8008364 <osKernelInitialize+0x44>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d105      	bne.n	800834e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008342:	4b08      	ldr	r3, [pc, #32]	@ (8008364 <osKernelInitialize+0x44>)
 8008344:	2201      	movs	r2, #1
 8008346:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008348:	2300      	movs	r3, #0
 800834a:	607b      	str	r3, [r7, #4]
 800834c:	e002      	b.n	8008354 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800834e:	f04f 33ff 	mov.w	r3, #4294967295
 8008352:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008354:	687b      	ldr	r3, [r7, #4]
}
 8008356:	4618      	mov	r0, r3
 8008358:	370c      	adds	r7, #12
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	200005d4 	.word	0x200005d4

08008368 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800836e:	f3ef 8305 	mrs	r3, IPSR
 8008372:	603b      	str	r3, [r7, #0]
  return(result);
 8008374:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008376:	2b00      	cmp	r3, #0
 8008378:	d003      	beq.n	8008382 <osKernelStart+0x1a>
    stat = osErrorISR;
 800837a:	f06f 0305 	mvn.w	r3, #5
 800837e:	607b      	str	r3, [r7, #4]
 8008380:	e010      	b.n	80083a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008382:	4b0b      	ldr	r3, [pc, #44]	@ (80083b0 <osKernelStart+0x48>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d109      	bne.n	800839e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800838a:	f7ff ffbf 	bl	800830c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800838e:	4b08      	ldr	r3, [pc, #32]	@ (80083b0 <osKernelStart+0x48>)
 8008390:	2202      	movs	r2, #2
 8008392:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008394:	f001 ffb8 	bl	800a308 <vTaskStartScheduler>
      stat = osOK;
 8008398:	2300      	movs	r3, #0
 800839a:	607b      	str	r3, [r7, #4]
 800839c:	e002      	b.n	80083a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800839e:	f04f 33ff 	mov.w	r3, #4294967295
 80083a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80083a4:	687b      	ldr	r3, [r7, #4]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	200005d4 	.word	0x200005d4

080083b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b08e      	sub	sp, #56	@ 0x38
 80083b8:	af04      	add	r7, sp, #16
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80083c0:	2300      	movs	r3, #0
 80083c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083c4:	f3ef 8305 	mrs	r3, IPSR
 80083c8:	617b      	str	r3, [r7, #20]
  return(result);
 80083ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d17e      	bne.n	80084ce <osThreadNew+0x11a>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d07b      	beq.n	80084ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80083d6:	2380      	movs	r3, #128	@ 0x80
 80083d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80083da:	2318      	movs	r3, #24
 80083dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80083de:	2300      	movs	r3, #0
 80083e0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80083e2:	f04f 33ff 	mov.w	r3, #4294967295
 80083e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d045      	beq.n	800847a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d002      	beq.n	80083fc <osThreadNew+0x48>
        name = attr->name;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d002      	beq.n	800840a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d008      	beq.n	8008422 <osThreadNew+0x6e>
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	2b38      	cmp	r3, #56	@ 0x38
 8008414:	d805      	bhi.n	8008422 <osThreadNew+0x6e>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b00      	cmp	r3, #0
 8008420:	d001      	beq.n	8008426 <osThreadNew+0x72>
        return (NULL);
 8008422:	2300      	movs	r3, #0
 8008424:	e054      	b.n	80084d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	695b      	ldr	r3, [r3, #20]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d003      	beq.n	8008436 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	089b      	lsrs	r3, r3, #2
 8008434:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00e      	beq.n	800845c <osThreadNew+0xa8>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	2ba7      	cmp	r3, #167	@ 0xa7
 8008444:	d90a      	bls.n	800845c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800844a:	2b00      	cmp	r3, #0
 800844c:	d006      	beq.n	800845c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d002      	beq.n	800845c <osThreadNew+0xa8>
        mem = 1;
 8008456:	2301      	movs	r3, #1
 8008458:	61bb      	str	r3, [r7, #24]
 800845a:	e010      	b.n	800847e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10c      	bne.n	800847e <osThreadNew+0xca>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d108      	bne.n	800847e <osThreadNew+0xca>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d104      	bne.n	800847e <osThreadNew+0xca>
          mem = 0;
 8008474:	2300      	movs	r3, #0
 8008476:	61bb      	str	r3, [r7, #24]
 8008478:	e001      	b.n	800847e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800847a:	2300      	movs	r3, #0
 800847c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d110      	bne.n	80084a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800848c:	9202      	str	r2, [sp, #8]
 800848e:	9301      	str	r3, [sp, #4]
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	9300      	str	r3, [sp, #0]
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	6a3a      	ldr	r2, [r7, #32]
 8008498:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f001 fc38 	bl	8009d10 <xTaskCreateStatic>
 80084a0:	4603      	mov	r3, r0
 80084a2:	613b      	str	r3, [r7, #16]
 80084a4:	e013      	b.n	80084ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d110      	bne.n	80084ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80084ac:	6a3b      	ldr	r3, [r7, #32]
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	f107 0310 	add.w	r3, r7, #16
 80084b4:	9301      	str	r3, [sp, #4]
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f001 fc86 	bl	8009dd0 <xTaskCreate>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d001      	beq.n	80084ce <osThreadNew+0x11a>
            hTask = NULL;
 80084ca:	2300      	movs	r3, #0
 80084cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80084ce:	693b      	ldr	r3, [r7, #16]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3728      	adds	r7, #40	@ 0x28
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084e4:	f3ef 8305 	mrs	r3, IPSR
 80084e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80084ea:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d003      	beq.n	80084f8 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80084f0:	f06f 0305 	mvn.w	r3, #5
 80084f4:	617b      	str	r3, [r7, #20]
 80084f6:	e00b      	b.n	8008510 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d103      	bne.n	8008506 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80084fe:	f06f 0303 	mvn.w	r3, #3
 8008502:	617b      	str	r3, [r7, #20]
 8008504:	e004      	b.n	8008510 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8008506:	2300      	movs	r3, #0
 8008508:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 800850a:	6938      	ldr	r0, [r7, #16]
 800850c:	f001 fdf4 	bl	800a0f8 <vTaskSuspend>
  }

  return (stat);
 8008510:	697b      	ldr	r3, [r7, #20]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3718      	adds	r7, #24
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800851a:	b580      	push	{r7, lr}
 800851c:	b086      	sub	sp, #24
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008526:	f3ef 8305 	mrs	r3, IPSR
 800852a:	60fb      	str	r3, [r7, #12]
  return(result);
 800852c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800852e:	2b00      	cmp	r3, #0
 8008530:	d003      	beq.n	800853a <osThreadResume+0x20>
    stat = osErrorISR;
 8008532:	f06f 0305 	mvn.w	r3, #5
 8008536:	617b      	str	r3, [r7, #20]
 8008538:	e00b      	b.n	8008552 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d103      	bne.n	8008548 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8008540:	f06f 0303 	mvn.w	r3, #3
 8008544:	617b      	str	r3, [r7, #20]
 8008546:	e004      	b.n	8008552 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8008548:	2300      	movs	r3, #0
 800854a:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800854c:	6938      	ldr	r0, [r7, #16]
 800854e:	f001 fe7b 	bl	800a248 <vTaskResume>
  }

  return (stat);
 8008552:	697b      	ldr	r3, [r7, #20]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3718      	adds	r7, #24
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008564:	f3ef 8305 	mrs	r3, IPSR
 8008568:	60bb      	str	r3, [r7, #8]
  return(result);
 800856a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800856c:	2b00      	cmp	r3, #0
 800856e:	d003      	beq.n	8008578 <osDelay+0x1c>
    stat = osErrorISR;
 8008570:	f06f 0305 	mvn.w	r3, #5
 8008574:	60fb      	str	r3, [r7, #12]
 8008576:	e007      	b.n	8008588 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008578:	2300      	movs	r3, #0
 800857a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f001 fd82 	bl	800a08c <vTaskDelay>
    }
  }

  return (stat);
 8008588:	68fb      	ldr	r3, [r7, #12]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008592:	b580      	push	{r7, lr}
 8008594:	b08a      	sub	sp, #40	@ 0x28
 8008596:	af02      	add	r7, sp, #8
 8008598:	60f8      	str	r0, [r7, #12]
 800859a:	60b9      	str	r1, [r7, #8]
 800859c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800859e:	2300      	movs	r3, #0
 80085a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085a2:	f3ef 8305 	mrs	r3, IPSR
 80085a6:	613b      	str	r3, [r7, #16]
  return(result);
 80085a8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d175      	bne.n	800869a <osSemaphoreNew+0x108>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d072      	beq.n	800869a <osSemaphoreNew+0x108>
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d86e      	bhi.n	800869a <osSemaphoreNew+0x108>
    mem = -1;
 80085bc:	f04f 33ff 	mov.w	r3, #4294967295
 80085c0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d015      	beq.n	80085f4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d006      	beq.n	80085de <osSemaphoreNew+0x4c>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	2b4f      	cmp	r3, #79	@ 0x4f
 80085d6:	d902      	bls.n	80085de <osSemaphoreNew+0x4c>
        mem = 1;
 80085d8:	2301      	movs	r3, #1
 80085da:	61bb      	str	r3, [r7, #24]
 80085dc:	e00c      	b.n	80085f8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d108      	bne.n	80085f8 <osSemaphoreNew+0x66>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d104      	bne.n	80085f8 <osSemaphoreNew+0x66>
          mem = 0;
 80085ee:	2300      	movs	r3, #0
 80085f0:	61bb      	str	r3, [r7, #24]
 80085f2:	e001      	b.n	80085f8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80085f4:	2300      	movs	r3, #0
 80085f6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085fe:	d04c      	beq.n	800869a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d128      	bne.n	8008658 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	2b01      	cmp	r3, #1
 800860a:	d10a      	bne.n	8008622 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	2203      	movs	r2, #3
 8008612:	9200      	str	r2, [sp, #0]
 8008614:	2200      	movs	r2, #0
 8008616:	2100      	movs	r1, #0
 8008618:	2001      	movs	r0, #1
 800861a:	f000 fb93 	bl	8008d44 <xQueueGenericCreateStatic>
 800861e:	61f8      	str	r0, [r7, #28]
 8008620:	e005      	b.n	800862e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008622:	2203      	movs	r2, #3
 8008624:	2100      	movs	r1, #0
 8008626:	2001      	movs	r0, #1
 8008628:	f000 fc09 	bl	8008e3e <xQueueGenericCreate>
 800862c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d022      	beq.n	800867a <osSemaphoreNew+0xe8>
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d01f      	beq.n	800867a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800863a:	2300      	movs	r3, #0
 800863c:	2200      	movs	r2, #0
 800863e:	2100      	movs	r1, #0
 8008640:	69f8      	ldr	r0, [r7, #28]
 8008642:	f000 fcc9 	bl	8008fd8 <xQueueGenericSend>
 8008646:	4603      	mov	r3, r0
 8008648:	2b01      	cmp	r3, #1
 800864a:	d016      	beq.n	800867a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800864c:	69f8      	ldr	r0, [r7, #28]
 800864e:	f001 f98b 	bl	8009968 <vQueueDelete>
            hSemaphore = NULL;
 8008652:	2300      	movs	r3, #0
 8008654:	61fb      	str	r3, [r7, #28]
 8008656:	e010      	b.n	800867a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d108      	bne.n	8008670 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	461a      	mov	r2, r3
 8008664:	68b9      	ldr	r1, [r7, #8]
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f000 fc47 	bl	8008efa <xQueueCreateCountingSemaphoreStatic>
 800866c:	61f8      	str	r0, [r7, #28]
 800866e:	e004      	b.n	800867a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008670:	68b9      	ldr	r1, [r7, #8]
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f000 fc7a 	bl	8008f6c <xQueueCreateCountingSemaphore>
 8008678:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00c      	beq.n	800869a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d003      	beq.n	800868e <osSemaphoreNew+0xfc>
          name = attr->name;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	617b      	str	r3, [r7, #20]
 800868c:	e001      	b.n	8008692 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800868e:	2300      	movs	r3, #0
 8008690:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008692:	6979      	ldr	r1, [r7, #20]
 8008694:	69f8      	ldr	r0, [r7, #28]
 8008696:	f001 fab3 	bl	8009c00 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800869a:	69fb      	ldr	r3, [r7, #28]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3720      	adds	r7, #32
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b086      	sub	sp, #24
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d103      	bne.n	80086c4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80086bc:	f06f 0303 	mvn.w	r3, #3
 80086c0:	617b      	str	r3, [r7, #20]
 80086c2:	e039      	b.n	8008738 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086c4:	f3ef 8305 	mrs	r3, IPSR
 80086c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80086ca:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d022      	beq.n	8008716 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80086d6:	f06f 0303 	mvn.w	r3, #3
 80086da:	617b      	str	r3, [r7, #20]
 80086dc:	e02c      	b.n	8008738 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80086de:	2300      	movs	r3, #0
 80086e0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80086e2:	f107 0308 	add.w	r3, r7, #8
 80086e6:	461a      	mov	r2, r3
 80086e8:	2100      	movs	r1, #0
 80086ea:	6938      	ldr	r0, [r7, #16]
 80086ec:	f001 f896 	bl	800981c <xQueueReceiveFromISR>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d003      	beq.n	80086fe <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80086f6:	f06f 0302 	mvn.w	r3, #2
 80086fa:	617b      	str	r3, [r7, #20]
 80086fc:	e01c      	b.n	8008738 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d019      	beq.n	8008738 <osSemaphoreAcquire+0x94>
 8008704:	4b0f      	ldr	r3, [pc, #60]	@ (8008744 <osSemaphoreAcquire+0xa0>)
 8008706:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800870a:	601a      	str	r2, [r3, #0]
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	f3bf 8f6f 	isb	sy
 8008714:	e010      	b.n	8008738 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008716:	6839      	ldr	r1, [r7, #0]
 8008718:	6938      	ldr	r0, [r7, #16]
 800871a:	f000 ff6f 	bl	80095fc <xQueueSemaphoreTake>
 800871e:	4603      	mov	r3, r0
 8008720:	2b01      	cmp	r3, #1
 8008722:	d009      	beq.n	8008738 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d003      	beq.n	8008732 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800872a:	f06f 0301 	mvn.w	r3, #1
 800872e:	617b      	str	r3, [r7, #20]
 8008730:	e002      	b.n	8008738 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008732:	f06f 0302 	mvn.w	r3, #2
 8008736:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008738:	697b      	ldr	r3, [r7, #20]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	e000ed04 	.word	0xe000ed04

08008748 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008754:	2300      	movs	r3, #0
 8008756:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d103      	bne.n	8008766 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800875e:	f06f 0303 	mvn.w	r3, #3
 8008762:	617b      	str	r3, [r7, #20]
 8008764:	e02c      	b.n	80087c0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008766:	f3ef 8305 	mrs	r3, IPSR
 800876a:	60fb      	str	r3, [r7, #12]
  return(result);
 800876c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800876e:	2b00      	cmp	r3, #0
 8008770:	d01a      	beq.n	80087a8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008772:	2300      	movs	r3, #0
 8008774:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008776:	f107 0308 	add.w	r3, r7, #8
 800877a:	4619      	mov	r1, r3
 800877c:	6938      	ldr	r0, [r7, #16]
 800877e:	f000 fdcb 	bl	8009318 <xQueueGiveFromISR>
 8008782:	4603      	mov	r3, r0
 8008784:	2b01      	cmp	r3, #1
 8008786:	d003      	beq.n	8008790 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008788:	f06f 0302 	mvn.w	r3, #2
 800878c:	617b      	str	r3, [r7, #20]
 800878e:	e017      	b.n	80087c0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d014      	beq.n	80087c0 <osSemaphoreRelease+0x78>
 8008796:	4b0d      	ldr	r3, [pc, #52]	@ (80087cc <osSemaphoreRelease+0x84>)
 8008798:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800879c:	601a      	str	r2, [r3, #0]
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	f3bf 8f6f 	isb	sy
 80087a6:	e00b      	b.n	80087c0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80087a8:	2300      	movs	r3, #0
 80087aa:	2200      	movs	r2, #0
 80087ac:	2100      	movs	r1, #0
 80087ae:	6938      	ldr	r0, [r7, #16]
 80087b0:	f000 fc12 	bl	8008fd8 <xQueueGenericSend>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d002      	beq.n	80087c0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80087ba:	f06f 0302 	mvn.w	r3, #2
 80087be:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80087c0:	697b      	ldr	r3, [r7, #20]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3718      	adds	r7, #24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	e000ed04 	.word	0xe000ed04

080087d0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08a      	sub	sp, #40	@ 0x28
 80087d4:	af02      	add	r7, sp, #8
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80087dc:	2300      	movs	r3, #0
 80087de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087e0:	f3ef 8305 	mrs	r3, IPSR
 80087e4:	613b      	str	r3, [r7, #16]
  return(result);
 80087e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d15f      	bne.n	80088ac <osMessageQueueNew+0xdc>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d05c      	beq.n	80088ac <osMessageQueueNew+0xdc>
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d059      	beq.n	80088ac <osMessageQueueNew+0xdc>
    mem = -1;
 80087f8:	f04f 33ff 	mov.w	r3, #4294967295
 80087fc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d029      	beq.n	8008858 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d012      	beq.n	8008832 <osMessageQueueNew+0x62>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	2b4f      	cmp	r3, #79	@ 0x4f
 8008812:	d90e      	bls.n	8008832 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00a      	beq.n	8008832 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	695a      	ldr	r2, [r3, #20]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	68b9      	ldr	r1, [r7, #8]
 8008824:	fb01 f303 	mul.w	r3, r1, r3
 8008828:	429a      	cmp	r2, r3
 800882a:	d302      	bcc.n	8008832 <osMessageQueueNew+0x62>
        mem = 1;
 800882c:	2301      	movs	r3, #1
 800882e:	61bb      	str	r3, [r7, #24]
 8008830:	e014      	b.n	800885c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d110      	bne.n	800885c <osMessageQueueNew+0x8c>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10c      	bne.n	800885c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008846:	2b00      	cmp	r3, #0
 8008848:	d108      	bne.n	800885c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d104      	bne.n	800885c <osMessageQueueNew+0x8c>
          mem = 0;
 8008852:	2300      	movs	r3, #0
 8008854:	61bb      	str	r3, [r7, #24]
 8008856:	e001      	b.n	800885c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008858:	2300      	movs	r3, #0
 800885a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d10b      	bne.n	800887a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	691a      	ldr	r2, [r3, #16]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	2100      	movs	r1, #0
 800886c:	9100      	str	r1, [sp, #0]
 800886e:	68b9      	ldr	r1, [r7, #8]
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f000 fa67 	bl	8008d44 <xQueueGenericCreateStatic>
 8008876:	61f8      	str	r0, [r7, #28]
 8008878:	e008      	b.n	800888c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d105      	bne.n	800888c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008880:	2200      	movs	r2, #0
 8008882:	68b9      	ldr	r1, [r7, #8]
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 fada 	bl	8008e3e <xQueueGenericCreate>
 800888a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00c      	beq.n	80088ac <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d003      	beq.n	80088a0 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	617b      	str	r3, [r7, #20]
 800889e:	e001      	b.n	80088a4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80088a0:	2300      	movs	r3, #0
 80088a2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80088a4:	6979      	ldr	r1, [r7, #20]
 80088a6:	69f8      	ldr	r0, [r7, #28]
 80088a8:	f001 f9aa 	bl	8009c00 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80088ac:	69fb      	ldr	r3, [r7, #28]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3720      	adds	r7, #32
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
	...

080088b8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b088      	sub	sp, #32
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	603b      	str	r3, [r7, #0]
 80088c4:	4613      	mov	r3, r2
 80088c6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088d0:	f3ef 8305 	mrs	r3, IPSR
 80088d4:	617b      	str	r3, [r7, #20]
  return(result);
 80088d6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d028      	beq.n	800892e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d005      	beq.n	80088ee <osMessageQueuePut+0x36>
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d002      	beq.n	80088ee <osMessageQueuePut+0x36>
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d003      	beq.n	80088f6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80088ee:	f06f 0303 	mvn.w	r3, #3
 80088f2:	61fb      	str	r3, [r7, #28]
 80088f4:	e038      	b.n	8008968 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80088f6:	2300      	movs	r3, #0
 80088f8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80088fa:	f107 0210 	add.w	r2, r7, #16
 80088fe:	2300      	movs	r3, #0
 8008900:	68b9      	ldr	r1, [r7, #8]
 8008902:	69b8      	ldr	r0, [r7, #24]
 8008904:	f000 fc6a 	bl	80091dc <xQueueGenericSendFromISR>
 8008908:	4603      	mov	r3, r0
 800890a:	2b01      	cmp	r3, #1
 800890c:	d003      	beq.n	8008916 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800890e:	f06f 0302 	mvn.w	r3, #2
 8008912:	61fb      	str	r3, [r7, #28]
 8008914:	e028      	b.n	8008968 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d025      	beq.n	8008968 <osMessageQueuePut+0xb0>
 800891c:	4b15      	ldr	r3, [pc, #84]	@ (8008974 <osMessageQueuePut+0xbc>)
 800891e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	f3bf 8f6f 	isb	sy
 800892c:	e01c      	b.n	8008968 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <osMessageQueuePut+0x82>
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d103      	bne.n	8008942 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800893a:	f06f 0303 	mvn.w	r3, #3
 800893e:	61fb      	str	r3, [r7, #28]
 8008940:	e012      	b.n	8008968 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008942:	2300      	movs	r3, #0
 8008944:	683a      	ldr	r2, [r7, #0]
 8008946:	68b9      	ldr	r1, [r7, #8]
 8008948:	69b8      	ldr	r0, [r7, #24]
 800894a:	f000 fb45 	bl	8008fd8 <xQueueGenericSend>
 800894e:	4603      	mov	r3, r0
 8008950:	2b01      	cmp	r3, #1
 8008952:	d009      	beq.n	8008968 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d003      	beq.n	8008962 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800895a:	f06f 0301 	mvn.w	r3, #1
 800895e:	61fb      	str	r3, [r7, #28]
 8008960:	e002      	b.n	8008968 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008962:	f06f 0302 	mvn.w	r3, #2
 8008966:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008968:	69fb      	ldr	r3, [r7, #28]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3720      	adds	r7, #32
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	e000ed04 	.word	0xe000ed04

08008978 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008978:	b580      	push	{r7, lr}
 800897a:	b088      	sub	sp, #32
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
 8008984:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800898a:	2300      	movs	r3, #0
 800898c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800898e:	f3ef 8305 	mrs	r3, IPSR
 8008992:	617b      	str	r3, [r7, #20]
  return(result);
 8008994:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008996:	2b00      	cmp	r3, #0
 8008998:	d028      	beq.n	80089ec <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d005      	beq.n	80089ac <osMessageQueueGet+0x34>
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d002      	beq.n	80089ac <osMessageQueueGet+0x34>
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d003      	beq.n	80089b4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80089ac:	f06f 0303 	mvn.w	r3, #3
 80089b0:	61fb      	str	r3, [r7, #28]
 80089b2:	e037      	b.n	8008a24 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80089b4:	2300      	movs	r3, #0
 80089b6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80089b8:	f107 0310 	add.w	r3, r7, #16
 80089bc:	461a      	mov	r2, r3
 80089be:	68b9      	ldr	r1, [r7, #8]
 80089c0:	69b8      	ldr	r0, [r7, #24]
 80089c2:	f000 ff2b 	bl	800981c <xQueueReceiveFromISR>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d003      	beq.n	80089d4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80089cc:	f06f 0302 	mvn.w	r3, #2
 80089d0:	61fb      	str	r3, [r7, #28]
 80089d2:	e027      	b.n	8008a24 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d024      	beq.n	8008a24 <osMessageQueueGet+0xac>
 80089da:	4b15      	ldr	r3, [pc, #84]	@ (8008a30 <osMessageQueueGet+0xb8>)
 80089dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089e0:	601a      	str	r2, [r3, #0]
 80089e2:	f3bf 8f4f 	dsb	sy
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	e01b      	b.n	8008a24 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d002      	beq.n	80089f8 <osMessageQueueGet+0x80>
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d103      	bne.n	8008a00 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80089f8:	f06f 0303 	mvn.w	r3, #3
 80089fc:	61fb      	str	r3, [r7, #28]
 80089fe:	e011      	b.n	8008a24 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008a00:	683a      	ldr	r2, [r7, #0]
 8008a02:	68b9      	ldr	r1, [r7, #8]
 8008a04:	69b8      	ldr	r0, [r7, #24]
 8008a06:	f000 fd17 	bl	8009438 <xQueueReceive>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d009      	beq.n	8008a24 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d003      	beq.n	8008a1e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008a16:	f06f 0301 	mvn.w	r3, #1
 8008a1a:	61fb      	str	r3, [r7, #28]
 8008a1c:	e002      	b.n	8008a24 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008a1e:	f06f 0302 	mvn.w	r3, #2
 8008a22:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008a24:	69fb      	ldr	r3, [r7, #28]
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3720      	adds	r7, #32
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	e000ed04 	.word	0xe000ed04

08008a34 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b08a      	sub	sp, #40	@ 0x28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 8008a40:	6a3b      	ldr	r3, [r7, #32]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d102      	bne.n	8008a4c <osMessageQueueGetSpace+0x18>
    space = 0U;
 8008a46:	2300      	movs	r3, #0
 8008a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a4a:	e023      	b.n	8008a94 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a4c:	f3ef 8305 	mrs	r3, IPSR
 8008a50:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a52:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d019      	beq.n	8008a8c <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a58:	f3ef 8211 	mrs	r2, BASEPRI
 8008a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a60:	f383 8811 	msr	BASEPRI, r3
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	613a      	str	r2, [r7, #16]
 8008a6e:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a70:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 8008a72:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a8a:	e003      	b.n	8008a94 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 8008a8c:	6a38      	ldr	r0, [r7, #32]
 8008a8e:	f000 ff47 	bl	8009920 <uxQueueSpacesAvailable>
 8008a92:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return (space);
 8008a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3728      	adds	r7, #40	@ 0x28
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
	...

08008aa0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	4a07      	ldr	r2, [pc, #28]	@ (8008acc <vApplicationGetIdleTaskMemory+0x2c>)
 8008ab0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	4a06      	ldr	r2, [pc, #24]	@ (8008ad0 <vApplicationGetIdleTaskMemory+0x30>)
 8008ab6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2280      	movs	r2, #128	@ 0x80
 8008abc:	601a      	str	r2, [r3, #0]
}
 8008abe:	bf00      	nop
 8008ac0:	3714      	adds	r7, #20
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	200005d8 	.word	0x200005d8
 8008ad0:	20000680 	.word	0x20000680

08008ad4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	4a07      	ldr	r2, [pc, #28]	@ (8008b00 <vApplicationGetTimerTaskMemory+0x2c>)
 8008ae4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	4a06      	ldr	r2, [pc, #24]	@ (8008b04 <vApplicationGetTimerTaskMemory+0x30>)
 8008aea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008af2:	601a      	str	r2, [r3, #0]
}
 8008af4:	bf00      	nop
 8008af6:	3714      	adds	r7, #20
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	20000880 	.word	0x20000880
 8008b04:	20000928 	.word	0x20000928

08008b08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f103 0208 	add.w	r2, r3, #8
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f103 0208 	add.w	r2, r3, #8
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f103 0208 	add.w	r2, r3, #8
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b56:	bf00      	nop
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b62:	b480      	push	{r7}
 8008b64:	b085      	sub	sp, #20
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
 8008b6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	689a      	ldr	r2, [r3, #8]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	683a      	ldr	r2, [r7, #0]
 8008b86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	683a      	ldr	r2, [r7, #0]
 8008b8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	1c5a      	adds	r2, r3, #1
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	601a      	str	r2, [r3, #0]
}
 8008b9e:	bf00      	nop
 8008ba0:	3714      	adds	r7, #20
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr

08008baa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008baa:	b480      	push	{r7}
 8008bac:	b085      	sub	sp, #20
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc0:	d103      	bne.n	8008bca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	60fb      	str	r3, [r7, #12]
 8008bc8:	e00c      	b.n	8008be4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	3308      	adds	r3, #8
 8008bce:	60fb      	str	r3, [r7, #12]
 8008bd0:	e002      	b.n	8008bd8 <vListInsert+0x2e>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	60fb      	str	r3, [r7, #12]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d2f6      	bcs.n	8008bd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	685a      	ldr	r2, [r3, #4]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	683a      	ldr	r2, [r7, #0]
 8008bfe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	1c5a      	adds	r2, r3, #1
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	601a      	str	r2, [r3, #0]
}
 8008c10:	bf00      	nop
 8008c12:	3714      	adds	r7, #20
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	691b      	ldr	r3, [r3, #16]
 8008c28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	6892      	ldr	r2, [r2, #8]
 8008c32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	6852      	ldr	r2, [r2, #4]
 8008c3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d103      	bne.n	8008c50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	689a      	ldr	r2, [r3, #8]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	1e5a      	subs	r2, r3, #1
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10b      	bne.n	8008c9c <xQueueGenericReset+0x2c>
	__asm volatile
 8008c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c88:	f383 8811 	msr	BASEPRI, r3
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	60bb      	str	r3, [r7, #8]
}
 8008c96:	bf00      	nop
 8008c98:	bf00      	nop
 8008c9a:	e7fd      	b.n	8008c98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008c9c:	f002 fe04 	bl	800b8a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ca8:	68f9      	ldr	r1, [r7, #12]
 8008caa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008cac:	fb01 f303 	mul.w	r3, r1, r3
 8008cb0:	441a      	add	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	68f9      	ldr	r1, [r7, #12]
 8008cd0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008cd2:	fb01 f303 	mul.w	r3, r1, r3
 8008cd6:	441a      	add	r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	22ff      	movs	r2, #255	@ 0xff
 8008ce0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	22ff      	movs	r2, #255	@ 0xff
 8008ce8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d114      	bne.n	8008d1c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d01a      	beq.n	8008d30 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	3310      	adds	r3, #16
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f001 fda0 	bl	800a844 <xTaskRemoveFromEventList>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d012      	beq.n	8008d30 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d40 <xQueueGenericReset+0xd0>)
 8008d0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d10:	601a      	str	r2, [r3, #0]
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	e009      	b.n	8008d30 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	3310      	adds	r3, #16
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7ff fef1 	bl	8008b08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	3324      	adds	r3, #36	@ 0x24
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7ff feec 	bl	8008b08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d30:	f002 fdec 	bl	800b90c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d34:	2301      	movs	r3, #1
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	e000ed04 	.word	0xe000ed04

08008d44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b08e      	sub	sp, #56	@ 0x38
 8008d48:	af02      	add	r7, sp, #8
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
 8008d50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10b      	bne.n	8008d70 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5c:	f383 8811 	msr	BASEPRI, r3
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008d6a:	bf00      	nop
 8008d6c:	bf00      	nop
 8008d6e:	e7fd      	b.n	8008d6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d10b      	bne.n	8008d8e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d7a:	f383 8811 	msr	BASEPRI, r3
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008d88:	bf00      	nop
 8008d8a:	bf00      	nop
 8008d8c:	e7fd      	b.n	8008d8a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d002      	beq.n	8008d9a <xQueueGenericCreateStatic+0x56>
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <xQueueGenericCreateStatic+0x5a>
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e000      	b.n	8008da0 <xQueueGenericCreateStatic+0x5c>
 8008d9e:	2300      	movs	r3, #0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10b      	bne.n	8008dbc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da8:	f383 8811 	msr	BASEPRI, r3
 8008dac:	f3bf 8f6f 	isb	sy
 8008db0:	f3bf 8f4f 	dsb	sy
 8008db4:	623b      	str	r3, [r7, #32]
}
 8008db6:	bf00      	nop
 8008db8:	bf00      	nop
 8008dba:	e7fd      	b.n	8008db8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d102      	bne.n	8008dc8 <xQueueGenericCreateStatic+0x84>
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d101      	bne.n	8008dcc <xQueueGenericCreateStatic+0x88>
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e000      	b.n	8008dce <xQueueGenericCreateStatic+0x8a>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10b      	bne.n	8008dea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	61fb      	str	r3, [r7, #28]
}
 8008de4:	bf00      	nop
 8008de6:	bf00      	nop
 8008de8:	e7fd      	b.n	8008de6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008dea:	2350      	movs	r3, #80	@ 0x50
 8008dec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	2b50      	cmp	r3, #80	@ 0x50
 8008df2:	d00b      	beq.n	8008e0c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	61bb      	str	r3, [r7, #24]
}
 8008e06:	bf00      	nop
 8008e08:	bf00      	nop
 8008e0a:	e7fd      	b.n	8008e08 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e0c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00d      	beq.n	8008e34 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e20:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e26:	9300      	str	r3, [sp, #0]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	68b9      	ldr	r1, [r7, #8]
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f000 f840 	bl	8008eb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3730      	adds	r7, #48	@ 0x30
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b08a      	sub	sp, #40	@ 0x28
 8008e42:	af02      	add	r7, sp, #8
 8008e44:	60f8      	str	r0, [r7, #12]
 8008e46:	60b9      	str	r1, [r7, #8]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10b      	bne.n	8008e6a <xQueueGenericCreate+0x2c>
	__asm volatile
 8008e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e56:	f383 8811 	msr	BASEPRI, r3
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	613b      	str	r3, [r7, #16]
}
 8008e64:	bf00      	nop
 8008e66:	bf00      	nop
 8008e68:	e7fd      	b.n	8008e66 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	fb02 f303 	mul.w	r3, r2, r3
 8008e72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	3350      	adds	r3, #80	@ 0x50
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f002 fe37 	bl	800baec <pvPortMalloc>
 8008e7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d011      	beq.n	8008eaa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	3350      	adds	r3, #80	@ 0x50
 8008e8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e98:	79fa      	ldrb	r2, [r7, #7]
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	697a      	ldr	r2, [r7, #20]
 8008ea2:	68b9      	ldr	r1, [r7, #8]
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f000 f805 	bl	8008eb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008eaa:	69bb      	ldr	r3, [r7, #24]
	}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3720      	adds	r7, #32
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	607a      	str	r2, [r7, #4]
 8008ec0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d103      	bne.n	8008ed0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	69ba      	ldr	r2, [r7, #24]
 8008ecc:	601a      	str	r2, [r3, #0]
 8008ece:	e002      	b.n	8008ed6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ee2:	2101      	movs	r1, #1
 8008ee4:	69b8      	ldr	r0, [r7, #24]
 8008ee6:	f7ff fec3 	bl	8008c70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	78fa      	ldrb	r2, [r7, #3]
 8008eee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ef2:	bf00      	nop
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b08a      	sub	sp, #40	@ 0x28
 8008efe:	af02      	add	r7, sp, #8
 8008f00:	60f8      	str	r0, [r7, #12]
 8008f02:	60b9      	str	r1, [r7, #8]
 8008f04:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d10b      	bne.n	8008f24 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8008f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f10:	f383 8811 	msr	BASEPRI, r3
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	61bb      	str	r3, [r7, #24]
}
 8008f1e:	bf00      	nop
 8008f20:	bf00      	nop
 8008f22:	e7fd      	b.n	8008f20 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d90b      	bls.n	8008f44 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8008f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f30:	f383 8811 	msr	BASEPRI, r3
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	617b      	str	r3, [r7, #20]
}
 8008f3e:	bf00      	nop
 8008f40:	bf00      	nop
 8008f42:	e7fd      	b.n	8008f40 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008f44:	2302      	movs	r3, #2
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f7ff fef8 	bl	8008d44 <xQueueGenericCreateStatic>
 8008f54:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d002      	beq.n	8008f62 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008f62:	69fb      	ldr	r3, [r7, #28]
	}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3720      	adds	r7, #32
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10b      	bne.n	8008f94 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8008f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f80:	f383 8811 	msr	BASEPRI, r3
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	613b      	str	r3, [r7, #16]
}
 8008f8e:	bf00      	nop
 8008f90:	bf00      	nop
 8008f92:	e7fd      	b.n	8008f90 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008f94:	683a      	ldr	r2, [r7, #0]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d90b      	bls.n	8008fb4 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8008f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa0:	f383 8811 	msr	BASEPRI, r3
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	60fb      	str	r3, [r7, #12]
}
 8008fae:	bf00      	nop
 8008fb0:	bf00      	nop
 8008fb2:	e7fd      	b.n	8008fb0 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008fb4:	2202      	movs	r2, #2
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f7ff ff40 	bl	8008e3e <xQueueGenericCreate>
 8008fbe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d002      	beq.n	8008fcc <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	683a      	ldr	r2, [r7, #0]
 8008fca:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008fcc:	697b      	ldr	r3, [r7, #20]
	}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
	...

08008fd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b08e      	sub	sp, #56	@ 0x38
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
 8008fe4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d10b      	bne.n	800900c <xQueueGenericSend+0x34>
	__asm volatile
 8008ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff8:	f383 8811 	msr	BASEPRI, r3
 8008ffc:	f3bf 8f6f 	isb	sy
 8009000:	f3bf 8f4f 	dsb	sy
 8009004:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009006:	bf00      	nop
 8009008:	bf00      	nop
 800900a:	e7fd      	b.n	8009008 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d103      	bne.n	800901a <xQueueGenericSend+0x42>
 8009012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <xQueueGenericSend+0x46>
 800901a:	2301      	movs	r3, #1
 800901c:	e000      	b.n	8009020 <xQueueGenericSend+0x48>
 800901e:	2300      	movs	r3, #0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10b      	bne.n	800903c <xQueueGenericSend+0x64>
	__asm volatile
 8009024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009036:	bf00      	nop
 8009038:	bf00      	nop
 800903a:	e7fd      	b.n	8009038 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	2b02      	cmp	r3, #2
 8009040:	d103      	bne.n	800904a <xQueueGenericSend+0x72>
 8009042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009046:	2b01      	cmp	r3, #1
 8009048:	d101      	bne.n	800904e <xQueueGenericSend+0x76>
 800904a:	2301      	movs	r3, #1
 800904c:	e000      	b.n	8009050 <xQueueGenericSend+0x78>
 800904e:	2300      	movs	r3, #0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10b      	bne.n	800906c <xQueueGenericSend+0x94>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	623b      	str	r3, [r7, #32]
}
 8009066:	bf00      	nop
 8009068:	bf00      	nop
 800906a:	e7fd      	b.n	8009068 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800906c:	f001 fdb0 	bl	800abd0 <xTaskGetSchedulerState>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d102      	bne.n	800907c <xQueueGenericSend+0xa4>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d101      	bne.n	8009080 <xQueueGenericSend+0xa8>
 800907c:	2301      	movs	r3, #1
 800907e:	e000      	b.n	8009082 <xQueueGenericSend+0xaa>
 8009080:	2300      	movs	r3, #0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d10b      	bne.n	800909e <xQueueGenericSend+0xc6>
	__asm volatile
 8009086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800908a:	f383 8811 	msr	BASEPRI, r3
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	61fb      	str	r3, [r7, #28]
}
 8009098:	bf00      	nop
 800909a:	bf00      	nop
 800909c:	e7fd      	b.n	800909a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800909e:	f002 fc03 	bl	800b8a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d302      	bcc.n	80090b4 <xQueueGenericSend+0xdc>
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d129      	bne.n	8009108 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090b4:	683a      	ldr	r2, [r7, #0]
 80090b6:	68b9      	ldr	r1, [r7, #8]
 80090b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090ba:	f000 fc91 	bl	80099e0 <prvCopyDataToQueue>
 80090be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d010      	beq.n	80090ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ca:	3324      	adds	r3, #36	@ 0x24
 80090cc:	4618      	mov	r0, r3
 80090ce:	f001 fbb9 	bl	800a844 <xTaskRemoveFromEventList>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d013      	beq.n	8009100 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80090d8:	4b3f      	ldr	r3, [pc, #252]	@ (80091d8 <xQueueGenericSend+0x200>)
 80090da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090de:	601a      	str	r2, [r3, #0]
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	e00a      	b.n	8009100 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80090ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d007      	beq.n	8009100 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80090f0:	4b39      	ldr	r3, [pc, #228]	@ (80091d8 <xQueueGenericSend+0x200>)
 80090f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009100:	f002 fc04 	bl	800b90c <vPortExitCritical>
				return pdPASS;
 8009104:	2301      	movs	r3, #1
 8009106:	e063      	b.n	80091d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d103      	bne.n	8009116 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800910e:	f002 fbfd 	bl	800b90c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009112:	2300      	movs	r3, #0
 8009114:	e05c      	b.n	80091d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009118:	2b00      	cmp	r3, #0
 800911a:	d106      	bne.n	800912a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800911c:	f107 0314 	add.w	r3, r7, #20
 8009120:	4618      	mov	r0, r3
 8009122:	f001 fbf3 	bl	800a90c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009126:	2301      	movs	r3, #1
 8009128:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800912a:	f002 fbef 	bl	800b90c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800912e:	f001 f95b 	bl	800a3e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009132:	f002 fbb9 	bl	800b8a8 <vPortEnterCritical>
 8009136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009138:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800913c:	b25b      	sxtb	r3, r3
 800913e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009142:	d103      	bne.n	800914c <xQueueGenericSend+0x174>
 8009144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009146:	2200      	movs	r2, #0
 8009148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800914c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009152:	b25b      	sxtb	r3, r3
 8009154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009158:	d103      	bne.n	8009162 <xQueueGenericSend+0x18a>
 800915a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915c:	2200      	movs	r2, #0
 800915e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009162:	f002 fbd3 	bl	800b90c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009166:	1d3a      	adds	r2, r7, #4
 8009168:	f107 0314 	add.w	r3, r7, #20
 800916c:	4611      	mov	r1, r2
 800916e:	4618      	mov	r0, r3
 8009170:	f001 fbe2 	bl	800a938 <xTaskCheckForTimeOut>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d124      	bne.n	80091c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800917a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800917c:	f000 fd28 	bl	8009bd0 <prvIsQueueFull>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	d018      	beq.n	80091b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009188:	3310      	adds	r3, #16
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	4611      	mov	r1, r2
 800918e:	4618      	mov	r0, r3
 8009190:	f001 fb06 	bl	800a7a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009194:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009196:	f000 fcb3 	bl	8009b00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800919a:	f001 f933 	bl	800a404 <xTaskResumeAll>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f47f af7c 	bne.w	800909e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80091a6:	4b0c      	ldr	r3, [pc, #48]	@ (80091d8 <xQueueGenericSend+0x200>)
 80091a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	f3bf 8f4f 	dsb	sy
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	e772      	b.n	800909e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091ba:	f000 fca1 	bl	8009b00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091be:	f001 f921 	bl	800a404 <xTaskResumeAll>
 80091c2:	e76c      	b.n	800909e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80091c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091c6:	f000 fc9b 	bl	8009b00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091ca:	f001 f91b 	bl	800a404 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80091ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3738      	adds	r7, #56	@ 0x38
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	e000ed04 	.word	0xe000ed04

080091dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b090      	sub	sp, #64	@ 0x40
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
 80091e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80091ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d10b      	bne.n	800920c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80091f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f8:	f383 8811 	msr	BASEPRI, r3
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009206:	bf00      	nop
 8009208:	bf00      	nop
 800920a:	e7fd      	b.n	8009208 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d103      	bne.n	800921a <xQueueGenericSendFromISR+0x3e>
 8009212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009216:	2b00      	cmp	r3, #0
 8009218:	d101      	bne.n	800921e <xQueueGenericSendFromISR+0x42>
 800921a:	2301      	movs	r3, #1
 800921c:	e000      	b.n	8009220 <xQueueGenericSendFromISR+0x44>
 800921e:	2300      	movs	r3, #0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10b      	bne.n	800923c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009228:	f383 8811 	msr	BASEPRI, r3
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009236:	bf00      	nop
 8009238:	bf00      	nop
 800923a:	e7fd      	b.n	8009238 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2b02      	cmp	r3, #2
 8009240:	d103      	bne.n	800924a <xQueueGenericSendFromISR+0x6e>
 8009242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009246:	2b01      	cmp	r3, #1
 8009248:	d101      	bne.n	800924e <xQueueGenericSendFromISR+0x72>
 800924a:	2301      	movs	r3, #1
 800924c:	e000      	b.n	8009250 <xQueueGenericSendFromISR+0x74>
 800924e:	2300      	movs	r3, #0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10b      	bne.n	800926c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	623b      	str	r3, [r7, #32]
}
 8009266:	bf00      	nop
 8009268:	bf00      	nop
 800926a:	e7fd      	b.n	8009268 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800926c:	f002 fbfc 	bl	800ba68 <vPortValidateInterruptPriority>
	__asm volatile
 8009270:	f3ef 8211 	mrs	r2, BASEPRI
 8009274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009278:	f383 8811 	msr	BASEPRI, r3
 800927c:	f3bf 8f6f 	isb	sy
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	61fa      	str	r2, [r7, #28]
 8009286:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8009288:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800928a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800928c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800928e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009294:	429a      	cmp	r2, r3
 8009296:	d302      	bcc.n	800929e <xQueueGenericSendFromISR+0xc2>
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	2b02      	cmp	r3, #2
 800929c:	d12f      	bne.n	80092fe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800929e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80092a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	68b9      	ldr	r1, [r7, #8]
 80092b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80092b4:	f000 fb94 	bl	80099e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092b8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80092bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c0:	d112      	bne.n	80092e8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d016      	beq.n	80092f8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092cc:	3324      	adds	r3, #36	@ 0x24
 80092ce:	4618      	mov	r0, r3
 80092d0:	f001 fab8 	bl	800a844 <xTaskRemoveFromEventList>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00e      	beq.n	80092f8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00b      	beq.n	80092f8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	601a      	str	r2, [r3, #0]
 80092e6:	e007      	b.n	80092f8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80092ec:	3301      	adds	r3, #1
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	b25a      	sxtb	r2, r3
 80092f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80092f8:	2301      	movs	r3, #1
 80092fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80092fc:	e001      	b.n	8009302 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80092fe:	2300      	movs	r3, #0
 8009300:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009304:	617b      	str	r3, [r7, #20]
	__asm volatile
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f383 8811 	msr	BASEPRI, r3
}
 800930c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800930e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009310:	4618      	mov	r0, r3
 8009312:	3740      	adds	r7, #64	@ 0x40
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b08e      	sub	sp, #56	@ 0x38
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10b      	bne.n	8009344 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	623b      	str	r3, [r7, #32]
}
 800933e:	bf00      	nop
 8009340:	bf00      	nop
 8009342:	e7fd      	b.n	8009340 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00b      	beq.n	8009364 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800934c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009350:	f383 8811 	msr	BASEPRI, r3
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	f3bf 8f4f 	dsb	sy
 800935c:	61fb      	str	r3, [r7, #28]
}
 800935e:	bf00      	nop
 8009360:	bf00      	nop
 8009362:	e7fd      	b.n	8009360 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d103      	bne.n	8009374 <xQueueGiveFromISR+0x5c>
 800936c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d101      	bne.n	8009378 <xQueueGiveFromISR+0x60>
 8009374:	2301      	movs	r3, #1
 8009376:	e000      	b.n	800937a <xQueueGiveFromISR+0x62>
 8009378:	2300      	movs	r3, #0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d10b      	bne.n	8009396 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800937e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009382:	f383 8811 	msr	BASEPRI, r3
 8009386:	f3bf 8f6f 	isb	sy
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	61bb      	str	r3, [r7, #24]
}
 8009390:	bf00      	nop
 8009392:	bf00      	nop
 8009394:	e7fd      	b.n	8009392 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009396:	f002 fb67 	bl	800ba68 <vPortValidateInterruptPriority>
	__asm volatile
 800939a:	f3ef 8211 	mrs	r2, BASEPRI
 800939e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093a2:	f383 8811 	msr	BASEPRI, r3
 80093a6:	f3bf 8f6f 	isb	sy
 80093aa:	f3bf 8f4f 	dsb	sy
 80093ae:	617a      	str	r2, [r7, #20]
 80093b0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80093b2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80093bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d22b      	bcs.n	800941e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80093c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80093d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d2:	1c5a      	adds	r2, r3, #1
 80093d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80093d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80093dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e0:	d112      	bne.n	8009408 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d016      	beq.n	8009418 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ec:	3324      	adds	r3, #36	@ 0x24
 80093ee:	4618      	mov	r0, r3
 80093f0:	f001 fa28 	bl	800a844 <xTaskRemoveFromEventList>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00e      	beq.n	8009418 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00b      	beq.n	8009418 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	2201      	movs	r2, #1
 8009404:	601a      	str	r2, [r3, #0]
 8009406:	e007      	b.n	8009418 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009408:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800940c:	3301      	adds	r3, #1
 800940e:	b2db      	uxtb	r3, r3
 8009410:	b25a      	sxtb	r2, r3
 8009412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009418:	2301      	movs	r3, #1
 800941a:	637b      	str	r3, [r7, #52]	@ 0x34
 800941c:	e001      	b.n	8009422 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800941e:	2300      	movs	r3, #0
 8009420:	637b      	str	r3, [r7, #52]	@ 0x34
 8009422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009424:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f383 8811 	msr	BASEPRI, r3
}
 800942c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800942e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009430:	4618      	mov	r0, r3
 8009432:	3738      	adds	r7, #56	@ 0x38
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b08c      	sub	sp, #48	@ 0x30
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009444:	2300      	movs	r3, #0
 8009446:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800944c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10b      	bne.n	800946a <xQueueReceive+0x32>
	__asm volatile
 8009452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009456:	f383 8811 	msr	BASEPRI, r3
 800945a:	f3bf 8f6f 	isb	sy
 800945e:	f3bf 8f4f 	dsb	sy
 8009462:	623b      	str	r3, [r7, #32]
}
 8009464:	bf00      	nop
 8009466:	bf00      	nop
 8009468:	e7fd      	b.n	8009466 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d103      	bne.n	8009478 <xQueueReceive+0x40>
 8009470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009474:	2b00      	cmp	r3, #0
 8009476:	d101      	bne.n	800947c <xQueueReceive+0x44>
 8009478:	2301      	movs	r3, #1
 800947a:	e000      	b.n	800947e <xQueueReceive+0x46>
 800947c:	2300      	movs	r3, #0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10b      	bne.n	800949a <xQueueReceive+0x62>
	__asm volatile
 8009482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009486:	f383 8811 	msr	BASEPRI, r3
 800948a:	f3bf 8f6f 	isb	sy
 800948e:	f3bf 8f4f 	dsb	sy
 8009492:	61fb      	str	r3, [r7, #28]
}
 8009494:	bf00      	nop
 8009496:	bf00      	nop
 8009498:	e7fd      	b.n	8009496 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800949a:	f001 fb99 	bl	800abd0 <xTaskGetSchedulerState>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d102      	bne.n	80094aa <xQueueReceive+0x72>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d101      	bne.n	80094ae <xQueueReceive+0x76>
 80094aa:	2301      	movs	r3, #1
 80094ac:	e000      	b.n	80094b0 <xQueueReceive+0x78>
 80094ae:	2300      	movs	r3, #0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10b      	bne.n	80094cc <xQueueReceive+0x94>
	__asm volatile
 80094b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b8:	f383 8811 	msr	BASEPRI, r3
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	61bb      	str	r3, [r7, #24]
}
 80094c6:	bf00      	nop
 80094c8:	bf00      	nop
 80094ca:	e7fd      	b.n	80094c8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80094cc:	f002 f9ec 	bl	800b8a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d01f      	beq.n	800951c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80094dc:	68b9      	ldr	r1, [r7, #8]
 80094de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094e0:	f000 fae8 	bl	8009ab4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80094e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e6:	1e5a      	subs	r2, r3, #1
 80094e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00f      	beq.n	8009514 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f6:	3310      	adds	r3, #16
 80094f8:	4618      	mov	r0, r3
 80094fa:	f001 f9a3 	bl	800a844 <xTaskRemoveFromEventList>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d007      	beq.n	8009514 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009504:	4b3c      	ldr	r3, [pc, #240]	@ (80095f8 <xQueueReceive+0x1c0>)
 8009506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800950a:	601a      	str	r2, [r3, #0]
 800950c:	f3bf 8f4f 	dsb	sy
 8009510:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009514:	f002 f9fa 	bl	800b90c <vPortExitCritical>
				return pdPASS;
 8009518:	2301      	movs	r3, #1
 800951a:	e069      	b.n	80095f0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d103      	bne.n	800952a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009522:	f002 f9f3 	bl	800b90c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009526:	2300      	movs	r3, #0
 8009528:	e062      	b.n	80095f0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800952a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952c:	2b00      	cmp	r3, #0
 800952e:	d106      	bne.n	800953e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009530:	f107 0310 	add.w	r3, r7, #16
 8009534:	4618      	mov	r0, r3
 8009536:	f001 f9e9 	bl	800a90c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800953a:	2301      	movs	r3, #1
 800953c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800953e:	f002 f9e5 	bl	800b90c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009542:	f000 ff51 	bl	800a3e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009546:	f002 f9af 	bl	800b8a8 <vPortEnterCritical>
 800954a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800954c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009550:	b25b      	sxtb	r3, r3
 8009552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009556:	d103      	bne.n	8009560 <xQueueReceive+0x128>
 8009558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800955a:	2200      	movs	r2, #0
 800955c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009562:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009566:	b25b      	sxtb	r3, r3
 8009568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800956c:	d103      	bne.n	8009576 <xQueueReceive+0x13e>
 800956e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009570:	2200      	movs	r2, #0
 8009572:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009576:	f002 f9c9 	bl	800b90c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800957a:	1d3a      	adds	r2, r7, #4
 800957c:	f107 0310 	add.w	r3, r7, #16
 8009580:	4611      	mov	r1, r2
 8009582:	4618      	mov	r0, r3
 8009584:	f001 f9d8 	bl	800a938 <xTaskCheckForTimeOut>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d123      	bne.n	80095d6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800958e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009590:	f000 fb08 	bl	8009ba4 <prvIsQueueEmpty>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d017      	beq.n	80095ca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800959a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800959c:	3324      	adds	r3, #36	@ 0x24
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	4611      	mov	r1, r2
 80095a2:	4618      	mov	r0, r3
 80095a4:	f001 f8fc 	bl	800a7a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80095a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095aa:	f000 faa9 	bl	8009b00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80095ae:	f000 ff29 	bl	800a404 <xTaskResumeAll>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d189      	bne.n	80094cc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80095b8:	4b0f      	ldr	r3, [pc, #60]	@ (80095f8 <xQueueReceive+0x1c0>)
 80095ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095be:	601a      	str	r2, [r3, #0]
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	e780      	b.n	80094cc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80095ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095cc:	f000 fa98 	bl	8009b00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80095d0:	f000 ff18 	bl	800a404 <xTaskResumeAll>
 80095d4:	e77a      	b.n	80094cc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80095d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095d8:	f000 fa92 	bl	8009b00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80095dc:	f000 ff12 	bl	800a404 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095e2:	f000 fadf 	bl	8009ba4 <prvIsQueueEmpty>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	f43f af6f 	beq.w	80094cc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80095ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3730      	adds	r7, #48	@ 0x30
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	e000ed04 	.word	0xe000ed04

080095fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b08e      	sub	sp, #56	@ 0x38
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009606:	2300      	movs	r3, #0
 8009608:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800960e:	2300      	movs	r3, #0
 8009610:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10b      	bne.n	8009630 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800961c:	f383 8811 	msr	BASEPRI, r3
 8009620:	f3bf 8f6f 	isb	sy
 8009624:	f3bf 8f4f 	dsb	sy
 8009628:	623b      	str	r3, [r7, #32]
}
 800962a:	bf00      	nop
 800962c:	bf00      	nop
 800962e:	e7fd      	b.n	800962c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00b      	beq.n	8009650 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963c:	f383 8811 	msr	BASEPRI, r3
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	f3bf 8f4f 	dsb	sy
 8009648:	61fb      	str	r3, [r7, #28]
}
 800964a:	bf00      	nop
 800964c:	bf00      	nop
 800964e:	e7fd      	b.n	800964c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009650:	f001 fabe 	bl	800abd0 <xTaskGetSchedulerState>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d102      	bne.n	8009660 <xQueueSemaphoreTake+0x64>
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d101      	bne.n	8009664 <xQueueSemaphoreTake+0x68>
 8009660:	2301      	movs	r3, #1
 8009662:	e000      	b.n	8009666 <xQueueSemaphoreTake+0x6a>
 8009664:	2300      	movs	r3, #0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d10b      	bne.n	8009682 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800966a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800966e:	f383 8811 	msr	BASEPRI, r3
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	f3bf 8f4f 	dsb	sy
 800967a:	61bb      	str	r3, [r7, #24]
}
 800967c:	bf00      	nop
 800967e:	bf00      	nop
 8009680:	e7fd      	b.n	800967e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009682:	f002 f911 	bl	800b8a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800968a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800968c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800968e:	2b00      	cmp	r3, #0
 8009690:	d024      	beq.n	80096dc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009694:	1e5a      	subs	r2, r3, #1
 8009696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009698:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800969a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d104      	bne.n	80096ac <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80096a2:	f001 fc0f 	bl	800aec4 <pvTaskIncrementMutexHeldCount>
 80096a6:	4602      	mov	r2, r0
 80096a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096aa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ae:	691b      	ldr	r3, [r3, #16]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00f      	beq.n	80096d4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b6:	3310      	adds	r3, #16
 80096b8:	4618      	mov	r0, r3
 80096ba:	f001 f8c3 	bl	800a844 <xTaskRemoveFromEventList>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d007      	beq.n	80096d4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80096c4:	4b54      	ldr	r3, [pc, #336]	@ (8009818 <xQueueSemaphoreTake+0x21c>)
 80096c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096ca:	601a      	str	r2, [r3, #0]
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80096d4:	f002 f91a 	bl	800b90c <vPortExitCritical>
				return pdPASS;
 80096d8:	2301      	movs	r3, #1
 80096da:	e098      	b.n	800980e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d112      	bne.n	8009708 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80096e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d00b      	beq.n	8009700 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80096e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ec:	f383 8811 	msr	BASEPRI, r3
 80096f0:	f3bf 8f6f 	isb	sy
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	617b      	str	r3, [r7, #20]
}
 80096fa:	bf00      	nop
 80096fc:	bf00      	nop
 80096fe:	e7fd      	b.n	80096fc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009700:	f002 f904 	bl	800b90c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009704:	2300      	movs	r3, #0
 8009706:	e082      	b.n	800980e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800970a:	2b00      	cmp	r3, #0
 800970c:	d106      	bne.n	800971c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800970e:	f107 030c 	add.w	r3, r7, #12
 8009712:	4618      	mov	r0, r3
 8009714:	f001 f8fa 	bl	800a90c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009718:	2301      	movs	r3, #1
 800971a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800971c:	f002 f8f6 	bl	800b90c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009720:	f000 fe62 	bl	800a3e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009724:	f002 f8c0 	bl	800b8a8 <vPortEnterCritical>
 8009728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800972a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800972e:	b25b      	sxtb	r3, r3
 8009730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009734:	d103      	bne.n	800973e <xQueueSemaphoreTake+0x142>
 8009736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009738:	2200      	movs	r2, #0
 800973a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800973e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009740:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009744:	b25b      	sxtb	r3, r3
 8009746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800974a:	d103      	bne.n	8009754 <xQueueSemaphoreTake+0x158>
 800974c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974e:	2200      	movs	r2, #0
 8009750:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009754:	f002 f8da 	bl	800b90c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009758:	463a      	mov	r2, r7
 800975a:	f107 030c 	add.w	r3, r7, #12
 800975e:	4611      	mov	r1, r2
 8009760:	4618      	mov	r0, r3
 8009762:	f001 f8e9 	bl	800a938 <xTaskCheckForTimeOut>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d132      	bne.n	80097d2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800976c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800976e:	f000 fa19 	bl	8009ba4 <prvIsQueueEmpty>
 8009772:	4603      	mov	r3, r0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d026      	beq.n	80097c6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d109      	bne.n	8009794 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009780:	f002 f892 	bl	800b8a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	4618      	mov	r0, r3
 800978a:	f001 fa3f 	bl	800ac0c <xTaskPriorityInherit>
 800978e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009790:	f002 f8bc 	bl	800b90c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009796:	3324      	adds	r3, #36	@ 0x24
 8009798:	683a      	ldr	r2, [r7, #0]
 800979a:	4611      	mov	r1, r2
 800979c:	4618      	mov	r0, r3
 800979e:	f000 ffff 	bl	800a7a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80097a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80097a4:	f000 f9ac 	bl	8009b00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80097a8:	f000 fe2c 	bl	800a404 <xTaskResumeAll>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f47f af67 	bne.w	8009682 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80097b4:	4b18      	ldr	r3, [pc, #96]	@ (8009818 <xQueueSemaphoreTake+0x21c>)
 80097b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097ba:	601a      	str	r2, [r3, #0]
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	f3bf 8f6f 	isb	sy
 80097c4:	e75d      	b.n	8009682 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80097c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80097c8:	f000 f99a 	bl	8009b00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097cc:	f000 fe1a 	bl	800a404 <xTaskResumeAll>
 80097d0:	e757      	b.n	8009682 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80097d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80097d4:	f000 f994 	bl	8009b00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80097d8:	f000 fe14 	bl	800a404 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80097de:	f000 f9e1 	bl	8009ba4 <prvIsQueueEmpty>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f43f af4c 	beq.w	8009682 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80097ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00d      	beq.n	800980c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80097f0:	f002 f85a 	bl	800b8a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80097f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80097f6:	f000 f8db 	bl	80099b0 <prvGetDisinheritPriorityAfterTimeout>
 80097fa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80097fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009802:	4618      	mov	r0, r3
 8009804:	f001 fada 	bl	800adbc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009808:	f002 f880 	bl	800b90c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800980c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800980e:	4618      	mov	r0, r3
 8009810:	3738      	adds	r7, #56	@ 0x38
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	e000ed04 	.word	0xe000ed04

0800981c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b08e      	sub	sp, #56	@ 0x38
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800982c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800982e:	2b00      	cmp	r3, #0
 8009830:	d10b      	bne.n	800984a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009836:	f383 8811 	msr	BASEPRI, r3
 800983a:	f3bf 8f6f 	isb	sy
 800983e:	f3bf 8f4f 	dsb	sy
 8009842:	623b      	str	r3, [r7, #32]
}
 8009844:	bf00      	nop
 8009846:	bf00      	nop
 8009848:	e7fd      	b.n	8009846 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d103      	bne.n	8009858 <xQueueReceiveFromISR+0x3c>
 8009850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009854:	2b00      	cmp	r3, #0
 8009856:	d101      	bne.n	800985c <xQueueReceiveFromISR+0x40>
 8009858:	2301      	movs	r3, #1
 800985a:	e000      	b.n	800985e <xQueueReceiveFromISR+0x42>
 800985c:	2300      	movs	r3, #0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10b      	bne.n	800987a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009866:	f383 8811 	msr	BASEPRI, r3
 800986a:	f3bf 8f6f 	isb	sy
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	61fb      	str	r3, [r7, #28]
}
 8009874:	bf00      	nop
 8009876:	bf00      	nop
 8009878:	e7fd      	b.n	8009876 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800987a:	f002 f8f5 	bl	800ba68 <vPortValidateInterruptPriority>
	__asm volatile
 800987e:	f3ef 8211 	mrs	r2, BASEPRI
 8009882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009886:	f383 8811 	msr	BASEPRI, r3
 800988a:	f3bf 8f6f 	isb	sy
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	61ba      	str	r2, [r7, #24]
 8009894:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009896:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009898:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800989a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800989c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800989e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d02f      	beq.n	8009906 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80098a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80098ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80098b0:	68b9      	ldr	r1, [r7, #8]
 80098b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80098b4:	f000 f8fe 	bl	8009ab4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80098b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ba:	1e5a      	subs	r2, r3, #1
 80098bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098be:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80098c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80098c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c8:	d112      	bne.n	80098f0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098cc:	691b      	ldr	r3, [r3, #16]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d016      	beq.n	8009900 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d4:	3310      	adds	r3, #16
 80098d6:	4618      	mov	r0, r3
 80098d8:	f000 ffb4 	bl	800a844 <xTaskRemoveFromEventList>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00e      	beq.n	8009900 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d00b      	beq.n	8009900 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	601a      	str	r2, [r3, #0]
 80098ee:	e007      	b.n	8009900 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80098f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098f4:	3301      	adds	r3, #1
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	b25a      	sxtb	r2, r3
 80098fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009900:	2301      	movs	r3, #1
 8009902:	637b      	str	r3, [r7, #52]	@ 0x34
 8009904:	e001      	b.n	800990a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009906:	2300      	movs	r3, #0
 8009908:	637b      	str	r3, [r7, #52]	@ 0x34
 800990a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800990c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	f383 8811 	msr	BASEPRI, r3
}
 8009914:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009918:	4618      	mov	r0, r3
 800991a:	3738      	adds	r7, #56	@ 0x38
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b086      	sub	sp, #24
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d10b      	bne.n	800994a <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 8009932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009936:	f383 8811 	msr	BASEPRI, r3
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	f3bf 8f4f 	dsb	sy
 8009942:	60fb      	str	r3, [r7, #12]
}
 8009944:	bf00      	nop
 8009946:	bf00      	nop
 8009948:	e7fd      	b.n	8009946 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800994a:	f001 ffad 	bl	800b8a8 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800995a:	f001 ffd7 	bl	800b90c <vPortExitCritical>

	return uxReturn;
 800995e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009960:	4618      	mov	r0, r3
 8009962:	3718      	adds	r7, #24
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d10b      	bne.n	8009992 <vQueueDelete+0x2a>
	__asm volatile
 800997a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	60bb      	str	r3, [r7, #8]
}
 800998c:	bf00      	nop
 800998e:	bf00      	nop
 8009990:	e7fd      	b.n	800998e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f000 f95e 	bl	8009c54 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d102      	bne.n	80099a8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80099a2:	68f8      	ldr	r0, [r7, #12]
 80099a4:	f002 f970 	bl	800bc88 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80099a8:	bf00      	nop
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d006      	beq.n	80099ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80099ca:	60fb      	str	r3, [r7, #12]
 80099cc:	e001      	b.n	80099d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80099ce:	2300      	movs	r3, #0
 80099d0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80099d2:	68fb      	ldr	r3, [r7, #12]
	}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3714      	adds	r7, #20
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80099ec:	2300      	movs	r3, #0
 80099ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d10d      	bne.n	8009a1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d14d      	bne.n	8009aa2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f001 f966 	bl	800acdc <xTaskPriorityDisinherit>
 8009a10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2200      	movs	r2, #0
 8009a16:	609a      	str	r2, [r3, #8]
 8009a18:	e043      	b.n	8009aa2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d119      	bne.n	8009a54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6858      	ldr	r0, [r3, #4]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a28:	461a      	mov	r2, r3
 8009a2a:	68b9      	ldr	r1, [r7, #8]
 8009a2c:	f002 faf6 	bl	800c01c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	685a      	ldr	r2, [r3, #4]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a38:	441a      	add	r2, r3
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	685a      	ldr	r2, [r3, #4]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d32b      	bcc.n	8009aa2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	605a      	str	r2, [r3, #4]
 8009a52:	e026      	b.n	8009aa2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	68d8      	ldr	r0, [r3, #12]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	68b9      	ldr	r1, [r7, #8]
 8009a60:	f002 fadc 	bl	800c01c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	68da      	ldr	r2, [r3, #12]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a6c:	425b      	negs	r3, r3
 8009a6e:	441a      	add	r2, r3
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	68da      	ldr	r2, [r3, #12]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d207      	bcs.n	8009a90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	689a      	ldr	r2, [r3, #8]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a88:	425b      	negs	r3, r3
 8009a8a:	441a      	add	r2, r3
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2b02      	cmp	r3, #2
 8009a94:	d105      	bne.n	8009aa2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d002      	beq.n	8009aa2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	1c5a      	adds	r2, r3, #1
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009aaa:	697b      	ldr	r3, [r7, #20]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3718      	adds	r7, #24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d018      	beq.n	8009af8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	68da      	ldr	r2, [r3, #12]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ace:	441a      	add	r2, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	68da      	ldr	r2, [r3, #12]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d303      	bcc.n	8009ae8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	68d9      	ldr	r1, [r3, #12]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009af0:	461a      	mov	r2, r3
 8009af2:	6838      	ldr	r0, [r7, #0]
 8009af4:	f002 fa92 	bl	800c01c <memcpy>
	}
}
 8009af8:	bf00      	nop
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b08:	f001 fece 	bl	800b8a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b14:	e011      	b.n	8009b3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d012      	beq.n	8009b44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	3324      	adds	r3, #36	@ 0x24
 8009b22:	4618      	mov	r0, r3
 8009b24:	f000 fe8e 	bl	800a844 <xTaskRemoveFromEventList>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b2e:	f000 ff67 	bl	800aa00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b32:	7bfb      	ldrb	r3, [r7, #15]
 8009b34:	3b01      	subs	r3, #1
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	dce9      	bgt.n	8009b16 <prvUnlockQueue+0x16>
 8009b42:	e000      	b.n	8009b46 <prvUnlockQueue+0x46>
					break;
 8009b44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	22ff      	movs	r2, #255	@ 0xff
 8009b4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009b4e:	f001 fedd 	bl	800b90c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b52:	f001 fea9 	bl	800b8a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b5e:	e011      	b.n	8009b84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d012      	beq.n	8009b8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	3310      	adds	r3, #16
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f000 fe69 	bl	800a844 <xTaskRemoveFromEventList>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d001      	beq.n	8009b7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b78:	f000 ff42 	bl	800aa00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b7c:	7bbb      	ldrb	r3, [r7, #14]
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	dce9      	bgt.n	8009b60 <prvUnlockQueue+0x60>
 8009b8c:	e000      	b.n	8009b90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	22ff      	movs	r2, #255	@ 0xff
 8009b94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009b98:	f001 feb8 	bl	800b90c <vPortExitCritical>
}
 8009b9c:	bf00      	nop
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bac:	f001 fe7c 	bl	800b8a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d102      	bne.n	8009bbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	60fb      	str	r3, [r7, #12]
 8009bbc:	e001      	b.n	8009bc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bc2:	f001 fea3 	bl	800b90c <vPortExitCritical>

	return xReturn;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bd8:	f001 fe66 	bl	800b8a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d102      	bne.n	8009bee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009be8:	2301      	movs	r3, #1
 8009bea:	60fb      	str	r3, [r7, #12]
 8009bec:	e001      	b.n	8009bf2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bf2:	f001 fe8b 	bl	800b90c <vPortExitCritical>

	return xReturn;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	60fb      	str	r3, [r7, #12]
 8009c0e:	e014      	b.n	8009c3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009c10:	4a0f      	ldr	r2, [pc, #60]	@ (8009c50 <vQueueAddToRegistry+0x50>)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10b      	bne.n	8009c34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009c1c:	490c      	ldr	r1, [pc, #48]	@ (8009c50 <vQueueAddToRegistry+0x50>)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009c26:	4a0a      	ldr	r2, [pc, #40]	@ (8009c50 <vQueueAddToRegistry+0x50>)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	00db      	lsls	r3, r3, #3
 8009c2c:	4413      	add	r3, r2
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009c32:	e006      	b.n	8009c42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3301      	adds	r3, #1
 8009c38:	60fb      	str	r3, [r7, #12]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b07      	cmp	r3, #7
 8009c3e:	d9e7      	bls.n	8009c10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c40:	bf00      	nop
 8009c42:	bf00      	nop
 8009c44:	3714      	adds	r7, #20
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	20000d28 	.word	0x20000d28

08009c54 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	60fb      	str	r3, [r7, #12]
 8009c60:	e016      	b.n	8009c90 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009c62:	4a10      	ldr	r2, [pc, #64]	@ (8009ca4 <vQueueUnregisterQueue+0x50>)
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	00db      	lsls	r3, r3, #3
 8009c68:	4413      	add	r3, r2
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d10b      	bne.n	8009c8a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009c72:	4a0c      	ldr	r2, [pc, #48]	@ (8009ca4 <vQueueUnregisterQueue+0x50>)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2100      	movs	r1, #0
 8009c78:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009c7c:	4a09      	ldr	r2, [pc, #36]	@ (8009ca4 <vQueueUnregisterQueue+0x50>)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	00db      	lsls	r3, r3, #3
 8009c82:	4413      	add	r3, r2
 8009c84:	2200      	movs	r2, #0
 8009c86:	605a      	str	r2, [r3, #4]
				break;
 8009c88:	e006      	b.n	8009c98 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	60fb      	str	r3, [r7, #12]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2b07      	cmp	r3, #7
 8009c94:	d9e5      	bls.n	8009c62 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009c96:	bf00      	nop
 8009c98:	bf00      	nop
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	20000d28 	.word	0x20000d28

08009ca8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009cb8:	f001 fdf6 	bl	800b8a8 <vPortEnterCritical>
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009cc2:	b25b      	sxtb	r3, r3
 8009cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc8:	d103      	bne.n	8009cd2 <vQueueWaitForMessageRestricted+0x2a>
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009cd8:	b25b      	sxtb	r3, r3
 8009cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cde:	d103      	bne.n	8009ce8 <vQueueWaitForMessageRestricted+0x40>
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ce8:	f001 fe10 	bl	800b90c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d106      	bne.n	8009d02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	3324      	adds	r3, #36	@ 0x24
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	68b9      	ldr	r1, [r7, #8]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f000 fd75 	bl	800a7ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009d02:	6978      	ldr	r0, [r7, #20]
 8009d04:	f7ff fefc 	bl	8009b00 <prvUnlockQueue>
	}
 8009d08:	bf00      	nop
 8009d0a:	3718      	adds	r7, #24
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b08e      	sub	sp, #56	@ 0x38
 8009d14:	af04      	add	r7, sp, #16
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	607a      	str	r2, [r7, #4]
 8009d1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10b      	bne.n	8009d3c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	623b      	str	r3, [r7, #32]
}
 8009d36:	bf00      	nop
 8009d38:	bf00      	nop
 8009d3a:	e7fd      	b.n	8009d38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10b      	bne.n	8009d5a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d46:	f383 8811 	msr	BASEPRI, r3
 8009d4a:	f3bf 8f6f 	isb	sy
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	61fb      	str	r3, [r7, #28]
}
 8009d54:	bf00      	nop
 8009d56:	bf00      	nop
 8009d58:	e7fd      	b.n	8009d56 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009d5a:	23a8      	movs	r3, #168	@ 0xa8
 8009d5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	2ba8      	cmp	r3, #168	@ 0xa8
 8009d62:	d00b      	beq.n	8009d7c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d68:	f383 8811 	msr	BASEPRI, r3
 8009d6c:	f3bf 8f6f 	isb	sy
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	61bb      	str	r3, [r7, #24]
}
 8009d76:	bf00      	nop
 8009d78:	bf00      	nop
 8009d7a:	e7fd      	b.n	8009d78 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009d7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d01e      	beq.n	8009dc2 <xTaskCreateStatic+0xb2>
 8009d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d01b      	beq.n	8009dc2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d8c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d92:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d96:	2202      	movs	r2, #2
 8009d98:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	9303      	str	r3, [sp, #12]
 8009da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da2:	9302      	str	r3, [sp, #8]
 8009da4:	f107 0314 	add.w	r3, r7, #20
 8009da8:	9301      	str	r3, [sp, #4]
 8009daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	68b9      	ldr	r1, [r7, #8]
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f000 f851 	bl	8009e5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009dba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009dbc:	f000 f8f6 	bl	8009fac <prvAddNewTaskToReadyList>
 8009dc0:	e001      	b.n	8009dc6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009dc6:	697b      	ldr	r3, [r7, #20]
	}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3728      	adds	r7, #40	@ 0x28
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b08c      	sub	sp, #48	@ 0x30
 8009dd4:	af04      	add	r7, sp, #16
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	603b      	str	r3, [r7, #0]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009de0:	88fb      	ldrh	r3, [r7, #6]
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4618      	mov	r0, r3
 8009de6:	f001 fe81 	bl	800baec <pvPortMalloc>
 8009dea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00e      	beq.n	8009e10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009df2:	20a8      	movs	r0, #168	@ 0xa8
 8009df4:	f001 fe7a 	bl	800baec <pvPortMalloc>
 8009df8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d003      	beq.n	8009e08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	697a      	ldr	r2, [r7, #20]
 8009e04:	631a      	str	r2, [r3, #48]	@ 0x30
 8009e06:	e005      	b.n	8009e14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009e08:	6978      	ldr	r0, [r7, #20]
 8009e0a:	f001 ff3d 	bl	800bc88 <vPortFree>
 8009e0e:	e001      	b.n	8009e14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009e10:	2300      	movs	r3, #0
 8009e12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d017      	beq.n	8009e4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009e22:	88fa      	ldrh	r2, [r7, #6]
 8009e24:	2300      	movs	r3, #0
 8009e26:	9303      	str	r3, [sp, #12]
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	9302      	str	r3, [sp, #8]
 8009e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e2e:	9301      	str	r3, [sp, #4]
 8009e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e32:	9300      	str	r3, [sp, #0]
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	68b9      	ldr	r1, [r7, #8]
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	f000 f80f 	bl	8009e5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e3e:	69f8      	ldr	r0, [r7, #28]
 8009e40:	f000 f8b4 	bl	8009fac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009e44:	2301      	movs	r3, #1
 8009e46:	61bb      	str	r3, [r7, #24]
 8009e48:	e002      	b.n	8009e50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009e50:	69bb      	ldr	r3, [r7, #24]
	}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3720      	adds	r7, #32
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
	...

08009e5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b088      	sub	sp, #32
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	607a      	str	r2, [r7, #4]
 8009e68:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e6c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	461a      	mov	r2, r3
 8009e74:	21a5      	movs	r1, #165	@ 0xa5
 8009e76:	f002 f847 	bl	800bf08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009e84:	3b01      	subs	r3, #1
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4413      	add	r3, r2
 8009e8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	f023 0307 	bic.w	r3, r3, #7
 8009e92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	f003 0307 	and.w	r3, r3, #7
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00b      	beq.n	8009eb6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	617b      	str	r3, [r7, #20]
}
 8009eb0:	bf00      	nop
 8009eb2:	bf00      	nop
 8009eb4:	e7fd      	b.n	8009eb2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d01f      	beq.n	8009efc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	61fb      	str	r3, [r7, #28]
 8009ec0:	e012      	b.n	8009ee8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009ec2:	68ba      	ldr	r2, [r7, #8]
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	7819      	ldrb	r1, [r3, #0]
 8009eca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	4413      	add	r3, r2
 8009ed0:	3334      	adds	r3, #52	@ 0x34
 8009ed2:	460a      	mov	r2, r1
 8009ed4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009ed6:	68ba      	ldr	r2, [r7, #8]
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	4413      	add	r3, r2
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d006      	beq.n	8009ef0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ee2:	69fb      	ldr	r3, [r7, #28]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	61fb      	str	r3, [r7, #28]
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	2b0f      	cmp	r3, #15
 8009eec:	d9e9      	bls.n	8009ec2 <prvInitialiseNewTask+0x66>
 8009eee:	e000      	b.n	8009ef2 <prvInitialiseNewTask+0x96>
			{
				break;
 8009ef0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009efa:	e003      	b.n	8009f04 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efe:	2200      	movs	r2, #0
 8009f00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f06:	2b37      	cmp	r3, #55	@ 0x37
 8009f08:	d901      	bls.n	8009f0e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009f0a:	2337      	movs	r3, #55	@ 0x37
 8009f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f12:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f18:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f22:	3304      	adds	r3, #4
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7fe fe0f 	bl	8008b48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f2c:	3318      	adds	r3, #24
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fe fe0a 	bl	8008b48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f48:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f5c:	3354      	adds	r3, #84	@ 0x54
 8009f5e:	224c      	movs	r2, #76	@ 0x4c
 8009f60:	2100      	movs	r1, #0
 8009f62:	4618      	mov	r0, r3
 8009f64:	f001 ffd0 	bl	800bf08 <memset>
 8009f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f6a:	4a0d      	ldr	r2, [pc, #52]	@ (8009fa0 <prvInitialiseNewTask+0x144>)
 8009f6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8009f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f70:	4a0c      	ldr	r2, [pc, #48]	@ (8009fa4 <prvInitialiseNewTask+0x148>)
 8009f72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f76:	4a0c      	ldr	r2, [pc, #48]	@ (8009fa8 <prvInitialiseNewTask+0x14c>)
 8009f78:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f7a:	683a      	ldr	r2, [r7, #0]
 8009f7c:	68f9      	ldr	r1, [r7, #12]
 8009f7e:	69b8      	ldr	r0, [r7, #24]
 8009f80:	f001 fb62 	bl	800b648 <pxPortInitialiseStack>
 8009f84:	4602      	mov	r2, r0
 8009f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d002      	beq.n	8009f96 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f96:	bf00      	nop
 8009f98:	3720      	adds	r7, #32
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	20001f74 	.word	0x20001f74
 8009fa4:	20001fdc 	.word	0x20001fdc
 8009fa8:	20002044 	.word	0x20002044

08009fac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009fb4:	f001 fc78 	bl	800b8a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009fb8:	4b2d      	ldr	r3, [pc, #180]	@ (800a070 <prvAddNewTaskToReadyList+0xc4>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	4a2c      	ldr	r2, [pc, #176]	@ (800a070 <prvAddNewTaskToReadyList+0xc4>)
 8009fc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009fc2:	4b2c      	ldr	r3, [pc, #176]	@ (800a074 <prvAddNewTaskToReadyList+0xc8>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d109      	bne.n	8009fde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009fca:	4a2a      	ldr	r2, [pc, #168]	@ (800a074 <prvAddNewTaskToReadyList+0xc8>)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009fd0:	4b27      	ldr	r3, [pc, #156]	@ (800a070 <prvAddNewTaskToReadyList+0xc4>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d110      	bne.n	8009ffa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009fd8:	f000 fd36 	bl	800aa48 <prvInitialiseTaskLists>
 8009fdc:	e00d      	b.n	8009ffa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009fde:	4b26      	ldr	r3, [pc, #152]	@ (800a078 <prvAddNewTaskToReadyList+0xcc>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d109      	bne.n	8009ffa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009fe6:	4b23      	ldr	r3, [pc, #140]	@ (800a074 <prvAddNewTaskToReadyList+0xc8>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d802      	bhi.n	8009ffa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ff4:	4a1f      	ldr	r2, [pc, #124]	@ (800a074 <prvAddNewTaskToReadyList+0xc8>)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009ffa:	4b20      	ldr	r3, [pc, #128]	@ (800a07c <prvAddNewTaskToReadyList+0xd0>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	3301      	adds	r3, #1
 800a000:	4a1e      	ldr	r2, [pc, #120]	@ (800a07c <prvAddNewTaskToReadyList+0xd0>)
 800a002:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a004:	4b1d      	ldr	r3, [pc, #116]	@ (800a07c <prvAddNewTaskToReadyList+0xd0>)
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a010:	4b1b      	ldr	r3, [pc, #108]	@ (800a080 <prvAddNewTaskToReadyList+0xd4>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	429a      	cmp	r2, r3
 800a016:	d903      	bls.n	800a020 <prvAddNewTaskToReadyList+0x74>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a01c:	4a18      	ldr	r2, [pc, #96]	@ (800a080 <prvAddNewTaskToReadyList+0xd4>)
 800a01e:	6013      	str	r3, [r2, #0]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a024:	4613      	mov	r3, r2
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	4413      	add	r3, r2
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	4a15      	ldr	r2, [pc, #84]	@ (800a084 <prvAddNewTaskToReadyList+0xd8>)
 800a02e:	441a      	add	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	3304      	adds	r3, #4
 800a034:	4619      	mov	r1, r3
 800a036:	4610      	mov	r0, r2
 800a038:	f7fe fd93 	bl	8008b62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a03c:	f001 fc66 	bl	800b90c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a040:	4b0d      	ldr	r3, [pc, #52]	@ (800a078 <prvAddNewTaskToReadyList+0xcc>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00e      	beq.n	800a066 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a048:	4b0a      	ldr	r3, [pc, #40]	@ (800a074 <prvAddNewTaskToReadyList+0xc8>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a052:	429a      	cmp	r2, r3
 800a054:	d207      	bcs.n	800a066 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a056:	4b0c      	ldr	r3, [pc, #48]	@ (800a088 <prvAddNewTaskToReadyList+0xdc>)
 800a058:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a05c:	601a      	str	r2, [r3, #0]
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a066:	bf00      	nop
 800a068:	3708      	adds	r7, #8
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	2000123c 	.word	0x2000123c
 800a074:	20000d68 	.word	0x20000d68
 800a078:	20001248 	.word	0x20001248
 800a07c:	20001258 	.word	0x20001258
 800a080:	20001244 	.word	0x20001244
 800a084:	20000d6c 	.word	0x20000d6c
 800a088:	e000ed04 	.word	0xe000ed04

0800a08c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a094:	2300      	movs	r3, #0
 800a096:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d018      	beq.n	800a0d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a09e:	4b14      	ldr	r3, [pc, #80]	@ (800a0f0 <vTaskDelay+0x64>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00b      	beq.n	800a0be <vTaskDelay+0x32>
	__asm volatile
 800a0a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0aa:	f383 8811 	msr	BASEPRI, r3
 800a0ae:	f3bf 8f6f 	isb	sy
 800a0b2:	f3bf 8f4f 	dsb	sy
 800a0b6:	60bb      	str	r3, [r7, #8]
}
 800a0b8:	bf00      	nop
 800a0ba:	bf00      	nop
 800a0bc:	e7fd      	b.n	800a0ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a0be:	f000 f993 	bl	800a3e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a0c2:	2100      	movs	r1, #0
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 ff11 	bl	800aeec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a0ca:	f000 f99b 	bl	800a404 <xTaskResumeAll>
 800a0ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d107      	bne.n	800a0e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a0d6:	4b07      	ldr	r3, [pc, #28]	@ (800a0f4 <vTaskDelay+0x68>)
 800a0d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0dc:	601a      	str	r2, [r3, #0]
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a0e6:	bf00      	nop
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20001264 	.word	0x20001264
 800a0f4:	e000ed04 	.word	0xe000ed04

0800a0f8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a100:	f001 fbd2 	bl	800b8a8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d102      	bne.n	800a110 <vTaskSuspend+0x18>
 800a10a:	4b30      	ldr	r3, [pc, #192]	@ (800a1cc <vTaskSuspend+0xd4>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	e000      	b.n	800a112 <vTaskSuspend+0x1a>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	3304      	adds	r3, #4
 800a118:	4618      	mov	r0, r3
 800a11a:	f7fe fd7f 	bl	8008c1c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a122:	2b00      	cmp	r3, #0
 800a124:	d004      	beq.n	800a130 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	3318      	adds	r3, #24
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7fe fd76 	bl	8008c1c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	3304      	adds	r3, #4
 800a134:	4619      	mov	r1, r3
 800a136:	4826      	ldr	r0, [pc, #152]	@ (800a1d0 <vTaskSuspend+0xd8>)
 800a138:	f7fe fd13 	bl	8008b62 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800a142:	b2db      	uxtb	r3, r3
 800a144:	2b01      	cmp	r3, #1
 800a146:	d103      	bne.n	800a150 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a150:	f001 fbdc 	bl	800b90c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a154:	4b1f      	ldr	r3, [pc, #124]	@ (800a1d4 <vTaskSuspend+0xdc>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d005      	beq.n	800a168 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a15c:	f001 fba4 	bl	800b8a8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a160:	f000 fd16 	bl	800ab90 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a164:	f001 fbd2 	bl	800b90c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a168:	4b18      	ldr	r3, [pc, #96]	@ (800a1cc <vTaskSuspend+0xd4>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d128      	bne.n	800a1c4 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800a172:	4b18      	ldr	r3, [pc, #96]	@ (800a1d4 <vTaskSuspend+0xdc>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d018      	beq.n	800a1ac <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a17a:	4b17      	ldr	r3, [pc, #92]	@ (800a1d8 <vTaskSuspend+0xe0>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d00b      	beq.n	800a19a <vTaskSuspend+0xa2>
	__asm volatile
 800a182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a186:	f383 8811 	msr	BASEPRI, r3
 800a18a:	f3bf 8f6f 	isb	sy
 800a18e:	f3bf 8f4f 	dsb	sy
 800a192:	60bb      	str	r3, [r7, #8]
}
 800a194:	bf00      	nop
 800a196:	bf00      	nop
 800a198:	e7fd      	b.n	800a196 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800a19a:	4b10      	ldr	r3, [pc, #64]	@ (800a1dc <vTaskSuspend+0xe4>)
 800a19c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1a0:	601a      	str	r2, [r3, #0]
 800a1a2:	f3bf 8f4f 	dsb	sy
 800a1a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a1aa:	e00b      	b.n	800a1c4 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a1ac:	4b08      	ldr	r3, [pc, #32]	@ (800a1d0 <vTaskSuspend+0xd8>)
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a1e0 <vTaskSuspend+0xe8>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d103      	bne.n	800a1c0 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800a1b8:	4b04      	ldr	r3, [pc, #16]	@ (800a1cc <vTaskSuspend+0xd4>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	601a      	str	r2, [r3, #0]
	}
 800a1be:	e001      	b.n	800a1c4 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800a1c0:	f000 fa88 	bl	800a6d4 <vTaskSwitchContext>
	}
 800a1c4:	bf00      	nop
 800a1c6:	3710      	adds	r7, #16
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	20000d68 	.word	0x20000d68
 800a1d0:	20001228 	.word	0x20001228
 800a1d4:	20001248 	.word	0x20001248
 800a1d8:	20001264 	.word	0x20001264
 800a1dc:	e000ed04 	.word	0xe000ed04
 800a1e0:	2000123c 	.word	0x2000123c

0800a1e4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b087      	sub	sp, #28
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d10b      	bne.n	800a212 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800a1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fe:	f383 8811 	msr	BASEPRI, r3
 800a202:	f3bf 8f6f 	isb	sy
 800a206:	f3bf 8f4f 	dsb	sy
 800a20a:	60fb      	str	r3, [r7, #12]
}
 800a20c:	bf00      	nop
 800a20e:	bf00      	nop
 800a210:	e7fd      	b.n	800a20e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	695b      	ldr	r3, [r3, #20]
 800a216:	4a0a      	ldr	r2, [pc, #40]	@ (800a240 <prvTaskIsTaskSuspended+0x5c>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d10a      	bne.n	800a232 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a220:	4a08      	ldr	r2, [pc, #32]	@ (800a244 <prvTaskIsTaskSuspended+0x60>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d005      	beq.n	800a232 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d101      	bne.n	800a232 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800a22e:	2301      	movs	r3, #1
 800a230:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a232:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a234:	4618      	mov	r0, r3
 800a236:	371c      	adds	r7, #28
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr
 800a240:	20001228 	.word	0x20001228
 800a244:	200011fc 	.word	0x200011fc

0800a248 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d10b      	bne.n	800a272 <vTaskResume+0x2a>
	__asm volatile
 800a25a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a25e:	f383 8811 	msr	BASEPRI, r3
 800a262:	f3bf 8f6f 	isb	sy
 800a266:	f3bf 8f4f 	dsb	sy
 800a26a:	60bb      	str	r3, [r7, #8]
}
 800a26c:	bf00      	nop
 800a26e:	bf00      	nop
 800a270:	e7fd      	b.n	800a26e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800a272:	4b21      	ldr	r3, [pc, #132]	@ (800a2f8 <vTaskResume+0xb0>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d038      	beq.n	800a2ee <vTaskResume+0xa6>
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d035      	beq.n	800a2ee <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800a282:	f001 fb11 	bl	800b8a8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f7ff ffac 	bl	800a1e4 <prvTaskIsTaskSuspended>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d02b      	beq.n	800a2ea <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	3304      	adds	r3, #4
 800a296:	4618      	mov	r0, r3
 800a298:	f7fe fcc0 	bl	8008c1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2a0:	4b16      	ldr	r3, [pc, #88]	@ (800a2fc <vTaskResume+0xb4>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d903      	bls.n	800a2b0 <vTaskResume+0x68>
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ac:	4a13      	ldr	r2, [pc, #76]	@ (800a2fc <vTaskResume+0xb4>)
 800a2ae:	6013      	str	r3, [r2, #0]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	4413      	add	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4a10      	ldr	r2, [pc, #64]	@ (800a300 <vTaskResume+0xb8>)
 800a2be:	441a      	add	r2, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4610      	mov	r0, r2
 800a2c8:	f7fe fc4b 	bl	8008b62 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2d0:	4b09      	ldr	r3, [pc, #36]	@ (800a2f8 <vTaskResume+0xb0>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d307      	bcc.n	800a2ea <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a2da:	4b0a      	ldr	r3, [pc, #40]	@ (800a304 <vTaskResume+0xbc>)
 800a2dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2e0:	601a      	str	r2, [r3, #0]
 800a2e2:	f3bf 8f4f 	dsb	sy
 800a2e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a2ea:	f001 fb0f 	bl	800b90c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a2ee:	bf00      	nop
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	20000d68 	.word	0x20000d68
 800a2fc:	20001244 	.word	0x20001244
 800a300:	20000d6c 	.word	0x20000d6c
 800a304:	e000ed04 	.word	0xe000ed04

0800a308 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b08a      	sub	sp, #40	@ 0x28
 800a30c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a30e:	2300      	movs	r3, #0
 800a310:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a312:	2300      	movs	r3, #0
 800a314:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a316:	463a      	mov	r2, r7
 800a318:	1d39      	adds	r1, r7, #4
 800a31a:	f107 0308 	add.w	r3, r7, #8
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fe fbbe 	bl	8008aa0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a324:	6839      	ldr	r1, [r7, #0]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	68ba      	ldr	r2, [r7, #8]
 800a32a:	9202      	str	r2, [sp, #8]
 800a32c:	9301      	str	r3, [sp, #4]
 800a32e:	2300      	movs	r3, #0
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	2300      	movs	r3, #0
 800a334:	460a      	mov	r2, r1
 800a336:	4924      	ldr	r1, [pc, #144]	@ (800a3c8 <vTaskStartScheduler+0xc0>)
 800a338:	4824      	ldr	r0, [pc, #144]	@ (800a3cc <vTaskStartScheduler+0xc4>)
 800a33a:	f7ff fce9 	bl	8009d10 <xTaskCreateStatic>
 800a33e:	4603      	mov	r3, r0
 800a340:	4a23      	ldr	r2, [pc, #140]	@ (800a3d0 <vTaskStartScheduler+0xc8>)
 800a342:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a344:	4b22      	ldr	r3, [pc, #136]	@ (800a3d0 <vTaskStartScheduler+0xc8>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d002      	beq.n	800a352 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a34c:	2301      	movs	r3, #1
 800a34e:	617b      	str	r3, [r7, #20]
 800a350:	e001      	b.n	800a356 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a352:	2300      	movs	r3, #0
 800a354:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d102      	bne.n	800a362 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a35c:	f000 fe1a 	bl	800af94 <xTimerCreateTimerTask>
 800a360:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	2b01      	cmp	r3, #1
 800a366:	d11b      	bne.n	800a3a0 <vTaskStartScheduler+0x98>
	__asm volatile
 800a368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a36c:	f383 8811 	msr	BASEPRI, r3
 800a370:	f3bf 8f6f 	isb	sy
 800a374:	f3bf 8f4f 	dsb	sy
 800a378:	613b      	str	r3, [r7, #16]
}
 800a37a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a37c:	4b15      	ldr	r3, [pc, #84]	@ (800a3d4 <vTaskStartScheduler+0xcc>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	3354      	adds	r3, #84	@ 0x54
 800a382:	4a15      	ldr	r2, [pc, #84]	@ (800a3d8 <vTaskStartScheduler+0xd0>)
 800a384:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a386:	4b15      	ldr	r3, [pc, #84]	@ (800a3dc <vTaskStartScheduler+0xd4>)
 800a388:	f04f 32ff 	mov.w	r2, #4294967295
 800a38c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a38e:	4b14      	ldr	r3, [pc, #80]	@ (800a3e0 <vTaskStartScheduler+0xd8>)
 800a390:	2201      	movs	r2, #1
 800a392:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a394:	4b13      	ldr	r3, [pc, #76]	@ (800a3e4 <vTaskStartScheduler+0xdc>)
 800a396:	2200      	movs	r2, #0
 800a398:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a39a:	f001 f9e1 	bl	800b760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a39e:	e00f      	b.n	800a3c0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a6:	d10b      	bne.n	800a3c0 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a3a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ac:	f383 8811 	msr	BASEPRI, r3
 800a3b0:	f3bf 8f6f 	isb	sy
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	60fb      	str	r3, [r7, #12]
}
 800a3ba:	bf00      	nop
 800a3bc:	bf00      	nop
 800a3be:	e7fd      	b.n	800a3bc <vTaskStartScheduler+0xb4>
}
 800a3c0:	bf00      	nop
 800a3c2:	3718      	adds	r7, #24
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	0800c940 	.word	0x0800c940
 800a3cc:	0800aa19 	.word	0x0800aa19
 800a3d0:	20001260 	.word	0x20001260
 800a3d4:	20000d68 	.word	0x20000d68
 800a3d8:	20000024 	.word	0x20000024
 800a3dc:	2000125c 	.word	0x2000125c
 800a3e0:	20001248 	.word	0x20001248
 800a3e4:	20001240 	.word	0x20001240

0800a3e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a3ec:	4b04      	ldr	r3, [pc, #16]	@ (800a400 <vTaskSuspendAll+0x18>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	4a03      	ldr	r2, [pc, #12]	@ (800a400 <vTaskSuspendAll+0x18>)
 800a3f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a3f6:	bf00      	nop
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr
 800a400:	20001264 	.word	0x20001264

0800a404 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a40a:	2300      	movs	r3, #0
 800a40c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a40e:	2300      	movs	r3, #0
 800a410:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a412:	4b42      	ldr	r3, [pc, #264]	@ (800a51c <xTaskResumeAll+0x118>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d10b      	bne.n	800a432 <xTaskResumeAll+0x2e>
	__asm volatile
 800a41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a41e:	f383 8811 	msr	BASEPRI, r3
 800a422:	f3bf 8f6f 	isb	sy
 800a426:	f3bf 8f4f 	dsb	sy
 800a42a:	603b      	str	r3, [r7, #0]
}
 800a42c:	bf00      	nop
 800a42e:	bf00      	nop
 800a430:	e7fd      	b.n	800a42e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a432:	f001 fa39 	bl	800b8a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a436:	4b39      	ldr	r3, [pc, #228]	@ (800a51c <xTaskResumeAll+0x118>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	3b01      	subs	r3, #1
 800a43c:	4a37      	ldr	r2, [pc, #220]	@ (800a51c <xTaskResumeAll+0x118>)
 800a43e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a440:	4b36      	ldr	r3, [pc, #216]	@ (800a51c <xTaskResumeAll+0x118>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d162      	bne.n	800a50e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a448:	4b35      	ldr	r3, [pc, #212]	@ (800a520 <xTaskResumeAll+0x11c>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d05e      	beq.n	800a50e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a450:	e02f      	b.n	800a4b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a452:	4b34      	ldr	r3, [pc, #208]	@ (800a524 <xTaskResumeAll+0x120>)
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	3318      	adds	r3, #24
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fe fbdc 	bl	8008c1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	3304      	adds	r3, #4
 800a468:	4618      	mov	r0, r3
 800a46a:	f7fe fbd7 	bl	8008c1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a472:	4b2d      	ldr	r3, [pc, #180]	@ (800a528 <xTaskResumeAll+0x124>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	429a      	cmp	r2, r3
 800a478:	d903      	bls.n	800a482 <xTaskResumeAll+0x7e>
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a47e:	4a2a      	ldr	r2, [pc, #168]	@ (800a528 <xTaskResumeAll+0x124>)
 800a480:	6013      	str	r3, [r2, #0]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a486:	4613      	mov	r3, r2
 800a488:	009b      	lsls	r3, r3, #2
 800a48a:	4413      	add	r3, r2
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	4a27      	ldr	r2, [pc, #156]	@ (800a52c <xTaskResumeAll+0x128>)
 800a490:	441a      	add	r2, r3
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	3304      	adds	r3, #4
 800a496:	4619      	mov	r1, r3
 800a498:	4610      	mov	r0, r2
 800a49a:	f7fe fb62 	bl	8008b62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4a2:	4b23      	ldr	r3, [pc, #140]	@ (800a530 <xTaskResumeAll+0x12c>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d302      	bcc.n	800a4b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a4ac:	4b21      	ldr	r3, [pc, #132]	@ (800a534 <xTaskResumeAll+0x130>)
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4b2:	4b1c      	ldr	r3, [pc, #112]	@ (800a524 <xTaskResumeAll+0x120>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1cb      	bne.n	800a452 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d001      	beq.n	800a4c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a4c0:	f000 fb66 	bl	800ab90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a4c4:	4b1c      	ldr	r3, [pc, #112]	@ (800a538 <xTaskResumeAll+0x134>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d010      	beq.n	800a4f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a4d0:	f000 f846 	bl	800a560 <xTaskIncrementTick>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d002      	beq.n	800a4e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a4da:	4b16      	ldr	r3, [pc, #88]	@ (800a534 <xTaskResumeAll+0x130>)
 800a4dc:	2201      	movs	r2, #1
 800a4de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	3b01      	subs	r3, #1
 800a4e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1f1      	bne.n	800a4d0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a4ec:	4b12      	ldr	r3, [pc, #72]	@ (800a538 <xTaskResumeAll+0x134>)
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a4f2:	4b10      	ldr	r3, [pc, #64]	@ (800a534 <xTaskResumeAll+0x130>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d009      	beq.n	800a50e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a4fe:	4b0f      	ldr	r3, [pc, #60]	@ (800a53c <xTaskResumeAll+0x138>)
 800a500:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a504:	601a      	str	r2, [r3, #0]
 800a506:	f3bf 8f4f 	dsb	sy
 800a50a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a50e:	f001 f9fd 	bl	800b90c <vPortExitCritical>

	return xAlreadyYielded;
 800a512:	68bb      	ldr	r3, [r7, #8]
}
 800a514:	4618      	mov	r0, r3
 800a516:	3710      	adds	r7, #16
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	20001264 	.word	0x20001264
 800a520:	2000123c 	.word	0x2000123c
 800a524:	200011fc 	.word	0x200011fc
 800a528:	20001244 	.word	0x20001244
 800a52c:	20000d6c 	.word	0x20000d6c
 800a530:	20000d68 	.word	0x20000d68
 800a534:	20001250 	.word	0x20001250
 800a538:	2000124c 	.word	0x2000124c
 800a53c:	e000ed04 	.word	0xe000ed04

0800a540 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a546:	4b05      	ldr	r3, [pc, #20]	@ (800a55c <xTaskGetTickCount+0x1c>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a54c:	687b      	ldr	r3, [r7, #4]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	370c      	adds	r7, #12
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	20001240 	.word	0x20001240

0800a560 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b086      	sub	sp, #24
 800a564:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a566:	2300      	movs	r3, #0
 800a568:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a56a:	4b4f      	ldr	r3, [pc, #316]	@ (800a6a8 <xTaskIncrementTick+0x148>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f040 8090 	bne.w	800a694 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a574:	4b4d      	ldr	r3, [pc, #308]	@ (800a6ac <xTaskIncrementTick+0x14c>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	3301      	adds	r3, #1
 800a57a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a57c:	4a4b      	ldr	r2, [pc, #300]	@ (800a6ac <xTaskIncrementTick+0x14c>)
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d121      	bne.n	800a5cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a588:	4b49      	ldr	r3, [pc, #292]	@ (800a6b0 <xTaskIncrementTick+0x150>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00b      	beq.n	800a5aa <xTaskIncrementTick+0x4a>
	__asm volatile
 800a592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a596:	f383 8811 	msr	BASEPRI, r3
 800a59a:	f3bf 8f6f 	isb	sy
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	603b      	str	r3, [r7, #0]
}
 800a5a4:	bf00      	nop
 800a5a6:	bf00      	nop
 800a5a8:	e7fd      	b.n	800a5a6 <xTaskIncrementTick+0x46>
 800a5aa:	4b41      	ldr	r3, [pc, #260]	@ (800a6b0 <xTaskIncrementTick+0x150>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	60fb      	str	r3, [r7, #12]
 800a5b0:	4b40      	ldr	r3, [pc, #256]	@ (800a6b4 <xTaskIncrementTick+0x154>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a3e      	ldr	r2, [pc, #248]	@ (800a6b0 <xTaskIncrementTick+0x150>)
 800a5b6:	6013      	str	r3, [r2, #0]
 800a5b8:	4a3e      	ldr	r2, [pc, #248]	@ (800a6b4 <xTaskIncrementTick+0x154>)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6013      	str	r3, [r2, #0]
 800a5be:	4b3e      	ldr	r3, [pc, #248]	@ (800a6b8 <xTaskIncrementTick+0x158>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	4a3c      	ldr	r2, [pc, #240]	@ (800a6b8 <xTaskIncrementTick+0x158>)
 800a5c6:	6013      	str	r3, [r2, #0]
 800a5c8:	f000 fae2 	bl	800ab90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a5cc:	4b3b      	ldr	r3, [pc, #236]	@ (800a6bc <xTaskIncrementTick+0x15c>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	693a      	ldr	r2, [r7, #16]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d349      	bcc.n	800a66a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5d6:	4b36      	ldr	r3, [pc, #216]	@ (800a6b0 <xTaskIncrementTick+0x150>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d104      	bne.n	800a5ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5e0:	4b36      	ldr	r3, [pc, #216]	@ (800a6bc <xTaskIncrementTick+0x15c>)
 800a5e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e6:	601a      	str	r2, [r3, #0]
					break;
 800a5e8:	e03f      	b.n	800a66a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5ea:	4b31      	ldr	r3, [pc, #196]	@ (800a6b0 <xTaskIncrementTick+0x150>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a5fa:	693a      	ldr	r2, [r7, #16]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d203      	bcs.n	800a60a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a602:	4a2e      	ldr	r2, [pc, #184]	@ (800a6bc <xTaskIncrementTick+0x15c>)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a608:	e02f      	b.n	800a66a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	3304      	adds	r3, #4
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fe fb04 	bl	8008c1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d004      	beq.n	800a626 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	3318      	adds	r3, #24
 800a620:	4618      	mov	r0, r3
 800a622:	f7fe fafb 	bl	8008c1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a62a:	4b25      	ldr	r3, [pc, #148]	@ (800a6c0 <xTaskIncrementTick+0x160>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d903      	bls.n	800a63a <xTaskIncrementTick+0xda>
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a636:	4a22      	ldr	r2, [pc, #136]	@ (800a6c0 <xTaskIncrementTick+0x160>)
 800a638:	6013      	str	r3, [r2, #0]
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a63e:	4613      	mov	r3, r2
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	4413      	add	r3, r2
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	4a1f      	ldr	r2, [pc, #124]	@ (800a6c4 <xTaskIncrementTick+0x164>)
 800a648:	441a      	add	r2, r3
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	3304      	adds	r3, #4
 800a64e:	4619      	mov	r1, r3
 800a650:	4610      	mov	r0, r2
 800a652:	f7fe fa86 	bl	8008b62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a65a:	4b1b      	ldr	r3, [pc, #108]	@ (800a6c8 <xTaskIncrementTick+0x168>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a660:	429a      	cmp	r2, r3
 800a662:	d3b8      	bcc.n	800a5d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a664:	2301      	movs	r3, #1
 800a666:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a668:	e7b5      	b.n	800a5d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a66a:	4b17      	ldr	r3, [pc, #92]	@ (800a6c8 <xTaskIncrementTick+0x168>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a670:	4914      	ldr	r1, [pc, #80]	@ (800a6c4 <xTaskIncrementTick+0x164>)
 800a672:	4613      	mov	r3, r2
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4413      	add	r3, r2
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	440b      	add	r3, r1
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d901      	bls.n	800a686 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a682:	2301      	movs	r3, #1
 800a684:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a686:	4b11      	ldr	r3, [pc, #68]	@ (800a6cc <xTaskIncrementTick+0x16c>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d007      	beq.n	800a69e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a68e:	2301      	movs	r3, #1
 800a690:	617b      	str	r3, [r7, #20]
 800a692:	e004      	b.n	800a69e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a694:	4b0e      	ldr	r3, [pc, #56]	@ (800a6d0 <xTaskIncrementTick+0x170>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	3301      	adds	r3, #1
 800a69a:	4a0d      	ldr	r2, [pc, #52]	@ (800a6d0 <xTaskIncrementTick+0x170>)
 800a69c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a69e:	697b      	ldr	r3, [r7, #20]
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3718      	adds	r7, #24
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	20001264 	.word	0x20001264
 800a6ac:	20001240 	.word	0x20001240
 800a6b0:	200011f4 	.word	0x200011f4
 800a6b4:	200011f8 	.word	0x200011f8
 800a6b8:	20001254 	.word	0x20001254
 800a6bc:	2000125c 	.word	0x2000125c
 800a6c0:	20001244 	.word	0x20001244
 800a6c4:	20000d6c 	.word	0x20000d6c
 800a6c8:	20000d68 	.word	0x20000d68
 800a6cc:	20001250 	.word	0x20001250
 800a6d0:	2000124c 	.word	0x2000124c

0800a6d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b085      	sub	sp, #20
 800a6d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a6da:	4b2b      	ldr	r3, [pc, #172]	@ (800a788 <vTaskSwitchContext+0xb4>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d003      	beq.n	800a6ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a6e2:	4b2a      	ldr	r3, [pc, #168]	@ (800a78c <vTaskSwitchContext+0xb8>)
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a6e8:	e047      	b.n	800a77a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a6ea:	4b28      	ldr	r3, [pc, #160]	@ (800a78c <vTaskSwitchContext+0xb8>)
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6f0:	4b27      	ldr	r3, [pc, #156]	@ (800a790 <vTaskSwitchContext+0xbc>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	60fb      	str	r3, [r7, #12]
 800a6f6:	e011      	b.n	800a71c <vTaskSwitchContext+0x48>
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d10b      	bne.n	800a716 <vTaskSwitchContext+0x42>
	__asm volatile
 800a6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a702:	f383 8811 	msr	BASEPRI, r3
 800a706:	f3bf 8f6f 	isb	sy
 800a70a:	f3bf 8f4f 	dsb	sy
 800a70e:	607b      	str	r3, [r7, #4]
}
 800a710:	bf00      	nop
 800a712:	bf00      	nop
 800a714:	e7fd      	b.n	800a712 <vTaskSwitchContext+0x3e>
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	3b01      	subs	r3, #1
 800a71a:	60fb      	str	r3, [r7, #12]
 800a71c:	491d      	ldr	r1, [pc, #116]	@ (800a794 <vTaskSwitchContext+0xc0>)
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	4613      	mov	r3, r2
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	4413      	add	r3, r2
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	440b      	add	r3, r1
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d0e3      	beq.n	800a6f8 <vTaskSwitchContext+0x24>
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	4613      	mov	r3, r2
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	4413      	add	r3, r2
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	4a16      	ldr	r2, [pc, #88]	@ (800a794 <vTaskSwitchContext+0xc0>)
 800a73c:	4413      	add	r3, r2
 800a73e:	60bb      	str	r3, [r7, #8]
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	685a      	ldr	r2, [r3, #4]
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	605a      	str	r2, [r3, #4]
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	685a      	ldr	r2, [r3, #4]
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	3308      	adds	r3, #8
 800a752:	429a      	cmp	r2, r3
 800a754:	d104      	bne.n	800a760 <vTaskSwitchContext+0x8c>
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	685a      	ldr	r2, [r3, #4]
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	605a      	str	r2, [r3, #4]
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	4a0c      	ldr	r2, [pc, #48]	@ (800a798 <vTaskSwitchContext+0xc4>)
 800a768:	6013      	str	r3, [r2, #0]
 800a76a:	4a09      	ldr	r2, [pc, #36]	@ (800a790 <vTaskSwitchContext+0xbc>)
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a770:	4b09      	ldr	r3, [pc, #36]	@ (800a798 <vTaskSwitchContext+0xc4>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	3354      	adds	r3, #84	@ 0x54
 800a776:	4a09      	ldr	r2, [pc, #36]	@ (800a79c <vTaskSwitchContext+0xc8>)
 800a778:	6013      	str	r3, [r2, #0]
}
 800a77a:	bf00      	nop
 800a77c:	3714      	adds	r7, #20
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	20001264 	.word	0x20001264
 800a78c:	20001250 	.word	0x20001250
 800a790:	20001244 	.word	0x20001244
 800a794:	20000d6c 	.word	0x20000d6c
 800a798:	20000d68 	.word	0x20000d68
 800a79c:	20000024 	.word	0x20000024

0800a7a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d10b      	bne.n	800a7c8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7b4:	f383 8811 	msr	BASEPRI, r3
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	60fb      	str	r3, [r7, #12]
}
 800a7c2:	bf00      	nop
 800a7c4:	bf00      	nop
 800a7c6:	e7fd      	b.n	800a7c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a7c8:	4b07      	ldr	r3, [pc, #28]	@ (800a7e8 <vTaskPlaceOnEventList+0x48>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	3318      	adds	r3, #24
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f7fe f9ea 	bl	8008baa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a7d6:	2101      	movs	r1, #1
 800a7d8:	6838      	ldr	r0, [r7, #0]
 800a7da:	f000 fb87 	bl	800aeec <prvAddCurrentTaskToDelayedList>
}
 800a7de:	bf00      	nop
 800a7e0:	3710      	adds	r7, #16
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	20000d68 	.word	0x20000d68

0800a7ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b086      	sub	sp, #24
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d10b      	bne.n	800a816 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a802:	f383 8811 	msr	BASEPRI, r3
 800a806:	f3bf 8f6f 	isb	sy
 800a80a:	f3bf 8f4f 	dsb	sy
 800a80e:	617b      	str	r3, [r7, #20]
}
 800a810:	bf00      	nop
 800a812:	bf00      	nop
 800a814:	e7fd      	b.n	800a812 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a816:	4b0a      	ldr	r3, [pc, #40]	@ (800a840 <vTaskPlaceOnEventListRestricted+0x54>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	3318      	adds	r3, #24
 800a81c:	4619      	mov	r1, r3
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	f7fe f99f 	bl	8008b62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d002      	beq.n	800a830 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a82a:	f04f 33ff 	mov.w	r3, #4294967295
 800a82e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a830:	6879      	ldr	r1, [r7, #4]
 800a832:	68b8      	ldr	r0, [r7, #8]
 800a834:	f000 fb5a 	bl	800aeec <prvAddCurrentTaskToDelayedList>
	}
 800a838:	bf00      	nop
 800a83a:	3718      	adds	r7, #24
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	20000d68 	.word	0x20000d68

0800a844 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10b      	bne.n	800a872 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a85a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a85e:	f383 8811 	msr	BASEPRI, r3
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	f3bf 8f4f 	dsb	sy
 800a86a:	60fb      	str	r3, [r7, #12]
}
 800a86c:	bf00      	nop
 800a86e:	bf00      	nop
 800a870:	e7fd      	b.n	800a86e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	3318      	adds	r3, #24
 800a876:	4618      	mov	r0, r3
 800a878:	f7fe f9d0 	bl	8008c1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a87c:	4b1d      	ldr	r3, [pc, #116]	@ (800a8f4 <xTaskRemoveFromEventList+0xb0>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d11d      	bne.n	800a8c0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	3304      	adds	r3, #4
 800a888:	4618      	mov	r0, r3
 800a88a:	f7fe f9c7 	bl	8008c1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a892:	4b19      	ldr	r3, [pc, #100]	@ (800a8f8 <xTaskRemoveFromEventList+0xb4>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	429a      	cmp	r2, r3
 800a898:	d903      	bls.n	800a8a2 <xTaskRemoveFromEventList+0x5e>
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a89e:	4a16      	ldr	r2, [pc, #88]	@ (800a8f8 <xTaskRemoveFromEventList+0xb4>)
 800a8a0:	6013      	str	r3, [r2, #0]
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	4413      	add	r3, r2
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	4a13      	ldr	r2, [pc, #76]	@ (800a8fc <xTaskRemoveFromEventList+0xb8>)
 800a8b0:	441a      	add	r2, r3
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	3304      	adds	r3, #4
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	4610      	mov	r0, r2
 800a8ba:	f7fe f952 	bl	8008b62 <vListInsertEnd>
 800a8be:	e005      	b.n	800a8cc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	3318      	adds	r3, #24
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	480e      	ldr	r0, [pc, #56]	@ (800a900 <xTaskRemoveFromEventList+0xbc>)
 800a8c8:	f7fe f94b 	bl	8008b62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a904 <xTaskRemoveFromEventList+0xc0>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d905      	bls.n	800a8e6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a8de:	4b0a      	ldr	r3, [pc, #40]	@ (800a908 <xTaskRemoveFromEventList+0xc4>)
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	601a      	str	r2, [r3, #0]
 800a8e4:	e001      	b.n	800a8ea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a8ea:	697b      	ldr	r3, [r7, #20]
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3718      	adds	r7, #24
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	20001264 	.word	0x20001264
 800a8f8:	20001244 	.word	0x20001244
 800a8fc:	20000d6c 	.word	0x20000d6c
 800a900:	200011fc 	.word	0x200011fc
 800a904:	20000d68 	.word	0x20000d68
 800a908:	20001250 	.word	0x20001250

0800a90c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a914:	4b06      	ldr	r3, [pc, #24]	@ (800a930 <vTaskInternalSetTimeOutState+0x24>)
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a91c:	4b05      	ldr	r3, [pc, #20]	@ (800a934 <vTaskInternalSetTimeOutState+0x28>)
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	605a      	str	r2, [r3, #4]
}
 800a924:	bf00      	nop
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr
 800a930:	20001254 	.word	0x20001254
 800a934:	20001240 	.word	0x20001240

0800a938 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b088      	sub	sp, #32
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d10b      	bne.n	800a960 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a94c:	f383 8811 	msr	BASEPRI, r3
 800a950:	f3bf 8f6f 	isb	sy
 800a954:	f3bf 8f4f 	dsb	sy
 800a958:	613b      	str	r3, [r7, #16]
}
 800a95a:	bf00      	nop
 800a95c:	bf00      	nop
 800a95e:	e7fd      	b.n	800a95c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d10b      	bne.n	800a97e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a96a:	f383 8811 	msr	BASEPRI, r3
 800a96e:	f3bf 8f6f 	isb	sy
 800a972:	f3bf 8f4f 	dsb	sy
 800a976:	60fb      	str	r3, [r7, #12]
}
 800a978:	bf00      	nop
 800a97a:	bf00      	nop
 800a97c:	e7fd      	b.n	800a97a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a97e:	f000 ff93 	bl	800b8a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a982:	4b1d      	ldr	r3, [pc, #116]	@ (800a9f8 <xTaskCheckForTimeOut+0xc0>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	69ba      	ldr	r2, [r7, #24]
 800a98e:	1ad3      	subs	r3, r2, r3
 800a990:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a99a:	d102      	bne.n	800a9a2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a99c:	2300      	movs	r3, #0
 800a99e:	61fb      	str	r3, [r7, #28]
 800a9a0:	e023      	b.n	800a9ea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	4b15      	ldr	r3, [pc, #84]	@ (800a9fc <xTaskCheckForTimeOut+0xc4>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d007      	beq.n	800a9be <xTaskCheckForTimeOut+0x86>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	69ba      	ldr	r2, [r7, #24]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d302      	bcc.n	800a9be <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	61fb      	str	r3, [r7, #28]
 800a9bc:	e015      	b.n	800a9ea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	697a      	ldr	r2, [r7, #20]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d20b      	bcs.n	800a9e0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	1ad2      	subs	r2, r2, r3
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f7ff ff99 	bl	800a90c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	61fb      	str	r3, [r7, #28]
 800a9de:	e004      	b.n	800a9ea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a9ea:	f000 ff8f 	bl	800b90c <vPortExitCritical>

	return xReturn;
 800a9ee:	69fb      	ldr	r3, [r7, #28]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3720      	adds	r7, #32
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	20001240 	.word	0x20001240
 800a9fc:	20001254 	.word	0x20001254

0800aa00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa00:	b480      	push	{r7}
 800aa02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aa04:	4b03      	ldr	r3, [pc, #12]	@ (800aa14 <vTaskMissedYield+0x14>)
 800aa06:	2201      	movs	r2, #1
 800aa08:	601a      	str	r2, [r3, #0]
}
 800aa0a:	bf00      	nop
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr
 800aa14:	20001250 	.word	0x20001250

0800aa18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aa20:	f000 f852 	bl	800aac8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aa24:	4b06      	ldr	r3, [pc, #24]	@ (800aa40 <prvIdleTask+0x28>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	d9f9      	bls.n	800aa20 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aa2c:	4b05      	ldr	r3, [pc, #20]	@ (800aa44 <prvIdleTask+0x2c>)
 800aa2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa32:	601a      	str	r2, [r3, #0]
 800aa34:	f3bf 8f4f 	dsb	sy
 800aa38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aa3c:	e7f0      	b.n	800aa20 <prvIdleTask+0x8>
 800aa3e:	bf00      	nop
 800aa40:	20000d6c 	.word	0x20000d6c
 800aa44:	e000ed04 	.word	0xe000ed04

0800aa48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa4e:	2300      	movs	r3, #0
 800aa50:	607b      	str	r3, [r7, #4]
 800aa52:	e00c      	b.n	800aa6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	4613      	mov	r3, r2
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	4413      	add	r3, r2
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	4a12      	ldr	r2, [pc, #72]	@ (800aaa8 <prvInitialiseTaskLists+0x60>)
 800aa60:	4413      	add	r3, r2
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7fe f850 	bl	8008b08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	607b      	str	r3, [r7, #4]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2b37      	cmp	r3, #55	@ 0x37
 800aa72:	d9ef      	bls.n	800aa54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aa74:	480d      	ldr	r0, [pc, #52]	@ (800aaac <prvInitialiseTaskLists+0x64>)
 800aa76:	f7fe f847 	bl	8008b08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aa7a:	480d      	ldr	r0, [pc, #52]	@ (800aab0 <prvInitialiseTaskLists+0x68>)
 800aa7c:	f7fe f844 	bl	8008b08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aa80:	480c      	ldr	r0, [pc, #48]	@ (800aab4 <prvInitialiseTaskLists+0x6c>)
 800aa82:	f7fe f841 	bl	8008b08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aa86:	480c      	ldr	r0, [pc, #48]	@ (800aab8 <prvInitialiseTaskLists+0x70>)
 800aa88:	f7fe f83e 	bl	8008b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aa8c:	480b      	ldr	r0, [pc, #44]	@ (800aabc <prvInitialiseTaskLists+0x74>)
 800aa8e:	f7fe f83b 	bl	8008b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aa92:	4b0b      	ldr	r3, [pc, #44]	@ (800aac0 <prvInitialiseTaskLists+0x78>)
 800aa94:	4a05      	ldr	r2, [pc, #20]	@ (800aaac <prvInitialiseTaskLists+0x64>)
 800aa96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aa98:	4b0a      	ldr	r3, [pc, #40]	@ (800aac4 <prvInitialiseTaskLists+0x7c>)
 800aa9a:	4a05      	ldr	r2, [pc, #20]	@ (800aab0 <prvInitialiseTaskLists+0x68>)
 800aa9c:	601a      	str	r2, [r3, #0]
}
 800aa9e:	bf00      	nop
 800aaa0:	3708      	adds	r7, #8
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	20000d6c 	.word	0x20000d6c
 800aaac:	200011cc 	.word	0x200011cc
 800aab0:	200011e0 	.word	0x200011e0
 800aab4:	200011fc 	.word	0x200011fc
 800aab8:	20001210 	.word	0x20001210
 800aabc:	20001228 	.word	0x20001228
 800aac0:	200011f4 	.word	0x200011f4
 800aac4:	200011f8 	.word	0x200011f8

0800aac8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aace:	e019      	b.n	800ab04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aad0:	f000 feea 	bl	800b8a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aad4:	4b10      	ldr	r3, [pc, #64]	@ (800ab18 <prvCheckTasksWaitingTermination+0x50>)
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	3304      	adds	r3, #4
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fe f89b 	bl	8008c1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aae6:	4b0d      	ldr	r3, [pc, #52]	@ (800ab1c <prvCheckTasksWaitingTermination+0x54>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	3b01      	subs	r3, #1
 800aaec:	4a0b      	ldr	r2, [pc, #44]	@ (800ab1c <prvCheckTasksWaitingTermination+0x54>)
 800aaee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aaf0:	4b0b      	ldr	r3, [pc, #44]	@ (800ab20 <prvCheckTasksWaitingTermination+0x58>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	4a0a      	ldr	r2, [pc, #40]	@ (800ab20 <prvCheckTasksWaitingTermination+0x58>)
 800aaf8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aafa:	f000 ff07 	bl	800b90c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 f810 	bl	800ab24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab04:	4b06      	ldr	r3, [pc, #24]	@ (800ab20 <prvCheckTasksWaitingTermination+0x58>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d1e1      	bne.n	800aad0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ab0c:	bf00      	nop
 800ab0e:	bf00      	nop
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	20001210 	.word	0x20001210
 800ab1c:	2000123c 	.word	0x2000123c
 800ab20:	20001224 	.word	0x20001224

0800ab24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b084      	sub	sp, #16
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	3354      	adds	r3, #84	@ 0x54
 800ab30:	4618      	mov	r0, r3
 800ab32:	f001 f9f1 	bl	800bf18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d108      	bne.n	800ab52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab44:	4618      	mov	r0, r3
 800ab46:	f001 f89f 	bl	800bc88 <vPortFree>
				vPortFree( pxTCB );
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f001 f89c 	bl	800bc88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ab50:	e019      	b.n	800ab86 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d103      	bne.n	800ab64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f001 f893 	bl	800bc88 <vPortFree>
	}
 800ab62:	e010      	b.n	800ab86 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ab6a:	2b02      	cmp	r3, #2
 800ab6c:	d00b      	beq.n	800ab86 <prvDeleteTCB+0x62>
	__asm volatile
 800ab6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab72:	f383 8811 	msr	BASEPRI, r3
 800ab76:	f3bf 8f6f 	isb	sy
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	60fb      	str	r3, [r7, #12]
}
 800ab80:	bf00      	nop
 800ab82:	bf00      	nop
 800ab84:	e7fd      	b.n	800ab82 <prvDeleteTCB+0x5e>
	}
 800ab86:	bf00      	nop
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
	...

0800ab90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab96:	4b0c      	ldr	r3, [pc, #48]	@ (800abc8 <prvResetNextTaskUnblockTime+0x38>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d104      	bne.n	800abaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aba0:	4b0a      	ldr	r3, [pc, #40]	@ (800abcc <prvResetNextTaskUnblockTime+0x3c>)
 800aba2:	f04f 32ff 	mov.w	r2, #4294967295
 800aba6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aba8:	e008      	b.n	800abbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abaa:	4b07      	ldr	r3, [pc, #28]	@ (800abc8 <prvResetNextTaskUnblockTime+0x38>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	4a04      	ldr	r2, [pc, #16]	@ (800abcc <prvResetNextTaskUnblockTime+0x3c>)
 800abba:	6013      	str	r3, [r2, #0]
}
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr
 800abc8:	200011f4 	.word	0x200011f4
 800abcc:	2000125c 	.word	0x2000125c

0800abd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800abd6:	4b0b      	ldr	r3, [pc, #44]	@ (800ac04 <xTaskGetSchedulerState+0x34>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d102      	bne.n	800abe4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800abde:	2301      	movs	r3, #1
 800abe0:	607b      	str	r3, [r7, #4]
 800abe2:	e008      	b.n	800abf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abe4:	4b08      	ldr	r3, [pc, #32]	@ (800ac08 <xTaskGetSchedulerState+0x38>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d102      	bne.n	800abf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800abec:	2302      	movs	r3, #2
 800abee:	607b      	str	r3, [r7, #4]
 800abf0:	e001      	b.n	800abf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800abf2:	2300      	movs	r3, #0
 800abf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800abf6:	687b      	ldr	r3, [r7, #4]
	}
 800abf8:	4618      	mov	r0, r3
 800abfa:	370c      	adds	r7, #12
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr
 800ac04:	20001248 	.word	0x20001248
 800ac08:	20001264 	.word	0x20001264

0800ac0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d051      	beq.n	800acc6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac26:	4b2a      	ldr	r3, [pc, #168]	@ (800acd0 <xTaskPriorityInherit+0xc4>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d241      	bcs.n	800acb4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	699b      	ldr	r3, [r3, #24]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	db06      	blt.n	800ac46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac38:	4b25      	ldr	r3, [pc, #148]	@ (800acd0 <xTaskPriorityInherit+0xc4>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac3e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	6959      	ldr	r1, [r3, #20]
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac4e:	4613      	mov	r3, r2
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	4413      	add	r3, r2
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4a1f      	ldr	r2, [pc, #124]	@ (800acd4 <xTaskPriorityInherit+0xc8>)
 800ac58:	4413      	add	r3, r2
 800ac5a:	4299      	cmp	r1, r3
 800ac5c:	d122      	bne.n	800aca4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	3304      	adds	r3, #4
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7fd ffda 	bl	8008c1c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac68:	4b19      	ldr	r3, [pc, #100]	@ (800acd0 <xTaskPriorityInherit+0xc4>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac76:	4b18      	ldr	r3, [pc, #96]	@ (800acd8 <xTaskPriorityInherit+0xcc>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d903      	bls.n	800ac86 <xTaskPriorityInherit+0x7a>
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac82:	4a15      	ldr	r2, [pc, #84]	@ (800acd8 <xTaskPriorityInherit+0xcc>)
 800ac84:	6013      	str	r3, [r2, #0]
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4413      	add	r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	4a10      	ldr	r2, [pc, #64]	@ (800acd4 <xTaskPriorityInherit+0xc8>)
 800ac94:	441a      	add	r2, r3
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	3304      	adds	r3, #4
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	4610      	mov	r0, r2
 800ac9e:	f7fd ff60 	bl	8008b62 <vListInsertEnd>
 800aca2:	e004      	b.n	800acae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aca4:	4b0a      	ldr	r3, [pc, #40]	@ (800acd0 <xTaskPriorityInherit+0xc4>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800acae:	2301      	movs	r3, #1
 800acb0:	60fb      	str	r3, [r7, #12]
 800acb2:	e008      	b.n	800acc6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800acb8:	4b05      	ldr	r3, [pc, #20]	@ (800acd0 <xTaskPriorityInherit+0xc4>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d201      	bcs.n	800acc6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800acc2:	2301      	movs	r3, #1
 800acc4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800acc6:	68fb      	ldr	r3, [r7, #12]
	}
 800acc8:	4618      	mov	r0, r3
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	20000d68 	.word	0x20000d68
 800acd4:	20000d6c 	.word	0x20000d6c
 800acd8:	20001244 	.word	0x20001244

0800acdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b086      	sub	sp, #24
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ace8:	2300      	movs	r3, #0
 800acea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d058      	beq.n	800ada4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800acf2:	4b2f      	ldr	r3, [pc, #188]	@ (800adb0 <xTaskPriorityDisinherit+0xd4>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	693a      	ldr	r2, [r7, #16]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d00b      	beq.n	800ad14 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800acfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad00:	f383 8811 	msr	BASEPRI, r3
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	60fb      	str	r3, [r7, #12]
}
 800ad0e:	bf00      	nop
 800ad10:	bf00      	nop
 800ad12:	e7fd      	b.n	800ad10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d10b      	bne.n	800ad34 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ad1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad20:	f383 8811 	msr	BASEPRI, r3
 800ad24:	f3bf 8f6f 	isb	sy
 800ad28:	f3bf 8f4f 	dsb	sy
 800ad2c:	60bb      	str	r3, [r7, #8]
}
 800ad2e:	bf00      	nop
 800ad30:	bf00      	nop
 800ad32:	e7fd      	b.n	800ad30 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad38:	1e5a      	subs	r2, r3, #1
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d02c      	beq.n	800ada4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d128      	bne.n	800ada4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	3304      	adds	r3, #4
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7fd ff60 	bl	8008c1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad68:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad74:	4b0f      	ldr	r3, [pc, #60]	@ (800adb4 <xTaskPriorityDisinherit+0xd8>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d903      	bls.n	800ad84 <xTaskPriorityDisinherit+0xa8>
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad80:	4a0c      	ldr	r2, [pc, #48]	@ (800adb4 <xTaskPriorityDisinherit+0xd8>)
 800ad82:	6013      	str	r3, [r2, #0]
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad88:	4613      	mov	r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	4413      	add	r3, r2
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	4a09      	ldr	r2, [pc, #36]	@ (800adb8 <xTaskPriorityDisinherit+0xdc>)
 800ad92:	441a      	add	r2, r3
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	3304      	adds	r3, #4
 800ad98:	4619      	mov	r1, r3
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	f7fd fee1 	bl	8008b62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ada0:	2301      	movs	r3, #1
 800ada2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ada4:	697b      	ldr	r3, [r7, #20]
	}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3718      	adds	r7, #24
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	20000d68 	.word	0x20000d68
 800adb4:	20001244 	.word	0x20001244
 800adb8:	20000d6c 	.word	0x20000d6c

0800adbc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b088      	sub	sp, #32
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800adca:	2301      	movs	r3, #1
 800adcc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d06c      	beq.n	800aeae <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800add8:	2b00      	cmp	r3, #0
 800adda:	d10b      	bne.n	800adf4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800addc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade0:	f383 8811 	msr	BASEPRI, r3
 800ade4:	f3bf 8f6f 	isb	sy
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	60fb      	str	r3, [r7, #12]
}
 800adee:	bf00      	nop
 800adf0:	bf00      	nop
 800adf2:	e7fd      	b.n	800adf0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800adf4:	69bb      	ldr	r3, [r7, #24]
 800adf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adf8:	683a      	ldr	r2, [r7, #0]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d902      	bls.n	800ae04 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	61fb      	str	r3, [r7, #28]
 800ae02:	e002      	b.n	800ae0a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae08:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae0e:	69fa      	ldr	r2, [r7, #28]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d04c      	beq.n	800aeae <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae18:	697a      	ldr	r2, [r7, #20]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d147      	bne.n	800aeae <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ae1e:	4b26      	ldr	r3, [pc, #152]	@ (800aeb8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	69ba      	ldr	r2, [r7, #24]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d10b      	bne.n	800ae40 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ae28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae2c:	f383 8811 	msr	BASEPRI, r3
 800ae30:	f3bf 8f6f 	isb	sy
 800ae34:	f3bf 8f4f 	dsb	sy
 800ae38:	60bb      	str	r3, [r7, #8]
}
 800ae3a:	bf00      	nop
 800ae3c:	bf00      	nop
 800ae3e:	e7fd      	b.n	800ae3c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae44:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	69fa      	ldr	r2, [r7, #28]
 800ae4a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae4c:	69bb      	ldr	r3, [r7, #24]
 800ae4e:	699b      	ldr	r3, [r3, #24]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	db04      	blt.n	800ae5e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae5e:	69bb      	ldr	r3, [r7, #24]
 800ae60:	6959      	ldr	r1, [r3, #20]
 800ae62:	693a      	ldr	r2, [r7, #16]
 800ae64:	4613      	mov	r3, r2
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	4413      	add	r3, r2
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	4a13      	ldr	r2, [pc, #76]	@ (800aebc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ae6e:	4413      	add	r3, r2
 800ae70:	4299      	cmp	r1, r3
 800ae72:	d11c      	bne.n	800aeae <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	3304      	adds	r3, #4
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7fd fecf 	bl	8008c1c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ae7e:	69bb      	ldr	r3, [r7, #24]
 800ae80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae82:	4b0f      	ldr	r3, [pc, #60]	@ (800aec0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d903      	bls.n	800ae92 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ae8a:	69bb      	ldr	r3, [r7, #24]
 800ae8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae8e:	4a0c      	ldr	r2, [pc, #48]	@ (800aec0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ae90:	6013      	str	r3, [r2, #0]
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae96:	4613      	mov	r3, r2
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	4413      	add	r3, r2
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	4a07      	ldr	r2, [pc, #28]	@ (800aebc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800aea0:	441a      	add	r2, r3
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	3304      	adds	r3, #4
 800aea6:	4619      	mov	r1, r3
 800aea8:	4610      	mov	r0, r2
 800aeaa:	f7fd fe5a 	bl	8008b62 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aeae:	bf00      	nop
 800aeb0:	3720      	adds	r7, #32
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	20000d68 	.word	0x20000d68
 800aebc:	20000d6c 	.word	0x20000d6c
 800aec0:	20001244 	.word	0x20001244

0800aec4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800aec4:	b480      	push	{r7}
 800aec6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800aec8:	4b07      	ldr	r3, [pc, #28]	@ (800aee8 <pvTaskIncrementMutexHeldCount+0x24>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d004      	beq.n	800aeda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800aed0:	4b05      	ldr	r3, [pc, #20]	@ (800aee8 <pvTaskIncrementMutexHeldCount+0x24>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aed6:	3201      	adds	r2, #1
 800aed8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800aeda:	4b03      	ldr	r3, [pc, #12]	@ (800aee8 <pvTaskIncrementMutexHeldCount+0x24>)
 800aedc:	681b      	ldr	r3, [r3, #0]
	}
 800aede:	4618      	mov	r0, r3
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr
 800aee8:	20000d68 	.word	0x20000d68

0800aeec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aef6:	4b21      	ldr	r3, [pc, #132]	@ (800af7c <prvAddCurrentTaskToDelayedList+0x90>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aefc:	4b20      	ldr	r3, [pc, #128]	@ (800af80 <prvAddCurrentTaskToDelayedList+0x94>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	3304      	adds	r3, #4
 800af02:	4618      	mov	r0, r3
 800af04:	f7fd fe8a 	bl	8008c1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af0e:	d10a      	bne.n	800af26 <prvAddCurrentTaskToDelayedList+0x3a>
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d007      	beq.n	800af26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af16:	4b1a      	ldr	r3, [pc, #104]	@ (800af80 <prvAddCurrentTaskToDelayedList+0x94>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	3304      	adds	r3, #4
 800af1c:	4619      	mov	r1, r3
 800af1e:	4819      	ldr	r0, [pc, #100]	@ (800af84 <prvAddCurrentTaskToDelayedList+0x98>)
 800af20:	f7fd fe1f 	bl	8008b62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800af24:	e026      	b.n	800af74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4413      	add	r3, r2
 800af2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800af2e:	4b14      	ldr	r3, [pc, #80]	@ (800af80 <prvAddCurrentTaskToDelayedList+0x94>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d209      	bcs.n	800af52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af3e:	4b12      	ldr	r3, [pc, #72]	@ (800af88 <prvAddCurrentTaskToDelayedList+0x9c>)
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	4b0f      	ldr	r3, [pc, #60]	@ (800af80 <prvAddCurrentTaskToDelayedList+0x94>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	3304      	adds	r3, #4
 800af48:	4619      	mov	r1, r3
 800af4a:	4610      	mov	r0, r2
 800af4c:	f7fd fe2d 	bl	8008baa <vListInsert>
}
 800af50:	e010      	b.n	800af74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af52:	4b0e      	ldr	r3, [pc, #56]	@ (800af8c <prvAddCurrentTaskToDelayedList+0xa0>)
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	4b0a      	ldr	r3, [pc, #40]	@ (800af80 <prvAddCurrentTaskToDelayedList+0x94>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	3304      	adds	r3, #4
 800af5c:	4619      	mov	r1, r3
 800af5e:	4610      	mov	r0, r2
 800af60:	f7fd fe23 	bl	8008baa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800af64:	4b0a      	ldr	r3, [pc, #40]	@ (800af90 <prvAddCurrentTaskToDelayedList+0xa4>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d202      	bcs.n	800af74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800af6e:	4a08      	ldr	r2, [pc, #32]	@ (800af90 <prvAddCurrentTaskToDelayedList+0xa4>)
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	6013      	str	r3, [r2, #0]
}
 800af74:	bf00      	nop
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	20001240 	.word	0x20001240
 800af80:	20000d68 	.word	0x20000d68
 800af84:	20001228 	.word	0x20001228
 800af88:	200011f8 	.word	0x200011f8
 800af8c:	200011f4 	.word	0x200011f4
 800af90:	2000125c 	.word	0x2000125c

0800af94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b08a      	sub	sp, #40	@ 0x28
 800af98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800af9a:	2300      	movs	r3, #0
 800af9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800af9e:	f000 fb13 	bl	800b5c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800afa2:	4b1d      	ldr	r3, [pc, #116]	@ (800b018 <xTimerCreateTimerTask+0x84>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d021      	beq.n	800afee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800afaa:	2300      	movs	r3, #0
 800afac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800afae:	2300      	movs	r3, #0
 800afb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800afb2:	1d3a      	adds	r2, r7, #4
 800afb4:	f107 0108 	add.w	r1, r7, #8
 800afb8:	f107 030c 	add.w	r3, r7, #12
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7fd fd89 	bl	8008ad4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800afc2:	6879      	ldr	r1, [r7, #4]
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	68fa      	ldr	r2, [r7, #12]
 800afc8:	9202      	str	r2, [sp, #8]
 800afca:	9301      	str	r3, [sp, #4]
 800afcc:	2302      	movs	r3, #2
 800afce:	9300      	str	r3, [sp, #0]
 800afd0:	2300      	movs	r3, #0
 800afd2:	460a      	mov	r2, r1
 800afd4:	4911      	ldr	r1, [pc, #68]	@ (800b01c <xTimerCreateTimerTask+0x88>)
 800afd6:	4812      	ldr	r0, [pc, #72]	@ (800b020 <xTimerCreateTimerTask+0x8c>)
 800afd8:	f7fe fe9a 	bl	8009d10 <xTaskCreateStatic>
 800afdc:	4603      	mov	r3, r0
 800afde:	4a11      	ldr	r2, [pc, #68]	@ (800b024 <xTimerCreateTimerTask+0x90>)
 800afe0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800afe2:	4b10      	ldr	r3, [pc, #64]	@ (800b024 <xTimerCreateTimerTask+0x90>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d001      	beq.n	800afee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800afea:	2301      	movs	r3, #1
 800afec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10b      	bne.n	800b00c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800aff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aff8:	f383 8811 	msr	BASEPRI, r3
 800affc:	f3bf 8f6f 	isb	sy
 800b000:	f3bf 8f4f 	dsb	sy
 800b004:	613b      	str	r3, [r7, #16]
}
 800b006:	bf00      	nop
 800b008:	bf00      	nop
 800b00a:	e7fd      	b.n	800b008 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b00c:	697b      	ldr	r3, [r7, #20]
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3718      	adds	r7, #24
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	20001298 	.word	0x20001298
 800b01c:	0800c948 	.word	0x0800c948
 800b020:	0800b161 	.word	0x0800b161
 800b024:	2000129c 	.word	0x2000129c

0800b028 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b08a      	sub	sp, #40	@ 0x28
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	607a      	str	r2, [r7, #4]
 800b034:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b036:	2300      	movs	r3, #0
 800b038:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d10b      	bne.n	800b058 <xTimerGenericCommand+0x30>
	__asm volatile
 800b040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b044:	f383 8811 	msr	BASEPRI, r3
 800b048:	f3bf 8f6f 	isb	sy
 800b04c:	f3bf 8f4f 	dsb	sy
 800b050:	623b      	str	r3, [r7, #32]
}
 800b052:	bf00      	nop
 800b054:	bf00      	nop
 800b056:	e7fd      	b.n	800b054 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b058:	4b19      	ldr	r3, [pc, #100]	@ (800b0c0 <xTimerGenericCommand+0x98>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d02a      	beq.n	800b0b6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	2b05      	cmp	r3, #5
 800b070:	dc18      	bgt.n	800b0a4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b072:	f7ff fdad 	bl	800abd0 <xTaskGetSchedulerState>
 800b076:	4603      	mov	r3, r0
 800b078:	2b02      	cmp	r3, #2
 800b07a:	d109      	bne.n	800b090 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b07c:	4b10      	ldr	r3, [pc, #64]	@ (800b0c0 <xTimerGenericCommand+0x98>)
 800b07e:	6818      	ldr	r0, [r3, #0]
 800b080:	f107 0110 	add.w	r1, r7, #16
 800b084:	2300      	movs	r3, #0
 800b086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b088:	f7fd ffa6 	bl	8008fd8 <xQueueGenericSend>
 800b08c:	6278      	str	r0, [r7, #36]	@ 0x24
 800b08e:	e012      	b.n	800b0b6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b090:	4b0b      	ldr	r3, [pc, #44]	@ (800b0c0 <xTimerGenericCommand+0x98>)
 800b092:	6818      	ldr	r0, [r3, #0]
 800b094:	f107 0110 	add.w	r1, r7, #16
 800b098:	2300      	movs	r3, #0
 800b09a:	2200      	movs	r2, #0
 800b09c:	f7fd ff9c 	bl	8008fd8 <xQueueGenericSend>
 800b0a0:	6278      	str	r0, [r7, #36]	@ 0x24
 800b0a2:	e008      	b.n	800b0b6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b0a4:	4b06      	ldr	r3, [pc, #24]	@ (800b0c0 <xTimerGenericCommand+0x98>)
 800b0a6:	6818      	ldr	r0, [r3, #0]
 800b0a8:	f107 0110 	add.w	r1, r7, #16
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	683a      	ldr	r2, [r7, #0]
 800b0b0:	f7fe f894 	bl	80091dc <xQueueGenericSendFromISR>
 800b0b4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3728      	adds	r7, #40	@ 0x28
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	20001298 	.word	0x20001298

0800b0c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b088      	sub	sp, #32
 800b0c8:	af02      	add	r7, sp, #8
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0ce:	4b23      	ldr	r3, [pc, #140]	@ (800b15c <prvProcessExpiredTimer+0x98>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	68db      	ldr	r3, [r3, #12]
 800b0d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	3304      	adds	r3, #4
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7fd fd9d 	bl	8008c1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b0e8:	f003 0304 	and.w	r3, r3, #4
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d023      	beq.n	800b138 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	699a      	ldr	r2, [r3, #24]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	18d1      	adds	r1, r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	683a      	ldr	r2, [r7, #0]
 800b0fc:	6978      	ldr	r0, [r7, #20]
 800b0fe:	f000 f8d5 	bl	800b2ac <prvInsertTimerInActiveList>
 800b102:	4603      	mov	r3, r0
 800b104:	2b00      	cmp	r3, #0
 800b106:	d020      	beq.n	800b14a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b108:	2300      	movs	r3, #0
 800b10a:	9300      	str	r3, [sp, #0]
 800b10c:	2300      	movs	r3, #0
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	2100      	movs	r1, #0
 800b112:	6978      	ldr	r0, [r7, #20]
 800b114:	f7ff ff88 	bl	800b028 <xTimerGenericCommand>
 800b118:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d114      	bne.n	800b14a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b124:	f383 8811 	msr	BASEPRI, r3
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	60fb      	str	r3, [r7, #12]
}
 800b132:	bf00      	nop
 800b134:	bf00      	nop
 800b136:	e7fd      	b.n	800b134 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b13e:	f023 0301 	bic.w	r3, r3, #1
 800b142:	b2da      	uxtb	r2, r3
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	6a1b      	ldr	r3, [r3, #32]
 800b14e:	6978      	ldr	r0, [r7, #20]
 800b150:	4798      	blx	r3
}
 800b152:	bf00      	nop
 800b154:	3718      	adds	r7, #24
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	20001290 	.word	0x20001290

0800b160 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b168:	f107 0308 	add.w	r3, r7, #8
 800b16c:	4618      	mov	r0, r3
 800b16e:	f000 f859 	bl	800b224 <prvGetNextExpireTime>
 800b172:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	4619      	mov	r1, r3
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	f000 f805 	bl	800b188 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b17e:	f000 f8d7 	bl	800b330 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b182:	bf00      	nop
 800b184:	e7f0      	b.n	800b168 <prvTimerTask+0x8>
	...

0800b188 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b192:	f7ff f929 	bl	800a3e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b196:	f107 0308 	add.w	r3, r7, #8
 800b19a:	4618      	mov	r0, r3
 800b19c:	f000 f866 	bl	800b26c <prvSampleTimeNow>
 800b1a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d130      	bne.n	800b20a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d10a      	bne.n	800b1c4 <prvProcessTimerOrBlockTask+0x3c>
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d806      	bhi.n	800b1c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b1b6:	f7ff f925 	bl	800a404 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b1ba:	68f9      	ldr	r1, [r7, #12]
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f7ff ff81 	bl	800b0c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b1c2:	e024      	b.n	800b20e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d008      	beq.n	800b1dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b1ca:	4b13      	ldr	r3, [pc, #76]	@ (800b218 <prvProcessTimerOrBlockTask+0x90>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d101      	bne.n	800b1d8 <prvProcessTimerOrBlockTask+0x50>
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	e000      	b.n	800b1da <prvProcessTimerOrBlockTask+0x52>
 800b1d8:	2300      	movs	r3, #0
 800b1da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b1dc:	4b0f      	ldr	r3, [pc, #60]	@ (800b21c <prvProcessTimerOrBlockTask+0x94>)
 800b1de:	6818      	ldr	r0, [r3, #0]
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	1ad3      	subs	r3, r2, r3
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	f7fe fd5d 	bl	8009ca8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b1ee:	f7ff f909 	bl	800a404 <xTaskResumeAll>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d10a      	bne.n	800b20e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b1f8:	4b09      	ldr	r3, [pc, #36]	@ (800b220 <prvProcessTimerOrBlockTask+0x98>)
 800b1fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1fe:	601a      	str	r2, [r3, #0]
 800b200:	f3bf 8f4f 	dsb	sy
 800b204:	f3bf 8f6f 	isb	sy
}
 800b208:	e001      	b.n	800b20e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b20a:	f7ff f8fb 	bl	800a404 <xTaskResumeAll>
}
 800b20e:	bf00      	nop
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	20001294 	.word	0x20001294
 800b21c:	20001298 	.word	0x20001298
 800b220:	e000ed04 	.word	0xe000ed04

0800b224 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b224:	b480      	push	{r7}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b22c:	4b0e      	ldr	r3, [pc, #56]	@ (800b268 <prvGetNextExpireTime+0x44>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d101      	bne.n	800b23a <prvGetNextExpireTime+0x16>
 800b236:	2201      	movs	r2, #1
 800b238:	e000      	b.n	800b23c <prvGetNextExpireTime+0x18>
 800b23a:	2200      	movs	r2, #0
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d105      	bne.n	800b254 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b248:	4b07      	ldr	r3, [pc, #28]	@ (800b268 <prvGetNextExpireTime+0x44>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	60fb      	str	r3, [r7, #12]
 800b252:	e001      	b.n	800b258 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b254:	2300      	movs	r3, #0
 800b256:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b258:	68fb      	ldr	r3, [r7, #12]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3714      	adds	r7, #20
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	20001290 	.word	0x20001290

0800b26c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b274:	f7ff f964 	bl	800a540 <xTaskGetTickCount>
 800b278:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b27a:	4b0b      	ldr	r3, [pc, #44]	@ (800b2a8 <prvSampleTimeNow+0x3c>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68fa      	ldr	r2, [r7, #12]
 800b280:	429a      	cmp	r2, r3
 800b282:	d205      	bcs.n	800b290 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b284:	f000 f93a 	bl	800b4fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2201      	movs	r2, #1
 800b28c:	601a      	str	r2, [r3, #0]
 800b28e:	e002      	b.n	800b296 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b296:	4a04      	ldr	r2, [pc, #16]	@ (800b2a8 <prvSampleTimeNow+0x3c>)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b29c:	68fb      	ldr	r3, [r7, #12]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3710      	adds	r7, #16
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	200012a0 	.word	0x200012a0

0800b2ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b086      	sub	sp, #24
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
 800b2b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	68ba      	ldr	r2, [r7, #8]
 800b2c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	68fa      	ldr	r2, [r7, #12]
 800b2c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b2ca:	68ba      	ldr	r2, [r7, #8]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d812      	bhi.n	800b2f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	1ad2      	subs	r2, r2, r3
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	699b      	ldr	r3, [r3, #24]
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d302      	bcc.n	800b2e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	617b      	str	r3, [r7, #20]
 800b2e4:	e01b      	b.n	800b31e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b2e6:	4b10      	ldr	r3, [pc, #64]	@ (800b328 <prvInsertTimerInActiveList+0x7c>)
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	3304      	adds	r3, #4
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	4610      	mov	r0, r2
 800b2f2:	f7fd fc5a 	bl	8008baa <vListInsert>
 800b2f6:	e012      	b.n	800b31e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d206      	bcs.n	800b30e <prvInsertTimerInActiveList+0x62>
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	429a      	cmp	r2, r3
 800b306:	d302      	bcc.n	800b30e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b308:	2301      	movs	r3, #1
 800b30a:	617b      	str	r3, [r7, #20]
 800b30c:	e007      	b.n	800b31e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b30e:	4b07      	ldr	r3, [pc, #28]	@ (800b32c <prvInsertTimerInActiveList+0x80>)
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	3304      	adds	r3, #4
 800b316:	4619      	mov	r1, r3
 800b318:	4610      	mov	r0, r2
 800b31a:	f7fd fc46 	bl	8008baa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b31e:	697b      	ldr	r3, [r7, #20]
}
 800b320:	4618      	mov	r0, r3
 800b322:	3718      	adds	r7, #24
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	20001294 	.word	0x20001294
 800b32c:	20001290 	.word	0x20001290

0800b330 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b08e      	sub	sp, #56	@ 0x38
 800b334:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b336:	e0ce      	b.n	800b4d6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	da19      	bge.n	800b372 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b33e:	1d3b      	adds	r3, r7, #4
 800b340:	3304      	adds	r3, #4
 800b342:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b346:	2b00      	cmp	r3, #0
 800b348:	d10b      	bne.n	800b362 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b34a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b34e:	f383 8811 	msr	BASEPRI, r3
 800b352:	f3bf 8f6f 	isb	sy
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	61fb      	str	r3, [r7, #28]
}
 800b35c:	bf00      	nop
 800b35e:	bf00      	nop
 800b360:	e7fd      	b.n	800b35e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b368:	6850      	ldr	r0, [r2, #4]
 800b36a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b36c:	6892      	ldr	r2, [r2, #8]
 800b36e:	4611      	mov	r1, r2
 800b370:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2b00      	cmp	r3, #0
 800b376:	f2c0 80ae 	blt.w	800b4d6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b380:	695b      	ldr	r3, [r3, #20]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d004      	beq.n	800b390 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b388:	3304      	adds	r3, #4
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7fd fc46 	bl	8008c1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b390:	463b      	mov	r3, r7
 800b392:	4618      	mov	r0, r3
 800b394:	f7ff ff6a 	bl	800b26c <prvSampleTimeNow>
 800b398:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2b09      	cmp	r3, #9
 800b39e:	f200 8097 	bhi.w	800b4d0 <prvProcessReceivedCommands+0x1a0>
 800b3a2:	a201      	add	r2, pc, #4	@ (adr r2, 800b3a8 <prvProcessReceivedCommands+0x78>)
 800b3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a8:	0800b3d1 	.word	0x0800b3d1
 800b3ac:	0800b3d1 	.word	0x0800b3d1
 800b3b0:	0800b3d1 	.word	0x0800b3d1
 800b3b4:	0800b447 	.word	0x0800b447
 800b3b8:	0800b45b 	.word	0x0800b45b
 800b3bc:	0800b4a7 	.word	0x0800b4a7
 800b3c0:	0800b3d1 	.word	0x0800b3d1
 800b3c4:	0800b3d1 	.word	0x0800b3d1
 800b3c8:	0800b447 	.word	0x0800b447
 800b3cc:	0800b45b 	.word	0x0800b45b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3d6:	f043 0301 	orr.w	r3, r3, #1
 800b3da:	b2da      	uxtb	r2, r3
 800b3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b3e2:	68ba      	ldr	r2, [r7, #8]
 800b3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e6:	699b      	ldr	r3, [r3, #24]
 800b3e8:	18d1      	adds	r1, r2, r3
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3f0:	f7ff ff5c 	bl	800b2ac <prvInsertTimerInActiveList>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d06c      	beq.n	800b4d4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3fc:	6a1b      	ldr	r3, [r3, #32]
 800b3fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b400:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b404:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b408:	f003 0304 	and.w	r3, r3, #4
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d061      	beq.n	800b4d4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b410:	68ba      	ldr	r2, [r7, #8]
 800b412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b414:	699b      	ldr	r3, [r3, #24]
 800b416:	441a      	add	r2, r3
 800b418:	2300      	movs	r3, #0
 800b41a:	9300      	str	r3, [sp, #0]
 800b41c:	2300      	movs	r3, #0
 800b41e:	2100      	movs	r1, #0
 800b420:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b422:	f7ff fe01 	bl	800b028 <xTimerGenericCommand>
 800b426:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b428:	6a3b      	ldr	r3, [r7, #32]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d152      	bne.n	800b4d4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b432:	f383 8811 	msr	BASEPRI, r3
 800b436:	f3bf 8f6f 	isb	sy
 800b43a:	f3bf 8f4f 	dsb	sy
 800b43e:	61bb      	str	r3, [r7, #24]
}
 800b440:	bf00      	nop
 800b442:	bf00      	nop
 800b444:	e7fd      	b.n	800b442 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b448:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b44c:	f023 0301 	bic.w	r3, r3, #1
 800b450:	b2da      	uxtb	r2, r3
 800b452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b454:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b458:	e03d      	b.n	800b4d6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b45c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b460:	f043 0301 	orr.w	r3, r3, #1
 800b464:	b2da      	uxtb	r2, r3
 800b466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b468:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b46c:	68ba      	ldr	r2, [r7, #8]
 800b46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b470:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b474:	699b      	ldr	r3, [r3, #24]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10b      	bne.n	800b492 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b47e:	f383 8811 	msr	BASEPRI, r3
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	617b      	str	r3, [r7, #20]
}
 800b48c:	bf00      	nop
 800b48e:	bf00      	nop
 800b490:	e7fd      	b.n	800b48e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b494:	699a      	ldr	r2, [r3, #24]
 800b496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b498:	18d1      	adds	r1, r2, r3
 800b49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b49c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b49e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4a0:	f7ff ff04 	bl	800b2ac <prvInsertTimerInActiveList>
					break;
 800b4a4:	e017      	b.n	800b4d6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4ac:	f003 0302 	and.w	r3, r3, #2
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d103      	bne.n	800b4bc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b4b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4b6:	f000 fbe7 	bl	800bc88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b4ba:	e00c      	b.n	800b4d6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4c2:	f023 0301 	bic.w	r3, r3, #1
 800b4c6:	b2da      	uxtb	r2, r3
 800b4c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b4ce:	e002      	b.n	800b4d6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b4d0:	bf00      	nop
 800b4d2:	e000      	b.n	800b4d6 <prvProcessReceivedCommands+0x1a6>
					break;
 800b4d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b4d6:	4b08      	ldr	r3, [pc, #32]	@ (800b4f8 <prvProcessReceivedCommands+0x1c8>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	1d39      	adds	r1, r7, #4
 800b4dc:	2200      	movs	r2, #0
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7fd ffaa 	bl	8009438 <xQueueReceive>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	f47f af26 	bne.w	800b338 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b4ec:	bf00      	nop
 800b4ee:	bf00      	nop
 800b4f0:	3730      	adds	r7, #48	@ 0x30
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	20001298 	.word	0x20001298

0800b4fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b088      	sub	sp, #32
 800b500:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b502:	e049      	b.n	800b598 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b504:	4b2e      	ldr	r3, [pc, #184]	@ (800b5c0 <prvSwitchTimerLists+0xc4>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b50e:	4b2c      	ldr	r3, [pc, #176]	@ (800b5c0 <prvSwitchTimerLists+0xc4>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	3304      	adds	r3, #4
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7fd fb7d 	bl	8008c1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b530:	f003 0304 	and.w	r3, r3, #4
 800b534:	2b00      	cmp	r3, #0
 800b536:	d02f      	beq.n	800b598 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	699b      	ldr	r3, [r3, #24]
 800b53c:	693a      	ldr	r2, [r7, #16]
 800b53e:	4413      	add	r3, r2
 800b540:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b542:	68ba      	ldr	r2, [r7, #8]
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	429a      	cmp	r2, r3
 800b548:	d90e      	bls.n	800b568 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	68ba      	ldr	r2, [r7, #8]
 800b54e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	68fa      	ldr	r2, [r7, #12]
 800b554:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b556:	4b1a      	ldr	r3, [pc, #104]	@ (800b5c0 <prvSwitchTimerLists+0xc4>)
 800b558:	681a      	ldr	r2, [r3, #0]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	3304      	adds	r3, #4
 800b55e:	4619      	mov	r1, r3
 800b560:	4610      	mov	r0, r2
 800b562:	f7fd fb22 	bl	8008baa <vListInsert>
 800b566:	e017      	b.n	800b598 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b568:	2300      	movs	r3, #0
 800b56a:	9300      	str	r3, [sp, #0]
 800b56c:	2300      	movs	r3, #0
 800b56e:	693a      	ldr	r2, [r7, #16]
 800b570:	2100      	movs	r1, #0
 800b572:	68f8      	ldr	r0, [r7, #12]
 800b574:	f7ff fd58 	bl	800b028 <xTimerGenericCommand>
 800b578:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d10b      	bne.n	800b598 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b584:	f383 8811 	msr	BASEPRI, r3
 800b588:	f3bf 8f6f 	isb	sy
 800b58c:	f3bf 8f4f 	dsb	sy
 800b590:	603b      	str	r3, [r7, #0]
}
 800b592:	bf00      	nop
 800b594:	bf00      	nop
 800b596:	e7fd      	b.n	800b594 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b598:	4b09      	ldr	r3, [pc, #36]	@ (800b5c0 <prvSwitchTimerLists+0xc4>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d1b0      	bne.n	800b504 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b5a2:	4b07      	ldr	r3, [pc, #28]	@ (800b5c0 <prvSwitchTimerLists+0xc4>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b5a8:	4b06      	ldr	r3, [pc, #24]	@ (800b5c4 <prvSwitchTimerLists+0xc8>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a04      	ldr	r2, [pc, #16]	@ (800b5c0 <prvSwitchTimerLists+0xc4>)
 800b5ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b5b0:	4a04      	ldr	r2, [pc, #16]	@ (800b5c4 <prvSwitchTimerLists+0xc8>)
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	6013      	str	r3, [r2, #0]
}
 800b5b6:	bf00      	nop
 800b5b8:	3718      	adds	r7, #24
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	20001290 	.word	0x20001290
 800b5c4:	20001294 	.word	0x20001294

0800b5c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b5ce:	f000 f96b 	bl	800b8a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b5d2:	4b15      	ldr	r3, [pc, #84]	@ (800b628 <prvCheckForValidListAndQueue+0x60>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d120      	bne.n	800b61c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b5da:	4814      	ldr	r0, [pc, #80]	@ (800b62c <prvCheckForValidListAndQueue+0x64>)
 800b5dc:	f7fd fa94 	bl	8008b08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b5e0:	4813      	ldr	r0, [pc, #76]	@ (800b630 <prvCheckForValidListAndQueue+0x68>)
 800b5e2:	f7fd fa91 	bl	8008b08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b5e6:	4b13      	ldr	r3, [pc, #76]	@ (800b634 <prvCheckForValidListAndQueue+0x6c>)
 800b5e8:	4a10      	ldr	r2, [pc, #64]	@ (800b62c <prvCheckForValidListAndQueue+0x64>)
 800b5ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b5ec:	4b12      	ldr	r3, [pc, #72]	@ (800b638 <prvCheckForValidListAndQueue+0x70>)
 800b5ee:	4a10      	ldr	r2, [pc, #64]	@ (800b630 <prvCheckForValidListAndQueue+0x68>)
 800b5f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	4b11      	ldr	r3, [pc, #68]	@ (800b63c <prvCheckForValidListAndQueue+0x74>)
 800b5f8:	4a11      	ldr	r2, [pc, #68]	@ (800b640 <prvCheckForValidListAndQueue+0x78>)
 800b5fa:	2110      	movs	r1, #16
 800b5fc:	200a      	movs	r0, #10
 800b5fe:	f7fd fba1 	bl	8008d44 <xQueueGenericCreateStatic>
 800b602:	4603      	mov	r3, r0
 800b604:	4a08      	ldr	r2, [pc, #32]	@ (800b628 <prvCheckForValidListAndQueue+0x60>)
 800b606:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b608:	4b07      	ldr	r3, [pc, #28]	@ (800b628 <prvCheckForValidListAndQueue+0x60>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d005      	beq.n	800b61c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b610:	4b05      	ldr	r3, [pc, #20]	@ (800b628 <prvCheckForValidListAndQueue+0x60>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	490b      	ldr	r1, [pc, #44]	@ (800b644 <prvCheckForValidListAndQueue+0x7c>)
 800b616:	4618      	mov	r0, r3
 800b618:	f7fe faf2 	bl	8009c00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b61c:	f000 f976 	bl	800b90c <vPortExitCritical>
}
 800b620:	bf00      	nop
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	20001298 	.word	0x20001298
 800b62c:	20001268 	.word	0x20001268
 800b630:	2000127c 	.word	0x2000127c
 800b634:	20001290 	.word	0x20001290
 800b638:	20001294 	.word	0x20001294
 800b63c:	20001344 	.word	0x20001344
 800b640:	200012a4 	.word	0x200012a4
 800b644:	0800c950 	.word	0x0800c950

0800b648 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b648:	b480      	push	{r7}
 800b64a:	b085      	sub	sp, #20
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	3b04      	subs	r3, #4
 800b658:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b660:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	3b04      	subs	r3, #4
 800b666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	f023 0201 	bic.w	r2, r3, #1
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	3b04      	subs	r3, #4
 800b676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b678:	4a0c      	ldr	r2, [pc, #48]	@ (800b6ac <pxPortInitialiseStack+0x64>)
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	3b14      	subs	r3, #20
 800b682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	3b04      	subs	r3, #4
 800b68e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f06f 0202 	mvn.w	r2, #2
 800b696:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	3b20      	subs	r3, #32
 800b69c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b69e:	68fb      	ldr	r3, [r7, #12]
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3714      	adds	r7, #20
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr
 800b6ac:	0800b6b1 	.word	0x0800b6b1

0800b6b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b085      	sub	sp, #20
 800b6b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b6ba:	4b13      	ldr	r3, [pc, #76]	@ (800b708 <prvTaskExitError+0x58>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c2:	d00b      	beq.n	800b6dc <prvTaskExitError+0x2c>
	__asm volatile
 800b6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c8:	f383 8811 	msr	BASEPRI, r3
 800b6cc:	f3bf 8f6f 	isb	sy
 800b6d0:	f3bf 8f4f 	dsb	sy
 800b6d4:	60fb      	str	r3, [r7, #12]
}
 800b6d6:	bf00      	nop
 800b6d8:	bf00      	nop
 800b6da:	e7fd      	b.n	800b6d8 <prvTaskExitError+0x28>
	__asm volatile
 800b6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e0:	f383 8811 	msr	BASEPRI, r3
 800b6e4:	f3bf 8f6f 	isb	sy
 800b6e8:	f3bf 8f4f 	dsb	sy
 800b6ec:	60bb      	str	r3, [r7, #8]
}
 800b6ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b6f0:	bf00      	nop
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d0fc      	beq.n	800b6f2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b6f8:	bf00      	nop
 800b6fa:	bf00      	nop
 800b6fc:	3714      	adds	r7, #20
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop
 800b708:	20000020 	.word	0x20000020
 800b70c:	00000000 	.word	0x00000000

0800b710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b710:	4b07      	ldr	r3, [pc, #28]	@ (800b730 <pxCurrentTCBConst2>)
 800b712:	6819      	ldr	r1, [r3, #0]
 800b714:	6808      	ldr	r0, [r1, #0]
 800b716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71a:	f380 8809 	msr	PSP, r0
 800b71e:	f3bf 8f6f 	isb	sy
 800b722:	f04f 0000 	mov.w	r0, #0
 800b726:	f380 8811 	msr	BASEPRI, r0
 800b72a:	4770      	bx	lr
 800b72c:	f3af 8000 	nop.w

0800b730 <pxCurrentTCBConst2>:
 800b730:	20000d68 	.word	0x20000d68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b734:	bf00      	nop
 800b736:	bf00      	nop

0800b738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b738:	4808      	ldr	r0, [pc, #32]	@ (800b75c <prvPortStartFirstTask+0x24>)
 800b73a:	6800      	ldr	r0, [r0, #0]
 800b73c:	6800      	ldr	r0, [r0, #0]
 800b73e:	f380 8808 	msr	MSP, r0
 800b742:	f04f 0000 	mov.w	r0, #0
 800b746:	f380 8814 	msr	CONTROL, r0
 800b74a:	b662      	cpsie	i
 800b74c:	b661      	cpsie	f
 800b74e:	f3bf 8f4f 	dsb	sy
 800b752:	f3bf 8f6f 	isb	sy
 800b756:	df00      	svc	0
 800b758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b75a:	bf00      	nop
 800b75c:	e000ed08 	.word	0xe000ed08

0800b760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b086      	sub	sp, #24
 800b764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b766:	4b47      	ldr	r3, [pc, #284]	@ (800b884 <xPortStartScheduler+0x124>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a47      	ldr	r2, [pc, #284]	@ (800b888 <xPortStartScheduler+0x128>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d10b      	bne.n	800b788 <xPortStartScheduler+0x28>
	__asm volatile
 800b770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b774:	f383 8811 	msr	BASEPRI, r3
 800b778:	f3bf 8f6f 	isb	sy
 800b77c:	f3bf 8f4f 	dsb	sy
 800b780:	613b      	str	r3, [r7, #16]
}
 800b782:	bf00      	nop
 800b784:	bf00      	nop
 800b786:	e7fd      	b.n	800b784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b788:	4b3e      	ldr	r3, [pc, #248]	@ (800b884 <xPortStartScheduler+0x124>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4a3f      	ldr	r2, [pc, #252]	@ (800b88c <xPortStartScheduler+0x12c>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d10b      	bne.n	800b7aa <xPortStartScheduler+0x4a>
	__asm volatile
 800b792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b796:	f383 8811 	msr	BASEPRI, r3
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	60fb      	str	r3, [r7, #12]
}
 800b7a4:	bf00      	nop
 800b7a6:	bf00      	nop
 800b7a8:	e7fd      	b.n	800b7a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b7aa:	4b39      	ldr	r3, [pc, #228]	@ (800b890 <xPortStartScheduler+0x130>)
 800b7ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	22ff      	movs	r2, #255	@ 0xff
 800b7ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b7c4:	78fb      	ldrb	r3, [r7, #3]
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b7cc:	b2da      	uxtb	r2, r3
 800b7ce:	4b31      	ldr	r3, [pc, #196]	@ (800b894 <xPortStartScheduler+0x134>)
 800b7d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b7d2:	4b31      	ldr	r3, [pc, #196]	@ (800b898 <xPortStartScheduler+0x138>)
 800b7d4:	2207      	movs	r2, #7
 800b7d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7d8:	e009      	b.n	800b7ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b7da:	4b2f      	ldr	r3, [pc, #188]	@ (800b898 <xPortStartScheduler+0x138>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	4a2d      	ldr	r2, [pc, #180]	@ (800b898 <xPortStartScheduler+0x138>)
 800b7e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b7e4:	78fb      	ldrb	r3, [r7, #3]
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	005b      	lsls	r3, r3, #1
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7ee:	78fb      	ldrb	r3, [r7, #3]
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7f6:	2b80      	cmp	r3, #128	@ 0x80
 800b7f8:	d0ef      	beq.n	800b7da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b7fa:	4b27      	ldr	r3, [pc, #156]	@ (800b898 <xPortStartScheduler+0x138>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f1c3 0307 	rsb	r3, r3, #7
 800b802:	2b04      	cmp	r3, #4
 800b804:	d00b      	beq.n	800b81e <xPortStartScheduler+0xbe>
	__asm volatile
 800b806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b80a:	f383 8811 	msr	BASEPRI, r3
 800b80e:	f3bf 8f6f 	isb	sy
 800b812:	f3bf 8f4f 	dsb	sy
 800b816:	60bb      	str	r3, [r7, #8]
}
 800b818:	bf00      	nop
 800b81a:	bf00      	nop
 800b81c:	e7fd      	b.n	800b81a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b81e:	4b1e      	ldr	r3, [pc, #120]	@ (800b898 <xPortStartScheduler+0x138>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	021b      	lsls	r3, r3, #8
 800b824:	4a1c      	ldr	r2, [pc, #112]	@ (800b898 <xPortStartScheduler+0x138>)
 800b826:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b828:	4b1b      	ldr	r3, [pc, #108]	@ (800b898 <xPortStartScheduler+0x138>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b830:	4a19      	ldr	r2, [pc, #100]	@ (800b898 <xPortStartScheduler+0x138>)
 800b832:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	b2da      	uxtb	r2, r3
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b83c:	4b17      	ldr	r3, [pc, #92]	@ (800b89c <xPortStartScheduler+0x13c>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a16      	ldr	r2, [pc, #88]	@ (800b89c <xPortStartScheduler+0x13c>)
 800b842:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b846:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b848:	4b14      	ldr	r3, [pc, #80]	@ (800b89c <xPortStartScheduler+0x13c>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a13      	ldr	r2, [pc, #76]	@ (800b89c <xPortStartScheduler+0x13c>)
 800b84e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b852:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b854:	f000 f8da 	bl	800ba0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b858:	4b11      	ldr	r3, [pc, #68]	@ (800b8a0 <xPortStartScheduler+0x140>)
 800b85a:	2200      	movs	r2, #0
 800b85c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b85e:	f000 f8f9 	bl	800ba54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b862:	4b10      	ldr	r3, [pc, #64]	@ (800b8a4 <xPortStartScheduler+0x144>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a0f      	ldr	r2, [pc, #60]	@ (800b8a4 <xPortStartScheduler+0x144>)
 800b868:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b86c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b86e:	f7ff ff63 	bl	800b738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b872:	f7fe ff2f 	bl	800a6d4 <vTaskSwitchContext>
	prvTaskExitError();
 800b876:	f7ff ff1b 	bl	800b6b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b87a:	2300      	movs	r3, #0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3718      	adds	r7, #24
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}
 800b884:	e000ed00 	.word	0xe000ed00
 800b888:	410fc271 	.word	0x410fc271
 800b88c:	410fc270 	.word	0x410fc270
 800b890:	e000e400 	.word	0xe000e400
 800b894:	20001394 	.word	0x20001394
 800b898:	20001398 	.word	0x20001398
 800b89c:	e000ed20 	.word	0xe000ed20
 800b8a0:	20000020 	.word	0x20000020
 800b8a4:	e000ef34 	.word	0xe000ef34

0800b8a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8b2:	f383 8811 	msr	BASEPRI, r3
 800b8b6:	f3bf 8f6f 	isb	sy
 800b8ba:	f3bf 8f4f 	dsb	sy
 800b8be:	607b      	str	r3, [r7, #4]
}
 800b8c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b8c2:	4b10      	ldr	r3, [pc, #64]	@ (800b904 <vPortEnterCritical+0x5c>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	4a0e      	ldr	r2, [pc, #56]	@ (800b904 <vPortEnterCritical+0x5c>)
 800b8ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b8cc:	4b0d      	ldr	r3, [pc, #52]	@ (800b904 <vPortEnterCritical+0x5c>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d110      	bne.n	800b8f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b8d4:	4b0c      	ldr	r3, [pc, #48]	@ (800b908 <vPortEnterCritical+0x60>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00b      	beq.n	800b8f6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8e2:	f383 8811 	msr	BASEPRI, r3
 800b8e6:	f3bf 8f6f 	isb	sy
 800b8ea:	f3bf 8f4f 	dsb	sy
 800b8ee:	603b      	str	r3, [r7, #0]
}
 800b8f0:	bf00      	nop
 800b8f2:	bf00      	nop
 800b8f4:	e7fd      	b.n	800b8f2 <vPortEnterCritical+0x4a>
	}
}
 800b8f6:	bf00      	nop
 800b8f8:	370c      	adds	r7, #12
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr
 800b902:	bf00      	nop
 800b904:	20000020 	.word	0x20000020
 800b908:	e000ed04 	.word	0xe000ed04

0800b90c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b90c:	b480      	push	{r7}
 800b90e:	b083      	sub	sp, #12
 800b910:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b912:	4b12      	ldr	r3, [pc, #72]	@ (800b95c <vPortExitCritical+0x50>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d10b      	bne.n	800b932 <vPortExitCritical+0x26>
	__asm volatile
 800b91a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b91e:	f383 8811 	msr	BASEPRI, r3
 800b922:	f3bf 8f6f 	isb	sy
 800b926:	f3bf 8f4f 	dsb	sy
 800b92a:	607b      	str	r3, [r7, #4]
}
 800b92c:	bf00      	nop
 800b92e:	bf00      	nop
 800b930:	e7fd      	b.n	800b92e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b932:	4b0a      	ldr	r3, [pc, #40]	@ (800b95c <vPortExitCritical+0x50>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	3b01      	subs	r3, #1
 800b938:	4a08      	ldr	r2, [pc, #32]	@ (800b95c <vPortExitCritical+0x50>)
 800b93a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b93c:	4b07      	ldr	r3, [pc, #28]	@ (800b95c <vPortExitCritical+0x50>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d105      	bne.n	800b950 <vPortExitCritical+0x44>
 800b944:	2300      	movs	r3, #0
 800b946:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	f383 8811 	msr	BASEPRI, r3
}
 800b94e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b950:	bf00      	nop
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr
 800b95c:	20000020 	.word	0x20000020

0800b960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b960:	f3ef 8009 	mrs	r0, PSP
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	4b15      	ldr	r3, [pc, #84]	@ (800b9c0 <pxCurrentTCBConst>)
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	f01e 0f10 	tst.w	lr, #16
 800b970:	bf08      	it	eq
 800b972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b97a:	6010      	str	r0, [r2, #0]
 800b97c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b980:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b984:	f380 8811 	msr	BASEPRI, r0
 800b988:	f3bf 8f4f 	dsb	sy
 800b98c:	f3bf 8f6f 	isb	sy
 800b990:	f7fe fea0 	bl	800a6d4 <vTaskSwitchContext>
 800b994:	f04f 0000 	mov.w	r0, #0
 800b998:	f380 8811 	msr	BASEPRI, r0
 800b99c:	bc09      	pop	{r0, r3}
 800b99e:	6819      	ldr	r1, [r3, #0]
 800b9a0:	6808      	ldr	r0, [r1, #0]
 800b9a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a6:	f01e 0f10 	tst.w	lr, #16
 800b9aa:	bf08      	it	eq
 800b9ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b9b0:	f380 8809 	msr	PSP, r0
 800b9b4:	f3bf 8f6f 	isb	sy
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop
 800b9bc:	f3af 8000 	nop.w

0800b9c0 <pxCurrentTCBConst>:
 800b9c0:	20000d68 	.word	0x20000d68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b9c4:	bf00      	nop
 800b9c6:	bf00      	nop

0800b9c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
	__asm volatile
 800b9ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9d2:	f383 8811 	msr	BASEPRI, r3
 800b9d6:	f3bf 8f6f 	isb	sy
 800b9da:	f3bf 8f4f 	dsb	sy
 800b9de:	607b      	str	r3, [r7, #4]
}
 800b9e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b9e2:	f7fe fdbd 	bl	800a560 <xTaskIncrementTick>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d003      	beq.n	800b9f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b9ec:	4b06      	ldr	r3, [pc, #24]	@ (800ba08 <xPortSysTickHandler+0x40>)
 800b9ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9f2:	601a      	str	r2, [r3, #0]
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	f383 8811 	msr	BASEPRI, r3
}
 800b9fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ba00:	bf00      	nop
 800ba02:	3708      	adds	r7, #8
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	e000ed04 	.word	0xe000ed04

0800ba0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ba10:	4b0b      	ldr	r3, [pc, #44]	@ (800ba40 <vPortSetupTimerInterrupt+0x34>)
 800ba12:	2200      	movs	r2, #0
 800ba14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ba16:	4b0b      	ldr	r3, [pc, #44]	@ (800ba44 <vPortSetupTimerInterrupt+0x38>)
 800ba18:	2200      	movs	r2, #0
 800ba1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ba1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ba48 <vPortSetupTimerInterrupt+0x3c>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4a0a      	ldr	r2, [pc, #40]	@ (800ba4c <vPortSetupTimerInterrupt+0x40>)
 800ba22:	fba2 2303 	umull	r2, r3, r2, r3
 800ba26:	099b      	lsrs	r3, r3, #6
 800ba28:	4a09      	ldr	r2, [pc, #36]	@ (800ba50 <vPortSetupTimerInterrupt+0x44>)
 800ba2a:	3b01      	subs	r3, #1
 800ba2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ba2e:	4b04      	ldr	r3, [pc, #16]	@ (800ba40 <vPortSetupTimerInterrupt+0x34>)
 800ba30:	2207      	movs	r2, #7
 800ba32:	601a      	str	r2, [r3, #0]
}
 800ba34:	bf00      	nop
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr
 800ba3e:	bf00      	nop
 800ba40:	e000e010 	.word	0xe000e010
 800ba44:	e000e018 	.word	0xe000e018
 800ba48:	20000004 	.word	0x20000004
 800ba4c:	10624dd3 	.word	0x10624dd3
 800ba50:	e000e014 	.word	0xe000e014

0800ba54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ba54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ba64 <vPortEnableVFP+0x10>
 800ba58:	6801      	ldr	r1, [r0, #0]
 800ba5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ba5e:	6001      	str	r1, [r0, #0]
 800ba60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ba62:	bf00      	nop
 800ba64:	e000ed88 	.word	0xe000ed88

0800ba68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ba6e:	f3ef 8305 	mrs	r3, IPSR
 800ba72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2b0f      	cmp	r3, #15
 800ba78:	d915      	bls.n	800baa6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ba7a:	4a18      	ldr	r2, [pc, #96]	@ (800badc <vPortValidateInterruptPriority+0x74>)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	4413      	add	r3, r2
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ba84:	4b16      	ldr	r3, [pc, #88]	@ (800bae0 <vPortValidateInterruptPriority+0x78>)
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	7afa      	ldrb	r2, [r7, #11]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d20b      	bcs.n	800baa6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ba8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba92:	f383 8811 	msr	BASEPRI, r3
 800ba96:	f3bf 8f6f 	isb	sy
 800ba9a:	f3bf 8f4f 	dsb	sy
 800ba9e:	607b      	str	r3, [r7, #4]
}
 800baa0:	bf00      	nop
 800baa2:	bf00      	nop
 800baa4:	e7fd      	b.n	800baa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800baa6:	4b0f      	ldr	r3, [pc, #60]	@ (800bae4 <vPortValidateInterruptPriority+0x7c>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800baae:	4b0e      	ldr	r3, [pc, #56]	@ (800bae8 <vPortValidateInterruptPriority+0x80>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d90b      	bls.n	800bace <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baba:	f383 8811 	msr	BASEPRI, r3
 800babe:	f3bf 8f6f 	isb	sy
 800bac2:	f3bf 8f4f 	dsb	sy
 800bac6:	603b      	str	r3, [r7, #0]
}
 800bac8:	bf00      	nop
 800baca:	bf00      	nop
 800bacc:	e7fd      	b.n	800baca <vPortValidateInterruptPriority+0x62>
	}
 800bace:	bf00      	nop
 800bad0:	3714      	adds	r7, #20
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop
 800badc:	e000e3f0 	.word	0xe000e3f0
 800bae0:	20001394 	.word	0x20001394
 800bae4:	e000ed0c 	.word	0xe000ed0c
 800bae8:	20001398 	.word	0x20001398

0800baec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b08a      	sub	sp, #40	@ 0x28
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800baf4:	2300      	movs	r3, #0
 800baf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800baf8:	f7fe fc76 	bl	800a3e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bafc:	4b5c      	ldr	r3, [pc, #368]	@ (800bc70 <pvPortMalloc+0x184>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d101      	bne.n	800bb08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bb04:	f000 f924 	bl	800bd50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bb08:	4b5a      	ldr	r3, [pc, #360]	@ (800bc74 <pvPortMalloc+0x188>)
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	4013      	ands	r3, r2
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f040 8095 	bne.w	800bc40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d01e      	beq.n	800bb5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bb1c:	2208      	movs	r2, #8
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	4413      	add	r3, r2
 800bb22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f003 0307 	and.w	r3, r3, #7
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d015      	beq.n	800bb5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f023 0307 	bic.w	r3, r3, #7
 800bb34:	3308      	adds	r3, #8
 800bb36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f003 0307 	and.w	r3, r3, #7
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d00b      	beq.n	800bb5a <pvPortMalloc+0x6e>
	__asm volatile
 800bb42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb46:	f383 8811 	msr	BASEPRI, r3
 800bb4a:	f3bf 8f6f 	isb	sy
 800bb4e:	f3bf 8f4f 	dsb	sy
 800bb52:	617b      	str	r3, [r7, #20]
}
 800bb54:	bf00      	nop
 800bb56:	bf00      	nop
 800bb58:	e7fd      	b.n	800bb56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d06f      	beq.n	800bc40 <pvPortMalloc+0x154>
 800bb60:	4b45      	ldr	r3, [pc, #276]	@ (800bc78 <pvPortMalloc+0x18c>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d86a      	bhi.n	800bc40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bb6a:	4b44      	ldr	r3, [pc, #272]	@ (800bc7c <pvPortMalloc+0x190>)
 800bb6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bb6e:	4b43      	ldr	r3, [pc, #268]	@ (800bc7c <pvPortMalloc+0x190>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb74:	e004      	b.n	800bb80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d903      	bls.n	800bb92 <pvPortMalloc+0xa6>
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d1f1      	bne.n	800bb76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bb92:	4b37      	ldr	r3, [pc, #220]	@ (800bc70 <pvPortMalloc+0x184>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d051      	beq.n	800bc40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bb9c:	6a3b      	ldr	r3, [r7, #32]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2208      	movs	r2, #8
 800bba2:	4413      	add	r3, r2
 800bba4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	6a3b      	ldr	r3, [r7, #32]
 800bbac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bbae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb0:	685a      	ldr	r2, [r3, #4]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	1ad2      	subs	r2, r2, r3
 800bbb6:	2308      	movs	r3, #8
 800bbb8:	005b      	lsls	r3, r3, #1
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d920      	bls.n	800bc00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bbbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbc6:	69bb      	ldr	r3, [r7, #24]
 800bbc8:	f003 0307 	and.w	r3, r3, #7
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d00b      	beq.n	800bbe8 <pvPortMalloc+0xfc>
	__asm volatile
 800bbd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbd4:	f383 8811 	msr	BASEPRI, r3
 800bbd8:	f3bf 8f6f 	isb	sy
 800bbdc:	f3bf 8f4f 	dsb	sy
 800bbe0:	613b      	str	r3, [r7, #16]
}
 800bbe2:	bf00      	nop
 800bbe4:	bf00      	nop
 800bbe6:	e7fd      	b.n	800bbe4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bbe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbea:	685a      	ldr	r2, [r3, #4]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	1ad2      	subs	r2, r2, r3
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bbf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bbfa:	69b8      	ldr	r0, [r7, #24]
 800bbfc:	f000 f90a 	bl	800be14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bc00:	4b1d      	ldr	r3, [pc, #116]	@ (800bc78 <pvPortMalloc+0x18c>)
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	1ad3      	subs	r3, r2, r3
 800bc0a:	4a1b      	ldr	r2, [pc, #108]	@ (800bc78 <pvPortMalloc+0x18c>)
 800bc0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bc0e:	4b1a      	ldr	r3, [pc, #104]	@ (800bc78 <pvPortMalloc+0x18c>)
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	4b1b      	ldr	r3, [pc, #108]	@ (800bc80 <pvPortMalloc+0x194>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d203      	bcs.n	800bc22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bc1a:	4b17      	ldr	r3, [pc, #92]	@ (800bc78 <pvPortMalloc+0x18c>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	4a18      	ldr	r2, [pc, #96]	@ (800bc80 <pvPortMalloc+0x194>)
 800bc20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bc22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc24:	685a      	ldr	r2, [r3, #4]
 800bc26:	4b13      	ldr	r3, [pc, #76]	@ (800bc74 <pvPortMalloc+0x188>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	431a      	orrs	r2, r3
 800bc2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bc30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc32:	2200      	movs	r2, #0
 800bc34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bc36:	4b13      	ldr	r3, [pc, #76]	@ (800bc84 <pvPortMalloc+0x198>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	4a11      	ldr	r2, [pc, #68]	@ (800bc84 <pvPortMalloc+0x198>)
 800bc3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bc40:	f7fe fbe0 	bl	800a404 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	f003 0307 	and.w	r3, r3, #7
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d00b      	beq.n	800bc66 <pvPortMalloc+0x17a>
	__asm volatile
 800bc4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc52:	f383 8811 	msr	BASEPRI, r3
 800bc56:	f3bf 8f6f 	isb	sy
 800bc5a:	f3bf 8f4f 	dsb	sy
 800bc5e:	60fb      	str	r3, [r7, #12]
}
 800bc60:	bf00      	nop
 800bc62:	bf00      	nop
 800bc64:	e7fd      	b.n	800bc62 <pvPortMalloc+0x176>
	return pvReturn;
 800bc66:	69fb      	ldr	r3, [r7, #28]
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3728      	adds	r7, #40	@ 0x28
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	20001f5c 	.word	0x20001f5c
 800bc74:	20001f70 	.word	0x20001f70
 800bc78:	20001f60 	.word	0x20001f60
 800bc7c:	20001f54 	.word	0x20001f54
 800bc80:	20001f64 	.word	0x20001f64
 800bc84:	20001f68 	.word	0x20001f68

0800bc88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b086      	sub	sp, #24
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d04f      	beq.n	800bd3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bc9a:	2308      	movs	r3, #8
 800bc9c:	425b      	negs	r3, r3
 800bc9e:	697a      	ldr	r2, [r7, #20]
 800bca0:	4413      	add	r3, r2
 800bca2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	685a      	ldr	r2, [r3, #4]
 800bcac:	4b25      	ldr	r3, [pc, #148]	@ (800bd44 <vPortFree+0xbc>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4013      	ands	r3, r2
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d10b      	bne.n	800bcce <vPortFree+0x46>
	__asm volatile
 800bcb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcba:	f383 8811 	msr	BASEPRI, r3
 800bcbe:	f3bf 8f6f 	isb	sy
 800bcc2:	f3bf 8f4f 	dsb	sy
 800bcc6:	60fb      	str	r3, [r7, #12]
}
 800bcc8:	bf00      	nop
 800bcca:	bf00      	nop
 800bccc:	e7fd      	b.n	800bcca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d00b      	beq.n	800bcee <vPortFree+0x66>
	__asm volatile
 800bcd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcda:	f383 8811 	msr	BASEPRI, r3
 800bcde:	f3bf 8f6f 	isb	sy
 800bce2:	f3bf 8f4f 	dsb	sy
 800bce6:	60bb      	str	r3, [r7, #8]
}
 800bce8:	bf00      	nop
 800bcea:	bf00      	nop
 800bcec:	e7fd      	b.n	800bcea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	685a      	ldr	r2, [r3, #4]
 800bcf2:	4b14      	ldr	r3, [pc, #80]	@ (800bd44 <vPortFree+0xbc>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4013      	ands	r3, r2
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d01e      	beq.n	800bd3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d11a      	bne.n	800bd3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	685a      	ldr	r2, [r3, #4]
 800bd08:	4b0e      	ldr	r3, [pc, #56]	@ (800bd44 <vPortFree+0xbc>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	43db      	mvns	r3, r3
 800bd0e:	401a      	ands	r2, r3
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bd14:	f7fe fb68 	bl	800a3e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	685a      	ldr	r2, [r3, #4]
 800bd1c:	4b0a      	ldr	r3, [pc, #40]	@ (800bd48 <vPortFree+0xc0>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4413      	add	r3, r2
 800bd22:	4a09      	ldr	r2, [pc, #36]	@ (800bd48 <vPortFree+0xc0>)
 800bd24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bd26:	6938      	ldr	r0, [r7, #16]
 800bd28:	f000 f874 	bl	800be14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bd2c:	4b07      	ldr	r3, [pc, #28]	@ (800bd4c <vPortFree+0xc4>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	3301      	adds	r3, #1
 800bd32:	4a06      	ldr	r2, [pc, #24]	@ (800bd4c <vPortFree+0xc4>)
 800bd34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bd36:	f7fe fb65 	bl	800a404 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bd3a:	bf00      	nop
 800bd3c:	3718      	adds	r7, #24
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	20001f70 	.word	0x20001f70
 800bd48:	20001f60 	.word	0x20001f60
 800bd4c:	20001f6c 	.word	0x20001f6c

0800bd50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bd50:	b480      	push	{r7}
 800bd52:	b085      	sub	sp, #20
 800bd54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bd56:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800bd5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bd5c:	4b27      	ldr	r3, [pc, #156]	@ (800bdfc <prvHeapInit+0xac>)
 800bd5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f003 0307 	and.w	r3, r3, #7
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00c      	beq.n	800bd84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	3307      	adds	r3, #7
 800bd6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f023 0307 	bic.w	r3, r3, #7
 800bd76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bd78:	68ba      	ldr	r2, [r7, #8]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	1ad3      	subs	r3, r2, r3
 800bd7e:	4a1f      	ldr	r2, [pc, #124]	@ (800bdfc <prvHeapInit+0xac>)
 800bd80:	4413      	add	r3, r2
 800bd82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bd88:	4a1d      	ldr	r2, [pc, #116]	@ (800be00 <prvHeapInit+0xb0>)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bd8e:	4b1c      	ldr	r3, [pc, #112]	@ (800be00 <prvHeapInit+0xb0>)
 800bd90:	2200      	movs	r2, #0
 800bd92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	4413      	add	r3, r2
 800bd9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bd9c:	2208      	movs	r2, #8
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	1a9b      	subs	r3, r3, r2
 800bda2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f023 0307 	bic.w	r3, r3, #7
 800bdaa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	4a15      	ldr	r2, [pc, #84]	@ (800be04 <prvHeapInit+0xb4>)
 800bdb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bdb2:	4b14      	ldr	r3, [pc, #80]	@ (800be04 <prvHeapInit+0xb4>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bdba:	4b12      	ldr	r3, [pc, #72]	@ (800be04 <prvHeapInit+0xb4>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	1ad2      	subs	r2, r2, r3
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bdd0:	4b0c      	ldr	r3, [pc, #48]	@ (800be04 <prvHeapInit+0xb4>)
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	4a0a      	ldr	r2, [pc, #40]	@ (800be08 <prvHeapInit+0xb8>)
 800bdde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	4a09      	ldr	r2, [pc, #36]	@ (800be0c <prvHeapInit+0xbc>)
 800bde6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bde8:	4b09      	ldr	r3, [pc, #36]	@ (800be10 <prvHeapInit+0xc0>)
 800bdea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bdee:	601a      	str	r2, [r3, #0]
}
 800bdf0:	bf00      	nop
 800bdf2:	3714      	adds	r7, #20
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr
 800bdfc:	2000139c 	.word	0x2000139c
 800be00:	20001f54 	.word	0x20001f54
 800be04:	20001f5c 	.word	0x20001f5c
 800be08:	20001f64 	.word	0x20001f64
 800be0c:	20001f60 	.word	0x20001f60
 800be10:	20001f70 	.word	0x20001f70

0800be14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800be1c:	4b28      	ldr	r3, [pc, #160]	@ (800bec0 <prvInsertBlockIntoFreeList+0xac>)
 800be1e:	60fb      	str	r3, [r7, #12]
 800be20:	e002      	b.n	800be28 <prvInsertBlockIntoFreeList+0x14>
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	60fb      	str	r3, [r7, #12]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d8f7      	bhi.n	800be22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	68ba      	ldr	r2, [r7, #8]
 800be3c:	4413      	add	r3, r2
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	429a      	cmp	r2, r3
 800be42:	d108      	bne.n	800be56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	685a      	ldr	r2, [r3, #4]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	441a      	add	r2, r3
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	68ba      	ldr	r2, [r7, #8]
 800be60:	441a      	add	r2, r3
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	429a      	cmp	r2, r3
 800be68:	d118      	bne.n	800be9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	4b15      	ldr	r3, [pc, #84]	@ (800bec4 <prvInsertBlockIntoFreeList+0xb0>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	429a      	cmp	r2, r3
 800be74:	d00d      	beq.n	800be92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	685a      	ldr	r2, [r3, #4]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	441a      	add	r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	601a      	str	r2, [r3, #0]
 800be90:	e008      	b.n	800bea4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800be92:	4b0c      	ldr	r3, [pc, #48]	@ (800bec4 <prvInsertBlockIntoFreeList+0xb0>)
 800be94:	681a      	ldr	r2, [r3, #0]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	601a      	str	r2, [r3, #0]
 800be9a:	e003      	b.n	800bea4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bea4:	68fa      	ldr	r2, [r7, #12]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d002      	beq.n	800beb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800beb2:	bf00      	nop
 800beb4:	3714      	adds	r7, #20
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr
 800bebe:	bf00      	nop
 800bec0:	20001f54 	.word	0x20001f54
 800bec4:	20001f5c 	.word	0x20001f5c

0800bec8 <siprintf>:
 800bec8:	b40e      	push	{r1, r2, r3}
 800beca:	b500      	push	{lr}
 800becc:	b09c      	sub	sp, #112	@ 0x70
 800bece:	ab1d      	add	r3, sp, #116	@ 0x74
 800bed0:	9002      	str	r0, [sp, #8]
 800bed2:	9006      	str	r0, [sp, #24]
 800bed4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bed8:	4809      	ldr	r0, [pc, #36]	@ (800bf00 <siprintf+0x38>)
 800beda:	9107      	str	r1, [sp, #28]
 800bedc:	9104      	str	r1, [sp, #16]
 800bede:	4909      	ldr	r1, [pc, #36]	@ (800bf04 <siprintf+0x3c>)
 800bee0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bee4:	9105      	str	r1, [sp, #20]
 800bee6:	6800      	ldr	r0, [r0, #0]
 800bee8:	9301      	str	r3, [sp, #4]
 800beea:	a902      	add	r1, sp, #8
 800beec:	f000 f9f8 	bl	800c2e0 <_svfiprintf_r>
 800bef0:	9b02      	ldr	r3, [sp, #8]
 800bef2:	2200      	movs	r2, #0
 800bef4:	701a      	strb	r2, [r3, #0]
 800bef6:	b01c      	add	sp, #112	@ 0x70
 800bef8:	f85d eb04 	ldr.w	lr, [sp], #4
 800befc:	b003      	add	sp, #12
 800befe:	4770      	bx	lr
 800bf00:	20000024 	.word	0x20000024
 800bf04:	ffff0208 	.word	0xffff0208

0800bf08 <memset>:
 800bf08:	4402      	add	r2, r0
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d100      	bne.n	800bf12 <memset+0xa>
 800bf10:	4770      	bx	lr
 800bf12:	f803 1b01 	strb.w	r1, [r3], #1
 800bf16:	e7f9      	b.n	800bf0c <memset+0x4>

0800bf18 <_reclaim_reent>:
 800bf18:	4b29      	ldr	r3, [pc, #164]	@ (800bfc0 <_reclaim_reent+0xa8>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4283      	cmp	r3, r0
 800bf1e:	b570      	push	{r4, r5, r6, lr}
 800bf20:	4604      	mov	r4, r0
 800bf22:	d04b      	beq.n	800bfbc <_reclaim_reent+0xa4>
 800bf24:	69c3      	ldr	r3, [r0, #28]
 800bf26:	b1ab      	cbz	r3, 800bf54 <_reclaim_reent+0x3c>
 800bf28:	68db      	ldr	r3, [r3, #12]
 800bf2a:	b16b      	cbz	r3, 800bf48 <_reclaim_reent+0x30>
 800bf2c:	2500      	movs	r5, #0
 800bf2e:	69e3      	ldr	r3, [r4, #28]
 800bf30:	68db      	ldr	r3, [r3, #12]
 800bf32:	5959      	ldr	r1, [r3, r5]
 800bf34:	2900      	cmp	r1, #0
 800bf36:	d13b      	bne.n	800bfb0 <_reclaim_reent+0x98>
 800bf38:	3504      	adds	r5, #4
 800bf3a:	2d80      	cmp	r5, #128	@ 0x80
 800bf3c:	d1f7      	bne.n	800bf2e <_reclaim_reent+0x16>
 800bf3e:	69e3      	ldr	r3, [r4, #28]
 800bf40:	4620      	mov	r0, r4
 800bf42:	68d9      	ldr	r1, [r3, #12]
 800bf44:	f000 f878 	bl	800c038 <_free_r>
 800bf48:	69e3      	ldr	r3, [r4, #28]
 800bf4a:	6819      	ldr	r1, [r3, #0]
 800bf4c:	b111      	cbz	r1, 800bf54 <_reclaim_reent+0x3c>
 800bf4e:	4620      	mov	r0, r4
 800bf50:	f000 f872 	bl	800c038 <_free_r>
 800bf54:	6961      	ldr	r1, [r4, #20]
 800bf56:	b111      	cbz	r1, 800bf5e <_reclaim_reent+0x46>
 800bf58:	4620      	mov	r0, r4
 800bf5a:	f000 f86d 	bl	800c038 <_free_r>
 800bf5e:	69e1      	ldr	r1, [r4, #28]
 800bf60:	b111      	cbz	r1, 800bf68 <_reclaim_reent+0x50>
 800bf62:	4620      	mov	r0, r4
 800bf64:	f000 f868 	bl	800c038 <_free_r>
 800bf68:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bf6a:	b111      	cbz	r1, 800bf72 <_reclaim_reent+0x5a>
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	f000 f863 	bl	800c038 <_free_r>
 800bf72:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf74:	b111      	cbz	r1, 800bf7c <_reclaim_reent+0x64>
 800bf76:	4620      	mov	r0, r4
 800bf78:	f000 f85e 	bl	800c038 <_free_r>
 800bf7c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bf7e:	b111      	cbz	r1, 800bf86 <_reclaim_reent+0x6e>
 800bf80:	4620      	mov	r0, r4
 800bf82:	f000 f859 	bl	800c038 <_free_r>
 800bf86:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bf88:	b111      	cbz	r1, 800bf90 <_reclaim_reent+0x78>
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	f000 f854 	bl	800c038 <_free_r>
 800bf90:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bf92:	b111      	cbz	r1, 800bf9a <_reclaim_reent+0x82>
 800bf94:	4620      	mov	r0, r4
 800bf96:	f000 f84f 	bl	800c038 <_free_r>
 800bf9a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bf9c:	b111      	cbz	r1, 800bfa4 <_reclaim_reent+0x8c>
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f000 f84a 	bl	800c038 <_free_r>
 800bfa4:	6a23      	ldr	r3, [r4, #32]
 800bfa6:	b14b      	cbz	r3, 800bfbc <_reclaim_reent+0xa4>
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bfae:	4718      	bx	r3
 800bfb0:	680e      	ldr	r6, [r1, #0]
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	f000 f840 	bl	800c038 <_free_r>
 800bfb8:	4631      	mov	r1, r6
 800bfba:	e7bb      	b.n	800bf34 <_reclaim_reent+0x1c>
 800bfbc:	bd70      	pop	{r4, r5, r6, pc}
 800bfbe:	bf00      	nop
 800bfc0:	20000024 	.word	0x20000024

0800bfc4 <__errno>:
 800bfc4:	4b01      	ldr	r3, [pc, #4]	@ (800bfcc <__errno+0x8>)
 800bfc6:	6818      	ldr	r0, [r3, #0]
 800bfc8:	4770      	bx	lr
 800bfca:	bf00      	nop
 800bfcc:	20000024 	.word	0x20000024

0800bfd0 <__libc_init_array>:
 800bfd0:	b570      	push	{r4, r5, r6, lr}
 800bfd2:	4d0d      	ldr	r5, [pc, #52]	@ (800c008 <__libc_init_array+0x38>)
 800bfd4:	4c0d      	ldr	r4, [pc, #52]	@ (800c00c <__libc_init_array+0x3c>)
 800bfd6:	1b64      	subs	r4, r4, r5
 800bfd8:	10a4      	asrs	r4, r4, #2
 800bfda:	2600      	movs	r6, #0
 800bfdc:	42a6      	cmp	r6, r4
 800bfde:	d109      	bne.n	800bff4 <__libc_init_array+0x24>
 800bfe0:	4d0b      	ldr	r5, [pc, #44]	@ (800c010 <__libc_init_array+0x40>)
 800bfe2:	4c0c      	ldr	r4, [pc, #48]	@ (800c014 <__libc_init_array+0x44>)
 800bfe4:	f000 fc66 	bl	800c8b4 <_init>
 800bfe8:	1b64      	subs	r4, r4, r5
 800bfea:	10a4      	asrs	r4, r4, #2
 800bfec:	2600      	movs	r6, #0
 800bfee:	42a6      	cmp	r6, r4
 800bff0:	d105      	bne.n	800bffe <__libc_init_array+0x2e>
 800bff2:	bd70      	pop	{r4, r5, r6, pc}
 800bff4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bff8:	4798      	blx	r3
 800bffa:	3601      	adds	r6, #1
 800bffc:	e7ee      	b.n	800bfdc <__libc_init_array+0xc>
 800bffe:	f855 3b04 	ldr.w	r3, [r5], #4
 800c002:	4798      	blx	r3
 800c004:	3601      	adds	r6, #1
 800c006:	e7f2      	b.n	800bfee <__libc_init_array+0x1e>
 800c008:	0800cae0 	.word	0x0800cae0
 800c00c:	0800cae0 	.word	0x0800cae0
 800c010:	0800cae0 	.word	0x0800cae0
 800c014:	0800cae4 	.word	0x0800cae4

0800c018 <__retarget_lock_acquire_recursive>:
 800c018:	4770      	bx	lr

0800c01a <__retarget_lock_release_recursive>:
 800c01a:	4770      	bx	lr

0800c01c <memcpy>:
 800c01c:	440a      	add	r2, r1
 800c01e:	4291      	cmp	r1, r2
 800c020:	f100 33ff 	add.w	r3, r0, #4294967295
 800c024:	d100      	bne.n	800c028 <memcpy+0xc>
 800c026:	4770      	bx	lr
 800c028:	b510      	push	{r4, lr}
 800c02a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c02e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c032:	4291      	cmp	r1, r2
 800c034:	d1f9      	bne.n	800c02a <memcpy+0xe>
 800c036:	bd10      	pop	{r4, pc}

0800c038 <_free_r>:
 800c038:	b538      	push	{r3, r4, r5, lr}
 800c03a:	4605      	mov	r5, r0
 800c03c:	2900      	cmp	r1, #0
 800c03e:	d041      	beq.n	800c0c4 <_free_r+0x8c>
 800c040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c044:	1f0c      	subs	r4, r1, #4
 800c046:	2b00      	cmp	r3, #0
 800c048:	bfb8      	it	lt
 800c04a:	18e4      	addlt	r4, r4, r3
 800c04c:	f000 f8e0 	bl	800c210 <__malloc_lock>
 800c050:	4a1d      	ldr	r2, [pc, #116]	@ (800c0c8 <_free_r+0x90>)
 800c052:	6813      	ldr	r3, [r2, #0]
 800c054:	b933      	cbnz	r3, 800c064 <_free_r+0x2c>
 800c056:	6063      	str	r3, [r4, #4]
 800c058:	6014      	str	r4, [r2, #0]
 800c05a:	4628      	mov	r0, r5
 800c05c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c060:	f000 b8dc 	b.w	800c21c <__malloc_unlock>
 800c064:	42a3      	cmp	r3, r4
 800c066:	d908      	bls.n	800c07a <_free_r+0x42>
 800c068:	6820      	ldr	r0, [r4, #0]
 800c06a:	1821      	adds	r1, r4, r0
 800c06c:	428b      	cmp	r3, r1
 800c06e:	bf01      	itttt	eq
 800c070:	6819      	ldreq	r1, [r3, #0]
 800c072:	685b      	ldreq	r3, [r3, #4]
 800c074:	1809      	addeq	r1, r1, r0
 800c076:	6021      	streq	r1, [r4, #0]
 800c078:	e7ed      	b.n	800c056 <_free_r+0x1e>
 800c07a:	461a      	mov	r2, r3
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	b10b      	cbz	r3, 800c084 <_free_r+0x4c>
 800c080:	42a3      	cmp	r3, r4
 800c082:	d9fa      	bls.n	800c07a <_free_r+0x42>
 800c084:	6811      	ldr	r1, [r2, #0]
 800c086:	1850      	adds	r0, r2, r1
 800c088:	42a0      	cmp	r0, r4
 800c08a:	d10b      	bne.n	800c0a4 <_free_r+0x6c>
 800c08c:	6820      	ldr	r0, [r4, #0]
 800c08e:	4401      	add	r1, r0
 800c090:	1850      	adds	r0, r2, r1
 800c092:	4283      	cmp	r3, r0
 800c094:	6011      	str	r1, [r2, #0]
 800c096:	d1e0      	bne.n	800c05a <_free_r+0x22>
 800c098:	6818      	ldr	r0, [r3, #0]
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	6053      	str	r3, [r2, #4]
 800c09e:	4408      	add	r0, r1
 800c0a0:	6010      	str	r0, [r2, #0]
 800c0a2:	e7da      	b.n	800c05a <_free_r+0x22>
 800c0a4:	d902      	bls.n	800c0ac <_free_r+0x74>
 800c0a6:	230c      	movs	r3, #12
 800c0a8:	602b      	str	r3, [r5, #0]
 800c0aa:	e7d6      	b.n	800c05a <_free_r+0x22>
 800c0ac:	6820      	ldr	r0, [r4, #0]
 800c0ae:	1821      	adds	r1, r4, r0
 800c0b0:	428b      	cmp	r3, r1
 800c0b2:	bf04      	itt	eq
 800c0b4:	6819      	ldreq	r1, [r3, #0]
 800c0b6:	685b      	ldreq	r3, [r3, #4]
 800c0b8:	6063      	str	r3, [r4, #4]
 800c0ba:	bf04      	itt	eq
 800c0bc:	1809      	addeq	r1, r1, r0
 800c0be:	6021      	streq	r1, [r4, #0]
 800c0c0:	6054      	str	r4, [r2, #4]
 800c0c2:	e7ca      	b.n	800c05a <_free_r+0x22>
 800c0c4:	bd38      	pop	{r3, r4, r5, pc}
 800c0c6:	bf00      	nop
 800c0c8:	200020b8 	.word	0x200020b8

0800c0cc <sbrk_aligned>:
 800c0cc:	b570      	push	{r4, r5, r6, lr}
 800c0ce:	4e0f      	ldr	r6, [pc, #60]	@ (800c10c <sbrk_aligned+0x40>)
 800c0d0:	460c      	mov	r4, r1
 800c0d2:	6831      	ldr	r1, [r6, #0]
 800c0d4:	4605      	mov	r5, r0
 800c0d6:	b911      	cbnz	r1, 800c0de <sbrk_aligned+0x12>
 800c0d8:	f000 fba6 	bl	800c828 <_sbrk_r>
 800c0dc:	6030      	str	r0, [r6, #0]
 800c0de:	4621      	mov	r1, r4
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	f000 fba1 	bl	800c828 <_sbrk_r>
 800c0e6:	1c43      	adds	r3, r0, #1
 800c0e8:	d103      	bne.n	800c0f2 <sbrk_aligned+0x26>
 800c0ea:	f04f 34ff 	mov.w	r4, #4294967295
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	bd70      	pop	{r4, r5, r6, pc}
 800c0f2:	1cc4      	adds	r4, r0, #3
 800c0f4:	f024 0403 	bic.w	r4, r4, #3
 800c0f8:	42a0      	cmp	r0, r4
 800c0fa:	d0f8      	beq.n	800c0ee <sbrk_aligned+0x22>
 800c0fc:	1a21      	subs	r1, r4, r0
 800c0fe:	4628      	mov	r0, r5
 800c100:	f000 fb92 	bl	800c828 <_sbrk_r>
 800c104:	3001      	adds	r0, #1
 800c106:	d1f2      	bne.n	800c0ee <sbrk_aligned+0x22>
 800c108:	e7ef      	b.n	800c0ea <sbrk_aligned+0x1e>
 800c10a:	bf00      	nop
 800c10c:	200020b4 	.word	0x200020b4

0800c110 <_malloc_r>:
 800c110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c114:	1ccd      	adds	r5, r1, #3
 800c116:	f025 0503 	bic.w	r5, r5, #3
 800c11a:	3508      	adds	r5, #8
 800c11c:	2d0c      	cmp	r5, #12
 800c11e:	bf38      	it	cc
 800c120:	250c      	movcc	r5, #12
 800c122:	2d00      	cmp	r5, #0
 800c124:	4606      	mov	r6, r0
 800c126:	db01      	blt.n	800c12c <_malloc_r+0x1c>
 800c128:	42a9      	cmp	r1, r5
 800c12a:	d904      	bls.n	800c136 <_malloc_r+0x26>
 800c12c:	230c      	movs	r3, #12
 800c12e:	6033      	str	r3, [r6, #0]
 800c130:	2000      	movs	r0, #0
 800c132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c136:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c20c <_malloc_r+0xfc>
 800c13a:	f000 f869 	bl	800c210 <__malloc_lock>
 800c13e:	f8d8 3000 	ldr.w	r3, [r8]
 800c142:	461c      	mov	r4, r3
 800c144:	bb44      	cbnz	r4, 800c198 <_malloc_r+0x88>
 800c146:	4629      	mov	r1, r5
 800c148:	4630      	mov	r0, r6
 800c14a:	f7ff ffbf 	bl	800c0cc <sbrk_aligned>
 800c14e:	1c43      	adds	r3, r0, #1
 800c150:	4604      	mov	r4, r0
 800c152:	d158      	bne.n	800c206 <_malloc_r+0xf6>
 800c154:	f8d8 4000 	ldr.w	r4, [r8]
 800c158:	4627      	mov	r7, r4
 800c15a:	2f00      	cmp	r7, #0
 800c15c:	d143      	bne.n	800c1e6 <_malloc_r+0xd6>
 800c15e:	2c00      	cmp	r4, #0
 800c160:	d04b      	beq.n	800c1fa <_malloc_r+0xea>
 800c162:	6823      	ldr	r3, [r4, #0]
 800c164:	4639      	mov	r1, r7
 800c166:	4630      	mov	r0, r6
 800c168:	eb04 0903 	add.w	r9, r4, r3
 800c16c:	f000 fb5c 	bl	800c828 <_sbrk_r>
 800c170:	4581      	cmp	r9, r0
 800c172:	d142      	bne.n	800c1fa <_malloc_r+0xea>
 800c174:	6821      	ldr	r1, [r4, #0]
 800c176:	1a6d      	subs	r5, r5, r1
 800c178:	4629      	mov	r1, r5
 800c17a:	4630      	mov	r0, r6
 800c17c:	f7ff ffa6 	bl	800c0cc <sbrk_aligned>
 800c180:	3001      	adds	r0, #1
 800c182:	d03a      	beq.n	800c1fa <_malloc_r+0xea>
 800c184:	6823      	ldr	r3, [r4, #0]
 800c186:	442b      	add	r3, r5
 800c188:	6023      	str	r3, [r4, #0]
 800c18a:	f8d8 3000 	ldr.w	r3, [r8]
 800c18e:	685a      	ldr	r2, [r3, #4]
 800c190:	bb62      	cbnz	r2, 800c1ec <_malloc_r+0xdc>
 800c192:	f8c8 7000 	str.w	r7, [r8]
 800c196:	e00f      	b.n	800c1b8 <_malloc_r+0xa8>
 800c198:	6822      	ldr	r2, [r4, #0]
 800c19a:	1b52      	subs	r2, r2, r5
 800c19c:	d420      	bmi.n	800c1e0 <_malloc_r+0xd0>
 800c19e:	2a0b      	cmp	r2, #11
 800c1a0:	d917      	bls.n	800c1d2 <_malloc_r+0xc2>
 800c1a2:	1961      	adds	r1, r4, r5
 800c1a4:	42a3      	cmp	r3, r4
 800c1a6:	6025      	str	r5, [r4, #0]
 800c1a8:	bf18      	it	ne
 800c1aa:	6059      	strne	r1, [r3, #4]
 800c1ac:	6863      	ldr	r3, [r4, #4]
 800c1ae:	bf08      	it	eq
 800c1b0:	f8c8 1000 	streq.w	r1, [r8]
 800c1b4:	5162      	str	r2, [r4, r5]
 800c1b6:	604b      	str	r3, [r1, #4]
 800c1b8:	4630      	mov	r0, r6
 800c1ba:	f000 f82f 	bl	800c21c <__malloc_unlock>
 800c1be:	f104 000b 	add.w	r0, r4, #11
 800c1c2:	1d23      	adds	r3, r4, #4
 800c1c4:	f020 0007 	bic.w	r0, r0, #7
 800c1c8:	1ac2      	subs	r2, r0, r3
 800c1ca:	bf1c      	itt	ne
 800c1cc:	1a1b      	subne	r3, r3, r0
 800c1ce:	50a3      	strne	r3, [r4, r2]
 800c1d0:	e7af      	b.n	800c132 <_malloc_r+0x22>
 800c1d2:	6862      	ldr	r2, [r4, #4]
 800c1d4:	42a3      	cmp	r3, r4
 800c1d6:	bf0c      	ite	eq
 800c1d8:	f8c8 2000 	streq.w	r2, [r8]
 800c1dc:	605a      	strne	r2, [r3, #4]
 800c1de:	e7eb      	b.n	800c1b8 <_malloc_r+0xa8>
 800c1e0:	4623      	mov	r3, r4
 800c1e2:	6864      	ldr	r4, [r4, #4]
 800c1e4:	e7ae      	b.n	800c144 <_malloc_r+0x34>
 800c1e6:	463c      	mov	r4, r7
 800c1e8:	687f      	ldr	r7, [r7, #4]
 800c1ea:	e7b6      	b.n	800c15a <_malloc_r+0x4a>
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	42a3      	cmp	r3, r4
 800c1f2:	d1fb      	bne.n	800c1ec <_malloc_r+0xdc>
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	6053      	str	r3, [r2, #4]
 800c1f8:	e7de      	b.n	800c1b8 <_malloc_r+0xa8>
 800c1fa:	230c      	movs	r3, #12
 800c1fc:	6033      	str	r3, [r6, #0]
 800c1fe:	4630      	mov	r0, r6
 800c200:	f000 f80c 	bl	800c21c <__malloc_unlock>
 800c204:	e794      	b.n	800c130 <_malloc_r+0x20>
 800c206:	6005      	str	r5, [r0, #0]
 800c208:	e7d6      	b.n	800c1b8 <_malloc_r+0xa8>
 800c20a:	bf00      	nop
 800c20c:	200020b8 	.word	0x200020b8

0800c210 <__malloc_lock>:
 800c210:	4801      	ldr	r0, [pc, #4]	@ (800c218 <__malloc_lock+0x8>)
 800c212:	f7ff bf01 	b.w	800c018 <__retarget_lock_acquire_recursive>
 800c216:	bf00      	nop
 800c218:	200020b0 	.word	0x200020b0

0800c21c <__malloc_unlock>:
 800c21c:	4801      	ldr	r0, [pc, #4]	@ (800c224 <__malloc_unlock+0x8>)
 800c21e:	f7ff befc 	b.w	800c01a <__retarget_lock_release_recursive>
 800c222:	bf00      	nop
 800c224:	200020b0 	.word	0x200020b0

0800c228 <__ssputs_r>:
 800c228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c22c:	688e      	ldr	r6, [r1, #8]
 800c22e:	461f      	mov	r7, r3
 800c230:	42be      	cmp	r6, r7
 800c232:	680b      	ldr	r3, [r1, #0]
 800c234:	4682      	mov	sl, r0
 800c236:	460c      	mov	r4, r1
 800c238:	4690      	mov	r8, r2
 800c23a:	d82d      	bhi.n	800c298 <__ssputs_r+0x70>
 800c23c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c240:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c244:	d026      	beq.n	800c294 <__ssputs_r+0x6c>
 800c246:	6965      	ldr	r5, [r4, #20]
 800c248:	6909      	ldr	r1, [r1, #16]
 800c24a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c24e:	eba3 0901 	sub.w	r9, r3, r1
 800c252:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c256:	1c7b      	adds	r3, r7, #1
 800c258:	444b      	add	r3, r9
 800c25a:	106d      	asrs	r5, r5, #1
 800c25c:	429d      	cmp	r5, r3
 800c25e:	bf38      	it	cc
 800c260:	461d      	movcc	r5, r3
 800c262:	0553      	lsls	r3, r2, #21
 800c264:	d527      	bpl.n	800c2b6 <__ssputs_r+0x8e>
 800c266:	4629      	mov	r1, r5
 800c268:	f7ff ff52 	bl	800c110 <_malloc_r>
 800c26c:	4606      	mov	r6, r0
 800c26e:	b360      	cbz	r0, 800c2ca <__ssputs_r+0xa2>
 800c270:	6921      	ldr	r1, [r4, #16]
 800c272:	464a      	mov	r2, r9
 800c274:	f7ff fed2 	bl	800c01c <memcpy>
 800c278:	89a3      	ldrh	r3, [r4, #12]
 800c27a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c27e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c282:	81a3      	strh	r3, [r4, #12]
 800c284:	6126      	str	r6, [r4, #16]
 800c286:	6165      	str	r5, [r4, #20]
 800c288:	444e      	add	r6, r9
 800c28a:	eba5 0509 	sub.w	r5, r5, r9
 800c28e:	6026      	str	r6, [r4, #0]
 800c290:	60a5      	str	r5, [r4, #8]
 800c292:	463e      	mov	r6, r7
 800c294:	42be      	cmp	r6, r7
 800c296:	d900      	bls.n	800c29a <__ssputs_r+0x72>
 800c298:	463e      	mov	r6, r7
 800c29a:	6820      	ldr	r0, [r4, #0]
 800c29c:	4632      	mov	r2, r6
 800c29e:	4641      	mov	r1, r8
 800c2a0:	f000 faa8 	bl	800c7f4 <memmove>
 800c2a4:	68a3      	ldr	r3, [r4, #8]
 800c2a6:	1b9b      	subs	r3, r3, r6
 800c2a8:	60a3      	str	r3, [r4, #8]
 800c2aa:	6823      	ldr	r3, [r4, #0]
 800c2ac:	4433      	add	r3, r6
 800c2ae:	6023      	str	r3, [r4, #0]
 800c2b0:	2000      	movs	r0, #0
 800c2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2b6:	462a      	mov	r2, r5
 800c2b8:	f000 fac6 	bl	800c848 <_realloc_r>
 800c2bc:	4606      	mov	r6, r0
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	d1e0      	bne.n	800c284 <__ssputs_r+0x5c>
 800c2c2:	6921      	ldr	r1, [r4, #16]
 800c2c4:	4650      	mov	r0, sl
 800c2c6:	f7ff feb7 	bl	800c038 <_free_r>
 800c2ca:	230c      	movs	r3, #12
 800c2cc:	f8ca 3000 	str.w	r3, [sl]
 800c2d0:	89a3      	ldrh	r3, [r4, #12]
 800c2d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2d6:	81a3      	strh	r3, [r4, #12]
 800c2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2dc:	e7e9      	b.n	800c2b2 <__ssputs_r+0x8a>
	...

0800c2e0 <_svfiprintf_r>:
 800c2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2e4:	4698      	mov	r8, r3
 800c2e6:	898b      	ldrh	r3, [r1, #12]
 800c2e8:	061b      	lsls	r3, r3, #24
 800c2ea:	b09d      	sub	sp, #116	@ 0x74
 800c2ec:	4607      	mov	r7, r0
 800c2ee:	460d      	mov	r5, r1
 800c2f0:	4614      	mov	r4, r2
 800c2f2:	d510      	bpl.n	800c316 <_svfiprintf_r+0x36>
 800c2f4:	690b      	ldr	r3, [r1, #16]
 800c2f6:	b973      	cbnz	r3, 800c316 <_svfiprintf_r+0x36>
 800c2f8:	2140      	movs	r1, #64	@ 0x40
 800c2fa:	f7ff ff09 	bl	800c110 <_malloc_r>
 800c2fe:	6028      	str	r0, [r5, #0]
 800c300:	6128      	str	r0, [r5, #16]
 800c302:	b930      	cbnz	r0, 800c312 <_svfiprintf_r+0x32>
 800c304:	230c      	movs	r3, #12
 800c306:	603b      	str	r3, [r7, #0]
 800c308:	f04f 30ff 	mov.w	r0, #4294967295
 800c30c:	b01d      	add	sp, #116	@ 0x74
 800c30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c312:	2340      	movs	r3, #64	@ 0x40
 800c314:	616b      	str	r3, [r5, #20]
 800c316:	2300      	movs	r3, #0
 800c318:	9309      	str	r3, [sp, #36]	@ 0x24
 800c31a:	2320      	movs	r3, #32
 800c31c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c320:	f8cd 800c 	str.w	r8, [sp, #12]
 800c324:	2330      	movs	r3, #48	@ 0x30
 800c326:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c4c4 <_svfiprintf_r+0x1e4>
 800c32a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c32e:	f04f 0901 	mov.w	r9, #1
 800c332:	4623      	mov	r3, r4
 800c334:	469a      	mov	sl, r3
 800c336:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c33a:	b10a      	cbz	r2, 800c340 <_svfiprintf_r+0x60>
 800c33c:	2a25      	cmp	r2, #37	@ 0x25
 800c33e:	d1f9      	bne.n	800c334 <_svfiprintf_r+0x54>
 800c340:	ebba 0b04 	subs.w	fp, sl, r4
 800c344:	d00b      	beq.n	800c35e <_svfiprintf_r+0x7e>
 800c346:	465b      	mov	r3, fp
 800c348:	4622      	mov	r2, r4
 800c34a:	4629      	mov	r1, r5
 800c34c:	4638      	mov	r0, r7
 800c34e:	f7ff ff6b 	bl	800c228 <__ssputs_r>
 800c352:	3001      	adds	r0, #1
 800c354:	f000 80a7 	beq.w	800c4a6 <_svfiprintf_r+0x1c6>
 800c358:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c35a:	445a      	add	r2, fp
 800c35c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c35e:	f89a 3000 	ldrb.w	r3, [sl]
 800c362:	2b00      	cmp	r3, #0
 800c364:	f000 809f 	beq.w	800c4a6 <_svfiprintf_r+0x1c6>
 800c368:	2300      	movs	r3, #0
 800c36a:	f04f 32ff 	mov.w	r2, #4294967295
 800c36e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c372:	f10a 0a01 	add.w	sl, sl, #1
 800c376:	9304      	str	r3, [sp, #16]
 800c378:	9307      	str	r3, [sp, #28]
 800c37a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c37e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c380:	4654      	mov	r4, sl
 800c382:	2205      	movs	r2, #5
 800c384:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c388:	484e      	ldr	r0, [pc, #312]	@ (800c4c4 <_svfiprintf_r+0x1e4>)
 800c38a:	f7f3 ff39 	bl	8000200 <memchr>
 800c38e:	9a04      	ldr	r2, [sp, #16]
 800c390:	b9d8      	cbnz	r0, 800c3ca <_svfiprintf_r+0xea>
 800c392:	06d0      	lsls	r0, r2, #27
 800c394:	bf44      	itt	mi
 800c396:	2320      	movmi	r3, #32
 800c398:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c39c:	0711      	lsls	r1, r2, #28
 800c39e:	bf44      	itt	mi
 800c3a0:	232b      	movmi	r3, #43	@ 0x2b
 800c3a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3a6:	f89a 3000 	ldrb.w	r3, [sl]
 800c3aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3ac:	d015      	beq.n	800c3da <_svfiprintf_r+0xfa>
 800c3ae:	9a07      	ldr	r2, [sp, #28]
 800c3b0:	4654      	mov	r4, sl
 800c3b2:	2000      	movs	r0, #0
 800c3b4:	f04f 0c0a 	mov.w	ip, #10
 800c3b8:	4621      	mov	r1, r4
 800c3ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3be:	3b30      	subs	r3, #48	@ 0x30
 800c3c0:	2b09      	cmp	r3, #9
 800c3c2:	d94b      	bls.n	800c45c <_svfiprintf_r+0x17c>
 800c3c4:	b1b0      	cbz	r0, 800c3f4 <_svfiprintf_r+0x114>
 800c3c6:	9207      	str	r2, [sp, #28]
 800c3c8:	e014      	b.n	800c3f4 <_svfiprintf_r+0x114>
 800c3ca:	eba0 0308 	sub.w	r3, r0, r8
 800c3ce:	fa09 f303 	lsl.w	r3, r9, r3
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	9304      	str	r3, [sp, #16]
 800c3d6:	46a2      	mov	sl, r4
 800c3d8:	e7d2      	b.n	800c380 <_svfiprintf_r+0xa0>
 800c3da:	9b03      	ldr	r3, [sp, #12]
 800c3dc:	1d19      	adds	r1, r3, #4
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	9103      	str	r1, [sp, #12]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	bfbb      	ittet	lt
 800c3e6:	425b      	neglt	r3, r3
 800c3e8:	f042 0202 	orrlt.w	r2, r2, #2
 800c3ec:	9307      	strge	r3, [sp, #28]
 800c3ee:	9307      	strlt	r3, [sp, #28]
 800c3f0:	bfb8      	it	lt
 800c3f2:	9204      	strlt	r2, [sp, #16]
 800c3f4:	7823      	ldrb	r3, [r4, #0]
 800c3f6:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3f8:	d10a      	bne.n	800c410 <_svfiprintf_r+0x130>
 800c3fa:	7863      	ldrb	r3, [r4, #1]
 800c3fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3fe:	d132      	bne.n	800c466 <_svfiprintf_r+0x186>
 800c400:	9b03      	ldr	r3, [sp, #12]
 800c402:	1d1a      	adds	r2, r3, #4
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	9203      	str	r2, [sp, #12]
 800c408:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c40c:	3402      	adds	r4, #2
 800c40e:	9305      	str	r3, [sp, #20]
 800c410:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c4d4 <_svfiprintf_r+0x1f4>
 800c414:	7821      	ldrb	r1, [r4, #0]
 800c416:	2203      	movs	r2, #3
 800c418:	4650      	mov	r0, sl
 800c41a:	f7f3 fef1 	bl	8000200 <memchr>
 800c41e:	b138      	cbz	r0, 800c430 <_svfiprintf_r+0x150>
 800c420:	9b04      	ldr	r3, [sp, #16]
 800c422:	eba0 000a 	sub.w	r0, r0, sl
 800c426:	2240      	movs	r2, #64	@ 0x40
 800c428:	4082      	lsls	r2, r0
 800c42a:	4313      	orrs	r3, r2
 800c42c:	3401      	adds	r4, #1
 800c42e:	9304      	str	r3, [sp, #16]
 800c430:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c434:	4824      	ldr	r0, [pc, #144]	@ (800c4c8 <_svfiprintf_r+0x1e8>)
 800c436:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c43a:	2206      	movs	r2, #6
 800c43c:	f7f3 fee0 	bl	8000200 <memchr>
 800c440:	2800      	cmp	r0, #0
 800c442:	d036      	beq.n	800c4b2 <_svfiprintf_r+0x1d2>
 800c444:	4b21      	ldr	r3, [pc, #132]	@ (800c4cc <_svfiprintf_r+0x1ec>)
 800c446:	bb1b      	cbnz	r3, 800c490 <_svfiprintf_r+0x1b0>
 800c448:	9b03      	ldr	r3, [sp, #12]
 800c44a:	3307      	adds	r3, #7
 800c44c:	f023 0307 	bic.w	r3, r3, #7
 800c450:	3308      	adds	r3, #8
 800c452:	9303      	str	r3, [sp, #12]
 800c454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c456:	4433      	add	r3, r6
 800c458:	9309      	str	r3, [sp, #36]	@ 0x24
 800c45a:	e76a      	b.n	800c332 <_svfiprintf_r+0x52>
 800c45c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c460:	460c      	mov	r4, r1
 800c462:	2001      	movs	r0, #1
 800c464:	e7a8      	b.n	800c3b8 <_svfiprintf_r+0xd8>
 800c466:	2300      	movs	r3, #0
 800c468:	3401      	adds	r4, #1
 800c46a:	9305      	str	r3, [sp, #20]
 800c46c:	4619      	mov	r1, r3
 800c46e:	f04f 0c0a 	mov.w	ip, #10
 800c472:	4620      	mov	r0, r4
 800c474:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c478:	3a30      	subs	r2, #48	@ 0x30
 800c47a:	2a09      	cmp	r2, #9
 800c47c:	d903      	bls.n	800c486 <_svfiprintf_r+0x1a6>
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d0c6      	beq.n	800c410 <_svfiprintf_r+0x130>
 800c482:	9105      	str	r1, [sp, #20]
 800c484:	e7c4      	b.n	800c410 <_svfiprintf_r+0x130>
 800c486:	fb0c 2101 	mla	r1, ip, r1, r2
 800c48a:	4604      	mov	r4, r0
 800c48c:	2301      	movs	r3, #1
 800c48e:	e7f0      	b.n	800c472 <_svfiprintf_r+0x192>
 800c490:	ab03      	add	r3, sp, #12
 800c492:	9300      	str	r3, [sp, #0]
 800c494:	462a      	mov	r2, r5
 800c496:	4b0e      	ldr	r3, [pc, #56]	@ (800c4d0 <_svfiprintf_r+0x1f0>)
 800c498:	a904      	add	r1, sp, #16
 800c49a:	4638      	mov	r0, r7
 800c49c:	f3af 8000 	nop.w
 800c4a0:	1c42      	adds	r2, r0, #1
 800c4a2:	4606      	mov	r6, r0
 800c4a4:	d1d6      	bne.n	800c454 <_svfiprintf_r+0x174>
 800c4a6:	89ab      	ldrh	r3, [r5, #12]
 800c4a8:	065b      	lsls	r3, r3, #25
 800c4aa:	f53f af2d 	bmi.w	800c308 <_svfiprintf_r+0x28>
 800c4ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c4b0:	e72c      	b.n	800c30c <_svfiprintf_r+0x2c>
 800c4b2:	ab03      	add	r3, sp, #12
 800c4b4:	9300      	str	r3, [sp, #0]
 800c4b6:	462a      	mov	r2, r5
 800c4b8:	4b05      	ldr	r3, [pc, #20]	@ (800c4d0 <_svfiprintf_r+0x1f0>)
 800c4ba:	a904      	add	r1, sp, #16
 800c4bc:	4638      	mov	r0, r7
 800c4be:	f000 f879 	bl	800c5b4 <_printf_i>
 800c4c2:	e7ed      	b.n	800c4a0 <_svfiprintf_r+0x1c0>
 800c4c4:	0800caa4 	.word	0x0800caa4
 800c4c8:	0800caae 	.word	0x0800caae
 800c4cc:	00000000 	.word	0x00000000
 800c4d0:	0800c229 	.word	0x0800c229
 800c4d4:	0800caaa 	.word	0x0800caaa

0800c4d8 <_printf_common>:
 800c4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4dc:	4616      	mov	r6, r2
 800c4de:	4698      	mov	r8, r3
 800c4e0:	688a      	ldr	r2, [r1, #8]
 800c4e2:	690b      	ldr	r3, [r1, #16]
 800c4e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	bfb8      	it	lt
 800c4ec:	4613      	movlt	r3, r2
 800c4ee:	6033      	str	r3, [r6, #0]
 800c4f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c4f4:	4607      	mov	r7, r0
 800c4f6:	460c      	mov	r4, r1
 800c4f8:	b10a      	cbz	r2, 800c4fe <_printf_common+0x26>
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	6033      	str	r3, [r6, #0]
 800c4fe:	6823      	ldr	r3, [r4, #0]
 800c500:	0699      	lsls	r1, r3, #26
 800c502:	bf42      	ittt	mi
 800c504:	6833      	ldrmi	r3, [r6, #0]
 800c506:	3302      	addmi	r3, #2
 800c508:	6033      	strmi	r3, [r6, #0]
 800c50a:	6825      	ldr	r5, [r4, #0]
 800c50c:	f015 0506 	ands.w	r5, r5, #6
 800c510:	d106      	bne.n	800c520 <_printf_common+0x48>
 800c512:	f104 0a19 	add.w	sl, r4, #25
 800c516:	68e3      	ldr	r3, [r4, #12]
 800c518:	6832      	ldr	r2, [r6, #0]
 800c51a:	1a9b      	subs	r3, r3, r2
 800c51c:	42ab      	cmp	r3, r5
 800c51e:	dc26      	bgt.n	800c56e <_printf_common+0x96>
 800c520:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c524:	6822      	ldr	r2, [r4, #0]
 800c526:	3b00      	subs	r3, #0
 800c528:	bf18      	it	ne
 800c52a:	2301      	movne	r3, #1
 800c52c:	0692      	lsls	r2, r2, #26
 800c52e:	d42b      	bmi.n	800c588 <_printf_common+0xb0>
 800c530:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c534:	4641      	mov	r1, r8
 800c536:	4638      	mov	r0, r7
 800c538:	47c8      	blx	r9
 800c53a:	3001      	adds	r0, #1
 800c53c:	d01e      	beq.n	800c57c <_printf_common+0xa4>
 800c53e:	6823      	ldr	r3, [r4, #0]
 800c540:	6922      	ldr	r2, [r4, #16]
 800c542:	f003 0306 	and.w	r3, r3, #6
 800c546:	2b04      	cmp	r3, #4
 800c548:	bf02      	ittt	eq
 800c54a:	68e5      	ldreq	r5, [r4, #12]
 800c54c:	6833      	ldreq	r3, [r6, #0]
 800c54e:	1aed      	subeq	r5, r5, r3
 800c550:	68a3      	ldr	r3, [r4, #8]
 800c552:	bf0c      	ite	eq
 800c554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c558:	2500      	movne	r5, #0
 800c55a:	4293      	cmp	r3, r2
 800c55c:	bfc4      	itt	gt
 800c55e:	1a9b      	subgt	r3, r3, r2
 800c560:	18ed      	addgt	r5, r5, r3
 800c562:	2600      	movs	r6, #0
 800c564:	341a      	adds	r4, #26
 800c566:	42b5      	cmp	r5, r6
 800c568:	d11a      	bne.n	800c5a0 <_printf_common+0xc8>
 800c56a:	2000      	movs	r0, #0
 800c56c:	e008      	b.n	800c580 <_printf_common+0xa8>
 800c56e:	2301      	movs	r3, #1
 800c570:	4652      	mov	r2, sl
 800c572:	4641      	mov	r1, r8
 800c574:	4638      	mov	r0, r7
 800c576:	47c8      	blx	r9
 800c578:	3001      	adds	r0, #1
 800c57a:	d103      	bne.n	800c584 <_printf_common+0xac>
 800c57c:	f04f 30ff 	mov.w	r0, #4294967295
 800c580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c584:	3501      	adds	r5, #1
 800c586:	e7c6      	b.n	800c516 <_printf_common+0x3e>
 800c588:	18e1      	adds	r1, r4, r3
 800c58a:	1c5a      	adds	r2, r3, #1
 800c58c:	2030      	movs	r0, #48	@ 0x30
 800c58e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c592:	4422      	add	r2, r4
 800c594:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c598:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c59c:	3302      	adds	r3, #2
 800c59e:	e7c7      	b.n	800c530 <_printf_common+0x58>
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	4622      	mov	r2, r4
 800c5a4:	4641      	mov	r1, r8
 800c5a6:	4638      	mov	r0, r7
 800c5a8:	47c8      	blx	r9
 800c5aa:	3001      	adds	r0, #1
 800c5ac:	d0e6      	beq.n	800c57c <_printf_common+0xa4>
 800c5ae:	3601      	adds	r6, #1
 800c5b0:	e7d9      	b.n	800c566 <_printf_common+0x8e>
	...

0800c5b4 <_printf_i>:
 800c5b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5b8:	7e0f      	ldrb	r7, [r1, #24]
 800c5ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c5bc:	2f78      	cmp	r7, #120	@ 0x78
 800c5be:	4691      	mov	r9, r2
 800c5c0:	4680      	mov	r8, r0
 800c5c2:	460c      	mov	r4, r1
 800c5c4:	469a      	mov	sl, r3
 800c5c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c5ca:	d807      	bhi.n	800c5dc <_printf_i+0x28>
 800c5cc:	2f62      	cmp	r7, #98	@ 0x62
 800c5ce:	d80a      	bhi.n	800c5e6 <_printf_i+0x32>
 800c5d0:	2f00      	cmp	r7, #0
 800c5d2:	f000 80d2 	beq.w	800c77a <_printf_i+0x1c6>
 800c5d6:	2f58      	cmp	r7, #88	@ 0x58
 800c5d8:	f000 80b9 	beq.w	800c74e <_printf_i+0x19a>
 800c5dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c5e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c5e4:	e03a      	b.n	800c65c <_printf_i+0xa8>
 800c5e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c5ea:	2b15      	cmp	r3, #21
 800c5ec:	d8f6      	bhi.n	800c5dc <_printf_i+0x28>
 800c5ee:	a101      	add	r1, pc, #4	@ (adr r1, 800c5f4 <_printf_i+0x40>)
 800c5f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5f4:	0800c64d 	.word	0x0800c64d
 800c5f8:	0800c661 	.word	0x0800c661
 800c5fc:	0800c5dd 	.word	0x0800c5dd
 800c600:	0800c5dd 	.word	0x0800c5dd
 800c604:	0800c5dd 	.word	0x0800c5dd
 800c608:	0800c5dd 	.word	0x0800c5dd
 800c60c:	0800c661 	.word	0x0800c661
 800c610:	0800c5dd 	.word	0x0800c5dd
 800c614:	0800c5dd 	.word	0x0800c5dd
 800c618:	0800c5dd 	.word	0x0800c5dd
 800c61c:	0800c5dd 	.word	0x0800c5dd
 800c620:	0800c761 	.word	0x0800c761
 800c624:	0800c68b 	.word	0x0800c68b
 800c628:	0800c71b 	.word	0x0800c71b
 800c62c:	0800c5dd 	.word	0x0800c5dd
 800c630:	0800c5dd 	.word	0x0800c5dd
 800c634:	0800c783 	.word	0x0800c783
 800c638:	0800c5dd 	.word	0x0800c5dd
 800c63c:	0800c68b 	.word	0x0800c68b
 800c640:	0800c5dd 	.word	0x0800c5dd
 800c644:	0800c5dd 	.word	0x0800c5dd
 800c648:	0800c723 	.word	0x0800c723
 800c64c:	6833      	ldr	r3, [r6, #0]
 800c64e:	1d1a      	adds	r2, r3, #4
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	6032      	str	r2, [r6, #0]
 800c654:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c658:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c65c:	2301      	movs	r3, #1
 800c65e:	e09d      	b.n	800c79c <_printf_i+0x1e8>
 800c660:	6833      	ldr	r3, [r6, #0]
 800c662:	6820      	ldr	r0, [r4, #0]
 800c664:	1d19      	adds	r1, r3, #4
 800c666:	6031      	str	r1, [r6, #0]
 800c668:	0606      	lsls	r6, r0, #24
 800c66a:	d501      	bpl.n	800c670 <_printf_i+0xbc>
 800c66c:	681d      	ldr	r5, [r3, #0]
 800c66e:	e003      	b.n	800c678 <_printf_i+0xc4>
 800c670:	0645      	lsls	r5, r0, #25
 800c672:	d5fb      	bpl.n	800c66c <_printf_i+0xb8>
 800c674:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c678:	2d00      	cmp	r5, #0
 800c67a:	da03      	bge.n	800c684 <_printf_i+0xd0>
 800c67c:	232d      	movs	r3, #45	@ 0x2d
 800c67e:	426d      	negs	r5, r5
 800c680:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c684:	4859      	ldr	r0, [pc, #356]	@ (800c7ec <_printf_i+0x238>)
 800c686:	230a      	movs	r3, #10
 800c688:	e011      	b.n	800c6ae <_printf_i+0xfa>
 800c68a:	6821      	ldr	r1, [r4, #0]
 800c68c:	6833      	ldr	r3, [r6, #0]
 800c68e:	0608      	lsls	r0, r1, #24
 800c690:	f853 5b04 	ldr.w	r5, [r3], #4
 800c694:	d402      	bmi.n	800c69c <_printf_i+0xe8>
 800c696:	0649      	lsls	r1, r1, #25
 800c698:	bf48      	it	mi
 800c69a:	b2ad      	uxthmi	r5, r5
 800c69c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c69e:	4853      	ldr	r0, [pc, #332]	@ (800c7ec <_printf_i+0x238>)
 800c6a0:	6033      	str	r3, [r6, #0]
 800c6a2:	bf14      	ite	ne
 800c6a4:	230a      	movne	r3, #10
 800c6a6:	2308      	moveq	r3, #8
 800c6a8:	2100      	movs	r1, #0
 800c6aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c6ae:	6866      	ldr	r6, [r4, #4]
 800c6b0:	60a6      	str	r6, [r4, #8]
 800c6b2:	2e00      	cmp	r6, #0
 800c6b4:	bfa2      	ittt	ge
 800c6b6:	6821      	ldrge	r1, [r4, #0]
 800c6b8:	f021 0104 	bicge.w	r1, r1, #4
 800c6bc:	6021      	strge	r1, [r4, #0]
 800c6be:	b90d      	cbnz	r5, 800c6c4 <_printf_i+0x110>
 800c6c0:	2e00      	cmp	r6, #0
 800c6c2:	d04b      	beq.n	800c75c <_printf_i+0x1a8>
 800c6c4:	4616      	mov	r6, r2
 800c6c6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c6ca:	fb03 5711 	mls	r7, r3, r1, r5
 800c6ce:	5dc7      	ldrb	r7, [r0, r7]
 800c6d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c6d4:	462f      	mov	r7, r5
 800c6d6:	42bb      	cmp	r3, r7
 800c6d8:	460d      	mov	r5, r1
 800c6da:	d9f4      	bls.n	800c6c6 <_printf_i+0x112>
 800c6dc:	2b08      	cmp	r3, #8
 800c6de:	d10b      	bne.n	800c6f8 <_printf_i+0x144>
 800c6e0:	6823      	ldr	r3, [r4, #0]
 800c6e2:	07df      	lsls	r7, r3, #31
 800c6e4:	d508      	bpl.n	800c6f8 <_printf_i+0x144>
 800c6e6:	6923      	ldr	r3, [r4, #16]
 800c6e8:	6861      	ldr	r1, [r4, #4]
 800c6ea:	4299      	cmp	r1, r3
 800c6ec:	bfde      	ittt	le
 800c6ee:	2330      	movle	r3, #48	@ 0x30
 800c6f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c6f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c6f8:	1b92      	subs	r2, r2, r6
 800c6fa:	6122      	str	r2, [r4, #16]
 800c6fc:	f8cd a000 	str.w	sl, [sp]
 800c700:	464b      	mov	r3, r9
 800c702:	aa03      	add	r2, sp, #12
 800c704:	4621      	mov	r1, r4
 800c706:	4640      	mov	r0, r8
 800c708:	f7ff fee6 	bl	800c4d8 <_printf_common>
 800c70c:	3001      	adds	r0, #1
 800c70e:	d14a      	bne.n	800c7a6 <_printf_i+0x1f2>
 800c710:	f04f 30ff 	mov.w	r0, #4294967295
 800c714:	b004      	add	sp, #16
 800c716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c71a:	6823      	ldr	r3, [r4, #0]
 800c71c:	f043 0320 	orr.w	r3, r3, #32
 800c720:	6023      	str	r3, [r4, #0]
 800c722:	4833      	ldr	r0, [pc, #204]	@ (800c7f0 <_printf_i+0x23c>)
 800c724:	2778      	movs	r7, #120	@ 0x78
 800c726:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c72a:	6823      	ldr	r3, [r4, #0]
 800c72c:	6831      	ldr	r1, [r6, #0]
 800c72e:	061f      	lsls	r7, r3, #24
 800c730:	f851 5b04 	ldr.w	r5, [r1], #4
 800c734:	d402      	bmi.n	800c73c <_printf_i+0x188>
 800c736:	065f      	lsls	r7, r3, #25
 800c738:	bf48      	it	mi
 800c73a:	b2ad      	uxthmi	r5, r5
 800c73c:	6031      	str	r1, [r6, #0]
 800c73e:	07d9      	lsls	r1, r3, #31
 800c740:	bf44      	itt	mi
 800c742:	f043 0320 	orrmi.w	r3, r3, #32
 800c746:	6023      	strmi	r3, [r4, #0]
 800c748:	b11d      	cbz	r5, 800c752 <_printf_i+0x19e>
 800c74a:	2310      	movs	r3, #16
 800c74c:	e7ac      	b.n	800c6a8 <_printf_i+0xf4>
 800c74e:	4827      	ldr	r0, [pc, #156]	@ (800c7ec <_printf_i+0x238>)
 800c750:	e7e9      	b.n	800c726 <_printf_i+0x172>
 800c752:	6823      	ldr	r3, [r4, #0]
 800c754:	f023 0320 	bic.w	r3, r3, #32
 800c758:	6023      	str	r3, [r4, #0]
 800c75a:	e7f6      	b.n	800c74a <_printf_i+0x196>
 800c75c:	4616      	mov	r6, r2
 800c75e:	e7bd      	b.n	800c6dc <_printf_i+0x128>
 800c760:	6833      	ldr	r3, [r6, #0]
 800c762:	6825      	ldr	r5, [r4, #0]
 800c764:	6961      	ldr	r1, [r4, #20]
 800c766:	1d18      	adds	r0, r3, #4
 800c768:	6030      	str	r0, [r6, #0]
 800c76a:	062e      	lsls	r6, r5, #24
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	d501      	bpl.n	800c774 <_printf_i+0x1c0>
 800c770:	6019      	str	r1, [r3, #0]
 800c772:	e002      	b.n	800c77a <_printf_i+0x1c6>
 800c774:	0668      	lsls	r0, r5, #25
 800c776:	d5fb      	bpl.n	800c770 <_printf_i+0x1bc>
 800c778:	8019      	strh	r1, [r3, #0]
 800c77a:	2300      	movs	r3, #0
 800c77c:	6123      	str	r3, [r4, #16]
 800c77e:	4616      	mov	r6, r2
 800c780:	e7bc      	b.n	800c6fc <_printf_i+0x148>
 800c782:	6833      	ldr	r3, [r6, #0]
 800c784:	1d1a      	adds	r2, r3, #4
 800c786:	6032      	str	r2, [r6, #0]
 800c788:	681e      	ldr	r6, [r3, #0]
 800c78a:	6862      	ldr	r2, [r4, #4]
 800c78c:	2100      	movs	r1, #0
 800c78e:	4630      	mov	r0, r6
 800c790:	f7f3 fd36 	bl	8000200 <memchr>
 800c794:	b108      	cbz	r0, 800c79a <_printf_i+0x1e6>
 800c796:	1b80      	subs	r0, r0, r6
 800c798:	6060      	str	r0, [r4, #4]
 800c79a:	6863      	ldr	r3, [r4, #4]
 800c79c:	6123      	str	r3, [r4, #16]
 800c79e:	2300      	movs	r3, #0
 800c7a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7a4:	e7aa      	b.n	800c6fc <_printf_i+0x148>
 800c7a6:	6923      	ldr	r3, [r4, #16]
 800c7a8:	4632      	mov	r2, r6
 800c7aa:	4649      	mov	r1, r9
 800c7ac:	4640      	mov	r0, r8
 800c7ae:	47d0      	blx	sl
 800c7b0:	3001      	adds	r0, #1
 800c7b2:	d0ad      	beq.n	800c710 <_printf_i+0x15c>
 800c7b4:	6823      	ldr	r3, [r4, #0]
 800c7b6:	079b      	lsls	r3, r3, #30
 800c7b8:	d413      	bmi.n	800c7e2 <_printf_i+0x22e>
 800c7ba:	68e0      	ldr	r0, [r4, #12]
 800c7bc:	9b03      	ldr	r3, [sp, #12]
 800c7be:	4298      	cmp	r0, r3
 800c7c0:	bfb8      	it	lt
 800c7c2:	4618      	movlt	r0, r3
 800c7c4:	e7a6      	b.n	800c714 <_printf_i+0x160>
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	4632      	mov	r2, r6
 800c7ca:	4649      	mov	r1, r9
 800c7cc:	4640      	mov	r0, r8
 800c7ce:	47d0      	blx	sl
 800c7d0:	3001      	adds	r0, #1
 800c7d2:	d09d      	beq.n	800c710 <_printf_i+0x15c>
 800c7d4:	3501      	adds	r5, #1
 800c7d6:	68e3      	ldr	r3, [r4, #12]
 800c7d8:	9903      	ldr	r1, [sp, #12]
 800c7da:	1a5b      	subs	r3, r3, r1
 800c7dc:	42ab      	cmp	r3, r5
 800c7de:	dcf2      	bgt.n	800c7c6 <_printf_i+0x212>
 800c7e0:	e7eb      	b.n	800c7ba <_printf_i+0x206>
 800c7e2:	2500      	movs	r5, #0
 800c7e4:	f104 0619 	add.w	r6, r4, #25
 800c7e8:	e7f5      	b.n	800c7d6 <_printf_i+0x222>
 800c7ea:	bf00      	nop
 800c7ec:	0800cab5 	.word	0x0800cab5
 800c7f0:	0800cac6 	.word	0x0800cac6

0800c7f4 <memmove>:
 800c7f4:	4288      	cmp	r0, r1
 800c7f6:	b510      	push	{r4, lr}
 800c7f8:	eb01 0402 	add.w	r4, r1, r2
 800c7fc:	d902      	bls.n	800c804 <memmove+0x10>
 800c7fe:	4284      	cmp	r4, r0
 800c800:	4623      	mov	r3, r4
 800c802:	d807      	bhi.n	800c814 <memmove+0x20>
 800c804:	1e43      	subs	r3, r0, #1
 800c806:	42a1      	cmp	r1, r4
 800c808:	d008      	beq.n	800c81c <memmove+0x28>
 800c80a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c80e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c812:	e7f8      	b.n	800c806 <memmove+0x12>
 800c814:	4402      	add	r2, r0
 800c816:	4601      	mov	r1, r0
 800c818:	428a      	cmp	r2, r1
 800c81a:	d100      	bne.n	800c81e <memmove+0x2a>
 800c81c:	bd10      	pop	{r4, pc}
 800c81e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c822:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c826:	e7f7      	b.n	800c818 <memmove+0x24>

0800c828 <_sbrk_r>:
 800c828:	b538      	push	{r3, r4, r5, lr}
 800c82a:	4d06      	ldr	r5, [pc, #24]	@ (800c844 <_sbrk_r+0x1c>)
 800c82c:	2300      	movs	r3, #0
 800c82e:	4604      	mov	r4, r0
 800c830:	4608      	mov	r0, r1
 800c832:	602b      	str	r3, [r5, #0]
 800c834:	f7f5 f9b4 	bl	8001ba0 <_sbrk>
 800c838:	1c43      	adds	r3, r0, #1
 800c83a:	d102      	bne.n	800c842 <_sbrk_r+0x1a>
 800c83c:	682b      	ldr	r3, [r5, #0]
 800c83e:	b103      	cbz	r3, 800c842 <_sbrk_r+0x1a>
 800c840:	6023      	str	r3, [r4, #0]
 800c842:	bd38      	pop	{r3, r4, r5, pc}
 800c844:	200020ac 	.word	0x200020ac

0800c848 <_realloc_r>:
 800c848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c84c:	4680      	mov	r8, r0
 800c84e:	4615      	mov	r5, r2
 800c850:	460c      	mov	r4, r1
 800c852:	b921      	cbnz	r1, 800c85e <_realloc_r+0x16>
 800c854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c858:	4611      	mov	r1, r2
 800c85a:	f7ff bc59 	b.w	800c110 <_malloc_r>
 800c85e:	b92a      	cbnz	r2, 800c86c <_realloc_r+0x24>
 800c860:	f7ff fbea 	bl	800c038 <_free_r>
 800c864:	2400      	movs	r4, #0
 800c866:	4620      	mov	r0, r4
 800c868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c86c:	f000 f81a 	bl	800c8a4 <_malloc_usable_size_r>
 800c870:	4285      	cmp	r5, r0
 800c872:	4606      	mov	r6, r0
 800c874:	d802      	bhi.n	800c87c <_realloc_r+0x34>
 800c876:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c87a:	d8f4      	bhi.n	800c866 <_realloc_r+0x1e>
 800c87c:	4629      	mov	r1, r5
 800c87e:	4640      	mov	r0, r8
 800c880:	f7ff fc46 	bl	800c110 <_malloc_r>
 800c884:	4607      	mov	r7, r0
 800c886:	2800      	cmp	r0, #0
 800c888:	d0ec      	beq.n	800c864 <_realloc_r+0x1c>
 800c88a:	42b5      	cmp	r5, r6
 800c88c:	462a      	mov	r2, r5
 800c88e:	4621      	mov	r1, r4
 800c890:	bf28      	it	cs
 800c892:	4632      	movcs	r2, r6
 800c894:	f7ff fbc2 	bl	800c01c <memcpy>
 800c898:	4621      	mov	r1, r4
 800c89a:	4640      	mov	r0, r8
 800c89c:	f7ff fbcc 	bl	800c038 <_free_r>
 800c8a0:	463c      	mov	r4, r7
 800c8a2:	e7e0      	b.n	800c866 <_realloc_r+0x1e>

0800c8a4 <_malloc_usable_size_r>:
 800c8a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8a8:	1f18      	subs	r0, r3, #4
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	bfbc      	itt	lt
 800c8ae:	580b      	ldrlt	r3, [r1, r0]
 800c8b0:	18c0      	addlt	r0, r0, r3
 800c8b2:	4770      	bx	lr

0800c8b4 <_init>:
 800c8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8b6:	bf00      	nop
 800c8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ba:	bc08      	pop	{r3}
 800c8bc:	469e      	mov	lr, r3
 800c8be:	4770      	bx	lr

0800c8c0 <_fini>:
 800c8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8c2:	bf00      	nop
 800c8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8c6:	bc08      	pop	{r3}
 800c8c8:	469e      	mov	lr, r3
 800c8ca:	4770      	bx	lr
