
DEMO_FREERTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5ac  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  0800b76c  0800b76c  0000c76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b940  0800b940  0000d064  2**0
                  CONTENTS
  4 .ARM          00000008  0800b940  0800b940  0000c940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b948  0800b948  0000d064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b948  0800b948  0000c948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b94c  0800b94c  0000c94c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800b950  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fe8  20000064  0800b9b4  0000d064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000204c  0800b9b4  0000e04c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a6c9  00000000  00000000  0000d094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ad5  00000000  00000000  0003775d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002388  00000000  00000000  0003c238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001bcb  00000000  00000000  0003e5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000056ac  00000000  00000000  0004018b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000291f7  00000000  00000000  00045837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001321cb  00000000  00000000  0006ea2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a0bf9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ea4  00000000  00000000  001a0c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  001aaae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000064 	.word	0x20000064
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b754 	.word	0x0800b754

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000068 	.word	0x20000068
 80001fc:	0800b754 	.word	0x0800b754

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f001 fafd 	bl	8001b92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f87a 	bl	8000690 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800059c:	f000 f8da 	bl	8000754 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 fbf2 	bl	8000d88 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005a4:	f000 f906 	bl	80007b4 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80005a8:	f000 f968 	bl	800087c <MX_DFSDM1_Init>
  MX_I2C1_Init();
 80005ac:	f000 f99e 	bl	80008ec <MX_I2C1_Init>
  MX_I2C2_Init();
 80005b0:	f000 f9dc 	bl	800096c <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80005b4:	f000 fa1a 	bl	80009ec <MX_OCTOSPI1_Init>
  MX_SPI3_Init();
 80005b8:	f000 fa6e 	bl	8000a98 <MX_SPI3_Init>
  MX_UART4_Init();
 80005bc:	f000 faaa 	bl	8000b14 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80005c0:	f000 faf4 	bl	8000bac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005c4:	f000 fb3e 	bl	8000c44 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005c8:	f000 fb8a 	bl	8000ce0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80005cc:	f000 fbd4 	bl	8000d78 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005d0:	f006 fdf8 	bl	80071c4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 0, &myBinarySem01_attributes);
 80005d4:	4a1e      	ldr	r2, [pc, #120]	@ (8000650 <main+0xc0>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	2001      	movs	r0, #1
 80005da:	f006 ff2c 	bl	8007436 <osSemaphoreNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a1c      	ldr	r2, [pc, #112]	@ (8000654 <main+0xc4>)
 80005e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	osSemaphoreRelease(myBinarySem01Handle);
 80005e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000654 <main+0xc4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f006 ffff 	bl	80075ec <osSemaphoreRelease>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myDataQueue */
  myDataQueueHandle = osMessageQueueNew (2, sizeof(uint16_t), &myDataQueue_attributes);
 80005ee:	4a1a      	ldr	r2, [pc, #104]	@ (8000658 <main+0xc8>)
 80005f0:	2102      	movs	r1, #2
 80005f2:	2002      	movs	r0, #2
 80005f4:	f007 f83e 	bl	8007674 <osMessageQueueNew>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a18      	ldr	r2, [pc, #96]	@ (800065c <main+0xcc>)
 80005fc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  myLedTaskHandle = osThreadNew(LED_flash_task_run, NULL, &myLedTask_attributes);
 80005fe:	4a18      	ldr	r2, [pc, #96]	@ (8000660 <main+0xd0>)
 8000600:	2100      	movs	r1, #0
 8000602:	4818      	ldr	r0, [pc, #96]	@ (8000664 <main+0xd4>)
 8000604:	f006 fe28 	bl	8007258 <osThreadNew>
 8000608:	4603      	mov	r3, r0
 800060a:	4a17      	ldr	r2, [pc, #92]	@ (8000668 <main+0xd8>)
 800060c:	6013      	str	r3, [r2, #0]

  myUART_RX_TaskHandle = osThreadNew(UART_RX_task_run, NULL, &myUART_RX_TaskHandle_attributes);
 800060e:	4a17      	ldr	r2, [pc, #92]	@ (800066c <main+0xdc>)
 8000610:	2100      	movs	r1, #0
 8000612:	4817      	ldr	r0, [pc, #92]	@ (8000670 <main+0xe0>)
 8000614:	f006 fe20 	bl	8007258 <osThreadNew>
 8000618:	4603      	mov	r3, r0
 800061a:	4a16      	ldr	r2, [pc, #88]	@ (8000674 <main+0xe4>)
 800061c:	6013      	str	r3, [r2, #0]

  myUartSendTaskHandle = osThreadNew(UART_send_task_run, NULL, &myUartSendTask_attributes);
 800061e:	4a16      	ldr	r2, [pc, #88]	@ (8000678 <main+0xe8>)
 8000620:	2100      	movs	r1, #0
 8000622:	4816      	ldr	r0, [pc, #88]	@ (800067c <main+0xec>)
 8000624:	f006 fe18 	bl	8007258 <osThreadNew>
 8000628:	4603      	mov	r3, r0
 800062a:	4a15      	ldr	r2, [pc, #84]	@ (8000680 <main+0xf0>)
 800062c:	6013      	str	r3, [r2, #0]

  myADC_Cmd_TaskHandle = osThreadNew(ADC_CMD_task_run, NULL, &myADC_Cmd__TaskHandle_attributes);
 800062e:	4a15      	ldr	r2, [pc, #84]	@ (8000684 <main+0xf4>)
 8000630:	2100      	movs	r1, #0
 8000632:	4815      	ldr	r0, [pc, #84]	@ (8000688 <main+0xf8>)
 8000634:	f006 fe10 	bl	8007258 <osThreadNew>
 8000638:	4603      	mov	r3, r0
 800063a:	4a14      	ldr	r2, [pc, #80]	@ (800068c <main+0xfc>)
 800063c:	6013      	str	r3, [r2, #0]
  osThreadSuspend(myADC_Cmd_TaskHandle);
 800063e:	4b13      	ldr	r3, [pc, #76]	@ (800068c <main+0xfc>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4618      	mov	r0, r3
 8000644:	f006 fe9a 	bl	800737c <osThreadSuspend>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000648:	f006 fde0 	bl	800720c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <main+0xbc>
 8000650:	0800b88c 	.word	0x0800b88c
 8000654:	200004e0 	.word	0x200004e0
 8000658:	0800b874 	.word	0x0800b874
 800065c:	200004dc 	.word	0x200004dc
 8000660:	0800b7e4 	.word	0x0800b7e4
 8000664:	08001031 	.word	0x08001031
 8000668:	200004cc 	.word	0x200004cc
 800066c:	0800b82c 	.word	0x0800b82c
 8000670:	08001151 	.word	0x08001151
 8000674:	200004d4 	.word	0x200004d4
 8000678:	0800b808 	.word	0x0800b808
 800067c:	080010e9 	.word	0x080010e9
 8000680:	200004d0 	.word	0x200004d0
 8000684:	0800b850 	.word	0x0800b850
 8000688:	080011ed 	.word	0x080011ed
 800068c:	200004d8 	.word	0x200004d8

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b096      	sub	sp, #88	@ 0x58
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	2244      	movs	r2, #68	@ 0x44
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f00a fb82 	bl	800ada8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	463b      	mov	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80006b2:	2000      	movs	r0, #0
 80006b4:	f003 fd56 	bl	8004164 <HAL_PWREx_ControlVoltageScaling>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80006be:	f000 fddd 	bl	800127c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006c2:	f003 fd1f 	bl	8004104 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006c6:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <SystemClock_Config+0xc0>)
 80006c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80006cc:	4a20      	ldr	r2, [pc, #128]	@ (8000750 <SystemClock_Config+0xc0>)
 80006ce:	f023 0318 	bic.w	r3, r3, #24
 80006d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006d6:	2314      	movs	r3, #20
 80006d8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006da:	2301      	movs	r3, #1
 80006dc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006de:	2301      	movs	r3, #1
 80006e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006e6:	2360      	movs	r3, #96	@ 0x60
 80006e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006ee:	2301      	movs	r3, #1
 80006f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80006f6:	233c      	movs	r3, #60	@ 0x3c
 80006f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000702:	2302      	movs	r3, #2
 8000704:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4618      	mov	r0, r3
 800070c:	f003 fdce 	bl	80042ac <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000716:	f000 fdb1 	bl	800127c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2303      	movs	r3, #3
 8000720:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800072e:	463b      	mov	r3, r7
 8000730:	2105      	movs	r1, #5
 8000732:	4618      	mov	r0, r3
 8000734:	f004 f9d4 	bl	8004ae0 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800073e:	f000 fd9d 	bl	800127c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000742:	f004 ffed 	bl	8005720 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000746:	bf00      	nop
 8000748:	3758      	adds	r7, #88	@ 0x58
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000

08000754 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b0a6      	sub	sp, #152	@ 0x98
 8000758:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2294      	movs	r2, #148	@ 0x94
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f00a fb21 	bl	800ada8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8000766:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800076a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800076c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000770:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000774:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000778:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800077a:	2301      	movs	r3, #1
 800077c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800077e:	2301      	movs	r3, #1
 8000780:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000782:	2318      	movs	r3, #24
 8000784:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000786:	2302      	movs	r3, #2
 8000788:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800078e:	2302      	movs	r3, #2
 8000790:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000792:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 8000796:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	4618      	mov	r0, r3
 800079c:	f004 fc90 	bl	80050c0 <HAL_RCCEx_PeriphCLKConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80007a6:	f000 fd69 	bl	800127c <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3798      	adds	r7, #152	@ 0x98
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	463b      	mov	r3, r7
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
 80007c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ca:	4b29      	ldr	r3, [pc, #164]	@ (8000870 <MX_ADC1_Init+0xbc>)
 80007cc:	4a29      	ldr	r2, [pc, #164]	@ (8000874 <MX_ADC1_Init+0xc0>)
 80007ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007d0:	4b27      	ldr	r3, [pc, #156]	@ (8000870 <MX_ADC1_Init+0xbc>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d6:	4b26      	ldr	r3, [pc, #152]	@ (8000870 <MX_ADC1_Init+0xbc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007dc:	4b24      	ldr	r3, [pc, #144]	@ (8000870 <MX_ADC1_Init+0xbc>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e2:	4b23      	ldr	r3, [pc, #140]	@ (8000870 <MX_ADC1_Init+0xbc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e8:	4b21      	ldr	r3, [pc, #132]	@ (8000870 <MX_ADC1_Init+0xbc>)
 80007ea:	2204      	movs	r2, #4
 80007ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ee:	4b20      	ldr	r3, [pc, #128]	@ (8000870 <MX_ADC1_Init+0xbc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000870 <MX_ADC1_Init+0xbc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000870 <MX_ADC1_Init+0xbc>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000800:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <MX_ADC1_Init+0xbc>)
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000808:	4b19      	ldr	r3, [pc, #100]	@ (8000870 <MX_ADC1_Init+0xbc>)
 800080a:	2200      	movs	r2, #0
 800080c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080e:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <MX_ADC1_Init+0xbc>)
 8000810:	2200      	movs	r2, #0
 8000812:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000814:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <MX_ADC1_Init+0xbc>)
 8000816:	2200      	movs	r2, #0
 8000818:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800081c:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <MX_ADC1_Init+0xbc>)
 800081e:	2200      	movs	r2, #0
 8000820:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000822:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <MX_ADC1_Init+0xbc>)
 8000824:	2200      	movs	r2, #0
 8000826:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082a:	4811      	ldr	r0, [pc, #68]	@ (8000870 <MX_ADC1_Init+0xbc>)
 800082c:	f001 fbc4 	bl	8001fb8 <HAL_ADC_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000836:	f000 fd21 	bl	800127c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800083a:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <MX_ADC1_Init+0xc4>)
 800083c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800083e:	2306      	movs	r3, #6
 8000840:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000846:	237f      	movs	r3, #127	@ 0x7f
 8000848:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800084a:	2304      	movs	r3, #4
 800084c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000852:	463b      	mov	r3, r7
 8000854:	4619      	mov	r1, r3
 8000856:	4806      	ldr	r0, [pc, #24]	@ (8000870 <MX_ADC1_Init+0xbc>)
 8000858:	f001 fdf4 	bl	8002444 <HAL_ADC_ConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000862:	f000 fd0b 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000080 	.word	0x20000080
 8000874:	50040000 	.word	0x50040000
 8000878:	04300002 	.word	0x04300002

0800087c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000880:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <MX_DFSDM1_Init+0x68>)
 8000882:	4a19      	ldr	r2, [pc, #100]	@ (80008e8 <MX_DFSDM1_Init+0x6c>)
 8000884:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000886:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <MX_DFSDM1_Init+0x68>)
 8000888:	2201      	movs	r2, #1
 800088a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800088c:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <MX_DFSDM1_Init+0x68>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000892:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <MX_DFSDM1_Init+0x68>)
 8000894:	2202      	movs	r2, #2
 8000896:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <MX_DFSDM1_Init+0x68>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <MX_DFSDM1_Init+0x68>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <MX_DFSDM1_Init+0x68>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <MX_DFSDM1_Init+0x68>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <MX_DFSDM1_Init+0x68>)
 80008b2:	2204      	movs	r2, #4
 80008b4:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <MX_DFSDM1_Init+0x68>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80008bc:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <MX_DFSDM1_Init+0x68>)
 80008be:	2201      	movs	r2, #1
 80008c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80008c2:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <MX_DFSDM1_Init+0x68>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80008c8:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <MX_DFSDM1_Init+0x68>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <MX_DFSDM1_Init+0x68>)
 80008d0:	f002 fb1c 	bl	8002f0c <HAL_DFSDM_ChannelInit>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80008da:	f000 fccf 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000e8 	.word	0x200000e8
 80008e8:	40016040 	.word	0x40016040

080008ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000960 <MX_I2C1_Init+0x74>)
 80008f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000964 <MX_I2C1_Init+0x78>)
 80008f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <MX_I2C1_Init+0x74>)
 80008f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000968 <MX_I2C1_Init+0x7c>)
 80008fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008fc:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <MX_I2C1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000902:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <MX_I2C1_Init+0x74>)
 8000904:	2201      	movs	r2, #1
 8000906:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000908:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <MX_I2C1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_I2C1_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <MX_I2C1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_I2C1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000926:	480e      	ldr	r0, [pc, #56]	@ (8000960 <MX_I2C1_Init+0x74>)
 8000928:	f002 fde3 	bl	80034f2 <HAL_I2C_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000932:	f000 fca3 	bl	800127c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000936:	2100      	movs	r1, #0
 8000938:	4809      	ldr	r0, [pc, #36]	@ (8000960 <MX_I2C1_Init+0x74>)
 800093a:	f002 fe75 	bl	8003628 <HAL_I2CEx_ConfigAnalogFilter>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000944:	f000 fc9a 	bl	800127c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000948:	2100      	movs	r1, #0
 800094a:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_I2C1_Init+0x74>)
 800094c:	f002 feb7 	bl	80036be <HAL_I2CEx_ConfigDigitalFilter>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000956:	f000 fc91 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000120 	.word	0x20000120
 8000964:	40005400 	.word	0x40005400
 8000968:	307075b1 	.word	0x307075b1

0800096c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000970:	4b1b      	ldr	r3, [pc, #108]	@ (80009e0 <MX_I2C2_Init+0x74>)
 8000972:	4a1c      	ldr	r2, [pc, #112]	@ (80009e4 <MX_I2C2_Init+0x78>)
 8000974:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000976:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <MX_I2C2_Init+0x74>)
 8000978:	4a1b      	ldr	r2, [pc, #108]	@ (80009e8 <MX_I2C2_Init+0x7c>)
 800097a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800097c:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <MX_I2C2_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000982:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <MX_I2C2_Init+0x74>)
 8000984:	2201      	movs	r2, #1
 8000986:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000988:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <MX_I2C2_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800098e:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <MX_I2C2_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <MX_I2C2_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099a:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_I2C2_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <MX_I2C2_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009a6:	480e      	ldr	r0, [pc, #56]	@ (80009e0 <MX_I2C2_Init+0x74>)
 80009a8:	f002 fda3 	bl	80034f2 <HAL_I2C_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009b2:	f000 fc63 	bl	800127c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4809      	ldr	r0, [pc, #36]	@ (80009e0 <MX_I2C2_Init+0x74>)
 80009ba:	f002 fe35 	bl	8003628 <HAL_I2CEx_ConfigAnalogFilter>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009c4:	f000 fc5a 	bl	800127c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009c8:	2100      	movs	r1, #0
 80009ca:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_I2C2_Init+0x74>)
 80009cc:	f002 fe77 	bl	80036be <HAL_I2CEx_ConfigDigitalFilter>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009d6:	f000 fc51 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000174 	.word	0x20000174
 80009e4:	40005800 	.word	0x40005800
 80009e8:	307075b1 	.word	0x307075b1

080009ec <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000a00:	4b23      	ldr	r3, [pc, #140]	@ (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a02:	4a24      	ldr	r2, [pc, #144]	@ (8000a94 <MX_OCTOSPI1_Init+0xa8>)
 8000a04:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000a06:	4b22      	ldr	r3, [pc, #136]	@ (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000a0c:	4b20      	ldr	r3, [pc, #128]	@ (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000a12:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000a18:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a1c:	2220      	movs	r2, #32
 8000a1e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000a20:	4b1b      	ldr	r3, [pc, #108]	@ (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000a26:	4b1a      	ldr	r3, [pc, #104]	@ (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000a2c:	4b18      	ldr	r3, [pc, #96]	@ (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8000a32:	4b17      	ldr	r3, [pc, #92]	@ (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000a38:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000a3e:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000a44:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a4c:	2208      	movs	r2, #8
 8000a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000a50:	480f      	ldr	r0, [pc, #60]	@ (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a52:	f002 fe81 	bl	8003758 <HAL_OSPI_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000a5c:	f000 fc0e 	bl	800127c <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000a60:	2301      	movs	r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000a64:	2301      	movs	r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000a68:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000a6c:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a74:	4619      	mov	r1, r3
 8000a76:	4806      	ldr	r0, [pc, #24]	@ (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a78:	f002 ff28 	bl	80038cc <HAL_OSPIM_Config>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000a82:	f000 fbfb 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200001c8 	.word	0x200001c8
 8000a94:	a0001000 	.word	0xa0001000

08000a98 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b0c <MX_SPI3_Init+0x74>)
 8000a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000b10 <MX_SPI3_Init+0x78>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b0c <MX_SPI3_Init+0x74>)
 8000aa4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000aa8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000aaa:	4b18      	ldr	r3, [pc, #96]	@ (8000b0c <MX_SPI3_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ab0:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <MX_SPI3_Init+0x74>)
 8000ab2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000ab6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <MX_SPI3_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000abe:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <MX_SPI3_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <MX_SPI3_Init+0x74>)
 8000ac6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aca:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <MX_SPI3_Init+0x74>)
 8000ace:	2208      	movs	r2, #8
 8000ad0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <MX_SPI3_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <MX_SPI3_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <MX_SPI3_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <MX_SPI3_Init+0x74>)
 8000ae6:	2207      	movs	r2, #7
 8000ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <MX_SPI3_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000af0:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <MX_SPI3_Init+0x74>)
 8000af2:	2208      	movs	r2, #8
 8000af4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <MX_SPI3_Init+0x74>)
 8000af8:	f005 f80a 	bl	8005b10 <HAL_SPI_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b02:	f000 fbbb 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000218 	.word	0x20000218
 8000b10:	40003c00 	.word	0x40003c00

08000b14 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b18:	4b22      	ldr	r3, [pc, #136]	@ (8000ba4 <MX_UART4_Init+0x90>)
 8000b1a:	4a23      	ldr	r2, [pc, #140]	@ (8000ba8 <MX_UART4_Init+0x94>)
 8000b1c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ba4 <MX_UART4_Init+0x90>)
 8000b20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b24:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <MX_UART4_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <MX_UART4_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba4 <MX_UART4_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba4 <MX_UART4_Init+0x90>)
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <MX_UART4_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b44:	4b17      	ldr	r3, [pc, #92]	@ (8000ba4 <MX_UART4_Init+0x90>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <MX_UART4_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b50:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <MX_UART4_Init+0x90>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b56:	4b13      	ldr	r3, [pc, #76]	@ (8000ba4 <MX_UART4_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b5c:	4811      	ldr	r0, [pc, #68]	@ (8000ba4 <MX_UART4_Init+0x90>)
 8000b5e:	f005 fb2d 	bl	80061bc <HAL_UART_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000b68:	f000 fb88 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	480d      	ldr	r0, [pc, #52]	@ (8000ba4 <MX_UART4_Init+0x90>)
 8000b70:	f006 fa1a 	bl	8006fa8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000b7a:	f000 fb7f 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4808      	ldr	r0, [pc, #32]	@ (8000ba4 <MX_UART4_Init+0x90>)
 8000b82:	f006 fa4f 	bl	8007024 <HAL_UARTEx_SetRxFifoThreshold>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000b8c:	f000 fb76 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	@ (8000ba4 <MX_UART4_Init+0x90>)
 8000b92:	f006 f9d0 	bl	8006f36 <HAL_UARTEx_DisableFifoMode>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000b9c:	f000 fb6e 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	2000027c 	.word	0x2000027c
 8000ba8:	40004c00 	.word	0x40004c00

08000bac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb0:	4b22      	ldr	r3, [pc, #136]	@ (8000c3c <MX_USART1_UART_Init+0x90>)
 8000bb2:	4a23      	ldr	r2, [pc, #140]	@ (8000c40 <MX_USART1_UART_Init+0x94>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bb6:	4b21      	ldr	r3, [pc, #132]	@ (8000c3c <MX_USART1_UART_Init+0x90>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8000c3c <MX_USART1_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c3c <MX_USART1_UART_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	@ (8000c3c <MX_USART1_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c3c <MX_USART1_UART_Init+0x90>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b19      	ldr	r3, [pc, #100]	@ (8000c3c <MX_USART1_UART_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b17      	ldr	r3, [pc, #92]	@ (8000c3c <MX_USART1_UART_Init+0x90>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be2:	4b16      	ldr	r3, [pc, #88]	@ (8000c3c <MX_USART1_UART_Init+0x90>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be8:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <MX_USART1_UART_Init+0x90>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bee:	4b13      	ldr	r3, [pc, #76]	@ (8000c3c <MX_USART1_UART_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bf4:	4811      	ldr	r0, [pc, #68]	@ (8000c3c <MX_USART1_UART_Init+0x90>)
 8000bf6:	f005 fae1 	bl	80061bc <HAL_UART_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c00:	f000 fb3c 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c04:	2100      	movs	r1, #0
 8000c06:	480d      	ldr	r0, [pc, #52]	@ (8000c3c <MX_USART1_UART_Init+0x90>)
 8000c08:	f006 f9ce 	bl	8006fa8 <HAL_UARTEx_SetTxFifoThreshold>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c12:	f000 fb33 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c16:	2100      	movs	r1, #0
 8000c18:	4808      	ldr	r0, [pc, #32]	@ (8000c3c <MX_USART1_UART_Init+0x90>)
 8000c1a:	f006 fa03 	bl	8007024 <HAL_UARTEx_SetRxFifoThreshold>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c24:	f000 fb2a 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c28:	4804      	ldr	r0, [pc, #16]	@ (8000c3c <MX_USART1_UART_Init+0x90>)
 8000c2a:	f006 f984 	bl	8006f36 <HAL_UARTEx_DisableFifoMode>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c34:	f000 fb22 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000310 	.word	0x20000310
 8000c40:	40013800 	.word	0x40013800

08000c44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c48:	4b23      	ldr	r3, [pc, #140]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c4a:	4a24      	ldr	r2, [pc, #144]	@ (8000cdc <MX_USART2_UART_Init+0x98>)
 8000c4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c4e:	4b22      	ldr	r3, [pc, #136]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c56:	4b20      	ldr	r3, [pc, #128]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c70:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c74:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c76:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c88:	4b13      	ldr	r3, [pc, #76]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c8e:	4812      	ldr	r0, [pc, #72]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000c90:	f005 fa94 	bl	80061bc <HAL_UART_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000c9a:	f000 faef 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	480d      	ldr	r0, [pc, #52]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000ca2:	f006 f981 	bl	8006fa8 <HAL_UARTEx_SetTxFifoThreshold>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000cac:	f000 fae6 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4809      	ldr	r0, [pc, #36]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000cb4:	f006 f9b6 	bl	8007024 <HAL_UARTEx_SetRxFifoThreshold>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000cbe:	f000 fadd 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cc2:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <MX_USART2_UART_Init+0x94>)
 8000cc4:	f006 f937 	bl	8006f36 <HAL_UARTEx_DisableFifoMode>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000cce:	f000 fad5 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200003a4 	.word	0x200003a4
 8000cdc:	40004400 	.word	0x40004400

08000ce0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ce4:	4b22      	ldr	r3, [pc, #136]	@ (8000d70 <MX_USART3_UART_Init+0x90>)
 8000ce6:	4a23      	ldr	r2, [pc, #140]	@ (8000d74 <MX_USART3_UART_Init+0x94>)
 8000ce8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cea:	4b21      	ldr	r3, [pc, #132]	@ (8000d70 <MX_USART3_UART_Init+0x90>)
 8000cec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cf0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d70 <MX_USART3_UART_Init+0x90>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d70 <MX_USART3_UART_Init+0x90>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000d70 <MX_USART3_UART_Init+0x90>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d04:	4b1a      	ldr	r3, [pc, #104]	@ (8000d70 <MX_USART3_UART_Init+0x90>)
 8000d06:	220c      	movs	r2, #12
 8000d08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0a:	4b19      	ldr	r3, [pc, #100]	@ (8000d70 <MX_USART3_UART_Init+0x90>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d10:	4b17      	ldr	r3, [pc, #92]	@ (8000d70 <MX_USART3_UART_Init+0x90>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d16:	4b16      	ldr	r3, [pc, #88]	@ (8000d70 <MX_USART3_UART_Init+0x90>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d1c:	4b14      	ldr	r3, [pc, #80]	@ (8000d70 <MX_USART3_UART_Init+0x90>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d22:	4b13      	ldr	r3, [pc, #76]	@ (8000d70 <MX_USART3_UART_Init+0x90>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d28:	4811      	ldr	r0, [pc, #68]	@ (8000d70 <MX_USART3_UART_Init+0x90>)
 8000d2a:	f005 fa47 	bl	80061bc <HAL_UART_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d34:	f000 faa2 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d38:	2100      	movs	r1, #0
 8000d3a:	480d      	ldr	r0, [pc, #52]	@ (8000d70 <MX_USART3_UART_Init+0x90>)
 8000d3c:	f006 f934 	bl	8006fa8 <HAL_UARTEx_SetTxFifoThreshold>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d46:	f000 fa99 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4808      	ldr	r0, [pc, #32]	@ (8000d70 <MX_USART3_UART_Init+0x90>)
 8000d4e:	f006 f969 	bl	8007024 <HAL_UARTEx_SetRxFifoThreshold>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d58:	f000 fa90 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d5c:	4804      	ldr	r0, [pc, #16]	@ (8000d70 <MX_USART3_UART_Init+0x90>)
 8000d5e:	f006 f8ea 	bl	8006f36 <HAL_UARTEx_DisableFifoMode>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d68:	f000 fa88 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000438 	.word	0x20000438
 8000d74:	40004800 	.word	0x40004800

08000d78 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	@ 0x30
 8000d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d9e:	4b9f      	ldr	r3, [pc, #636]	@ (800101c <MX_GPIO_Init+0x294>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da2:	4a9e      	ldr	r2, [pc, #632]	@ (800101c <MX_GPIO_Init+0x294>)
 8000da4:	f043 0310 	orr.w	r3, r3, #16
 8000da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000daa:	4b9c      	ldr	r3, [pc, #624]	@ (800101c <MX_GPIO_Init+0x294>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dae:	f003 0310 	and.w	r3, r3, #16
 8000db2:	61bb      	str	r3, [r7, #24]
 8000db4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	4b99      	ldr	r3, [pc, #612]	@ (800101c <MX_GPIO_Init+0x294>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dba:	4a98      	ldr	r2, [pc, #608]	@ (800101c <MX_GPIO_Init+0x294>)
 8000dbc:	f043 0304 	orr.w	r3, r3, #4
 8000dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc2:	4b96      	ldr	r3, [pc, #600]	@ (800101c <MX_GPIO_Init+0x294>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc6:	f003 0304 	and.w	r3, r3, #4
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dce:	4b93      	ldr	r3, [pc, #588]	@ (800101c <MX_GPIO_Init+0x294>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	4a92      	ldr	r2, [pc, #584]	@ (800101c <MX_GPIO_Init+0x294>)
 8000dd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dda:	4b90      	ldr	r3, [pc, #576]	@ (800101c <MX_GPIO_Init+0x294>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b8d      	ldr	r3, [pc, #564]	@ (800101c <MX_GPIO_Init+0x294>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dea:	4a8c      	ldr	r2, [pc, #560]	@ (800101c <MX_GPIO_Init+0x294>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df2:	4b8a      	ldr	r3, [pc, #552]	@ (800101c <MX_GPIO_Init+0x294>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	4b87      	ldr	r3, [pc, #540]	@ (800101c <MX_GPIO_Init+0x294>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	4a86      	ldr	r2, [pc, #536]	@ (800101c <MX_GPIO_Init+0x294>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0a:	4b84      	ldr	r3, [pc, #528]	@ (800101c <MX_GPIO_Init+0x294>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e16:	4b81      	ldr	r3, [pc, #516]	@ (800101c <MX_GPIO_Init+0x294>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1a:	4a80      	ldr	r2, [pc, #512]	@ (800101c <MX_GPIO_Init+0x294>)
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e22:	4b7e      	ldr	r3, [pc, #504]	@ (800101c <MX_GPIO_Init+0x294>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f240 1105 	movw	r1, #261	@ 0x105
 8000e34:	487a      	ldr	r0, [pc, #488]	@ (8001020 <MX_GPIO_Init+0x298>)
 8000e36:	f002 fb07 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|GPIO_PIN_5
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f248 113c 	movw	r1, #33084	@ 0x813c
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e44:	f002 fb00 	bl	8003448 <HAL_GPIO_WritePin>
                          |SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f24f 0134 	movw	r1, #61492	@ 0xf034
 8000e4e:	4875      	ldr	r0, [pc, #468]	@ (8001024 <MX_GPIO_Init+0x29c>)
 8000e50:	f002 fafa 	bl	8003448 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	f242 0183 	movw	r1, #8323	@ 0x2083
 8000e5a:	4873      	ldr	r0, [pc, #460]	@ (8001028 <MX_GPIO_Init+0x2a0>)
 8000e5c:	f002 faf4 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000e66:	4871      	ldr	r0, [pc, #452]	@ (800102c <MX_GPIO_Init+0x2a4>)
 8000e68:	f002 faee 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000e6c:	f240 1305 	movw	r3, #261	@ 0x105
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	4619      	mov	r1, r3
 8000e84:	4866      	ldr	r0, [pc, #408]	@ (8001020 <MX_GPIO_Init+0x298>)
 8000e86:	f002 f94d 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8000e8a:	237a      	movs	r3, #122	@ 0x7a
 8000e8c:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e8e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4860      	ldr	r0, [pc, #384]	@ (8001020 <MX_GPIO_Init+0x298>)
 8000ea0:	f002 f940 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000ea4:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eaa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	4619      	mov	r1, r3
 8000eba:	485c      	ldr	r0, [pc, #368]	@ (800102c <MX_GPIO_Init+0x2a4>)
 8000ebc:	f002 f932 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin PA5
                           SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|GPIO_PIN_5
 8000ec0:	f248 133c 	movw	r3, #33084	@ 0x813c
 8000ec4:	61fb      	str	r3, [r7, #28]
                          |SPBTLE_RF_RST_Pin|ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000edc:	f002 f922 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000ee0:	23c0      	movs	r3, #192	@ 0xc0
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ef0:	2305      	movs	r3, #5
 8000ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efe:	f002 f911 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000f02:	2301      	movs	r3, #1
 8000f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f06:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	4619      	mov	r1, r3
 8000f16:	4843      	ldr	r0, [pc, #268]	@ (8001024 <MX_GPIO_Init+0x29c>)
 8000f18:	f002 f904 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	4619      	mov	r1, r3
 8000f36:	483b      	ldr	r0, [pc, #236]	@ (8001024 <MX_GPIO_Init+0x29c>)
 8000f38:	f002 f8f4 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f3c:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000f40:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	4619      	mov	r1, r3
 8000f54:	4833      	ldr	r0, [pc, #204]	@ (8001024 <MX_GPIO_Init+0x29c>)
 8000f56:	f002 f8e5 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8000f5a:	f64d 4304 	movw	r3, #56324	@ 0xdc04
 8000f5e:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	4619      	mov	r1, r3
 8000f70:	482d      	ldr	r0, [pc, #180]	@ (8001028 <MX_GPIO_Init+0x2a0>)
 8000f72:	f002 f8d7 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000f76:	f242 0383 	movw	r3, #8323	@ 0x2083
 8000f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4826      	ldr	r0, [pc, #152]	@ (8001028 <MX_GPIO_Init+0x2a0>)
 8000f90:	f002 f8c8 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000f94:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	481f      	ldr	r0, [pc, #124]	@ (800102c <MX_GPIO_Init+0x2a4>)
 8000fae:	f002 f8b9 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000fb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fca:	f002 f8ab 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000fce:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fe0:	230a      	movs	r3, #10
 8000fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fee:	f002 f899 	bl	8003124 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2105      	movs	r1, #5
 8000ff6:	2017      	movs	r0, #23
 8000ff8:	f001 ff5e 	bl	8002eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ffc:	2017      	movs	r0, #23
 8000ffe:	f001 ff77 	bl	8002ef0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2105      	movs	r1, #5
 8001006:	2028      	movs	r0, #40	@ 0x28
 8001008:	f001 ff56 	bl	8002eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800100c:	2028      	movs	r0, #40	@ 0x28
 800100e:	f001 ff6f 	bl	8002ef0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001012:	bf00      	nop
 8001014:	3730      	adds	r7, #48	@ 0x30
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000
 8001020:	48001000 	.word	0x48001000
 8001024:	48000400 	.word	0x48000400
 8001028:	48000c00 	.word	0x48000c00
 800102c:	48000800 	.word	0x48000800

08001030 <LED_flash_task_run>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMyLedTask */
void LED_flash_task_run(void *argument)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2120      	movs	r1, #32
 800103c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001040:	f002 fa02 	bl	8003448 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800104a:	4821      	ldr	r0, [pc, #132]	@ (80010d0 <LED_flash_task_run+0xa0>)
 800104c:	f002 f9fc 	bl	8003448 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001056:	481f      	ldr	r0, [pc, #124]	@ (80010d4 <LED_flash_task_run+0xa4>)
 8001058:	f002 f9f6 	bl	8003448 <HAL_GPIO_WritePin>
  static GPIO_PinState led_1_2_state = GPIO_PIN_RESET;
  for(;;)
  {

  if(led_1_2_state == GPIO_PIN_SET)
 800105c:	4b1e      	ldr	r3, [pc, #120]	@ (80010d8 <LED_flash_task_run+0xa8>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d103      	bne.n	800106c <LED_flash_task_run+0x3c>
	  led_1_2_state = GPIO_PIN_RESET;
 8001064:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <LED_flash_task_run+0xa8>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
 800106a:	e002      	b.n	8001072 <LED_flash_task_run+0x42>
  else led_1_2_state = GPIO_PIN_SET;
 800106c:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <LED_flash_task_run+0xa8>)
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]

	osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 8001072:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <LED_flash_task_run+0xac>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f04f 31ff 	mov.w	r1, #4294967295
 800107a:	4618      	mov	r0, r3
 800107c:	f006 fa64 	bl	8007548 <osSemaphoreAcquire>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, led_1_2_state); // Toggle
 8001080:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <LED_flash_task_run+0xa8>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	2120      	movs	r1, #32
 8001088:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800108c:	f002 f9dc 	bl	8003448 <HAL_GPIO_WritePin>
	if(acquisition_activated == 0)
 8001090:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <LED_flash_task_run+0xb0>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d107      	bne.n	80010a8 <LED_flash_task_run+0x78>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, led_1_2_state); // Toggle LED 2
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <LED_flash_task_run+0xa8>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010a2:	480c      	ldr	r0, [pc, #48]	@ (80010d4 <LED_flash_task_run+0xa4>)
 80010a4:	f002 f9d0 	bl	8003448 <HAL_GPIO_WritePin>

	if(queue_overflow_detected == 0)
 80010a8:	4b0e      	ldr	r3, [pc, #56]	@ (80010e4 <LED_flash_task_run+0xb4>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d105      	bne.n	80010bc <LED_flash_task_run+0x8c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010b6:	4806      	ldr	r0, [pc, #24]	@ (80010d0 <LED_flash_task_run+0xa0>)
 80010b8:	f002 f9c6 	bl	8003448 <HAL_GPIO_WritePin>

	osSemaphoreRelease(myBinarySem01Handle);
 80010bc:	4b07      	ldr	r3, [pc, #28]	@ (80010dc <LED_flash_task_run+0xac>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f006 fa93 	bl	80075ec <osSemaphoreRelease>

	osDelay(100);  //100ms delay
 80010c6:	2064      	movs	r0, #100	@ 0x64
 80010c8:	f006 f99a 	bl	8007400 <osDelay>
  if(led_1_2_state == GPIO_PIN_SET)
 80010cc:	e7c6      	b.n	800105c <LED_flash_task_run+0x2c>
 80010ce:	bf00      	nop
 80010d0:	48000800 	.word	0x48000800
 80010d4:	48000400 	.word	0x48000400
 80010d8:	200004e4 	.word	0x200004e4
 80010dc:	200004e0 	.word	0x200004e0
 80010e0:	20000000 	.word	0x20000000
 80010e4:	20000001 	.word	0x20000001

080010e8 <UART_send_task_run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMyUartTask */
void UART_send_task_run(void *argument)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMyUartTask */
  /* Infinite loop */
  for(;;)
  {
	uint16_t dataOut;
	osStatus_t result = osMessageQueueGet(myDataQueueHandle, &dataOut, NULL, osWaitForever);
 80010f0:	4b14      	ldr	r3, [pc, #80]	@ (8001144 <UART_send_task_run+0x5c>)
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	f107 0112 	add.w	r1, r7, #18
 80010f8:	f04f 33ff 	mov.w	r3, #4294967295
 80010fc:	2200      	movs	r2, #0
 80010fe:	f006 fb8d 	bl	800781c <osMessageQueueGet>
 8001102:	6178      	str	r0, [r7, #20]
	if(result == osOK)
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f2      	bne.n	80010f0 <UART_send_task_run+0x8>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800110a:	2120      	movs	r1, #32
 800110c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001110:	f002 f9b2 	bl	8003478 <HAL_GPIO_TogglePin>
		uint8_t buffer[5]="";
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	2300      	movs	r3, #0
 800111a:	743b      	strb	r3, [r7, #16]
		sprintf((char *)buffer, "%d\n\r", dataOut);
 800111c:	8a7b      	ldrh	r3, [r7, #18]
 800111e:	461a      	mov	r2, r3
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	4908      	ldr	r1, [pc, #32]	@ (8001148 <UART_send_task_run+0x60>)
 8001126:	4618      	mov	r0, r3
 8001128:	f009 fe1e 	bl	800ad68 <siprintf>
		HAL_UART_Transmit (&huart1, buffer, sizeof(buffer), 10);
 800112c:	f107 010c 	add.w	r1, r7, #12
 8001130:	230a      	movs	r3, #10
 8001132:	2205      	movs	r2, #5
 8001134:	4805      	ldr	r0, [pc, #20]	@ (800114c <UART_send_task_run+0x64>)
 8001136:	f005 f891 	bl	800625c <HAL_UART_Transmit>
	    osDelay(1);
 800113a:	2001      	movs	r0, #1
 800113c:	f006 f960 	bl	8007400 <osDelay>
  {
 8001140:	e7d6      	b.n	80010f0 <UART_send_task_run+0x8>
 8001142:	bf00      	nop
 8001144:	200004dc 	.word	0x200004dc
 8001148:	0800b7c4 	.word	0x0800b7c4
 800114c:	20000310 	.word	0x20000310

08001150 <UART_RX_task_run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMyCounterTask */
void UART_RX_task_run(void *argument)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMyCounterTask */
  /* Infinite loop */
  for(;;)
  {
	uint8_t received_data;
	HAL_UART_Receive(&huart1, &received_data, 1, 10);
 8001158:	f107 010f 	add.w	r1, r7, #15
 800115c:	230a      	movs	r3, #10
 800115e:	2201      	movs	r2, #1
 8001160:	481d      	ldr	r0, [pc, #116]	@ (80011d8 <UART_RX_task_run+0x88>)
 8001162:	f005 f909 	bl	8006378 <HAL_UART_Receive>
	if(received_data == 's')
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	2b73      	cmp	r3, #115	@ 0x73
 800116a:	d113      	bne.n	8001194 <UART_RX_task_run+0x44>
	{
		osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 800116c:	4b1b      	ldr	r3, [pc, #108]	@ (80011dc <UART_RX_task_run+0x8c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f04f 31ff 	mov.w	r1, #4294967295
 8001174:	4618      	mov	r0, r3
 8001176:	f006 f9e7 	bl	8007548 <osSemaphoreAcquire>
		acquisition_activated = 0;
 800117a:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <UART_RX_task_run+0x90>)
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
		osSemaphoreRelease(myBinarySem01Handle);
 8001180:	4b16      	ldr	r3, [pc, #88]	@ (80011dc <UART_RX_task_run+0x8c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f006 fa31 	bl	80075ec <osSemaphoreRelease>
		osThreadResume(myADC_Cmd_TaskHandle);
 800118a:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <UART_RX_task_run+0x94>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f006 f915 	bl	80073be <osThreadResume>
	}
	if(received_data == 'x')
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	2b78      	cmp	r3, #120	@ 0x78
 8001198:	d119      	bne.n	80011ce <UART_RX_task_run+0x7e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011a0:	4811      	ldr	r0, [pc, #68]	@ (80011e8 <UART_RX_task_run+0x98>)
 80011a2:	f002 f951 	bl	8003448 <HAL_GPIO_WritePin>
		osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 80011a6:	4b0d      	ldr	r3, [pc, #52]	@ (80011dc <UART_RX_task_run+0x8c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f04f 31ff 	mov.w	r1, #4294967295
 80011ae:	4618      	mov	r0, r3
 80011b0:	f006 f9ca 	bl	8007548 <osSemaphoreAcquire>
		acquisition_activated = 1;
 80011b4:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <UART_RX_task_run+0x90>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	701a      	strb	r2, [r3, #0]
		osSemaphoreRelease(myBinarySem01Handle);
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <UART_RX_task_run+0x8c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f006 fa14 	bl	80075ec <osSemaphoreRelease>
		osThreadSuspend(myADC_Cmd_TaskHandle);
 80011c4:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <UART_RX_task_run+0x94>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f006 f8d7 	bl	800737c <osThreadSuspend>
	}
	osDelay(200);
 80011ce:	20c8      	movs	r0, #200	@ 0xc8
 80011d0:	f006 f916 	bl	8007400 <osDelay>
  {
 80011d4:	e7c0      	b.n	8001158 <UART_RX_task_run+0x8>
 80011d6:	bf00      	nop
 80011d8:	20000310 	.word	0x20000310
 80011dc:	200004e0 	.word	0x200004e0
 80011e0:	20000000 	.word	0x20000000
 80011e4:	200004d8 	.word	0x200004d8
 80011e8:	48000400 	.word	0x48000400

080011ec <ADC_CMD_task_run>:
  /* USER CODE END StartMyCounterTask */
}

#define SOUND_CHANNEL_MASK  0xFE  // 1111 1110
void ADC_CMD_task_run(void *argument)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
      HAL_ADC_Start(&hadc1);
 80011f4:	4816      	ldr	r0, [pc, #88]	@ (8001250 <ADC_CMD_task_run+0x64>)
 80011f6:	f001 f825 	bl	8002244 <HAL_ADC_Start>

      // Wait for conversion to complete (blocking)
      if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80011fa:	f04f 31ff 	mov.w	r1, #4294967295
 80011fe:	4814      	ldr	r0, [pc, #80]	@ (8001250 <ADC_CMD_task_run+0x64>)
 8001200:	f001 f883 	bl	800230a <HAL_ADC_PollForConversion>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d11d      	bne.n	8001246 <ADC_CMD_task_run+0x5a>
          // Read ADC value
          uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 800120a:	4811      	ldr	r0, [pc, #68]	@ (8001250 <ADC_CMD_task_run+0x64>)
 800120c:	f001 f90c 	bl	8002428 <HAL_ADC_GetValue>
 8001210:	6178      	str	r0, [r7, #20]
          uint8_t encoded_sound = (uint8_t) (adc_value/2);
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	085b      	lsrs	r3, r3, #1
 8001216:	b2db      	uxtb	r3, r3
 8001218:	73fb      	strb	r3, [r7, #15]
          encoded_sound &= SOUND_CHANNEL_MASK;
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	f023 0301 	bic.w	r3, r3, #1
 8001220:	b2db      	uxtb	r3, r3
 8001222:	73fb      	strb	r3, [r7, #15]
          if(osMessageQueueGetSpace(myDataQueueHandle) == 0)
 8001224:	4b0b      	ldr	r3, [pc, #44]	@ (8001254 <ADC_CMD_task_run+0x68>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f006 fb55 	bl	80078d8 <osMessageQueueGetSpace>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d008      	beq.n	8001246 <ADC_CMD_task_run+0x5a>
          {
        	  //TODO enable AlarmMsgQ
          }
          else
          {
        	 osStatus_t result = osMessageQueuePut(myDataQueueHandle, &encoded_sound, 0, 10);
 8001234:	4b07      	ldr	r3, [pc, #28]	@ (8001254 <ADC_CMD_task_run+0x68>)
 8001236:	6818      	ldr	r0, [r3, #0]
 8001238:	f107 010f 	add.w	r1, r7, #15
 800123c:	230a      	movs	r3, #10
 800123e:	2200      	movs	r2, #0
 8001240:	f006 fa8c 	bl	800775c <osMessageQueuePut>
 8001244:	6138      	str	r0, [r7, #16]
        	 {
           	  //TODO enable AlarmMsgQ
        	 }
          }
      }
	osDelay(2);
 8001246:	2002      	movs	r0, #2
 8001248:	f006 f8da 	bl	8007400 <osDelay>
      HAL_ADC_Start(&hadc1);
 800124c:	e7d2      	b.n	80011f4 <ADC_CMD_task_run+0x8>
 800124e:	bf00      	nop
 8001250:	20000080 	.word	0x20000080
 8001254:	200004dc 	.word	0x200004dc

08001258 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a04      	ldr	r2, [pc, #16]	@ (8001278 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d101      	bne.n	800126e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800126a:	f000 fcab 	bl	8001bc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40001000 	.word	0x40001000

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <Error_Handler+0x8>

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <HAL_MspInit+0x4c>)
 8001290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001292:	4a10      	ldr	r2, [pc, #64]	@ (80012d4 <HAL_MspInit+0x4c>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6613      	str	r3, [r2, #96]	@ 0x60
 800129a:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <HAL_MspInit+0x4c>)
 800129c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <HAL_MspInit+0x4c>)
 80012a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012aa:	4a0a      	ldr	r2, [pc, #40]	@ (80012d4 <HAL_MspInit+0x4c>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80012b2:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <HAL_MspInit+0x4c>)
 80012b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	210f      	movs	r1, #15
 80012c2:	f06f 0001 	mvn.w	r0, #1
 80012c6:	f001 fdf7 	bl	8002eb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000

080012d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	@ 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a15      	ldr	r2, [pc, #84]	@ (800134c <HAL_ADC_MspInit+0x74>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d123      	bne.n	8001342 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <HAL_ADC_MspInit+0x78>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	4a14      	ldr	r2, [pc, #80]	@ (8001350 <HAL_ADC_MspInit+0x78>)
 8001300:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001306:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <HAL_ADC_MspInit+0x78>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <HAL_ADC_MspInit+0x78>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001316:	4a0e      	ldr	r2, [pc, #56]	@ (8001350 <HAL_ADC_MspInit+0x78>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131e:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <HAL_ADC_MspInit+0x78>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800132a:	233f      	movs	r3, #63	@ 0x3f
 800132c:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800132e:	230b      	movs	r3, #11
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	4805      	ldr	r0, [pc, #20]	@ (8001354 <HAL_ADC_MspInit+0x7c>)
 800133e:	f001 fef1 	bl	8003124 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	3728      	adds	r7, #40	@ 0x28
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	50040000 	.word	0x50040000
 8001350:	40021000 	.word	0x40021000
 8001354:	48000800 	.word	0x48000800

08001358 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b0ae      	sub	sp, #184	@ 0xb8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	2294      	movs	r2, #148	@ 0x94
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f009 fd15 	bl	800ada8 <memset>
  if(DFSDM1_Init == 0)
 800137e:	4b25      	ldr	r3, [pc, #148]	@ (8001414 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d142      	bne.n	800140c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001386:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800138a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001392:	f107 0310 	add.w	r3, r7, #16
 8001396:	4618      	mov	r0, r3
 8001398:	f003 fe92 	bl	80050c0 <HAL_RCCEx_PeriphCLKConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80013a2:	f7ff ff6b 	bl	800127c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80013a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001418 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80013a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013aa:	4a1b      	ldr	r2, [pc, #108]	@ (8001418 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80013ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80013b2:	4b19      	ldr	r3, [pc, #100]	@ (8001418 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80013b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013be:	4b16      	ldr	r3, [pc, #88]	@ (8001418 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c2:	4a15      	ldr	r2, [pc, #84]	@ (8001418 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80013c4:	f043 0310 	orr.w	r3, r3, #16
 80013c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ca:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80013d6:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80013da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80013f0:	2306      	movs	r3, #6
 80013f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013fa:	4619      	mov	r1, r3
 80013fc:	4807      	ldr	r0, [pc, #28]	@ (800141c <HAL_DFSDM_ChannelMspInit+0xc4>)
 80013fe:	f001 fe91 	bl	8003124 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001402:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	3301      	adds	r3, #1
 8001408:	4a02      	ldr	r2, [pc, #8]	@ (8001414 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800140a:	6013      	str	r3, [r2, #0]
  }

}
 800140c:	bf00      	nop
 800140e:	37b8      	adds	r7, #184	@ 0xb8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200004e8 	.word	0x200004e8
 8001418:	40021000 	.word	0x40021000
 800141c:	48001000 	.word	0x48001000

08001420 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b0b0      	sub	sp, #192	@ 0xc0
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001438:	f107 0318 	add.w	r3, r7, #24
 800143c:	2294      	movs	r2, #148	@ 0x94
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f009 fcb1 	bl	800ada8 <memset>
  if(hi2c->Instance==I2C1)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a42      	ldr	r2, [pc, #264]	@ (8001554 <HAL_I2C_MspInit+0x134>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d13c      	bne.n	80014ca <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001450:	2340      	movs	r3, #64	@ 0x40
 8001452:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001454:	2300      	movs	r3, #0
 8001456:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001458:	f107 0318 	add.w	r3, r7, #24
 800145c:	4618      	mov	r0, r3
 800145e:	f003 fe2f 	bl	80050c0 <HAL_RCCEx_PeriphCLKConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001468:	f7ff ff08 	bl	800127c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146c:	4b3a      	ldr	r3, [pc, #232]	@ (8001558 <HAL_I2C_MspInit+0x138>)
 800146e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001470:	4a39      	ldr	r2, [pc, #228]	@ (8001558 <HAL_I2C_MspInit+0x138>)
 8001472:	f043 0302 	orr.w	r3, r3, #2
 8001476:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001478:	4b37      	ldr	r3, [pc, #220]	@ (8001558 <HAL_I2C_MspInit+0x138>)
 800147a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001484:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001488:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800148c:	2312      	movs	r3, #18
 800148e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001492:	2301      	movs	r3, #1
 8001494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800149e:	2304      	movs	r3, #4
 80014a0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014a8:	4619      	mov	r1, r3
 80014aa:	482c      	ldr	r0, [pc, #176]	@ (800155c <HAL_I2C_MspInit+0x13c>)
 80014ac:	f001 fe3a 	bl	8003124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b0:	4b29      	ldr	r3, [pc, #164]	@ (8001558 <HAL_I2C_MspInit+0x138>)
 80014b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b4:	4a28      	ldr	r2, [pc, #160]	@ (8001558 <HAL_I2C_MspInit+0x138>)
 80014b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80014bc:	4b26      	ldr	r3, [pc, #152]	@ (8001558 <HAL_I2C_MspInit+0x138>)
 80014be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014c8:	e040      	b.n	800154c <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a24      	ldr	r2, [pc, #144]	@ (8001560 <HAL_I2C_MspInit+0x140>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d13b      	bne.n	800154c <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80014d4:	2380      	movs	r3, #128	@ 0x80
 80014d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80014d8:	2300      	movs	r3, #0
 80014da:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014dc:	f107 0318 	add.w	r3, r7, #24
 80014e0:	4618      	mov	r0, r3
 80014e2:	f003 fded 	bl	80050c0 <HAL_RCCEx_PeriphCLKConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80014ec:	f7ff fec6 	bl	800127c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f0:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <HAL_I2C_MspInit+0x138>)
 80014f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f4:	4a18      	ldr	r2, [pc, #96]	@ (8001558 <HAL_I2C_MspInit+0x138>)
 80014f6:	f043 0302 	orr.w	r3, r3, #2
 80014fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fc:	4b16      	ldr	r3, [pc, #88]	@ (8001558 <HAL_I2C_MspInit+0x138>)
 80014fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001508:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800150c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001510:	2312      	movs	r3, #18
 8001512:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001516:	2301      	movs	r3, #1
 8001518:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001522:	2304      	movs	r3, #4
 8001524:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001528:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800152c:	4619      	mov	r1, r3
 800152e:	480b      	ldr	r0, [pc, #44]	@ (800155c <HAL_I2C_MspInit+0x13c>)
 8001530:	f001 fdf8 	bl	8003124 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001534:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <HAL_I2C_MspInit+0x138>)
 8001536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001538:	4a07      	ldr	r2, [pc, #28]	@ (8001558 <HAL_I2C_MspInit+0x138>)
 800153a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800153e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001540:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <HAL_I2C_MspInit+0x138>)
 8001542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001544:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
}
 800154c:	bf00      	nop
 800154e:	37c0      	adds	r7, #192	@ 0xc0
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40005400 	.word	0x40005400
 8001558:	40021000 	.word	0x40021000
 800155c:	48000400 	.word	0x48000400
 8001560:	40005800 	.word	0x40005800

08001564 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b0b0      	sub	sp, #192	@ 0xc0
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800157c:	f107 0318 	add.w	r3, r7, #24
 8001580:	2294      	movs	r2, #148	@ 0x94
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f009 fc0f 	bl	800ada8 <memset>
  if(hospi->Instance==OCTOSPI1)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a28      	ldr	r2, [pc, #160]	@ (8001630 <HAL_OSPI_MspInit+0xcc>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d149      	bne.n	8001628 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001594:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001598:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800159a:	2300      	movs	r3, #0
 800159c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a0:	f107 0318 	add.w	r3, r7, #24
 80015a4:	4618      	mov	r0, r3
 80015a6:	f003 fd8b 	bl	80050c0 <HAL_RCCEx_PeriphCLKConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 80015b0:	f7ff fe64 	bl	800127c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 80015b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001634 <HAL_OSPI_MspInit+0xd0>)
 80015b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001634 <HAL_OSPI_MspInit+0xd0>)
 80015ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80015be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <HAL_OSPI_MspInit+0xd0>)
 80015c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80015cc:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <HAL_OSPI_MspInit+0xd0>)
 80015ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d0:	4a18      	ldr	r2, [pc, #96]	@ (8001634 <HAL_OSPI_MspInit+0xd0>)
 80015d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80015d8:	4b16      	ldr	r3, [pc, #88]	@ (8001634 <HAL_OSPI_MspInit+0xd0>)
 80015da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015e4:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <HAL_OSPI_MspInit+0xd0>)
 80015e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e8:	4a12      	ldr	r2, [pc, #72]	@ (8001634 <HAL_OSPI_MspInit+0xd0>)
 80015ea:	f043 0310 	orr.w	r3, r3, #16
 80015ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f0:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <HAL_OSPI_MspInit+0xd0>)
 80015f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f4:	f003 0310 	and.w	r3, r3, #16
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80015fc:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001600:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001616:	230a      	movs	r3, #10
 8001618:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800161c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001620:	4619      	mov	r1, r3
 8001622:	4805      	ldr	r0, [pc, #20]	@ (8001638 <HAL_OSPI_MspInit+0xd4>)
 8001624:	f001 fd7e 	bl	8003124 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001628:	bf00      	nop
 800162a:	37c0      	adds	r7, #192	@ 0xc0
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	a0001000 	.word	0xa0001000
 8001634:	40021000 	.word	0x40021000
 8001638:	48001000 	.word	0x48001000

0800163c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	@ 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a17      	ldr	r2, [pc, #92]	@ (80016b8 <HAL_SPI_MspInit+0x7c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d128      	bne.n	80016b0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800165e:	4b17      	ldr	r3, [pc, #92]	@ (80016bc <HAL_SPI_MspInit+0x80>)
 8001660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001662:	4a16      	ldr	r2, [pc, #88]	@ (80016bc <HAL_SPI_MspInit+0x80>)
 8001664:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001668:	6593      	str	r3, [r2, #88]	@ 0x58
 800166a:	4b14      	ldr	r3, [pc, #80]	@ (80016bc <HAL_SPI_MspInit+0x80>)
 800166c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001676:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <HAL_SPI_MspInit+0x80>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167a:	4a10      	ldr	r2, [pc, #64]	@ (80016bc <HAL_SPI_MspInit+0x80>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001682:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <HAL_SPI_MspInit+0x80>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800168e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016a0:	2306      	movs	r3, #6
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <HAL_SPI_MspInit+0x84>)
 80016ac:	f001 fd3a 	bl	8003124 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80016b0:	bf00      	nop
 80016b2:	3728      	adds	r7, #40	@ 0x28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40003c00 	.word	0x40003c00
 80016bc:	40021000 	.word	0x40021000
 80016c0:	48000800 	.word	0x48000800

080016c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b0b4      	sub	sp, #208	@ 0xd0
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016e0:	2294      	movs	r2, #148	@ 0x94
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f009 fb5f 	bl	800ada8 <memset>
  if(huart->Instance==UART4)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a83      	ldr	r2, [pc, #524]	@ (80018fc <HAL_UART_MspInit+0x238>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d13c      	bne.n	800176e <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80016f4:	2308      	movs	r3, #8
 80016f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001700:	4618      	mov	r0, r3
 8001702:	f003 fcdd 	bl	80050c0 <HAL_RCCEx_PeriphCLKConfig>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800170c:	f7ff fdb6 	bl	800127c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001710:	4b7b      	ldr	r3, [pc, #492]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001714:	4a7a      	ldr	r2, [pc, #488]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 8001716:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800171a:	6593      	str	r3, [r2, #88]	@ 0x58
 800171c:	4b78      	ldr	r3, [pc, #480]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 800171e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001720:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
 8001726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001728:	4b75      	ldr	r3, [pc, #468]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 800172a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172c:	4a74      	ldr	r2, [pc, #464]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001734:	4b72      	ldr	r3, [pc, #456]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 8001736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	623b      	str	r3, [r7, #32]
 800173e:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001740:	2303      	movs	r3, #3
 8001742:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001758:	2308      	movs	r3, #8
 800175a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001762:	4619      	mov	r1, r3
 8001764:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001768:	f001 fcdc 	bl	8003124 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800176c:	e0c2      	b.n	80018f4 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a64      	ldr	r2, [pc, #400]	@ (8001904 <HAL_UART_MspInit+0x240>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d13b      	bne.n	80017f0 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001778:	2301      	movs	r3, #1
 800177a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800177c:	2300      	movs	r3, #0
 800177e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001780:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001784:	4618      	mov	r0, r3
 8001786:	f003 fc9b 	bl	80050c0 <HAL_RCCEx_PeriphCLKConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001790:	f7ff fd74 	bl	800127c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001794:	4b5a      	ldr	r3, [pc, #360]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 8001796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001798:	4a59      	ldr	r2, [pc, #356]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 800179a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800179e:	6613      	str	r3, [r2, #96]	@ 0x60
 80017a0:	4b57      	ldr	r3, [pc, #348]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 80017a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017a8:	61fb      	str	r3, [r7, #28]
 80017aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ac:	4b54      	ldr	r3, [pc, #336]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 80017ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b0:	4a53      	ldr	r2, [pc, #332]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 80017b2:	f043 0302 	orr.w	r3, r3, #2
 80017b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b8:	4b51      	ldr	r3, [pc, #324]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 80017ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	61bb      	str	r3, [r7, #24]
 80017c2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80017c4:	23c0      	movs	r3, #192	@ 0xc0
 80017c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017dc:	2307      	movs	r3, #7
 80017de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e2:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80017e6:	4619      	mov	r1, r3
 80017e8:	4847      	ldr	r0, [pc, #284]	@ (8001908 <HAL_UART_MspInit+0x244>)
 80017ea:	f001 fc9b 	bl	8003124 <HAL_GPIO_Init>
}
 80017ee:	e081      	b.n	80018f4 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a45      	ldr	r2, [pc, #276]	@ (800190c <HAL_UART_MspInit+0x248>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d13b      	bne.n	8001872 <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017fa:	2302      	movs	r3, #2
 80017fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017fe:	2300      	movs	r3, #0
 8001800:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001802:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001806:	4618      	mov	r0, r3
 8001808:	f003 fc5a 	bl	80050c0 <HAL_RCCEx_PeriphCLKConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_UART_MspInit+0x152>
      Error_Handler();
 8001812:	f7ff fd33 	bl	800127c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001816:	4b3a      	ldr	r3, [pc, #232]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181a:	4a39      	ldr	r2, [pc, #228]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 800181c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001820:	6593      	str	r3, [r2, #88]	@ 0x58
 8001822:	4b37      	ldr	r3, [pc, #220]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 8001824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800182e:	4b34      	ldr	r3, [pc, #208]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001832:	4a33      	ldr	r2, [pc, #204]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 8001834:	f043 0308 	orr.w	r3, r3, #8
 8001838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800183a:	4b31      	ldr	r3, [pc, #196]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001846:	2378      	movs	r3, #120	@ 0x78
 8001848:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001858:	2303      	movs	r3, #3
 800185a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800185e:	2307      	movs	r3, #7
 8001860:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001864:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001868:	4619      	mov	r1, r3
 800186a:	4829      	ldr	r0, [pc, #164]	@ (8001910 <HAL_UART_MspInit+0x24c>)
 800186c:	f001 fc5a 	bl	8003124 <HAL_GPIO_Init>
}
 8001870:	e040      	b.n	80018f4 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a27      	ldr	r2, [pc, #156]	@ (8001914 <HAL_UART_MspInit+0x250>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d13b      	bne.n	80018f4 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800187c:	2304      	movs	r3, #4
 800187e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001880:	2300      	movs	r3, #0
 8001882:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001884:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001888:	4618      	mov	r0, r3
 800188a:	f003 fc19 	bl	80050c0 <HAL_RCCEx_PeriphCLKConfig>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8001894:	f7ff fcf2 	bl	800127c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001898:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189c:	4a18      	ldr	r2, [pc, #96]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 800189e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80018a4:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b0:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 80018b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b4:	4a12      	ldr	r2, [pc, #72]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 80018b6:	f043 0308 	orr.w	r3, r3, #8
 80018ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018bc:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <HAL_UART_MspInit+0x23c>)
 80018be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80018c8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018dc:	2303      	movs	r3, #3
 80018de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018e2:	2307      	movs	r3, #7
 80018e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80018ec:	4619      	mov	r1, r3
 80018ee:	4808      	ldr	r0, [pc, #32]	@ (8001910 <HAL_UART_MspInit+0x24c>)
 80018f0:	f001 fc18 	bl	8003124 <HAL_GPIO_Init>
}
 80018f4:	bf00      	nop
 80018f6:	37d0      	adds	r7, #208	@ 0xd0
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40004c00 	.word	0x40004c00
 8001900:	40021000 	.word	0x40021000
 8001904:	40013800 	.word	0x40013800
 8001908:	48000400 	.word	0x48000400
 800190c:	40004400 	.word	0x40004400
 8001910:	48000c00 	.word	0x48000c00
 8001914:	40004800 	.word	0x40004800

08001918 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08e      	sub	sp, #56	@ 0x38
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001926:	4b34      	ldr	r3, [pc, #208]	@ (80019f8 <HAL_InitTick+0xe0>)
 8001928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192a:	4a33      	ldr	r2, [pc, #204]	@ (80019f8 <HAL_InitTick+0xe0>)
 800192c:	f043 0310 	orr.w	r3, r3, #16
 8001930:	6593      	str	r3, [r2, #88]	@ 0x58
 8001932:	4b31      	ldr	r3, [pc, #196]	@ (80019f8 <HAL_InitTick+0xe0>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800193e:	f107 0210 	add.w	r2, r7, #16
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f003 fac7 	bl	8004edc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001954:	2b00      	cmp	r3, #0
 8001956:	d103      	bne.n	8001960 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001958:	f003 fa94 	bl	8004e84 <HAL_RCC_GetPCLK1Freq>
 800195c:	6378      	str	r0, [r7, #52]	@ 0x34
 800195e:	e004      	b.n	800196a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001960:	f003 fa90 	bl	8004e84 <HAL_RCC_GetPCLK1Freq>
 8001964:	4603      	mov	r3, r0
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800196a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800196c:	4a23      	ldr	r2, [pc, #140]	@ (80019fc <HAL_InitTick+0xe4>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0c9b      	lsrs	r3, r3, #18
 8001974:	3b01      	subs	r3, #1
 8001976:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001978:	4b21      	ldr	r3, [pc, #132]	@ (8001a00 <HAL_InitTick+0xe8>)
 800197a:	4a22      	ldr	r2, [pc, #136]	@ (8001a04 <HAL_InitTick+0xec>)
 800197c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800197e:	4b20      	ldr	r3, [pc, #128]	@ (8001a00 <HAL_InitTick+0xe8>)
 8001980:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001984:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001986:	4a1e      	ldr	r2, [pc, #120]	@ (8001a00 <HAL_InitTick+0xe8>)
 8001988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800198a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800198c:	4b1c      	ldr	r3, [pc, #112]	@ (8001a00 <HAL_InitTick+0xe8>)
 800198e:	2200      	movs	r2, #0
 8001990:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001992:	4b1b      	ldr	r3, [pc, #108]	@ (8001a00 <HAL_InitTick+0xe8>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001998:	4b19      	ldr	r3, [pc, #100]	@ (8001a00 <HAL_InitTick+0xe8>)
 800199a:	2200      	movs	r2, #0
 800199c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800199e:	4818      	ldr	r0, [pc, #96]	@ (8001a00 <HAL_InitTick+0xe8>)
 80019a0:	f004 f959 	bl	8005c56 <HAL_TIM_Base_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80019aa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d11b      	bne.n	80019ea <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80019b2:	4813      	ldr	r0, [pc, #76]	@ (8001a00 <HAL_InitTick+0xe8>)
 80019b4:	f004 f9b0 	bl	8005d18 <HAL_TIM_Base_Start_IT>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80019be:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d111      	bne.n	80019ea <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019c6:	2036      	movs	r0, #54	@ 0x36
 80019c8:	f001 fa92 	bl	8002ef0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b0f      	cmp	r3, #15
 80019d0:	d808      	bhi.n	80019e4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80019d2:	2200      	movs	r2, #0
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	2036      	movs	r0, #54	@ 0x36
 80019d8:	f001 fa6e 	bl	8002eb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <HAL_InitTick+0xf0>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e002      	b.n	80019ea <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80019ea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3738      	adds	r7, #56	@ 0x38
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	431bde83 	.word	0x431bde83
 8001a00:	200004ec 	.word	0x200004ec
 8001a04:	40001000 	.word	0x40001000
 8001a08:	20000008 	.word	0x20000008

08001a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <NMI_Handler+0x4>

08001a14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <HardFault_Handler+0x4>

08001a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <MemManage_Handler+0x4>

08001a24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <BusFault_Handler+0x4>

08001a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <UsageFault_Handler+0x4>

08001a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001a46:	2020      	movs	r0, #32
 8001a48:	f001 fd30 	bl	80034ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001a4c:	2040      	movs	r0, #64	@ 0x40
 8001a4e:	f001 fd2d 	bl	80034ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001a52:	2080      	movs	r0, #128	@ 0x80
 8001a54:	f001 fd2a 	bl	80034ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001a58:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001a5c:	f001 fd26 	bl	80034ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8001a68:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001a6c:	f001 fd1e 	bl	80034ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001a70:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001a74:	f001 fd1a 	bl	80034ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8001a78:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001a7c:	f001 fd16 	bl	80034ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001a80:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a84:	f001 fd12 	bl	80034ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001a88:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001a8c:	f001 fd0e 	bl	80034ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001a90:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001a94:	f001 fd0a 	bl	80034ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001aa0:	4802      	ldr	r0, [pc, #8]	@ (8001aac <TIM6_DAC_IRQHandler+0x10>)
 8001aa2:	f004 f9a9 	bl	8005df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200004ec 	.word	0x200004ec

08001ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab8:	4a14      	ldr	r2, [pc, #80]	@ (8001b0c <_sbrk+0x5c>)
 8001aba:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <_sbrk+0x60>)
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac4:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001acc:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <_sbrk+0x64>)
 8001ace:	4a12      	ldr	r2, [pc, #72]	@ (8001b18 <_sbrk+0x68>)
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad2:	4b10      	ldr	r3, [pc, #64]	@ (8001b14 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d207      	bcs.n	8001af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae0:	f009 f9c0 	bl	800ae64 <__errno>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	e009      	b.n	8001b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af0:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af6:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	4a05      	ldr	r2, [pc, #20]	@ (8001b14 <_sbrk+0x64>)
 8001b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200a0000 	.word	0x200a0000
 8001b10:	00000400 	.word	0x00000400
 8001b14:	20000538 	.word	0x20000538
 8001b18:	20002050 	.word	0x20002050

08001b1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b20:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <SystemInit+0x20>)
 8001b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b26:	4a05      	ldr	r2, [pc, #20]	@ (8001b3c <SystemInit+0x20>)
 8001b28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b44:	f7ff ffea 	bl	8001b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b48:	480c      	ldr	r0, [pc, #48]	@ (8001b7c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b4a:	490d      	ldr	r1, [pc, #52]	@ (8001b80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b84 <LoopForever+0xe>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b50:	e002      	b.n	8001b58 <LoopCopyDataInit>

08001b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b56:	3304      	adds	r3, #4

08001b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b5c:	d3f9      	bcc.n	8001b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b60:	4c0a      	ldr	r4, [pc, #40]	@ (8001b8c <LoopForever+0x16>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b64:	e001      	b.n	8001b6a <LoopFillZerobss>

08001b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b68:	3204      	adds	r2, #4

08001b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b6c:	d3fb      	bcc.n	8001b66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b6e:	f009 f97f 	bl	800ae70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b72:	f7fe fd0d 	bl	8000590 <main>

08001b76 <LoopForever>:

LoopForever:
    b LoopForever
 8001b76:	e7fe      	b.n	8001b76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b78:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b80:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001b84:	0800b950 	.word	0x0800b950
  ldr r2, =_sbss
 8001b88:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001b8c:	2000204c 	.word	0x2000204c

08001b90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b90:	e7fe      	b.n	8001b90 <ADC1_IRQHandler>

08001b92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	f001 f980 	bl	8002ea2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ba2:	200f      	movs	r0, #15
 8001ba4:	f7ff feb8 	bl	8001918 <HAL_InitTick>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d002      	beq.n	8001bb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	71fb      	strb	r3, [r7, #7]
 8001bb2:	e001      	b.n	8001bb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bb4:	f7ff fb68 	bl	8001288 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_IncTick+0x20>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_IncTick+0x24>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a04      	ldr	r2, [pc, #16]	@ (8001be8 <HAL_IncTick+0x24>)
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	2000000c 	.word	0x2000000c
 8001be8:	2000053c 	.word	0x2000053c

08001bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	@ (8001c00 <HAL_GetTick+0x14>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	2000053c 	.word	0x2000053c

08001c04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	609a      	str	r2, [r3, #8]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	3360      	adds	r3, #96	@ 0x60
 8001c7e:	461a      	mov	r2, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <LL_ADC_SetOffset+0x44>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ca4:	bf00      	nop
 8001ca6:	371c      	adds	r7, #28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	03fff000 	.word	0x03fff000

08001cb4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3360      	adds	r3, #96	@ 0x60
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3360      	adds	r3, #96	@ 0x60
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	431a      	orrs	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d0a:	bf00      	nop
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	615a      	str	r2, [r3, #20]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b087      	sub	sp, #28
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3330      	adds	r3, #48	@ 0x30
 8001d72:	461a      	mov	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	0a1b      	lsrs	r3, r3, #8
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	4413      	add	r3, r2
 8001d80:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	211f      	movs	r1, #31
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	401a      	ands	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	0e9b      	lsrs	r3, r3, #26
 8001d9a:	f003 011f 	and.w	r1, r3, #31
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	fa01 f303 	lsl.w	r3, r1, r3
 8001da8:	431a      	orrs	r2, r3
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001dae:	bf00      	nop
 8001db0:	371c      	adds	r7, #28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b087      	sub	sp, #28
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	3314      	adds	r3, #20
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	0e5b      	lsrs	r3, r3, #25
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	4413      	add	r3, r2
 8001dd8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	0d1b      	lsrs	r3, r3, #20
 8001de2:	f003 031f 	and.w	r3, r3, #31
 8001de6:	2107      	movs	r1, #7
 8001de8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	401a      	ands	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	0d1b      	lsrs	r3, r3, #20
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e04:	bf00      	nop
 8001e06:	371c      	adds	r7, #28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f003 0318 	and.w	r3, r3, #24
 8001e32:	4908      	ldr	r1, [pc, #32]	@ (8001e54 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e34:	40d9      	lsrs	r1, r3
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	400b      	ands	r3, r1
 8001e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e46:	bf00      	nop
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	0007ffff 	.word	0x0007ffff

08001e58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6093      	str	r3, [r2, #8]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e90:	d101      	bne.n	8001e96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001eb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001eb8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001edc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ee0:	d101      	bne.n	8001ee6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f08:	f043 0201 	orr.w	r2, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <LL_ADC_IsEnabled+0x18>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <LL_ADC_IsEnabled+0x1a>
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f52:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f56:	f043 0204 	orr.w	r2, r3, #4
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d101      	bne.n	8001f82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d101      	bne.n	8001fa8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e129      	b.n	8002226 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d109      	bne.n	8001ff4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff f979 	bl	80012d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff3f 	bl	8001e7c <LL_ADC_IsDeepPowerDownEnabled>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d004      	beq.n	800200e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff25 	bl	8001e58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ff5a 	bl	8001ecc <LL_ADC_IsInternalRegulatorEnabled>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d115      	bne.n	800204a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff3e 	bl	8001ea4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002028:	4b81      	ldr	r3, [pc, #516]	@ (8002230 <HAL_ADC_Init+0x278>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	099b      	lsrs	r3, r3, #6
 800202e:	4a81      	ldr	r2, [pc, #516]	@ (8002234 <HAL_ADC_Init+0x27c>)
 8002030:	fba2 2303 	umull	r2, r3, r2, r3
 8002034:	099b      	lsrs	r3, r3, #6
 8002036:	3301      	adds	r3, #1
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800203c:	e002      	b.n	8002044 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3b01      	subs	r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f9      	bne.n	800203e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ff3c 	bl	8001ecc <LL_ADC_IsInternalRegulatorEnabled>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10d      	bne.n	8002076 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205e:	f043 0210 	orr.w	r2, r3, #16
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206a:	f043 0201 	orr.w	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ff75 	bl	8001f6a <LL_ADC_REG_IsConversionOngoing>
 8002080:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 80c2 	bne.w	8002214 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f040 80be 	bne.w	8002214 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80020a0:	f043 0202 	orr.w	r2, r3, #2
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff35 	bl	8001f1c <LL_ADC_IsEnabled>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10b      	bne.n	80020d0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020b8:	485f      	ldr	r0, [pc, #380]	@ (8002238 <HAL_ADC_Init+0x280>)
 80020ba:	f7ff ff2f 	bl	8001f1c <LL_ADC_IsEnabled>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d105      	bne.n	80020d0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4619      	mov	r1, r3
 80020ca:	485c      	ldr	r0, [pc, #368]	@ (800223c <HAL_ADC_Init+0x284>)
 80020cc:	f7ff fd9a 	bl	8001c04 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	7e5b      	ldrb	r3, [r3, #25]
 80020d4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020da:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80020e0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80020e6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ee:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d106      	bne.n	800210c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002102:	3b01      	subs	r3, #1
 8002104:	045b      	lsls	r3, r3, #17
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002110:	2b00      	cmp	r3, #0
 8002112:	d009      	beq.n	8002128 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002118:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002120:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	4b44      	ldr	r3, [pc, #272]	@ (8002240 <HAL_ADC_Init+0x288>)
 8002130:	4013      	ands	r3, r2
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	69b9      	ldr	r1, [r7, #24]
 8002138:	430b      	orrs	r3, r1
 800213a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff25 	bl	8001f90 <LL_ADC_INJ_IsConversionOngoing>
 8002146:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d140      	bne.n	80021d0 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d13d      	bne.n	80021d0 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	7e1b      	ldrb	r3, [r3, #24]
 800215c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800215e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002166:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002176:	f023 0306 	bic.w	r3, r3, #6
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	69b9      	ldr	r1, [r7, #24]
 8002180:	430b      	orrs	r3, r1
 8002182:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800218a:	2b01      	cmp	r3, #1
 800218c:	d118      	bne.n	80021c0 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002198:	f023 0304 	bic.w	r3, r3, #4
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80021a4:	4311      	orrs	r1, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80021aa:	4311      	orrs	r1, r2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021b0:	430a      	orrs	r2, r1
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 0201 	orr.w	r2, r2, #1
 80021bc:	611a      	str	r2, [r3, #16]
 80021be:	e007      	b.n	80021d0 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0201 	bic.w	r2, r2, #1
 80021ce:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d10c      	bne.n	80021f2 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	f023 010f 	bic.w	r1, r3, #15
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	1e5a      	subs	r2, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80021f0:	e007      	b.n	8002202 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 020f 	bic.w	r2, r2, #15
 8002200:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002206:	f023 0303 	bic.w	r3, r3, #3
 800220a:	f043 0201 	orr.w	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	659a      	str	r2, [r3, #88]	@ 0x58
 8002212:	e007      	b.n	8002224 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002218:	f043 0210 	orr.w	r2, r3, #16
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002224:	7ffb      	ldrb	r3, [r7, #31]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3720      	adds	r7, #32
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000004 	.word	0x20000004
 8002234:	053e2d63 	.word	0x053e2d63
 8002238:	50040000 	.word	0x50040000
 800223c:	50040300 	.word	0x50040300
 8002240:	fff0c007 	.word	0xfff0c007

08002244 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fe8a 	bl	8001f6a <LL_ADC_REG_IsConversionOngoing>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d14f      	bne.n	80022fc <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_ADC_Start+0x26>
 8002266:	2302      	movs	r3, #2
 8002268:	e04b      	b.n	8002302 <HAL_ADC_Start+0xbe>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 fce2 	bl	8002c3c <ADC_Enable>
 8002278:	4603      	mov	r3, r0
 800227a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d137      	bne.n	80022f2 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002286:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800228a:	f023 0301 	bic.w	r3, r3, #1
 800228e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800229e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022a2:	d106      	bne.n	80022b2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a8:	f023 0206 	bic.w	r2, r3, #6
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022b0:	e002      	b.n	80022b8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	221c      	movs	r2, #28
 80022be:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d007      	beq.n	80022e6 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022da:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022de:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fe29 	bl	8001f42 <LL_ADC_REG_StartConversion>
 80022f0:	e006      	b.n	8002300 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80022fa:	e001      	b.n	8002300 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022fc:	2302      	movs	r3, #2
 80022fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002300:	7bfb      	ldrb	r3, [r7, #15]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b086      	sub	sp, #24
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	2b08      	cmp	r3, #8
 800231a:	d102      	bne.n	8002322 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800231c:	2308      	movs	r3, #8
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	e010      	b.n	8002344 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d007      	beq.n	8002340 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002334:	f043 0220 	orr.w	r2, r3, #32
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e06f      	b.n	8002420 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002340:	2304      	movs	r3, #4
 8002342:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002344:	f7ff fc52 	bl	8001bec <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800234a:	e021      	b.n	8002390 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002352:	d01d      	beq.n	8002390 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002354:	f7ff fc4a 	bl	8001bec <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d302      	bcc.n	800236a <HAL_ADC_PollForConversion+0x60>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d112      	bne.n	8002390 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10b      	bne.n	8002390 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237c:	f043 0204 	orr.w	r2, r3, #4
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e047      	b.n	8002420 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	4013      	ands	r3, r2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0d6      	beq.n	800234c <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fcc4 	bl	8001d3c <LL_ADC_REG_IsTriggerSourceSWStart>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d01c      	beq.n	80023f4 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	7e5b      	ldrb	r3, [r3, #25]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d118      	bne.n	80023f4 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d111      	bne.n	80023f4 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d105      	bne.n	80023f4 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ec:	f043 0201 	orr.w	r2, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d104      	bne.n	800240c <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2208      	movs	r2, #8
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	e008      	b.n	800241e <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d103      	bne.n	800241e <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	220c      	movs	r2, #12
 800241c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b0b6      	sub	sp, #216	@ 0xd8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002454:	2300      	movs	r3, #0
 8002456:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x22>
 8002462:	2302      	movs	r3, #2
 8002464:	e3d5      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x7ce>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fd79 	bl	8001f6a <LL_ADC_REG_IsConversionOngoing>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	f040 83ba 	bne.w	8002bf4 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b05      	cmp	r3, #5
 800248e:	d824      	bhi.n	80024da <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	3b02      	subs	r3, #2
 8002496:	2b03      	cmp	r3, #3
 8002498:	d81b      	bhi.n	80024d2 <HAL_ADC_ConfigChannel+0x8e>
 800249a:	a201      	add	r2, pc, #4	@ (adr r2, 80024a0 <HAL_ADC_ConfigChannel+0x5c>)
 800249c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a0:	080024b1 	.word	0x080024b1
 80024a4:	080024b9 	.word	0x080024b9
 80024a8:	080024c1 	.word	0x080024c1
 80024ac:	080024c9 	.word	0x080024c9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80024b0:	230c      	movs	r3, #12
 80024b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024b6:	e010      	b.n	80024da <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80024b8:	2312      	movs	r3, #18
 80024ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024be:	e00c      	b.n	80024da <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80024c0:	2318      	movs	r3, #24
 80024c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024c6:	e008      	b.n	80024da <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80024c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024d0:	e003      	b.n	80024da <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80024d2:	2306      	movs	r3, #6
 80024d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024d8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80024e8:	f7ff fc3b 	bl	8001d62 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff fd3a 	bl	8001f6a <LL_ADC_REG_IsConversionOngoing>
 80024f6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fd46 	bl	8001f90 <LL_ADC_INJ_IsConversionOngoing>
 8002504:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002508:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800250c:	2b00      	cmp	r3, #0
 800250e:	f040 81bf 	bne.w	8002890 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002512:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002516:	2b00      	cmp	r3, #0
 8002518:	f040 81ba 	bne.w	8002890 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002524:	d10f      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2200      	movs	r2, #0
 8002530:	4619      	mov	r1, r3
 8002532:	f7ff fc42 	bl	8001dba <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fbe9 	bl	8001d16 <LL_ADC_SetSamplingTimeCommonConfig>
 8002544:	e00e      	b.n	8002564 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6819      	ldr	r1, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	461a      	mov	r2, r3
 8002554:	f7ff fc31 	bl	8001dba <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2100      	movs	r1, #0
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff fbd9 	bl	8001d16 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	08db      	lsrs	r3, r3, #3
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b04      	cmp	r3, #4
 8002584:	d00a      	beq.n	800259c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6919      	ldr	r1, [r3, #16]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002596:	f7ff fb69 	bl	8001c6c <LL_ADC_SetOffset>
 800259a:	e179      	b.n	8002890 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2100      	movs	r1, #0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fb86 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10a      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x184>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2100      	movs	r1, #0
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff fb7b 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 80025be:	4603      	mov	r3, r0
 80025c0:	0e9b      	lsrs	r3, r3, #26
 80025c2:	f003 021f 	and.w	r2, r3, #31
 80025c6:	e01e      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1c2>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fb70 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80025f6:	2320      	movs	r3, #32
 80025f8:	e004      	b.n	8002604 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80025fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260e:	2b00      	cmp	r3, #0
 8002610:	d105      	bne.n	800261e <HAL_ADC_ConfigChannel+0x1da>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	0e9b      	lsrs	r3, r3, #26
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	e018      	b.n	8002650 <HAL_ADC_ConfigChannel+0x20c>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002632:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002636:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800263a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002642:	2320      	movs	r3, #32
 8002644:	e004      	b.n	8002650 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002646:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002650:	429a      	cmp	r2, r3
 8002652:	d106      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2200      	movs	r2, #0
 800265a:	2100      	movs	r1, #0
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fb3f 	bl	8001ce0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2101      	movs	r1, #1
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fb23 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 800266e:	4603      	mov	r3, r0
 8002670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10a      	bne.n	800268e <HAL_ADC_ConfigChannel+0x24a>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2101      	movs	r1, #1
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fb18 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002684:	4603      	mov	r3, r0
 8002686:	0e9b      	lsrs	r3, r3, #26
 8002688:	f003 021f 	and.w	r2, r3, #31
 800268c:	e01e      	b.n	80026cc <HAL_ADC_ConfigChannel+0x288>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2101      	movs	r1, #1
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fb0d 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 800269a:	4603      	mov	r3, r0
 800269c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80026ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80026b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80026bc:	2320      	movs	r3, #32
 80026be:	e004      	b.n	80026ca <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80026c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026c4:	fab3 f383 	clz	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d105      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x2a0>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	0e9b      	lsrs	r3, r3, #26
 80026de:	f003 031f 	and.w	r3, r3, #31
 80026e2:	e018      	b.n	8002716 <HAL_ADC_ConfigChannel+0x2d2>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026f0:	fa93 f3a3 	rbit	r3, r3
 80026f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80026f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80026fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002700:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002708:	2320      	movs	r3, #32
 800270a:	e004      	b.n	8002716 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 800270c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002710:	fab3 f383 	clz	r3, r3
 8002714:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002716:	429a      	cmp	r2, r3
 8002718:	d106      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2200      	movs	r2, #0
 8002720:	2101      	movs	r1, #1
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fadc 	bl	8001ce0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2102      	movs	r1, #2
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fac0 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002734:	4603      	mov	r3, r0
 8002736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10a      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x310>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2102      	movs	r1, #2
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fab5 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 800274a:	4603      	mov	r3, r0
 800274c:	0e9b      	lsrs	r3, r3, #26
 800274e:	f003 021f 	and.w	r2, r3, #31
 8002752:	e01e      	b.n	8002792 <HAL_ADC_ConfigChannel+0x34e>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2102      	movs	r1, #2
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff faaa 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002760:	4603      	mov	r3, r0
 8002762:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800276a:	fa93 f3a3 	rbit	r3, r3
 800276e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002772:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002776:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800277a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002782:	2320      	movs	r3, #32
 8002784:	e004      	b.n	8002790 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002786:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279a:	2b00      	cmp	r3, #0
 800279c:	d105      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x366>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	0e9b      	lsrs	r3, r3, #26
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	e014      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x390>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80027b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80027be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80027c6:	2320      	movs	r3, #32
 80027c8:	e004      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80027ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d106      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2200      	movs	r2, #0
 80027de:	2102      	movs	r1, #2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fa7d 	bl	8001ce0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2103      	movs	r1, #3
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fa61 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 80027f2:	4603      	mov	r3, r0
 80027f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10a      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x3ce>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2103      	movs	r1, #3
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fa56 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002808:	4603      	mov	r3, r0
 800280a:	0e9b      	lsrs	r3, r3, #26
 800280c:	f003 021f 	and.w	r2, r3, #31
 8002810:	e017      	b.n	8002842 <HAL_ADC_ConfigChannel+0x3fe>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2103      	movs	r1, #3
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fa4b 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 800281e:	4603      	mov	r3, r0
 8002820:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800282a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800282c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800282e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002834:	2320      	movs	r3, #32
 8002836:	e003      	b.n	8002840 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002838:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284a:	2b00      	cmp	r3, #0
 800284c:	d105      	bne.n	800285a <HAL_ADC_ConfigChannel+0x416>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	0e9b      	lsrs	r3, r3, #26
 8002854:	f003 031f 	and.w	r3, r3, #31
 8002858:	e011      	b.n	800287e <HAL_ADC_ConfigChannel+0x43a>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002862:	fa93 f3a3 	rbit	r3, r3
 8002866:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002868:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800286a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800286c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002872:	2320      	movs	r3, #32
 8002874:	e003      	b.n	800287e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002876:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002878:	fab3 f383 	clz	r3, r3
 800287c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800287e:	429a      	cmp	r2, r3
 8002880:	d106      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2200      	movs	r2, #0
 8002888:	2103      	movs	r1, #3
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fa28 	bl	8001ce0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fb41 	bl	8001f1c <LL_ADC_IsEnabled>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	f040 813f 	bne.w	8002b20 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6819      	ldr	r1, [r3, #0]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	461a      	mov	r2, r3
 80028b0:	f7ff faae 	bl	8001e10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4a8e      	ldr	r2, [pc, #568]	@ (8002af4 <HAL_ADC_ConfigChannel+0x6b0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	f040 8130 	bne.w	8002b20 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10b      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x4a4>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	0e9b      	lsrs	r3, r3, #26
 80028d6:	3301      	adds	r3, #1
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	2b09      	cmp	r3, #9
 80028de:	bf94      	ite	ls
 80028e0:	2301      	movls	r3, #1
 80028e2:	2300      	movhi	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	e019      	b.n	800291c <HAL_ADC_ConfigChannel+0x4d8>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028f0:	fa93 f3a3 	rbit	r3, r3
 80028f4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80028f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80028fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002900:	2320      	movs	r3, #32
 8002902:	e003      	b.n	800290c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002904:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002906:	fab3 f383 	clz	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	3301      	adds	r3, #1
 800290e:	f003 031f 	and.w	r3, r3, #31
 8002912:	2b09      	cmp	r3, #9
 8002914:	bf94      	ite	ls
 8002916:	2301      	movls	r3, #1
 8002918:	2300      	movhi	r3, #0
 800291a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800291c:	2b00      	cmp	r3, #0
 800291e:	d079      	beq.n	8002a14 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002928:	2b00      	cmp	r3, #0
 800292a:	d107      	bne.n	800293c <HAL_ADC_ConfigChannel+0x4f8>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	0e9b      	lsrs	r3, r3, #26
 8002932:	3301      	adds	r3, #1
 8002934:	069b      	lsls	r3, r3, #26
 8002936:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800293a:	e015      	b.n	8002968 <HAL_ADC_ConfigChannel+0x524>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002944:	fa93 f3a3 	rbit	r3, r3
 8002948:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800294a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800294c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800294e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002954:	2320      	movs	r3, #32
 8002956:	e003      	b.n	8002960 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	3301      	adds	r3, #1
 8002962:	069b      	lsls	r3, r3, #26
 8002964:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002970:	2b00      	cmp	r3, #0
 8002972:	d109      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x544>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	0e9b      	lsrs	r3, r3, #26
 800297a:	3301      	adds	r3, #1
 800297c:	f003 031f 	and.w	r3, r3, #31
 8002980:	2101      	movs	r1, #1
 8002982:	fa01 f303 	lsl.w	r3, r1, r3
 8002986:	e017      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x574>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002998:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800299a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80029a0:	2320      	movs	r3, #32
 80029a2:	e003      	b.n	80029ac <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80029a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	3301      	adds	r3, #1
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	2101      	movs	r1, #1
 80029b4:	fa01 f303 	lsl.w	r3, r1, r3
 80029b8:	ea42 0103 	orr.w	r1, r2, r3
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10a      	bne.n	80029de <HAL_ADC_ConfigChannel+0x59a>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	0e9b      	lsrs	r3, r3, #26
 80029ce:	3301      	adds	r3, #1
 80029d0:	f003 021f 	and.w	r2, r3, #31
 80029d4:	4613      	mov	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	051b      	lsls	r3, r3, #20
 80029dc:	e018      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x5cc>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80029ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80029f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80029f6:	2320      	movs	r3, #32
 80029f8:	e003      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80029fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029fc:	fab3 f383 	clz	r3, r3
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	3301      	adds	r3, #1
 8002a04:	f003 021f 	and.w	r2, r3, #31
 8002a08:	4613      	mov	r3, r2
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	4413      	add	r3, r2
 8002a0e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a10:	430b      	orrs	r3, r1
 8002a12:	e080      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d107      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x5ec>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	0e9b      	lsrs	r3, r3, #26
 8002a26:	3301      	adds	r3, #1
 8002a28:	069b      	lsls	r3, r3, #26
 8002a2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a2e:	e015      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x618>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002a48:	2320      	movs	r3, #32
 8002a4a:	e003      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4e:	fab3 f383 	clz	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	3301      	adds	r3, #1
 8002a56:	069b      	lsls	r3, r3, #26
 8002a58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d109      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x638>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	0e9b      	lsrs	r3, r3, #26
 8002a6e:	3301      	adds	r3, #1
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	2101      	movs	r1, #1
 8002a76:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7a:	e017      	b.n	8002aac <HAL_ADC_ConfigChannel+0x668>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	61bb      	str	r3, [r7, #24]
  return result;
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002a94:	2320      	movs	r3, #32
 8002a96:	e003      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	ea42 0103 	orr.w	r1, r2, r3
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10d      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x694>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	0e9b      	lsrs	r3, r3, #26
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f003 021f 	and.w	r2, r3, #31
 8002ac8:	4613      	mov	r3, r2
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	4413      	add	r3, r2
 8002ace:	3b1e      	subs	r3, #30
 8002ad0:	051b      	lsls	r3, r3, #20
 8002ad2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ad6:	e01d      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x6d0>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	60fb      	str	r3, [r7, #12]
  return result;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d103      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002af0:	2320      	movs	r3, #32
 8002af2:	e005      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x6bc>
 8002af4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	fab3 f383 	clz	r3, r3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	3301      	adds	r3, #1
 8002b02:	f003 021f 	and.w	r2, r3, #31
 8002b06:	4613      	mov	r3, r2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3b1e      	subs	r3, #30
 8002b0e:	051b      	lsls	r3, r3, #20
 8002b10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b14:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	f7ff f94d 	bl	8001dba <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4b3d      	ldr	r3, [pc, #244]	@ (8002c1c <HAL_ADC_ConfigChannel+0x7d8>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d06c      	beq.n	8002c06 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b2c:	483c      	ldr	r0, [pc, #240]	@ (8002c20 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b2e:	f7ff f88f 	bl	8001c50 <LL_ADC_GetCommonPathInternalCh>
 8002b32:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a3a      	ldr	r2, [pc, #232]	@ (8002c24 <HAL_ADC_ConfigChannel+0x7e0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d127      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d121      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a35      	ldr	r2, [pc, #212]	@ (8002c28 <HAL_ADC_ConfigChannel+0x7e4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d157      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b5e:	4619      	mov	r1, r3
 8002b60:	482f      	ldr	r0, [pc, #188]	@ (8002c20 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b62:	f7ff f862 	bl	8001c2a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b66:	4b31      	ldr	r3, [pc, #196]	@ (8002c2c <HAL_ADC_ConfigChannel+0x7e8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	099b      	lsrs	r3, r3, #6
 8002b6c:	4a30      	ldr	r2, [pc, #192]	@ (8002c30 <HAL_ADC_ConfigChannel+0x7ec>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	099b      	lsrs	r3, r3, #6
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	4613      	mov	r3, r2
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b80:	e002      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	3b01      	subs	r3, #1
 8002b86:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f9      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b8e:	e03a      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a27      	ldr	r2, [pc, #156]	@ (8002c34 <HAL_ADC_ConfigChannel+0x7f0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d113      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10d      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a1f      	ldr	r2, [pc, #124]	@ (8002c28 <HAL_ADC_ConfigChannel+0x7e4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d12a      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4819      	ldr	r0, [pc, #100]	@ (8002c20 <HAL_ADC_ConfigChannel+0x7dc>)
 8002bbc:	f7ff f835 	bl	8001c2a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bc0:	e021      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c38 <HAL_ADC_ConfigChannel+0x7f4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d11c      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d116      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a12      	ldr	r2, [pc, #72]	@ (8002c28 <HAL_ADC_ConfigChannel+0x7e4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d111      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002be2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002be6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bea:	4619      	mov	r1, r3
 8002bec:	480c      	ldr	r0, [pc, #48]	@ (8002c20 <HAL_ADC_ConfigChannel+0x7dc>)
 8002bee:	f7ff f81c 	bl	8001c2a <LL_ADC_SetCommonPathInternalCh>
 8002bf2:	e008      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf8:	f043 0220 	orr.w	r2, r3, #32
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002c0e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	37d8      	adds	r7, #216	@ 0xd8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	80080000 	.word	0x80080000
 8002c20:	50040300 	.word	0x50040300
 8002c24:	c7520000 	.word	0xc7520000
 8002c28:	50040000 	.word	0x50040000
 8002c2c:	20000004 	.word	0x20000004
 8002c30:	053e2d63 	.word	0x053e2d63
 8002c34:	cb840000 	.word	0xcb840000
 8002c38:	80000001 	.word	0x80000001

08002c3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff f965 	bl	8001f1c <LL_ADC_IsEnabled>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d169      	bne.n	8002d2c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	4b36      	ldr	r3, [pc, #216]	@ (8002d38 <ADC_Enable+0xfc>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00d      	beq.n	8002c82 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c6a:	f043 0210 	orr.w	r2, r3, #16
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c76:	f043 0201 	orr.w	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e055      	b.n	8002d2e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff f934 	bl	8001ef4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c8c:	482b      	ldr	r0, [pc, #172]	@ (8002d3c <ADC_Enable+0x100>)
 8002c8e:	f7fe ffdf 	bl	8001c50 <LL_ADC_GetCommonPathInternalCh>
 8002c92:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d013      	beq.n	8002cc4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c9c:	4b28      	ldr	r3, [pc, #160]	@ (8002d40 <ADC_Enable+0x104>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	099b      	lsrs	r3, r3, #6
 8002ca2:	4a28      	ldr	r2, [pc, #160]	@ (8002d44 <ADC_Enable+0x108>)
 8002ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca8:	099b      	lsrs	r3, r3, #6
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	4613      	mov	r3, r2
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cb6:	e002      	b.n	8002cbe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1f9      	bne.n	8002cb8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002cc4:	f7fe ff92 	bl	8001bec <HAL_GetTick>
 8002cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cca:	e028      	b.n	8002d1e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff f923 	bl	8001f1c <LL_ADC_IsEnabled>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d104      	bne.n	8002ce6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff f907 	bl	8001ef4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ce6:	f7fe ff81 	bl	8001bec <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d914      	bls.n	8002d1e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d00d      	beq.n	8002d1e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d06:	f043 0210 	orr.w	r2, r3, #16
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d12:	f043 0201 	orr.w	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e007      	b.n	8002d2e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d1cf      	bne.n	8002ccc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	8000003f 	.word	0x8000003f
 8002d3c:	50040300 	.word	0x50040300
 8002d40:	20000004 	.word	0x20000004
 8002d44:	053e2d63 	.word	0x053e2d63

08002d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d58:	4b0c      	ldr	r3, [pc, #48]	@ (8002d8c <__NVIC_SetPriorityGrouping+0x44>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d64:	4013      	ands	r3, r2
 8002d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d7a:	4a04      	ldr	r2, [pc, #16]	@ (8002d8c <__NVIC_SetPriorityGrouping+0x44>)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	60d3      	str	r3, [r2, #12]
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d94:	4b04      	ldr	r3, [pc, #16]	@ (8002da8 <__NVIC_GetPriorityGrouping+0x18>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	0a1b      	lsrs	r3, r3, #8
 8002d9a:	f003 0307 	and.w	r3, r3, #7
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	db0b      	blt.n	8002dd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	f003 021f 	and.w	r2, r3, #31
 8002dc4:	4907      	ldr	r1, [pc, #28]	@ (8002de4 <__NVIC_EnableIRQ+0x38>)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	095b      	lsrs	r3, r3, #5
 8002dcc:	2001      	movs	r0, #1
 8002dce:	fa00 f202 	lsl.w	r2, r0, r2
 8002dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000e100 	.word	0xe000e100

08002de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	6039      	str	r1, [r7, #0]
 8002df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	db0a      	blt.n	8002e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	490c      	ldr	r1, [pc, #48]	@ (8002e34 <__NVIC_SetPriority+0x4c>)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	0112      	lsls	r2, r2, #4
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e10:	e00a      	b.n	8002e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	4908      	ldr	r1, [pc, #32]	@ (8002e38 <__NVIC_SetPriority+0x50>)
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	3b04      	subs	r3, #4
 8002e20:	0112      	lsls	r2, r2, #4
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	440b      	add	r3, r1
 8002e26:	761a      	strb	r2, [r3, #24]
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	e000e100 	.word	0xe000e100
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b089      	sub	sp, #36	@ 0x24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f1c3 0307 	rsb	r3, r3, #7
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	bf28      	it	cs
 8002e5a:	2304      	movcs	r3, #4
 8002e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	3304      	adds	r3, #4
 8002e62:	2b06      	cmp	r3, #6
 8002e64:	d902      	bls.n	8002e6c <NVIC_EncodePriority+0x30>
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3b03      	subs	r3, #3
 8002e6a:	e000      	b.n	8002e6e <NVIC_EncodePriority+0x32>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e70:	f04f 32ff 	mov.w	r2, #4294967295
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43da      	mvns	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	401a      	ands	r2, r3
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e84:	f04f 31ff 	mov.w	r1, #4294967295
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8e:	43d9      	mvns	r1, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e94:	4313      	orrs	r3, r2
         );
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3724      	adds	r7, #36	@ 0x24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff ff4c 	bl	8002d48 <__NVIC_SetPriorityGrouping>
}
 8002eb0:	bf00      	nop
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002eca:	f7ff ff61 	bl	8002d90 <__NVIC_GetPriorityGrouping>
 8002ece:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	6978      	ldr	r0, [r7, #20]
 8002ed6:	f7ff ffb1 	bl	8002e3c <NVIC_EncodePriority>
 8002eda:	4602      	mov	r2, r0
 8002edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff ff80 	bl	8002de8 <__NVIC_SetPriority>
}
 8002ee8:	bf00      	nop
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff ff54 	bl	8002dac <__NVIC_EnableIRQ>
}
 8002f04:	bf00      	nop
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e0ac      	b.n	8003078 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 f8b2 	bl	800308c <DFSDM_GetChannelFromInstance>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	4a55      	ldr	r2, [pc, #340]	@ (8003080 <HAL_DFSDM_ChannelInit+0x174>)
 8002f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e09f      	b.n	8003078 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7fe fa0d 	bl	8001358 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002f3e:	4b51      	ldr	r3, [pc, #324]	@ (8003084 <HAL_DFSDM_ChannelInit+0x178>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	3301      	adds	r3, #1
 8002f44:	4a4f      	ldr	r2, [pc, #316]	@ (8003084 <HAL_DFSDM_ChannelInit+0x178>)
 8002f46:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002f48:	4b4e      	ldr	r3, [pc, #312]	@ (8003084 <HAL_DFSDM_ChannelInit+0x178>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d125      	bne.n	8002f9c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002f50:	4b4d      	ldr	r3, [pc, #308]	@ (8003088 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a4c      	ldr	r2, [pc, #304]	@ (8003088 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f56:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f5a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002f5c:	4b4a      	ldr	r3, [pc, #296]	@ (8003088 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	4948      	ldr	r1, [pc, #288]	@ (8003088 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002f6a:	4b47      	ldr	r3, [pc, #284]	@ (8003088 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a46      	ldr	r2, [pc, #280]	@ (8003088 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f70:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8002f74:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	791b      	ldrb	r3, [r3, #4]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d108      	bne.n	8002f90 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002f7e:	4b42      	ldr	r3, [pc, #264]	@ (8003088 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	041b      	lsls	r3, r3, #16
 8002f8a:	493f      	ldr	r1, [pc, #252]	@ (8003088 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002f90:	4b3d      	ldr	r3, [pc, #244]	@ (8003088 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a3c      	ldr	r2, [pc, #240]	@ (8003088 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f9a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8002faa:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6819      	ldr	r1, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002fba:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002fc0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 020f 	bic.w	r2, r2, #15
 8002fd8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6819      	ldr	r1, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8003000:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6899      	ldr	r1, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003010:	3b01      	subs	r3, #1
 8003012:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f002 0207 	and.w	r2, r2, #7
 800302c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6859      	ldr	r1, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003038:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003040:	431a      	orrs	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003058:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f000 f810 	bl	800308c <DFSDM_GetChannelFromInstance>
 800306c:	4602      	mov	r2, r0
 800306e:	4904      	ldr	r1, [pc, #16]	@ (8003080 <HAL_DFSDM_ChannelInit+0x174>)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20000544 	.word	0x20000544
 8003084:	20000540 	.word	0x20000540
 8003088:	40016000 	.word	0x40016000

0800308c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a1c      	ldr	r2, [pc, #112]	@ (8003108 <DFSDM_GetChannelFromInstance+0x7c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d102      	bne.n	80030a2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e02b      	b.n	80030fa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a19      	ldr	r2, [pc, #100]	@ (800310c <DFSDM_GetChannelFromInstance+0x80>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d102      	bne.n	80030b0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80030aa:	2301      	movs	r3, #1
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	e024      	b.n	80030fa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a17      	ldr	r2, [pc, #92]	@ (8003110 <DFSDM_GetChannelFromInstance+0x84>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d102      	bne.n	80030be <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80030b8:	2302      	movs	r3, #2
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	e01d      	b.n	80030fa <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a14      	ldr	r2, [pc, #80]	@ (8003114 <DFSDM_GetChannelFromInstance+0x88>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d102      	bne.n	80030cc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80030c6:	2304      	movs	r3, #4
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	e016      	b.n	80030fa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a12      	ldr	r2, [pc, #72]	@ (8003118 <DFSDM_GetChannelFromInstance+0x8c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d102      	bne.n	80030da <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80030d4:	2305      	movs	r3, #5
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	e00f      	b.n	80030fa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a0f      	ldr	r2, [pc, #60]	@ (800311c <DFSDM_GetChannelFromInstance+0x90>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d102      	bne.n	80030e8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80030e2:	2306      	movs	r3, #6
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	e008      	b.n	80030fa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a0d      	ldr	r2, [pc, #52]	@ (8003120 <DFSDM_GetChannelFromInstance+0x94>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d102      	bne.n	80030f6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80030f0:	2307      	movs	r3, #7
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	e001      	b.n	80030fa <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80030f6:	2303      	movs	r3, #3
 80030f8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80030fa:	68fb      	ldr	r3, [r7, #12]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	40016000 	.word	0x40016000
 800310c:	40016020 	.word	0x40016020
 8003110:	40016040 	.word	0x40016040
 8003114:	40016080 	.word	0x40016080
 8003118:	400160a0 	.word	0x400160a0
 800311c:	400160c0 	.word	0x400160c0
 8003120:	400160e0 	.word	0x400160e0

08003124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003132:	e166      	b.n	8003402 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	2101      	movs	r1, #1
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	fa01 f303 	lsl.w	r3, r1, r3
 8003140:	4013      	ands	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 8158 	beq.w	80033fc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	2b01      	cmp	r3, #1
 8003156:	d005      	beq.n	8003164 <HAL_GPIO_Init+0x40>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d130      	bne.n	80031c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	2203      	movs	r2, #3
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4013      	ands	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800319a:	2201      	movs	r2, #1
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	091b      	lsrs	r3, r3, #4
 80031b0:	f003 0201 	and.w	r2, r3, #1
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d017      	beq.n	8003202 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	2203      	movs	r2, #3
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4013      	ands	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d123      	bne.n	8003256 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	08da      	lsrs	r2, r3, #3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3208      	adds	r2, #8
 8003216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800321a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	220f      	movs	r2, #15
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	08da      	lsrs	r2, r3, #3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3208      	adds	r2, #8
 8003250:	6939      	ldr	r1, [r7, #16]
 8003252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	2203      	movs	r2, #3
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4013      	ands	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 0203 	and.w	r2, r3, #3
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80b2 	beq.w	80033fc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003298:	4b61      	ldr	r3, [pc, #388]	@ (8003420 <HAL_GPIO_Init+0x2fc>)
 800329a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800329c:	4a60      	ldr	r2, [pc, #384]	@ (8003420 <HAL_GPIO_Init+0x2fc>)
 800329e:	f043 0301 	orr.w	r3, r3, #1
 80032a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80032a4:	4b5e      	ldr	r3, [pc, #376]	@ (8003420 <HAL_GPIO_Init+0x2fc>)
 80032a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032b0:	4a5c      	ldr	r2, [pc, #368]	@ (8003424 <HAL_GPIO_Init+0x300>)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	089b      	lsrs	r3, r3, #2
 80032b6:	3302      	adds	r3, #2
 80032b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	220f      	movs	r2, #15
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80032da:	d02b      	beq.n	8003334 <HAL_GPIO_Init+0x210>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a52      	ldr	r2, [pc, #328]	@ (8003428 <HAL_GPIO_Init+0x304>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d025      	beq.n	8003330 <HAL_GPIO_Init+0x20c>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a51      	ldr	r2, [pc, #324]	@ (800342c <HAL_GPIO_Init+0x308>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d01f      	beq.n	800332c <HAL_GPIO_Init+0x208>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a50      	ldr	r2, [pc, #320]	@ (8003430 <HAL_GPIO_Init+0x30c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d019      	beq.n	8003328 <HAL_GPIO_Init+0x204>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a4f      	ldr	r2, [pc, #316]	@ (8003434 <HAL_GPIO_Init+0x310>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d013      	beq.n	8003324 <HAL_GPIO_Init+0x200>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a4e      	ldr	r2, [pc, #312]	@ (8003438 <HAL_GPIO_Init+0x314>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d00d      	beq.n	8003320 <HAL_GPIO_Init+0x1fc>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a4d      	ldr	r2, [pc, #308]	@ (800343c <HAL_GPIO_Init+0x318>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d007      	beq.n	800331c <HAL_GPIO_Init+0x1f8>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a4c      	ldr	r2, [pc, #304]	@ (8003440 <HAL_GPIO_Init+0x31c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d101      	bne.n	8003318 <HAL_GPIO_Init+0x1f4>
 8003314:	2307      	movs	r3, #7
 8003316:	e00e      	b.n	8003336 <HAL_GPIO_Init+0x212>
 8003318:	2308      	movs	r3, #8
 800331a:	e00c      	b.n	8003336 <HAL_GPIO_Init+0x212>
 800331c:	2306      	movs	r3, #6
 800331e:	e00a      	b.n	8003336 <HAL_GPIO_Init+0x212>
 8003320:	2305      	movs	r3, #5
 8003322:	e008      	b.n	8003336 <HAL_GPIO_Init+0x212>
 8003324:	2304      	movs	r3, #4
 8003326:	e006      	b.n	8003336 <HAL_GPIO_Init+0x212>
 8003328:	2303      	movs	r3, #3
 800332a:	e004      	b.n	8003336 <HAL_GPIO_Init+0x212>
 800332c:	2302      	movs	r3, #2
 800332e:	e002      	b.n	8003336 <HAL_GPIO_Init+0x212>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <HAL_GPIO_Init+0x212>
 8003334:	2300      	movs	r3, #0
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	f002 0203 	and.w	r2, r2, #3
 800333c:	0092      	lsls	r2, r2, #2
 800333e:	4093      	lsls	r3, r2
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003346:	4937      	ldr	r1, [pc, #220]	@ (8003424 <HAL_GPIO_Init+0x300>)
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	3302      	adds	r3, #2
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003354:	4b3b      	ldr	r3, [pc, #236]	@ (8003444 <HAL_GPIO_Init+0x320>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	43db      	mvns	r3, r3
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4013      	ands	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003378:	4a32      	ldr	r2, [pc, #200]	@ (8003444 <HAL_GPIO_Init+0x320>)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800337e:	4b31      	ldr	r3, [pc, #196]	@ (8003444 <HAL_GPIO_Init+0x320>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	43db      	mvns	r3, r3
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4013      	ands	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033a2:	4a28      	ldr	r2, [pc, #160]	@ (8003444 <HAL_GPIO_Init+0x320>)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80033a8:	4b26      	ldr	r3, [pc, #152]	@ (8003444 <HAL_GPIO_Init+0x320>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	43db      	mvns	r3, r3
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003444 <HAL_GPIO_Init+0x320>)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003444 <HAL_GPIO_Init+0x320>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	43db      	mvns	r3, r3
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4013      	ands	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033f6:	4a13      	ldr	r2, [pc, #76]	@ (8003444 <HAL_GPIO_Init+0x320>)
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	3301      	adds	r3, #1
 8003400:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	fa22 f303 	lsr.w	r3, r2, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	f47f ae91 	bne.w	8003134 <HAL_GPIO_Init+0x10>
  }
}
 8003412:	bf00      	nop
 8003414:	bf00      	nop
 8003416:	371c      	adds	r7, #28
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	40021000 	.word	0x40021000
 8003424:	40010000 	.word	0x40010000
 8003428:	48000400 	.word	0x48000400
 800342c:	48000800 	.word	0x48000800
 8003430:	48000c00 	.word	0x48000c00
 8003434:	48001000 	.word	0x48001000
 8003438:	48001400 	.word	0x48001400
 800343c:	48001800 	.word	0x48001800
 8003440:	48001c00 	.word	0x48001c00
 8003444:	40010400 	.word	0x40010400

08003448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	807b      	strh	r3, [r7, #2]
 8003454:	4613      	mov	r3, r2
 8003456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003458:	787b      	ldrb	r3, [r7, #1]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800345e:	887a      	ldrh	r2, [r7, #2]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003464:	e002      	b.n	800346c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003466:	887a      	ldrh	r2, [r7, #2]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800348a:	887a      	ldrh	r2, [r7, #2]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4013      	ands	r3, r2
 8003490:	041a      	lsls	r2, r3, #16
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	43d9      	mvns	r1, r3
 8003496:	887b      	ldrh	r3, [r7, #2]
 8003498:	400b      	ands	r3, r1
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	619a      	str	r2, [r3, #24]
}
 80034a0:	bf00      	nop
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	4603      	mov	r3, r0
 80034b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034b6:	4b08      	ldr	r3, [pc, #32]	@ (80034d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	4013      	ands	r3, r2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d006      	beq.n	80034d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034c2:	4a05      	ldr	r2, [pc, #20]	@ (80034d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034c8:	88fb      	ldrh	r3, [r7, #6]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 f806 	bl	80034dc <HAL_GPIO_EXTI_Callback>
  }
}
 80034d0:	bf00      	nop
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40010400 	.word	0x40010400

080034dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e08d      	b.n	8003620 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d106      	bne.n	800351e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7fd ff81 	bl	8001420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2224      	movs	r2, #36	@ 0x24
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0201 	bic.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003542:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003552:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d107      	bne.n	800356c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003568:	609a      	str	r2, [r3, #8]
 800356a:	e006      	b.n	800357a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003578:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d108      	bne.n	8003594 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	e007      	b.n	80035a4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035a2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6812      	ldr	r2, [r2, #0]
 80035ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035b6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69d9      	ldr	r1, [r3, #28]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1a      	ldr	r2, [r3, #32]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0201 	orr.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b20      	cmp	r3, #32
 800363c:	d138      	bne.n	80036b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003648:	2302      	movs	r3, #2
 800364a:	e032      	b.n	80036b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2224      	movs	r2, #36	@ 0x24
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0201 	bic.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800367a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6819      	ldr	r1, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	e000      	b.n	80036b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036b0:	2302      	movs	r3, #2
  }
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036be:	b480      	push	{r7}
 80036c0:	b085      	sub	sp, #20
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	d139      	bne.n	8003748 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036de:	2302      	movs	r3, #2
 80036e0:	e033      	b.n	800374a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2224      	movs	r2, #36	@ 0x24
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0201 	bic.w	r2, r2, #1
 8003700:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003710:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	021b      	lsls	r3, r3, #8
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4313      	orrs	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
  }
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af02      	add	r7, sp, #8
 800375e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003764:	f7fe fa42 	bl	8001bec <HAL_GetTick>
 8003768:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d102      	bne.n	8003776 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
 8003774:	e092      	b.n	800389c <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003780:	2b00      	cmp	r3, #0
 8003782:	f040 808b 	bne.w	800389c <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fd feec 	bl	8001564 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800378c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f88b 	bl	80038ac <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	4b42      	ldr	r3, [pc, #264]	@ (80038a8 <HAL_OSPI_Init+0x150>)
 800379e:	4013      	ands	r3, r2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	68d1      	ldr	r1, [r2, #12]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6912      	ldr	r2, [r2, #16]
 80037a8:	3a01      	subs	r2, #1
 80037aa:	0412      	lsls	r2, r2, #16
 80037ac:	4311      	orrs	r1, r2
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6952      	ldr	r2, [r2, #20]
 80037b2:	3a01      	subs	r2, #1
 80037b4:	0212      	lsls	r2, r2, #8
 80037b6:	4311      	orrs	r1, r2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80037bc:	4311      	orrs	r1, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	69d2      	ldr	r2, [r2, #28]
 80037c2:	4311      	orrs	r1, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	430b      	orrs	r3, r1
 80037ca:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	0412      	lsls	r2, r2, #16
 80037d6:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	021a      	lsls	r2, r3, #8
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2200      	movs	r2, #0
 80037fc:	2120      	movs	r1, #32
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fb98 	bl	8003f34 <OSPI_WaitFlagStateUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d146      	bne.n	800389c <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	1e5a      	subs	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003844:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d107      	bne.n	8003884 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0202 	orr.w	r2, r2, #2
 8003882:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800388c:	d103      	bne.n	8003896 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	645a      	str	r2, [r3, #68]	@ 0x44
 8003894:	e002      	b.n	800389c <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2202      	movs	r2, #2
 800389a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
  }

  /* Return function status */
  return status;
 800389c:	7bfb      	ldrb	r3, [r7, #15]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	f8e0f8f4 	.word	0xf8e0f8f4

080038ac <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b092      	sub	sp, #72	@ 0x48
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a08      	ldr	r2, [pc, #32]	@ (800390c <HAL_OSPIM_Config+0x40>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d105      	bne.n	80038fa <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 1U;
 80038f2:	2301      	movs	r3, #1
 80038f4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80038f8:	e004      	b.n	8003904 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80038fa:	2301      	movs	r3, #1
 80038fc:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003904:	2300      	movs	r3, #0
 8003906:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800390a:	e01f      	b.n	800394c <HAL_OSPIM_Config+0x80>
 800390c:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8003910:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003914:	3301      	adds	r3, #1
 8003916:	b2d8      	uxtb	r0, r3
 8003918:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800391c:	f107 0114 	add.w	r1, r7, #20
 8003920:	4613      	mov	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	4619      	mov	r1, r3
 800392c:	f000 fb3a 	bl	8003fa4 <OSPIM_GetConfig>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2208      	movs	r2, #8
 8003940:	649a      	str	r2, [r3, #72]	@ 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003942:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003946:	3301      	adds	r3, #1
 8003948:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800394c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003950:	2b01      	cmp	r3, #1
 8003952:	d9dd      	bls.n	8003910 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8003954:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003958:	2b00      	cmp	r3, #0
 800395a:	f040 82de 	bne.w	8003f1a <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800395e:	4bc6      	ldr	r3, [pc, #792]	@ (8003c78 <HAL_OSPIM_Config+0x3ac>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00b      	beq.n	8003982 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800396a:	4bc3      	ldr	r3, [pc, #780]	@ (8003c78 <HAL_OSPIM_Config+0x3ac>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4ac2      	ldr	r2, [pc, #776]	@ (8003c78 <HAL_OSPIM_Config+0x3ac>)
 8003970:	f023 0301 	bic.w	r3, r3, #1
 8003974:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003976:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003982:	4bbe      	ldr	r3, [pc, #760]	@ (8003c7c <HAL_OSPIM_Config+0x3b0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00b      	beq.n	80039a6 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800398e:	4bbb      	ldr	r3, [pc, #748]	@ (8003c7c <HAL_OSPIM_Config+0x3b0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4aba      	ldr	r2, [pc, #744]	@ (8003c7c <HAL_OSPIM_Config+0x3b0>)
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800399a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800399e:	f043 0302 	orr.w	r3, r3, #2
 80039a2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80039a6:	49b6      	ldr	r1, [pc, #728]	@ (8003c80 <HAL_OSPIM_Config+0x3b4>)
 80039a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	3348      	adds	r3, #72	@ 0x48
 80039b4:	443b      	add	r3, r7
 80039b6:	3b2c      	subs	r3, #44	@ 0x2c
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	6859      	ldr	r1, [r3, #4]
 80039c2:	48af      	ldr	r0, [pc, #700]	@ (8003c80 <HAL_OSPIM_Config+0x3b4>)
 80039c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	3348      	adds	r3, #72	@ 0x48
 80039d0:	443b      	add	r3, r7
 80039d2:	3b2c      	subs	r3, #44	@ 0x2c
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4403      	add	r3, r0
 80039e0:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80039e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	3348      	adds	r3, #72	@ 0x48
 80039ee:	443b      	add	r3, r7
 80039f0:	3b34      	subs	r3, #52	@ 0x34
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80a1 	beq.w	8003b3c <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80039fa:	49a1      	ldr	r1, [pc, #644]	@ (8003c80 <HAL_OSPIM_Config+0x3b4>)
 80039fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	3348      	adds	r3, #72	@ 0x48
 8003a08:	443b      	add	r3, r7
 8003a0a:	3b34      	subs	r3, #52	@ 0x34
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	6859      	ldr	r1, [r3, #4]
 8003a16:	489a      	ldr	r0, [pc, #616]	@ (8003c80 <HAL_OSPIM_Config+0x3b4>)
 8003a18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	3348      	adds	r3, #72	@ 0x48
 8003a24:	443b      	add	r3, r7
 8003a26:	3b34      	subs	r3, #52	@ 0x34
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	f021 0201 	bic.w	r2, r1, #1
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4403      	add	r3, r0
 8003a34:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003a36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	3348      	adds	r3, #72	@ 0x48
 8003a42:	443b      	add	r3, r7
 8003a44:	3b30      	subs	r3, #48	@ 0x30
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d01d      	beq.n	8003a88 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003a4c:	498c      	ldr	r1, [pc, #560]	@ (8003c80 <HAL_OSPIM_Config+0x3b4>)
 8003a4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	3348      	adds	r3, #72	@ 0x48
 8003a5a:	443b      	add	r3, r7
 8003a5c:	3b30      	subs	r3, #48	@ 0x30
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	6859      	ldr	r1, [r3, #4]
 8003a68:	4885      	ldr	r0, [pc, #532]	@ (8003c80 <HAL_OSPIM_Config+0x3b4>)
 8003a6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	3348      	adds	r3, #72	@ 0x48
 8003a76:	443b      	add	r3, r7
 8003a78:	3b30      	subs	r3, #48	@ 0x30
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	f021 0210 	bic.w	r2, r1, #16
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4403      	add	r3, r0
 8003a86:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003a88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	3348      	adds	r3, #72	@ 0x48
 8003a94:	443b      	add	r3, r7
 8003a96:	3b28      	subs	r3, #40	@ 0x28
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d021      	beq.n	8003ae2 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003a9e:	4978      	ldr	r1, [pc, #480]	@ (8003c80 <HAL_OSPIM_Config+0x3b4>)
 8003aa0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	3348      	adds	r3, #72	@ 0x48
 8003aac:	443b      	add	r3, r7
 8003aae:	3b28      	subs	r3, #40	@ 0x28
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	6859      	ldr	r1, [r3, #4]
 8003abe:	4870      	ldr	r0, [pc, #448]	@ (8003c80 <HAL_OSPIM_Config+0x3b4>)
 8003ac0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	3348      	adds	r3, #72	@ 0x48
 8003acc:	443b      	add	r3, r7
 8003ace:	3b28      	subs	r3, #40	@ 0x28
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4403      	add	r3, r0
 8003ae0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003ae2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	3348      	adds	r3, #72	@ 0x48
 8003aee:	443b      	add	r3, r7
 8003af0:	3b24      	subs	r3, #36	@ 0x24
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d021      	beq.n	8003b3c <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003af8:	4961      	ldr	r1, [pc, #388]	@ (8003c80 <HAL_OSPIM_Config+0x3b4>)
 8003afa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	3348      	adds	r3, #72	@ 0x48
 8003b06:	443b      	add	r3, r7
 8003b08:	3b24      	subs	r3, #36	@ 0x24
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	6859      	ldr	r1, [r3, #4]
 8003b18:	4859      	ldr	r0, [pc, #356]	@ (8003c80 <HAL_OSPIM_Config+0x3b4>)
 8003b1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	3348      	adds	r3, #72	@ 0x48
 8003b26:	443b      	add	r3, r7
 8003b28:	3b24      	subs	r3, #36	@ 0x24
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4403      	add	r3, r0
 8003b3a:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	6819      	ldr	r1, [r3, #0]
 8003b40:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	3348      	adds	r3, #72	@ 0x48
 8003b4e:	443b      	add	r3, r7
 8003b50:	3b34      	subs	r3, #52	@ 0x34
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4299      	cmp	r1, r3
 8003b56:	d038      	beq.n	8003bca <HAL_OSPIM_Config+0x2fe>
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	6859      	ldr	r1, [r3, #4]
 8003b5c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	3348      	adds	r3, #72	@ 0x48
 8003b6a:	443b      	add	r3, r7
 8003b6c:	3b30      	subs	r3, #48	@ 0x30
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4299      	cmp	r1, r3
 8003b72:	d02a      	beq.n	8003bca <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	6899      	ldr	r1, [r3, #8]
 8003b78:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	3348      	adds	r3, #72	@ 0x48
 8003b86:	443b      	add	r3, r7
 8003b88:	3b2c      	subs	r3, #44	@ 0x2c
 8003b8a:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003b8c:	4299      	cmp	r1, r3
 8003b8e:	d01c      	beq.n	8003bca <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	68d9      	ldr	r1, [r3, #12]
 8003b94:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003b98:	4613      	mov	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	3348      	adds	r3, #72	@ 0x48
 8003ba2:	443b      	add	r3, r7
 8003ba4:	3b28      	subs	r3, #40	@ 0x28
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4299      	cmp	r1, r3
 8003baa:	d00e      	beq.n	8003bca <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	6919      	ldr	r1, [r3, #16]
 8003bb0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	3348      	adds	r3, #72	@ 0x48
 8003bbe:	443b      	add	r3, r7
 8003bc0:	3b24      	subs	r3, #36	@ 0x24
 8003bc2:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003bc4:	4299      	cmp	r1, r3
 8003bc6:	f040 80d3 	bne.w	8003d70 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003bca:	492d      	ldr	r1, [pc, #180]	@ (8003c80 <HAL_OSPIM_Config+0x3b4>)
 8003bcc:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	3348      	adds	r3, #72	@ 0x48
 8003bda:	443b      	add	r3, r7
 8003bdc:	3b34      	subs	r3, #52	@ 0x34
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3b01      	subs	r3, #1
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	6859      	ldr	r1, [r3, #4]
 8003be8:	4825      	ldr	r0, [pc, #148]	@ (8003c80 <HAL_OSPIM_Config+0x3b4>)
 8003bea:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003bee:	4613      	mov	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	3348      	adds	r3, #72	@ 0x48
 8003bf8:	443b      	add	r3, r7
 8003bfa:	3b34      	subs	r3, #52	@ 0x34
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	f021 0201 	bic.w	r2, r1, #1
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4403      	add	r3, r0
 8003c08:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003c0a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	3348      	adds	r3, #72	@ 0x48
 8003c18:	443b      	add	r3, r7
 8003c1a:	3b30      	subs	r3, #48	@ 0x30
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d01f      	beq.n	8003c62 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003c22:	4917      	ldr	r1, [pc, #92]	@ (8003c80 <HAL_OSPIM_Config+0x3b4>)
 8003c24:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	3348      	adds	r3, #72	@ 0x48
 8003c32:	443b      	add	r3, r7
 8003c34:	3b30      	subs	r3, #48	@ 0x30
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	6859      	ldr	r1, [r3, #4]
 8003c40:	480f      	ldr	r0, [pc, #60]	@ (8003c80 <HAL_OSPIM_Config+0x3b4>)
 8003c42:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	3348      	adds	r3, #72	@ 0x48
 8003c50:	443b      	add	r3, r7
 8003c52:	3b30      	subs	r3, #48	@ 0x30
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	f021 0210 	bic.w	r2, r1, #16
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4403      	add	r3, r0
 8003c60:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003c62:	4907      	ldr	r1, [pc, #28]	@ (8003c80 <HAL_OSPIM_Config+0x3b4>)
 8003c64:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	3348      	adds	r3, #72	@ 0x48
 8003c72:	443b      	add	r3, r7
 8003c74:	3b2c      	subs	r3, #44	@ 0x2c
 8003c76:	e005      	b.n	8003c84 <HAL_OSPIM_Config+0x3b8>
 8003c78:	a0001000 	.word	0xa0001000
 8003c7c:	a0001400 	.word	0xa0001400
 8003c80:	50061c00 	.word	0x50061c00
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	6859      	ldr	r1, [r3, #4]
 8003c8e:	48a6      	ldr	r0, [pc, #664]	@ (8003f28 <HAL_OSPIM_Config+0x65c>)
 8003c90:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	3348      	adds	r3, #72	@ 0x48
 8003c9e:	443b      	add	r3, r7
 8003ca0:	3b2c      	subs	r3, #44	@ 0x2c
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4403      	add	r3, r0
 8003cae:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003cb0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	3348      	adds	r3, #72	@ 0x48
 8003cbe:	443b      	add	r3, r7
 8003cc0:	3b28      	subs	r3, #40	@ 0x28
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d023      	beq.n	8003d10 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003cc8:	4997      	ldr	r1, [pc, #604]	@ (8003f28 <HAL_OSPIM_Config+0x65c>)
 8003cca:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	3348      	adds	r3, #72	@ 0x48
 8003cd8:	443b      	add	r3, r7
 8003cda:	3b28      	subs	r3, #40	@ 0x28
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	6859      	ldr	r1, [r3, #4]
 8003cea:	488f      	ldr	r0, [pc, #572]	@ (8003f28 <HAL_OSPIM_Config+0x65c>)
 8003cec:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	3348      	adds	r3, #72	@ 0x48
 8003cfa:	443b      	add	r3, r7
 8003cfc:	3b28      	subs	r3, #40	@ 0x28
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3b01      	subs	r3, #1
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4403      	add	r3, r0
 8003d0e:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003d10:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003d14:	4613      	mov	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	3348      	adds	r3, #72	@ 0x48
 8003d1e:	443b      	add	r3, r7
 8003d20:	3b24      	subs	r3, #36	@ 0x24
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d023      	beq.n	8003d70 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003d28:	497f      	ldr	r1, [pc, #508]	@ (8003f28 <HAL_OSPIM_Config+0x65c>)
 8003d2a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	3348      	adds	r3, #72	@ 0x48
 8003d38:	443b      	add	r3, r7
 8003d3a:	3b24      	subs	r3, #36	@ 0x24
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	6859      	ldr	r1, [r3, #4]
 8003d4a:	4877      	ldr	r0, [pc, #476]	@ (8003f28 <HAL_OSPIM_Config+0x65c>)
 8003d4c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	3348      	adds	r3, #72	@ 0x48
 8003d5a:	443b      	add	r3, r7
 8003d5c:	3b24      	subs	r3, #36	@ 0x24
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3b01      	subs	r3, #1
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4403      	add	r3, r0
 8003d6e:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003d70:	4a6d      	ldr	r2, [pc, #436]	@ (8003f28 <HAL_OSPIM_Config+0x65c>)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d84:	025b      	lsls	r3, r3, #9
 8003d86:	431a      	orrs	r2, r3
 8003d88:	4967      	ldr	r1, [pc, #412]	@ (8003f28 <HAL_OSPIM_Config+0x65c>)
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003d9a:	4a63      	ldr	r2, [pc, #396]	@ (8003f28 <HAL_OSPIM_Config+0x65c>)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f023 0203 	bic.w	r2, r3, #3
 8003dac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	431a      	orrs	r2, r3
 8003db2:	495d      	ldr	r1, [pc, #372]	@ (8003f28 <HAL_OSPIM_Config+0x65c>)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d014      	beq.n	8003df6 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003dcc:	4a56      	ldr	r2, [pc, #344]	@ (8003f28 <HAL_OSPIM_Config+0x65c>)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003dde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003de0:	015b      	lsls	r3, r3, #5
 8003de2:	431a      	orrs	r2, r3
 8003de4:	4950      	ldr	r1, [pc, #320]	@ (8003f28 <HAL_OSPIM_Config+0x65c>)
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	f042 0210 	orr.w	r2, r2, #16
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d019      	beq.n	8003e36 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003e02:	4a49      	ldr	r2, [pc, #292]	@ (8003f28 <HAL_OSPIM_Config+0x65c>)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003e18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e1a:	049b      	lsls	r3, r3, #18
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	4942      	ldr	r1, [pc, #264]	@ (8003f28 <HAL_OSPIM_Config+0x65c>)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	3b01      	subs	r3, #1
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	605a      	str	r2, [r3, #4]
 8003e34:	e01c      	b.n	8003e70 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d018      	beq.n	8003e70 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003e3e:	4a3a      	ldr	r2, [pc, #232]	@ (8003f28 <HAL_OSPIM_Config+0x65c>)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003e54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e56:	069b      	lsls	r3, r3, #26
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	4933      	ldr	r1, [pc, #204]	@ (8003f28 <HAL_OSPIM_Config+0x65c>)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	3b01      	subs	r3, #1
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d019      	beq.n	8003eb0 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8003f28 <HAL_OSPIM_Config+0x65c>)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e94:	049b      	lsls	r3, r3, #18
 8003e96:	431a      	orrs	r2, r3
 8003e98:	4923      	ldr	r1, [pc, #140]	@ (8003f28 <HAL_OSPIM_Config+0x65c>)
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	440b      	add	r3, r1
 8003eac:	605a      	str	r2, [r3, #4]
 8003eae:	e01c      	b.n	8003eea <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d018      	beq.n	8003eea <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8003f28 <HAL_OSPIM_Config+0x65c>)
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003ece:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ed0:	069b      	lsls	r3, r3, #26
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	4914      	ldr	r1, [pc, #80]	@ (8003f28 <HAL_OSPIM_Config+0x65c>)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003eea:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f2c <HAL_OSPIM_Config+0x660>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a0c      	ldr	r2, [pc, #48]	@ (8003f2c <HAL_OSPIM_Config+0x660>)
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003f02:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003f0e:	4b08      	ldr	r3, [pc, #32]	@ (8003f30 <HAL_OSPIM_Config+0x664>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a07      	ldr	r2, [pc, #28]	@ (8003f30 <HAL_OSPIM_Config+0x664>)
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003f1a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3748      	adds	r7, #72	@ 0x48
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	50061c00 	.word	0x50061c00
 8003f2c:	a0001000 	.word	0xa0001000
 8003f30:	a0001400 	.word	0xa0001400

08003f34 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	4613      	mov	r3, r2
 8003f42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003f44:	e01a      	b.n	8003f7c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4c:	d016      	beq.n	8003f7c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f4e:	f7fd fe4d 	bl	8001bec <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d302      	bcc.n	8003f64 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10b      	bne.n	8003f7c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f6a:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f70:	f043 0201 	orr.w	r2, r3, #1
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	649a      	str	r2, [r3, #72]	@ 0x48

        return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e00e      	b.n	8003f9a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6a1a      	ldr	r2, [r3, #32]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	4013      	ands	r3, r2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	bf14      	ite	ne
 8003f8a:	2301      	movne	r3, #1
 8003f8c:	2300      	moveq	r3, #0
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d1d6      	bne.n	8003f46 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	4603      	mov	r3, r0
 8003fac:	6039      	str	r1, [r7, #0]
 8003fae:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003fb8:	79fb      	ldrb	r3, [r7, #7]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d005      	beq.n	8003fca <OSPIM_GetConfig+0x26>
 8003fbe:	79fb      	ldrb	r3, [r7, #7]
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d802      	bhi.n	8003fca <OSPIM_GetConfig+0x26>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d102      	bne.n	8003fd0 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	75fb      	strb	r3, [r7, #23]
 8003fce:	e08e      	b.n	80040ee <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	2200      	movs	r2, #0
 8003fec:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d101      	bne.n	8003ff8 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003ff4:	4b41      	ldr	r3, [pc, #260]	@ (80040fc <OSPIM_GetConfig+0x158>)
 8003ff6:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	e074      	b.n	80040e8 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8003ffe:	4a40      	ldr	r2, [pc, #256]	@ (8004100 <OSPIM_GetConfig+0x15c>)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4053      	eors	r3, r2
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d103      	bne.n	800402a <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f003 0310 	and.w	r3, r3, #16
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	4053      	eors	r3, r2
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b00      	cmp	r3, #0
 8004040:	d103      	bne.n	800404a <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4053      	eors	r3, r2
 800405a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800405e:	2b00      	cmp	r3, #0
 8004060:	d103      	bne.n	800406a <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d018      	beq.n	80040a6 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	4053      	eors	r3, r2
 800407a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d111      	bne.n	80040a6 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d106      	bne.n	800409a <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3301      	adds	r3, #1
 8004090:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	60da      	str	r2, [r3, #12]
 8004098:	e005      	b.n	80040a6 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	3301      	adds	r3, #1
 800409e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d018      	beq.n	80040e2 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	4053      	eors	r3, r2
 80040b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d111      	bne.n	80040e2 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d106      	bne.n	80040d6 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	3301      	adds	r3, #1
 80040cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	611a      	str	r2, [r3, #16]
 80040d4:	e005      	b.n	80040e2 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3301      	adds	r3, #1
 80040da:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3301      	adds	r3, #1
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d987      	bls.n	8003ffe <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80040ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	371c      	adds	r7, #28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	04040222 	.word	0x04040222
 8004100:	50061c00 	.word	0x50061c00

08004104 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004108:	4b05      	ldr	r3, [pc, #20]	@ (8004120 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a04      	ldr	r2, [pc, #16]	@ (8004120 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800410e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004112:	6013      	str	r3, [r2, #0]
}
 8004114:	bf00      	nop
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40007000 	.word	0x40007000

08004124 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004128:	4b0d      	ldr	r3, [pc, #52]	@ (8004160 <HAL_PWREx_GetVoltageRange+0x3c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004130:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004134:	d102      	bne.n	800413c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004136:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800413a:	e00b      	b.n	8004154 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800413c:	4b08      	ldr	r3, [pc, #32]	@ (8004160 <HAL_PWREx_GetVoltageRange+0x3c>)
 800413e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004146:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800414a:	d102      	bne.n	8004152 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800414c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004150:	e000      	b.n	8004154 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004152:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004154:	4618      	mov	r0, r3
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40007000 	.word	0x40007000

08004164 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d141      	bne.n	80041f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004172:	4b4b      	ldr	r3, [pc, #300]	@ (80042a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800417a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800417e:	d131      	bne.n	80041e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004180:	4b47      	ldr	r3, [pc, #284]	@ (80042a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004186:	4a46      	ldr	r2, [pc, #280]	@ (80042a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800418c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004190:	4b43      	ldr	r3, [pc, #268]	@ (80042a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004198:	4a41      	ldr	r2, [pc, #260]	@ (80042a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800419a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800419e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80041a0:	4b40      	ldr	r3, [pc, #256]	@ (80042a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2232      	movs	r2, #50	@ 0x32
 80041a6:	fb02 f303 	mul.w	r3, r2, r3
 80041aa:	4a3f      	ldr	r2, [pc, #252]	@ (80042a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041ac:	fba2 2303 	umull	r2, r3, r2, r3
 80041b0:	0c9b      	lsrs	r3, r3, #18
 80041b2:	3301      	adds	r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041b6:	e002      	b.n	80041be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041be:	4b38      	ldr	r3, [pc, #224]	@ (80042a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ca:	d102      	bne.n	80041d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f2      	bne.n	80041b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041d2:	4b33      	ldr	r3, [pc, #204]	@ (80042a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041de:	d158      	bne.n	8004292 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e057      	b.n	8004294 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041e4:	4b2e      	ldr	r3, [pc, #184]	@ (80042a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041ea:	4a2d      	ldr	r2, [pc, #180]	@ (80042a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80041f4:	e04d      	b.n	8004292 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041fc:	d141      	bne.n	8004282 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041fe:	4b28      	ldr	r3, [pc, #160]	@ (80042a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800420a:	d131      	bne.n	8004270 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800420c:	4b24      	ldr	r3, [pc, #144]	@ (80042a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800420e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004212:	4a23      	ldr	r2, [pc, #140]	@ (80042a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004218:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800421c:	4b20      	ldr	r3, [pc, #128]	@ (80042a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004224:	4a1e      	ldr	r2, [pc, #120]	@ (80042a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004226:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800422a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800422c:	4b1d      	ldr	r3, [pc, #116]	@ (80042a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2232      	movs	r2, #50	@ 0x32
 8004232:	fb02 f303 	mul.w	r3, r2, r3
 8004236:	4a1c      	ldr	r2, [pc, #112]	@ (80042a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004238:	fba2 2303 	umull	r2, r3, r2, r3
 800423c:	0c9b      	lsrs	r3, r3, #18
 800423e:	3301      	adds	r3, #1
 8004240:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004242:	e002      	b.n	800424a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3b01      	subs	r3, #1
 8004248:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800424a:	4b15      	ldr	r3, [pc, #84]	@ (80042a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004252:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004256:	d102      	bne.n	800425e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f2      	bne.n	8004244 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800425e:	4b10      	ldr	r3, [pc, #64]	@ (80042a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800426a:	d112      	bne.n	8004292 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e011      	b.n	8004294 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004270:	4b0b      	ldr	r3, [pc, #44]	@ (80042a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004276:	4a0a      	ldr	r2, [pc, #40]	@ (80042a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800427c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004280:	e007      	b.n	8004292 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004282:	4b07      	ldr	r3, [pc, #28]	@ (80042a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800428a:	4a05      	ldr	r2, [pc, #20]	@ (80042a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800428c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004290:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	40007000 	.word	0x40007000
 80042a4:	20000004 	.word	0x20000004
 80042a8:	431bde83 	.word	0x431bde83

080042ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d102      	bne.n	80042c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	f000 bc08 	b.w	8004ad0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042c0:	4b96      	ldr	r3, [pc, #600]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 030c 	and.w	r3, r3, #12
 80042c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042ca:	4b94      	ldr	r3, [pc, #592]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0310 	and.w	r3, r3, #16
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 80e4 	beq.w	80044aa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d007      	beq.n	80042f8 <HAL_RCC_OscConfig+0x4c>
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	2b0c      	cmp	r3, #12
 80042ec:	f040 808b 	bne.w	8004406 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	f040 8087 	bne.w	8004406 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042f8:	4b88      	ldr	r3, [pc, #544]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_RCC_OscConfig+0x64>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e3df      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1a      	ldr	r2, [r3, #32]
 8004314:	4b81      	ldr	r3, [pc, #516]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d004      	beq.n	800432a <HAL_RCC_OscConfig+0x7e>
 8004320:	4b7e      	ldr	r3, [pc, #504]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004328:	e005      	b.n	8004336 <HAL_RCC_OscConfig+0x8a>
 800432a:	4b7c      	ldr	r3, [pc, #496]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 800432c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004330:	091b      	lsrs	r3, r3, #4
 8004332:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004336:	4293      	cmp	r3, r2
 8004338:	d223      	bcs.n	8004382 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fdfe 	bl	8004f40 <RCC_SetFlashLatencyFromMSIRange>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e3c0      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800434e:	4b73      	ldr	r3, [pc, #460]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a72      	ldr	r2, [pc, #456]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 8004354:	f043 0308 	orr.w	r3, r3, #8
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	4b70      	ldr	r3, [pc, #448]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	496d      	ldr	r1, [pc, #436]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 8004368:	4313      	orrs	r3, r2
 800436a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800436c:	4b6b      	ldr	r3, [pc, #428]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	021b      	lsls	r3, r3, #8
 800437a:	4968      	ldr	r1, [pc, #416]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 800437c:	4313      	orrs	r3, r2
 800437e:	604b      	str	r3, [r1, #4]
 8004380:	e025      	b.n	80043ce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004382:	4b66      	ldr	r3, [pc, #408]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a65      	ldr	r2, [pc, #404]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 8004388:	f043 0308 	orr.w	r3, r3, #8
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	4b63      	ldr	r3, [pc, #396]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	4960      	ldr	r1, [pc, #384]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 800439c:	4313      	orrs	r3, r2
 800439e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043a0:	4b5e      	ldr	r3, [pc, #376]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	021b      	lsls	r3, r3, #8
 80043ae:	495b      	ldr	r1, [pc, #364]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d109      	bne.n	80043ce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fdbe 	bl	8004f40 <RCC_SetFlashLatencyFromMSIRange>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e380      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043ce:	f000 fcc1 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 80043d2:	4602      	mov	r2, r0
 80043d4:	4b51      	ldr	r3, [pc, #324]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	091b      	lsrs	r3, r3, #4
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	4950      	ldr	r1, [pc, #320]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 80043e0:	5ccb      	ldrb	r3, [r1, r3]
 80043e2:	f003 031f 	and.w	r3, r3, #31
 80043e6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ea:	4a4e      	ldr	r2, [pc, #312]	@ (8004524 <HAL_RCC_OscConfig+0x278>)
 80043ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043ee:	4b4e      	ldr	r3, [pc, #312]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fd fa90 	bl	8001918 <HAL_InitTick>
 80043f8:	4603      	mov	r3, r0
 80043fa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d052      	beq.n	80044a8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	e364      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d032      	beq.n	8004474 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800440e:	4b43      	ldr	r3, [pc, #268]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a42      	ldr	r2, [pc, #264]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 8004414:	f043 0301 	orr.w	r3, r3, #1
 8004418:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800441a:	f7fd fbe7 	bl	8001bec <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004422:	f7fd fbe3 	bl	8001bec <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e34d      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004434:	4b39      	ldr	r3, [pc, #228]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f0      	beq.n	8004422 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004440:	4b36      	ldr	r3, [pc, #216]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a35      	ldr	r2, [pc, #212]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 8004446:	f043 0308 	orr.w	r3, r3, #8
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	4b33      	ldr	r3, [pc, #204]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	4930      	ldr	r1, [pc, #192]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800445e:	4b2f      	ldr	r3, [pc, #188]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	492b      	ldr	r1, [pc, #172]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 800446e:	4313      	orrs	r3, r2
 8004470:	604b      	str	r3, [r1, #4]
 8004472:	e01a      	b.n	80044aa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004474:	4b29      	ldr	r3, [pc, #164]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a28      	ldr	r2, [pc, #160]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 800447a:	f023 0301 	bic.w	r3, r3, #1
 800447e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004480:	f7fd fbb4 	bl	8001bec <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004488:	f7fd fbb0 	bl	8001bec <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e31a      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800449a:	4b20      	ldr	r3, [pc, #128]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x1dc>
 80044a6:	e000      	b.n	80044aa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d073      	beq.n	800459e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d005      	beq.n	80044c8 <HAL_RCC_OscConfig+0x21c>
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	2b0c      	cmp	r3, #12
 80044c0:	d10e      	bne.n	80044e0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2b03      	cmp	r3, #3
 80044c6:	d10b      	bne.n	80044e0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c8:	4b14      	ldr	r3, [pc, #80]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d063      	beq.n	800459c <HAL_RCC_OscConfig+0x2f0>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d15f      	bne.n	800459c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e2f7      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044e8:	d106      	bne.n	80044f8 <HAL_RCC_OscConfig+0x24c>
 80044ea:	4b0c      	ldr	r3, [pc, #48]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a0b      	ldr	r2, [pc, #44]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 80044f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	e025      	b.n	8004544 <HAL_RCC_OscConfig+0x298>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004500:	d114      	bne.n	800452c <HAL_RCC_OscConfig+0x280>
 8004502:	4b06      	ldr	r3, [pc, #24]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a05      	ldr	r2, [pc, #20]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 8004508:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	4b03      	ldr	r3, [pc, #12]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a02      	ldr	r2, [pc, #8]	@ (800451c <HAL_RCC_OscConfig+0x270>)
 8004514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	e013      	b.n	8004544 <HAL_RCC_OscConfig+0x298>
 800451c:	40021000 	.word	0x40021000
 8004520:	0800b89c 	.word	0x0800b89c
 8004524:	20000004 	.word	0x20000004
 8004528:	20000008 	.word	0x20000008
 800452c:	4ba0      	ldr	r3, [pc, #640]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a9f      	ldr	r2, [pc, #636]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	4b9d      	ldr	r3, [pc, #628]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a9c      	ldr	r2, [pc, #624]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 800453e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d013      	beq.n	8004574 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454c:	f7fd fb4e 	bl	8001bec <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004554:	f7fd fb4a 	bl	8001bec <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b64      	cmp	r3, #100	@ 0x64
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e2b4      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004566:	4b92      	ldr	r3, [pc, #584]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f0      	beq.n	8004554 <HAL_RCC_OscConfig+0x2a8>
 8004572:	e014      	b.n	800459e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004574:	f7fd fb3a 	bl	8001bec <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800457c:	f7fd fb36 	bl	8001bec <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b64      	cmp	r3, #100	@ 0x64
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e2a0      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800458e:	4b88      	ldr	r3, [pc, #544]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1f0      	bne.n	800457c <HAL_RCC_OscConfig+0x2d0>
 800459a:	e000      	b.n	800459e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800459c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d060      	beq.n	800466c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d005      	beq.n	80045bc <HAL_RCC_OscConfig+0x310>
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	2b0c      	cmp	r3, #12
 80045b4:	d119      	bne.n	80045ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d116      	bne.n	80045ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045bc:	4b7c      	ldr	r3, [pc, #496]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_RCC_OscConfig+0x328>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e27d      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d4:	4b76      	ldr	r3, [pc, #472]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	061b      	lsls	r3, r3, #24
 80045e2:	4973      	ldr	r1, [pc, #460]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045e8:	e040      	b.n	800466c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d023      	beq.n	800463a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045f2:	4b6f      	ldr	r3, [pc, #444]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a6e      	ldr	r2, [pc, #440]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 80045f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fe:	f7fd faf5 	bl	8001bec <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004606:	f7fd faf1 	bl	8001bec <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e25b      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004618:	4b65      	ldr	r3, [pc, #404]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0f0      	beq.n	8004606 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004624:	4b62      	ldr	r3, [pc, #392]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	061b      	lsls	r3, r3, #24
 8004632:	495f      	ldr	r1, [pc, #380]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004634:	4313      	orrs	r3, r2
 8004636:	604b      	str	r3, [r1, #4]
 8004638:	e018      	b.n	800466c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800463a:	4b5d      	ldr	r3, [pc, #372]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a5c      	ldr	r2, [pc, #368]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004646:	f7fd fad1 	bl	8001bec <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800464e:	f7fd facd 	bl	8001bec <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e237      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004660:	4b53      	ldr	r3, [pc, #332]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f0      	bne.n	800464e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	2b00      	cmp	r3, #0
 8004676:	d03c      	beq.n	80046f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01c      	beq.n	80046ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004680:	4b4b      	ldr	r3, [pc, #300]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004682:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004686:	4a4a      	ldr	r2, [pc, #296]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004690:	f7fd faac 	bl	8001bec <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004698:	f7fd faa8 	bl	8001bec <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e212      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046aa:	4b41      	ldr	r3, [pc, #260]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 80046ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0ef      	beq.n	8004698 <HAL_RCC_OscConfig+0x3ec>
 80046b8:	e01b      	b.n	80046f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ba:	4b3d      	ldr	r3, [pc, #244]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 80046bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046c0:	4a3b      	ldr	r2, [pc, #236]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 80046c2:	f023 0301 	bic.w	r3, r3, #1
 80046c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ca:	f7fd fa8f 	bl	8001bec <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d2:	f7fd fa8b 	bl	8001bec <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e1f5      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046e4:	4b32      	ldr	r3, [pc, #200]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 80046e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1ef      	bne.n	80046d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 80a6 	beq.w	800484c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004700:	2300      	movs	r3, #0
 8004702:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004704:	4b2a      	ldr	r3, [pc, #168]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10d      	bne.n	800472c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004710:	4b27      	ldr	r3, [pc, #156]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004714:	4a26      	ldr	r2, [pc, #152]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800471a:	6593      	str	r3, [r2, #88]	@ 0x58
 800471c:	4b24      	ldr	r3, [pc, #144]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 800471e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004724:	60bb      	str	r3, [r7, #8]
 8004726:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004728:	2301      	movs	r3, #1
 800472a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800472c:	4b21      	ldr	r3, [pc, #132]	@ (80047b4 <HAL_RCC_OscConfig+0x508>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d118      	bne.n	800476a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004738:	4b1e      	ldr	r3, [pc, #120]	@ (80047b4 <HAL_RCC_OscConfig+0x508>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a1d      	ldr	r2, [pc, #116]	@ (80047b4 <HAL_RCC_OscConfig+0x508>)
 800473e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004742:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004744:	f7fd fa52 	bl	8001bec <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800474c:	f7fd fa4e 	bl	8001bec <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e1b8      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800475e:	4b15      	ldr	r3, [pc, #84]	@ (80047b4 <HAL_RCC_OscConfig+0x508>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d108      	bne.n	8004784 <HAL_RCC_OscConfig+0x4d8>
 8004772:	4b0f      	ldr	r3, [pc, #60]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004778:	4a0d      	ldr	r2, [pc, #52]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 800477a:	f043 0301 	orr.w	r3, r3, #1
 800477e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004782:	e029      	b.n	80047d8 <HAL_RCC_OscConfig+0x52c>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b05      	cmp	r3, #5
 800478a:	d115      	bne.n	80047b8 <HAL_RCC_OscConfig+0x50c>
 800478c:	4b08      	ldr	r3, [pc, #32]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004792:	4a07      	ldr	r2, [pc, #28]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004794:	f043 0304 	orr.w	r3, r3, #4
 8004798:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800479c:	4b04      	ldr	r3, [pc, #16]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 800479e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a2:	4a03      	ldr	r2, [pc, #12]	@ (80047b0 <HAL_RCC_OscConfig+0x504>)
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047ac:	e014      	b.n	80047d8 <HAL_RCC_OscConfig+0x52c>
 80047ae:	bf00      	nop
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40007000 	.word	0x40007000
 80047b8:	4b9d      	ldr	r3, [pc, #628]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 80047ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047be:	4a9c      	ldr	r2, [pc, #624]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 80047c0:	f023 0301 	bic.w	r3, r3, #1
 80047c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047c8:	4b99      	ldr	r3, [pc, #612]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ce:	4a98      	ldr	r2, [pc, #608]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 80047d0:	f023 0304 	bic.w	r3, r3, #4
 80047d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d016      	beq.n	800480e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e0:	f7fd fa04 	bl	8001bec <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047e6:	e00a      	b.n	80047fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e8:	f7fd fa00 	bl	8001bec <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e168      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047fe:	4b8c      	ldr	r3, [pc, #560]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 8004800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0ed      	beq.n	80047e8 <HAL_RCC_OscConfig+0x53c>
 800480c:	e015      	b.n	800483a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480e:	f7fd f9ed 	bl	8001bec <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004814:	e00a      	b.n	800482c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004816:	f7fd f9e9 	bl	8001bec <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004824:	4293      	cmp	r3, r2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e151      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800482c:	4b80      	ldr	r3, [pc, #512]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1ed      	bne.n	8004816 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800483a:	7ffb      	ldrb	r3, [r7, #31]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d105      	bne.n	800484c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004840:	4b7b      	ldr	r3, [pc, #492]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 8004842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004844:	4a7a      	ldr	r2, [pc, #488]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 8004846:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800484a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0320 	and.w	r3, r3, #32
 8004854:	2b00      	cmp	r3, #0
 8004856:	d03c      	beq.n	80048d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485c:	2b00      	cmp	r3, #0
 800485e:	d01c      	beq.n	800489a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004860:	4b73      	ldr	r3, [pc, #460]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 8004862:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004866:	4a72      	ldr	r2, [pc, #456]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004870:	f7fd f9bc 	bl	8001bec <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004878:	f7fd f9b8 	bl	8001bec <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e122      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800488a:	4b69      	ldr	r3, [pc, #420]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 800488c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0ef      	beq.n	8004878 <HAL_RCC_OscConfig+0x5cc>
 8004898:	e01b      	b.n	80048d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800489a:	4b65      	ldr	r3, [pc, #404]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 800489c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048a0:	4a63      	ldr	r2, [pc, #396]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 80048a2:	f023 0301 	bic.w	r3, r3, #1
 80048a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048aa:	f7fd f99f 	bl	8001bec <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048b2:	f7fd f99b 	bl	8001bec <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e105      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048c4:	4b5a      	ldr	r3, [pc, #360]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 80048c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1ef      	bne.n	80048b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 80f9 	beq.w	8004ace <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	f040 80cf 	bne.w	8004a84 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80048e6:	4b52      	ldr	r3, [pc, #328]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f003 0203 	and.w	r2, r3, #3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d12c      	bne.n	8004954 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004904:	3b01      	subs	r3, #1
 8004906:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004908:	429a      	cmp	r2, r3
 800490a:	d123      	bne.n	8004954 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004916:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004918:	429a      	cmp	r2, r3
 800491a:	d11b      	bne.n	8004954 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004926:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004928:	429a      	cmp	r2, r3
 800492a:	d113      	bne.n	8004954 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004936:	085b      	lsrs	r3, r3, #1
 8004938:	3b01      	subs	r3, #1
 800493a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800493c:	429a      	cmp	r2, r3
 800493e:	d109      	bne.n	8004954 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494a:	085b      	lsrs	r3, r3, #1
 800494c:	3b01      	subs	r3, #1
 800494e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004950:	429a      	cmp	r2, r3
 8004952:	d071      	beq.n	8004a38 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	2b0c      	cmp	r3, #12
 8004958:	d068      	beq.n	8004a2c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800495a:	4b35      	ldr	r3, [pc, #212]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d105      	bne.n	8004972 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004966:	4b32      	ldr	r3, [pc, #200]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e0ac      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004976:	4b2e      	ldr	r3, [pc, #184]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a2d      	ldr	r2, [pc, #180]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 800497c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004980:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004982:	f7fd f933 	bl	8001bec <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004988:	e008      	b.n	800499c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800498a:	f7fd f92f 	bl	8001bec <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e099      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800499c:	4b24      	ldr	r3, [pc, #144]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1f0      	bne.n	800498a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049a8:	4b21      	ldr	r3, [pc, #132]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 80049aa:	68da      	ldr	r2, [r3, #12]
 80049ac:	4b21      	ldr	r3, [pc, #132]	@ (8004a34 <HAL_RCC_OscConfig+0x788>)
 80049ae:	4013      	ands	r3, r2
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80049b8:	3a01      	subs	r2, #1
 80049ba:	0112      	lsls	r2, r2, #4
 80049bc:	4311      	orrs	r1, r2
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049c2:	0212      	lsls	r2, r2, #8
 80049c4:	4311      	orrs	r1, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80049ca:	0852      	lsrs	r2, r2, #1
 80049cc:	3a01      	subs	r2, #1
 80049ce:	0552      	lsls	r2, r2, #21
 80049d0:	4311      	orrs	r1, r2
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80049d6:	0852      	lsrs	r2, r2, #1
 80049d8:	3a01      	subs	r2, #1
 80049da:	0652      	lsls	r2, r2, #25
 80049dc:	4311      	orrs	r1, r2
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80049e2:	06d2      	lsls	r2, r2, #27
 80049e4:	430a      	orrs	r2, r1
 80049e6:	4912      	ldr	r1, [pc, #72]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049ec:	4b10      	ldr	r3, [pc, #64]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a0f      	ldr	r2, [pc, #60]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 80049f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049f8:	4b0d      	ldr	r3, [pc, #52]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	4a0c      	ldr	r2, [pc, #48]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 80049fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a04:	f7fd f8f2 	bl	8001bec <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a0c:	f7fd f8ee 	bl	8001bec <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e058      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a1e:	4b04      	ldr	r3, [pc, #16]	@ (8004a30 <HAL_RCC_OscConfig+0x784>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a2a:	e050      	b.n	8004ace <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e04f      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
 8004a30:	40021000 	.word	0x40021000
 8004a34:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a38:	4b27      	ldr	r3, [pc, #156]	@ (8004ad8 <HAL_RCC_OscConfig+0x82c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d144      	bne.n	8004ace <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a44:	4b24      	ldr	r3, [pc, #144]	@ (8004ad8 <HAL_RCC_OscConfig+0x82c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a23      	ldr	r2, [pc, #140]	@ (8004ad8 <HAL_RCC_OscConfig+0x82c>)
 8004a4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a50:	4b21      	ldr	r3, [pc, #132]	@ (8004ad8 <HAL_RCC_OscConfig+0x82c>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	4a20      	ldr	r2, [pc, #128]	@ (8004ad8 <HAL_RCC_OscConfig+0x82c>)
 8004a56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a5c:	f7fd f8c6 	bl	8001bec <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a64:	f7fd f8c2 	bl	8001bec <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e02c      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a76:	4b18      	ldr	r3, [pc, #96]	@ (8004ad8 <HAL_RCC_OscConfig+0x82c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0f0      	beq.n	8004a64 <HAL_RCC_OscConfig+0x7b8>
 8004a82:	e024      	b.n	8004ace <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	2b0c      	cmp	r3, #12
 8004a88:	d01f      	beq.n	8004aca <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a8a:	4b13      	ldr	r3, [pc, #76]	@ (8004ad8 <HAL_RCC_OscConfig+0x82c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a12      	ldr	r2, [pc, #72]	@ (8004ad8 <HAL_RCC_OscConfig+0x82c>)
 8004a90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a96:	f7fd f8a9 	bl	8001bec <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a9e:	f7fd f8a5 	bl	8001bec <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e00f      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ab0:	4b09      	ldr	r3, [pc, #36]	@ (8004ad8 <HAL_RCC_OscConfig+0x82c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1f0      	bne.n	8004a9e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004abc:	4b06      	ldr	r3, [pc, #24]	@ (8004ad8 <HAL_RCC_OscConfig+0x82c>)
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	4905      	ldr	r1, [pc, #20]	@ (8004ad8 <HAL_RCC_OscConfig+0x82c>)
 8004ac2:	4b06      	ldr	r3, [pc, #24]	@ (8004adc <HAL_RCC_OscConfig+0x830>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	60cb      	str	r3, [r1, #12]
 8004ac8:	e001      	b.n	8004ace <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e000      	b.n	8004ad0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3720      	adds	r7, #32
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	feeefffc 	.word	0xfeeefffc

08004ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004aea:	2300      	movs	r3, #0
 8004aec:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e11d      	b.n	8004d34 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004af8:	4b90      	ldr	r3, [pc, #576]	@ (8004d3c <HAL_RCC_ClockConfig+0x25c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 030f 	and.w	r3, r3, #15
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d910      	bls.n	8004b28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b06:	4b8d      	ldr	r3, [pc, #564]	@ (8004d3c <HAL_RCC_ClockConfig+0x25c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f023 020f 	bic.w	r2, r3, #15
 8004b0e:	498b      	ldr	r1, [pc, #556]	@ (8004d3c <HAL_RCC_ClockConfig+0x25c>)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b16:	4b89      	ldr	r3, [pc, #548]	@ (8004d3c <HAL_RCC_ClockConfig+0x25c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d001      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e105      	b.n	8004d34 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d010      	beq.n	8004b56 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	4b81      	ldr	r3, [pc, #516]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d908      	bls.n	8004b56 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b44:	4b7e      	ldr	r3, [pc, #504]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	497b      	ldr	r1, [pc, #492]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d079      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	d11e      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b6a:	4b75      	ldr	r3, [pc, #468]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e0dc      	b.n	8004d34 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004b7a:	f000 fa3b 	bl	8004ff4 <RCC_GetSysClockFreqFromPLLSource>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	4a70      	ldr	r2, [pc, #448]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d946      	bls.n	8004c14 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004b86:	4b6e      	ldr	r3, [pc, #440]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d140      	bne.n	8004c14 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b92:	4b6b      	ldr	r3, [pc, #428]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b9a:	4a69      	ldr	r2, [pc, #420]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ba0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ba2:	2380      	movs	r3, #128	@ 0x80
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	e035      	b.n	8004c14 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d107      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bb0:	4b63      	ldr	r3, [pc, #396]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d115      	bne.n	8004be8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e0b9      	b.n	8004d34 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d107      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bc8:	4b5d      	ldr	r3, [pc, #372]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d109      	bne.n	8004be8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e0ad      	b.n	8004d34 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bd8:	4b59      	ldr	r3, [pc, #356]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0a5      	b.n	8004d34 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004be8:	f000 f8b4 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 8004bec:	4603      	mov	r3, r0
 8004bee:	4a55      	ldr	r2, [pc, #340]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d90f      	bls.n	8004c14 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004bf4:	4b52      	ldr	r3, [pc, #328]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d109      	bne.n	8004c14 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c00:	4b4f      	ldr	r3, [pc, #316]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c08:	4a4d      	ldr	r2, [pc, #308]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c0e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c10:	2380      	movs	r3, #128	@ 0x80
 8004c12:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c14:	4b4a      	ldr	r3, [pc, #296]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f023 0203 	bic.w	r2, r3, #3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	4947      	ldr	r1, [pc, #284]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c26:	f7fc ffe1 	bl	8001bec <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2c:	e00a      	b.n	8004c44 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c2e:	f7fc ffdd 	bl	8001bec <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e077      	b.n	8004d34 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c44:	4b3e      	ldr	r3, [pc, #248]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 020c 	and.w	r2, r3, #12
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d1eb      	bne.n	8004c2e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2b80      	cmp	r3, #128	@ 0x80
 8004c5a:	d105      	bne.n	8004c68 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c5c:	4b38      	ldr	r3, [pc, #224]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	4a37      	ldr	r2, [pc, #220]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004c62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c66:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d010      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	4b31      	ldr	r3, [pc, #196]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d208      	bcs.n	8004c96 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c84:	4b2e      	ldr	r3, [pc, #184]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	492b      	ldr	r1, [pc, #172]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c96:	4b29      	ldr	r3, [pc, #164]	@ (8004d3c <HAL_RCC_ClockConfig+0x25c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d210      	bcs.n	8004cc6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca4:	4b25      	ldr	r3, [pc, #148]	@ (8004d3c <HAL_RCC_ClockConfig+0x25c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f023 020f 	bic.w	r2, r3, #15
 8004cac:	4923      	ldr	r1, [pc, #140]	@ (8004d3c <HAL_RCC_ClockConfig+0x25c>)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb4:	4b21      	ldr	r3, [pc, #132]	@ (8004d3c <HAL_RCC_ClockConfig+0x25c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 030f 	and.w	r3, r3, #15
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d001      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e036      	b.n	8004d34 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d008      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	4918      	ldr	r1, [pc, #96]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d009      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cf0:	4b13      	ldr	r3, [pc, #76]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	4910      	ldr	r1, [pc, #64]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d04:	f000 f826 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	091b      	lsrs	r3, r3, #4
 8004d10:	f003 030f 	and.w	r3, r3, #15
 8004d14:	490c      	ldr	r1, [pc, #48]	@ (8004d48 <HAL_RCC_ClockConfig+0x268>)
 8004d16:	5ccb      	ldrb	r3, [r1, r3]
 8004d18:	f003 031f 	and.w	r3, r3, #31
 8004d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d20:	4a0a      	ldr	r2, [pc, #40]	@ (8004d4c <HAL_RCC_ClockConfig+0x26c>)
 8004d22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d24:	4b0a      	ldr	r3, [pc, #40]	@ (8004d50 <HAL_RCC_ClockConfig+0x270>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fc fdf5 	bl	8001918 <HAL_InitTick>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	73fb      	strb	r3, [r7, #15]

  return status;
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40022000 	.word	0x40022000
 8004d40:	40021000 	.word	0x40021000
 8004d44:	04c4b400 	.word	0x04c4b400
 8004d48:	0800b89c 	.word	0x0800b89c
 8004d4c:	20000004 	.word	0x20000004
 8004d50:	20000008 	.word	0x20000008

08004d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b089      	sub	sp, #36	@ 0x24
 8004d58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d62:	4b3e      	ldr	r3, [pc, #248]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 030c 	and.w	r3, r3, #12
 8004d6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f003 0303 	and.w	r3, r3, #3
 8004d74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d005      	beq.n	8004d88 <HAL_RCC_GetSysClockFreq+0x34>
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	2b0c      	cmp	r3, #12
 8004d80:	d121      	bne.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d11e      	bne.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d88:	4b34      	ldr	r3, [pc, #208]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d107      	bne.n	8004da4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d94:	4b31      	ldr	r3, [pc, #196]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d9a:	0a1b      	lsrs	r3, r3, #8
 8004d9c:	f003 030f 	and.w	r3, r3, #15
 8004da0:	61fb      	str	r3, [r7, #28]
 8004da2:	e005      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004da4:	4b2d      	ldr	r3, [pc, #180]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	091b      	lsrs	r3, r3, #4
 8004daa:	f003 030f 	and.w	r3, r3, #15
 8004dae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004db0:	4a2b      	ldr	r2, [pc, #172]	@ (8004e60 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10d      	bne.n	8004ddc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dc4:	e00a      	b.n	8004ddc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b04      	cmp	r3, #4
 8004dca:	d102      	bne.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dcc:	4b25      	ldr	r3, [pc, #148]	@ (8004e64 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dce:	61bb      	str	r3, [r7, #24]
 8004dd0:	e004      	b.n	8004ddc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d101      	bne.n	8004ddc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dd8:	4b23      	ldr	r3, [pc, #140]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2b0c      	cmp	r3, #12
 8004de0:	d134      	bne.n	8004e4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004de2:	4b1e      	ldr	r3, [pc, #120]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d003      	beq.n	8004dfa <HAL_RCC_GetSysClockFreq+0xa6>
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d003      	beq.n	8004e00 <HAL_RCC_GetSysClockFreq+0xac>
 8004df8:	e005      	b.n	8004e06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8004e64 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dfc:	617b      	str	r3, [r7, #20]
      break;
 8004dfe:	e005      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e00:	4b19      	ldr	r3, [pc, #100]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e02:	617b      	str	r3, [r7, #20]
      break;
 8004e04:	e002      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	617b      	str	r3, [r7, #20]
      break;
 8004e0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e0c:	4b13      	ldr	r3, [pc, #76]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	091b      	lsrs	r3, r3, #4
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	3301      	adds	r3, #1
 8004e18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e1a:	4b10      	ldr	r3, [pc, #64]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	0a1b      	lsrs	r3, r3, #8
 8004e20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	fb03 f202 	mul.w	r2, r3, r2
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e32:	4b0a      	ldr	r3, [pc, #40]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	0e5b      	lsrs	r3, r3, #25
 8004e38:	f003 0303 	and.w	r3, r3, #3
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e4c:	69bb      	ldr	r3, [r7, #24]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3724      	adds	r7, #36	@ 0x24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	0800b8b4 	.word	0x0800b8b4
 8004e64:	00f42400 	.word	0x00f42400
 8004e68:	007a1200 	.word	0x007a1200

08004e6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e70:	4b03      	ldr	r3, [pc, #12]	@ (8004e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e72:	681b      	ldr	r3, [r3, #0]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	20000004 	.word	0x20000004

08004e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e88:	f7ff fff0 	bl	8004e6c <HAL_RCC_GetHCLKFreq>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	4b06      	ldr	r3, [pc, #24]	@ (8004ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	0a1b      	lsrs	r3, r3, #8
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	4904      	ldr	r1, [pc, #16]	@ (8004eac <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e9a:	5ccb      	ldrb	r3, [r1, r3]
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	0800b8ac 	.word	0x0800b8ac

08004eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004eb4:	f7ff ffda 	bl	8004e6c <HAL_RCC_GetHCLKFreq>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	4b06      	ldr	r3, [pc, #24]	@ (8004ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	0adb      	lsrs	r3, r3, #11
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	4904      	ldr	r1, [pc, #16]	@ (8004ed8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ec6:	5ccb      	ldrb	r3, [r1, r3]
 8004ec8:	f003 031f 	and.w	r3, r3, #31
 8004ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	0800b8ac 	.word	0x0800b8ac

08004edc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	220f      	movs	r2, #15
 8004eea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004eec:	4b12      	ldr	r3, [pc, #72]	@ (8004f38 <HAL_RCC_GetClockConfig+0x5c>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f003 0203 	and.w	r2, r3, #3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8004f38 <HAL_RCC_GetClockConfig+0x5c>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004f04:	4b0c      	ldr	r3, [pc, #48]	@ (8004f38 <HAL_RCC_GetClockConfig+0x5c>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004f10:	4b09      	ldr	r3, [pc, #36]	@ (8004f38 <HAL_RCC_GetClockConfig+0x5c>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	08db      	lsrs	r3, r3, #3
 8004f16:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004f1e:	4b07      	ldr	r3, [pc, #28]	@ (8004f3c <HAL_RCC_GetClockConfig+0x60>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 020f 	and.w	r2, r3, #15
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	601a      	str	r2, [r3, #0]
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	40022000 	.word	0x40022000

08004f40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f48:	2300      	movs	r3, #0
 8004f4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f4c:	4b27      	ldr	r3, [pc, #156]	@ (8004fec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f58:	f7ff f8e4 	bl	8004124 <HAL_PWREx_GetVoltageRange>
 8004f5c:	6178      	str	r0, [r7, #20]
 8004f5e:	e014      	b.n	8004f8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f60:	4b22      	ldr	r3, [pc, #136]	@ (8004fec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f64:	4a21      	ldr	r2, [pc, #132]	@ (8004fec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8004fec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f78:	f7ff f8d4 	bl	8004124 <HAL_PWREx_GetVoltageRange>
 8004f7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f82:	4a1a      	ldr	r2, [pc, #104]	@ (8004fec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f88:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f90:	d10b      	bne.n	8004faa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b80      	cmp	r3, #128	@ 0x80
 8004f96:	d913      	bls.n	8004fc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2ba0      	cmp	r3, #160	@ 0xa0
 8004f9c:	d902      	bls.n	8004fa4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	613b      	str	r3, [r7, #16]
 8004fa2:	e00d      	b.n	8004fc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	e00a      	b.n	8004fc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fae:	d902      	bls.n	8004fb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	613b      	str	r3, [r7, #16]
 8004fb4:	e004      	b.n	8004fc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b70      	cmp	r3, #112	@ 0x70
 8004fba:	d101      	bne.n	8004fc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f023 020f 	bic.w	r2, r3, #15
 8004fc8:	4909      	ldr	r1, [pc, #36]	@ (8004ff0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004fd0:	4b07      	ldr	r3, [pc, #28]	@ (8004ff0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d001      	beq.n	8004fe2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e000      	b.n	8004fe4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	40022000 	.word	0x40022000

08004ff4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80050b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f003 0303 	and.w	r3, r3, #3
 8005002:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b03      	cmp	r3, #3
 8005008:	d00b      	beq.n	8005022 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2b03      	cmp	r3, #3
 800500e:	d825      	bhi.n	800505c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d008      	beq.n	8005028 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2b02      	cmp	r3, #2
 800501a:	d11f      	bne.n	800505c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800501c:	4b25      	ldr	r3, [pc, #148]	@ (80050b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800501e:	613b      	str	r3, [r7, #16]
    break;
 8005020:	e01f      	b.n	8005062 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005022:	4b25      	ldr	r3, [pc, #148]	@ (80050b8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005024:	613b      	str	r3, [r7, #16]
    break;
 8005026:	e01c      	b.n	8005062 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005028:	4b21      	ldr	r3, [pc, #132]	@ (80050b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b00      	cmp	r3, #0
 8005032:	d107      	bne.n	8005044 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005034:	4b1e      	ldr	r3, [pc, #120]	@ (80050b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005036:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800503a:	0a1b      	lsrs	r3, r3, #8
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	e005      	b.n	8005050 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005044:	4b1a      	ldr	r3, [pc, #104]	@ (80050b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	091b      	lsrs	r3, r3, #4
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005050:	4a1a      	ldr	r2, [pc, #104]	@ (80050bc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005058:	613b      	str	r3, [r7, #16]
    break;
 800505a:	e002      	b.n	8005062 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800505c:	2300      	movs	r3, #0
 800505e:	613b      	str	r3, [r7, #16]
    break;
 8005060:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005062:	4b13      	ldr	r3, [pc, #76]	@ (80050b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	091b      	lsrs	r3, r3, #4
 8005068:	f003 030f 	and.w	r3, r3, #15
 800506c:	3301      	adds	r3, #1
 800506e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005070:	4b0f      	ldr	r3, [pc, #60]	@ (80050b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	0a1b      	lsrs	r3, r3, #8
 8005076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	fb03 f202 	mul.w	r2, r3, r2
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	fbb2 f3f3 	udiv	r3, r2, r3
 8005086:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005088:	4b09      	ldr	r3, [pc, #36]	@ (80050b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	0e5b      	lsrs	r3, r3, #25
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	3301      	adds	r3, #1
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80050a2:	683b      	ldr	r3, [r7, #0]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	371c      	adds	r7, #28
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	40021000 	.word	0x40021000
 80050b4:	00f42400 	.word	0x00f42400
 80050b8:	007a1200 	.word	0x007a1200
 80050bc:	0800b8b4 	.word	0x0800b8b4

080050c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050c8:	2300      	movs	r3, #0
 80050ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050cc:	2300      	movs	r3, #0
 80050ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d040      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050e0:	2b80      	cmp	r3, #128	@ 0x80
 80050e2:	d02a      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80050e4:	2b80      	cmp	r3, #128	@ 0x80
 80050e6:	d825      	bhi.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80050e8:	2b60      	cmp	r3, #96	@ 0x60
 80050ea:	d026      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80050ec:	2b60      	cmp	r3, #96	@ 0x60
 80050ee:	d821      	bhi.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80050f0:	2b40      	cmp	r3, #64	@ 0x40
 80050f2:	d006      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80050f4:	2b40      	cmp	r3, #64	@ 0x40
 80050f6:	d81d      	bhi.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d009      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80050fc:	2b20      	cmp	r3, #32
 80050fe:	d010      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005100:	e018      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005102:	4b89      	ldr	r3, [pc, #548]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	4a88      	ldr	r2, [pc, #544]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800510c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800510e:	e015      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3304      	adds	r3, #4
 8005114:	2100      	movs	r1, #0
 8005116:	4618      	mov	r0, r3
 8005118:	f000 fb12 	bl	8005740 <RCCEx_PLLSAI1_Config>
 800511c:	4603      	mov	r3, r0
 800511e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005120:	e00c      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	3320      	adds	r3, #32
 8005126:	2100      	movs	r1, #0
 8005128:	4618      	mov	r0, r3
 800512a:	f000 fbfd 	bl	8005928 <RCCEx_PLLSAI2_Config>
 800512e:	4603      	mov	r3, r0
 8005130:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005132:	e003      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	74fb      	strb	r3, [r7, #19]
      break;
 8005138:	e000      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800513a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800513c:	7cfb      	ldrb	r3, [r7, #19]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10b      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005142:	4b79      	ldr	r3, [pc, #484]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005144:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005148:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005150:	4975      	ldr	r1, [pc, #468]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005158:	e001      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800515a:	7cfb      	ldrb	r3, [r7, #19]
 800515c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d047      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800516e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005172:	d030      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005178:	d82a      	bhi.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800517a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800517e:	d02a      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005180:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005184:	d824      	bhi.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005186:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800518a:	d008      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800518c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005190:	d81e      	bhi.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800519a:	d010      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800519c:	e018      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800519e:	4b62      	ldr	r3, [pc, #392]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	4a61      	ldr	r2, [pc, #388]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051a8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051aa:	e015      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3304      	adds	r3, #4
 80051b0:	2100      	movs	r1, #0
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fac4 	bl	8005740 <RCCEx_PLLSAI1_Config>
 80051b8:	4603      	mov	r3, r0
 80051ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051bc:	e00c      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3320      	adds	r3, #32
 80051c2:	2100      	movs	r1, #0
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 fbaf 	bl	8005928 <RCCEx_PLLSAI2_Config>
 80051ca:	4603      	mov	r3, r0
 80051cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051ce:	e003      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	74fb      	strb	r3, [r7, #19]
      break;
 80051d4:	e000      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80051d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051d8:	7cfb      	ldrb	r3, [r7, #19]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10b      	bne.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051de:	4b52      	ldr	r3, [pc, #328]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ec:	494e      	ldr	r1, [pc, #312]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80051f4:	e001      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f6:	7cfb      	ldrb	r3, [r7, #19]
 80051f8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 809f 	beq.w	8005346 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005208:	2300      	movs	r3, #0
 800520a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800520c:	4b46      	ldr	r3, [pc, #280]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800520e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005218:	2301      	movs	r3, #1
 800521a:	e000      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800521c:	2300      	movs	r3, #0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00d      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005222:	4b41      	ldr	r3, [pc, #260]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005226:	4a40      	ldr	r2, [pc, #256]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005228:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800522c:	6593      	str	r3, [r2, #88]	@ 0x58
 800522e:	4b3e      	ldr	r3, [pc, #248]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005236:	60bb      	str	r3, [r7, #8]
 8005238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800523a:	2301      	movs	r3, #1
 800523c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800523e:	4b3b      	ldr	r3, [pc, #236]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a3a      	ldr	r2, [pc, #232]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005248:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800524a:	f7fc fccf 	bl	8001bec <HAL_GetTick>
 800524e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005250:	e009      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005252:	f7fc fccb 	bl	8001bec <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d902      	bls.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	74fb      	strb	r3, [r7, #19]
        break;
 8005264:	e005      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005266:	4b31      	ldr	r3, [pc, #196]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0ef      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005272:	7cfb      	ldrb	r3, [r7, #19]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d15b      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005278:	4b2b      	ldr	r3, [pc, #172]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800527a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800527e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005282:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d01f      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	429a      	cmp	r2, r3
 8005294:	d019      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005296:	4b24      	ldr	r3, [pc, #144]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800529c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052a2:	4b21      	ldr	r3, [pc, #132]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052c2:	4a19      	ldr	r2, [pc, #100]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d016      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d4:	f7fc fc8a 	bl	8001bec <HAL_GetTick>
 80052d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052da:	e00b      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052dc:	f7fc fc86 	bl	8001bec <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d902      	bls.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	74fb      	strb	r3, [r7, #19]
            break;
 80052f2:	e006      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0ec      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005302:	7cfb      	ldrb	r3, [r7, #19]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10c      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005308:	4b07      	ldr	r3, [pc, #28]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800530a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005318:	4903      	ldr	r1, [pc, #12]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005320:	e008      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005322:	7cfb      	ldrb	r3, [r7, #19]
 8005324:	74bb      	strb	r3, [r7, #18]
 8005326:	e005      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005328:	40021000 	.word	0x40021000
 800532c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005330:	7cfb      	ldrb	r3, [r7, #19]
 8005332:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005334:	7c7b      	ldrb	r3, [r7, #17]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d105      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800533a:	4ba0      	ldr	r3, [pc, #640]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800533c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533e:	4a9f      	ldr	r2, [pc, #636]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005340:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005344:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005352:	4b9a      	ldr	r3, [pc, #616]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005358:	f023 0203 	bic.w	r2, r3, #3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005360:	4996      	ldr	r1, [pc, #600]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005362:	4313      	orrs	r3, r2
 8005364:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00a      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005374:	4b91      	ldr	r3, [pc, #580]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537a:	f023 020c 	bic.w	r2, r3, #12
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005382:	498e      	ldr	r1, [pc, #568]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005396:	4b89      	ldr	r3, [pc, #548]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a4:	4985      	ldr	r1, [pc, #532]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00a      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053b8:	4b80      	ldr	r3, [pc, #512]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053c6:	497d      	ldr	r1, [pc, #500]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0310 	and.w	r3, r3, #16
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053da:	4b78      	ldr	r3, [pc, #480]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053e8:	4974      	ldr	r1, [pc, #464]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0320 	and.w	r3, r3, #32
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053fc:	4b6f      	ldr	r3, [pc, #444]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005402:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800540a:	496c      	ldr	r1, [pc, #432]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800541e:	4b67      	ldr	r3, [pc, #412]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005424:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800542c:	4963      	ldr	r1, [pc, #396]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005440:	4b5e      	ldr	r3, [pc, #376]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005446:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800544e:	495b      	ldr	r1, [pc, #364]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005462:	4b56      	ldr	r3, [pc, #344]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005468:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005470:	4952      	ldr	r1, [pc, #328]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005484:	4b4d      	ldr	r3, [pc, #308]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800548a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005492:	494a      	ldr	r1, [pc, #296]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054a6:	4b45      	ldr	r3, [pc, #276]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b4:	4941      	ldr	r1, [pc, #260]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00a      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054c8:	4b3c      	ldr	r3, [pc, #240]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054ce:	f023 0203 	bic.w	r2, r3, #3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054d6:	4939      	ldr	r1, [pc, #228]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d028      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054ea:	4b34      	ldr	r3, [pc, #208]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054f8:	4930      	ldr	r1, [pc, #192]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005504:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005508:	d106      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800550a:	4b2c      	ldr	r3, [pc, #176]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	4a2b      	ldr	r2, [pc, #172]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005510:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005514:	60d3      	str	r3, [r2, #12]
 8005516:	e011      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800551c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005520:	d10c      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	3304      	adds	r3, #4
 8005526:	2101      	movs	r1, #1
 8005528:	4618      	mov	r0, r3
 800552a:	f000 f909 	bl	8005740 <RCCEx_PLLSAI1_Config>
 800552e:	4603      	mov	r3, r0
 8005530:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005532:	7cfb      	ldrb	r3, [r7, #19]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005538:	7cfb      	ldrb	r3, [r7, #19]
 800553a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d04d      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800554c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005550:	d108      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005552:	4b1a      	ldr	r3, [pc, #104]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005554:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005558:	4a18      	ldr	r2, [pc, #96]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800555a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800555e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005562:	e012      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005564:	4b15      	ldr	r3, [pc, #84]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005566:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800556a:	4a14      	ldr	r2, [pc, #80]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800556c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005570:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005574:	4b11      	ldr	r3, [pc, #68]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800557a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005582:	490e      	ldr	r1, [pc, #56]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005584:	4313      	orrs	r3, r2
 8005586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800558e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005592:	d106      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005594:	4b09      	ldr	r3, [pc, #36]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	4a08      	ldr	r2, [pc, #32]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800559a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800559e:	60d3      	str	r3, [r2, #12]
 80055a0:	e020      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055aa:	d109      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055ac:	4b03      	ldr	r3, [pc, #12]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	4a02      	ldr	r2, [pc, #8]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055b6:	60d3      	str	r3, [r2, #12]
 80055b8:	e014      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80055ba:	bf00      	nop
 80055bc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055c8:	d10c      	bne.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	3304      	adds	r3, #4
 80055ce:	2101      	movs	r1, #1
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 f8b5 	bl	8005740 <RCCEx_PLLSAI1_Config>
 80055d6:	4603      	mov	r3, r0
 80055d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055da:	7cfb      	ldrb	r3, [r7, #19]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80055e0:	7cfb      	ldrb	r3, [r7, #19]
 80055e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d028      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055f0:	4b4a      	ldr	r3, [pc, #296]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055fe:	4947      	ldr	r1, [pc, #284]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005600:	4313      	orrs	r3, r2
 8005602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800560a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800560e:	d106      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005610:	4b42      	ldr	r3, [pc, #264]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	4a41      	ldr	r2, [pc, #260]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005616:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800561a:	60d3      	str	r3, [r2, #12]
 800561c:	e011      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005622:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005626:	d10c      	bne.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	3304      	adds	r3, #4
 800562c:	2101      	movs	r1, #1
 800562e:	4618      	mov	r0, r3
 8005630:	f000 f886 	bl	8005740 <RCCEx_PLLSAI1_Config>
 8005634:	4603      	mov	r3, r0
 8005636:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005638:	7cfb      	ldrb	r3, [r7, #19]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800563e:	7cfb      	ldrb	r3, [r7, #19]
 8005640:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d01e      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800564e:	4b33      	ldr	r3, [pc, #204]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005654:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800565e:	492f      	ldr	r1, [pc, #188]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005660:	4313      	orrs	r3, r2
 8005662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800566c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005670:	d10c      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3304      	adds	r3, #4
 8005676:	2102      	movs	r1, #2
 8005678:	4618      	mov	r0, r3
 800567a:	f000 f861 	bl	8005740 <RCCEx_PLLSAI1_Config>
 800567e:	4603      	mov	r3, r0
 8005680:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005682:	7cfb      	ldrb	r3, [r7, #19]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005688:	7cfb      	ldrb	r3, [r7, #19]
 800568a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00b      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005698:	4b20      	ldr	r3, [pc, #128]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800569a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800569e:	f023 0204 	bic.w	r2, r3, #4
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056a8:	491c      	ldr	r1, [pc, #112]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00b      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80056bc:	4b17      	ldr	r3, [pc, #92]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056c2:	f023 0218 	bic.w	r2, r3, #24
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056cc:	4913      	ldr	r1, [pc, #76]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d017      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80056e0:	4b0e      	ldr	r3, [pc, #56]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056f0:	490a      	ldr	r1, [pc, #40]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005702:	d105      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005704:	4b05      	ldr	r3, [pc, #20]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	4a04      	ldr	r2, [pc, #16]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800570a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800570e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005710:	7cbb      	ldrb	r3, [r7, #18]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	40021000 	.word	0x40021000

08005720 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005724:	4b05      	ldr	r3, [pc, #20]	@ (800573c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a04      	ldr	r2, [pc, #16]	@ (800573c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800572a:	f043 0304 	orr.w	r3, r3, #4
 800572e:	6013      	str	r3, [r2, #0]
}
 8005730:	bf00      	nop
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40021000 	.word	0x40021000

08005740 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800574e:	4b72      	ldr	r3, [pc, #456]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00e      	beq.n	8005778 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800575a:	4b6f      	ldr	r3, [pc, #444]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f003 0203 	and.w	r2, r3, #3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d103      	bne.n	8005772 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
       ||
 800576e:	2b00      	cmp	r3, #0
 8005770:	d142      	bne.n	80057f8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	73fb      	strb	r3, [r7, #15]
 8005776:	e03f      	b.n	80057f8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b03      	cmp	r3, #3
 800577e:	d018      	beq.n	80057b2 <RCCEx_PLLSAI1_Config+0x72>
 8005780:	2b03      	cmp	r3, #3
 8005782:	d825      	bhi.n	80057d0 <RCCEx_PLLSAI1_Config+0x90>
 8005784:	2b01      	cmp	r3, #1
 8005786:	d002      	beq.n	800578e <RCCEx_PLLSAI1_Config+0x4e>
 8005788:	2b02      	cmp	r3, #2
 800578a:	d009      	beq.n	80057a0 <RCCEx_PLLSAI1_Config+0x60>
 800578c:	e020      	b.n	80057d0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800578e:	4b62      	ldr	r3, [pc, #392]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d11d      	bne.n	80057d6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800579e:	e01a      	b.n	80057d6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057a0:	4b5d      	ldr	r3, [pc, #372]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d116      	bne.n	80057da <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057b0:	e013      	b.n	80057da <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057b2:	4b59      	ldr	r3, [pc, #356]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10f      	bne.n	80057de <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057be:	4b56      	ldr	r3, [pc, #344]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d109      	bne.n	80057de <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057ce:	e006      	b.n	80057de <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	73fb      	strb	r3, [r7, #15]
      break;
 80057d4:	e004      	b.n	80057e0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80057d6:	bf00      	nop
 80057d8:	e002      	b.n	80057e0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80057da:	bf00      	nop
 80057dc:	e000      	b.n	80057e0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80057de:	bf00      	nop
    }

    if(status == HAL_OK)
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d108      	bne.n	80057f8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80057e6:	4b4c      	ldr	r3, [pc, #304]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f023 0203 	bic.w	r2, r3, #3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4949      	ldr	r1, [pc, #292]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f040 8086 	bne.w	800590c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005800:	4b45      	ldr	r3, [pc, #276]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a44      	ldr	r2, [pc, #272]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005806:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800580a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800580c:	f7fc f9ee 	bl	8001bec <HAL_GetTick>
 8005810:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005812:	e009      	b.n	8005828 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005814:	f7fc f9ea 	bl	8001bec <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d902      	bls.n	8005828 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	73fb      	strb	r3, [r7, #15]
        break;
 8005826:	e005      	b.n	8005834 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005828:	4b3b      	ldr	r3, [pc, #236]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1ef      	bne.n	8005814 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005834:	7bfb      	ldrb	r3, [r7, #15]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d168      	bne.n	800590c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d113      	bne.n	8005868 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005840:	4b35      	ldr	r3, [pc, #212]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005842:	691a      	ldr	r2, [r3, #16]
 8005844:	4b35      	ldr	r3, [pc, #212]	@ (800591c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005846:	4013      	ands	r3, r2
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6892      	ldr	r2, [r2, #8]
 800584c:	0211      	lsls	r1, r2, #8
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	68d2      	ldr	r2, [r2, #12]
 8005852:	06d2      	lsls	r2, r2, #27
 8005854:	4311      	orrs	r1, r2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6852      	ldr	r2, [r2, #4]
 800585a:	3a01      	subs	r2, #1
 800585c:	0112      	lsls	r2, r2, #4
 800585e:	430a      	orrs	r2, r1
 8005860:	492d      	ldr	r1, [pc, #180]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005862:	4313      	orrs	r3, r2
 8005864:	610b      	str	r3, [r1, #16]
 8005866:	e02d      	b.n	80058c4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d115      	bne.n	800589a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800586e:	4b2a      	ldr	r3, [pc, #168]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	4b2b      	ldr	r3, [pc, #172]	@ (8005920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005874:	4013      	ands	r3, r2
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6892      	ldr	r2, [r2, #8]
 800587a:	0211      	lsls	r1, r2, #8
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6912      	ldr	r2, [r2, #16]
 8005880:	0852      	lsrs	r2, r2, #1
 8005882:	3a01      	subs	r2, #1
 8005884:	0552      	lsls	r2, r2, #21
 8005886:	4311      	orrs	r1, r2
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6852      	ldr	r2, [r2, #4]
 800588c:	3a01      	subs	r2, #1
 800588e:	0112      	lsls	r2, r2, #4
 8005890:	430a      	orrs	r2, r1
 8005892:	4921      	ldr	r1, [pc, #132]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005894:	4313      	orrs	r3, r2
 8005896:	610b      	str	r3, [r1, #16]
 8005898:	e014      	b.n	80058c4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800589a:	4b1f      	ldr	r3, [pc, #124]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 800589c:	691a      	ldr	r2, [r3, #16]
 800589e:	4b21      	ldr	r3, [pc, #132]	@ (8005924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058a0:	4013      	ands	r3, r2
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6892      	ldr	r2, [r2, #8]
 80058a6:	0211      	lsls	r1, r2, #8
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6952      	ldr	r2, [r2, #20]
 80058ac:	0852      	lsrs	r2, r2, #1
 80058ae:	3a01      	subs	r2, #1
 80058b0:	0652      	lsls	r2, r2, #25
 80058b2:	4311      	orrs	r1, r2
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6852      	ldr	r2, [r2, #4]
 80058b8:	3a01      	subs	r2, #1
 80058ba:	0112      	lsls	r2, r2, #4
 80058bc:	430a      	orrs	r2, r1
 80058be:	4916      	ldr	r1, [pc, #88]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80058c4:	4b14      	ldr	r3, [pc, #80]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a13      	ldr	r2, [pc, #76]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80058ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d0:	f7fc f98c 	bl	8001bec <HAL_GetTick>
 80058d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058d6:	e009      	b.n	80058ec <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058d8:	f7fc f988 	bl	8001bec <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d902      	bls.n	80058ec <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	73fb      	strb	r3, [r7, #15]
          break;
 80058ea:	e005      	b.n	80058f8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0ef      	beq.n	80058d8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80058fe:	4b06      	ldr	r3, [pc, #24]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005900:	691a      	ldr	r2, [r3, #16]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	4904      	ldr	r1, [pc, #16]	@ (8005918 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005908:	4313      	orrs	r3, r2
 800590a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800590c:	7bfb      	ldrb	r3, [r7, #15]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	40021000 	.word	0x40021000
 800591c:	07ff800f 	.word	0x07ff800f
 8005920:	ff9f800f 	.word	0xff9f800f
 8005924:	f9ff800f 	.word	0xf9ff800f

08005928 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005936:	4b72      	ldr	r3, [pc, #456]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00e      	beq.n	8005960 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005942:	4b6f      	ldr	r3, [pc, #444]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f003 0203 	and.w	r2, r3, #3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	429a      	cmp	r2, r3
 8005950:	d103      	bne.n	800595a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
       ||
 8005956:	2b00      	cmp	r3, #0
 8005958:	d142      	bne.n	80059e0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	73fb      	strb	r3, [r7, #15]
 800595e:	e03f      	b.n	80059e0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b03      	cmp	r3, #3
 8005966:	d018      	beq.n	800599a <RCCEx_PLLSAI2_Config+0x72>
 8005968:	2b03      	cmp	r3, #3
 800596a:	d825      	bhi.n	80059b8 <RCCEx_PLLSAI2_Config+0x90>
 800596c:	2b01      	cmp	r3, #1
 800596e:	d002      	beq.n	8005976 <RCCEx_PLLSAI2_Config+0x4e>
 8005970:	2b02      	cmp	r3, #2
 8005972:	d009      	beq.n	8005988 <RCCEx_PLLSAI2_Config+0x60>
 8005974:	e020      	b.n	80059b8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005976:	4b62      	ldr	r3, [pc, #392]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d11d      	bne.n	80059be <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005986:	e01a      	b.n	80059be <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005988:	4b5d      	ldr	r3, [pc, #372]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005990:	2b00      	cmp	r3, #0
 8005992:	d116      	bne.n	80059c2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005998:	e013      	b.n	80059c2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800599a:	4b59      	ldr	r3, [pc, #356]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10f      	bne.n	80059c6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059a6:	4b56      	ldr	r3, [pc, #344]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d109      	bne.n	80059c6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059b6:	e006      	b.n	80059c6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	73fb      	strb	r3, [r7, #15]
      break;
 80059bc:	e004      	b.n	80059c8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80059be:	bf00      	nop
 80059c0:	e002      	b.n	80059c8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80059c2:	bf00      	nop
 80059c4:	e000      	b.n	80059c8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80059c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d108      	bne.n	80059e0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80059ce:	4b4c      	ldr	r3, [pc, #304]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f023 0203 	bic.w	r2, r3, #3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4949      	ldr	r1, [pc, #292]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f040 8086 	bne.w	8005af4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80059e8:	4b45      	ldr	r3, [pc, #276]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a44      	ldr	r2, [pc, #272]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059f4:	f7fc f8fa 	bl	8001bec <HAL_GetTick>
 80059f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059fa:	e009      	b.n	8005a10 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059fc:	f7fc f8f6 	bl	8001bec <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d902      	bls.n	8005a10 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	73fb      	strb	r3, [r7, #15]
        break;
 8005a0e:	e005      	b.n	8005a1c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a10:	4b3b      	ldr	r3, [pc, #236]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1ef      	bne.n	80059fc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d168      	bne.n	8005af4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d113      	bne.n	8005a50 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a28:	4b35      	ldr	r3, [pc, #212]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a2a:	695a      	ldr	r2, [r3, #20]
 8005a2c:	4b35      	ldr	r3, [pc, #212]	@ (8005b04 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005a2e:	4013      	ands	r3, r2
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6892      	ldr	r2, [r2, #8]
 8005a34:	0211      	lsls	r1, r2, #8
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	68d2      	ldr	r2, [r2, #12]
 8005a3a:	06d2      	lsls	r2, r2, #27
 8005a3c:	4311      	orrs	r1, r2
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6852      	ldr	r2, [r2, #4]
 8005a42:	3a01      	subs	r2, #1
 8005a44:	0112      	lsls	r2, r2, #4
 8005a46:	430a      	orrs	r2, r1
 8005a48:	492d      	ldr	r1, [pc, #180]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	614b      	str	r3, [r1, #20]
 8005a4e:	e02d      	b.n	8005aac <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d115      	bne.n	8005a82 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a56:	4b2a      	ldr	r3, [pc, #168]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a58:	695a      	ldr	r2, [r3, #20]
 8005a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8005b08 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6892      	ldr	r2, [r2, #8]
 8005a62:	0211      	lsls	r1, r2, #8
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6912      	ldr	r2, [r2, #16]
 8005a68:	0852      	lsrs	r2, r2, #1
 8005a6a:	3a01      	subs	r2, #1
 8005a6c:	0552      	lsls	r2, r2, #21
 8005a6e:	4311      	orrs	r1, r2
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6852      	ldr	r2, [r2, #4]
 8005a74:	3a01      	subs	r2, #1
 8005a76:	0112      	lsls	r2, r2, #4
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	4921      	ldr	r1, [pc, #132]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	614b      	str	r3, [r1, #20]
 8005a80:	e014      	b.n	8005aac <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a82:	4b1f      	ldr	r3, [pc, #124]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a84:	695a      	ldr	r2, [r3, #20]
 8005a86:	4b21      	ldr	r3, [pc, #132]	@ (8005b0c <RCCEx_PLLSAI2_Config+0x1e4>)
 8005a88:	4013      	ands	r3, r2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6892      	ldr	r2, [r2, #8]
 8005a8e:	0211      	lsls	r1, r2, #8
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6952      	ldr	r2, [r2, #20]
 8005a94:	0852      	lsrs	r2, r2, #1
 8005a96:	3a01      	subs	r2, #1
 8005a98:	0652      	lsls	r2, r2, #25
 8005a9a:	4311      	orrs	r1, r2
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6852      	ldr	r2, [r2, #4]
 8005aa0:	3a01      	subs	r2, #1
 8005aa2:	0112      	lsls	r2, r2, #4
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	4916      	ldr	r1, [pc, #88]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005aac:	4b14      	ldr	r3, [pc, #80]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a13      	ldr	r2, [pc, #76]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ab2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ab6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab8:	f7fc f898 	bl	8001bec <HAL_GetTick>
 8005abc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005abe:	e009      	b.n	8005ad4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ac0:	f7fc f894 	bl	8001bec <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d902      	bls.n	8005ad4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	73fb      	strb	r3, [r7, #15]
          break;
 8005ad2:	e005      	b.n	8005ae0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0ef      	beq.n	8005ac0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d106      	bne.n	8005af4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005ae6:	4b06      	ldr	r3, [pc, #24]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ae8:	695a      	ldr	r2, [r3, #20]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	4904      	ldr	r1, [pc, #16]	@ (8005b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40021000 	.word	0x40021000
 8005b04:	07ff800f 	.word	0x07ff800f
 8005b08:	ff9f800f 	.word	0xff9f800f
 8005b0c:	f9ff800f 	.word	0xf9ff800f

08005b10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e095      	b.n	8005c4e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d108      	bne.n	8005b3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b32:	d009      	beq.n	8005b48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	61da      	str	r2, [r3, #28]
 8005b3a:	e005      	b.n	8005b48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d106      	bne.n	8005b68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7fb fd6a 	bl	800163c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b88:	d902      	bls.n	8005b90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	e002      	b.n	8005b96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005b9e:	d007      	beq.n	8005bb0 <HAL_SPI_Init+0xa0>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ba8:	d002      	beq.n	8005bb0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bde:	431a      	orrs	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005be8:	431a      	orrs	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf2:	ea42 0103 	orr.w	r1, r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bfa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	0c1b      	lsrs	r3, r3, #16
 8005c0c:	f003 0204 	and.w	r2, r3, #4
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c14:	f003 0310 	and.w	r3, r3, #16
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c1e:	f003 0308 	and.w	r3, r3, #8
 8005c22:	431a      	orrs	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005c2c:	ea42 0103 	orr.w	r1, r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b082      	sub	sp, #8
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e049      	b.n	8005cfc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d106      	bne.n	8005c82 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f841 	bl	8005d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4619      	mov	r1, r3
 8005c94:	4610      	mov	r0, r2
 8005c96:	f000 f9d9 	bl	800604c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d001      	beq.n	8005d30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e04f      	b.n	8005dd0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0201 	orr.w	r2, r2, #1
 8005d46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a23      	ldr	r2, [pc, #140]	@ (8005ddc <HAL_TIM_Base_Start_IT+0xc4>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d01d      	beq.n	8005d8e <HAL_TIM_Base_Start_IT+0x76>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d5a:	d018      	beq.n	8005d8e <HAL_TIM_Base_Start_IT+0x76>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a1f      	ldr	r2, [pc, #124]	@ (8005de0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d013      	beq.n	8005d8e <HAL_TIM_Base_Start_IT+0x76>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a1e      	ldr	r2, [pc, #120]	@ (8005de4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00e      	beq.n	8005d8e <HAL_TIM_Base_Start_IT+0x76>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a1c      	ldr	r2, [pc, #112]	@ (8005de8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d009      	beq.n	8005d8e <HAL_TIM_Base_Start_IT+0x76>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8005dec <HAL_TIM_Base_Start_IT+0xd4>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d004      	beq.n	8005d8e <HAL_TIM_Base_Start_IT+0x76>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a19      	ldr	r2, [pc, #100]	@ (8005df0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d115      	bne.n	8005dba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	4b17      	ldr	r3, [pc, #92]	@ (8005df4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2b06      	cmp	r3, #6
 8005d9e:	d015      	beq.n	8005dcc <HAL_TIM_Base_Start_IT+0xb4>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005da6:	d011      	beq.n	8005dcc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0201 	orr.w	r2, r2, #1
 8005db6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db8:	e008      	b.n	8005dcc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f042 0201 	orr.w	r2, r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	e000      	b.n	8005dce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dcc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	40012c00 	.word	0x40012c00
 8005de0:	40000400 	.word	0x40000400
 8005de4:	40000800 	.word	0x40000800
 8005de8:	40000c00 	.word	0x40000c00
 8005dec:	40013400 	.word	0x40013400
 8005df0:	40014000 	.word	0x40014000
 8005df4:	00010007 	.word	0x00010007

08005df8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d020      	beq.n	8005e5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d01b      	beq.n	8005e5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0202 	mvn.w	r2, #2
 8005e2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f8e4 	bl	8006010 <HAL_TIM_IC_CaptureCallback>
 8005e48:	e005      	b.n	8005e56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f8d6 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f8e7 	bl	8006024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f003 0304 	and.w	r3, r3, #4
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d020      	beq.n	8005ea8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01b      	beq.n	8005ea8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f06f 0204 	mvn.w	r2, #4
 8005e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f8be 	bl	8006010 <HAL_TIM_IC_CaptureCallback>
 8005e94:	e005      	b.n	8005ea2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f8b0 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f8c1 	bl	8006024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f003 0308 	and.w	r3, r3, #8
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d020      	beq.n	8005ef4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f003 0308 	and.w	r3, r3, #8
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d01b      	beq.n	8005ef4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f06f 0208 	mvn.w	r2, #8
 8005ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2204      	movs	r2, #4
 8005eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f898 	bl	8006010 <HAL_TIM_IC_CaptureCallback>
 8005ee0:	e005      	b.n	8005eee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f88a 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f89b 	bl	8006024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f003 0310 	and.w	r3, r3, #16
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d020      	beq.n	8005f40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f003 0310 	and.w	r3, r3, #16
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d01b      	beq.n	8005f40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f06f 0210 	mvn.w	r2, #16
 8005f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2208      	movs	r2, #8
 8005f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f872 	bl	8006010 <HAL_TIM_IC_CaptureCallback>
 8005f2c:	e005      	b.n	8005f3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f864 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f875 	bl	8006024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00c      	beq.n	8005f64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d007      	beq.n	8005f64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f06f 0201 	mvn.w	r2, #1
 8005f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fb f97a 	bl	8001258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00c      	beq.n	8005f88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d007      	beq.n	8005f88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f906 	bl	8006194 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00c      	beq.n	8005fac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d007      	beq.n	8005fac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f8fe 	bl	80061a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00c      	beq.n	8005fd0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d007      	beq.n	8005fd0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f834 	bl	8006038 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f003 0320 	and.w	r3, r3, #32
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00c      	beq.n	8005ff4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f003 0320 	and.w	r3, r3, #32
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d007      	beq.n	8005ff4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f06f 0220 	mvn.w	r2, #32
 8005fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f8c6 	bl	8006180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ff4:	bf00      	nop
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a40      	ldr	r2, [pc, #256]	@ (8006160 <TIM_Base_SetConfig+0x114>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d013      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800606a:	d00f      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a3d      	ldr	r2, [pc, #244]	@ (8006164 <TIM_Base_SetConfig+0x118>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00b      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a3c      	ldr	r2, [pc, #240]	@ (8006168 <TIM_Base_SetConfig+0x11c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d007      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a3b      	ldr	r2, [pc, #236]	@ (800616c <TIM_Base_SetConfig+0x120>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d003      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a3a      	ldr	r2, [pc, #232]	@ (8006170 <TIM_Base_SetConfig+0x124>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d108      	bne.n	800609e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4313      	orrs	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a2f      	ldr	r2, [pc, #188]	@ (8006160 <TIM_Base_SetConfig+0x114>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d01f      	beq.n	80060e6 <TIM_Base_SetConfig+0x9a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ac:	d01b      	beq.n	80060e6 <TIM_Base_SetConfig+0x9a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a2c      	ldr	r2, [pc, #176]	@ (8006164 <TIM_Base_SetConfig+0x118>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d017      	beq.n	80060e6 <TIM_Base_SetConfig+0x9a>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a2b      	ldr	r2, [pc, #172]	@ (8006168 <TIM_Base_SetConfig+0x11c>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d013      	beq.n	80060e6 <TIM_Base_SetConfig+0x9a>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a2a      	ldr	r2, [pc, #168]	@ (800616c <TIM_Base_SetConfig+0x120>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00f      	beq.n	80060e6 <TIM_Base_SetConfig+0x9a>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a29      	ldr	r2, [pc, #164]	@ (8006170 <TIM_Base_SetConfig+0x124>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d00b      	beq.n	80060e6 <TIM_Base_SetConfig+0x9a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a28      	ldr	r2, [pc, #160]	@ (8006174 <TIM_Base_SetConfig+0x128>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d007      	beq.n	80060e6 <TIM_Base_SetConfig+0x9a>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a27      	ldr	r2, [pc, #156]	@ (8006178 <TIM_Base_SetConfig+0x12c>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d003      	beq.n	80060e6 <TIM_Base_SetConfig+0x9a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a26      	ldr	r2, [pc, #152]	@ (800617c <TIM_Base_SetConfig+0x130>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d108      	bne.n	80060f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	4313      	orrs	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a10      	ldr	r2, [pc, #64]	@ (8006160 <TIM_Base_SetConfig+0x114>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d00f      	beq.n	8006144 <TIM_Base_SetConfig+0xf8>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a12      	ldr	r2, [pc, #72]	@ (8006170 <TIM_Base_SetConfig+0x124>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d00b      	beq.n	8006144 <TIM_Base_SetConfig+0xf8>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a11      	ldr	r2, [pc, #68]	@ (8006174 <TIM_Base_SetConfig+0x128>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d007      	beq.n	8006144 <TIM_Base_SetConfig+0xf8>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a10      	ldr	r2, [pc, #64]	@ (8006178 <TIM_Base_SetConfig+0x12c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d003      	beq.n	8006144 <TIM_Base_SetConfig+0xf8>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a0f      	ldr	r2, [pc, #60]	@ (800617c <TIM_Base_SetConfig+0x130>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d103      	bne.n	800614c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	691a      	ldr	r2, [r3, #16]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	615a      	str	r2, [r3, #20]
}
 8006152:	bf00      	nop
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	40012c00 	.word	0x40012c00
 8006164:	40000400 	.word	0x40000400
 8006168:	40000800 	.word	0x40000800
 800616c:	40000c00 	.word	0x40000c00
 8006170:	40013400 	.word	0x40013400
 8006174:	40014000 	.word	0x40014000
 8006178:	40014400 	.word	0x40014400
 800617c:	40014800 	.word	0x40014800

08006180 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e042      	b.n	8006254 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d106      	bne.n	80061e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7fb fa6f 	bl	80016c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2224      	movs	r2, #36	@ 0x24
 80061ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 0201 	bic.w	r2, r2, #1
 80061fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006202:	2b00      	cmp	r3, #0
 8006204:	d002      	beq.n	800620c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fc7c 	bl	8006b04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f97d 	bl	800650c <UART_SetConfig>
 8006212:	4603      	mov	r3, r0
 8006214:	2b01      	cmp	r3, #1
 8006216:	d101      	bne.n	800621c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e01b      	b.n	8006254 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800622a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689a      	ldr	r2, [r3, #8]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800623a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f042 0201 	orr.w	r2, r2, #1
 800624a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fcfb 	bl	8006c48 <UART_CheckIdleState>
 8006252:	4603      	mov	r3, r0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08a      	sub	sp, #40	@ 0x28
 8006260:	af02      	add	r7, sp, #8
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	4613      	mov	r3, r2
 800626a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006272:	2b20      	cmp	r3, #32
 8006274:	d17b      	bne.n	800636e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <HAL_UART_Transmit+0x26>
 800627c:	88fb      	ldrh	r3, [r7, #6]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e074      	b.n	8006370 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2221      	movs	r2, #33	@ 0x21
 8006292:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006296:	f7fb fca9 	bl	8001bec <HAL_GetTick>
 800629a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	88fa      	ldrh	r2, [r7, #6]
 80062a0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	88fa      	ldrh	r2, [r7, #6]
 80062a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062b4:	d108      	bne.n	80062c8 <HAL_UART_Transmit+0x6c>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d104      	bne.n	80062c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80062be:	2300      	movs	r3, #0
 80062c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	61bb      	str	r3, [r7, #24]
 80062c6:	e003      	b.n	80062d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062cc:	2300      	movs	r3, #0
 80062ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062d0:	e030      	b.n	8006334 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2200      	movs	r2, #0
 80062da:	2180      	movs	r1, #128	@ 0x80
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 fd5d 	bl	8006d9c <UART_WaitOnFlagUntilTimeout>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d005      	beq.n	80062f4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e03d      	b.n	8006370 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10b      	bne.n	8006312 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	881a      	ldrh	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006306:	b292      	uxth	r2, r2
 8006308:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	3302      	adds	r3, #2
 800630e:	61bb      	str	r3, [r7, #24]
 8006310:	e007      	b.n	8006322 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	781a      	ldrb	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	3301      	adds	r3, #1
 8006320:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006328:	b29b      	uxth	r3, r3
 800632a:	3b01      	subs	r3, #1
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800633a:	b29b      	uxth	r3, r3
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1c8      	bne.n	80062d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	2200      	movs	r2, #0
 8006348:	2140      	movs	r1, #64	@ 0x40
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 fd26 	bl	8006d9c <UART_WaitOnFlagUntilTimeout>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d005      	beq.n	8006362 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2220      	movs	r2, #32
 800635a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e006      	b.n	8006370 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2220      	movs	r2, #32
 8006366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	e000      	b.n	8006370 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800636e:	2302      	movs	r3, #2
  }
}
 8006370:	4618      	mov	r0, r3
 8006372:	3720      	adds	r7, #32
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08a      	sub	sp, #40	@ 0x28
 800637c:	af02      	add	r7, sp, #8
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	603b      	str	r3, [r7, #0]
 8006384:	4613      	mov	r3, r2
 8006386:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800638e:	2b20      	cmp	r3, #32
 8006390:	f040 80b6 	bne.w	8006500 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <HAL_UART_Receive+0x28>
 800639a:	88fb      	ldrh	r3, [r7, #6]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e0ae      	b.n	8006502 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2222      	movs	r2, #34	@ 0x22
 80063b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063ba:	f7fb fc17 	bl	8001bec <HAL_GetTick>
 80063be:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	88fa      	ldrh	r2, [r7, #6]
 80063c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	88fa      	ldrh	r2, [r7, #6]
 80063cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063d8:	d10e      	bne.n	80063f8 <HAL_UART_Receive+0x80>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d105      	bne.n	80063ee <HAL_UART_Receive+0x76>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80063e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80063ec:	e02d      	b.n	800644a <HAL_UART_Receive+0xd2>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	22ff      	movs	r2, #255	@ 0xff
 80063f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80063f6:	e028      	b.n	800644a <HAL_UART_Receive+0xd2>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10d      	bne.n	800641c <HAL_UART_Receive+0xa4>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d104      	bne.n	8006412 <HAL_UART_Receive+0x9a>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	22ff      	movs	r2, #255	@ 0xff
 800640c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006410:	e01b      	b.n	800644a <HAL_UART_Receive+0xd2>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	227f      	movs	r2, #127	@ 0x7f
 8006416:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800641a:	e016      	b.n	800644a <HAL_UART_Receive+0xd2>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006424:	d10d      	bne.n	8006442 <HAL_UART_Receive+0xca>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d104      	bne.n	8006438 <HAL_UART_Receive+0xc0>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	227f      	movs	r2, #127	@ 0x7f
 8006432:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006436:	e008      	b.n	800644a <HAL_UART_Receive+0xd2>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	223f      	movs	r2, #63	@ 0x3f
 800643c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006440:	e003      	b.n	800644a <HAL_UART_Receive+0xd2>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006450:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800645a:	d108      	bne.n	800646e <HAL_UART_Receive+0xf6>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d104      	bne.n	800646e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006464:	2300      	movs	r3, #0
 8006466:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	61bb      	str	r3, [r7, #24]
 800646c:	e003      	b.n	8006476 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006472:	2300      	movs	r3, #0
 8006474:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006476:	e037      	b.n	80064e8 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2200      	movs	r2, #0
 8006480:	2120      	movs	r1, #32
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 fc8a 	bl	8006d9c <UART_WaitOnFlagUntilTimeout>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d005      	beq.n	800649a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2220      	movs	r2, #32
 8006492:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e033      	b.n	8006502 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10c      	bne.n	80064ba <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	8a7b      	ldrh	r3, [r7, #18]
 80064aa:	4013      	ands	r3, r2
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	3302      	adds	r3, #2
 80064b6:	61bb      	str	r3, [r7, #24]
 80064b8:	e00d      	b.n	80064d6 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	8a7b      	ldrh	r3, [r7, #18]
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	4013      	ands	r3, r2
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	3301      	adds	r3, #1
 80064d4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064dc:	b29b      	uxth	r3, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1c1      	bne.n	8006478 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2220      	movs	r2, #32
 80064f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	e000      	b.n	8006502 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006500:	2302      	movs	r3, #2
  }
}
 8006502:	4618      	mov	r0, r3
 8006504:	3720      	adds	r7, #32
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
	...

0800650c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800650c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006510:	b08c      	sub	sp, #48	@ 0x30
 8006512:	af00      	add	r7, sp, #0
 8006514:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	431a      	orrs	r2, r3
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	431a      	orrs	r2, r3
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	4313      	orrs	r3, r2
 8006532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	4baa      	ldr	r3, [pc, #680]	@ (80067e4 <UART_SetConfig+0x2d8>)
 800653c:	4013      	ands	r3, r2
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	6812      	ldr	r2, [r2, #0]
 8006542:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006544:	430b      	orrs	r3, r1
 8006546:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	68da      	ldr	r2, [r3, #12]
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a9f      	ldr	r2, [pc, #636]	@ (80067e8 <UART_SetConfig+0x2dc>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d004      	beq.n	8006578 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006574:	4313      	orrs	r3, r2
 8006576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006582:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	6812      	ldr	r2, [r2, #0]
 800658a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800658c:	430b      	orrs	r3, r1
 800658e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006596:	f023 010f 	bic.w	r1, r3, #15
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a90      	ldr	r2, [pc, #576]	@ (80067ec <UART_SetConfig+0x2e0>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d125      	bne.n	80065fc <UART_SetConfig+0xf0>
 80065b0:	4b8f      	ldr	r3, [pc, #572]	@ (80067f0 <UART_SetConfig+0x2e4>)
 80065b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065b6:	f003 0303 	and.w	r3, r3, #3
 80065ba:	2b03      	cmp	r3, #3
 80065bc:	d81a      	bhi.n	80065f4 <UART_SetConfig+0xe8>
 80065be:	a201      	add	r2, pc, #4	@ (adr r2, 80065c4 <UART_SetConfig+0xb8>)
 80065c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c4:	080065d5 	.word	0x080065d5
 80065c8:	080065e5 	.word	0x080065e5
 80065cc:	080065dd 	.word	0x080065dd
 80065d0:	080065ed 	.word	0x080065ed
 80065d4:	2301      	movs	r3, #1
 80065d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065da:	e116      	b.n	800680a <UART_SetConfig+0x2fe>
 80065dc:	2302      	movs	r3, #2
 80065de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065e2:	e112      	b.n	800680a <UART_SetConfig+0x2fe>
 80065e4:	2304      	movs	r3, #4
 80065e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ea:	e10e      	b.n	800680a <UART_SetConfig+0x2fe>
 80065ec:	2308      	movs	r3, #8
 80065ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065f2:	e10a      	b.n	800680a <UART_SetConfig+0x2fe>
 80065f4:	2310      	movs	r3, #16
 80065f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065fa:	e106      	b.n	800680a <UART_SetConfig+0x2fe>
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a7c      	ldr	r2, [pc, #496]	@ (80067f4 <UART_SetConfig+0x2e8>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d138      	bne.n	8006678 <UART_SetConfig+0x16c>
 8006606:	4b7a      	ldr	r3, [pc, #488]	@ (80067f0 <UART_SetConfig+0x2e4>)
 8006608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800660c:	f003 030c 	and.w	r3, r3, #12
 8006610:	2b0c      	cmp	r3, #12
 8006612:	d82d      	bhi.n	8006670 <UART_SetConfig+0x164>
 8006614:	a201      	add	r2, pc, #4	@ (adr r2, 800661c <UART_SetConfig+0x110>)
 8006616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661a:	bf00      	nop
 800661c:	08006651 	.word	0x08006651
 8006620:	08006671 	.word	0x08006671
 8006624:	08006671 	.word	0x08006671
 8006628:	08006671 	.word	0x08006671
 800662c:	08006661 	.word	0x08006661
 8006630:	08006671 	.word	0x08006671
 8006634:	08006671 	.word	0x08006671
 8006638:	08006671 	.word	0x08006671
 800663c:	08006659 	.word	0x08006659
 8006640:	08006671 	.word	0x08006671
 8006644:	08006671 	.word	0x08006671
 8006648:	08006671 	.word	0x08006671
 800664c:	08006669 	.word	0x08006669
 8006650:	2300      	movs	r3, #0
 8006652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006656:	e0d8      	b.n	800680a <UART_SetConfig+0x2fe>
 8006658:	2302      	movs	r3, #2
 800665a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800665e:	e0d4      	b.n	800680a <UART_SetConfig+0x2fe>
 8006660:	2304      	movs	r3, #4
 8006662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006666:	e0d0      	b.n	800680a <UART_SetConfig+0x2fe>
 8006668:	2308      	movs	r3, #8
 800666a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800666e:	e0cc      	b.n	800680a <UART_SetConfig+0x2fe>
 8006670:	2310      	movs	r3, #16
 8006672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006676:	e0c8      	b.n	800680a <UART_SetConfig+0x2fe>
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a5e      	ldr	r2, [pc, #376]	@ (80067f8 <UART_SetConfig+0x2ec>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d125      	bne.n	80066ce <UART_SetConfig+0x1c2>
 8006682:	4b5b      	ldr	r3, [pc, #364]	@ (80067f0 <UART_SetConfig+0x2e4>)
 8006684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006688:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800668c:	2b30      	cmp	r3, #48	@ 0x30
 800668e:	d016      	beq.n	80066be <UART_SetConfig+0x1b2>
 8006690:	2b30      	cmp	r3, #48	@ 0x30
 8006692:	d818      	bhi.n	80066c6 <UART_SetConfig+0x1ba>
 8006694:	2b20      	cmp	r3, #32
 8006696:	d00a      	beq.n	80066ae <UART_SetConfig+0x1a2>
 8006698:	2b20      	cmp	r3, #32
 800669a:	d814      	bhi.n	80066c6 <UART_SetConfig+0x1ba>
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <UART_SetConfig+0x19a>
 80066a0:	2b10      	cmp	r3, #16
 80066a2:	d008      	beq.n	80066b6 <UART_SetConfig+0x1aa>
 80066a4:	e00f      	b.n	80066c6 <UART_SetConfig+0x1ba>
 80066a6:	2300      	movs	r3, #0
 80066a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ac:	e0ad      	b.n	800680a <UART_SetConfig+0x2fe>
 80066ae:	2302      	movs	r3, #2
 80066b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066b4:	e0a9      	b.n	800680a <UART_SetConfig+0x2fe>
 80066b6:	2304      	movs	r3, #4
 80066b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066bc:	e0a5      	b.n	800680a <UART_SetConfig+0x2fe>
 80066be:	2308      	movs	r3, #8
 80066c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066c4:	e0a1      	b.n	800680a <UART_SetConfig+0x2fe>
 80066c6:	2310      	movs	r3, #16
 80066c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066cc:	e09d      	b.n	800680a <UART_SetConfig+0x2fe>
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a4a      	ldr	r2, [pc, #296]	@ (80067fc <UART_SetConfig+0x2f0>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d125      	bne.n	8006724 <UART_SetConfig+0x218>
 80066d8:	4b45      	ldr	r3, [pc, #276]	@ (80067f0 <UART_SetConfig+0x2e4>)
 80066da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80066e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80066e4:	d016      	beq.n	8006714 <UART_SetConfig+0x208>
 80066e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80066e8:	d818      	bhi.n	800671c <UART_SetConfig+0x210>
 80066ea:	2b80      	cmp	r3, #128	@ 0x80
 80066ec:	d00a      	beq.n	8006704 <UART_SetConfig+0x1f8>
 80066ee:	2b80      	cmp	r3, #128	@ 0x80
 80066f0:	d814      	bhi.n	800671c <UART_SetConfig+0x210>
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <UART_SetConfig+0x1f0>
 80066f6:	2b40      	cmp	r3, #64	@ 0x40
 80066f8:	d008      	beq.n	800670c <UART_SetConfig+0x200>
 80066fa:	e00f      	b.n	800671c <UART_SetConfig+0x210>
 80066fc:	2300      	movs	r3, #0
 80066fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006702:	e082      	b.n	800680a <UART_SetConfig+0x2fe>
 8006704:	2302      	movs	r3, #2
 8006706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800670a:	e07e      	b.n	800680a <UART_SetConfig+0x2fe>
 800670c:	2304      	movs	r3, #4
 800670e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006712:	e07a      	b.n	800680a <UART_SetConfig+0x2fe>
 8006714:	2308      	movs	r3, #8
 8006716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800671a:	e076      	b.n	800680a <UART_SetConfig+0x2fe>
 800671c:	2310      	movs	r3, #16
 800671e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006722:	e072      	b.n	800680a <UART_SetConfig+0x2fe>
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a35      	ldr	r2, [pc, #212]	@ (8006800 <UART_SetConfig+0x2f4>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d12a      	bne.n	8006784 <UART_SetConfig+0x278>
 800672e:	4b30      	ldr	r3, [pc, #192]	@ (80067f0 <UART_SetConfig+0x2e4>)
 8006730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006734:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006738:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800673c:	d01a      	beq.n	8006774 <UART_SetConfig+0x268>
 800673e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006742:	d81b      	bhi.n	800677c <UART_SetConfig+0x270>
 8006744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006748:	d00c      	beq.n	8006764 <UART_SetConfig+0x258>
 800674a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800674e:	d815      	bhi.n	800677c <UART_SetConfig+0x270>
 8006750:	2b00      	cmp	r3, #0
 8006752:	d003      	beq.n	800675c <UART_SetConfig+0x250>
 8006754:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006758:	d008      	beq.n	800676c <UART_SetConfig+0x260>
 800675a:	e00f      	b.n	800677c <UART_SetConfig+0x270>
 800675c:	2300      	movs	r3, #0
 800675e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006762:	e052      	b.n	800680a <UART_SetConfig+0x2fe>
 8006764:	2302      	movs	r3, #2
 8006766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800676a:	e04e      	b.n	800680a <UART_SetConfig+0x2fe>
 800676c:	2304      	movs	r3, #4
 800676e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006772:	e04a      	b.n	800680a <UART_SetConfig+0x2fe>
 8006774:	2308      	movs	r3, #8
 8006776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800677a:	e046      	b.n	800680a <UART_SetConfig+0x2fe>
 800677c:	2310      	movs	r3, #16
 800677e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006782:	e042      	b.n	800680a <UART_SetConfig+0x2fe>
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a17      	ldr	r2, [pc, #92]	@ (80067e8 <UART_SetConfig+0x2dc>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d13a      	bne.n	8006804 <UART_SetConfig+0x2f8>
 800678e:	4b18      	ldr	r3, [pc, #96]	@ (80067f0 <UART_SetConfig+0x2e4>)
 8006790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006794:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006798:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800679c:	d01a      	beq.n	80067d4 <UART_SetConfig+0x2c8>
 800679e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067a2:	d81b      	bhi.n	80067dc <UART_SetConfig+0x2d0>
 80067a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067a8:	d00c      	beq.n	80067c4 <UART_SetConfig+0x2b8>
 80067aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067ae:	d815      	bhi.n	80067dc <UART_SetConfig+0x2d0>
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d003      	beq.n	80067bc <UART_SetConfig+0x2b0>
 80067b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067b8:	d008      	beq.n	80067cc <UART_SetConfig+0x2c0>
 80067ba:	e00f      	b.n	80067dc <UART_SetConfig+0x2d0>
 80067bc:	2300      	movs	r3, #0
 80067be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067c2:	e022      	b.n	800680a <UART_SetConfig+0x2fe>
 80067c4:	2302      	movs	r3, #2
 80067c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ca:	e01e      	b.n	800680a <UART_SetConfig+0x2fe>
 80067cc:	2304      	movs	r3, #4
 80067ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067d2:	e01a      	b.n	800680a <UART_SetConfig+0x2fe>
 80067d4:	2308      	movs	r3, #8
 80067d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067da:	e016      	b.n	800680a <UART_SetConfig+0x2fe>
 80067dc:	2310      	movs	r3, #16
 80067de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067e2:	e012      	b.n	800680a <UART_SetConfig+0x2fe>
 80067e4:	cfff69f3 	.word	0xcfff69f3
 80067e8:	40008000 	.word	0x40008000
 80067ec:	40013800 	.word	0x40013800
 80067f0:	40021000 	.word	0x40021000
 80067f4:	40004400 	.word	0x40004400
 80067f8:	40004800 	.word	0x40004800
 80067fc:	40004c00 	.word	0x40004c00
 8006800:	40005000 	.word	0x40005000
 8006804:	2310      	movs	r3, #16
 8006806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4aae      	ldr	r2, [pc, #696]	@ (8006ac8 <UART_SetConfig+0x5bc>)
 8006810:	4293      	cmp	r3, r2
 8006812:	f040 8097 	bne.w	8006944 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006816:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800681a:	2b08      	cmp	r3, #8
 800681c:	d823      	bhi.n	8006866 <UART_SetConfig+0x35a>
 800681e:	a201      	add	r2, pc, #4	@ (adr r2, 8006824 <UART_SetConfig+0x318>)
 8006820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006824:	08006849 	.word	0x08006849
 8006828:	08006867 	.word	0x08006867
 800682c:	08006851 	.word	0x08006851
 8006830:	08006867 	.word	0x08006867
 8006834:	08006857 	.word	0x08006857
 8006838:	08006867 	.word	0x08006867
 800683c:	08006867 	.word	0x08006867
 8006840:	08006867 	.word	0x08006867
 8006844:	0800685f 	.word	0x0800685f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006848:	f7fe fb1c 	bl	8004e84 <HAL_RCC_GetPCLK1Freq>
 800684c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800684e:	e010      	b.n	8006872 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006850:	4b9e      	ldr	r3, [pc, #632]	@ (8006acc <UART_SetConfig+0x5c0>)
 8006852:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006854:	e00d      	b.n	8006872 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006856:	f7fe fa7d 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 800685a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800685c:	e009      	b.n	8006872 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800685e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006862:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006864:	e005      	b.n	8006872 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006870:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 8130 	beq.w	8006ada <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687e:	4a94      	ldr	r2, [pc, #592]	@ (8006ad0 <UART_SetConfig+0x5c4>)
 8006880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006884:	461a      	mov	r2, r3
 8006886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006888:	fbb3 f3f2 	udiv	r3, r3, r2
 800688c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	4613      	mov	r3, r2
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	4413      	add	r3, r2
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	429a      	cmp	r2, r3
 800689c:	d305      	bcc.n	80068aa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d903      	bls.n	80068b2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80068b0:	e113      	b.n	8006ada <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b4:	2200      	movs	r2, #0
 80068b6:	60bb      	str	r3, [r7, #8]
 80068b8:	60fa      	str	r2, [r7, #12]
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068be:	4a84      	ldr	r2, [pc, #528]	@ (8006ad0 <UART_SetConfig+0x5c4>)
 80068c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	2200      	movs	r2, #0
 80068c8:	603b      	str	r3, [r7, #0]
 80068ca:	607a      	str	r2, [r7, #4]
 80068cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068d4:	f7f9 fce4 	bl	80002a0 <__aeabi_uldivmod>
 80068d8:	4602      	mov	r2, r0
 80068da:	460b      	mov	r3, r1
 80068dc:	4610      	mov	r0, r2
 80068de:	4619      	mov	r1, r3
 80068e0:	f04f 0200 	mov.w	r2, #0
 80068e4:	f04f 0300 	mov.w	r3, #0
 80068e8:	020b      	lsls	r3, r1, #8
 80068ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80068ee:	0202      	lsls	r2, r0, #8
 80068f0:	6979      	ldr	r1, [r7, #20]
 80068f2:	6849      	ldr	r1, [r1, #4]
 80068f4:	0849      	lsrs	r1, r1, #1
 80068f6:	2000      	movs	r0, #0
 80068f8:	460c      	mov	r4, r1
 80068fa:	4605      	mov	r5, r0
 80068fc:	eb12 0804 	adds.w	r8, r2, r4
 8006900:	eb43 0905 	adc.w	r9, r3, r5
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	469a      	mov	sl, r3
 800690c:	4693      	mov	fp, r2
 800690e:	4652      	mov	r2, sl
 8006910:	465b      	mov	r3, fp
 8006912:	4640      	mov	r0, r8
 8006914:	4649      	mov	r1, r9
 8006916:	f7f9 fcc3 	bl	80002a0 <__aeabi_uldivmod>
 800691a:	4602      	mov	r2, r0
 800691c:	460b      	mov	r3, r1
 800691e:	4613      	mov	r3, r2
 8006920:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006928:	d308      	bcc.n	800693c <UART_SetConfig+0x430>
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006930:	d204      	bcs.n	800693c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6a3a      	ldr	r2, [r7, #32]
 8006938:	60da      	str	r2, [r3, #12]
 800693a:	e0ce      	b.n	8006ada <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006942:	e0ca      	b.n	8006ada <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800694c:	d166      	bne.n	8006a1c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800694e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006952:	2b08      	cmp	r3, #8
 8006954:	d827      	bhi.n	80069a6 <UART_SetConfig+0x49a>
 8006956:	a201      	add	r2, pc, #4	@ (adr r2, 800695c <UART_SetConfig+0x450>)
 8006958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695c:	08006981 	.word	0x08006981
 8006960:	08006989 	.word	0x08006989
 8006964:	08006991 	.word	0x08006991
 8006968:	080069a7 	.word	0x080069a7
 800696c:	08006997 	.word	0x08006997
 8006970:	080069a7 	.word	0x080069a7
 8006974:	080069a7 	.word	0x080069a7
 8006978:	080069a7 	.word	0x080069a7
 800697c:	0800699f 	.word	0x0800699f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006980:	f7fe fa80 	bl	8004e84 <HAL_RCC_GetPCLK1Freq>
 8006984:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006986:	e014      	b.n	80069b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006988:	f7fe fa92 	bl	8004eb0 <HAL_RCC_GetPCLK2Freq>
 800698c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800698e:	e010      	b.n	80069b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006990:	4b4e      	ldr	r3, [pc, #312]	@ (8006acc <UART_SetConfig+0x5c0>)
 8006992:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006994:	e00d      	b.n	80069b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006996:	f7fe f9dd 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 800699a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800699c:	e009      	b.n	80069b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800699e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80069a4:	e005      	b.n	80069b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80069a6:	2300      	movs	r3, #0
 80069a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80069b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f000 8090 	beq.w	8006ada <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069be:	4a44      	ldr	r2, [pc, #272]	@ (8006ad0 <UART_SetConfig+0x5c4>)
 80069c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069c4:	461a      	mov	r2, r3
 80069c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80069cc:	005a      	lsls	r2, r3, #1
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	085b      	lsrs	r3, r3, #1
 80069d4:	441a      	add	r2, r3
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	fbb2 f3f3 	udiv	r3, r2, r3
 80069de:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	2b0f      	cmp	r3, #15
 80069e4:	d916      	bls.n	8006a14 <UART_SetConfig+0x508>
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069ec:	d212      	bcs.n	8006a14 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	f023 030f 	bic.w	r3, r3, #15
 80069f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	085b      	lsrs	r3, r3, #1
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	f003 0307 	and.w	r3, r3, #7
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	8bfb      	ldrh	r3, [r7, #30]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	8bfa      	ldrh	r2, [r7, #30]
 8006a10:	60da      	str	r2, [r3, #12]
 8006a12:	e062      	b.n	8006ada <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a1a:	e05e      	b.n	8006ada <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d828      	bhi.n	8006a76 <UART_SetConfig+0x56a>
 8006a24:	a201      	add	r2, pc, #4	@ (adr r2, 8006a2c <UART_SetConfig+0x520>)
 8006a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2a:	bf00      	nop
 8006a2c:	08006a51 	.word	0x08006a51
 8006a30:	08006a59 	.word	0x08006a59
 8006a34:	08006a61 	.word	0x08006a61
 8006a38:	08006a77 	.word	0x08006a77
 8006a3c:	08006a67 	.word	0x08006a67
 8006a40:	08006a77 	.word	0x08006a77
 8006a44:	08006a77 	.word	0x08006a77
 8006a48:	08006a77 	.word	0x08006a77
 8006a4c:	08006a6f 	.word	0x08006a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a50:	f7fe fa18 	bl	8004e84 <HAL_RCC_GetPCLK1Freq>
 8006a54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a56:	e014      	b.n	8006a82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a58:	f7fe fa2a 	bl	8004eb0 <HAL_RCC_GetPCLK2Freq>
 8006a5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a5e:	e010      	b.n	8006a82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a60:	4b1a      	ldr	r3, [pc, #104]	@ (8006acc <UART_SetConfig+0x5c0>)
 8006a62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a64:	e00d      	b.n	8006a82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a66:	f7fe f975 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 8006a6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a6c:	e009      	b.n	8006a82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a74:	e005      	b.n	8006a82 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a80:	bf00      	nop
    }

    if (pclk != 0U)
 8006a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d028      	beq.n	8006ada <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8c:	4a10      	ldr	r2, [pc, #64]	@ (8006ad0 <UART_SetConfig+0x5c4>)
 8006a8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a92:	461a      	mov	r2, r3
 8006a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a96:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	085b      	lsrs	r3, r3, #1
 8006aa0:	441a      	add	r2, r3
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aaa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	2b0f      	cmp	r3, #15
 8006ab0:	d910      	bls.n	8006ad4 <UART_SetConfig+0x5c8>
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ab8:	d20c      	bcs.n	8006ad4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	60da      	str	r2, [r3, #12]
 8006ac4:	e009      	b.n	8006ada <UART_SetConfig+0x5ce>
 8006ac6:	bf00      	nop
 8006ac8:	40008000 	.word	0x40008000
 8006acc:	00f42400 	.word	0x00f42400
 8006ad0:	0800b8e4 	.word	0x0800b8e4
      }
      else
      {
        ret = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	2200      	movs	r2, #0
 8006aee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	2200      	movs	r2, #0
 8006af4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006af6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3730      	adds	r7, #48	@ 0x30
 8006afe:	46bd      	mov	sp, r7
 8006b00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006b04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b10:	f003 0308 	and.w	r3, r3, #8
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00a      	beq.n	8006b2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00a      	beq.n	8006b72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b76:	f003 0304 	and.w	r3, r3, #4
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b98:	f003 0310 	and.w	r3, r3, #16
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00a      	beq.n	8006bb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bba:	f003 0320 	and.w	r3, r3, #32
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00a      	beq.n	8006bd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d01a      	beq.n	8006c1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c02:	d10a      	bne.n	8006c1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00a      	beq.n	8006c3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	605a      	str	r2, [r3, #4]
  }
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b098      	sub	sp, #96	@ 0x60
 8006c4c:	af02      	add	r7, sp, #8
 8006c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c58:	f7fa ffc8 	bl	8001bec <HAL_GetTick>
 8006c5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0308 	and.w	r3, r3, #8
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d12f      	bne.n	8006ccc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c74:	2200      	movs	r2, #0
 8006c76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f88e 	bl	8006d9c <UART_WaitOnFlagUntilTimeout>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d022      	beq.n	8006ccc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c8e:	e853 3f00 	ldrex	r3, [r3]
 8006c92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ca6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006caa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cac:	e841 2300 	strex	r3, r2, [r1]
 8006cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1e6      	bne.n	8006c86 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e063      	b.n	8006d94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0304 	and.w	r3, r3, #4
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d149      	bne.n	8006d6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cda:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f857 	bl	8006d9c <UART_WaitOnFlagUntilTimeout>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d03c      	beq.n	8006d6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfc:	e853 3f00 	ldrex	r3, [r3]
 8006d00:	623b      	str	r3, [r7, #32]
   return(result);
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d12:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d14:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d1a:	e841 2300 	strex	r3, r2, [r1]
 8006d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e6      	bne.n	8006cf4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	3308      	adds	r3, #8
 8006d2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	e853 3f00 	ldrex	r3, [r3]
 8006d34:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f023 0301 	bic.w	r3, r3, #1
 8006d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3308      	adds	r3, #8
 8006d44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d46:	61fa      	str	r2, [r7, #28]
 8006d48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4a:	69b9      	ldr	r1, [r7, #24]
 8006d4c:	69fa      	ldr	r2, [r7, #28]
 8006d4e:	e841 2300 	strex	r3, r2, [r1]
 8006d52:	617b      	str	r3, [r7, #20]
   return(result);
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1e5      	bne.n	8006d26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e012      	b.n	8006d94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2220      	movs	r2, #32
 8006d72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3758      	adds	r7, #88	@ 0x58
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	603b      	str	r3, [r7, #0]
 8006da8:	4613      	mov	r3, r2
 8006daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dac:	e049      	b.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db4:	d045      	beq.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006db6:	f7fa ff19 	bl	8001bec <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d302      	bcc.n	8006dcc <UART_WaitOnFlagUntilTimeout+0x30>
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e048      	b.n	8006e62 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0304 	and.w	r3, r3, #4
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d031      	beq.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	f003 0308 	and.w	r3, r3, #8
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	d110      	bne.n	8006e0e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2208      	movs	r2, #8
 8006df2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f000 f838 	bl	8006e6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2208      	movs	r2, #8
 8006dfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e029      	b.n	8006e62 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e1c:	d111      	bne.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 f81e 	bl	8006e6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e00f      	b.n	8006e62 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	69da      	ldr	r2, [r3, #28]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	bf0c      	ite	eq
 8006e52:	2301      	moveq	r3, #1
 8006e54:	2300      	movne	r3, #0
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	461a      	mov	r2, r3
 8006e5a:	79fb      	ldrb	r3, [r7, #7]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d0a6      	beq.n	8006dae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b095      	sub	sp, #84	@ 0x54
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e7a:	e853 3f00 	ldrex	r3, [r3]
 8006e7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e90:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e98:	e841 2300 	strex	r3, r2, [r1]
 8006e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1e6      	bne.n	8006e72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	3308      	adds	r3, #8
 8006eaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	e853 3f00 	ldrex	r3, [r3]
 8006eb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006eba:	f023 0301 	bic.w	r3, r3, #1
 8006ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3308      	adds	r3, #8
 8006ec6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ec8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006eca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ecc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ece:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ed0:	e841 2300 	strex	r3, r2, [r1]
 8006ed4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1e3      	bne.n	8006ea4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d118      	bne.n	8006f16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	e853 3f00 	ldrex	r3, [r3]
 8006ef0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	f023 0310 	bic.w	r3, r3, #16
 8006ef8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	461a      	mov	r2, r3
 8006f00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f02:	61bb      	str	r3, [r7, #24]
 8006f04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f06:	6979      	ldr	r1, [r7, #20]
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	e841 2300 	strex	r3, r2, [r1]
 8006f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1e6      	bne.n	8006ee4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2220      	movs	r2, #32
 8006f1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006f2a:	bf00      	nop
 8006f2c:	3754      	adds	r7, #84	@ 0x54
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b085      	sub	sp, #20
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d101      	bne.n	8006f4c <HAL_UARTEx_DisableFifoMode+0x16>
 8006f48:	2302      	movs	r3, #2
 8006f4a:	e027      	b.n	8006f9c <HAL_UARTEx_DisableFifoMode+0x66>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2224      	movs	r2, #36	@ 0x24
 8006f58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f022 0201 	bic.w	r2, r2, #1
 8006f72:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006f7a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2220      	movs	r2, #32
 8006f8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d101      	bne.n	8006fc0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	e02d      	b.n	800701c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2224      	movs	r2, #36	@ 0x24
 8006fcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0201 	bic.w	r2, r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f84f 	bl	80070a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2220      	movs	r2, #32
 800700e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007034:	2b01      	cmp	r3, #1
 8007036:	d101      	bne.n	800703c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007038:	2302      	movs	r3, #2
 800703a:	e02d      	b.n	8007098 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2224      	movs	r2, #36	@ 0x24
 8007048:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 0201 	bic.w	r2, r2, #1
 8007062:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	430a      	orrs	r2, r1
 8007076:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f811 	bl	80070a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2220      	movs	r2, #32
 800708a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d108      	bne.n	80070c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80070c0:	e031      	b.n	8007126 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80070c2:	2308      	movs	r3, #8
 80070c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80070c6:	2308      	movs	r3, #8
 80070c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	0e5b      	lsrs	r3, r3, #25
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	f003 0307 	and.w	r3, r3, #7
 80070d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	0f5b      	lsrs	r3, r3, #29
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070ea:	7bbb      	ldrb	r3, [r7, #14]
 80070ec:	7b3a      	ldrb	r2, [r7, #12]
 80070ee:	4911      	ldr	r1, [pc, #68]	@ (8007134 <UARTEx_SetNbDataToProcess+0x94>)
 80070f0:	5c8a      	ldrb	r2, [r1, r2]
 80070f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80070f6:	7b3a      	ldrb	r2, [r7, #12]
 80070f8:	490f      	ldr	r1, [pc, #60]	@ (8007138 <UARTEx_SetNbDataToProcess+0x98>)
 80070fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007100:	b29a      	uxth	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007108:	7bfb      	ldrb	r3, [r7, #15]
 800710a:	7b7a      	ldrb	r2, [r7, #13]
 800710c:	4909      	ldr	r1, [pc, #36]	@ (8007134 <UARTEx_SetNbDataToProcess+0x94>)
 800710e:	5c8a      	ldrb	r2, [r1, r2]
 8007110:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007114:	7b7a      	ldrb	r2, [r7, #13]
 8007116:	4908      	ldr	r1, [pc, #32]	@ (8007138 <UARTEx_SetNbDataToProcess+0x98>)
 8007118:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800711a:	fb93 f3f2 	sdiv	r3, r3, r2
 800711e:	b29a      	uxth	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007126:	bf00      	nop
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	0800b8fc 	.word	0x0800b8fc
 8007138:	0800b904 	.word	0x0800b904

0800713c <__NVIC_SetPriority>:
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	4603      	mov	r3, r0
 8007144:	6039      	str	r1, [r7, #0]
 8007146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800714c:	2b00      	cmp	r3, #0
 800714e:	db0a      	blt.n	8007166 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	b2da      	uxtb	r2, r3
 8007154:	490c      	ldr	r1, [pc, #48]	@ (8007188 <__NVIC_SetPriority+0x4c>)
 8007156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800715a:	0112      	lsls	r2, r2, #4
 800715c:	b2d2      	uxtb	r2, r2
 800715e:	440b      	add	r3, r1
 8007160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007164:	e00a      	b.n	800717c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	b2da      	uxtb	r2, r3
 800716a:	4908      	ldr	r1, [pc, #32]	@ (800718c <__NVIC_SetPriority+0x50>)
 800716c:	79fb      	ldrb	r3, [r7, #7]
 800716e:	f003 030f 	and.w	r3, r3, #15
 8007172:	3b04      	subs	r3, #4
 8007174:	0112      	lsls	r2, r2, #4
 8007176:	b2d2      	uxtb	r2, r2
 8007178:	440b      	add	r3, r1
 800717a:	761a      	strb	r2, [r3, #24]
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	e000e100 	.word	0xe000e100
 800718c:	e000ed00 	.word	0xe000ed00

08007190 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007190:	b580      	push	{r7, lr}
 8007192:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007194:	4b05      	ldr	r3, [pc, #20]	@ (80071ac <SysTick_Handler+0x1c>)
 8007196:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007198:	f002 fc6c 	bl	8009a74 <xTaskGetSchedulerState>
 800719c:	4603      	mov	r3, r0
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d001      	beq.n	80071a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80071a2:	f003 fb61 	bl	800a868 <xPortSysTickHandler>
  }
}
 80071a6:	bf00      	nop
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	e000e010 	.word	0xe000e010

080071b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80071b0:	b580      	push	{r7, lr}
 80071b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80071b4:	2100      	movs	r1, #0
 80071b6:	f06f 0004 	mvn.w	r0, #4
 80071ba:	f7ff ffbf 	bl	800713c <__NVIC_SetPriority>
#endif
}
 80071be:	bf00      	nop
 80071c0:	bd80      	pop	{r7, pc}
	...

080071c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071ca:	f3ef 8305 	mrs	r3, IPSR
 80071ce:	603b      	str	r3, [r7, #0]
  return(result);
 80071d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d003      	beq.n	80071de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80071d6:	f06f 0305 	mvn.w	r3, #5
 80071da:	607b      	str	r3, [r7, #4]
 80071dc:	e00c      	b.n	80071f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80071de:	4b0a      	ldr	r3, [pc, #40]	@ (8007208 <osKernelInitialize+0x44>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d105      	bne.n	80071f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80071e6:	4b08      	ldr	r3, [pc, #32]	@ (8007208 <osKernelInitialize+0x44>)
 80071e8:	2201      	movs	r2, #1
 80071ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	607b      	str	r3, [r7, #4]
 80071f0:	e002      	b.n	80071f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80071f2:	f04f 33ff 	mov.w	r3, #4294967295
 80071f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071f8:	687b      	ldr	r3, [r7, #4]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	20000564 	.word	0x20000564

0800720c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007212:	f3ef 8305 	mrs	r3, IPSR
 8007216:	603b      	str	r3, [r7, #0]
  return(result);
 8007218:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <osKernelStart+0x1a>
    stat = osErrorISR;
 800721e:	f06f 0305 	mvn.w	r3, #5
 8007222:	607b      	str	r3, [r7, #4]
 8007224:	e010      	b.n	8007248 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007226:	4b0b      	ldr	r3, [pc, #44]	@ (8007254 <osKernelStart+0x48>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d109      	bne.n	8007242 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800722e:	f7ff ffbf 	bl	80071b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007232:	4b08      	ldr	r3, [pc, #32]	@ (8007254 <osKernelStart+0x48>)
 8007234:	2202      	movs	r2, #2
 8007236:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007238:	f001 ffb8 	bl	80091ac <vTaskStartScheduler>
      stat = osOK;
 800723c:	2300      	movs	r3, #0
 800723e:	607b      	str	r3, [r7, #4]
 8007240:	e002      	b.n	8007248 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007242:	f04f 33ff 	mov.w	r3, #4294967295
 8007246:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007248:	687b      	ldr	r3, [r7, #4]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	20000564 	.word	0x20000564

08007258 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007258:	b580      	push	{r7, lr}
 800725a:	b08e      	sub	sp, #56	@ 0x38
 800725c:	af04      	add	r7, sp, #16
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007264:	2300      	movs	r3, #0
 8007266:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007268:	f3ef 8305 	mrs	r3, IPSR
 800726c:	617b      	str	r3, [r7, #20]
  return(result);
 800726e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007270:	2b00      	cmp	r3, #0
 8007272:	d17e      	bne.n	8007372 <osThreadNew+0x11a>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d07b      	beq.n	8007372 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800727a:	2380      	movs	r3, #128	@ 0x80
 800727c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800727e:	2318      	movs	r3, #24
 8007280:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007282:	2300      	movs	r3, #0
 8007284:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007286:	f04f 33ff 	mov.w	r3, #4294967295
 800728a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d045      	beq.n	800731e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d002      	beq.n	80072a0 <osThreadNew+0x48>
        name = attr->name;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d002      	beq.n	80072ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d008      	beq.n	80072c6 <osThreadNew+0x6e>
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	2b38      	cmp	r3, #56	@ 0x38
 80072b8:	d805      	bhi.n	80072c6 <osThreadNew+0x6e>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <osThreadNew+0x72>
        return (NULL);
 80072c6:	2300      	movs	r3, #0
 80072c8:	e054      	b.n	8007374 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d003      	beq.n	80072da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	089b      	lsrs	r3, r3, #2
 80072d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00e      	beq.n	8007300 <osThreadNew+0xa8>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	2ba7      	cmp	r3, #167	@ 0xa7
 80072e8:	d90a      	bls.n	8007300 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d006      	beq.n	8007300 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <osThreadNew+0xa8>
        mem = 1;
 80072fa:	2301      	movs	r3, #1
 80072fc:	61bb      	str	r3, [r7, #24]
 80072fe:	e010      	b.n	8007322 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10c      	bne.n	8007322 <osThreadNew+0xca>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d108      	bne.n	8007322 <osThreadNew+0xca>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d104      	bne.n	8007322 <osThreadNew+0xca>
          mem = 0;
 8007318:	2300      	movs	r3, #0
 800731a:	61bb      	str	r3, [r7, #24]
 800731c:	e001      	b.n	8007322 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800731e:	2300      	movs	r3, #0
 8007320:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d110      	bne.n	800734a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007330:	9202      	str	r2, [sp, #8]
 8007332:	9301      	str	r3, [sp, #4]
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	6a3a      	ldr	r2, [r7, #32]
 800733c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f001 fc38 	bl	8008bb4 <xTaskCreateStatic>
 8007344:	4603      	mov	r3, r0
 8007346:	613b      	str	r3, [r7, #16]
 8007348:	e013      	b.n	8007372 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d110      	bne.n	8007372 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	b29a      	uxth	r2, r3
 8007354:	f107 0310 	add.w	r3, r7, #16
 8007358:	9301      	str	r3, [sp, #4]
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f001 fc86 	bl	8008c74 <xTaskCreate>
 8007368:	4603      	mov	r3, r0
 800736a:	2b01      	cmp	r3, #1
 800736c:	d001      	beq.n	8007372 <osThreadNew+0x11a>
            hTask = NULL;
 800736e:	2300      	movs	r3, #0
 8007370:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007372:	693b      	ldr	r3, [r7, #16]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3728      	adds	r7, #40	@ 0x28
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007388:	f3ef 8305 	mrs	r3, IPSR
 800738c:	60fb      	str	r3, [r7, #12]
  return(result);
 800738e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007390:	2b00      	cmp	r3, #0
 8007392:	d003      	beq.n	800739c <osThreadSuspend+0x20>
    stat = osErrorISR;
 8007394:	f06f 0305 	mvn.w	r3, #5
 8007398:	617b      	str	r3, [r7, #20]
 800739a:	e00b      	b.n	80073b4 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d103      	bne.n	80073aa <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80073a2:	f06f 0303 	mvn.w	r3, #3
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	e004      	b.n	80073b4 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80073ae:	6938      	ldr	r0, [r7, #16]
 80073b0:	f001 fdf4 	bl	8008f9c <vTaskSuspend>
  }

  return (stat);
 80073b4:	697b      	ldr	r3, [r7, #20]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80073be:	b580      	push	{r7, lr}
 80073c0:	b086      	sub	sp, #24
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073ca:	f3ef 8305 	mrs	r3, IPSR
 80073ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80073d0:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <osThreadResume+0x20>
    stat = osErrorISR;
 80073d6:	f06f 0305 	mvn.w	r3, #5
 80073da:	617b      	str	r3, [r7, #20]
 80073dc:	e00b      	b.n	80073f6 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d103      	bne.n	80073ec <osThreadResume+0x2e>
    stat = osErrorParameter;
 80073e4:	f06f 0303 	mvn.w	r3, #3
 80073e8:	617b      	str	r3, [r7, #20]
 80073ea:	e004      	b.n	80073f6 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 80073ec:	2300      	movs	r3, #0
 80073ee:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80073f0:	6938      	ldr	r0, [r7, #16]
 80073f2:	f001 fe7b 	bl	80090ec <vTaskResume>
  }

  return (stat);
 80073f6:	697b      	ldr	r3, [r7, #20]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007408:	f3ef 8305 	mrs	r3, IPSR
 800740c:	60bb      	str	r3, [r7, #8]
  return(result);
 800740e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007410:	2b00      	cmp	r3, #0
 8007412:	d003      	beq.n	800741c <osDelay+0x1c>
    stat = osErrorISR;
 8007414:	f06f 0305 	mvn.w	r3, #5
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	e007      	b.n	800742c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d002      	beq.n	800742c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f001 fd82 	bl	8008f30 <vTaskDelay>
    }
  }

  return (stat);
 800742c:	68fb      	ldr	r3, [r7, #12]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007436:	b580      	push	{r7, lr}
 8007438:	b08a      	sub	sp, #40	@ 0x28
 800743a:	af02      	add	r7, sp, #8
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007442:	2300      	movs	r3, #0
 8007444:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007446:	f3ef 8305 	mrs	r3, IPSR
 800744a:	613b      	str	r3, [r7, #16]
  return(result);
 800744c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800744e:	2b00      	cmp	r3, #0
 8007450:	d175      	bne.n	800753e <osSemaphoreNew+0x108>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d072      	beq.n	800753e <osSemaphoreNew+0x108>
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	429a      	cmp	r2, r3
 800745e:	d86e      	bhi.n	800753e <osSemaphoreNew+0x108>
    mem = -1;
 8007460:	f04f 33ff 	mov.w	r3, #4294967295
 8007464:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d015      	beq.n	8007498 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d006      	beq.n	8007482 <osSemaphoreNew+0x4c>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	2b4f      	cmp	r3, #79	@ 0x4f
 800747a:	d902      	bls.n	8007482 <osSemaphoreNew+0x4c>
        mem = 1;
 800747c:	2301      	movs	r3, #1
 800747e:	61bb      	str	r3, [r7, #24]
 8007480:	e00c      	b.n	800749c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d108      	bne.n	800749c <osSemaphoreNew+0x66>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d104      	bne.n	800749c <osSemaphoreNew+0x66>
          mem = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	61bb      	str	r3, [r7, #24]
 8007496:	e001      	b.n	800749c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007498:	2300      	movs	r3, #0
 800749a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a2:	d04c      	beq.n	800753e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d128      	bne.n	80074fc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d10a      	bne.n	80074c6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	2203      	movs	r2, #3
 80074b6:	9200      	str	r2, [sp, #0]
 80074b8:	2200      	movs	r2, #0
 80074ba:	2100      	movs	r1, #0
 80074bc:	2001      	movs	r0, #1
 80074be:	f000 fb93 	bl	8007be8 <xQueueGenericCreateStatic>
 80074c2:	61f8      	str	r0, [r7, #28]
 80074c4:	e005      	b.n	80074d2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80074c6:	2203      	movs	r2, #3
 80074c8:	2100      	movs	r1, #0
 80074ca:	2001      	movs	r0, #1
 80074cc:	f000 fc09 	bl	8007ce2 <xQueueGenericCreate>
 80074d0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d022      	beq.n	800751e <osSemaphoreNew+0xe8>
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d01f      	beq.n	800751e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80074de:	2300      	movs	r3, #0
 80074e0:	2200      	movs	r2, #0
 80074e2:	2100      	movs	r1, #0
 80074e4:	69f8      	ldr	r0, [r7, #28]
 80074e6:	f000 fcc9 	bl	8007e7c <xQueueGenericSend>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d016      	beq.n	800751e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80074f0:	69f8      	ldr	r0, [r7, #28]
 80074f2:	f001 f98b 	bl	800880c <vQueueDelete>
            hSemaphore = NULL;
 80074f6:	2300      	movs	r3, #0
 80074f8:	61fb      	str	r3, [r7, #28]
 80074fa:	e010      	b.n	800751e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d108      	bne.n	8007514 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	461a      	mov	r2, r3
 8007508:	68b9      	ldr	r1, [r7, #8]
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f000 fc47 	bl	8007d9e <xQueueCreateCountingSemaphoreStatic>
 8007510:	61f8      	str	r0, [r7, #28]
 8007512:	e004      	b.n	800751e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007514:	68b9      	ldr	r1, [r7, #8]
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 fc7a 	bl	8007e10 <xQueueCreateCountingSemaphore>
 800751c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00c      	beq.n	800753e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <osSemaphoreNew+0xfc>
          name = attr->name;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	617b      	str	r3, [r7, #20]
 8007530:	e001      	b.n	8007536 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007532:	2300      	movs	r3, #0
 8007534:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007536:	6979      	ldr	r1, [r7, #20]
 8007538:	69f8      	ldr	r0, [r7, #28]
 800753a:	f001 fab3 	bl	8008aa4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800753e:	69fb      	ldr	r3, [r7, #28]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3720      	adds	r7, #32
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007556:	2300      	movs	r3, #0
 8007558:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d103      	bne.n	8007568 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007560:	f06f 0303 	mvn.w	r3, #3
 8007564:	617b      	str	r3, [r7, #20]
 8007566:	e039      	b.n	80075dc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007568:	f3ef 8305 	mrs	r3, IPSR
 800756c:	60fb      	str	r3, [r7, #12]
  return(result);
 800756e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007570:	2b00      	cmp	r3, #0
 8007572:	d022      	beq.n	80075ba <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800757a:	f06f 0303 	mvn.w	r3, #3
 800757e:	617b      	str	r3, [r7, #20]
 8007580:	e02c      	b.n	80075dc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8007582:	2300      	movs	r3, #0
 8007584:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007586:	f107 0308 	add.w	r3, r7, #8
 800758a:	461a      	mov	r2, r3
 800758c:	2100      	movs	r1, #0
 800758e:	6938      	ldr	r0, [r7, #16]
 8007590:	f001 f896 	bl	80086c0 <xQueueReceiveFromISR>
 8007594:	4603      	mov	r3, r0
 8007596:	2b01      	cmp	r3, #1
 8007598:	d003      	beq.n	80075a2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800759a:	f06f 0302 	mvn.w	r3, #2
 800759e:	617b      	str	r3, [r7, #20]
 80075a0:	e01c      	b.n	80075dc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d019      	beq.n	80075dc <osSemaphoreAcquire+0x94>
 80075a8:	4b0f      	ldr	r3, [pc, #60]	@ (80075e8 <osSemaphoreAcquire+0xa0>)
 80075aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	e010      	b.n	80075dc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6938      	ldr	r0, [r7, #16]
 80075be:	f000 ff6f 	bl	80084a0 <xQueueSemaphoreTake>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d009      	beq.n	80075dc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80075ce:	f06f 0301 	mvn.w	r3, #1
 80075d2:	617b      	str	r3, [r7, #20]
 80075d4:	e002      	b.n	80075dc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80075d6:	f06f 0302 	mvn.w	r3, #2
 80075da:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80075dc:	697b      	ldr	r3, [r7, #20]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3718      	adds	r7, #24
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	e000ed04 	.word	0xe000ed04

080075ec <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d103      	bne.n	800760a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007602:	f06f 0303 	mvn.w	r3, #3
 8007606:	617b      	str	r3, [r7, #20]
 8007608:	e02c      	b.n	8007664 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800760a:	f3ef 8305 	mrs	r3, IPSR
 800760e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007610:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007612:	2b00      	cmp	r3, #0
 8007614:	d01a      	beq.n	800764c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8007616:	2300      	movs	r3, #0
 8007618:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800761a:	f107 0308 	add.w	r3, r7, #8
 800761e:	4619      	mov	r1, r3
 8007620:	6938      	ldr	r0, [r7, #16]
 8007622:	f000 fdcb 	bl	80081bc <xQueueGiveFromISR>
 8007626:	4603      	mov	r3, r0
 8007628:	2b01      	cmp	r3, #1
 800762a:	d003      	beq.n	8007634 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800762c:	f06f 0302 	mvn.w	r3, #2
 8007630:	617b      	str	r3, [r7, #20]
 8007632:	e017      	b.n	8007664 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d014      	beq.n	8007664 <osSemaphoreRelease+0x78>
 800763a:	4b0d      	ldr	r3, [pc, #52]	@ (8007670 <osSemaphoreRelease+0x84>)
 800763c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	e00b      	b.n	8007664 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800764c:	2300      	movs	r3, #0
 800764e:	2200      	movs	r2, #0
 8007650:	2100      	movs	r1, #0
 8007652:	6938      	ldr	r0, [r7, #16]
 8007654:	f000 fc12 	bl	8007e7c <xQueueGenericSend>
 8007658:	4603      	mov	r3, r0
 800765a:	2b01      	cmp	r3, #1
 800765c:	d002      	beq.n	8007664 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800765e:	f06f 0302 	mvn.w	r3, #2
 8007662:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007664:	697b      	ldr	r3, [r7, #20]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3718      	adds	r7, #24
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	e000ed04 	.word	0xe000ed04

08007674 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007674:	b580      	push	{r7, lr}
 8007676:	b08a      	sub	sp, #40	@ 0x28
 8007678:	af02      	add	r7, sp, #8
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007680:	2300      	movs	r3, #0
 8007682:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007684:	f3ef 8305 	mrs	r3, IPSR
 8007688:	613b      	str	r3, [r7, #16]
  return(result);
 800768a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800768c:	2b00      	cmp	r3, #0
 800768e:	d15f      	bne.n	8007750 <osMessageQueueNew+0xdc>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d05c      	beq.n	8007750 <osMessageQueueNew+0xdc>
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d059      	beq.n	8007750 <osMessageQueueNew+0xdc>
    mem = -1;
 800769c:	f04f 33ff 	mov.w	r3, #4294967295
 80076a0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d029      	beq.n	80076fc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d012      	beq.n	80076d6 <osMessageQueueNew+0x62>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	2b4f      	cmp	r3, #79	@ 0x4f
 80076b6:	d90e      	bls.n	80076d6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00a      	beq.n	80076d6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	695a      	ldr	r2, [r3, #20]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	68b9      	ldr	r1, [r7, #8]
 80076c8:	fb01 f303 	mul.w	r3, r1, r3
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d302      	bcc.n	80076d6 <osMessageQueueNew+0x62>
        mem = 1;
 80076d0:	2301      	movs	r3, #1
 80076d2:	61bb      	str	r3, [r7, #24]
 80076d4:	e014      	b.n	8007700 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d110      	bne.n	8007700 <osMessageQueueNew+0x8c>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10c      	bne.n	8007700 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d108      	bne.n	8007700 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d104      	bne.n	8007700 <osMessageQueueNew+0x8c>
          mem = 0;
 80076f6:	2300      	movs	r3, #0
 80076f8:	61bb      	str	r3, [r7, #24]
 80076fa:	e001      	b.n	8007700 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80076fc:	2300      	movs	r3, #0
 80076fe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d10b      	bne.n	800771e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	691a      	ldr	r2, [r3, #16]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	2100      	movs	r1, #0
 8007710:	9100      	str	r1, [sp, #0]
 8007712:	68b9      	ldr	r1, [r7, #8]
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 fa67 	bl	8007be8 <xQueueGenericCreateStatic>
 800771a:	61f8      	str	r0, [r7, #28]
 800771c:	e008      	b.n	8007730 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d105      	bne.n	8007730 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007724:	2200      	movs	r2, #0
 8007726:	68b9      	ldr	r1, [r7, #8]
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 fada 	bl	8007ce2 <xQueueGenericCreate>
 800772e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00c      	beq.n	8007750 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d003      	beq.n	8007744 <osMessageQueueNew+0xd0>
        name = attr->name;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	e001      	b.n	8007748 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007744:	2300      	movs	r3, #0
 8007746:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007748:	6979      	ldr	r1, [r7, #20]
 800774a:	69f8      	ldr	r0, [r7, #28]
 800774c:	f001 f9aa 	bl	8008aa4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007750:	69fb      	ldr	r3, [r7, #28]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3720      	adds	r7, #32
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
	...

0800775c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800775c:	b580      	push	{r7, lr}
 800775e:	b088      	sub	sp, #32
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	603b      	str	r3, [r7, #0]
 8007768:	4613      	mov	r3, r2
 800776a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007770:	2300      	movs	r3, #0
 8007772:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007774:	f3ef 8305 	mrs	r3, IPSR
 8007778:	617b      	str	r3, [r7, #20]
  return(result);
 800777a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800777c:	2b00      	cmp	r3, #0
 800777e:	d028      	beq.n	80077d2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d005      	beq.n	8007792 <osMessageQueuePut+0x36>
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d002      	beq.n	8007792 <osMessageQueuePut+0x36>
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d003      	beq.n	800779a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007792:	f06f 0303 	mvn.w	r3, #3
 8007796:	61fb      	str	r3, [r7, #28]
 8007798:	e038      	b.n	800780c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800779a:	2300      	movs	r3, #0
 800779c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800779e:	f107 0210 	add.w	r2, r7, #16
 80077a2:	2300      	movs	r3, #0
 80077a4:	68b9      	ldr	r1, [r7, #8]
 80077a6:	69b8      	ldr	r0, [r7, #24]
 80077a8:	f000 fc6a 	bl	8008080 <xQueueGenericSendFromISR>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d003      	beq.n	80077ba <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80077b2:	f06f 0302 	mvn.w	r3, #2
 80077b6:	61fb      	str	r3, [r7, #28]
 80077b8:	e028      	b.n	800780c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d025      	beq.n	800780c <osMessageQueuePut+0xb0>
 80077c0:	4b15      	ldr	r3, [pc, #84]	@ (8007818 <osMessageQueuePut+0xbc>)
 80077c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077c6:	601a      	str	r2, [r3, #0]
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	e01c      	b.n	800780c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d002      	beq.n	80077de <osMessageQueuePut+0x82>
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d103      	bne.n	80077e6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80077de:	f06f 0303 	mvn.w	r3, #3
 80077e2:	61fb      	str	r3, [r7, #28]
 80077e4:	e012      	b.n	800780c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80077e6:	2300      	movs	r3, #0
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	68b9      	ldr	r1, [r7, #8]
 80077ec:	69b8      	ldr	r0, [r7, #24]
 80077ee:	f000 fb45 	bl	8007e7c <xQueueGenericSend>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d009      	beq.n	800780c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d003      	beq.n	8007806 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80077fe:	f06f 0301 	mvn.w	r3, #1
 8007802:	61fb      	str	r3, [r7, #28]
 8007804:	e002      	b.n	800780c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007806:	f06f 0302 	mvn.w	r3, #2
 800780a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800780c:	69fb      	ldr	r3, [r7, #28]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3720      	adds	r7, #32
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	e000ed04 	.word	0xe000ed04

0800781c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800781c:	b580      	push	{r7, lr}
 800781e:	b088      	sub	sp, #32
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
 8007828:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800782e:	2300      	movs	r3, #0
 8007830:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007832:	f3ef 8305 	mrs	r3, IPSR
 8007836:	617b      	str	r3, [r7, #20]
  return(result);
 8007838:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800783a:	2b00      	cmp	r3, #0
 800783c:	d028      	beq.n	8007890 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d005      	beq.n	8007850 <osMessageQueueGet+0x34>
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d002      	beq.n	8007850 <osMessageQueueGet+0x34>
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d003      	beq.n	8007858 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007850:	f06f 0303 	mvn.w	r3, #3
 8007854:	61fb      	str	r3, [r7, #28]
 8007856:	e037      	b.n	80078c8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007858:	2300      	movs	r3, #0
 800785a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800785c:	f107 0310 	add.w	r3, r7, #16
 8007860:	461a      	mov	r2, r3
 8007862:	68b9      	ldr	r1, [r7, #8]
 8007864:	69b8      	ldr	r0, [r7, #24]
 8007866:	f000 ff2b 	bl	80086c0 <xQueueReceiveFromISR>
 800786a:	4603      	mov	r3, r0
 800786c:	2b01      	cmp	r3, #1
 800786e:	d003      	beq.n	8007878 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007870:	f06f 0302 	mvn.w	r3, #2
 8007874:	61fb      	str	r3, [r7, #28]
 8007876:	e027      	b.n	80078c8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d024      	beq.n	80078c8 <osMessageQueueGet+0xac>
 800787e:	4b15      	ldr	r3, [pc, #84]	@ (80078d4 <osMessageQueueGet+0xb8>)
 8007880:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	f3bf 8f6f 	isb	sy
 800788e:	e01b      	b.n	80078c8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <osMessageQueueGet+0x80>
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d103      	bne.n	80078a4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800789c:	f06f 0303 	mvn.w	r3, #3
 80078a0:	61fb      	str	r3, [r7, #28]
 80078a2:	e011      	b.n	80078c8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	69b8      	ldr	r0, [r7, #24]
 80078aa:	f000 fd17 	bl	80082dc <xQueueReceive>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d009      	beq.n	80078c8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d003      	beq.n	80078c2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80078ba:	f06f 0301 	mvn.w	r3, #1
 80078be:	61fb      	str	r3, [r7, #28]
 80078c0:	e002      	b.n	80078c8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80078c2:	f06f 0302 	mvn.w	r3, #2
 80078c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80078c8:	69fb      	ldr	r3, [r7, #28]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3720      	adds	r7, #32
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	e000ed04 	.word	0xe000ed04

080078d8 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08a      	sub	sp, #40	@ 0x28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d102      	bne.n	80078f0 <osMessageQueueGetSpace+0x18>
    space = 0U;
 80078ea:	2300      	movs	r3, #0
 80078ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80078ee:	e023      	b.n	8007938 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078f0:	f3ef 8305 	mrs	r3, IPSR
 80078f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80078f6:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d019      	beq.n	8007930 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80078fc:	f3ef 8211 	mrs	r2, BASEPRI
 8007900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	613a      	str	r2, [r7, #16]
 8007912:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007914:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 8007916:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8007918:	6a3b      	ldr	r3, [r7, #32]
 800791a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	627b      	str	r3, [r7, #36]	@ 0x24
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800792e:	e003      	b.n	8007938 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 8007930:	6a38      	ldr	r0, [r7, #32]
 8007932:	f000 ff47 	bl	80087c4 <uxQueueSpacesAvailable>
 8007936:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return (space);
 8007938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800793a:	4618      	mov	r0, r3
 800793c:	3728      	adds	r7, #40	@ 0x28
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
	...

08007944 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4a07      	ldr	r2, [pc, #28]	@ (8007970 <vApplicationGetIdleTaskMemory+0x2c>)
 8007954:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	4a06      	ldr	r2, [pc, #24]	@ (8007974 <vApplicationGetIdleTaskMemory+0x30>)
 800795a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2280      	movs	r2, #128	@ 0x80
 8007960:	601a      	str	r2, [r3, #0]
}
 8007962:	bf00      	nop
 8007964:	3714      	adds	r7, #20
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	20000568 	.word	0x20000568
 8007974:	20000610 	.word	0x20000610

08007978 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4a07      	ldr	r2, [pc, #28]	@ (80079a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007988:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	4a06      	ldr	r2, [pc, #24]	@ (80079a8 <vApplicationGetTimerTaskMemory+0x30>)
 800798e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007996:	601a      	str	r2, [r3, #0]
}
 8007998:	bf00      	nop
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	20000810 	.word	0x20000810
 80079a8:	200008b8 	.word	0x200008b8

080079ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f103 0208 	add.w	r2, r3, #8
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f04f 32ff 	mov.w	r2, #4294967295
 80079c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f103 0208 	add.w	r2, r3, #8
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f103 0208 	add.w	r2, r3, #8
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80079fa:	bf00      	nop
 80079fc:	370c      	adds	r7, #12
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a06:	b480      	push	{r7}
 8007a08:	b085      	sub	sp, #20
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	689a      	ldr	r2, [r3, #8]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	683a      	ldr	r2, [r7, #0]
 8007a2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	601a      	str	r2, [r3, #0]
}
 8007a42:	bf00      	nop
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b085      	sub	sp, #20
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a64:	d103      	bne.n	8007a6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	e00c      	b.n	8007a88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	3308      	adds	r3, #8
 8007a72:	60fb      	str	r3, [r7, #12]
 8007a74:	e002      	b.n	8007a7c <vListInsert+0x2e>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d2f6      	bcs.n	8007a76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	1c5a      	adds	r2, r3, #1
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	601a      	str	r2, [r3, #0]
}
 8007ab4:	bf00      	nop
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	6892      	ldr	r2, [r2, #8]
 8007ad6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	6852      	ldr	r2, [r2, #4]
 8007ae0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d103      	bne.n	8007af4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	689a      	ldr	r2, [r3, #8]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	1e5a      	subs	r2, r3, #1
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3714      	adds	r7, #20
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10b      	bne.n	8007b40 <xQueueGenericReset+0x2c>
	__asm volatile
 8007b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b2c:	f383 8811 	msr	BASEPRI, r3
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	60bb      	str	r3, [r7, #8]
}
 8007b3a:	bf00      	nop
 8007b3c:	bf00      	nop
 8007b3e:	e7fd      	b.n	8007b3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007b40:	f002 fe02 	bl	800a748 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b4c:	68f9      	ldr	r1, [r7, #12]
 8007b4e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007b50:	fb01 f303 	mul.w	r3, r1, r3
 8007b54:	441a      	add	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b70:	3b01      	subs	r3, #1
 8007b72:	68f9      	ldr	r1, [r7, #12]
 8007b74:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007b76:	fb01 f303 	mul.w	r3, r1, r3
 8007b7a:	441a      	add	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	22ff      	movs	r2, #255	@ 0xff
 8007b84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	22ff      	movs	r2, #255	@ 0xff
 8007b8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d114      	bne.n	8007bc0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d01a      	beq.n	8007bd4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	3310      	adds	r3, #16
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f001 fda0 	bl	80096e8 <xTaskRemoveFromEventList>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d012      	beq.n	8007bd4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007bae:	4b0d      	ldr	r3, [pc, #52]	@ (8007be4 <xQueueGenericReset+0xd0>)
 8007bb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	e009      	b.n	8007bd4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	3310      	adds	r3, #16
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7ff fef1 	bl	80079ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3324      	adds	r3, #36	@ 0x24
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7ff feec 	bl	80079ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007bd4:	f002 fdea 	bl	800a7ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007bd8:	2301      	movs	r3, #1
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	e000ed04 	.word	0xe000ed04

08007be8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b08e      	sub	sp, #56	@ 0x38
 8007bec:	af02      	add	r7, sp, #8
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
 8007bf4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10b      	bne.n	8007c14 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c0e:	bf00      	nop
 8007c10:	bf00      	nop
 8007c12:	e7fd      	b.n	8007c10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10b      	bne.n	8007c32 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c2c:	bf00      	nop
 8007c2e:	bf00      	nop
 8007c30:	e7fd      	b.n	8007c2e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <xQueueGenericCreateStatic+0x56>
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <xQueueGenericCreateStatic+0x5a>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e000      	b.n	8007c44 <xQueueGenericCreateStatic+0x5c>
 8007c42:	2300      	movs	r3, #0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10b      	bne.n	8007c60 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c4c:	f383 8811 	msr	BASEPRI, r3
 8007c50:	f3bf 8f6f 	isb	sy
 8007c54:	f3bf 8f4f 	dsb	sy
 8007c58:	623b      	str	r3, [r7, #32]
}
 8007c5a:	bf00      	nop
 8007c5c:	bf00      	nop
 8007c5e:	e7fd      	b.n	8007c5c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d102      	bne.n	8007c6c <xQueueGenericCreateStatic+0x84>
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d101      	bne.n	8007c70 <xQueueGenericCreateStatic+0x88>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e000      	b.n	8007c72 <xQueueGenericCreateStatic+0x8a>
 8007c70:	2300      	movs	r3, #0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10b      	bne.n	8007c8e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c7a:	f383 8811 	msr	BASEPRI, r3
 8007c7e:	f3bf 8f6f 	isb	sy
 8007c82:	f3bf 8f4f 	dsb	sy
 8007c86:	61fb      	str	r3, [r7, #28]
}
 8007c88:	bf00      	nop
 8007c8a:	bf00      	nop
 8007c8c:	e7fd      	b.n	8007c8a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007c8e:	2350      	movs	r3, #80	@ 0x50
 8007c90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	2b50      	cmp	r3, #80	@ 0x50
 8007c96:	d00b      	beq.n	8007cb0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	61bb      	str	r3, [r7, #24]
}
 8007caa:	bf00      	nop
 8007cac:	bf00      	nop
 8007cae:	e7fd      	b.n	8007cac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007cb0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00d      	beq.n	8007cd8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007cc4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	68b9      	ldr	r1, [r7, #8]
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 f840 	bl	8007d58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3730      	adds	r7, #48	@ 0x30
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b08a      	sub	sp, #40	@ 0x28
 8007ce6:	af02      	add	r7, sp, #8
 8007ce8:	60f8      	str	r0, [r7, #12]
 8007cea:	60b9      	str	r1, [r7, #8]
 8007cec:	4613      	mov	r3, r2
 8007cee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10b      	bne.n	8007d0e <xQueueGenericCreate+0x2c>
	__asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	613b      	str	r3, [r7, #16]
}
 8007d08:	bf00      	nop
 8007d0a:	bf00      	nop
 8007d0c:	e7fd      	b.n	8007d0a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	fb02 f303 	mul.w	r3, r2, r3
 8007d16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	3350      	adds	r3, #80	@ 0x50
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f002 fe35 	bl	800a98c <pvPortMalloc>
 8007d22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d011      	beq.n	8007d4e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	3350      	adds	r3, #80	@ 0x50
 8007d32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d3c:	79fa      	ldrb	r2, [r7, #7]
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	9300      	str	r3, [sp, #0]
 8007d42:	4613      	mov	r3, r2
 8007d44:	697a      	ldr	r2, [r7, #20]
 8007d46:	68b9      	ldr	r1, [r7, #8]
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f000 f805 	bl	8007d58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d4e:	69bb      	ldr	r3, [r7, #24]
	}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3720      	adds	r7, #32
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
 8007d64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d103      	bne.n	8007d74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	69ba      	ldr	r2, [r7, #24]
 8007d70:	601a      	str	r2, [r3, #0]
 8007d72:	e002      	b.n	8007d7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d86:	2101      	movs	r1, #1
 8007d88:	69b8      	ldr	r0, [r7, #24]
 8007d8a:	f7ff fec3 	bl	8007b14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	78fa      	ldrb	r2, [r7, #3]
 8007d92:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d96:	bf00      	nop
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b08a      	sub	sp, #40	@ 0x28
 8007da2:	af02      	add	r7, sp, #8
 8007da4:	60f8      	str	r0, [r7, #12]
 8007da6:	60b9      	str	r1, [r7, #8]
 8007da8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10b      	bne.n	8007dc8 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	61bb      	str	r3, [r7, #24]
}
 8007dc2:	bf00      	nop
 8007dc4:	bf00      	nop
 8007dc6:	e7fd      	b.n	8007dc4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d90b      	bls.n	8007de8 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	617b      	str	r3, [r7, #20]
}
 8007de2:	bf00      	nop
 8007de4:	bf00      	nop
 8007de6:	e7fd      	b.n	8007de4 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007de8:	2302      	movs	r3, #2
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	2100      	movs	r1, #0
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f7ff fef8 	bl	8007be8 <xQueueGenericCreateStatic>
 8007df8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d002      	beq.n	8007e06 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007e06:	69fb      	ldr	r3, [r7, #28]
	}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3720      	adds	r7, #32
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10b      	bne.n	8007e38 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	613b      	str	r3, [r7, #16]
}
 8007e32:	bf00      	nop
 8007e34:	bf00      	nop
 8007e36:	e7fd      	b.n	8007e34 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007e38:	683a      	ldr	r2, [r7, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d90b      	bls.n	8007e58 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	60fb      	str	r3, [r7, #12]
}
 8007e52:	bf00      	nop
 8007e54:	bf00      	nop
 8007e56:	e7fd      	b.n	8007e54 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007e58:	2202      	movs	r2, #2
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7ff ff40 	bl	8007ce2 <xQueueGenericCreate>
 8007e62:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d002      	beq.n	8007e70 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007e70:	697b      	ldr	r3, [r7, #20]
	}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3718      	adds	r7, #24
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
	...

08007e7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b08e      	sub	sp, #56	@ 0x38
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
 8007e88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10b      	bne.n	8007eb0 <xQueueGenericSend+0x34>
	__asm volatile
 8007e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007eaa:	bf00      	nop
 8007eac:	bf00      	nop
 8007eae:	e7fd      	b.n	8007eac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d103      	bne.n	8007ebe <xQueueGenericSend+0x42>
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <xQueueGenericSend+0x46>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e000      	b.n	8007ec4 <xQueueGenericSend+0x48>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10b      	bne.n	8007ee0 <xQueueGenericSend+0x64>
	__asm volatile
 8007ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007eda:	bf00      	nop
 8007edc:	bf00      	nop
 8007ede:	e7fd      	b.n	8007edc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d103      	bne.n	8007eee <xQueueGenericSend+0x72>
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d101      	bne.n	8007ef2 <xQueueGenericSend+0x76>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e000      	b.n	8007ef4 <xQueueGenericSend+0x78>
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10b      	bne.n	8007f10 <xQueueGenericSend+0x94>
	__asm volatile
 8007ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007efc:	f383 8811 	msr	BASEPRI, r3
 8007f00:	f3bf 8f6f 	isb	sy
 8007f04:	f3bf 8f4f 	dsb	sy
 8007f08:	623b      	str	r3, [r7, #32]
}
 8007f0a:	bf00      	nop
 8007f0c:	bf00      	nop
 8007f0e:	e7fd      	b.n	8007f0c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f10:	f001 fdb0 	bl	8009a74 <xTaskGetSchedulerState>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d102      	bne.n	8007f20 <xQueueGenericSend+0xa4>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d101      	bne.n	8007f24 <xQueueGenericSend+0xa8>
 8007f20:	2301      	movs	r3, #1
 8007f22:	e000      	b.n	8007f26 <xQueueGenericSend+0xaa>
 8007f24:	2300      	movs	r3, #0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10b      	bne.n	8007f42 <xQueueGenericSend+0xc6>
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	61fb      	str	r3, [r7, #28]
}
 8007f3c:	bf00      	nop
 8007f3e:	bf00      	nop
 8007f40:	e7fd      	b.n	8007f3e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f42:	f002 fc01 	bl	800a748 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d302      	bcc.n	8007f58 <xQueueGenericSend+0xdc>
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d129      	bne.n	8007fac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f58:	683a      	ldr	r2, [r7, #0]
 8007f5a:	68b9      	ldr	r1, [r7, #8]
 8007f5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f5e:	f000 fc91 	bl	8008884 <prvCopyDataToQueue>
 8007f62:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d010      	beq.n	8007f8e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6e:	3324      	adds	r3, #36	@ 0x24
 8007f70:	4618      	mov	r0, r3
 8007f72:	f001 fbb9 	bl	80096e8 <xTaskRemoveFromEventList>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d013      	beq.n	8007fa4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007f7c:	4b3f      	ldr	r3, [pc, #252]	@ (800807c <xQueueGenericSend+0x200>)
 8007f7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	e00a      	b.n	8007fa4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d007      	beq.n	8007fa4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007f94:	4b39      	ldr	r3, [pc, #228]	@ (800807c <xQueueGenericSend+0x200>)
 8007f96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f9a:	601a      	str	r2, [r3, #0]
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007fa4:	f002 fc02 	bl	800a7ac <vPortExitCritical>
				return pdPASS;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e063      	b.n	8008074 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d103      	bne.n	8007fba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fb2:	f002 fbfb 	bl	800a7ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	e05c      	b.n	8008074 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d106      	bne.n	8007fce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fc0:	f107 0314 	add.w	r3, r7, #20
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f001 fbf3 	bl	80097b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007fce:	f002 fbed 	bl	800a7ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fd2:	f001 f95b 	bl	800928c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fd6:	f002 fbb7 	bl	800a748 <vPortEnterCritical>
 8007fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007fe0:	b25b      	sxtb	r3, r3
 8007fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe6:	d103      	bne.n	8007ff0 <xQueueGenericSend+0x174>
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ff6:	b25b      	sxtb	r3, r3
 8007ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffc:	d103      	bne.n	8008006 <xQueueGenericSend+0x18a>
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008000:	2200      	movs	r2, #0
 8008002:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008006:	f002 fbd1 	bl	800a7ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800800a:	1d3a      	adds	r2, r7, #4
 800800c:	f107 0314 	add.w	r3, r7, #20
 8008010:	4611      	mov	r1, r2
 8008012:	4618      	mov	r0, r3
 8008014:	f001 fbe2 	bl	80097dc <xTaskCheckForTimeOut>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d124      	bne.n	8008068 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800801e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008020:	f000 fd28 	bl	8008a74 <prvIsQueueFull>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d018      	beq.n	800805c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800802a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802c:	3310      	adds	r3, #16
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	4611      	mov	r1, r2
 8008032:	4618      	mov	r0, r3
 8008034:	f001 fb06 	bl	8009644 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008038:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800803a:	f000 fcb3 	bl	80089a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800803e:	f001 f933 	bl	80092a8 <xTaskResumeAll>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	f47f af7c 	bne.w	8007f42 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800804a:	4b0c      	ldr	r3, [pc, #48]	@ (800807c <xQueueGenericSend+0x200>)
 800804c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008050:	601a      	str	r2, [r3, #0]
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	e772      	b.n	8007f42 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800805c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800805e:	f000 fca1 	bl	80089a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008062:	f001 f921 	bl	80092a8 <xTaskResumeAll>
 8008066:	e76c      	b.n	8007f42 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008068:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800806a:	f000 fc9b 	bl	80089a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800806e:	f001 f91b 	bl	80092a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008072:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008074:	4618      	mov	r0, r3
 8008076:	3738      	adds	r7, #56	@ 0x38
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	e000ed04 	.word	0xe000ed04

08008080 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b090      	sub	sp, #64	@ 0x40
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
 800808c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10b      	bne.n	80080b0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80080aa:	bf00      	nop
 80080ac:	bf00      	nop
 80080ae:	e7fd      	b.n	80080ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d103      	bne.n	80080be <xQueueGenericSendFromISR+0x3e>
 80080b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d101      	bne.n	80080c2 <xQueueGenericSendFromISR+0x42>
 80080be:	2301      	movs	r3, #1
 80080c0:	e000      	b.n	80080c4 <xQueueGenericSendFromISR+0x44>
 80080c2:	2300      	movs	r3, #0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10b      	bne.n	80080e0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80080da:	bf00      	nop
 80080dc:	bf00      	nop
 80080de:	e7fd      	b.n	80080dc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d103      	bne.n	80080ee <xQueueGenericSendFromISR+0x6e>
 80080e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d101      	bne.n	80080f2 <xQueueGenericSendFromISR+0x72>
 80080ee:	2301      	movs	r3, #1
 80080f0:	e000      	b.n	80080f4 <xQueueGenericSendFromISR+0x74>
 80080f2:	2300      	movs	r3, #0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10b      	bne.n	8008110 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80080f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fc:	f383 8811 	msr	BASEPRI, r3
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	623b      	str	r3, [r7, #32]
}
 800810a:	bf00      	nop
 800810c:	bf00      	nop
 800810e:	e7fd      	b.n	800810c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008110:	f002 fbfa 	bl	800a908 <vPortValidateInterruptPriority>
	__asm volatile
 8008114:	f3ef 8211 	mrs	r2, BASEPRI
 8008118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	61fa      	str	r2, [r7, #28]
 800812a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800812c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800812e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008132:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008138:	429a      	cmp	r2, r3
 800813a:	d302      	bcc.n	8008142 <xQueueGenericSendFromISR+0xc2>
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	2b02      	cmp	r3, #2
 8008140:	d12f      	bne.n	80081a2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008144:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008148:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800814c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800814e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008150:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	68b9      	ldr	r1, [r7, #8]
 8008156:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008158:	f000 fb94 	bl	8008884 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800815c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008164:	d112      	bne.n	800818c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800816a:	2b00      	cmp	r3, #0
 800816c:	d016      	beq.n	800819c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800816e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008170:	3324      	adds	r3, #36	@ 0x24
 8008172:	4618      	mov	r0, r3
 8008174:	f001 fab8 	bl	80096e8 <xTaskRemoveFromEventList>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00e      	beq.n	800819c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00b      	beq.n	800819c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	601a      	str	r2, [r3, #0]
 800818a:	e007      	b.n	800819c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800818c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008190:	3301      	adds	r3, #1
 8008192:	b2db      	uxtb	r3, r3
 8008194:	b25a      	sxtb	r2, r3
 8008196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008198:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800819c:	2301      	movs	r3, #1
 800819e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80081a0:	e001      	b.n	80081a6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081a2:	2300      	movs	r3, #0
 80081a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081a8:	617b      	str	r3, [r7, #20]
	__asm volatile
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	f383 8811 	msr	BASEPRI, r3
}
 80081b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3740      	adds	r7, #64	@ 0x40
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b08e      	sub	sp, #56	@ 0x38
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80081ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10b      	bne.n	80081e8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	623b      	str	r3, [r7, #32]
}
 80081e2:	bf00      	nop
 80081e4:	bf00      	nop
 80081e6:	e7fd      	b.n	80081e4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80081e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00b      	beq.n	8008208 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	61fb      	str	r3, [r7, #28]
}
 8008202:	bf00      	nop
 8008204:	bf00      	nop
 8008206:	e7fd      	b.n	8008204 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d103      	bne.n	8008218 <xQueueGiveFromISR+0x5c>
 8008210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d101      	bne.n	800821c <xQueueGiveFromISR+0x60>
 8008218:	2301      	movs	r3, #1
 800821a:	e000      	b.n	800821e <xQueueGiveFromISR+0x62>
 800821c:	2300      	movs	r3, #0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10b      	bne.n	800823a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	61bb      	str	r3, [r7, #24]
}
 8008234:	bf00      	nop
 8008236:	bf00      	nop
 8008238:	e7fd      	b.n	8008236 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800823a:	f002 fb65 	bl	800a908 <vPortValidateInterruptPriority>
	__asm volatile
 800823e:	f3ef 8211 	mrs	r2, BASEPRI
 8008242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008246:	f383 8811 	msr	BASEPRI, r3
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	617a      	str	r2, [r7, #20]
 8008254:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008256:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008258:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800825a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800825e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008264:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008266:	429a      	cmp	r2, r3
 8008268:	d22b      	bcs.n	80082c2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800826a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008270:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800827a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800827c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008284:	d112      	bne.n	80082ac <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800828a:	2b00      	cmp	r3, #0
 800828c:	d016      	beq.n	80082bc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800828e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008290:	3324      	adds	r3, #36	@ 0x24
 8008292:	4618      	mov	r0, r3
 8008294:	f001 fa28 	bl	80096e8 <xTaskRemoveFromEventList>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00e      	beq.n	80082bc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00b      	beq.n	80082bc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	2201      	movs	r2, #1
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	e007      	b.n	80082bc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80082ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082b0:	3301      	adds	r3, #1
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	b25a      	sxtb	r2, r3
 80082b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80082bc:	2301      	movs	r3, #1
 80082be:	637b      	str	r3, [r7, #52]	@ 0x34
 80082c0:	e001      	b.n	80082c6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80082c2:	2300      	movs	r3, #0
 80082c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80082c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082c8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f383 8811 	msr	BASEPRI, r3
}
 80082d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3738      	adds	r7, #56	@ 0x38
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b08c      	sub	sp, #48	@ 0x30
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80082e8:	2300      	movs	r3, #0
 80082ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10b      	bne.n	800830e <xQueueReceive+0x32>
	__asm volatile
 80082f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082fa:	f383 8811 	msr	BASEPRI, r3
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	623b      	str	r3, [r7, #32]
}
 8008308:	bf00      	nop
 800830a:	bf00      	nop
 800830c:	e7fd      	b.n	800830a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d103      	bne.n	800831c <xQueueReceive+0x40>
 8008314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008318:	2b00      	cmp	r3, #0
 800831a:	d101      	bne.n	8008320 <xQueueReceive+0x44>
 800831c:	2301      	movs	r3, #1
 800831e:	e000      	b.n	8008322 <xQueueReceive+0x46>
 8008320:	2300      	movs	r3, #0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10b      	bne.n	800833e <xQueueReceive+0x62>
	__asm volatile
 8008326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	61fb      	str	r3, [r7, #28]
}
 8008338:	bf00      	nop
 800833a:	bf00      	nop
 800833c:	e7fd      	b.n	800833a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800833e:	f001 fb99 	bl	8009a74 <xTaskGetSchedulerState>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d102      	bne.n	800834e <xQueueReceive+0x72>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d101      	bne.n	8008352 <xQueueReceive+0x76>
 800834e:	2301      	movs	r3, #1
 8008350:	e000      	b.n	8008354 <xQueueReceive+0x78>
 8008352:	2300      	movs	r3, #0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10b      	bne.n	8008370 <xQueueReceive+0x94>
	__asm volatile
 8008358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835c:	f383 8811 	msr	BASEPRI, r3
 8008360:	f3bf 8f6f 	isb	sy
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	61bb      	str	r3, [r7, #24]
}
 800836a:	bf00      	nop
 800836c:	bf00      	nop
 800836e:	e7fd      	b.n	800836c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008370:	f002 f9ea 	bl	800a748 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008378:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800837a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837c:	2b00      	cmp	r3, #0
 800837e:	d01f      	beq.n	80083c0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008380:	68b9      	ldr	r1, [r7, #8]
 8008382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008384:	f000 fae8 	bl	8008958 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838a:	1e5a      	subs	r2, r3, #1
 800838c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00f      	beq.n	80083b8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839a:	3310      	adds	r3, #16
 800839c:	4618      	mov	r0, r3
 800839e:	f001 f9a3 	bl	80096e8 <xTaskRemoveFromEventList>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d007      	beq.n	80083b8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80083a8:	4b3c      	ldr	r3, [pc, #240]	@ (800849c <xQueueReceive+0x1c0>)
 80083aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80083b8:	f002 f9f8 	bl	800a7ac <vPortExitCritical>
				return pdPASS;
 80083bc:	2301      	movs	r3, #1
 80083be:	e069      	b.n	8008494 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d103      	bne.n	80083ce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083c6:	f002 f9f1 	bl	800a7ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083ca:	2300      	movs	r3, #0
 80083cc:	e062      	b.n	8008494 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d106      	bne.n	80083e2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083d4:	f107 0310 	add.w	r3, r7, #16
 80083d8:	4618      	mov	r0, r3
 80083da:	f001 f9e9 	bl	80097b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083de:	2301      	movs	r3, #1
 80083e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083e2:	f002 f9e3 	bl	800a7ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083e6:	f000 ff51 	bl	800928c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083ea:	f002 f9ad 	bl	800a748 <vPortEnterCritical>
 80083ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083f4:	b25b      	sxtb	r3, r3
 80083f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fa:	d103      	bne.n	8008404 <xQueueReceive+0x128>
 80083fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008406:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800840a:	b25b      	sxtb	r3, r3
 800840c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008410:	d103      	bne.n	800841a <xQueueReceive+0x13e>
 8008412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008414:	2200      	movs	r2, #0
 8008416:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800841a:	f002 f9c7 	bl	800a7ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800841e:	1d3a      	adds	r2, r7, #4
 8008420:	f107 0310 	add.w	r3, r7, #16
 8008424:	4611      	mov	r1, r2
 8008426:	4618      	mov	r0, r3
 8008428:	f001 f9d8 	bl	80097dc <xTaskCheckForTimeOut>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d123      	bne.n	800847a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008432:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008434:	f000 fb08 	bl	8008a48 <prvIsQueueEmpty>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d017      	beq.n	800846e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800843e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008440:	3324      	adds	r3, #36	@ 0x24
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	4611      	mov	r1, r2
 8008446:	4618      	mov	r0, r3
 8008448:	f001 f8fc 	bl	8009644 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800844c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800844e:	f000 faa9 	bl	80089a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008452:	f000 ff29 	bl	80092a8 <xTaskResumeAll>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d189      	bne.n	8008370 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800845c:	4b0f      	ldr	r3, [pc, #60]	@ (800849c <xQueueReceive+0x1c0>)
 800845e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	e780      	b.n	8008370 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800846e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008470:	f000 fa98 	bl	80089a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008474:	f000 ff18 	bl	80092a8 <xTaskResumeAll>
 8008478:	e77a      	b.n	8008370 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800847a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800847c:	f000 fa92 	bl	80089a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008480:	f000 ff12 	bl	80092a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008484:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008486:	f000 fadf 	bl	8008a48 <prvIsQueueEmpty>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	f43f af6f 	beq.w	8008370 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008492:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008494:	4618      	mov	r0, r3
 8008496:	3730      	adds	r7, #48	@ 0x30
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	e000ed04 	.word	0xe000ed04

080084a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b08e      	sub	sp, #56	@ 0x38
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80084aa:	2300      	movs	r3, #0
 80084ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80084b2:	2300      	movs	r3, #0
 80084b4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80084b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10b      	bne.n	80084d4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80084bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	623b      	str	r3, [r7, #32]
}
 80084ce:	bf00      	nop
 80084d0:	bf00      	nop
 80084d2:	e7fd      	b.n	80084d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80084d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00b      	beq.n	80084f4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	61fb      	str	r3, [r7, #28]
}
 80084ee:	bf00      	nop
 80084f0:	bf00      	nop
 80084f2:	e7fd      	b.n	80084f0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084f4:	f001 fabe 	bl	8009a74 <xTaskGetSchedulerState>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d102      	bne.n	8008504 <xQueueSemaphoreTake+0x64>
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d101      	bne.n	8008508 <xQueueSemaphoreTake+0x68>
 8008504:	2301      	movs	r3, #1
 8008506:	e000      	b.n	800850a <xQueueSemaphoreTake+0x6a>
 8008508:	2300      	movs	r3, #0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10b      	bne.n	8008526 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	61bb      	str	r3, [r7, #24]
}
 8008520:	bf00      	nop
 8008522:	bf00      	nop
 8008524:	e7fd      	b.n	8008522 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008526:	f002 f90f 	bl	800a748 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800852a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800852c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800852e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008532:	2b00      	cmp	r3, #0
 8008534:	d024      	beq.n	8008580 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008538:	1e5a      	subs	r2, r3, #1
 800853a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800853c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800853e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d104      	bne.n	8008550 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008546:	f001 fc0f 	bl	8009d68 <pvTaskIncrementMutexHeldCount>
 800854a:	4602      	mov	r2, r0
 800854c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800854e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00f      	beq.n	8008578 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800855a:	3310      	adds	r3, #16
 800855c:	4618      	mov	r0, r3
 800855e:	f001 f8c3 	bl	80096e8 <xTaskRemoveFromEventList>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d007      	beq.n	8008578 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008568:	4b54      	ldr	r3, [pc, #336]	@ (80086bc <xQueueSemaphoreTake+0x21c>)
 800856a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800856e:	601a      	str	r2, [r3, #0]
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008578:	f002 f918 	bl	800a7ac <vPortExitCritical>
				return pdPASS;
 800857c:	2301      	movs	r3, #1
 800857e:	e098      	b.n	80086b2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d112      	bne.n	80085ac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00b      	beq.n	80085a4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	617b      	str	r3, [r7, #20]
}
 800859e:	bf00      	nop
 80085a0:	bf00      	nop
 80085a2:	e7fd      	b.n	80085a0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80085a4:	f002 f902 	bl	800a7ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80085a8:	2300      	movs	r3, #0
 80085aa:	e082      	b.n	80086b2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d106      	bne.n	80085c0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085b2:	f107 030c 	add.w	r3, r7, #12
 80085b6:	4618      	mov	r0, r3
 80085b8:	f001 f8fa 	bl	80097b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085bc:	2301      	movs	r3, #1
 80085be:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085c0:	f002 f8f4 	bl	800a7ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085c4:	f000 fe62 	bl	800928c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085c8:	f002 f8be 	bl	800a748 <vPortEnterCritical>
 80085cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80085d2:	b25b      	sxtb	r3, r3
 80085d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d8:	d103      	bne.n	80085e2 <xQueueSemaphoreTake+0x142>
 80085da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085e8:	b25b      	sxtb	r3, r3
 80085ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ee:	d103      	bne.n	80085f8 <xQueueSemaphoreTake+0x158>
 80085f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085f8:	f002 f8d8 	bl	800a7ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085fc:	463a      	mov	r2, r7
 80085fe:	f107 030c 	add.w	r3, r7, #12
 8008602:	4611      	mov	r1, r2
 8008604:	4618      	mov	r0, r3
 8008606:	f001 f8e9 	bl	80097dc <xTaskCheckForTimeOut>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d132      	bne.n	8008676 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008610:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008612:	f000 fa19 	bl	8008a48 <prvIsQueueEmpty>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d026      	beq.n	800866a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800861c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d109      	bne.n	8008638 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008624:	f002 f890 	bl	800a748 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	4618      	mov	r0, r3
 800862e:	f001 fa3f 	bl	8009ab0 <xTaskPriorityInherit>
 8008632:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008634:	f002 f8ba 	bl	800a7ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800863a:	3324      	adds	r3, #36	@ 0x24
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	4611      	mov	r1, r2
 8008640:	4618      	mov	r0, r3
 8008642:	f000 ffff 	bl	8009644 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008646:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008648:	f000 f9ac 	bl	80089a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800864c:	f000 fe2c 	bl	80092a8 <xTaskResumeAll>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	f47f af67 	bne.w	8008526 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008658:	4b18      	ldr	r3, [pc, #96]	@ (80086bc <xQueueSemaphoreTake+0x21c>)
 800865a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800865e:	601a      	str	r2, [r3, #0]
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	e75d      	b.n	8008526 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800866a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800866c:	f000 f99a 	bl	80089a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008670:	f000 fe1a 	bl	80092a8 <xTaskResumeAll>
 8008674:	e757      	b.n	8008526 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008676:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008678:	f000 f994 	bl	80089a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800867c:	f000 fe14 	bl	80092a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008680:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008682:	f000 f9e1 	bl	8008a48 <prvIsQueueEmpty>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	f43f af4c 	beq.w	8008526 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800868e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00d      	beq.n	80086b0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008694:	f002 f858 	bl	800a748 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008698:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800869a:	f000 f8db 	bl	8008854 <prvGetDisinheritPriorityAfterTimeout>
 800869e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80086a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80086a6:	4618      	mov	r0, r3
 80086a8:	f001 fada 	bl	8009c60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80086ac:	f002 f87e 	bl	800a7ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80086b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3738      	adds	r7, #56	@ 0x38
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	e000ed04 	.word	0xe000ed04

080086c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b08e      	sub	sp, #56	@ 0x38
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80086d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10b      	bne.n	80086ee <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80086d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	623b      	str	r3, [r7, #32]
}
 80086e8:	bf00      	nop
 80086ea:	bf00      	nop
 80086ec:	e7fd      	b.n	80086ea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d103      	bne.n	80086fc <xQueueReceiveFromISR+0x3c>
 80086f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d101      	bne.n	8008700 <xQueueReceiveFromISR+0x40>
 80086fc:	2301      	movs	r3, #1
 80086fe:	e000      	b.n	8008702 <xQueueReceiveFromISR+0x42>
 8008700:	2300      	movs	r3, #0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10b      	bne.n	800871e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800870a:	f383 8811 	msr	BASEPRI, r3
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f3bf 8f4f 	dsb	sy
 8008716:	61fb      	str	r3, [r7, #28]
}
 8008718:	bf00      	nop
 800871a:	bf00      	nop
 800871c:	e7fd      	b.n	800871a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800871e:	f002 f8f3 	bl	800a908 <vPortValidateInterruptPriority>
	__asm volatile
 8008722:	f3ef 8211 	mrs	r2, BASEPRI
 8008726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872a:	f383 8811 	msr	BASEPRI, r3
 800872e:	f3bf 8f6f 	isb	sy
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	61ba      	str	r2, [r7, #24]
 8008738:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800873a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800873c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800873e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008742:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008746:	2b00      	cmp	r3, #0
 8008748:	d02f      	beq.n	80087aa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800874a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008750:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008754:	68b9      	ldr	r1, [r7, #8]
 8008756:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008758:	f000 f8fe 	bl	8008958 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800875c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800875e:	1e5a      	subs	r2, r3, #1
 8008760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008762:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008764:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800876c:	d112      	bne.n	8008794 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800876e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d016      	beq.n	80087a4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008778:	3310      	adds	r3, #16
 800877a:	4618      	mov	r0, r3
 800877c:	f000 ffb4 	bl	80096e8 <xTaskRemoveFromEventList>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00e      	beq.n	80087a4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00b      	beq.n	80087a4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	601a      	str	r2, [r3, #0]
 8008792:	e007      	b.n	80087a4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008798:	3301      	adds	r3, #1
 800879a:	b2db      	uxtb	r3, r3
 800879c:	b25a      	sxtb	r2, r3
 800879e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80087a4:	2301      	movs	r3, #1
 80087a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80087a8:	e001      	b.n	80087ae <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80087aa:	2300      	movs	r3, #0
 80087ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f383 8811 	msr	BASEPRI, r3
}
 80087b8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3738      	adds	r7, #56	@ 0x38
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b086      	sub	sp, #24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10b      	bne.n	80087ee <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 80087d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	60fb      	str	r3, [r7, #12]
}
 80087e8:	bf00      	nop
 80087ea:	bf00      	nop
 80087ec:	e7fd      	b.n	80087ea <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 80087ee:	f001 ffab 	bl	800a748 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087fa:	1ad3      	subs	r3, r2, r3
 80087fc:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80087fe:	f001 ffd5 	bl	800a7ac <vPortExitCritical>

	return uxReturn;
 8008802:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008804:	4618      	mov	r0, r3
 8008806:	3718      	adds	r7, #24
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10b      	bne.n	8008836 <vQueueDelete+0x2a>
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	60bb      	str	r3, [r7, #8]
}
 8008830:	bf00      	nop
 8008832:	bf00      	nop
 8008834:	e7fd      	b.n	8008832 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f000 f95e 	bl	8008af8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008842:	2b00      	cmp	r3, #0
 8008844:	d102      	bne.n	800884c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f002 f96e 	bl	800ab28 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800884c:	bf00      	nop
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008860:	2b00      	cmp	r3, #0
 8008862:	d006      	beq.n	8008872 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800886e:	60fb      	str	r3, [r7, #12]
 8008870:	e001      	b.n	8008876 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008872:	2300      	movs	r3, #0
 8008874:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008876:	68fb      	ldr	r3, [r7, #12]
	}
 8008878:	4618      	mov	r0, r3
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b086      	sub	sp, #24
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008890:	2300      	movs	r3, #0
 8008892:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008898:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d10d      	bne.n	80088be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d14d      	bne.n	8008946 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f001 f966 	bl	8009b80 <xTaskPriorityDisinherit>
 80088b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	609a      	str	r2, [r3, #8]
 80088bc:	e043      	b.n	8008946 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d119      	bne.n	80088f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6858      	ldr	r0, [r3, #4]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088cc:	461a      	mov	r2, r3
 80088ce:	68b9      	ldr	r1, [r7, #8]
 80088d0:	f002 faf4 	bl	800aebc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	685a      	ldr	r2, [r3, #4]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088dc:	441a      	add	r2, r3
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	685a      	ldr	r2, [r3, #4]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d32b      	bcc.n	8008946 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	605a      	str	r2, [r3, #4]
 80088f6:	e026      	b.n	8008946 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	68d8      	ldr	r0, [r3, #12]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008900:	461a      	mov	r2, r3
 8008902:	68b9      	ldr	r1, [r7, #8]
 8008904:	f002 fada 	bl	800aebc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	68da      	ldr	r2, [r3, #12]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008910:	425b      	negs	r3, r3
 8008912:	441a      	add	r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	68da      	ldr	r2, [r3, #12]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	429a      	cmp	r2, r3
 8008922:	d207      	bcs.n	8008934 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	689a      	ldr	r2, [r3, #8]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800892c:	425b      	negs	r3, r3
 800892e:	441a      	add	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b02      	cmp	r3, #2
 8008938:	d105      	bne.n	8008946 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d002      	beq.n	8008946 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	3b01      	subs	r3, #1
 8008944:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	1c5a      	adds	r2, r3, #1
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800894e:	697b      	ldr	r3, [r7, #20]
}
 8008950:	4618      	mov	r0, r3
 8008952:	3718      	adds	r7, #24
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008966:	2b00      	cmp	r3, #0
 8008968:	d018      	beq.n	800899c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68da      	ldr	r2, [r3, #12]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008972:	441a      	add	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68da      	ldr	r2, [r3, #12]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	429a      	cmp	r2, r3
 8008982:	d303      	bcc.n	800898c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	68d9      	ldr	r1, [r3, #12]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008994:	461a      	mov	r2, r3
 8008996:	6838      	ldr	r0, [r7, #0]
 8008998:	f002 fa90 	bl	800aebc <memcpy>
	}
}
 800899c:	bf00      	nop
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80089ac:	f001 fecc 	bl	800a748 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089b8:	e011      	b.n	80089de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d012      	beq.n	80089e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	3324      	adds	r3, #36	@ 0x24
 80089c6:	4618      	mov	r0, r3
 80089c8:	f000 fe8e 	bl	80096e8 <xTaskRemoveFromEventList>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80089d2:	f000 ff67 	bl	80098a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80089d6:	7bfb      	ldrb	r3, [r7, #15]
 80089d8:	3b01      	subs	r3, #1
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	dce9      	bgt.n	80089ba <prvUnlockQueue+0x16>
 80089e6:	e000      	b.n	80089ea <prvUnlockQueue+0x46>
					break;
 80089e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	22ff      	movs	r2, #255	@ 0xff
 80089ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80089f2:	f001 fedb 	bl	800a7ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80089f6:	f001 fea7 	bl	800a748 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a02:	e011      	b.n	8008a28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d012      	beq.n	8008a32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	3310      	adds	r3, #16
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 fe69 	bl	80096e8 <xTaskRemoveFromEventList>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d001      	beq.n	8008a20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a1c:	f000 ff42 	bl	80098a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a20:	7bbb      	ldrb	r3, [r7, #14]
 8008a22:	3b01      	subs	r3, #1
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	dce9      	bgt.n	8008a04 <prvUnlockQueue+0x60>
 8008a30:	e000      	b.n	8008a34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	22ff      	movs	r2, #255	@ 0xff
 8008a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008a3c:	f001 feb6 	bl	800a7ac <vPortExitCritical>
}
 8008a40:	bf00      	nop
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a50:	f001 fe7a 	bl	800a748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d102      	bne.n	8008a62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	60fb      	str	r3, [r7, #12]
 8008a60:	e001      	b.n	8008a66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a62:	2300      	movs	r3, #0
 8008a64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a66:	f001 fea1 	bl	800a7ac <vPortExitCritical>

	return xReturn;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a7c:	f001 fe64 	bl	800a748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d102      	bne.n	8008a92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	60fb      	str	r3, [r7, #12]
 8008a90:	e001      	b.n	8008a96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a92:	2300      	movs	r3, #0
 8008a94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a96:	f001 fe89 	bl	800a7ac <vPortExitCritical>

	return xReturn;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008aae:	2300      	movs	r3, #0
 8008ab0:	60fb      	str	r3, [r7, #12]
 8008ab2:	e014      	b.n	8008ade <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ab4:	4a0f      	ldr	r2, [pc, #60]	@ (8008af4 <vQueueAddToRegistry+0x50>)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d10b      	bne.n	8008ad8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ac0:	490c      	ldr	r1, [pc, #48]	@ (8008af4 <vQueueAddToRegistry+0x50>)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008aca:	4a0a      	ldr	r2, [pc, #40]	@ (8008af4 <vQueueAddToRegistry+0x50>)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	00db      	lsls	r3, r3, #3
 8008ad0:	4413      	add	r3, r2
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008ad6:	e006      	b.n	8008ae6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	3301      	adds	r3, #1
 8008adc:	60fb      	str	r3, [r7, #12]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2b07      	cmp	r3, #7
 8008ae2:	d9e7      	bls.n	8008ab4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ae4:	bf00      	nop
 8008ae6:	bf00      	nop
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	20000cb8 	.word	0x20000cb8

08008af8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b00:	2300      	movs	r3, #0
 8008b02:	60fb      	str	r3, [r7, #12]
 8008b04:	e016      	b.n	8008b34 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008b06:	4a10      	ldr	r2, [pc, #64]	@ (8008b48 <vQueueUnregisterQueue+0x50>)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	00db      	lsls	r3, r3, #3
 8008b0c:	4413      	add	r3, r2
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d10b      	bne.n	8008b2e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008b16:	4a0c      	ldr	r2, [pc, #48]	@ (8008b48 <vQueueUnregisterQueue+0x50>)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008b20:	4a09      	ldr	r2, [pc, #36]	@ (8008b48 <vQueueUnregisterQueue+0x50>)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	00db      	lsls	r3, r3, #3
 8008b26:	4413      	add	r3, r2
 8008b28:	2200      	movs	r2, #0
 8008b2a:	605a      	str	r2, [r3, #4]
				break;
 8008b2c:	e006      	b.n	8008b3c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	3301      	adds	r3, #1
 8008b32:	60fb      	str	r3, [r7, #12]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2b07      	cmp	r3, #7
 8008b38:	d9e5      	bls.n	8008b06 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008b3a:	bf00      	nop
 8008b3c:	bf00      	nop
 8008b3e:	3714      	adds	r7, #20
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr
 8008b48:	20000cb8 	.word	0x20000cb8

08008b4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b086      	sub	sp, #24
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b5c:	f001 fdf4 	bl	800a748 <vPortEnterCritical>
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b66:	b25b      	sxtb	r3, r3
 8008b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6c:	d103      	bne.n	8008b76 <vQueueWaitForMessageRestricted+0x2a>
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b7c:	b25b      	sxtb	r3, r3
 8008b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b82:	d103      	bne.n	8008b8c <vQueueWaitForMessageRestricted+0x40>
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b8c:	f001 fe0e 	bl	800a7ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d106      	bne.n	8008ba6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	3324      	adds	r3, #36	@ 0x24
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	68b9      	ldr	r1, [r7, #8]
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f000 fd75 	bl	8009690 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008ba6:	6978      	ldr	r0, [r7, #20]
 8008ba8:	f7ff fefc 	bl	80089a4 <prvUnlockQueue>
	}
 8008bac:	bf00      	nop
 8008bae:	3718      	adds	r7, #24
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b08e      	sub	sp, #56	@ 0x38
 8008bb8:	af04      	add	r7, sp, #16
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
 8008bc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10b      	bne.n	8008be0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bcc:	f383 8811 	msr	BASEPRI, r3
 8008bd0:	f3bf 8f6f 	isb	sy
 8008bd4:	f3bf 8f4f 	dsb	sy
 8008bd8:	623b      	str	r3, [r7, #32]
}
 8008bda:	bf00      	nop
 8008bdc:	bf00      	nop
 8008bde:	e7fd      	b.n	8008bdc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10b      	bne.n	8008bfe <xTaskCreateStatic+0x4a>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	61fb      	str	r3, [r7, #28]
}
 8008bf8:	bf00      	nop
 8008bfa:	bf00      	nop
 8008bfc:	e7fd      	b.n	8008bfa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008bfe:	23a8      	movs	r3, #168	@ 0xa8
 8008c00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	2ba8      	cmp	r3, #168	@ 0xa8
 8008c06:	d00b      	beq.n	8008c20 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	61bb      	str	r3, [r7, #24]
}
 8008c1a:	bf00      	nop
 8008c1c:	bf00      	nop
 8008c1e:	e7fd      	b.n	8008c1c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c20:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d01e      	beq.n	8008c66 <xTaskCreateStatic+0xb2>
 8008c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d01b      	beq.n	8008c66 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c30:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c36:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c40:	2300      	movs	r3, #0
 8008c42:	9303      	str	r3, [sp, #12]
 8008c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c46:	9302      	str	r3, [sp, #8]
 8008c48:	f107 0314 	add.w	r3, r7, #20
 8008c4c:	9301      	str	r3, [sp, #4]
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	68b9      	ldr	r1, [r7, #8]
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f000 f851 	bl	8008d00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008c60:	f000 f8f6 	bl	8008e50 <prvAddNewTaskToReadyList>
 8008c64:	e001      	b.n	8008c6a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008c66:	2300      	movs	r3, #0
 8008c68:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c6a:	697b      	ldr	r3, [r7, #20]
	}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3728      	adds	r7, #40	@ 0x28
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b08c      	sub	sp, #48	@ 0x30
 8008c78:	af04      	add	r7, sp, #16
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	603b      	str	r3, [r7, #0]
 8008c80:	4613      	mov	r3, r2
 8008c82:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c84:	88fb      	ldrh	r3, [r7, #6]
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f001 fe7f 	bl	800a98c <pvPortMalloc>
 8008c8e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00e      	beq.n	8008cb4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c96:	20a8      	movs	r0, #168	@ 0xa8
 8008c98:	f001 fe78 	bl	800a98c <pvPortMalloc>
 8008c9c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d003      	beq.n	8008cac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	631a      	str	r2, [r3, #48]	@ 0x30
 8008caa:	e005      	b.n	8008cb8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008cac:	6978      	ldr	r0, [r7, #20]
 8008cae:	f001 ff3b 	bl	800ab28 <vPortFree>
 8008cb2:	e001      	b.n	8008cb8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d017      	beq.n	8008cee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008cc6:	88fa      	ldrh	r2, [r7, #6]
 8008cc8:	2300      	movs	r3, #0
 8008cca:	9303      	str	r3, [sp, #12]
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	9302      	str	r3, [sp, #8]
 8008cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd2:	9301      	str	r3, [sp, #4]
 8008cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd6:	9300      	str	r3, [sp, #0]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	68b9      	ldr	r1, [r7, #8]
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f000 f80f 	bl	8008d00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ce2:	69f8      	ldr	r0, [r7, #28]
 8008ce4:	f000 f8b4 	bl	8008e50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	61bb      	str	r3, [r7, #24]
 8008cec:	e002      	b.n	8008cf4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008cee:	f04f 33ff 	mov.w	r3, #4294967295
 8008cf2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008cf4:	69bb      	ldr	r3, [r7, #24]
	}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3720      	adds	r7, #32
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
	...

08008d00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b088      	sub	sp, #32
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
 8008d0c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d10:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	461a      	mov	r2, r3
 8008d18:	21a5      	movs	r1, #165	@ 0xa5
 8008d1a:	f002 f845 	bl	800ada8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	4413      	add	r3, r2
 8008d2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	f023 0307 	bic.w	r3, r3, #7
 8008d36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	f003 0307 	and.w	r3, r3, #7
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00b      	beq.n	8008d5a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d46:	f383 8811 	msr	BASEPRI, r3
 8008d4a:	f3bf 8f6f 	isb	sy
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	617b      	str	r3, [r7, #20]
}
 8008d54:	bf00      	nop
 8008d56:	bf00      	nop
 8008d58:	e7fd      	b.n	8008d56 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d01f      	beq.n	8008da0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d60:	2300      	movs	r3, #0
 8008d62:	61fb      	str	r3, [r7, #28]
 8008d64:	e012      	b.n	8008d8c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	7819      	ldrb	r1, [r3, #0]
 8008d6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	4413      	add	r3, r2
 8008d74:	3334      	adds	r3, #52	@ 0x34
 8008d76:	460a      	mov	r2, r1
 8008d78:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	4413      	add	r3, r2
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d006      	beq.n	8008d94 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	61fb      	str	r3, [r7, #28]
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	2b0f      	cmp	r3, #15
 8008d90:	d9e9      	bls.n	8008d66 <prvInitialiseNewTask+0x66>
 8008d92:	e000      	b.n	8008d96 <prvInitialiseNewTask+0x96>
			{
				break;
 8008d94:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d9e:	e003      	b.n	8008da8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008daa:	2b37      	cmp	r3, #55	@ 0x37
 8008dac:	d901      	bls.n	8008db2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008dae:	2337      	movs	r3, #55	@ 0x37
 8008db0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008db6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008dbc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc6:	3304      	adds	r3, #4
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7fe fe0f 	bl	80079ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd0:	3318      	adds	r3, #24
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fe fe0a 	bl	80079ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ddc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df0:	2200      	movs	r2, #0
 8008df2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e00:	3354      	adds	r3, #84	@ 0x54
 8008e02:	224c      	movs	r2, #76	@ 0x4c
 8008e04:	2100      	movs	r1, #0
 8008e06:	4618      	mov	r0, r3
 8008e08:	f001 ffce 	bl	800ada8 <memset>
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0e:	4a0d      	ldr	r2, [pc, #52]	@ (8008e44 <prvInitialiseNewTask+0x144>)
 8008e10:	659a      	str	r2, [r3, #88]	@ 0x58
 8008e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e14:	4a0c      	ldr	r2, [pc, #48]	@ (8008e48 <prvInitialiseNewTask+0x148>)
 8008e16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8008e4c <prvInitialiseNewTask+0x14c>)
 8008e1c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	68f9      	ldr	r1, [r7, #12]
 8008e22:	69b8      	ldr	r0, [r7, #24]
 8008e24:	f001 fb62 	bl	800a4ec <pxPortInitialiseStack>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d002      	beq.n	8008e3a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e3a:	bf00      	nop
 8008e3c:	3720      	adds	r7, #32
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	20001f04 	.word	0x20001f04
 8008e48:	20001f6c 	.word	0x20001f6c
 8008e4c:	20001fd4 	.word	0x20001fd4

08008e50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e58:	f001 fc76 	bl	800a748 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8008f14 <prvAddNewTaskToReadyList+0xc4>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3301      	adds	r3, #1
 8008e62:	4a2c      	ldr	r2, [pc, #176]	@ (8008f14 <prvAddNewTaskToReadyList+0xc4>)
 8008e64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e66:	4b2c      	ldr	r3, [pc, #176]	@ (8008f18 <prvAddNewTaskToReadyList+0xc8>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d109      	bne.n	8008e82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e6e:	4a2a      	ldr	r2, [pc, #168]	@ (8008f18 <prvAddNewTaskToReadyList+0xc8>)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e74:	4b27      	ldr	r3, [pc, #156]	@ (8008f14 <prvAddNewTaskToReadyList+0xc4>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d110      	bne.n	8008e9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e7c:	f000 fd36 	bl	80098ec <prvInitialiseTaskLists>
 8008e80:	e00d      	b.n	8008e9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e82:	4b26      	ldr	r3, [pc, #152]	@ (8008f1c <prvAddNewTaskToReadyList+0xcc>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d109      	bne.n	8008e9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e8a:	4b23      	ldr	r3, [pc, #140]	@ (8008f18 <prvAddNewTaskToReadyList+0xc8>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d802      	bhi.n	8008e9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e98:	4a1f      	ldr	r2, [pc, #124]	@ (8008f18 <prvAddNewTaskToReadyList+0xc8>)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e9e:	4b20      	ldr	r3, [pc, #128]	@ (8008f20 <prvAddNewTaskToReadyList+0xd0>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	4a1e      	ldr	r2, [pc, #120]	@ (8008f20 <prvAddNewTaskToReadyList+0xd0>)
 8008ea6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8008f20 <prvAddNewTaskToReadyList+0xd0>)
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8008f24 <prvAddNewTaskToReadyList+0xd4>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d903      	bls.n	8008ec4 <prvAddNewTaskToReadyList+0x74>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ec0:	4a18      	ldr	r2, [pc, #96]	@ (8008f24 <prvAddNewTaskToReadyList+0xd4>)
 8008ec2:	6013      	str	r3, [r2, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ec8:	4613      	mov	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4413      	add	r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4a15      	ldr	r2, [pc, #84]	@ (8008f28 <prvAddNewTaskToReadyList+0xd8>)
 8008ed2:	441a      	add	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	4619      	mov	r1, r3
 8008eda:	4610      	mov	r0, r2
 8008edc:	f7fe fd93 	bl	8007a06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ee0:	f001 fc64 	bl	800a7ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8008f1c <prvAddNewTaskToReadyList+0xcc>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00e      	beq.n	8008f0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008eec:	4b0a      	ldr	r3, [pc, #40]	@ (8008f18 <prvAddNewTaskToReadyList+0xc8>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d207      	bcs.n	8008f0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008efa:	4b0c      	ldr	r3, [pc, #48]	@ (8008f2c <prvAddNewTaskToReadyList+0xdc>)
 8008efc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f00:	601a      	str	r2, [r3, #0]
 8008f02:	f3bf 8f4f 	dsb	sy
 8008f06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f0a:	bf00      	nop
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	200011cc 	.word	0x200011cc
 8008f18:	20000cf8 	.word	0x20000cf8
 8008f1c:	200011d8 	.word	0x200011d8
 8008f20:	200011e8 	.word	0x200011e8
 8008f24:	200011d4 	.word	0x200011d4
 8008f28:	20000cfc 	.word	0x20000cfc
 8008f2c:	e000ed04 	.word	0xe000ed04

08008f30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d018      	beq.n	8008f74 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f42:	4b14      	ldr	r3, [pc, #80]	@ (8008f94 <vTaskDelay+0x64>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00b      	beq.n	8008f62 <vTaskDelay+0x32>
	__asm volatile
 8008f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	60bb      	str	r3, [r7, #8]
}
 8008f5c:	bf00      	nop
 8008f5e:	bf00      	nop
 8008f60:	e7fd      	b.n	8008f5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008f62:	f000 f993 	bl	800928c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f66:	2100      	movs	r1, #0
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 ff11 	bl	8009d90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f6e:	f000 f99b 	bl	80092a8 <xTaskResumeAll>
 8008f72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d107      	bne.n	8008f8a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008f7a:	4b07      	ldr	r3, [pc, #28]	@ (8008f98 <vTaskDelay+0x68>)
 8008f7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f80:	601a      	str	r2, [r3, #0]
 8008f82:	f3bf 8f4f 	dsb	sy
 8008f86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f8a:	bf00      	nop
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	200011f4 	.word	0x200011f4
 8008f98:	e000ed04 	.word	0xe000ed04

08008f9c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008fa4:	f001 fbd0 	bl	800a748 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d102      	bne.n	8008fb4 <vTaskSuspend+0x18>
 8008fae:	4b30      	ldr	r3, [pc, #192]	@ (8009070 <vTaskSuspend+0xd4>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	e000      	b.n	8008fb6 <vTaskSuspend+0x1a>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	3304      	adds	r3, #4
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7fe fd7f 	bl	8007ac0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d004      	beq.n	8008fd4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	3318      	adds	r3, #24
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7fe fd76 	bl	8007ac0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	3304      	adds	r3, #4
 8008fd8:	4619      	mov	r1, r3
 8008fda:	4826      	ldr	r0, [pc, #152]	@ (8009074 <vTaskSuspend+0xd8>)
 8008fdc:	f7fe fd13 	bl	8007a06 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d103      	bne.n	8008ff4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8008ff4:	f001 fbda 	bl	800a7ac <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8008ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8009078 <vTaskSuspend+0xdc>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d005      	beq.n	800900c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009000:	f001 fba2 	bl	800a748 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009004:	f000 fd16 	bl	8009a34 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009008:	f001 fbd0 	bl	800a7ac <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800900c:	4b18      	ldr	r3, [pc, #96]	@ (8009070 <vTaskSuspend+0xd4>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	429a      	cmp	r2, r3
 8009014:	d128      	bne.n	8009068 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 8009016:	4b18      	ldr	r3, [pc, #96]	@ (8009078 <vTaskSuspend+0xdc>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d018      	beq.n	8009050 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800901e:	4b17      	ldr	r3, [pc, #92]	@ (800907c <vTaskSuspend+0xe0>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00b      	beq.n	800903e <vTaskSuspend+0xa2>
	__asm volatile
 8009026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800902a:	f383 8811 	msr	BASEPRI, r3
 800902e:	f3bf 8f6f 	isb	sy
 8009032:	f3bf 8f4f 	dsb	sy
 8009036:	60bb      	str	r3, [r7, #8]
}
 8009038:	bf00      	nop
 800903a:	bf00      	nop
 800903c:	e7fd      	b.n	800903a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800903e:	4b10      	ldr	r3, [pc, #64]	@ (8009080 <vTaskSuspend+0xe4>)
 8009040:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009044:	601a      	str	r2, [r3, #0]
 8009046:	f3bf 8f4f 	dsb	sy
 800904a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800904e:	e00b      	b.n	8009068 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8009050:	4b08      	ldr	r3, [pc, #32]	@ (8009074 <vTaskSuspend+0xd8>)
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	4b0b      	ldr	r3, [pc, #44]	@ (8009084 <vTaskSuspend+0xe8>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	429a      	cmp	r2, r3
 800905a:	d103      	bne.n	8009064 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800905c:	4b04      	ldr	r3, [pc, #16]	@ (8009070 <vTaskSuspend+0xd4>)
 800905e:	2200      	movs	r2, #0
 8009060:	601a      	str	r2, [r3, #0]
	}
 8009062:	e001      	b.n	8009068 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 8009064:	f000 fa88 	bl	8009578 <vTaskSwitchContext>
	}
 8009068:	bf00      	nop
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	20000cf8 	.word	0x20000cf8
 8009074:	200011b8 	.word	0x200011b8
 8009078:	200011d8 	.word	0x200011d8
 800907c:	200011f4 	.word	0x200011f4
 8009080:	e000ed04 	.word	0xe000ed04
 8009084:	200011cc 	.word	0x200011cc

08009088 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009088:	b480      	push	{r7}
 800908a:	b087      	sub	sp, #28
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8009090:	2300      	movs	r3, #0
 8009092:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10b      	bne.n	80090b6 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800909e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	60fb      	str	r3, [r7, #12]
}
 80090b0:	bf00      	nop
 80090b2:	bf00      	nop
 80090b4:	e7fd      	b.n	80090b2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	695b      	ldr	r3, [r3, #20]
 80090ba:	4a0a      	ldr	r2, [pc, #40]	@ (80090e4 <prvTaskIsTaskSuspended+0x5c>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d10a      	bne.n	80090d6 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c4:	4a08      	ldr	r2, [pc, #32]	@ (80090e8 <prvTaskIsTaskSuspended+0x60>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d005      	beq.n	80090d6 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d101      	bne.n	80090d6 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 80090d2:	2301      	movs	r3, #1
 80090d4:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090d6:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80090d8:	4618      	mov	r0, r3
 80090da:	371c      	adds	r7, #28
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr
 80090e4:	200011b8 	.word	0x200011b8
 80090e8:	2000118c 	.word	0x2000118c

080090ec <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10b      	bne.n	8009116 <vTaskResume+0x2a>
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	60bb      	str	r3, [r7, #8]
}
 8009110:	bf00      	nop
 8009112:	bf00      	nop
 8009114:	e7fd      	b.n	8009112 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8009116:	4b21      	ldr	r3, [pc, #132]	@ (800919c <vTaskResume+0xb0>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	429a      	cmp	r2, r3
 800911e:	d038      	beq.n	8009192 <vTaskResume+0xa6>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d035      	beq.n	8009192 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 8009126:	f001 fb0f 	bl	800a748 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f7ff ffac 	bl	8009088 <prvTaskIsTaskSuspended>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d02b      	beq.n	800918e <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	3304      	adds	r3, #4
 800913a:	4618      	mov	r0, r3
 800913c:	f7fe fcc0 	bl	8007ac0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009144:	4b16      	ldr	r3, [pc, #88]	@ (80091a0 <vTaskResume+0xb4>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	429a      	cmp	r2, r3
 800914a:	d903      	bls.n	8009154 <vTaskResume+0x68>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009150:	4a13      	ldr	r2, [pc, #76]	@ (80091a0 <vTaskResume+0xb4>)
 8009152:	6013      	str	r3, [r2, #0]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009158:	4613      	mov	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	4413      	add	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4a10      	ldr	r2, [pc, #64]	@ (80091a4 <vTaskResume+0xb8>)
 8009162:	441a      	add	r2, r3
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	3304      	adds	r3, #4
 8009168:	4619      	mov	r1, r3
 800916a:	4610      	mov	r0, r2
 800916c:	f7fe fc4b 	bl	8007a06 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009174:	4b09      	ldr	r3, [pc, #36]	@ (800919c <vTaskResume+0xb0>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800917a:	429a      	cmp	r2, r3
 800917c:	d307      	bcc.n	800918e <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800917e:	4b0a      	ldr	r3, [pc, #40]	@ (80091a8 <vTaskResume+0xbc>)
 8009180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	f3bf 8f4f 	dsb	sy
 800918a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800918e:	f001 fb0d 	bl	800a7ac <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009192:	bf00      	nop
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	20000cf8 	.word	0x20000cf8
 80091a0:	200011d4 	.word	0x200011d4
 80091a4:	20000cfc 	.word	0x20000cfc
 80091a8:	e000ed04 	.word	0xe000ed04

080091ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b08a      	sub	sp, #40	@ 0x28
 80091b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80091b2:	2300      	movs	r3, #0
 80091b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80091b6:	2300      	movs	r3, #0
 80091b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80091ba:	463a      	mov	r2, r7
 80091bc:	1d39      	adds	r1, r7, #4
 80091be:	f107 0308 	add.w	r3, r7, #8
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fe fbbe 	bl	8007944 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80091c8:	6839      	ldr	r1, [r7, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	9202      	str	r2, [sp, #8]
 80091d0:	9301      	str	r3, [sp, #4]
 80091d2:	2300      	movs	r3, #0
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	2300      	movs	r3, #0
 80091d8:	460a      	mov	r2, r1
 80091da:	4924      	ldr	r1, [pc, #144]	@ (800926c <vTaskStartScheduler+0xc0>)
 80091dc:	4824      	ldr	r0, [pc, #144]	@ (8009270 <vTaskStartScheduler+0xc4>)
 80091de:	f7ff fce9 	bl	8008bb4 <xTaskCreateStatic>
 80091e2:	4603      	mov	r3, r0
 80091e4:	4a23      	ldr	r2, [pc, #140]	@ (8009274 <vTaskStartScheduler+0xc8>)
 80091e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80091e8:	4b22      	ldr	r3, [pc, #136]	@ (8009274 <vTaskStartScheduler+0xc8>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d002      	beq.n	80091f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80091f0:	2301      	movs	r3, #1
 80091f2:	617b      	str	r3, [r7, #20]
 80091f4:	e001      	b.n	80091fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80091f6:	2300      	movs	r3, #0
 80091f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d102      	bne.n	8009206 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009200:	f000 fe1a 	bl	8009e38 <xTimerCreateTimerTask>
 8009204:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d11b      	bne.n	8009244 <vTaskStartScheduler+0x98>
	__asm volatile
 800920c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009210:	f383 8811 	msr	BASEPRI, r3
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	613b      	str	r3, [r7, #16]
}
 800921e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009220:	4b15      	ldr	r3, [pc, #84]	@ (8009278 <vTaskStartScheduler+0xcc>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3354      	adds	r3, #84	@ 0x54
 8009226:	4a15      	ldr	r2, [pc, #84]	@ (800927c <vTaskStartScheduler+0xd0>)
 8009228:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800922a:	4b15      	ldr	r3, [pc, #84]	@ (8009280 <vTaskStartScheduler+0xd4>)
 800922c:	f04f 32ff 	mov.w	r2, #4294967295
 8009230:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009232:	4b14      	ldr	r3, [pc, #80]	@ (8009284 <vTaskStartScheduler+0xd8>)
 8009234:	2201      	movs	r2, #1
 8009236:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009238:	4b13      	ldr	r3, [pc, #76]	@ (8009288 <vTaskStartScheduler+0xdc>)
 800923a:	2200      	movs	r2, #0
 800923c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800923e:	f001 f9df 	bl	800a600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009242:	e00f      	b.n	8009264 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800924a:	d10b      	bne.n	8009264 <vTaskStartScheduler+0xb8>
	__asm volatile
 800924c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	60fb      	str	r3, [r7, #12]
}
 800925e:	bf00      	nop
 8009260:	bf00      	nop
 8009262:	e7fd      	b.n	8009260 <vTaskStartScheduler+0xb4>
}
 8009264:	bf00      	nop
 8009266:	3718      	adds	r7, #24
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	0800b7cc 	.word	0x0800b7cc
 8009270:	080098bd 	.word	0x080098bd
 8009274:	200011f0 	.word	0x200011f0
 8009278:	20000cf8 	.word	0x20000cf8
 800927c:	20000014 	.word	0x20000014
 8009280:	200011ec 	.word	0x200011ec
 8009284:	200011d8 	.word	0x200011d8
 8009288:	200011d0 	.word	0x200011d0

0800928c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800928c:	b480      	push	{r7}
 800928e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009290:	4b04      	ldr	r3, [pc, #16]	@ (80092a4 <vTaskSuspendAll+0x18>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	3301      	adds	r3, #1
 8009296:	4a03      	ldr	r2, [pc, #12]	@ (80092a4 <vTaskSuspendAll+0x18>)
 8009298:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800929a:	bf00      	nop
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	200011f4 	.word	0x200011f4

080092a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80092ae:	2300      	movs	r3, #0
 80092b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80092b2:	2300      	movs	r3, #0
 80092b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80092b6:	4b42      	ldr	r3, [pc, #264]	@ (80093c0 <xTaskResumeAll+0x118>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d10b      	bne.n	80092d6 <xTaskResumeAll+0x2e>
	__asm volatile
 80092be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c2:	f383 8811 	msr	BASEPRI, r3
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	603b      	str	r3, [r7, #0]
}
 80092d0:	bf00      	nop
 80092d2:	bf00      	nop
 80092d4:	e7fd      	b.n	80092d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80092d6:	f001 fa37 	bl	800a748 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80092da:	4b39      	ldr	r3, [pc, #228]	@ (80093c0 <xTaskResumeAll+0x118>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	3b01      	subs	r3, #1
 80092e0:	4a37      	ldr	r2, [pc, #220]	@ (80093c0 <xTaskResumeAll+0x118>)
 80092e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092e4:	4b36      	ldr	r3, [pc, #216]	@ (80093c0 <xTaskResumeAll+0x118>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d162      	bne.n	80093b2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80092ec:	4b35      	ldr	r3, [pc, #212]	@ (80093c4 <xTaskResumeAll+0x11c>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d05e      	beq.n	80093b2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092f4:	e02f      	b.n	8009356 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092f6:	4b34      	ldr	r3, [pc, #208]	@ (80093c8 <xTaskResumeAll+0x120>)
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	3318      	adds	r3, #24
 8009302:	4618      	mov	r0, r3
 8009304:	f7fe fbdc 	bl	8007ac0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	3304      	adds	r3, #4
 800930c:	4618      	mov	r0, r3
 800930e:	f7fe fbd7 	bl	8007ac0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009316:	4b2d      	ldr	r3, [pc, #180]	@ (80093cc <xTaskResumeAll+0x124>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	429a      	cmp	r2, r3
 800931c:	d903      	bls.n	8009326 <xTaskResumeAll+0x7e>
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009322:	4a2a      	ldr	r2, [pc, #168]	@ (80093cc <xTaskResumeAll+0x124>)
 8009324:	6013      	str	r3, [r2, #0]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800932a:	4613      	mov	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4a27      	ldr	r2, [pc, #156]	@ (80093d0 <xTaskResumeAll+0x128>)
 8009334:	441a      	add	r2, r3
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	3304      	adds	r3, #4
 800933a:	4619      	mov	r1, r3
 800933c:	4610      	mov	r0, r2
 800933e:	f7fe fb62 	bl	8007a06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009346:	4b23      	ldr	r3, [pc, #140]	@ (80093d4 <xTaskResumeAll+0x12c>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800934c:	429a      	cmp	r2, r3
 800934e:	d302      	bcc.n	8009356 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009350:	4b21      	ldr	r3, [pc, #132]	@ (80093d8 <xTaskResumeAll+0x130>)
 8009352:	2201      	movs	r2, #1
 8009354:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009356:	4b1c      	ldr	r3, [pc, #112]	@ (80093c8 <xTaskResumeAll+0x120>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1cb      	bne.n	80092f6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d001      	beq.n	8009368 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009364:	f000 fb66 	bl	8009a34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009368:	4b1c      	ldr	r3, [pc, #112]	@ (80093dc <xTaskResumeAll+0x134>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d010      	beq.n	8009396 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009374:	f000 f846 	bl	8009404 <xTaskIncrementTick>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d002      	beq.n	8009384 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800937e:	4b16      	ldr	r3, [pc, #88]	@ (80093d8 <xTaskResumeAll+0x130>)
 8009380:	2201      	movs	r2, #1
 8009382:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	3b01      	subs	r3, #1
 8009388:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1f1      	bne.n	8009374 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009390:	4b12      	ldr	r3, [pc, #72]	@ (80093dc <xTaskResumeAll+0x134>)
 8009392:	2200      	movs	r2, #0
 8009394:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009396:	4b10      	ldr	r3, [pc, #64]	@ (80093d8 <xTaskResumeAll+0x130>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d009      	beq.n	80093b2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800939e:	2301      	movs	r3, #1
 80093a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80093a2:	4b0f      	ldr	r3, [pc, #60]	@ (80093e0 <xTaskResumeAll+0x138>)
 80093a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093a8:	601a      	str	r2, [r3, #0]
 80093aa:	f3bf 8f4f 	dsb	sy
 80093ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093b2:	f001 f9fb 	bl	800a7ac <vPortExitCritical>

	return xAlreadyYielded;
 80093b6:	68bb      	ldr	r3, [r7, #8]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	200011f4 	.word	0x200011f4
 80093c4:	200011cc 	.word	0x200011cc
 80093c8:	2000118c 	.word	0x2000118c
 80093cc:	200011d4 	.word	0x200011d4
 80093d0:	20000cfc 	.word	0x20000cfc
 80093d4:	20000cf8 	.word	0x20000cf8
 80093d8:	200011e0 	.word	0x200011e0
 80093dc:	200011dc 	.word	0x200011dc
 80093e0:	e000ed04 	.word	0xe000ed04

080093e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80093ea:	4b05      	ldr	r3, [pc, #20]	@ (8009400 <xTaskGetTickCount+0x1c>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80093f0:	687b      	ldr	r3, [r7, #4]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	200011d0 	.word	0x200011d0

08009404 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800940a:	2300      	movs	r3, #0
 800940c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800940e:	4b4f      	ldr	r3, [pc, #316]	@ (800954c <xTaskIncrementTick+0x148>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	f040 8090 	bne.w	8009538 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009418:	4b4d      	ldr	r3, [pc, #308]	@ (8009550 <xTaskIncrementTick+0x14c>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	3301      	adds	r3, #1
 800941e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009420:	4a4b      	ldr	r2, [pc, #300]	@ (8009550 <xTaskIncrementTick+0x14c>)
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d121      	bne.n	8009470 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800942c:	4b49      	ldr	r3, [pc, #292]	@ (8009554 <xTaskIncrementTick+0x150>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00b      	beq.n	800944e <xTaskIncrementTick+0x4a>
	__asm volatile
 8009436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800943a:	f383 8811 	msr	BASEPRI, r3
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	603b      	str	r3, [r7, #0]
}
 8009448:	bf00      	nop
 800944a:	bf00      	nop
 800944c:	e7fd      	b.n	800944a <xTaskIncrementTick+0x46>
 800944e:	4b41      	ldr	r3, [pc, #260]	@ (8009554 <xTaskIncrementTick+0x150>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	60fb      	str	r3, [r7, #12]
 8009454:	4b40      	ldr	r3, [pc, #256]	@ (8009558 <xTaskIncrementTick+0x154>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a3e      	ldr	r2, [pc, #248]	@ (8009554 <xTaskIncrementTick+0x150>)
 800945a:	6013      	str	r3, [r2, #0]
 800945c:	4a3e      	ldr	r2, [pc, #248]	@ (8009558 <xTaskIncrementTick+0x154>)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6013      	str	r3, [r2, #0]
 8009462:	4b3e      	ldr	r3, [pc, #248]	@ (800955c <xTaskIncrementTick+0x158>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	3301      	adds	r3, #1
 8009468:	4a3c      	ldr	r2, [pc, #240]	@ (800955c <xTaskIncrementTick+0x158>)
 800946a:	6013      	str	r3, [r2, #0]
 800946c:	f000 fae2 	bl	8009a34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009470:	4b3b      	ldr	r3, [pc, #236]	@ (8009560 <xTaskIncrementTick+0x15c>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	429a      	cmp	r2, r3
 8009478:	d349      	bcc.n	800950e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800947a:	4b36      	ldr	r3, [pc, #216]	@ (8009554 <xTaskIncrementTick+0x150>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d104      	bne.n	800948e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009484:	4b36      	ldr	r3, [pc, #216]	@ (8009560 <xTaskIncrementTick+0x15c>)
 8009486:	f04f 32ff 	mov.w	r2, #4294967295
 800948a:	601a      	str	r2, [r3, #0]
					break;
 800948c:	e03f      	b.n	800950e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800948e:	4b31      	ldr	r3, [pc, #196]	@ (8009554 <xTaskIncrementTick+0x150>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d203      	bcs.n	80094ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80094a6:	4a2e      	ldr	r2, [pc, #184]	@ (8009560 <xTaskIncrementTick+0x15c>)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80094ac:	e02f      	b.n	800950e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	3304      	adds	r3, #4
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fe fb04 	bl	8007ac0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d004      	beq.n	80094ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	3318      	adds	r3, #24
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7fe fafb 	bl	8007ac0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ce:	4b25      	ldr	r3, [pc, #148]	@ (8009564 <xTaskIncrementTick+0x160>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d903      	bls.n	80094de <xTaskIncrementTick+0xda>
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094da:	4a22      	ldr	r2, [pc, #136]	@ (8009564 <xTaskIncrementTick+0x160>)
 80094dc:	6013      	str	r3, [r2, #0]
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094e2:	4613      	mov	r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	4413      	add	r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	4a1f      	ldr	r2, [pc, #124]	@ (8009568 <xTaskIncrementTick+0x164>)
 80094ec:	441a      	add	r2, r3
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	3304      	adds	r3, #4
 80094f2:	4619      	mov	r1, r3
 80094f4:	4610      	mov	r0, r2
 80094f6:	f7fe fa86 	bl	8007a06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094fe:	4b1b      	ldr	r3, [pc, #108]	@ (800956c <xTaskIncrementTick+0x168>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009504:	429a      	cmp	r2, r3
 8009506:	d3b8      	bcc.n	800947a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009508:	2301      	movs	r3, #1
 800950a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800950c:	e7b5      	b.n	800947a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800950e:	4b17      	ldr	r3, [pc, #92]	@ (800956c <xTaskIncrementTick+0x168>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009514:	4914      	ldr	r1, [pc, #80]	@ (8009568 <xTaskIncrementTick+0x164>)
 8009516:	4613      	mov	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4413      	add	r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	440b      	add	r3, r1
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b01      	cmp	r3, #1
 8009524:	d901      	bls.n	800952a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009526:	2301      	movs	r3, #1
 8009528:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800952a:	4b11      	ldr	r3, [pc, #68]	@ (8009570 <xTaskIncrementTick+0x16c>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d007      	beq.n	8009542 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009532:	2301      	movs	r3, #1
 8009534:	617b      	str	r3, [r7, #20]
 8009536:	e004      	b.n	8009542 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009538:	4b0e      	ldr	r3, [pc, #56]	@ (8009574 <xTaskIncrementTick+0x170>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	3301      	adds	r3, #1
 800953e:	4a0d      	ldr	r2, [pc, #52]	@ (8009574 <xTaskIncrementTick+0x170>)
 8009540:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009542:	697b      	ldr	r3, [r7, #20]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3718      	adds	r7, #24
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	200011f4 	.word	0x200011f4
 8009550:	200011d0 	.word	0x200011d0
 8009554:	20001184 	.word	0x20001184
 8009558:	20001188 	.word	0x20001188
 800955c:	200011e4 	.word	0x200011e4
 8009560:	200011ec 	.word	0x200011ec
 8009564:	200011d4 	.word	0x200011d4
 8009568:	20000cfc 	.word	0x20000cfc
 800956c:	20000cf8 	.word	0x20000cf8
 8009570:	200011e0 	.word	0x200011e0
 8009574:	200011dc 	.word	0x200011dc

08009578 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009578:	b480      	push	{r7}
 800957a:	b085      	sub	sp, #20
 800957c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800957e:	4b2b      	ldr	r3, [pc, #172]	@ (800962c <vTaskSwitchContext+0xb4>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d003      	beq.n	800958e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009586:	4b2a      	ldr	r3, [pc, #168]	@ (8009630 <vTaskSwitchContext+0xb8>)
 8009588:	2201      	movs	r2, #1
 800958a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800958c:	e047      	b.n	800961e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800958e:	4b28      	ldr	r3, [pc, #160]	@ (8009630 <vTaskSwitchContext+0xb8>)
 8009590:	2200      	movs	r2, #0
 8009592:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009594:	4b27      	ldr	r3, [pc, #156]	@ (8009634 <vTaskSwitchContext+0xbc>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	60fb      	str	r3, [r7, #12]
 800959a:	e011      	b.n	80095c0 <vTaskSwitchContext+0x48>
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10b      	bne.n	80095ba <vTaskSwitchContext+0x42>
	__asm volatile
 80095a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	607b      	str	r3, [r7, #4]
}
 80095b4:	bf00      	nop
 80095b6:	bf00      	nop
 80095b8:	e7fd      	b.n	80095b6 <vTaskSwitchContext+0x3e>
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	3b01      	subs	r3, #1
 80095be:	60fb      	str	r3, [r7, #12]
 80095c0:	491d      	ldr	r1, [pc, #116]	@ (8009638 <vTaskSwitchContext+0xc0>)
 80095c2:	68fa      	ldr	r2, [r7, #12]
 80095c4:	4613      	mov	r3, r2
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	4413      	add	r3, r2
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	440b      	add	r3, r1
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d0e3      	beq.n	800959c <vTaskSwitchContext+0x24>
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	4613      	mov	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4413      	add	r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	4a16      	ldr	r2, [pc, #88]	@ (8009638 <vTaskSwitchContext+0xc0>)
 80095e0:	4413      	add	r3, r2
 80095e2:	60bb      	str	r3, [r7, #8]
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	685a      	ldr	r2, [r3, #4]
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	605a      	str	r2, [r3, #4]
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	685a      	ldr	r2, [r3, #4]
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	3308      	adds	r3, #8
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d104      	bne.n	8009604 <vTaskSwitchContext+0x8c>
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	685a      	ldr	r2, [r3, #4]
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	605a      	str	r2, [r3, #4]
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	4a0c      	ldr	r2, [pc, #48]	@ (800963c <vTaskSwitchContext+0xc4>)
 800960c:	6013      	str	r3, [r2, #0]
 800960e:	4a09      	ldr	r2, [pc, #36]	@ (8009634 <vTaskSwitchContext+0xbc>)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009614:	4b09      	ldr	r3, [pc, #36]	@ (800963c <vTaskSwitchContext+0xc4>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3354      	adds	r3, #84	@ 0x54
 800961a:	4a09      	ldr	r2, [pc, #36]	@ (8009640 <vTaskSwitchContext+0xc8>)
 800961c:	6013      	str	r3, [r2, #0]
}
 800961e:	bf00      	nop
 8009620:	3714      	adds	r7, #20
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	200011f4 	.word	0x200011f4
 8009630:	200011e0 	.word	0x200011e0
 8009634:	200011d4 	.word	0x200011d4
 8009638:	20000cfc 	.word	0x20000cfc
 800963c:	20000cf8 	.word	0x20000cf8
 8009640:	20000014 	.word	0x20000014

08009644 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d10b      	bne.n	800966c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009658:	f383 8811 	msr	BASEPRI, r3
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	60fb      	str	r3, [r7, #12]
}
 8009666:	bf00      	nop
 8009668:	bf00      	nop
 800966a:	e7fd      	b.n	8009668 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800966c:	4b07      	ldr	r3, [pc, #28]	@ (800968c <vTaskPlaceOnEventList+0x48>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3318      	adds	r3, #24
 8009672:	4619      	mov	r1, r3
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f7fe f9ea 	bl	8007a4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800967a:	2101      	movs	r1, #1
 800967c:	6838      	ldr	r0, [r7, #0]
 800967e:	f000 fb87 	bl	8009d90 <prvAddCurrentTaskToDelayedList>
}
 8009682:	bf00      	nop
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	20000cf8 	.word	0x20000cf8

08009690 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10b      	bne.n	80096ba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	617b      	str	r3, [r7, #20]
}
 80096b4:	bf00      	nop
 80096b6:	bf00      	nop
 80096b8:	e7fd      	b.n	80096b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096ba:	4b0a      	ldr	r3, [pc, #40]	@ (80096e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	3318      	adds	r3, #24
 80096c0:	4619      	mov	r1, r3
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	f7fe f99f 	bl	8007a06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d002      	beq.n	80096d4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80096ce:	f04f 33ff 	mov.w	r3, #4294967295
 80096d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80096d4:	6879      	ldr	r1, [r7, #4]
 80096d6:	68b8      	ldr	r0, [r7, #8]
 80096d8:	f000 fb5a 	bl	8009d90 <prvAddCurrentTaskToDelayedList>
	}
 80096dc:	bf00      	nop
 80096de:	3718      	adds	r7, #24
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	20000cf8 	.word	0x20000cf8

080096e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b086      	sub	sp, #24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d10b      	bne.n	8009716 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80096fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009702:	f383 8811 	msr	BASEPRI, r3
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	60fb      	str	r3, [r7, #12]
}
 8009710:	bf00      	nop
 8009712:	bf00      	nop
 8009714:	e7fd      	b.n	8009712 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	3318      	adds	r3, #24
 800971a:	4618      	mov	r0, r3
 800971c:	f7fe f9d0 	bl	8007ac0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009720:	4b1d      	ldr	r3, [pc, #116]	@ (8009798 <xTaskRemoveFromEventList+0xb0>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d11d      	bne.n	8009764 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	3304      	adds	r3, #4
 800972c:	4618      	mov	r0, r3
 800972e:	f7fe f9c7 	bl	8007ac0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009736:	4b19      	ldr	r3, [pc, #100]	@ (800979c <xTaskRemoveFromEventList+0xb4>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	429a      	cmp	r2, r3
 800973c:	d903      	bls.n	8009746 <xTaskRemoveFromEventList+0x5e>
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009742:	4a16      	ldr	r2, [pc, #88]	@ (800979c <xTaskRemoveFromEventList+0xb4>)
 8009744:	6013      	str	r3, [r2, #0]
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800974a:	4613      	mov	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4413      	add	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4a13      	ldr	r2, [pc, #76]	@ (80097a0 <xTaskRemoveFromEventList+0xb8>)
 8009754:	441a      	add	r2, r3
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	3304      	adds	r3, #4
 800975a:	4619      	mov	r1, r3
 800975c:	4610      	mov	r0, r2
 800975e:	f7fe f952 	bl	8007a06 <vListInsertEnd>
 8009762:	e005      	b.n	8009770 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	3318      	adds	r3, #24
 8009768:	4619      	mov	r1, r3
 800976a:	480e      	ldr	r0, [pc, #56]	@ (80097a4 <xTaskRemoveFromEventList+0xbc>)
 800976c:	f7fe f94b 	bl	8007a06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009774:	4b0c      	ldr	r3, [pc, #48]	@ (80097a8 <xTaskRemoveFromEventList+0xc0>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800977a:	429a      	cmp	r2, r3
 800977c:	d905      	bls.n	800978a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800977e:	2301      	movs	r3, #1
 8009780:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009782:	4b0a      	ldr	r3, [pc, #40]	@ (80097ac <xTaskRemoveFromEventList+0xc4>)
 8009784:	2201      	movs	r2, #1
 8009786:	601a      	str	r2, [r3, #0]
 8009788:	e001      	b.n	800978e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800978a:	2300      	movs	r3, #0
 800978c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800978e:	697b      	ldr	r3, [r7, #20]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3718      	adds	r7, #24
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	200011f4 	.word	0x200011f4
 800979c:	200011d4 	.word	0x200011d4
 80097a0:	20000cfc 	.word	0x20000cfc
 80097a4:	2000118c 	.word	0x2000118c
 80097a8:	20000cf8 	.word	0x20000cf8
 80097ac:	200011e0 	.word	0x200011e0

080097b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80097b8:	4b06      	ldr	r3, [pc, #24]	@ (80097d4 <vTaskInternalSetTimeOutState+0x24>)
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80097c0:	4b05      	ldr	r3, [pc, #20]	@ (80097d8 <vTaskInternalSetTimeOutState+0x28>)
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	605a      	str	r2, [r3, #4]
}
 80097c8:	bf00      	nop
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr
 80097d4:	200011e4 	.word	0x200011e4
 80097d8:	200011d0 	.word	0x200011d0

080097dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b088      	sub	sp, #32
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10b      	bne.n	8009804 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80097ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f0:	f383 8811 	msr	BASEPRI, r3
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	613b      	str	r3, [r7, #16]
}
 80097fe:	bf00      	nop
 8009800:	bf00      	nop
 8009802:	e7fd      	b.n	8009800 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10b      	bne.n	8009822 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800980a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800980e:	f383 8811 	msr	BASEPRI, r3
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	60fb      	str	r3, [r7, #12]
}
 800981c:	bf00      	nop
 800981e:	bf00      	nop
 8009820:	e7fd      	b.n	800981e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009822:	f000 ff91 	bl	800a748 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009826:	4b1d      	ldr	r3, [pc, #116]	@ (800989c <xTaskCheckForTimeOut+0xc0>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	69ba      	ldr	r2, [r7, #24]
 8009832:	1ad3      	subs	r3, r2, r3
 8009834:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983e:	d102      	bne.n	8009846 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009840:	2300      	movs	r3, #0
 8009842:	61fb      	str	r3, [r7, #28]
 8009844:	e023      	b.n	800988e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	4b15      	ldr	r3, [pc, #84]	@ (80098a0 <xTaskCheckForTimeOut+0xc4>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	429a      	cmp	r2, r3
 8009850:	d007      	beq.n	8009862 <xTaskCheckForTimeOut+0x86>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	69ba      	ldr	r2, [r7, #24]
 8009858:	429a      	cmp	r2, r3
 800985a:	d302      	bcc.n	8009862 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800985c:	2301      	movs	r3, #1
 800985e:	61fb      	str	r3, [r7, #28]
 8009860:	e015      	b.n	800988e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	697a      	ldr	r2, [r7, #20]
 8009868:	429a      	cmp	r2, r3
 800986a:	d20b      	bcs.n	8009884 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	1ad2      	subs	r2, r2, r3
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f7ff ff99 	bl	80097b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800987e:	2300      	movs	r3, #0
 8009880:	61fb      	str	r3, [r7, #28]
 8009882:	e004      	b.n	800988e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	2200      	movs	r2, #0
 8009888:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800988a:	2301      	movs	r3, #1
 800988c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800988e:	f000 ff8d 	bl	800a7ac <vPortExitCritical>

	return xReturn;
 8009892:	69fb      	ldr	r3, [r7, #28]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3720      	adds	r7, #32
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	200011d0 	.word	0x200011d0
 80098a0:	200011e4 	.word	0x200011e4

080098a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80098a4:	b480      	push	{r7}
 80098a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80098a8:	4b03      	ldr	r3, [pc, #12]	@ (80098b8 <vTaskMissedYield+0x14>)
 80098aa:	2201      	movs	r2, #1
 80098ac:	601a      	str	r2, [r3, #0]
}
 80098ae:	bf00      	nop
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	200011e0 	.word	0x200011e0

080098bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80098c4:	f000 f852 	bl	800996c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80098c8:	4b06      	ldr	r3, [pc, #24]	@ (80098e4 <prvIdleTask+0x28>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d9f9      	bls.n	80098c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80098d0:	4b05      	ldr	r3, [pc, #20]	@ (80098e8 <prvIdleTask+0x2c>)
 80098d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098d6:	601a      	str	r2, [r3, #0]
 80098d8:	f3bf 8f4f 	dsb	sy
 80098dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80098e0:	e7f0      	b.n	80098c4 <prvIdleTask+0x8>
 80098e2:	bf00      	nop
 80098e4:	20000cfc 	.word	0x20000cfc
 80098e8:	e000ed04 	.word	0xe000ed04

080098ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098f2:	2300      	movs	r3, #0
 80098f4:	607b      	str	r3, [r7, #4]
 80098f6:	e00c      	b.n	8009912 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	4613      	mov	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4a12      	ldr	r2, [pc, #72]	@ (800994c <prvInitialiseTaskLists+0x60>)
 8009904:	4413      	add	r3, r2
 8009906:	4618      	mov	r0, r3
 8009908:	f7fe f850 	bl	80079ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	3301      	adds	r3, #1
 8009910:	607b      	str	r3, [r7, #4]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2b37      	cmp	r3, #55	@ 0x37
 8009916:	d9ef      	bls.n	80098f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009918:	480d      	ldr	r0, [pc, #52]	@ (8009950 <prvInitialiseTaskLists+0x64>)
 800991a:	f7fe f847 	bl	80079ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800991e:	480d      	ldr	r0, [pc, #52]	@ (8009954 <prvInitialiseTaskLists+0x68>)
 8009920:	f7fe f844 	bl	80079ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009924:	480c      	ldr	r0, [pc, #48]	@ (8009958 <prvInitialiseTaskLists+0x6c>)
 8009926:	f7fe f841 	bl	80079ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800992a:	480c      	ldr	r0, [pc, #48]	@ (800995c <prvInitialiseTaskLists+0x70>)
 800992c:	f7fe f83e 	bl	80079ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009930:	480b      	ldr	r0, [pc, #44]	@ (8009960 <prvInitialiseTaskLists+0x74>)
 8009932:	f7fe f83b 	bl	80079ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009936:	4b0b      	ldr	r3, [pc, #44]	@ (8009964 <prvInitialiseTaskLists+0x78>)
 8009938:	4a05      	ldr	r2, [pc, #20]	@ (8009950 <prvInitialiseTaskLists+0x64>)
 800993a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800993c:	4b0a      	ldr	r3, [pc, #40]	@ (8009968 <prvInitialiseTaskLists+0x7c>)
 800993e:	4a05      	ldr	r2, [pc, #20]	@ (8009954 <prvInitialiseTaskLists+0x68>)
 8009940:	601a      	str	r2, [r3, #0]
}
 8009942:	bf00      	nop
 8009944:	3708      	adds	r7, #8
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	20000cfc 	.word	0x20000cfc
 8009950:	2000115c 	.word	0x2000115c
 8009954:	20001170 	.word	0x20001170
 8009958:	2000118c 	.word	0x2000118c
 800995c:	200011a0 	.word	0x200011a0
 8009960:	200011b8 	.word	0x200011b8
 8009964:	20001184 	.word	0x20001184
 8009968:	20001188 	.word	0x20001188

0800996c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009972:	e019      	b.n	80099a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009974:	f000 fee8 	bl	800a748 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009978:	4b10      	ldr	r3, [pc, #64]	@ (80099bc <prvCheckTasksWaitingTermination+0x50>)
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	3304      	adds	r3, #4
 8009984:	4618      	mov	r0, r3
 8009986:	f7fe f89b 	bl	8007ac0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800998a:	4b0d      	ldr	r3, [pc, #52]	@ (80099c0 <prvCheckTasksWaitingTermination+0x54>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	3b01      	subs	r3, #1
 8009990:	4a0b      	ldr	r2, [pc, #44]	@ (80099c0 <prvCheckTasksWaitingTermination+0x54>)
 8009992:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009994:	4b0b      	ldr	r3, [pc, #44]	@ (80099c4 <prvCheckTasksWaitingTermination+0x58>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	3b01      	subs	r3, #1
 800999a:	4a0a      	ldr	r2, [pc, #40]	@ (80099c4 <prvCheckTasksWaitingTermination+0x58>)
 800999c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800999e:	f000 ff05 	bl	800a7ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 f810 	bl	80099c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099a8:	4b06      	ldr	r3, [pc, #24]	@ (80099c4 <prvCheckTasksWaitingTermination+0x58>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1e1      	bne.n	8009974 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80099b0:	bf00      	nop
 80099b2:	bf00      	nop
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	200011a0 	.word	0x200011a0
 80099c0:	200011cc 	.word	0x200011cc
 80099c4:	200011b4 	.word	0x200011b4

080099c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	3354      	adds	r3, #84	@ 0x54
 80099d4:	4618      	mov	r0, r3
 80099d6:	f001 f9ef 	bl	800adb8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d108      	bne.n	80099f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099e8:	4618      	mov	r0, r3
 80099ea:	f001 f89d 	bl	800ab28 <vPortFree>
				vPortFree( pxTCB );
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f001 f89a 	bl	800ab28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80099f4:	e019      	b.n	8009a2a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d103      	bne.n	8009a08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f001 f891 	bl	800ab28 <vPortFree>
	}
 8009a06:	e010      	b.n	8009a2a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d00b      	beq.n	8009a2a <prvDeleteTCB+0x62>
	__asm volatile
 8009a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a16:	f383 8811 	msr	BASEPRI, r3
 8009a1a:	f3bf 8f6f 	isb	sy
 8009a1e:	f3bf 8f4f 	dsb	sy
 8009a22:	60fb      	str	r3, [r7, #12]
}
 8009a24:	bf00      	nop
 8009a26:	bf00      	nop
 8009a28:	e7fd      	b.n	8009a26 <prvDeleteTCB+0x5e>
	}
 8009a2a:	bf00      	nop
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
	...

08009a34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8009a6c <prvResetNextTaskUnblockTime+0x38>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d104      	bne.n	8009a4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a44:	4b0a      	ldr	r3, [pc, #40]	@ (8009a70 <prvResetNextTaskUnblockTime+0x3c>)
 8009a46:	f04f 32ff 	mov.w	r2, #4294967295
 8009a4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a4c:	e008      	b.n	8009a60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a4e:	4b07      	ldr	r3, [pc, #28]	@ (8009a6c <prvResetNextTaskUnblockTime+0x38>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	4a04      	ldr	r2, [pc, #16]	@ (8009a70 <prvResetNextTaskUnblockTime+0x3c>)
 8009a5e:	6013      	str	r3, [r2, #0]
}
 8009a60:	bf00      	nop
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr
 8009a6c:	20001184 	.word	0x20001184
 8009a70:	200011ec 	.word	0x200011ec

08009a74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8009aa8 <xTaskGetSchedulerState+0x34>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d102      	bne.n	8009a88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a82:	2301      	movs	r3, #1
 8009a84:	607b      	str	r3, [r7, #4]
 8009a86:	e008      	b.n	8009a9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a88:	4b08      	ldr	r3, [pc, #32]	@ (8009aac <xTaskGetSchedulerState+0x38>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d102      	bne.n	8009a96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a90:	2302      	movs	r3, #2
 8009a92:	607b      	str	r3, [r7, #4]
 8009a94:	e001      	b.n	8009a9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a96:	2300      	movs	r3, #0
 8009a98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a9a:	687b      	ldr	r3, [r7, #4]
	}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr
 8009aa8:	200011d8 	.word	0x200011d8
 8009aac:	200011f4 	.word	0x200011f4

08009ab0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009abc:	2300      	movs	r3, #0
 8009abe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d051      	beq.n	8009b6a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aca:	4b2a      	ldr	r3, [pc, #168]	@ (8009b74 <xTaskPriorityInherit+0xc4>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d241      	bcs.n	8009b58 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	699b      	ldr	r3, [r3, #24]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	db06      	blt.n	8009aea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009adc:	4b25      	ldr	r3, [pc, #148]	@ (8009b74 <xTaskPriorityInherit+0xc4>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ae2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	6959      	ldr	r1, [r3, #20]
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009af2:	4613      	mov	r3, r2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	4413      	add	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4a1f      	ldr	r2, [pc, #124]	@ (8009b78 <xTaskPriorityInherit+0xc8>)
 8009afc:	4413      	add	r3, r2
 8009afe:	4299      	cmp	r1, r3
 8009b00:	d122      	bne.n	8009b48 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	3304      	adds	r3, #4
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fd ffda 	bl	8007ac0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b0c:	4b19      	ldr	r3, [pc, #100]	@ (8009b74 <xTaskPriorityInherit+0xc4>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b1a:	4b18      	ldr	r3, [pc, #96]	@ (8009b7c <xTaskPriorityInherit+0xcc>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d903      	bls.n	8009b2a <xTaskPriorityInherit+0x7a>
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b26:	4a15      	ldr	r2, [pc, #84]	@ (8009b7c <xTaskPriorityInherit+0xcc>)
 8009b28:	6013      	str	r3, [r2, #0]
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b2e:	4613      	mov	r3, r2
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4413      	add	r3, r2
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	4a10      	ldr	r2, [pc, #64]	@ (8009b78 <xTaskPriorityInherit+0xc8>)
 8009b38:	441a      	add	r2, r3
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	4619      	mov	r1, r3
 8009b40:	4610      	mov	r0, r2
 8009b42:	f7fd ff60 	bl	8007a06 <vListInsertEnd>
 8009b46:	e004      	b.n	8009b52 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b48:	4b0a      	ldr	r3, [pc, #40]	@ (8009b74 <xTaskPriorityInherit+0xc4>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009b52:	2301      	movs	r3, #1
 8009b54:	60fb      	str	r3, [r7, #12]
 8009b56:	e008      	b.n	8009b6a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b5c:	4b05      	ldr	r3, [pc, #20]	@ (8009b74 <xTaskPriorityInherit+0xc4>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d201      	bcs.n	8009b6a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009b66:	2301      	movs	r3, #1
 8009b68:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
	}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	20000cf8 	.word	0x20000cf8
 8009b78:	20000cfc 	.word	0x20000cfc
 8009b7c:	200011d4 	.word	0x200011d4

08009b80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d058      	beq.n	8009c48 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b96:	4b2f      	ldr	r3, [pc, #188]	@ (8009c54 <xTaskPriorityDisinherit+0xd4>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d00b      	beq.n	8009bb8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	60fb      	str	r3, [r7, #12]
}
 8009bb2:	bf00      	nop
 8009bb4:	bf00      	nop
 8009bb6:	e7fd      	b.n	8009bb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10b      	bne.n	8009bd8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	60bb      	str	r3, [r7, #8]
}
 8009bd2:	bf00      	nop
 8009bd4:	bf00      	nop
 8009bd6:	e7fd      	b.n	8009bd4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bdc:	1e5a      	subs	r2, r3, #1
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d02c      	beq.n	8009c48 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d128      	bne.n	8009c48 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7fd ff60 	bl	8007ac0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c0c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c18:	4b0f      	ldr	r3, [pc, #60]	@ (8009c58 <xTaskPriorityDisinherit+0xd8>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d903      	bls.n	8009c28 <xTaskPriorityDisinherit+0xa8>
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c24:	4a0c      	ldr	r2, [pc, #48]	@ (8009c58 <xTaskPriorityDisinherit+0xd8>)
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4413      	add	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	4a09      	ldr	r2, [pc, #36]	@ (8009c5c <xTaskPriorityDisinherit+0xdc>)
 8009c36:	441a      	add	r2, r3
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	3304      	adds	r3, #4
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	4610      	mov	r0, r2
 8009c40:	f7fd fee1 	bl	8007a06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c44:	2301      	movs	r3, #1
 8009c46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c48:	697b      	ldr	r3, [r7, #20]
	}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3718      	adds	r7, #24
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	20000cf8 	.word	0x20000cf8
 8009c58:	200011d4 	.word	0x200011d4
 8009c5c:	20000cfc 	.word	0x20000cfc

08009c60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b088      	sub	sp, #32
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d06c      	beq.n	8009d52 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10b      	bne.n	8009c98 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	60fb      	str	r3, [r7, #12]
}
 8009c92:	bf00      	nop
 8009c94:	bf00      	nop
 8009c96:	e7fd      	b.n	8009c94 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d902      	bls.n	8009ca8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	61fb      	str	r3, [r7, #28]
 8009ca6:	e002      	b.n	8009cae <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb2:	69fa      	ldr	r2, [r7, #28]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d04c      	beq.n	8009d52 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cbc:	697a      	ldr	r2, [r7, #20]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d147      	bne.n	8009d52 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009cc2:	4b26      	ldr	r3, [pc, #152]	@ (8009d5c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	69ba      	ldr	r2, [r7, #24]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d10b      	bne.n	8009ce4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	60bb      	str	r3, [r7, #8]
}
 8009cde:	bf00      	nop
 8009ce0:	bf00      	nop
 8009ce2:	e7fd      	b.n	8009ce0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	69fa      	ldr	r2, [r7, #28]
 8009cee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	699b      	ldr	r3, [r3, #24]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	db04      	blt.n	8009d02 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	6959      	ldr	r1, [r3, #20]
 8009d06:	693a      	ldr	r2, [r7, #16]
 8009d08:	4613      	mov	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	4413      	add	r3, r2
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4a13      	ldr	r2, [pc, #76]	@ (8009d60 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009d12:	4413      	add	r3, r2
 8009d14:	4299      	cmp	r1, r3
 8009d16:	d11c      	bne.n	8009d52 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7fd fecf 	bl	8007ac0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d26:	4b0f      	ldr	r3, [pc, #60]	@ (8009d64 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d903      	bls.n	8009d36 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d32:	4a0c      	ldr	r2, [pc, #48]	@ (8009d64 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009d34:	6013      	str	r3, [r2, #0]
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	4413      	add	r3, r2
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4a07      	ldr	r2, [pc, #28]	@ (8009d60 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009d44:	441a      	add	r2, r3
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	3304      	adds	r3, #4
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	4610      	mov	r0, r2
 8009d4e:	f7fd fe5a 	bl	8007a06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d52:	bf00      	nop
 8009d54:	3720      	adds	r7, #32
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20000cf8 	.word	0x20000cf8
 8009d60:	20000cfc 	.word	0x20000cfc
 8009d64:	200011d4 	.word	0x200011d4

08009d68 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009d68:	b480      	push	{r7}
 8009d6a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009d6c:	4b07      	ldr	r3, [pc, #28]	@ (8009d8c <pvTaskIncrementMutexHeldCount+0x24>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d004      	beq.n	8009d7e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009d74:	4b05      	ldr	r3, [pc, #20]	@ (8009d8c <pvTaskIncrementMutexHeldCount+0x24>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d7a:	3201      	adds	r2, #1
 8009d7c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009d7e:	4b03      	ldr	r3, [pc, #12]	@ (8009d8c <pvTaskIncrementMutexHeldCount+0x24>)
 8009d80:	681b      	ldr	r3, [r3, #0]
	}
 8009d82:	4618      	mov	r0, r3
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr
 8009d8c:	20000cf8 	.word	0x20000cf8

08009d90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d9a:	4b21      	ldr	r3, [pc, #132]	@ (8009e20 <prvAddCurrentTaskToDelayedList+0x90>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009da0:	4b20      	ldr	r3, [pc, #128]	@ (8009e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	3304      	adds	r3, #4
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fd fe8a 	bl	8007ac0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db2:	d10a      	bne.n	8009dca <prvAddCurrentTaskToDelayedList+0x3a>
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d007      	beq.n	8009dca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dba:	4b1a      	ldr	r3, [pc, #104]	@ (8009e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	3304      	adds	r3, #4
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	4819      	ldr	r0, [pc, #100]	@ (8009e28 <prvAddCurrentTaskToDelayedList+0x98>)
 8009dc4:	f7fd fe1f 	bl	8007a06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009dc8:	e026      	b.n	8009e18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4413      	add	r3, r2
 8009dd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009dd2:	4b14      	ldr	r3, [pc, #80]	@ (8009e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68ba      	ldr	r2, [r7, #8]
 8009dd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009dda:	68ba      	ldr	r2, [r7, #8]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d209      	bcs.n	8009df6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009de2:	4b12      	ldr	r3, [pc, #72]	@ (8009e2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	4b0f      	ldr	r3, [pc, #60]	@ (8009e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	3304      	adds	r3, #4
 8009dec:	4619      	mov	r1, r3
 8009dee:	4610      	mov	r0, r2
 8009df0:	f7fd fe2d 	bl	8007a4e <vListInsert>
}
 8009df4:	e010      	b.n	8009e18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009df6:	4b0e      	ldr	r3, [pc, #56]	@ (8009e30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8009e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	3304      	adds	r3, #4
 8009e00:	4619      	mov	r1, r3
 8009e02:	4610      	mov	r0, r2
 8009e04:	f7fd fe23 	bl	8007a4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e08:	4b0a      	ldr	r3, [pc, #40]	@ (8009e34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d202      	bcs.n	8009e18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009e12:	4a08      	ldr	r2, [pc, #32]	@ (8009e34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	6013      	str	r3, [r2, #0]
}
 8009e18:	bf00      	nop
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	200011d0 	.word	0x200011d0
 8009e24:	20000cf8 	.word	0x20000cf8
 8009e28:	200011b8 	.word	0x200011b8
 8009e2c:	20001188 	.word	0x20001188
 8009e30:	20001184 	.word	0x20001184
 8009e34:	200011ec 	.word	0x200011ec

08009e38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b08a      	sub	sp, #40	@ 0x28
 8009e3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009e42:	f000 fb13 	bl	800a46c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009e46:	4b1d      	ldr	r3, [pc, #116]	@ (8009ebc <xTimerCreateTimerTask+0x84>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d021      	beq.n	8009e92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009e52:	2300      	movs	r3, #0
 8009e54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009e56:	1d3a      	adds	r2, r7, #4
 8009e58:	f107 0108 	add.w	r1, r7, #8
 8009e5c:	f107 030c 	add.w	r3, r7, #12
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7fd fd89 	bl	8007978 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009e66:	6879      	ldr	r1, [r7, #4]
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	68fa      	ldr	r2, [r7, #12]
 8009e6c:	9202      	str	r2, [sp, #8]
 8009e6e:	9301      	str	r3, [sp, #4]
 8009e70:	2302      	movs	r3, #2
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	2300      	movs	r3, #0
 8009e76:	460a      	mov	r2, r1
 8009e78:	4911      	ldr	r1, [pc, #68]	@ (8009ec0 <xTimerCreateTimerTask+0x88>)
 8009e7a:	4812      	ldr	r0, [pc, #72]	@ (8009ec4 <xTimerCreateTimerTask+0x8c>)
 8009e7c:	f7fe fe9a 	bl	8008bb4 <xTaskCreateStatic>
 8009e80:	4603      	mov	r3, r0
 8009e82:	4a11      	ldr	r2, [pc, #68]	@ (8009ec8 <xTimerCreateTimerTask+0x90>)
 8009e84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009e86:	4b10      	ldr	r3, [pc, #64]	@ (8009ec8 <xTimerCreateTimerTask+0x90>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d001      	beq.n	8009e92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10b      	bne.n	8009eb0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	613b      	str	r3, [r7, #16]
}
 8009eaa:	bf00      	nop
 8009eac:	bf00      	nop
 8009eae:	e7fd      	b.n	8009eac <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009eb0:	697b      	ldr	r3, [r7, #20]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3718      	adds	r7, #24
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	20001228 	.word	0x20001228
 8009ec0:	0800b7d4 	.word	0x0800b7d4
 8009ec4:	0800a005 	.word	0x0800a005
 8009ec8:	2000122c 	.word	0x2000122c

08009ecc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b08a      	sub	sp, #40	@ 0x28
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	607a      	str	r2, [r7, #4]
 8009ed8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009eda:	2300      	movs	r3, #0
 8009edc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10b      	bne.n	8009efc <xTimerGenericCommand+0x30>
	__asm volatile
 8009ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee8:	f383 8811 	msr	BASEPRI, r3
 8009eec:	f3bf 8f6f 	isb	sy
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	623b      	str	r3, [r7, #32]
}
 8009ef6:	bf00      	nop
 8009ef8:	bf00      	nop
 8009efa:	e7fd      	b.n	8009ef8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009efc:	4b19      	ldr	r3, [pc, #100]	@ (8009f64 <xTimerGenericCommand+0x98>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d02a      	beq.n	8009f5a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	2b05      	cmp	r3, #5
 8009f14:	dc18      	bgt.n	8009f48 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009f16:	f7ff fdad 	bl	8009a74 <xTaskGetSchedulerState>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d109      	bne.n	8009f34 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009f20:	4b10      	ldr	r3, [pc, #64]	@ (8009f64 <xTimerGenericCommand+0x98>)
 8009f22:	6818      	ldr	r0, [r3, #0]
 8009f24:	f107 0110 	add.w	r1, r7, #16
 8009f28:	2300      	movs	r3, #0
 8009f2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f2c:	f7fd ffa6 	bl	8007e7c <xQueueGenericSend>
 8009f30:	6278      	str	r0, [r7, #36]	@ 0x24
 8009f32:	e012      	b.n	8009f5a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009f34:	4b0b      	ldr	r3, [pc, #44]	@ (8009f64 <xTimerGenericCommand+0x98>)
 8009f36:	6818      	ldr	r0, [r3, #0]
 8009f38:	f107 0110 	add.w	r1, r7, #16
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f7fd ff9c 	bl	8007e7c <xQueueGenericSend>
 8009f44:	6278      	str	r0, [r7, #36]	@ 0x24
 8009f46:	e008      	b.n	8009f5a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009f48:	4b06      	ldr	r3, [pc, #24]	@ (8009f64 <xTimerGenericCommand+0x98>)
 8009f4a:	6818      	ldr	r0, [r3, #0]
 8009f4c:	f107 0110 	add.w	r1, r7, #16
 8009f50:	2300      	movs	r3, #0
 8009f52:	683a      	ldr	r2, [r7, #0]
 8009f54:	f7fe f894 	bl	8008080 <xQueueGenericSendFromISR>
 8009f58:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3728      	adds	r7, #40	@ 0x28
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	20001228 	.word	0x20001228

08009f68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b088      	sub	sp, #32
 8009f6c:	af02      	add	r7, sp, #8
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f72:	4b23      	ldr	r3, [pc, #140]	@ (800a000 <prvProcessExpiredTimer+0x98>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	3304      	adds	r3, #4
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7fd fd9d 	bl	8007ac0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f8c:	f003 0304 	and.w	r3, r3, #4
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d023      	beq.n	8009fdc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	699a      	ldr	r2, [r3, #24]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	18d1      	adds	r1, r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	683a      	ldr	r2, [r7, #0]
 8009fa0:	6978      	ldr	r0, [r7, #20]
 8009fa2:	f000 f8d5 	bl	800a150 <prvInsertTimerInActiveList>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d020      	beq.n	8009fee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009fac:	2300      	movs	r3, #0
 8009fae:	9300      	str	r3, [sp, #0]
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	2100      	movs	r1, #0
 8009fb6:	6978      	ldr	r0, [r7, #20]
 8009fb8:	f7ff ff88 	bl	8009ecc <xTimerGenericCommand>
 8009fbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d114      	bne.n	8009fee <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	60fb      	str	r3, [r7, #12]
}
 8009fd6:	bf00      	nop
 8009fd8:	bf00      	nop
 8009fda:	e7fd      	b.n	8009fd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fe2:	f023 0301 	bic.w	r3, r3, #1
 8009fe6:	b2da      	uxtb	r2, r3
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	6a1b      	ldr	r3, [r3, #32]
 8009ff2:	6978      	ldr	r0, [r7, #20]
 8009ff4:	4798      	blx	r3
}
 8009ff6:	bf00      	nop
 8009ff8:	3718      	adds	r7, #24
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	20001220 	.word	0x20001220

0800a004 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a00c:	f107 0308 	add.w	r3, r7, #8
 800a010:	4618      	mov	r0, r3
 800a012:	f000 f859 	bl	800a0c8 <prvGetNextExpireTime>
 800a016:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	4619      	mov	r1, r3
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f000 f805 	bl	800a02c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a022:	f000 f8d7 	bl	800a1d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a026:	bf00      	nop
 800a028:	e7f0      	b.n	800a00c <prvTimerTask+0x8>
	...

0800a02c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a036:	f7ff f929 	bl	800928c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a03a:	f107 0308 	add.w	r3, r7, #8
 800a03e:	4618      	mov	r0, r3
 800a040:	f000 f866 	bl	800a110 <prvSampleTimeNow>
 800a044:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d130      	bne.n	800a0ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10a      	bne.n	800a068 <prvProcessTimerOrBlockTask+0x3c>
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	429a      	cmp	r2, r3
 800a058:	d806      	bhi.n	800a068 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a05a:	f7ff f925 	bl	80092a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a05e:	68f9      	ldr	r1, [r7, #12]
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f7ff ff81 	bl	8009f68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a066:	e024      	b.n	800a0b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d008      	beq.n	800a080 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a06e:	4b13      	ldr	r3, [pc, #76]	@ (800a0bc <prvProcessTimerOrBlockTask+0x90>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d101      	bne.n	800a07c <prvProcessTimerOrBlockTask+0x50>
 800a078:	2301      	movs	r3, #1
 800a07a:	e000      	b.n	800a07e <prvProcessTimerOrBlockTask+0x52>
 800a07c:	2300      	movs	r3, #0
 800a07e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a080:	4b0f      	ldr	r3, [pc, #60]	@ (800a0c0 <prvProcessTimerOrBlockTask+0x94>)
 800a082:	6818      	ldr	r0, [r3, #0]
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	1ad3      	subs	r3, r2, r3
 800a08a:	683a      	ldr	r2, [r7, #0]
 800a08c:	4619      	mov	r1, r3
 800a08e:	f7fe fd5d 	bl	8008b4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a092:	f7ff f909 	bl	80092a8 <xTaskResumeAll>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10a      	bne.n	800a0b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a09c:	4b09      	ldr	r3, [pc, #36]	@ (800a0c4 <prvProcessTimerOrBlockTask+0x98>)
 800a09e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0a2:	601a      	str	r2, [r3, #0]
 800a0a4:	f3bf 8f4f 	dsb	sy
 800a0a8:	f3bf 8f6f 	isb	sy
}
 800a0ac:	e001      	b.n	800a0b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a0ae:	f7ff f8fb 	bl	80092a8 <xTaskResumeAll>
}
 800a0b2:	bf00      	nop
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	20001224 	.word	0x20001224
 800a0c0:	20001228 	.word	0x20001228
 800a0c4:	e000ed04 	.word	0xe000ed04

0800a0c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a0d0:	4b0e      	ldr	r3, [pc, #56]	@ (800a10c <prvGetNextExpireTime+0x44>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d101      	bne.n	800a0de <prvGetNextExpireTime+0x16>
 800a0da:	2201      	movs	r2, #1
 800a0dc:	e000      	b.n	800a0e0 <prvGetNextExpireTime+0x18>
 800a0de:	2200      	movs	r2, #0
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d105      	bne.n	800a0f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0ec:	4b07      	ldr	r3, [pc, #28]	@ (800a10c <prvGetNextExpireTime+0x44>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	60fb      	str	r3, [r7, #12]
 800a0f6:	e001      	b.n	800a0fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3714      	adds	r7, #20
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	20001220 	.word	0x20001220

0800a110 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a118:	f7ff f964 	bl	80093e4 <xTaskGetTickCount>
 800a11c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a11e:	4b0b      	ldr	r3, [pc, #44]	@ (800a14c <prvSampleTimeNow+0x3c>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	429a      	cmp	r2, r3
 800a126:	d205      	bcs.n	800a134 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a128:	f000 f93a 	bl	800a3a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	601a      	str	r2, [r3, #0]
 800a132:	e002      	b.n	800a13a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a13a:	4a04      	ldr	r2, [pc, #16]	@ (800a14c <prvSampleTimeNow+0x3c>)
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a140:	68fb      	ldr	r3, [r7, #12]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	20001230 	.word	0x20001230

0800a150 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b086      	sub	sp, #24
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
 800a15c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a15e:	2300      	movs	r3, #0
 800a160:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	68ba      	ldr	r2, [r7, #8]
 800a166:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	429a      	cmp	r2, r3
 800a174:	d812      	bhi.n	800a19c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	1ad2      	subs	r2, r2, r3
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	699b      	ldr	r3, [r3, #24]
 800a180:	429a      	cmp	r2, r3
 800a182:	d302      	bcc.n	800a18a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a184:	2301      	movs	r3, #1
 800a186:	617b      	str	r3, [r7, #20]
 800a188:	e01b      	b.n	800a1c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a18a:	4b10      	ldr	r3, [pc, #64]	@ (800a1cc <prvInsertTimerInActiveList+0x7c>)
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	3304      	adds	r3, #4
 800a192:	4619      	mov	r1, r3
 800a194:	4610      	mov	r0, r2
 800a196:	f7fd fc5a 	bl	8007a4e <vListInsert>
 800a19a:	e012      	b.n	800a1c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d206      	bcs.n	800a1b2 <prvInsertTimerInActiveList+0x62>
 800a1a4:	68ba      	ldr	r2, [r7, #8]
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d302      	bcc.n	800a1b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	617b      	str	r3, [r7, #20]
 800a1b0:	e007      	b.n	800a1c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1b2:	4b07      	ldr	r3, [pc, #28]	@ (800a1d0 <prvInsertTimerInActiveList+0x80>)
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	3304      	adds	r3, #4
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	4610      	mov	r0, r2
 800a1be:	f7fd fc46 	bl	8007a4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a1c2:	697b      	ldr	r3, [r7, #20]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3718      	adds	r7, #24
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	20001224 	.word	0x20001224
 800a1d0:	20001220 	.word	0x20001220

0800a1d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b08e      	sub	sp, #56	@ 0x38
 800a1d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1da:	e0ce      	b.n	800a37a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	da19      	bge.n	800a216 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a1e2:	1d3b      	adds	r3, r7, #4
 800a1e4:	3304      	adds	r3, #4
 800a1e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a1e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d10b      	bne.n	800a206 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1f2:	f383 8811 	msr	BASEPRI, r3
 800a1f6:	f3bf 8f6f 	isb	sy
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	61fb      	str	r3, [r7, #28]
}
 800a200:	bf00      	nop
 800a202:	bf00      	nop
 800a204:	e7fd      	b.n	800a202 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a20c:	6850      	ldr	r0, [r2, #4]
 800a20e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a210:	6892      	ldr	r2, [r2, #8]
 800a212:	4611      	mov	r1, r2
 800a214:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f2c0 80ae 	blt.w	800a37a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a224:	695b      	ldr	r3, [r3, #20]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d004      	beq.n	800a234 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a22c:	3304      	adds	r3, #4
 800a22e:	4618      	mov	r0, r3
 800a230:	f7fd fc46 	bl	8007ac0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a234:	463b      	mov	r3, r7
 800a236:	4618      	mov	r0, r3
 800a238:	f7ff ff6a 	bl	800a110 <prvSampleTimeNow>
 800a23c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2b09      	cmp	r3, #9
 800a242:	f200 8097 	bhi.w	800a374 <prvProcessReceivedCommands+0x1a0>
 800a246:	a201      	add	r2, pc, #4	@ (adr r2, 800a24c <prvProcessReceivedCommands+0x78>)
 800a248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a24c:	0800a275 	.word	0x0800a275
 800a250:	0800a275 	.word	0x0800a275
 800a254:	0800a275 	.word	0x0800a275
 800a258:	0800a2eb 	.word	0x0800a2eb
 800a25c:	0800a2ff 	.word	0x0800a2ff
 800a260:	0800a34b 	.word	0x0800a34b
 800a264:	0800a275 	.word	0x0800a275
 800a268:	0800a275 	.word	0x0800a275
 800a26c:	0800a2eb 	.word	0x0800a2eb
 800a270:	0800a2ff 	.word	0x0800a2ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a276:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a27a:	f043 0301 	orr.w	r3, r3, #1
 800a27e:	b2da      	uxtb	r2, r3
 800a280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a282:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a286:	68ba      	ldr	r2, [r7, #8]
 800a288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a28a:	699b      	ldr	r3, [r3, #24]
 800a28c:	18d1      	adds	r1, r2, r3
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a292:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a294:	f7ff ff5c 	bl	800a150 <prvInsertTimerInActiveList>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d06c      	beq.n	800a378 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
 800a2a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2ac:	f003 0304 	and.w	r3, r3, #4
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d061      	beq.n	800a378 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b8:	699b      	ldr	r3, [r3, #24]
 800a2ba:	441a      	add	r2, r3
 800a2bc:	2300      	movs	r3, #0
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2c6:	f7ff fe01 	bl	8009ecc <xTimerGenericCommand>
 800a2ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a2cc:	6a3b      	ldr	r3, [r7, #32]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d152      	bne.n	800a378 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	61bb      	str	r3, [r7, #24]
}
 800a2e4:	bf00      	nop
 800a2e6:	bf00      	nop
 800a2e8:	e7fd      	b.n	800a2e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2f0:	f023 0301 	bic.w	r3, r3, #1
 800a2f4:	b2da      	uxtb	r2, r3
 800a2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a2fc:	e03d      	b.n	800a37a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a300:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a304:	f043 0301 	orr.w	r3, r3, #1
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a310:	68ba      	ldr	r2, [r7, #8]
 800a312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a314:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a318:	699b      	ldr	r3, [r3, #24]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d10b      	bne.n	800a336 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a322:	f383 8811 	msr	BASEPRI, r3
 800a326:	f3bf 8f6f 	isb	sy
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	617b      	str	r3, [r7, #20]
}
 800a330:	bf00      	nop
 800a332:	bf00      	nop
 800a334:	e7fd      	b.n	800a332 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a338:	699a      	ldr	r2, [r3, #24]
 800a33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a33c:	18d1      	adds	r1, r2, r3
 800a33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a342:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a344:	f7ff ff04 	bl	800a150 <prvInsertTimerInActiveList>
					break;
 800a348:	e017      	b.n	800a37a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a34a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a34c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a350:	f003 0302 	and.w	r3, r3, #2
 800a354:	2b00      	cmp	r3, #0
 800a356:	d103      	bne.n	800a360 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a358:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a35a:	f000 fbe5 	bl	800ab28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a35e:	e00c      	b.n	800a37a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a362:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a366:	f023 0301 	bic.w	r3, r3, #1
 800a36a:	b2da      	uxtb	r2, r3
 800a36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a36e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a372:	e002      	b.n	800a37a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a374:	bf00      	nop
 800a376:	e000      	b.n	800a37a <prvProcessReceivedCommands+0x1a6>
					break;
 800a378:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a37a:	4b08      	ldr	r3, [pc, #32]	@ (800a39c <prvProcessReceivedCommands+0x1c8>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	1d39      	adds	r1, r7, #4
 800a380:	2200      	movs	r2, #0
 800a382:	4618      	mov	r0, r3
 800a384:	f7fd ffaa 	bl	80082dc <xQueueReceive>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f47f af26 	bne.w	800a1dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a390:	bf00      	nop
 800a392:	bf00      	nop
 800a394:	3730      	adds	r7, #48	@ 0x30
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	20001228 	.word	0x20001228

0800a3a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b088      	sub	sp, #32
 800a3a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3a6:	e049      	b.n	800a43c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3a8:	4b2e      	ldr	r3, [pc, #184]	@ (800a464 <prvSwitchTimerLists+0xc4>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3b2:	4b2c      	ldr	r3, [pc, #176]	@ (800a464 <prvSwitchTimerLists+0xc4>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	3304      	adds	r3, #4
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7fd fb7d 	bl	8007ac0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6a1b      	ldr	r3, [r3, #32]
 800a3ca:	68f8      	ldr	r0, [r7, #12]
 800a3cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3d4:	f003 0304 	and.w	r3, r3, #4
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d02f      	beq.n	800a43c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	699b      	ldr	r3, [r3, #24]
 800a3e0:	693a      	ldr	r2, [r7, #16]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a3e6:	68ba      	ldr	r2, [r7, #8]
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d90e      	bls.n	800a40c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a3fa:	4b1a      	ldr	r3, [pc, #104]	@ (800a464 <prvSwitchTimerLists+0xc4>)
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	3304      	adds	r3, #4
 800a402:	4619      	mov	r1, r3
 800a404:	4610      	mov	r0, r2
 800a406:	f7fd fb22 	bl	8007a4e <vListInsert>
 800a40a:	e017      	b.n	800a43c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a40c:	2300      	movs	r3, #0
 800a40e:	9300      	str	r3, [sp, #0]
 800a410:	2300      	movs	r3, #0
 800a412:	693a      	ldr	r2, [r7, #16]
 800a414:	2100      	movs	r1, #0
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f7ff fd58 	bl	8009ecc <xTimerGenericCommand>
 800a41c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10b      	bne.n	800a43c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a428:	f383 8811 	msr	BASEPRI, r3
 800a42c:	f3bf 8f6f 	isb	sy
 800a430:	f3bf 8f4f 	dsb	sy
 800a434:	603b      	str	r3, [r7, #0]
}
 800a436:	bf00      	nop
 800a438:	bf00      	nop
 800a43a:	e7fd      	b.n	800a438 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a43c:	4b09      	ldr	r3, [pc, #36]	@ (800a464 <prvSwitchTimerLists+0xc4>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1b0      	bne.n	800a3a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a446:	4b07      	ldr	r3, [pc, #28]	@ (800a464 <prvSwitchTimerLists+0xc4>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a44c:	4b06      	ldr	r3, [pc, #24]	@ (800a468 <prvSwitchTimerLists+0xc8>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a04      	ldr	r2, [pc, #16]	@ (800a464 <prvSwitchTimerLists+0xc4>)
 800a452:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a454:	4a04      	ldr	r2, [pc, #16]	@ (800a468 <prvSwitchTimerLists+0xc8>)
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	6013      	str	r3, [r2, #0]
}
 800a45a:	bf00      	nop
 800a45c:	3718      	adds	r7, #24
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	20001220 	.word	0x20001220
 800a468:	20001224 	.word	0x20001224

0800a46c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a472:	f000 f969 	bl	800a748 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a476:	4b15      	ldr	r3, [pc, #84]	@ (800a4cc <prvCheckForValidListAndQueue+0x60>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d120      	bne.n	800a4c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a47e:	4814      	ldr	r0, [pc, #80]	@ (800a4d0 <prvCheckForValidListAndQueue+0x64>)
 800a480:	f7fd fa94 	bl	80079ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a484:	4813      	ldr	r0, [pc, #76]	@ (800a4d4 <prvCheckForValidListAndQueue+0x68>)
 800a486:	f7fd fa91 	bl	80079ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a48a:	4b13      	ldr	r3, [pc, #76]	@ (800a4d8 <prvCheckForValidListAndQueue+0x6c>)
 800a48c:	4a10      	ldr	r2, [pc, #64]	@ (800a4d0 <prvCheckForValidListAndQueue+0x64>)
 800a48e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a490:	4b12      	ldr	r3, [pc, #72]	@ (800a4dc <prvCheckForValidListAndQueue+0x70>)
 800a492:	4a10      	ldr	r2, [pc, #64]	@ (800a4d4 <prvCheckForValidListAndQueue+0x68>)
 800a494:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a496:	2300      	movs	r3, #0
 800a498:	9300      	str	r3, [sp, #0]
 800a49a:	4b11      	ldr	r3, [pc, #68]	@ (800a4e0 <prvCheckForValidListAndQueue+0x74>)
 800a49c:	4a11      	ldr	r2, [pc, #68]	@ (800a4e4 <prvCheckForValidListAndQueue+0x78>)
 800a49e:	2110      	movs	r1, #16
 800a4a0:	200a      	movs	r0, #10
 800a4a2:	f7fd fba1 	bl	8007be8 <xQueueGenericCreateStatic>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	4a08      	ldr	r2, [pc, #32]	@ (800a4cc <prvCheckForValidListAndQueue+0x60>)
 800a4aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a4ac:	4b07      	ldr	r3, [pc, #28]	@ (800a4cc <prvCheckForValidListAndQueue+0x60>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d005      	beq.n	800a4c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a4b4:	4b05      	ldr	r3, [pc, #20]	@ (800a4cc <prvCheckForValidListAndQueue+0x60>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	490b      	ldr	r1, [pc, #44]	@ (800a4e8 <prvCheckForValidListAndQueue+0x7c>)
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7fe faf2 	bl	8008aa4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a4c0:	f000 f974 	bl	800a7ac <vPortExitCritical>
}
 800a4c4:	bf00      	nop
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	20001228 	.word	0x20001228
 800a4d0:	200011f8 	.word	0x200011f8
 800a4d4:	2000120c 	.word	0x2000120c
 800a4d8:	20001220 	.word	0x20001220
 800a4dc:	20001224 	.word	0x20001224
 800a4e0:	200012d4 	.word	0x200012d4
 800a4e4:	20001234 	.word	0x20001234
 800a4e8:	0800b7dc 	.word	0x0800b7dc

0800a4ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	3b04      	subs	r3, #4
 800a4fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a504:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	3b04      	subs	r3, #4
 800a50a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	f023 0201 	bic.w	r2, r3, #1
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	3b04      	subs	r3, #4
 800a51a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a51c:	4a0c      	ldr	r2, [pc, #48]	@ (800a550 <pxPortInitialiseStack+0x64>)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	3b14      	subs	r3, #20
 800a526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	3b04      	subs	r3, #4
 800a532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f06f 0202 	mvn.w	r2, #2
 800a53a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	3b20      	subs	r3, #32
 800a540:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a542:	68fb      	ldr	r3, [r7, #12]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3714      	adds	r7, #20
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr
 800a550:	0800a555 	.word	0x0800a555

0800a554 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a55a:	2300      	movs	r3, #0
 800a55c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a55e:	4b13      	ldr	r3, [pc, #76]	@ (800a5ac <prvTaskExitError+0x58>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a566:	d00b      	beq.n	800a580 <prvTaskExitError+0x2c>
	__asm volatile
 800a568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a56c:	f383 8811 	msr	BASEPRI, r3
 800a570:	f3bf 8f6f 	isb	sy
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	60fb      	str	r3, [r7, #12]
}
 800a57a:	bf00      	nop
 800a57c:	bf00      	nop
 800a57e:	e7fd      	b.n	800a57c <prvTaskExitError+0x28>
	__asm volatile
 800a580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a584:	f383 8811 	msr	BASEPRI, r3
 800a588:	f3bf 8f6f 	isb	sy
 800a58c:	f3bf 8f4f 	dsb	sy
 800a590:	60bb      	str	r3, [r7, #8]
}
 800a592:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a594:	bf00      	nop
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d0fc      	beq.n	800a596 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a59c:	bf00      	nop
 800a59e:	bf00      	nop
 800a5a0:	3714      	adds	r7, #20
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	20000010 	.word	0x20000010

0800a5b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a5b0:	4b07      	ldr	r3, [pc, #28]	@ (800a5d0 <pxCurrentTCBConst2>)
 800a5b2:	6819      	ldr	r1, [r3, #0]
 800a5b4:	6808      	ldr	r0, [r1, #0]
 800a5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ba:	f380 8809 	msr	PSP, r0
 800a5be:	f3bf 8f6f 	isb	sy
 800a5c2:	f04f 0000 	mov.w	r0, #0
 800a5c6:	f380 8811 	msr	BASEPRI, r0
 800a5ca:	4770      	bx	lr
 800a5cc:	f3af 8000 	nop.w

0800a5d0 <pxCurrentTCBConst2>:
 800a5d0:	20000cf8 	.word	0x20000cf8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a5d4:	bf00      	nop
 800a5d6:	bf00      	nop

0800a5d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a5d8:	4808      	ldr	r0, [pc, #32]	@ (800a5fc <prvPortStartFirstTask+0x24>)
 800a5da:	6800      	ldr	r0, [r0, #0]
 800a5dc:	6800      	ldr	r0, [r0, #0]
 800a5de:	f380 8808 	msr	MSP, r0
 800a5e2:	f04f 0000 	mov.w	r0, #0
 800a5e6:	f380 8814 	msr	CONTROL, r0
 800a5ea:	b662      	cpsie	i
 800a5ec:	b661      	cpsie	f
 800a5ee:	f3bf 8f4f 	dsb	sy
 800a5f2:	f3bf 8f6f 	isb	sy
 800a5f6:	df00      	svc	0
 800a5f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a5fa:	bf00      	nop
 800a5fc:	e000ed08 	.word	0xe000ed08

0800a600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b086      	sub	sp, #24
 800a604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a606:	4b47      	ldr	r3, [pc, #284]	@ (800a724 <xPortStartScheduler+0x124>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a47      	ldr	r2, [pc, #284]	@ (800a728 <xPortStartScheduler+0x128>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d10b      	bne.n	800a628 <xPortStartScheduler+0x28>
	__asm volatile
 800a610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a614:	f383 8811 	msr	BASEPRI, r3
 800a618:	f3bf 8f6f 	isb	sy
 800a61c:	f3bf 8f4f 	dsb	sy
 800a620:	613b      	str	r3, [r7, #16]
}
 800a622:	bf00      	nop
 800a624:	bf00      	nop
 800a626:	e7fd      	b.n	800a624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a628:	4b3e      	ldr	r3, [pc, #248]	@ (800a724 <xPortStartScheduler+0x124>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a3f      	ldr	r2, [pc, #252]	@ (800a72c <xPortStartScheduler+0x12c>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d10b      	bne.n	800a64a <xPortStartScheduler+0x4a>
	__asm volatile
 800a632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	60fb      	str	r3, [r7, #12]
}
 800a644:	bf00      	nop
 800a646:	bf00      	nop
 800a648:	e7fd      	b.n	800a646 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a64a:	4b39      	ldr	r3, [pc, #228]	@ (800a730 <xPortStartScheduler+0x130>)
 800a64c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	b2db      	uxtb	r3, r3
 800a654:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	22ff      	movs	r2, #255	@ 0xff
 800a65a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	b2db      	uxtb	r3, r3
 800a662:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a664:	78fb      	ldrb	r3, [r7, #3]
 800a666:	b2db      	uxtb	r3, r3
 800a668:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a66c:	b2da      	uxtb	r2, r3
 800a66e:	4b31      	ldr	r3, [pc, #196]	@ (800a734 <xPortStartScheduler+0x134>)
 800a670:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a672:	4b31      	ldr	r3, [pc, #196]	@ (800a738 <xPortStartScheduler+0x138>)
 800a674:	2207      	movs	r2, #7
 800a676:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a678:	e009      	b.n	800a68e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a67a:	4b2f      	ldr	r3, [pc, #188]	@ (800a738 <xPortStartScheduler+0x138>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	3b01      	subs	r3, #1
 800a680:	4a2d      	ldr	r2, [pc, #180]	@ (800a738 <xPortStartScheduler+0x138>)
 800a682:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a684:	78fb      	ldrb	r3, [r7, #3]
 800a686:	b2db      	uxtb	r3, r3
 800a688:	005b      	lsls	r3, r3, #1
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a68e:	78fb      	ldrb	r3, [r7, #3]
 800a690:	b2db      	uxtb	r3, r3
 800a692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a696:	2b80      	cmp	r3, #128	@ 0x80
 800a698:	d0ef      	beq.n	800a67a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a69a:	4b27      	ldr	r3, [pc, #156]	@ (800a738 <xPortStartScheduler+0x138>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f1c3 0307 	rsb	r3, r3, #7
 800a6a2:	2b04      	cmp	r3, #4
 800a6a4:	d00b      	beq.n	800a6be <xPortStartScheduler+0xbe>
	__asm volatile
 800a6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6aa:	f383 8811 	msr	BASEPRI, r3
 800a6ae:	f3bf 8f6f 	isb	sy
 800a6b2:	f3bf 8f4f 	dsb	sy
 800a6b6:	60bb      	str	r3, [r7, #8]
}
 800a6b8:	bf00      	nop
 800a6ba:	bf00      	nop
 800a6bc:	e7fd      	b.n	800a6ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a6be:	4b1e      	ldr	r3, [pc, #120]	@ (800a738 <xPortStartScheduler+0x138>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	021b      	lsls	r3, r3, #8
 800a6c4:	4a1c      	ldr	r2, [pc, #112]	@ (800a738 <xPortStartScheduler+0x138>)
 800a6c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a6c8:	4b1b      	ldr	r3, [pc, #108]	@ (800a738 <xPortStartScheduler+0x138>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a6d0:	4a19      	ldr	r2, [pc, #100]	@ (800a738 <xPortStartScheduler+0x138>)
 800a6d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	b2da      	uxtb	r2, r3
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a6dc:	4b17      	ldr	r3, [pc, #92]	@ (800a73c <xPortStartScheduler+0x13c>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a16      	ldr	r2, [pc, #88]	@ (800a73c <xPortStartScheduler+0x13c>)
 800a6e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a6e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a6e8:	4b14      	ldr	r3, [pc, #80]	@ (800a73c <xPortStartScheduler+0x13c>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4a13      	ldr	r2, [pc, #76]	@ (800a73c <xPortStartScheduler+0x13c>)
 800a6ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a6f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a6f4:	f000 f8da 	bl	800a8ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a6f8:	4b11      	ldr	r3, [pc, #68]	@ (800a740 <xPortStartScheduler+0x140>)
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a6fe:	f000 f8f9 	bl	800a8f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a702:	4b10      	ldr	r3, [pc, #64]	@ (800a744 <xPortStartScheduler+0x144>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a0f      	ldr	r2, [pc, #60]	@ (800a744 <xPortStartScheduler+0x144>)
 800a708:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a70c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a70e:	f7ff ff63 	bl	800a5d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a712:	f7fe ff31 	bl	8009578 <vTaskSwitchContext>
	prvTaskExitError();
 800a716:	f7ff ff1d 	bl	800a554 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3718      	adds	r7, #24
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}
 800a724:	e000ed00 	.word	0xe000ed00
 800a728:	410fc271 	.word	0x410fc271
 800a72c:	410fc270 	.word	0x410fc270
 800a730:	e000e400 	.word	0xe000e400
 800a734:	20001324 	.word	0x20001324
 800a738:	20001328 	.word	0x20001328
 800a73c:	e000ed20 	.word	0xe000ed20
 800a740:	20000010 	.word	0x20000010
 800a744:	e000ef34 	.word	0xe000ef34

0800a748 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
	__asm volatile
 800a74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a752:	f383 8811 	msr	BASEPRI, r3
 800a756:	f3bf 8f6f 	isb	sy
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	607b      	str	r3, [r7, #4]
}
 800a760:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a762:	4b10      	ldr	r3, [pc, #64]	@ (800a7a4 <vPortEnterCritical+0x5c>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	3301      	adds	r3, #1
 800a768:	4a0e      	ldr	r2, [pc, #56]	@ (800a7a4 <vPortEnterCritical+0x5c>)
 800a76a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a76c:	4b0d      	ldr	r3, [pc, #52]	@ (800a7a4 <vPortEnterCritical+0x5c>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2b01      	cmp	r3, #1
 800a772:	d110      	bne.n	800a796 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a774:	4b0c      	ldr	r3, [pc, #48]	@ (800a7a8 <vPortEnterCritical+0x60>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d00b      	beq.n	800a796 <vPortEnterCritical+0x4e>
	__asm volatile
 800a77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	603b      	str	r3, [r7, #0]
}
 800a790:	bf00      	nop
 800a792:	bf00      	nop
 800a794:	e7fd      	b.n	800a792 <vPortEnterCritical+0x4a>
	}
}
 800a796:	bf00      	nop
 800a798:	370c      	adds	r7, #12
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	20000010 	.word	0x20000010
 800a7a8:	e000ed04 	.word	0xe000ed04

0800a7ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a7b2:	4b12      	ldr	r3, [pc, #72]	@ (800a7fc <vPortExitCritical+0x50>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10b      	bne.n	800a7d2 <vPortExitCritical+0x26>
	__asm volatile
 800a7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7be:	f383 8811 	msr	BASEPRI, r3
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	607b      	str	r3, [r7, #4]
}
 800a7cc:	bf00      	nop
 800a7ce:	bf00      	nop
 800a7d0:	e7fd      	b.n	800a7ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a7d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a7fc <vPortExitCritical+0x50>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	4a08      	ldr	r2, [pc, #32]	@ (800a7fc <vPortExitCritical+0x50>)
 800a7da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a7dc:	4b07      	ldr	r3, [pc, #28]	@ (800a7fc <vPortExitCritical+0x50>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d105      	bne.n	800a7f0 <vPortExitCritical+0x44>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	f383 8811 	msr	BASEPRI, r3
}
 800a7ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a7f0:	bf00      	nop
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr
 800a7fc:	20000010 	.word	0x20000010

0800a800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a800:	f3ef 8009 	mrs	r0, PSP
 800a804:	f3bf 8f6f 	isb	sy
 800a808:	4b15      	ldr	r3, [pc, #84]	@ (800a860 <pxCurrentTCBConst>)
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	f01e 0f10 	tst.w	lr, #16
 800a810:	bf08      	it	eq
 800a812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a81a:	6010      	str	r0, [r2, #0]
 800a81c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a820:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a824:	f380 8811 	msr	BASEPRI, r0
 800a828:	f3bf 8f4f 	dsb	sy
 800a82c:	f3bf 8f6f 	isb	sy
 800a830:	f7fe fea2 	bl	8009578 <vTaskSwitchContext>
 800a834:	f04f 0000 	mov.w	r0, #0
 800a838:	f380 8811 	msr	BASEPRI, r0
 800a83c:	bc09      	pop	{r0, r3}
 800a83e:	6819      	ldr	r1, [r3, #0]
 800a840:	6808      	ldr	r0, [r1, #0]
 800a842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a846:	f01e 0f10 	tst.w	lr, #16
 800a84a:	bf08      	it	eq
 800a84c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a850:	f380 8809 	msr	PSP, r0
 800a854:	f3bf 8f6f 	isb	sy
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	f3af 8000 	nop.w

0800a860 <pxCurrentTCBConst>:
 800a860:	20000cf8 	.word	0x20000cf8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a864:	bf00      	nop
 800a866:	bf00      	nop

0800a868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
	__asm volatile
 800a86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a872:	f383 8811 	msr	BASEPRI, r3
 800a876:	f3bf 8f6f 	isb	sy
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	607b      	str	r3, [r7, #4]
}
 800a880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a882:	f7fe fdbf 	bl	8009404 <xTaskIncrementTick>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d003      	beq.n	800a894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a88c:	4b06      	ldr	r3, [pc, #24]	@ (800a8a8 <xPortSysTickHandler+0x40>)
 800a88e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a892:	601a      	str	r2, [r3, #0]
 800a894:	2300      	movs	r3, #0
 800a896:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	f383 8811 	msr	BASEPRI, r3
}
 800a89e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a8a0:	bf00      	nop
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	e000ed04 	.word	0xe000ed04

0800a8ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a8b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a8e0 <vPortSetupTimerInterrupt+0x34>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a8b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a8e4 <vPortSetupTimerInterrupt+0x38>)
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a8bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a8e8 <vPortSetupTimerInterrupt+0x3c>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a0a      	ldr	r2, [pc, #40]	@ (800a8ec <vPortSetupTimerInterrupt+0x40>)
 800a8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8c6:	099b      	lsrs	r3, r3, #6
 800a8c8:	4a09      	ldr	r2, [pc, #36]	@ (800a8f0 <vPortSetupTimerInterrupt+0x44>)
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a8ce:	4b04      	ldr	r3, [pc, #16]	@ (800a8e0 <vPortSetupTimerInterrupt+0x34>)
 800a8d0:	2207      	movs	r2, #7
 800a8d2:	601a      	str	r2, [r3, #0]
}
 800a8d4:	bf00      	nop
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop
 800a8e0:	e000e010 	.word	0xe000e010
 800a8e4:	e000e018 	.word	0xe000e018
 800a8e8:	20000004 	.word	0x20000004
 800a8ec:	10624dd3 	.word	0x10624dd3
 800a8f0:	e000e014 	.word	0xe000e014

0800a8f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a8f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a904 <vPortEnableVFP+0x10>
 800a8f8:	6801      	ldr	r1, [r0, #0]
 800a8fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a8fe:	6001      	str	r1, [r0, #0]
 800a900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a902:	bf00      	nop
 800a904:	e000ed88 	.word	0xe000ed88

0800a908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a908:	b480      	push	{r7}
 800a90a:	b085      	sub	sp, #20
 800a90c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a90e:	f3ef 8305 	mrs	r3, IPSR
 800a912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2b0f      	cmp	r3, #15
 800a918:	d915      	bls.n	800a946 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a91a:	4a18      	ldr	r2, [pc, #96]	@ (800a97c <vPortValidateInterruptPriority+0x74>)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	4413      	add	r3, r2
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a924:	4b16      	ldr	r3, [pc, #88]	@ (800a980 <vPortValidateInterruptPriority+0x78>)
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	7afa      	ldrb	r2, [r7, #11]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d20b      	bcs.n	800a946 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	607b      	str	r3, [r7, #4]
}
 800a940:	bf00      	nop
 800a942:	bf00      	nop
 800a944:	e7fd      	b.n	800a942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a946:	4b0f      	ldr	r3, [pc, #60]	@ (800a984 <vPortValidateInterruptPriority+0x7c>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a94e:	4b0e      	ldr	r3, [pc, #56]	@ (800a988 <vPortValidateInterruptPriority+0x80>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	429a      	cmp	r2, r3
 800a954:	d90b      	bls.n	800a96e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a95a:	f383 8811 	msr	BASEPRI, r3
 800a95e:	f3bf 8f6f 	isb	sy
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	603b      	str	r3, [r7, #0]
}
 800a968:	bf00      	nop
 800a96a:	bf00      	nop
 800a96c:	e7fd      	b.n	800a96a <vPortValidateInterruptPriority+0x62>
	}
 800a96e:	bf00      	nop
 800a970:	3714      	adds	r7, #20
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	e000e3f0 	.word	0xe000e3f0
 800a980:	20001324 	.word	0x20001324
 800a984:	e000ed0c 	.word	0xe000ed0c
 800a988:	20001328 	.word	0x20001328

0800a98c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b08a      	sub	sp, #40	@ 0x28
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a994:	2300      	movs	r3, #0
 800a996:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a998:	f7fe fc78 	bl	800928c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a99c:	4b5c      	ldr	r3, [pc, #368]	@ (800ab10 <pvPortMalloc+0x184>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d101      	bne.n	800a9a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a9a4:	f000 f924 	bl	800abf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a9a8:	4b5a      	ldr	r3, [pc, #360]	@ (800ab14 <pvPortMalloc+0x188>)
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4013      	ands	r3, r2
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f040 8095 	bne.w	800aae0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d01e      	beq.n	800a9fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a9bc:	2208      	movs	r2, #8
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f003 0307 	and.w	r3, r3, #7
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d015      	beq.n	800a9fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f023 0307 	bic.w	r3, r3, #7
 800a9d4:	3308      	adds	r3, #8
 800a9d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f003 0307 	and.w	r3, r3, #7
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d00b      	beq.n	800a9fa <pvPortMalloc+0x6e>
	__asm volatile
 800a9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e6:	f383 8811 	msr	BASEPRI, r3
 800a9ea:	f3bf 8f6f 	isb	sy
 800a9ee:	f3bf 8f4f 	dsb	sy
 800a9f2:	617b      	str	r3, [r7, #20]
}
 800a9f4:	bf00      	nop
 800a9f6:	bf00      	nop
 800a9f8:	e7fd      	b.n	800a9f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d06f      	beq.n	800aae0 <pvPortMalloc+0x154>
 800aa00:	4b45      	ldr	r3, [pc, #276]	@ (800ab18 <pvPortMalloc+0x18c>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d86a      	bhi.n	800aae0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa0a:	4b44      	ldr	r3, [pc, #272]	@ (800ab1c <pvPortMalloc+0x190>)
 800aa0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa0e:	4b43      	ldr	r3, [pc, #268]	@ (800ab1c <pvPortMalloc+0x190>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa14:	e004      	b.n	800aa20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800aa16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d903      	bls.n	800aa32 <pvPortMalloc+0xa6>
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d1f1      	bne.n	800aa16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aa32:	4b37      	ldr	r3, [pc, #220]	@ (800ab10 <pvPortMalloc+0x184>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d051      	beq.n	800aae0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa3c:	6a3b      	ldr	r3, [r7, #32]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2208      	movs	r2, #8
 800aa42:	4413      	add	r3, r2
 800aa44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aa46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	6a3b      	ldr	r3, [r7, #32]
 800aa4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa50:	685a      	ldr	r2, [r3, #4]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	1ad2      	subs	r2, r2, r3
 800aa56:	2308      	movs	r3, #8
 800aa58:	005b      	lsls	r3, r3, #1
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d920      	bls.n	800aaa0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aa5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4413      	add	r3, r2
 800aa64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	f003 0307 	and.w	r3, r3, #7
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00b      	beq.n	800aa88 <pvPortMalloc+0xfc>
	__asm volatile
 800aa70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa74:	f383 8811 	msr	BASEPRI, r3
 800aa78:	f3bf 8f6f 	isb	sy
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	613b      	str	r3, [r7, #16]
}
 800aa82:	bf00      	nop
 800aa84:	bf00      	nop
 800aa86:	e7fd      	b.n	800aa84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa8a:	685a      	ldr	r2, [r3, #4]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	1ad2      	subs	r2, r2, r3
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa9a:	69b8      	ldr	r0, [r7, #24]
 800aa9c:	f000 f90a 	bl	800acb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aaa0:	4b1d      	ldr	r3, [pc, #116]	@ (800ab18 <pvPortMalloc+0x18c>)
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	1ad3      	subs	r3, r2, r3
 800aaaa:	4a1b      	ldr	r2, [pc, #108]	@ (800ab18 <pvPortMalloc+0x18c>)
 800aaac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aaae:	4b1a      	ldr	r3, [pc, #104]	@ (800ab18 <pvPortMalloc+0x18c>)
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	4b1b      	ldr	r3, [pc, #108]	@ (800ab20 <pvPortMalloc+0x194>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d203      	bcs.n	800aac2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aaba:	4b17      	ldr	r3, [pc, #92]	@ (800ab18 <pvPortMalloc+0x18c>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a18      	ldr	r2, [pc, #96]	@ (800ab20 <pvPortMalloc+0x194>)
 800aac0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac4:	685a      	ldr	r2, [r3, #4]
 800aac6:	4b13      	ldr	r3, [pc, #76]	@ (800ab14 <pvPortMalloc+0x188>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	431a      	orrs	r2, r3
 800aacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aace:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad2:	2200      	movs	r2, #0
 800aad4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aad6:	4b13      	ldr	r3, [pc, #76]	@ (800ab24 <pvPortMalloc+0x198>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	3301      	adds	r3, #1
 800aadc:	4a11      	ldr	r2, [pc, #68]	@ (800ab24 <pvPortMalloc+0x198>)
 800aade:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aae0:	f7fe fbe2 	bl	80092a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	f003 0307 	and.w	r3, r3, #7
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00b      	beq.n	800ab06 <pvPortMalloc+0x17a>
	__asm volatile
 800aaee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf2:	f383 8811 	msr	BASEPRI, r3
 800aaf6:	f3bf 8f6f 	isb	sy
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	60fb      	str	r3, [r7, #12]
}
 800ab00:	bf00      	nop
 800ab02:	bf00      	nop
 800ab04:	e7fd      	b.n	800ab02 <pvPortMalloc+0x176>
	return pvReturn;
 800ab06:	69fb      	ldr	r3, [r7, #28]
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3728      	adds	r7, #40	@ 0x28
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	20001eec 	.word	0x20001eec
 800ab14:	20001f00 	.word	0x20001f00
 800ab18:	20001ef0 	.word	0x20001ef0
 800ab1c:	20001ee4 	.word	0x20001ee4
 800ab20:	20001ef4 	.word	0x20001ef4
 800ab24:	20001ef8 	.word	0x20001ef8

0800ab28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b086      	sub	sp, #24
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d04f      	beq.n	800abda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ab3a:	2308      	movs	r3, #8
 800ab3c:	425b      	negs	r3, r3
 800ab3e:	697a      	ldr	r2, [r7, #20]
 800ab40:	4413      	add	r3, r2
 800ab42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	685a      	ldr	r2, [r3, #4]
 800ab4c:	4b25      	ldr	r3, [pc, #148]	@ (800abe4 <vPortFree+0xbc>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4013      	ands	r3, r2
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d10b      	bne.n	800ab6e <vPortFree+0x46>
	__asm volatile
 800ab56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab5a:	f383 8811 	msr	BASEPRI, r3
 800ab5e:	f3bf 8f6f 	isb	sy
 800ab62:	f3bf 8f4f 	dsb	sy
 800ab66:	60fb      	str	r3, [r7, #12]
}
 800ab68:	bf00      	nop
 800ab6a:	bf00      	nop
 800ab6c:	e7fd      	b.n	800ab6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00b      	beq.n	800ab8e <vPortFree+0x66>
	__asm volatile
 800ab76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab7a:	f383 8811 	msr	BASEPRI, r3
 800ab7e:	f3bf 8f6f 	isb	sy
 800ab82:	f3bf 8f4f 	dsb	sy
 800ab86:	60bb      	str	r3, [r7, #8]
}
 800ab88:	bf00      	nop
 800ab8a:	bf00      	nop
 800ab8c:	e7fd      	b.n	800ab8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	685a      	ldr	r2, [r3, #4]
 800ab92:	4b14      	ldr	r3, [pc, #80]	@ (800abe4 <vPortFree+0xbc>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4013      	ands	r3, r2
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d01e      	beq.n	800abda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d11a      	bne.n	800abda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	685a      	ldr	r2, [r3, #4]
 800aba8:	4b0e      	ldr	r3, [pc, #56]	@ (800abe4 <vPortFree+0xbc>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	43db      	mvns	r3, r3
 800abae:	401a      	ands	r2, r3
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800abb4:	f7fe fb6a 	bl	800928c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	685a      	ldr	r2, [r3, #4]
 800abbc:	4b0a      	ldr	r3, [pc, #40]	@ (800abe8 <vPortFree+0xc0>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4413      	add	r3, r2
 800abc2:	4a09      	ldr	r2, [pc, #36]	@ (800abe8 <vPortFree+0xc0>)
 800abc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800abc6:	6938      	ldr	r0, [r7, #16]
 800abc8:	f000 f874 	bl	800acb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800abcc:	4b07      	ldr	r3, [pc, #28]	@ (800abec <vPortFree+0xc4>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	3301      	adds	r3, #1
 800abd2:	4a06      	ldr	r2, [pc, #24]	@ (800abec <vPortFree+0xc4>)
 800abd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800abd6:	f7fe fb67 	bl	80092a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800abda:	bf00      	nop
 800abdc:	3718      	adds	r7, #24
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	20001f00 	.word	0x20001f00
 800abe8:	20001ef0 	.word	0x20001ef0
 800abec:	20001efc 	.word	0x20001efc

0800abf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800abf0:	b480      	push	{r7}
 800abf2:	b085      	sub	sp, #20
 800abf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800abf6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800abfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800abfc:	4b27      	ldr	r3, [pc, #156]	@ (800ac9c <prvHeapInit+0xac>)
 800abfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f003 0307 	and.w	r3, r3, #7
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00c      	beq.n	800ac24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	3307      	adds	r3, #7
 800ac0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f023 0307 	bic.w	r3, r3, #7
 800ac16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ac18:	68ba      	ldr	r2, [r7, #8]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	1ad3      	subs	r3, r2, r3
 800ac1e:	4a1f      	ldr	r2, [pc, #124]	@ (800ac9c <prvHeapInit+0xac>)
 800ac20:	4413      	add	r3, r2
 800ac22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac28:	4a1d      	ldr	r2, [pc, #116]	@ (800aca0 <prvHeapInit+0xb0>)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ac2e:	4b1c      	ldr	r3, [pc, #112]	@ (800aca0 <prvHeapInit+0xb0>)
 800ac30:	2200      	movs	r2, #0
 800ac32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	68ba      	ldr	r2, [r7, #8]
 800ac38:	4413      	add	r3, r2
 800ac3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ac3c:	2208      	movs	r2, #8
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	1a9b      	subs	r3, r3, r2
 800ac42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f023 0307 	bic.w	r3, r3, #7
 800ac4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	4a15      	ldr	r2, [pc, #84]	@ (800aca4 <prvHeapInit+0xb4>)
 800ac50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ac52:	4b14      	ldr	r3, [pc, #80]	@ (800aca4 <prvHeapInit+0xb4>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2200      	movs	r2, #0
 800ac58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ac5a:	4b12      	ldr	r3, [pc, #72]	@ (800aca4 <prvHeapInit+0xb4>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	1ad2      	subs	r2, r2, r3
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ac70:	4b0c      	ldr	r3, [pc, #48]	@ (800aca4 <prvHeapInit+0xb4>)
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	4a0a      	ldr	r2, [pc, #40]	@ (800aca8 <prvHeapInit+0xb8>)
 800ac7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	4a09      	ldr	r2, [pc, #36]	@ (800acac <prvHeapInit+0xbc>)
 800ac86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac88:	4b09      	ldr	r3, [pc, #36]	@ (800acb0 <prvHeapInit+0xc0>)
 800ac8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ac8e:	601a      	str	r2, [r3, #0]
}
 800ac90:	bf00      	nop
 800ac92:	3714      	adds	r7, #20
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr
 800ac9c:	2000132c 	.word	0x2000132c
 800aca0:	20001ee4 	.word	0x20001ee4
 800aca4:	20001eec 	.word	0x20001eec
 800aca8:	20001ef4 	.word	0x20001ef4
 800acac:	20001ef0 	.word	0x20001ef0
 800acb0:	20001f00 	.word	0x20001f00

0800acb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800acb4:	b480      	push	{r7}
 800acb6:	b085      	sub	sp, #20
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800acbc:	4b28      	ldr	r3, [pc, #160]	@ (800ad60 <prvInsertBlockIntoFreeList+0xac>)
 800acbe:	60fb      	str	r3, [r7, #12]
 800acc0:	e002      	b.n	800acc8 <prvInsertBlockIntoFreeList+0x14>
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	60fb      	str	r3, [r7, #12]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d8f7      	bhi.n	800acc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	68ba      	ldr	r2, [r7, #8]
 800acdc:	4413      	add	r3, r2
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d108      	bne.n	800acf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	685a      	ldr	r2, [r3, #4]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	441a      	add	r2, r3
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	68ba      	ldr	r2, [r7, #8]
 800ad00:	441a      	add	r2, r3
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d118      	bne.n	800ad3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	4b15      	ldr	r3, [pc, #84]	@ (800ad64 <prvInsertBlockIntoFreeList+0xb0>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d00d      	beq.n	800ad32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	685a      	ldr	r2, [r3, #4]
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	441a      	add	r2, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	601a      	str	r2, [r3, #0]
 800ad30:	e008      	b.n	800ad44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ad32:	4b0c      	ldr	r3, [pc, #48]	@ (800ad64 <prvInsertBlockIntoFreeList+0xb0>)
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	601a      	str	r2, [r3, #0]
 800ad3a:	e003      	b.n	800ad44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ad44:	68fa      	ldr	r2, [r7, #12]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d002      	beq.n	800ad52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad52:	bf00      	nop
 800ad54:	3714      	adds	r7, #20
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	20001ee4 	.word	0x20001ee4
 800ad64:	20001eec 	.word	0x20001eec

0800ad68 <siprintf>:
 800ad68:	b40e      	push	{r1, r2, r3}
 800ad6a:	b500      	push	{lr}
 800ad6c:	b09c      	sub	sp, #112	@ 0x70
 800ad6e:	ab1d      	add	r3, sp, #116	@ 0x74
 800ad70:	9002      	str	r0, [sp, #8]
 800ad72:	9006      	str	r0, [sp, #24]
 800ad74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ad78:	4809      	ldr	r0, [pc, #36]	@ (800ada0 <siprintf+0x38>)
 800ad7a:	9107      	str	r1, [sp, #28]
 800ad7c:	9104      	str	r1, [sp, #16]
 800ad7e:	4909      	ldr	r1, [pc, #36]	@ (800ada4 <siprintf+0x3c>)
 800ad80:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad84:	9105      	str	r1, [sp, #20]
 800ad86:	6800      	ldr	r0, [r0, #0]
 800ad88:	9301      	str	r3, [sp, #4]
 800ad8a:	a902      	add	r1, sp, #8
 800ad8c:	f000 f9f8 	bl	800b180 <_svfiprintf_r>
 800ad90:	9b02      	ldr	r3, [sp, #8]
 800ad92:	2200      	movs	r2, #0
 800ad94:	701a      	strb	r2, [r3, #0]
 800ad96:	b01c      	add	sp, #112	@ 0x70
 800ad98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad9c:	b003      	add	sp, #12
 800ad9e:	4770      	bx	lr
 800ada0:	20000014 	.word	0x20000014
 800ada4:	ffff0208 	.word	0xffff0208

0800ada8 <memset>:
 800ada8:	4402      	add	r2, r0
 800adaa:	4603      	mov	r3, r0
 800adac:	4293      	cmp	r3, r2
 800adae:	d100      	bne.n	800adb2 <memset+0xa>
 800adb0:	4770      	bx	lr
 800adb2:	f803 1b01 	strb.w	r1, [r3], #1
 800adb6:	e7f9      	b.n	800adac <memset+0x4>

0800adb8 <_reclaim_reent>:
 800adb8:	4b29      	ldr	r3, [pc, #164]	@ (800ae60 <_reclaim_reent+0xa8>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4283      	cmp	r3, r0
 800adbe:	b570      	push	{r4, r5, r6, lr}
 800adc0:	4604      	mov	r4, r0
 800adc2:	d04b      	beq.n	800ae5c <_reclaim_reent+0xa4>
 800adc4:	69c3      	ldr	r3, [r0, #28]
 800adc6:	b1ab      	cbz	r3, 800adf4 <_reclaim_reent+0x3c>
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	b16b      	cbz	r3, 800ade8 <_reclaim_reent+0x30>
 800adcc:	2500      	movs	r5, #0
 800adce:	69e3      	ldr	r3, [r4, #28]
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	5959      	ldr	r1, [r3, r5]
 800add4:	2900      	cmp	r1, #0
 800add6:	d13b      	bne.n	800ae50 <_reclaim_reent+0x98>
 800add8:	3504      	adds	r5, #4
 800adda:	2d80      	cmp	r5, #128	@ 0x80
 800addc:	d1f7      	bne.n	800adce <_reclaim_reent+0x16>
 800adde:	69e3      	ldr	r3, [r4, #28]
 800ade0:	4620      	mov	r0, r4
 800ade2:	68d9      	ldr	r1, [r3, #12]
 800ade4:	f000 f878 	bl	800aed8 <_free_r>
 800ade8:	69e3      	ldr	r3, [r4, #28]
 800adea:	6819      	ldr	r1, [r3, #0]
 800adec:	b111      	cbz	r1, 800adf4 <_reclaim_reent+0x3c>
 800adee:	4620      	mov	r0, r4
 800adf0:	f000 f872 	bl	800aed8 <_free_r>
 800adf4:	6961      	ldr	r1, [r4, #20]
 800adf6:	b111      	cbz	r1, 800adfe <_reclaim_reent+0x46>
 800adf8:	4620      	mov	r0, r4
 800adfa:	f000 f86d 	bl	800aed8 <_free_r>
 800adfe:	69e1      	ldr	r1, [r4, #28]
 800ae00:	b111      	cbz	r1, 800ae08 <_reclaim_reent+0x50>
 800ae02:	4620      	mov	r0, r4
 800ae04:	f000 f868 	bl	800aed8 <_free_r>
 800ae08:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ae0a:	b111      	cbz	r1, 800ae12 <_reclaim_reent+0x5a>
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	f000 f863 	bl	800aed8 <_free_r>
 800ae12:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae14:	b111      	cbz	r1, 800ae1c <_reclaim_reent+0x64>
 800ae16:	4620      	mov	r0, r4
 800ae18:	f000 f85e 	bl	800aed8 <_free_r>
 800ae1c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ae1e:	b111      	cbz	r1, 800ae26 <_reclaim_reent+0x6e>
 800ae20:	4620      	mov	r0, r4
 800ae22:	f000 f859 	bl	800aed8 <_free_r>
 800ae26:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ae28:	b111      	cbz	r1, 800ae30 <_reclaim_reent+0x78>
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f000 f854 	bl	800aed8 <_free_r>
 800ae30:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ae32:	b111      	cbz	r1, 800ae3a <_reclaim_reent+0x82>
 800ae34:	4620      	mov	r0, r4
 800ae36:	f000 f84f 	bl	800aed8 <_free_r>
 800ae3a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ae3c:	b111      	cbz	r1, 800ae44 <_reclaim_reent+0x8c>
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f000 f84a 	bl	800aed8 <_free_r>
 800ae44:	6a23      	ldr	r3, [r4, #32]
 800ae46:	b14b      	cbz	r3, 800ae5c <_reclaim_reent+0xa4>
 800ae48:	4620      	mov	r0, r4
 800ae4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae4e:	4718      	bx	r3
 800ae50:	680e      	ldr	r6, [r1, #0]
 800ae52:	4620      	mov	r0, r4
 800ae54:	f000 f840 	bl	800aed8 <_free_r>
 800ae58:	4631      	mov	r1, r6
 800ae5a:	e7bb      	b.n	800add4 <_reclaim_reent+0x1c>
 800ae5c:	bd70      	pop	{r4, r5, r6, pc}
 800ae5e:	bf00      	nop
 800ae60:	20000014 	.word	0x20000014

0800ae64 <__errno>:
 800ae64:	4b01      	ldr	r3, [pc, #4]	@ (800ae6c <__errno+0x8>)
 800ae66:	6818      	ldr	r0, [r3, #0]
 800ae68:	4770      	bx	lr
 800ae6a:	bf00      	nop
 800ae6c:	20000014 	.word	0x20000014

0800ae70 <__libc_init_array>:
 800ae70:	b570      	push	{r4, r5, r6, lr}
 800ae72:	4d0d      	ldr	r5, [pc, #52]	@ (800aea8 <__libc_init_array+0x38>)
 800ae74:	4c0d      	ldr	r4, [pc, #52]	@ (800aeac <__libc_init_array+0x3c>)
 800ae76:	1b64      	subs	r4, r4, r5
 800ae78:	10a4      	asrs	r4, r4, #2
 800ae7a:	2600      	movs	r6, #0
 800ae7c:	42a6      	cmp	r6, r4
 800ae7e:	d109      	bne.n	800ae94 <__libc_init_array+0x24>
 800ae80:	4d0b      	ldr	r5, [pc, #44]	@ (800aeb0 <__libc_init_array+0x40>)
 800ae82:	4c0c      	ldr	r4, [pc, #48]	@ (800aeb4 <__libc_init_array+0x44>)
 800ae84:	f000 fc66 	bl	800b754 <_init>
 800ae88:	1b64      	subs	r4, r4, r5
 800ae8a:	10a4      	asrs	r4, r4, #2
 800ae8c:	2600      	movs	r6, #0
 800ae8e:	42a6      	cmp	r6, r4
 800ae90:	d105      	bne.n	800ae9e <__libc_init_array+0x2e>
 800ae92:	bd70      	pop	{r4, r5, r6, pc}
 800ae94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae98:	4798      	blx	r3
 800ae9a:	3601      	adds	r6, #1
 800ae9c:	e7ee      	b.n	800ae7c <__libc_init_array+0xc>
 800ae9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aea2:	4798      	blx	r3
 800aea4:	3601      	adds	r6, #1
 800aea6:	e7f2      	b.n	800ae8e <__libc_init_array+0x1e>
 800aea8:	0800b948 	.word	0x0800b948
 800aeac:	0800b948 	.word	0x0800b948
 800aeb0:	0800b948 	.word	0x0800b948
 800aeb4:	0800b94c 	.word	0x0800b94c

0800aeb8 <__retarget_lock_acquire_recursive>:
 800aeb8:	4770      	bx	lr

0800aeba <__retarget_lock_release_recursive>:
 800aeba:	4770      	bx	lr

0800aebc <memcpy>:
 800aebc:	440a      	add	r2, r1
 800aebe:	4291      	cmp	r1, r2
 800aec0:	f100 33ff 	add.w	r3, r0, #4294967295
 800aec4:	d100      	bne.n	800aec8 <memcpy+0xc>
 800aec6:	4770      	bx	lr
 800aec8:	b510      	push	{r4, lr}
 800aeca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aece:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aed2:	4291      	cmp	r1, r2
 800aed4:	d1f9      	bne.n	800aeca <memcpy+0xe>
 800aed6:	bd10      	pop	{r4, pc}

0800aed8 <_free_r>:
 800aed8:	b538      	push	{r3, r4, r5, lr}
 800aeda:	4605      	mov	r5, r0
 800aedc:	2900      	cmp	r1, #0
 800aede:	d041      	beq.n	800af64 <_free_r+0x8c>
 800aee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aee4:	1f0c      	subs	r4, r1, #4
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	bfb8      	it	lt
 800aeea:	18e4      	addlt	r4, r4, r3
 800aeec:	f000 f8e0 	bl	800b0b0 <__malloc_lock>
 800aef0:	4a1d      	ldr	r2, [pc, #116]	@ (800af68 <_free_r+0x90>)
 800aef2:	6813      	ldr	r3, [r2, #0]
 800aef4:	b933      	cbnz	r3, 800af04 <_free_r+0x2c>
 800aef6:	6063      	str	r3, [r4, #4]
 800aef8:	6014      	str	r4, [r2, #0]
 800aefa:	4628      	mov	r0, r5
 800aefc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af00:	f000 b8dc 	b.w	800b0bc <__malloc_unlock>
 800af04:	42a3      	cmp	r3, r4
 800af06:	d908      	bls.n	800af1a <_free_r+0x42>
 800af08:	6820      	ldr	r0, [r4, #0]
 800af0a:	1821      	adds	r1, r4, r0
 800af0c:	428b      	cmp	r3, r1
 800af0e:	bf01      	itttt	eq
 800af10:	6819      	ldreq	r1, [r3, #0]
 800af12:	685b      	ldreq	r3, [r3, #4]
 800af14:	1809      	addeq	r1, r1, r0
 800af16:	6021      	streq	r1, [r4, #0]
 800af18:	e7ed      	b.n	800aef6 <_free_r+0x1e>
 800af1a:	461a      	mov	r2, r3
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	b10b      	cbz	r3, 800af24 <_free_r+0x4c>
 800af20:	42a3      	cmp	r3, r4
 800af22:	d9fa      	bls.n	800af1a <_free_r+0x42>
 800af24:	6811      	ldr	r1, [r2, #0]
 800af26:	1850      	adds	r0, r2, r1
 800af28:	42a0      	cmp	r0, r4
 800af2a:	d10b      	bne.n	800af44 <_free_r+0x6c>
 800af2c:	6820      	ldr	r0, [r4, #0]
 800af2e:	4401      	add	r1, r0
 800af30:	1850      	adds	r0, r2, r1
 800af32:	4283      	cmp	r3, r0
 800af34:	6011      	str	r1, [r2, #0]
 800af36:	d1e0      	bne.n	800aefa <_free_r+0x22>
 800af38:	6818      	ldr	r0, [r3, #0]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	6053      	str	r3, [r2, #4]
 800af3e:	4408      	add	r0, r1
 800af40:	6010      	str	r0, [r2, #0]
 800af42:	e7da      	b.n	800aefa <_free_r+0x22>
 800af44:	d902      	bls.n	800af4c <_free_r+0x74>
 800af46:	230c      	movs	r3, #12
 800af48:	602b      	str	r3, [r5, #0]
 800af4a:	e7d6      	b.n	800aefa <_free_r+0x22>
 800af4c:	6820      	ldr	r0, [r4, #0]
 800af4e:	1821      	adds	r1, r4, r0
 800af50:	428b      	cmp	r3, r1
 800af52:	bf04      	itt	eq
 800af54:	6819      	ldreq	r1, [r3, #0]
 800af56:	685b      	ldreq	r3, [r3, #4]
 800af58:	6063      	str	r3, [r4, #4]
 800af5a:	bf04      	itt	eq
 800af5c:	1809      	addeq	r1, r1, r0
 800af5e:	6021      	streq	r1, [r4, #0]
 800af60:	6054      	str	r4, [r2, #4]
 800af62:	e7ca      	b.n	800aefa <_free_r+0x22>
 800af64:	bd38      	pop	{r3, r4, r5, pc}
 800af66:	bf00      	nop
 800af68:	20002048 	.word	0x20002048

0800af6c <sbrk_aligned>:
 800af6c:	b570      	push	{r4, r5, r6, lr}
 800af6e:	4e0f      	ldr	r6, [pc, #60]	@ (800afac <sbrk_aligned+0x40>)
 800af70:	460c      	mov	r4, r1
 800af72:	6831      	ldr	r1, [r6, #0]
 800af74:	4605      	mov	r5, r0
 800af76:	b911      	cbnz	r1, 800af7e <sbrk_aligned+0x12>
 800af78:	f000 fba6 	bl	800b6c8 <_sbrk_r>
 800af7c:	6030      	str	r0, [r6, #0]
 800af7e:	4621      	mov	r1, r4
 800af80:	4628      	mov	r0, r5
 800af82:	f000 fba1 	bl	800b6c8 <_sbrk_r>
 800af86:	1c43      	adds	r3, r0, #1
 800af88:	d103      	bne.n	800af92 <sbrk_aligned+0x26>
 800af8a:	f04f 34ff 	mov.w	r4, #4294967295
 800af8e:	4620      	mov	r0, r4
 800af90:	bd70      	pop	{r4, r5, r6, pc}
 800af92:	1cc4      	adds	r4, r0, #3
 800af94:	f024 0403 	bic.w	r4, r4, #3
 800af98:	42a0      	cmp	r0, r4
 800af9a:	d0f8      	beq.n	800af8e <sbrk_aligned+0x22>
 800af9c:	1a21      	subs	r1, r4, r0
 800af9e:	4628      	mov	r0, r5
 800afa0:	f000 fb92 	bl	800b6c8 <_sbrk_r>
 800afa4:	3001      	adds	r0, #1
 800afa6:	d1f2      	bne.n	800af8e <sbrk_aligned+0x22>
 800afa8:	e7ef      	b.n	800af8a <sbrk_aligned+0x1e>
 800afaa:	bf00      	nop
 800afac:	20002044 	.word	0x20002044

0800afb0 <_malloc_r>:
 800afb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afb4:	1ccd      	adds	r5, r1, #3
 800afb6:	f025 0503 	bic.w	r5, r5, #3
 800afba:	3508      	adds	r5, #8
 800afbc:	2d0c      	cmp	r5, #12
 800afbe:	bf38      	it	cc
 800afc0:	250c      	movcc	r5, #12
 800afc2:	2d00      	cmp	r5, #0
 800afc4:	4606      	mov	r6, r0
 800afc6:	db01      	blt.n	800afcc <_malloc_r+0x1c>
 800afc8:	42a9      	cmp	r1, r5
 800afca:	d904      	bls.n	800afd6 <_malloc_r+0x26>
 800afcc:	230c      	movs	r3, #12
 800afce:	6033      	str	r3, [r6, #0]
 800afd0:	2000      	movs	r0, #0
 800afd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b0ac <_malloc_r+0xfc>
 800afda:	f000 f869 	bl	800b0b0 <__malloc_lock>
 800afde:	f8d8 3000 	ldr.w	r3, [r8]
 800afe2:	461c      	mov	r4, r3
 800afe4:	bb44      	cbnz	r4, 800b038 <_malloc_r+0x88>
 800afe6:	4629      	mov	r1, r5
 800afe8:	4630      	mov	r0, r6
 800afea:	f7ff ffbf 	bl	800af6c <sbrk_aligned>
 800afee:	1c43      	adds	r3, r0, #1
 800aff0:	4604      	mov	r4, r0
 800aff2:	d158      	bne.n	800b0a6 <_malloc_r+0xf6>
 800aff4:	f8d8 4000 	ldr.w	r4, [r8]
 800aff8:	4627      	mov	r7, r4
 800affa:	2f00      	cmp	r7, #0
 800affc:	d143      	bne.n	800b086 <_malloc_r+0xd6>
 800affe:	2c00      	cmp	r4, #0
 800b000:	d04b      	beq.n	800b09a <_malloc_r+0xea>
 800b002:	6823      	ldr	r3, [r4, #0]
 800b004:	4639      	mov	r1, r7
 800b006:	4630      	mov	r0, r6
 800b008:	eb04 0903 	add.w	r9, r4, r3
 800b00c:	f000 fb5c 	bl	800b6c8 <_sbrk_r>
 800b010:	4581      	cmp	r9, r0
 800b012:	d142      	bne.n	800b09a <_malloc_r+0xea>
 800b014:	6821      	ldr	r1, [r4, #0]
 800b016:	1a6d      	subs	r5, r5, r1
 800b018:	4629      	mov	r1, r5
 800b01a:	4630      	mov	r0, r6
 800b01c:	f7ff ffa6 	bl	800af6c <sbrk_aligned>
 800b020:	3001      	adds	r0, #1
 800b022:	d03a      	beq.n	800b09a <_malloc_r+0xea>
 800b024:	6823      	ldr	r3, [r4, #0]
 800b026:	442b      	add	r3, r5
 800b028:	6023      	str	r3, [r4, #0]
 800b02a:	f8d8 3000 	ldr.w	r3, [r8]
 800b02e:	685a      	ldr	r2, [r3, #4]
 800b030:	bb62      	cbnz	r2, 800b08c <_malloc_r+0xdc>
 800b032:	f8c8 7000 	str.w	r7, [r8]
 800b036:	e00f      	b.n	800b058 <_malloc_r+0xa8>
 800b038:	6822      	ldr	r2, [r4, #0]
 800b03a:	1b52      	subs	r2, r2, r5
 800b03c:	d420      	bmi.n	800b080 <_malloc_r+0xd0>
 800b03e:	2a0b      	cmp	r2, #11
 800b040:	d917      	bls.n	800b072 <_malloc_r+0xc2>
 800b042:	1961      	adds	r1, r4, r5
 800b044:	42a3      	cmp	r3, r4
 800b046:	6025      	str	r5, [r4, #0]
 800b048:	bf18      	it	ne
 800b04a:	6059      	strne	r1, [r3, #4]
 800b04c:	6863      	ldr	r3, [r4, #4]
 800b04e:	bf08      	it	eq
 800b050:	f8c8 1000 	streq.w	r1, [r8]
 800b054:	5162      	str	r2, [r4, r5]
 800b056:	604b      	str	r3, [r1, #4]
 800b058:	4630      	mov	r0, r6
 800b05a:	f000 f82f 	bl	800b0bc <__malloc_unlock>
 800b05e:	f104 000b 	add.w	r0, r4, #11
 800b062:	1d23      	adds	r3, r4, #4
 800b064:	f020 0007 	bic.w	r0, r0, #7
 800b068:	1ac2      	subs	r2, r0, r3
 800b06a:	bf1c      	itt	ne
 800b06c:	1a1b      	subne	r3, r3, r0
 800b06e:	50a3      	strne	r3, [r4, r2]
 800b070:	e7af      	b.n	800afd2 <_malloc_r+0x22>
 800b072:	6862      	ldr	r2, [r4, #4]
 800b074:	42a3      	cmp	r3, r4
 800b076:	bf0c      	ite	eq
 800b078:	f8c8 2000 	streq.w	r2, [r8]
 800b07c:	605a      	strne	r2, [r3, #4]
 800b07e:	e7eb      	b.n	800b058 <_malloc_r+0xa8>
 800b080:	4623      	mov	r3, r4
 800b082:	6864      	ldr	r4, [r4, #4]
 800b084:	e7ae      	b.n	800afe4 <_malloc_r+0x34>
 800b086:	463c      	mov	r4, r7
 800b088:	687f      	ldr	r7, [r7, #4]
 800b08a:	e7b6      	b.n	800affa <_malloc_r+0x4a>
 800b08c:	461a      	mov	r2, r3
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	42a3      	cmp	r3, r4
 800b092:	d1fb      	bne.n	800b08c <_malloc_r+0xdc>
 800b094:	2300      	movs	r3, #0
 800b096:	6053      	str	r3, [r2, #4]
 800b098:	e7de      	b.n	800b058 <_malloc_r+0xa8>
 800b09a:	230c      	movs	r3, #12
 800b09c:	6033      	str	r3, [r6, #0]
 800b09e:	4630      	mov	r0, r6
 800b0a0:	f000 f80c 	bl	800b0bc <__malloc_unlock>
 800b0a4:	e794      	b.n	800afd0 <_malloc_r+0x20>
 800b0a6:	6005      	str	r5, [r0, #0]
 800b0a8:	e7d6      	b.n	800b058 <_malloc_r+0xa8>
 800b0aa:	bf00      	nop
 800b0ac:	20002048 	.word	0x20002048

0800b0b0 <__malloc_lock>:
 800b0b0:	4801      	ldr	r0, [pc, #4]	@ (800b0b8 <__malloc_lock+0x8>)
 800b0b2:	f7ff bf01 	b.w	800aeb8 <__retarget_lock_acquire_recursive>
 800b0b6:	bf00      	nop
 800b0b8:	20002040 	.word	0x20002040

0800b0bc <__malloc_unlock>:
 800b0bc:	4801      	ldr	r0, [pc, #4]	@ (800b0c4 <__malloc_unlock+0x8>)
 800b0be:	f7ff befc 	b.w	800aeba <__retarget_lock_release_recursive>
 800b0c2:	bf00      	nop
 800b0c4:	20002040 	.word	0x20002040

0800b0c8 <__ssputs_r>:
 800b0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0cc:	688e      	ldr	r6, [r1, #8]
 800b0ce:	461f      	mov	r7, r3
 800b0d0:	42be      	cmp	r6, r7
 800b0d2:	680b      	ldr	r3, [r1, #0]
 800b0d4:	4682      	mov	sl, r0
 800b0d6:	460c      	mov	r4, r1
 800b0d8:	4690      	mov	r8, r2
 800b0da:	d82d      	bhi.n	800b138 <__ssputs_r+0x70>
 800b0dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b0e4:	d026      	beq.n	800b134 <__ssputs_r+0x6c>
 800b0e6:	6965      	ldr	r5, [r4, #20]
 800b0e8:	6909      	ldr	r1, [r1, #16]
 800b0ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0ee:	eba3 0901 	sub.w	r9, r3, r1
 800b0f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b0f6:	1c7b      	adds	r3, r7, #1
 800b0f8:	444b      	add	r3, r9
 800b0fa:	106d      	asrs	r5, r5, #1
 800b0fc:	429d      	cmp	r5, r3
 800b0fe:	bf38      	it	cc
 800b100:	461d      	movcc	r5, r3
 800b102:	0553      	lsls	r3, r2, #21
 800b104:	d527      	bpl.n	800b156 <__ssputs_r+0x8e>
 800b106:	4629      	mov	r1, r5
 800b108:	f7ff ff52 	bl	800afb0 <_malloc_r>
 800b10c:	4606      	mov	r6, r0
 800b10e:	b360      	cbz	r0, 800b16a <__ssputs_r+0xa2>
 800b110:	6921      	ldr	r1, [r4, #16]
 800b112:	464a      	mov	r2, r9
 800b114:	f7ff fed2 	bl	800aebc <memcpy>
 800b118:	89a3      	ldrh	r3, [r4, #12]
 800b11a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b11e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b122:	81a3      	strh	r3, [r4, #12]
 800b124:	6126      	str	r6, [r4, #16]
 800b126:	6165      	str	r5, [r4, #20]
 800b128:	444e      	add	r6, r9
 800b12a:	eba5 0509 	sub.w	r5, r5, r9
 800b12e:	6026      	str	r6, [r4, #0]
 800b130:	60a5      	str	r5, [r4, #8]
 800b132:	463e      	mov	r6, r7
 800b134:	42be      	cmp	r6, r7
 800b136:	d900      	bls.n	800b13a <__ssputs_r+0x72>
 800b138:	463e      	mov	r6, r7
 800b13a:	6820      	ldr	r0, [r4, #0]
 800b13c:	4632      	mov	r2, r6
 800b13e:	4641      	mov	r1, r8
 800b140:	f000 faa8 	bl	800b694 <memmove>
 800b144:	68a3      	ldr	r3, [r4, #8]
 800b146:	1b9b      	subs	r3, r3, r6
 800b148:	60a3      	str	r3, [r4, #8]
 800b14a:	6823      	ldr	r3, [r4, #0]
 800b14c:	4433      	add	r3, r6
 800b14e:	6023      	str	r3, [r4, #0]
 800b150:	2000      	movs	r0, #0
 800b152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b156:	462a      	mov	r2, r5
 800b158:	f000 fac6 	bl	800b6e8 <_realloc_r>
 800b15c:	4606      	mov	r6, r0
 800b15e:	2800      	cmp	r0, #0
 800b160:	d1e0      	bne.n	800b124 <__ssputs_r+0x5c>
 800b162:	6921      	ldr	r1, [r4, #16]
 800b164:	4650      	mov	r0, sl
 800b166:	f7ff feb7 	bl	800aed8 <_free_r>
 800b16a:	230c      	movs	r3, #12
 800b16c:	f8ca 3000 	str.w	r3, [sl]
 800b170:	89a3      	ldrh	r3, [r4, #12]
 800b172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b176:	81a3      	strh	r3, [r4, #12]
 800b178:	f04f 30ff 	mov.w	r0, #4294967295
 800b17c:	e7e9      	b.n	800b152 <__ssputs_r+0x8a>
	...

0800b180 <_svfiprintf_r>:
 800b180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b184:	4698      	mov	r8, r3
 800b186:	898b      	ldrh	r3, [r1, #12]
 800b188:	061b      	lsls	r3, r3, #24
 800b18a:	b09d      	sub	sp, #116	@ 0x74
 800b18c:	4607      	mov	r7, r0
 800b18e:	460d      	mov	r5, r1
 800b190:	4614      	mov	r4, r2
 800b192:	d510      	bpl.n	800b1b6 <_svfiprintf_r+0x36>
 800b194:	690b      	ldr	r3, [r1, #16]
 800b196:	b973      	cbnz	r3, 800b1b6 <_svfiprintf_r+0x36>
 800b198:	2140      	movs	r1, #64	@ 0x40
 800b19a:	f7ff ff09 	bl	800afb0 <_malloc_r>
 800b19e:	6028      	str	r0, [r5, #0]
 800b1a0:	6128      	str	r0, [r5, #16]
 800b1a2:	b930      	cbnz	r0, 800b1b2 <_svfiprintf_r+0x32>
 800b1a4:	230c      	movs	r3, #12
 800b1a6:	603b      	str	r3, [r7, #0]
 800b1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ac:	b01d      	add	sp, #116	@ 0x74
 800b1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b2:	2340      	movs	r3, #64	@ 0x40
 800b1b4:	616b      	str	r3, [r5, #20]
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1ba:	2320      	movs	r3, #32
 800b1bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1c4:	2330      	movs	r3, #48	@ 0x30
 800b1c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b364 <_svfiprintf_r+0x1e4>
 800b1ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1ce:	f04f 0901 	mov.w	r9, #1
 800b1d2:	4623      	mov	r3, r4
 800b1d4:	469a      	mov	sl, r3
 800b1d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1da:	b10a      	cbz	r2, 800b1e0 <_svfiprintf_r+0x60>
 800b1dc:	2a25      	cmp	r2, #37	@ 0x25
 800b1de:	d1f9      	bne.n	800b1d4 <_svfiprintf_r+0x54>
 800b1e0:	ebba 0b04 	subs.w	fp, sl, r4
 800b1e4:	d00b      	beq.n	800b1fe <_svfiprintf_r+0x7e>
 800b1e6:	465b      	mov	r3, fp
 800b1e8:	4622      	mov	r2, r4
 800b1ea:	4629      	mov	r1, r5
 800b1ec:	4638      	mov	r0, r7
 800b1ee:	f7ff ff6b 	bl	800b0c8 <__ssputs_r>
 800b1f2:	3001      	adds	r0, #1
 800b1f4:	f000 80a7 	beq.w	800b346 <_svfiprintf_r+0x1c6>
 800b1f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1fa:	445a      	add	r2, fp
 800b1fc:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1fe:	f89a 3000 	ldrb.w	r3, [sl]
 800b202:	2b00      	cmp	r3, #0
 800b204:	f000 809f 	beq.w	800b346 <_svfiprintf_r+0x1c6>
 800b208:	2300      	movs	r3, #0
 800b20a:	f04f 32ff 	mov.w	r2, #4294967295
 800b20e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b212:	f10a 0a01 	add.w	sl, sl, #1
 800b216:	9304      	str	r3, [sp, #16]
 800b218:	9307      	str	r3, [sp, #28]
 800b21a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b21e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b220:	4654      	mov	r4, sl
 800b222:	2205      	movs	r2, #5
 800b224:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b228:	484e      	ldr	r0, [pc, #312]	@ (800b364 <_svfiprintf_r+0x1e4>)
 800b22a:	f7f4 ffe9 	bl	8000200 <memchr>
 800b22e:	9a04      	ldr	r2, [sp, #16]
 800b230:	b9d8      	cbnz	r0, 800b26a <_svfiprintf_r+0xea>
 800b232:	06d0      	lsls	r0, r2, #27
 800b234:	bf44      	itt	mi
 800b236:	2320      	movmi	r3, #32
 800b238:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b23c:	0711      	lsls	r1, r2, #28
 800b23e:	bf44      	itt	mi
 800b240:	232b      	movmi	r3, #43	@ 0x2b
 800b242:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b246:	f89a 3000 	ldrb.w	r3, [sl]
 800b24a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b24c:	d015      	beq.n	800b27a <_svfiprintf_r+0xfa>
 800b24e:	9a07      	ldr	r2, [sp, #28]
 800b250:	4654      	mov	r4, sl
 800b252:	2000      	movs	r0, #0
 800b254:	f04f 0c0a 	mov.w	ip, #10
 800b258:	4621      	mov	r1, r4
 800b25a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b25e:	3b30      	subs	r3, #48	@ 0x30
 800b260:	2b09      	cmp	r3, #9
 800b262:	d94b      	bls.n	800b2fc <_svfiprintf_r+0x17c>
 800b264:	b1b0      	cbz	r0, 800b294 <_svfiprintf_r+0x114>
 800b266:	9207      	str	r2, [sp, #28]
 800b268:	e014      	b.n	800b294 <_svfiprintf_r+0x114>
 800b26a:	eba0 0308 	sub.w	r3, r0, r8
 800b26e:	fa09 f303 	lsl.w	r3, r9, r3
 800b272:	4313      	orrs	r3, r2
 800b274:	9304      	str	r3, [sp, #16]
 800b276:	46a2      	mov	sl, r4
 800b278:	e7d2      	b.n	800b220 <_svfiprintf_r+0xa0>
 800b27a:	9b03      	ldr	r3, [sp, #12]
 800b27c:	1d19      	adds	r1, r3, #4
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	9103      	str	r1, [sp, #12]
 800b282:	2b00      	cmp	r3, #0
 800b284:	bfbb      	ittet	lt
 800b286:	425b      	neglt	r3, r3
 800b288:	f042 0202 	orrlt.w	r2, r2, #2
 800b28c:	9307      	strge	r3, [sp, #28]
 800b28e:	9307      	strlt	r3, [sp, #28]
 800b290:	bfb8      	it	lt
 800b292:	9204      	strlt	r2, [sp, #16]
 800b294:	7823      	ldrb	r3, [r4, #0]
 800b296:	2b2e      	cmp	r3, #46	@ 0x2e
 800b298:	d10a      	bne.n	800b2b0 <_svfiprintf_r+0x130>
 800b29a:	7863      	ldrb	r3, [r4, #1]
 800b29c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b29e:	d132      	bne.n	800b306 <_svfiprintf_r+0x186>
 800b2a0:	9b03      	ldr	r3, [sp, #12]
 800b2a2:	1d1a      	adds	r2, r3, #4
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	9203      	str	r2, [sp, #12]
 800b2a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2ac:	3402      	adds	r4, #2
 800b2ae:	9305      	str	r3, [sp, #20]
 800b2b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b374 <_svfiprintf_r+0x1f4>
 800b2b4:	7821      	ldrb	r1, [r4, #0]
 800b2b6:	2203      	movs	r2, #3
 800b2b8:	4650      	mov	r0, sl
 800b2ba:	f7f4 ffa1 	bl	8000200 <memchr>
 800b2be:	b138      	cbz	r0, 800b2d0 <_svfiprintf_r+0x150>
 800b2c0:	9b04      	ldr	r3, [sp, #16]
 800b2c2:	eba0 000a 	sub.w	r0, r0, sl
 800b2c6:	2240      	movs	r2, #64	@ 0x40
 800b2c8:	4082      	lsls	r2, r0
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	3401      	adds	r4, #1
 800b2ce:	9304      	str	r3, [sp, #16]
 800b2d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2d4:	4824      	ldr	r0, [pc, #144]	@ (800b368 <_svfiprintf_r+0x1e8>)
 800b2d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b2da:	2206      	movs	r2, #6
 800b2dc:	f7f4 ff90 	bl	8000200 <memchr>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	d036      	beq.n	800b352 <_svfiprintf_r+0x1d2>
 800b2e4:	4b21      	ldr	r3, [pc, #132]	@ (800b36c <_svfiprintf_r+0x1ec>)
 800b2e6:	bb1b      	cbnz	r3, 800b330 <_svfiprintf_r+0x1b0>
 800b2e8:	9b03      	ldr	r3, [sp, #12]
 800b2ea:	3307      	adds	r3, #7
 800b2ec:	f023 0307 	bic.w	r3, r3, #7
 800b2f0:	3308      	adds	r3, #8
 800b2f2:	9303      	str	r3, [sp, #12]
 800b2f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2f6:	4433      	add	r3, r6
 800b2f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2fa:	e76a      	b.n	800b1d2 <_svfiprintf_r+0x52>
 800b2fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b300:	460c      	mov	r4, r1
 800b302:	2001      	movs	r0, #1
 800b304:	e7a8      	b.n	800b258 <_svfiprintf_r+0xd8>
 800b306:	2300      	movs	r3, #0
 800b308:	3401      	adds	r4, #1
 800b30a:	9305      	str	r3, [sp, #20]
 800b30c:	4619      	mov	r1, r3
 800b30e:	f04f 0c0a 	mov.w	ip, #10
 800b312:	4620      	mov	r0, r4
 800b314:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b318:	3a30      	subs	r2, #48	@ 0x30
 800b31a:	2a09      	cmp	r2, #9
 800b31c:	d903      	bls.n	800b326 <_svfiprintf_r+0x1a6>
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d0c6      	beq.n	800b2b0 <_svfiprintf_r+0x130>
 800b322:	9105      	str	r1, [sp, #20]
 800b324:	e7c4      	b.n	800b2b0 <_svfiprintf_r+0x130>
 800b326:	fb0c 2101 	mla	r1, ip, r1, r2
 800b32a:	4604      	mov	r4, r0
 800b32c:	2301      	movs	r3, #1
 800b32e:	e7f0      	b.n	800b312 <_svfiprintf_r+0x192>
 800b330:	ab03      	add	r3, sp, #12
 800b332:	9300      	str	r3, [sp, #0]
 800b334:	462a      	mov	r2, r5
 800b336:	4b0e      	ldr	r3, [pc, #56]	@ (800b370 <_svfiprintf_r+0x1f0>)
 800b338:	a904      	add	r1, sp, #16
 800b33a:	4638      	mov	r0, r7
 800b33c:	f3af 8000 	nop.w
 800b340:	1c42      	adds	r2, r0, #1
 800b342:	4606      	mov	r6, r0
 800b344:	d1d6      	bne.n	800b2f4 <_svfiprintf_r+0x174>
 800b346:	89ab      	ldrh	r3, [r5, #12]
 800b348:	065b      	lsls	r3, r3, #25
 800b34a:	f53f af2d 	bmi.w	800b1a8 <_svfiprintf_r+0x28>
 800b34e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b350:	e72c      	b.n	800b1ac <_svfiprintf_r+0x2c>
 800b352:	ab03      	add	r3, sp, #12
 800b354:	9300      	str	r3, [sp, #0]
 800b356:	462a      	mov	r2, r5
 800b358:	4b05      	ldr	r3, [pc, #20]	@ (800b370 <_svfiprintf_r+0x1f0>)
 800b35a:	a904      	add	r1, sp, #16
 800b35c:	4638      	mov	r0, r7
 800b35e:	f000 f879 	bl	800b454 <_printf_i>
 800b362:	e7ed      	b.n	800b340 <_svfiprintf_r+0x1c0>
 800b364:	0800b90c 	.word	0x0800b90c
 800b368:	0800b916 	.word	0x0800b916
 800b36c:	00000000 	.word	0x00000000
 800b370:	0800b0c9 	.word	0x0800b0c9
 800b374:	0800b912 	.word	0x0800b912

0800b378 <_printf_common>:
 800b378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b37c:	4616      	mov	r6, r2
 800b37e:	4698      	mov	r8, r3
 800b380:	688a      	ldr	r2, [r1, #8]
 800b382:	690b      	ldr	r3, [r1, #16]
 800b384:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b388:	4293      	cmp	r3, r2
 800b38a:	bfb8      	it	lt
 800b38c:	4613      	movlt	r3, r2
 800b38e:	6033      	str	r3, [r6, #0]
 800b390:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b394:	4607      	mov	r7, r0
 800b396:	460c      	mov	r4, r1
 800b398:	b10a      	cbz	r2, 800b39e <_printf_common+0x26>
 800b39a:	3301      	adds	r3, #1
 800b39c:	6033      	str	r3, [r6, #0]
 800b39e:	6823      	ldr	r3, [r4, #0]
 800b3a0:	0699      	lsls	r1, r3, #26
 800b3a2:	bf42      	ittt	mi
 800b3a4:	6833      	ldrmi	r3, [r6, #0]
 800b3a6:	3302      	addmi	r3, #2
 800b3a8:	6033      	strmi	r3, [r6, #0]
 800b3aa:	6825      	ldr	r5, [r4, #0]
 800b3ac:	f015 0506 	ands.w	r5, r5, #6
 800b3b0:	d106      	bne.n	800b3c0 <_printf_common+0x48>
 800b3b2:	f104 0a19 	add.w	sl, r4, #25
 800b3b6:	68e3      	ldr	r3, [r4, #12]
 800b3b8:	6832      	ldr	r2, [r6, #0]
 800b3ba:	1a9b      	subs	r3, r3, r2
 800b3bc:	42ab      	cmp	r3, r5
 800b3be:	dc26      	bgt.n	800b40e <_printf_common+0x96>
 800b3c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b3c4:	6822      	ldr	r2, [r4, #0]
 800b3c6:	3b00      	subs	r3, #0
 800b3c8:	bf18      	it	ne
 800b3ca:	2301      	movne	r3, #1
 800b3cc:	0692      	lsls	r2, r2, #26
 800b3ce:	d42b      	bmi.n	800b428 <_printf_common+0xb0>
 800b3d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b3d4:	4641      	mov	r1, r8
 800b3d6:	4638      	mov	r0, r7
 800b3d8:	47c8      	blx	r9
 800b3da:	3001      	adds	r0, #1
 800b3dc:	d01e      	beq.n	800b41c <_printf_common+0xa4>
 800b3de:	6823      	ldr	r3, [r4, #0]
 800b3e0:	6922      	ldr	r2, [r4, #16]
 800b3e2:	f003 0306 	and.w	r3, r3, #6
 800b3e6:	2b04      	cmp	r3, #4
 800b3e8:	bf02      	ittt	eq
 800b3ea:	68e5      	ldreq	r5, [r4, #12]
 800b3ec:	6833      	ldreq	r3, [r6, #0]
 800b3ee:	1aed      	subeq	r5, r5, r3
 800b3f0:	68a3      	ldr	r3, [r4, #8]
 800b3f2:	bf0c      	ite	eq
 800b3f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3f8:	2500      	movne	r5, #0
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	bfc4      	itt	gt
 800b3fe:	1a9b      	subgt	r3, r3, r2
 800b400:	18ed      	addgt	r5, r5, r3
 800b402:	2600      	movs	r6, #0
 800b404:	341a      	adds	r4, #26
 800b406:	42b5      	cmp	r5, r6
 800b408:	d11a      	bne.n	800b440 <_printf_common+0xc8>
 800b40a:	2000      	movs	r0, #0
 800b40c:	e008      	b.n	800b420 <_printf_common+0xa8>
 800b40e:	2301      	movs	r3, #1
 800b410:	4652      	mov	r2, sl
 800b412:	4641      	mov	r1, r8
 800b414:	4638      	mov	r0, r7
 800b416:	47c8      	blx	r9
 800b418:	3001      	adds	r0, #1
 800b41a:	d103      	bne.n	800b424 <_printf_common+0xac>
 800b41c:	f04f 30ff 	mov.w	r0, #4294967295
 800b420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b424:	3501      	adds	r5, #1
 800b426:	e7c6      	b.n	800b3b6 <_printf_common+0x3e>
 800b428:	18e1      	adds	r1, r4, r3
 800b42a:	1c5a      	adds	r2, r3, #1
 800b42c:	2030      	movs	r0, #48	@ 0x30
 800b42e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b432:	4422      	add	r2, r4
 800b434:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b438:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b43c:	3302      	adds	r3, #2
 800b43e:	e7c7      	b.n	800b3d0 <_printf_common+0x58>
 800b440:	2301      	movs	r3, #1
 800b442:	4622      	mov	r2, r4
 800b444:	4641      	mov	r1, r8
 800b446:	4638      	mov	r0, r7
 800b448:	47c8      	blx	r9
 800b44a:	3001      	adds	r0, #1
 800b44c:	d0e6      	beq.n	800b41c <_printf_common+0xa4>
 800b44e:	3601      	adds	r6, #1
 800b450:	e7d9      	b.n	800b406 <_printf_common+0x8e>
	...

0800b454 <_printf_i>:
 800b454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b458:	7e0f      	ldrb	r7, [r1, #24]
 800b45a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b45c:	2f78      	cmp	r7, #120	@ 0x78
 800b45e:	4691      	mov	r9, r2
 800b460:	4680      	mov	r8, r0
 800b462:	460c      	mov	r4, r1
 800b464:	469a      	mov	sl, r3
 800b466:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b46a:	d807      	bhi.n	800b47c <_printf_i+0x28>
 800b46c:	2f62      	cmp	r7, #98	@ 0x62
 800b46e:	d80a      	bhi.n	800b486 <_printf_i+0x32>
 800b470:	2f00      	cmp	r7, #0
 800b472:	f000 80d2 	beq.w	800b61a <_printf_i+0x1c6>
 800b476:	2f58      	cmp	r7, #88	@ 0x58
 800b478:	f000 80b9 	beq.w	800b5ee <_printf_i+0x19a>
 800b47c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b480:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b484:	e03a      	b.n	800b4fc <_printf_i+0xa8>
 800b486:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b48a:	2b15      	cmp	r3, #21
 800b48c:	d8f6      	bhi.n	800b47c <_printf_i+0x28>
 800b48e:	a101      	add	r1, pc, #4	@ (adr r1, 800b494 <_printf_i+0x40>)
 800b490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b494:	0800b4ed 	.word	0x0800b4ed
 800b498:	0800b501 	.word	0x0800b501
 800b49c:	0800b47d 	.word	0x0800b47d
 800b4a0:	0800b47d 	.word	0x0800b47d
 800b4a4:	0800b47d 	.word	0x0800b47d
 800b4a8:	0800b47d 	.word	0x0800b47d
 800b4ac:	0800b501 	.word	0x0800b501
 800b4b0:	0800b47d 	.word	0x0800b47d
 800b4b4:	0800b47d 	.word	0x0800b47d
 800b4b8:	0800b47d 	.word	0x0800b47d
 800b4bc:	0800b47d 	.word	0x0800b47d
 800b4c0:	0800b601 	.word	0x0800b601
 800b4c4:	0800b52b 	.word	0x0800b52b
 800b4c8:	0800b5bb 	.word	0x0800b5bb
 800b4cc:	0800b47d 	.word	0x0800b47d
 800b4d0:	0800b47d 	.word	0x0800b47d
 800b4d4:	0800b623 	.word	0x0800b623
 800b4d8:	0800b47d 	.word	0x0800b47d
 800b4dc:	0800b52b 	.word	0x0800b52b
 800b4e0:	0800b47d 	.word	0x0800b47d
 800b4e4:	0800b47d 	.word	0x0800b47d
 800b4e8:	0800b5c3 	.word	0x0800b5c3
 800b4ec:	6833      	ldr	r3, [r6, #0]
 800b4ee:	1d1a      	adds	r2, r3, #4
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	6032      	str	r2, [r6, #0]
 800b4f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	e09d      	b.n	800b63c <_printf_i+0x1e8>
 800b500:	6833      	ldr	r3, [r6, #0]
 800b502:	6820      	ldr	r0, [r4, #0]
 800b504:	1d19      	adds	r1, r3, #4
 800b506:	6031      	str	r1, [r6, #0]
 800b508:	0606      	lsls	r6, r0, #24
 800b50a:	d501      	bpl.n	800b510 <_printf_i+0xbc>
 800b50c:	681d      	ldr	r5, [r3, #0]
 800b50e:	e003      	b.n	800b518 <_printf_i+0xc4>
 800b510:	0645      	lsls	r5, r0, #25
 800b512:	d5fb      	bpl.n	800b50c <_printf_i+0xb8>
 800b514:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b518:	2d00      	cmp	r5, #0
 800b51a:	da03      	bge.n	800b524 <_printf_i+0xd0>
 800b51c:	232d      	movs	r3, #45	@ 0x2d
 800b51e:	426d      	negs	r5, r5
 800b520:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b524:	4859      	ldr	r0, [pc, #356]	@ (800b68c <_printf_i+0x238>)
 800b526:	230a      	movs	r3, #10
 800b528:	e011      	b.n	800b54e <_printf_i+0xfa>
 800b52a:	6821      	ldr	r1, [r4, #0]
 800b52c:	6833      	ldr	r3, [r6, #0]
 800b52e:	0608      	lsls	r0, r1, #24
 800b530:	f853 5b04 	ldr.w	r5, [r3], #4
 800b534:	d402      	bmi.n	800b53c <_printf_i+0xe8>
 800b536:	0649      	lsls	r1, r1, #25
 800b538:	bf48      	it	mi
 800b53a:	b2ad      	uxthmi	r5, r5
 800b53c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b53e:	4853      	ldr	r0, [pc, #332]	@ (800b68c <_printf_i+0x238>)
 800b540:	6033      	str	r3, [r6, #0]
 800b542:	bf14      	ite	ne
 800b544:	230a      	movne	r3, #10
 800b546:	2308      	moveq	r3, #8
 800b548:	2100      	movs	r1, #0
 800b54a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b54e:	6866      	ldr	r6, [r4, #4]
 800b550:	60a6      	str	r6, [r4, #8]
 800b552:	2e00      	cmp	r6, #0
 800b554:	bfa2      	ittt	ge
 800b556:	6821      	ldrge	r1, [r4, #0]
 800b558:	f021 0104 	bicge.w	r1, r1, #4
 800b55c:	6021      	strge	r1, [r4, #0]
 800b55e:	b90d      	cbnz	r5, 800b564 <_printf_i+0x110>
 800b560:	2e00      	cmp	r6, #0
 800b562:	d04b      	beq.n	800b5fc <_printf_i+0x1a8>
 800b564:	4616      	mov	r6, r2
 800b566:	fbb5 f1f3 	udiv	r1, r5, r3
 800b56a:	fb03 5711 	mls	r7, r3, r1, r5
 800b56e:	5dc7      	ldrb	r7, [r0, r7]
 800b570:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b574:	462f      	mov	r7, r5
 800b576:	42bb      	cmp	r3, r7
 800b578:	460d      	mov	r5, r1
 800b57a:	d9f4      	bls.n	800b566 <_printf_i+0x112>
 800b57c:	2b08      	cmp	r3, #8
 800b57e:	d10b      	bne.n	800b598 <_printf_i+0x144>
 800b580:	6823      	ldr	r3, [r4, #0]
 800b582:	07df      	lsls	r7, r3, #31
 800b584:	d508      	bpl.n	800b598 <_printf_i+0x144>
 800b586:	6923      	ldr	r3, [r4, #16]
 800b588:	6861      	ldr	r1, [r4, #4]
 800b58a:	4299      	cmp	r1, r3
 800b58c:	bfde      	ittt	le
 800b58e:	2330      	movle	r3, #48	@ 0x30
 800b590:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b594:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b598:	1b92      	subs	r2, r2, r6
 800b59a:	6122      	str	r2, [r4, #16]
 800b59c:	f8cd a000 	str.w	sl, [sp]
 800b5a0:	464b      	mov	r3, r9
 800b5a2:	aa03      	add	r2, sp, #12
 800b5a4:	4621      	mov	r1, r4
 800b5a6:	4640      	mov	r0, r8
 800b5a8:	f7ff fee6 	bl	800b378 <_printf_common>
 800b5ac:	3001      	adds	r0, #1
 800b5ae:	d14a      	bne.n	800b646 <_printf_i+0x1f2>
 800b5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b4:	b004      	add	sp, #16
 800b5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ba:	6823      	ldr	r3, [r4, #0]
 800b5bc:	f043 0320 	orr.w	r3, r3, #32
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	4833      	ldr	r0, [pc, #204]	@ (800b690 <_printf_i+0x23c>)
 800b5c4:	2778      	movs	r7, #120	@ 0x78
 800b5c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b5ca:	6823      	ldr	r3, [r4, #0]
 800b5cc:	6831      	ldr	r1, [r6, #0]
 800b5ce:	061f      	lsls	r7, r3, #24
 800b5d0:	f851 5b04 	ldr.w	r5, [r1], #4
 800b5d4:	d402      	bmi.n	800b5dc <_printf_i+0x188>
 800b5d6:	065f      	lsls	r7, r3, #25
 800b5d8:	bf48      	it	mi
 800b5da:	b2ad      	uxthmi	r5, r5
 800b5dc:	6031      	str	r1, [r6, #0]
 800b5de:	07d9      	lsls	r1, r3, #31
 800b5e0:	bf44      	itt	mi
 800b5e2:	f043 0320 	orrmi.w	r3, r3, #32
 800b5e6:	6023      	strmi	r3, [r4, #0]
 800b5e8:	b11d      	cbz	r5, 800b5f2 <_printf_i+0x19e>
 800b5ea:	2310      	movs	r3, #16
 800b5ec:	e7ac      	b.n	800b548 <_printf_i+0xf4>
 800b5ee:	4827      	ldr	r0, [pc, #156]	@ (800b68c <_printf_i+0x238>)
 800b5f0:	e7e9      	b.n	800b5c6 <_printf_i+0x172>
 800b5f2:	6823      	ldr	r3, [r4, #0]
 800b5f4:	f023 0320 	bic.w	r3, r3, #32
 800b5f8:	6023      	str	r3, [r4, #0]
 800b5fa:	e7f6      	b.n	800b5ea <_printf_i+0x196>
 800b5fc:	4616      	mov	r6, r2
 800b5fe:	e7bd      	b.n	800b57c <_printf_i+0x128>
 800b600:	6833      	ldr	r3, [r6, #0]
 800b602:	6825      	ldr	r5, [r4, #0]
 800b604:	6961      	ldr	r1, [r4, #20]
 800b606:	1d18      	adds	r0, r3, #4
 800b608:	6030      	str	r0, [r6, #0]
 800b60a:	062e      	lsls	r6, r5, #24
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	d501      	bpl.n	800b614 <_printf_i+0x1c0>
 800b610:	6019      	str	r1, [r3, #0]
 800b612:	e002      	b.n	800b61a <_printf_i+0x1c6>
 800b614:	0668      	lsls	r0, r5, #25
 800b616:	d5fb      	bpl.n	800b610 <_printf_i+0x1bc>
 800b618:	8019      	strh	r1, [r3, #0]
 800b61a:	2300      	movs	r3, #0
 800b61c:	6123      	str	r3, [r4, #16]
 800b61e:	4616      	mov	r6, r2
 800b620:	e7bc      	b.n	800b59c <_printf_i+0x148>
 800b622:	6833      	ldr	r3, [r6, #0]
 800b624:	1d1a      	adds	r2, r3, #4
 800b626:	6032      	str	r2, [r6, #0]
 800b628:	681e      	ldr	r6, [r3, #0]
 800b62a:	6862      	ldr	r2, [r4, #4]
 800b62c:	2100      	movs	r1, #0
 800b62e:	4630      	mov	r0, r6
 800b630:	f7f4 fde6 	bl	8000200 <memchr>
 800b634:	b108      	cbz	r0, 800b63a <_printf_i+0x1e6>
 800b636:	1b80      	subs	r0, r0, r6
 800b638:	6060      	str	r0, [r4, #4]
 800b63a:	6863      	ldr	r3, [r4, #4]
 800b63c:	6123      	str	r3, [r4, #16]
 800b63e:	2300      	movs	r3, #0
 800b640:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b644:	e7aa      	b.n	800b59c <_printf_i+0x148>
 800b646:	6923      	ldr	r3, [r4, #16]
 800b648:	4632      	mov	r2, r6
 800b64a:	4649      	mov	r1, r9
 800b64c:	4640      	mov	r0, r8
 800b64e:	47d0      	blx	sl
 800b650:	3001      	adds	r0, #1
 800b652:	d0ad      	beq.n	800b5b0 <_printf_i+0x15c>
 800b654:	6823      	ldr	r3, [r4, #0]
 800b656:	079b      	lsls	r3, r3, #30
 800b658:	d413      	bmi.n	800b682 <_printf_i+0x22e>
 800b65a:	68e0      	ldr	r0, [r4, #12]
 800b65c:	9b03      	ldr	r3, [sp, #12]
 800b65e:	4298      	cmp	r0, r3
 800b660:	bfb8      	it	lt
 800b662:	4618      	movlt	r0, r3
 800b664:	e7a6      	b.n	800b5b4 <_printf_i+0x160>
 800b666:	2301      	movs	r3, #1
 800b668:	4632      	mov	r2, r6
 800b66a:	4649      	mov	r1, r9
 800b66c:	4640      	mov	r0, r8
 800b66e:	47d0      	blx	sl
 800b670:	3001      	adds	r0, #1
 800b672:	d09d      	beq.n	800b5b0 <_printf_i+0x15c>
 800b674:	3501      	adds	r5, #1
 800b676:	68e3      	ldr	r3, [r4, #12]
 800b678:	9903      	ldr	r1, [sp, #12]
 800b67a:	1a5b      	subs	r3, r3, r1
 800b67c:	42ab      	cmp	r3, r5
 800b67e:	dcf2      	bgt.n	800b666 <_printf_i+0x212>
 800b680:	e7eb      	b.n	800b65a <_printf_i+0x206>
 800b682:	2500      	movs	r5, #0
 800b684:	f104 0619 	add.w	r6, r4, #25
 800b688:	e7f5      	b.n	800b676 <_printf_i+0x222>
 800b68a:	bf00      	nop
 800b68c:	0800b91d 	.word	0x0800b91d
 800b690:	0800b92e 	.word	0x0800b92e

0800b694 <memmove>:
 800b694:	4288      	cmp	r0, r1
 800b696:	b510      	push	{r4, lr}
 800b698:	eb01 0402 	add.w	r4, r1, r2
 800b69c:	d902      	bls.n	800b6a4 <memmove+0x10>
 800b69e:	4284      	cmp	r4, r0
 800b6a0:	4623      	mov	r3, r4
 800b6a2:	d807      	bhi.n	800b6b4 <memmove+0x20>
 800b6a4:	1e43      	subs	r3, r0, #1
 800b6a6:	42a1      	cmp	r1, r4
 800b6a8:	d008      	beq.n	800b6bc <memmove+0x28>
 800b6aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6b2:	e7f8      	b.n	800b6a6 <memmove+0x12>
 800b6b4:	4402      	add	r2, r0
 800b6b6:	4601      	mov	r1, r0
 800b6b8:	428a      	cmp	r2, r1
 800b6ba:	d100      	bne.n	800b6be <memmove+0x2a>
 800b6bc:	bd10      	pop	{r4, pc}
 800b6be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6c6:	e7f7      	b.n	800b6b8 <memmove+0x24>

0800b6c8 <_sbrk_r>:
 800b6c8:	b538      	push	{r3, r4, r5, lr}
 800b6ca:	4d06      	ldr	r5, [pc, #24]	@ (800b6e4 <_sbrk_r+0x1c>)
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	4604      	mov	r4, r0
 800b6d0:	4608      	mov	r0, r1
 800b6d2:	602b      	str	r3, [r5, #0]
 800b6d4:	f7f6 f9ec 	bl	8001ab0 <_sbrk>
 800b6d8:	1c43      	adds	r3, r0, #1
 800b6da:	d102      	bne.n	800b6e2 <_sbrk_r+0x1a>
 800b6dc:	682b      	ldr	r3, [r5, #0]
 800b6de:	b103      	cbz	r3, 800b6e2 <_sbrk_r+0x1a>
 800b6e0:	6023      	str	r3, [r4, #0]
 800b6e2:	bd38      	pop	{r3, r4, r5, pc}
 800b6e4:	2000203c 	.word	0x2000203c

0800b6e8 <_realloc_r>:
 800b6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ec:	4680      	mov	r8, r0
 800b6ee:	4615      	mov	r5, r2
 800b6f0:	460c      	mov	r4, r1
 800b6f2:	b921      	cbnz	r1, 800b6fe <_realloc_r+0x16>
 800b6f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f8:	4611      	mov	r1, r2
 800b6fa:	f7ff bc59 	b.w	800afb0 <_malloc_r>
 800b6fe:	b92a      	cbnz	r2, 800b70c <_realloc_r+0x24>
 800b700:	f7ff fbea 	bl	800aed8 <_free_r>
 800b704:	2400      	movs	r4, #0
 800b706:	4620      	mov	r0, r4
 800b708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b70c:	f000 f81a 	bl	800b744 <_malloc_usable_size_r>
 800b710:	4285      	cmp	r5, r0
 800b712:	4606      	mov	r6, r0
 800b714:	d802      	bhi.n	800b71c <_realloc_r+0x34>
 800b716:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b71a:	d8f4      	bhi.n	800b706 <_realloc_r+0x1e>
 800b71c:	4629      	mov	r1, r5
 800b71e:	4640      	mov	r0, r8
 800b720:	f7ff fc46 	bl	800afb0 <_malloc_r>
 800b724:	4607      	mov	r7, r0
 800b726:	2800      	cmp	r0, #0
 800b728:	d0ec      	beq.n	800b704 <_realloc_r+0x1c>
 800b72a:	42b5      	cmp	r5, r6
 800b72c:	462a      	mov	r2, r5
 800b72e:	4621      	mov	r1, r4
 800b730:	bf28      	it	cs
 800b732:	4632      	movcs	r2, r6
 800b734:	f7ff fbc2 	bl	800aebc <memcpy>
 800b738:	4621      	mov	r1, r4
 800b73a:	4640      	mov	r0, r8
 800b73c:	f7ff fbcc 	bl	800aed8 <_free_r>
 800b740:	463c      	mov	r4, r7
 800b742:	e7e0      	b.n	800b706 <_realloc_r+0x1e>

0800b744 <_malloc_usable_size_r>:
 800b744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b748:	1f18      	subs	r0, r3, #4
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	bfbc      	itt	lt
 800b74e:	580b      	ldrlt	r3, [r1, r0]
 800b750:	18c0      	addlt	r0, r0, r3
 800b752:	4770      	bx	lr

0800b754 <_init>:
 800b754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b756:	bf00      	nop
 800b758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b75a:	bc08      	pop	{r3}
 800b75c:	469e      	mov	lr, r3
 800b75e:	4770      	bx	lr

0800b760 <_fini>:
 800b760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b762:	bf00      	nop
 800b764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b766:	bc08      	pop	{r3}
 800b768:	469e      	mov	lr, r3
 800b76a:	4770      	bx	lr
