
DEMO_FREERTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac5c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  0800ae1c  0800ae1c  0000be1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afb8  0800afb8  0000c064  2**0
                  CONTENTS
  4 .ARM          00000008  0800afb8  0800afb8  0000bfb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afc0  0800afc0  0000c064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afc0  0800afc0  0000bfc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afc4  0800afc4  0000bfc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800afc8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fe4  20000064  0800b02c  0000c064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002048  0800b02c  0000d048  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a569  00000000  00000000  0000c094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ad5  00000000  00000000  000365fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002380  00000000  00000000  0003b0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001bc4  00000000  00000000  0003d458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000056a5  00000000  00000000  0003f01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000291a3  00000000  00000000  000446c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00132131  00000000  00000000  0006d864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019f995  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009e84  00000000  00000000  0019f9d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  001a985c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000064 	.word	0x20000064
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800ae04 	.word	0x0800ae04

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000068 	.word	0x20000068
 80001fc:	0800ae04 	.word	0x0800ae04

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f001 fa83 	bl	8001a9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f868 	bl	800066c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800059c:	f000 f8c8 	bl	8000730 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 fbe0 	bl	8000d64 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005a4:	f000 f8f4 	bl	8000790 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80005a8:	f000 f956 	bl	8000858 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 80005ac:	f000 f98c 	bl	80008c8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005b0:	f000 f9ca 	bl	8000948 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80005b4:	f000 fa08 	bl	80009c8 <MX_OCTOSPI1_Init>
  MX_SPI3_Init();
 80005b8:	f000 fa5c 	bl	8000a74 <MX_SPI3_Init>
  MX_UART4_Init();
 80005bc:	f000 fa98 	bl	8000af0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80005c0:	f000 fae2 	bl	8000b88 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005c4:	f000 fb2c 	bl	8000c20 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005c8:	f000 fb78 	bl	8000cbc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80005cc:	f000 fbc2 	bl	8000d54 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005d0:	f006 faf4 	bl	8006bbc <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 0, &myBinarySem01_attributes);
 80005d4:	4a18      	ldr	r2, [pc, #96]	@ (8000638 <main+0xa8>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	2001      	movs	r0, #1
 80005da:	f006 fbe6 	bl	8006daa <osSemaphoreNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a16      	ldr	r2, [pc, #88]	@ (800063c <main+0xac>)
 80005e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	osSemaphoreRelease(myBinarySem01Handle);
 80005e4:	4b15      	ldr	r3, [pc, #84]	@ (800063c <main+0xac>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f006 fcb9 	bl	8006f60 <osSemaphoreRelease>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myDataQueue */
  myDataQueueHandle = osMessageQueueNew (2, sizeof(uint16_t), &myDataQueue_attributes);
 80005ee:	4a14      	ldr	r2, [pc, #80]	@ (8000640 <main+0xb0>)
 80005f0:	2102      	movs	r1, #2
 80005f2:	2002      	movs	r0, #2
 80005f4:	f006 fcf8 	bl	8006fe8 <osMessageQueueNew>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a12      	ldr	r2, [pc, #72]	@ (8000644 <main+0xb4>)
 80005fc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myLedTask */
  myLedTaskHandle = osThreadNew(StartMyLedTask, NULL, &myLedTask_attributes);
 80005fe:	4a12      	ldr	r2, [pc, #72]	@ (8000648 <main+0xb8>)
 8000600:	2100      	movs	r1, #0
 8000602:	4812      	ldr	r0, [pc, #72]	@ (800064c <main+0xbc>)
 8000604:	f006 fb24 	bl	8006c50 <osThreadNew>
 8000608:	4603      	mov	r3, r0
 800060a:	4a11      	ldr	r2, [pc, #68]	@ (8000650 <main+0xc0>)
 800060c:	6013      	str	r3, [r2, #0]

  /* creation of myUartTask */
  myUartTaskHandle = osThreadNew(StartMyUartTask, NULL, &myUartTask_attributes);
 800060e:	4a11      	ldr	r2, [pc, #68]	@ (8000654 <main+0xc4>)
 8000610:	2100      	movs	r1, #0
 8000612:	4811      	ldr	r0, [pc, #68]	@ (8000658 <main+0xc8>)
 8000614:	f006 fb1c 	bl	8006c50 <osThreadNew>
 8000618:	4603      	mov	r3, r0
 800061a:	4a10      	ldr	r2, [pc, #64]	@ (800065c <main+0xcc>)
 800061c:	6013      	str	r3, [r2, #0]

  /* creation of myCounterTask */
  myCounterTaskHandle = osThreadNew(StartMyCounterTask, NULL, &myCounterTask_attributes);
 800061e:	4a10      	ldr	r2, [pc, #64]	@ (8000660 <main+0xd0>)
 8000620:	2100      	movs	r1, #0
 8000622:	4810      	ldr	r0, [pc, #64]	@ (8000664 <main+0xd4>)
 8000624:	f006 fb14 	bl	8006c50 <osThreadNew>
 8000628:	4603      	mov	r3, r0
 800062a:	4a0f      	ldr	r2, [pc, #60]	@ (8000668 <main+0xd8>)
 800062c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800062e:	f006 fae9 	bl	8006c04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000632:	bf00      	nop
 8000634:	e7fd      	b.n	8000632 <main+0xa2>
 8000636:	bf00      	nop
 8000638:	0800af04 	.word	0x0800af04
 800063c:	200004dc 	.word	0x200004dc
 8000640:	0800aeec 	.word	0x0800aeec
 8000644:	200004d8 	.word	0x200004d8
 8000648:	0800ae80 	.word	0x0800ae80
 800064c:	0800100d 	.word	0x0800100d
 8000650:	200004cc 	.word	0x200004cc
 8000654:	0800aea4 	.word	0x0800aea4
 8000658:	080010c5 	.word	0x080010c5
 800065c:	200004d0 	.word	0x200004d0
 8000660:	0800aec8 	.word	0x0800aec8
 8000664:	0800112d 	.word	0x0800112d
 8000668:	200004d4 	.word	0x200004d4

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b096      	sub	sp, #88	@ 0x58
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	2244      	movs	r2, #68	@ 0x44
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f009 feec 	bl	800a458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	463b      	mov	r3, r7
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800068e:	2000      	movs	r0, #0
 8000690:	f003 fb2e 	bl	8003cf0 <HAL_PWREx_ControlVoltageScaling>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800069a:	f000 fd75 	bl	8001188 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800069e:	f003 faf7 	bl	8003c90 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006a2:	4b22      	ldr	r3, [pc, #136]	@ (800072c <SystemClock_Config+0xc0>)
 80006a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80006a8:	4a20      	ldr	r2, [pc, #128]	@ (800072c <SystemClock_Config+0xc0>)
 80006aa:	f023 0318 	bic.w	r3, r3, #24
 80006ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006b2:	2314      	movs	r3, #20
 80006b4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006b6:	2301      	movs	r3, #1
 80006b8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006ba:	2301      	movs	r3, #1
 80006bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006c2:	2360      	movs	r3, #96	@ 0x60
 80006c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006ca:	2301      	movs	r3, #1
 80006cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80006d2:	233c      	movs	r3, #60	@ 0x3c
 80006d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006da:	2302      	movs	r3, #2
 80006dc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 fba6 	bl	8003e38 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006f2:	f000 fd49 	bl	8001188 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2303      	movs	r3, #3
 80006fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800070a:	463b      	mov	r3, r7
 800070c:	2105      	movs	r1, #5
 800070e:	4618      	mov	r0, r3
 8000710:	f003 ffac 	bl	800466c <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800071a:	f000 fd35 	bl	8001188 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800071e:	f004 fdc5 	bl	80052ac <HAL_RCCEx_EnableMSIPLLMode>
}
 8000722:	bf00      	nop
 8000724:	3758      	adds	r7, #88	@ 0x58
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000

08000730 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b0a6      	sub	sp, #152	@ 0x98
 8000734:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2294      	movs	r2, #148	@ 0x94
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f009 fe8b 	bl	800a458 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8000742:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000746:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000748:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800074c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000750:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000754:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000756:	2301      	movs	r3, #1
 8000758:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800075e:	2318      	movs	r3, #24
 8000760:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000762:	2302      	movs	r3, #2
 8000764:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800076a:	2302      	movs	r3, #2
 800076c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800076e:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 8000772:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	4618      	mov	r0, r3
 8000778:	f004 fa68 	bl	8004c4c <HAL_RCCEx_PeriphCLKConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000782:	f000 fd01 	bl	8001188 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3798      	adds	r7, #152	@ 0x98
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000796:	463b      	mov	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
 80007a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007a6:	4b29      	ldr	r3, [pc, #164]	@ (800084c <MX_ADC1_Init+0xbc>)
 80007a8:	4a29      	ldr	r2, [pc, #164]	@ (8000850 <MX_ADC1_Init+0xc0>)
 80007aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007ac:	4b27      	ldr	r3, [pc, #156]	@ (800084c <MX_ADC1_Init+0xbc>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b2:	4b26      	ldr	r3, [pc, #152]	@ (800084c <MX_ADC1_Init+0xbc>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b8:	4b24      	ldr	r3, [pc, #144]	@ (800084c <MX_ADC1_Init+0xbc>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007be:	4b23      	ldr	r3, [pc, #140]	@ (800084c <MX_ADC1_Init+0xbc>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c4:	4b21      	ldr	r3, [pc, #132]	@ (800084c <MX_ADC1_Init+0xbc>)
 80007c6:	2204      	movs	r2, #4
 80007c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ca:	4b20      	ldr	r3, [pc, #128]	@ (800084c <MX_ADC1_Init+0xbc>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007d0:	4b1e      	ldr	r3, [pc, #120]	@ (800084c <MX_ADC1_Init+0xbc>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007d6:	4b1d      	ldr	r3, [pc, #116]	@ (800084c <MX_ADC1_Init+0xbc>)
 80007d8:	2201      	movs	r2, #1
 80007da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007dc:	4b1b      	ldr	r3, [pc, #108]	@ (800084c <MX_ADC1_Init+0xbc>)
 80007de:	2200      	movs	r2, #0
 80007e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e4:	4b19      	ldr	r3, [pc, #100]	@ (800084c <MX_ADC1_Init+0xbc>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ea:	4b18      	ldr	r3, [pc, #96]	@ (800084c <MX_ADC1_Init+0xbc>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007f0:	4b16      	ldr	r3, [pc, #88]	@ (800084c <MX_ADC1_Init+0xbc>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007f8:	4b14      	ldr	r3, [pc, #80]	@ (800084c <MX_ADC1_Init+0xbc>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007fe:	4b13      	ldr	r3, [pc, #76]	@ (800084c <MX_ADC1_Init+0xbc>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000806:	4811      	ldr	r0, [pc, #68]	@ (800084c <MX_ADC1_Init+0xbc>)
 8000808:	f001 fb22 	bl	8001e50 <HAL_ADC_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000812:	f000 fcb9 	bl	8001188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000816:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <MX_ADC1_Init+0xc4>)
 8000818:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800081a:	2306      	movs	r3, #6
 800081c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000822:	237f      	movs	r3, #127	@ 0x7f
 8000824:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000826:	2304      	movs	r3, #4
 8000828:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082e:	463b      	mov	r3, r7
 8000830:	4619      	mov	r1, r3
 8000832:	4806      	ldr	r0, [pc, #24]	@ (800084c <MX_ADC1_Init+0xbc>)
 8000834:	f001 fc52 	bl	80020dc <HAL_ADC_ConfigChannel>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800083e:	f000 fca3 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000080 	.word	0x20000080
 8000850:	50040000 	.word	0x50040000
 8000854:	04300002 	.word	0x04300002

08000858 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 800085c:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <MX_DFSDM1_Init+0x68>)
 800085e:	4a19      	ldr	r2, [pc, #100]	@ (80008c4 <MX_DFSDM1_Init+0x6c>)
 8000860:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000862:	4b17      	ldr	r3, [pc, #92]	@ (80008c0 <MX_DFSDM1_Init+0x68>)
 8000864:	2201      	movs	r2, #1
 8000866:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000868:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <MX_DFSDM1_Init+0x68>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 800086e:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <MX_DFSDM1_Init+0x68>)
 8000870:	2202      	movs	r2, #2
 8000872:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_DFSDM1_Init+0x68>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_DFSDM1_Init+0x68>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_DFSDM1_Init+0x68>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <MX_DFSDM1_Init+0x68>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800088c:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <MX_DFSDM1_Init+0x68>)
 800088e:	2204      	movs	r2, #4
 8000890:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000892:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <MX_DFSDM1_Init+0x68>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000898:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <MX_DFSDM1_Init+0x68>)
 800089a:	2201      	movs	r2, #1
 800089c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 800089e:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <MX_DFSDM1_Init+0x68>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <MX_DFSDM1_Init+0x68>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_DFSDM1_Init+0x68>)
 80008ac:	f002 f8f4 	bl	8002a98 <HAL_DFSDM_ChannelInit>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80008b6:	f000 fc67 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000e8 	.word	0x200000e8
 80008c4:	40016040 	.word	0x40016040

080008c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	@ (800093c <MX_I2C1_Init+0x74>)
 80008ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000940 <MX_I2C1_Init+0x78>)
 80008d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <MX_I2C1_Init+0x74>)
 80008d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000944 <MX_I2C1_Init+0x7c>)
 80008d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008d8:	4b18      	ldr	r3, [pc, #96]	@ (800093c <MX_I2C1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008de:	4b17      	ldr	r3, [pc, #92]	@ (800093c <MX_I2C1_Init+0x74>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e4:	4b15      	ldr	r3, [pc, #84]	@ (800093c <MX_I2C1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ea:	4b14      	ldr	r3, [pc, #80]	@ (800093c <MX_I2C1_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f0:	4b12      	ldr	r3, [pc, #72]	@ (800093c <MX_I2C1_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_I2C1_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_I2C1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000902:	480e      	ldr	r0, [pc, #56]	@ (800093c <MX_I2C1_Init+0x74>)
 8000904:	f002 fbbb 	bl	800307e <HAL_I2C_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800090e:	f000 fc3b 	bl	8001188 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000912:	2100      	movs	r1, #0
 8000914:	4809      	ldr	r0, [pc, #36]	@ (800093c <MX_I2C1_Init+0x74>)
 8000916:	f002 fc4d 	bl	80031b4 <HAL_I2CEx_ConfigAnalogFilter>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000920:	f000 fc32 	bl	8001188 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000924:	2100      	movs	r1, #0
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_I2C1_Init+0x74>)
 8000928:	f002 fc8f 	bl	800324a <HAL_I2CEx_ConfigDigitalFilter>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000932:	f000 fc29 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000120 	.word	0x20000120
 8000940:	40005400 	.word	0x40005400
 8000944:	307075b1 	.word	0x307075b1

08000948 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800094c:	4b1b      	ldr	r3, [pc, #108]	@ (80009bc <MX_I2C2_Init+0x74>)
 800094e:	4a1c      	ldr	r2, [pc, #112]	@ (80009c0 <MX_I2C2_Init+0x78>)
 8000950:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000952:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <MX_I2C2_Init+0x74>)
 8000954:	4a1b      	ldr	r2, [pc, #108]	@ (80009c4 <MX_I2C2_Init+0x7c>)
 8000956:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000958:	4b18      	ldr	r3, [pc, #96]	@ (80009bc <MX_I2C2_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800095e:	4b17      	ldr	r3, [pc, #92]	@ (80009bc <MX_I2C2_Init+0x74>)
 8000960:	2201      	movs	r2, #1
 8000962:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000964:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <MX_I2C2_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800096a:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <MX_I2C2_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000970:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <MX_I2C2_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000976:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <MX_I2C2_Init+0x74>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800097c:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <MX_I2C2_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000982:	480e      	ldr	r0, [pc, #56]	@ (80009bc <MX_I2C2_Init+0x74>)
 8000984:	f002 fb7b 	bl	800307e <HAL_I2C_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800098e:	f000 fbfb 	bl	8001188 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000992:	2100      	movs	r1, #0
 8000994:	4809      	ldr	r0, [pc, #36]	@ (80009bc <MX_I2C2_Init+0x74>)
 8000996:	f002 fc0d 	bl	80031b4 <HAL_I2CEx_ConfigAnalogFilter>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009a0:	f000 fbf2 	bl	8001188 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009a4:	2100      	movs	r1, #0
 80009a6:	4805      	ldr	r0, [pc, #20]	@ (80009bc <MX_I2C2_Init+0x74>)
 80009a8:	f002 fc4f 	bl	800324a <HAL_I2CEx_ConfigDigitalFilter>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009b2:	f000 fbe9 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000174 	.word	0x20000174
 80009c0:	40005800 	.word	0x40005800
 80009c4:	307075b1 	.word	0x307075b1

080009c8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80009dc:	4b23      	ldr	r3, [pc, #140]	@ (8000a6c <MX_OCTOSPI1_Init+0xa4>)
 80009de:	4a24      	ldr	r2, [pc, #144]	@ (8000a70 <MX_OCTOSPI1_Init+0xa8>)
 80009e0:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80009e2:	4b22      	ldr	r3, [pc, #136]	@ (8000a6c <MX_OCTOSPI1_Init+0xa4>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80009e8:	4b20      	ldr	r3, [pc, #128]	@ (8000a6c <MX_OCTOSPI1_Init+0xa4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80009ee:	4b1f      	ldr	r3, [pc, #124]	@ (8000a6c <MX_OCTOSPI1_Init+0xa4>)
 80009f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80009f4:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80009f6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <MX_OCTOSPI1_Init+0xa4>)
 80009f8:	2220      	movs	r2, #32
 80009fa:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a6c <MX_OCTOSPI1_Init+0xa4>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <MX_OCTOSPI1_Init+0xa4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000a08:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <MX_OCTOSPI1_Init+0xa4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <MX_OCTOSPI1_Init+0xa4>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000a14:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <MX_OCTOSPI1_Init+0xa4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <MX_OCTOSPI1_Init+0xa4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <MX_OCTOSPI1_Init+0xa4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <MX_OCTOSPI1_Init+0xa4>)
 8000a28:	2208      	movs	r2, #8
 8000a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000a2c:	480f      	ldr	r0, [pc, #60]	@ (8000a6c <MX_OCTOSPI1_Init+0xa4>)
 8000a2e:	f002 fc59 	bl	80032e4 <HAL_OSPI_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000a38:	f000 fba6 	bl	8001188 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000a40:	2301      	movs	r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000a44:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000a48:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a50:	4619      	mov	r1, r3
 8000a52:	4806      	ldr	r0, [pc, #24]	@ (8000a6c <MX_OCTOSPI1_Init+0xa4>)
 8000a54:	f002 fd00 	bl	8003458 <HAL_OSPIM_Config>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000a5e:	f000 fb93 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200001c8 	.word	0x200001c8
 8000a70:	a0001000 	.word	0xa0001000

08000a74 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000aec <MX_SPI3_Init+0x78>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000a80:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a84:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a86:	4b18      	ldr	r3, [pc, #96]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000a8e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000a92:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a94:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000aa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aa6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000aaa:	2208      	movs	r2, #8
 8000aac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000ac2:	2207      	movs	r2, #7
 8000ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000ace:	2208      	movs	r2, #8
 8000ad0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000ad4:	f004 fde2 	bl	800569c <HAL_SPI_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000ade:	f000 fb53 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000218 	.word	0x20000218
 8000aec:	40003c00 	.word	0x40003c00

08000af0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000af4:	4b22      	ldr	r3, [pc, #136]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000af6:	4a23      	ldr	r2, [pc, #140]	@ (8000b84 <MX_UART4_Init+0x94>)
 8000af8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000afa:	4b21      	ldr	r3, [pc, #132]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000afc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b00:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b1f      	ldr	r3, [pc, #124]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b20:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b26:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b38:	4811      	ldr	r0, [pc, #68]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b3a:	f005 f905 	bl	8005d48 <HAL_UART_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000b44:	f000 fb20 	bl	8001188 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	480d      	ldr	r0, [pc, #52]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b4c:	f005 ff28 	bl	80069a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000b56:	f000 fb17 	bl	8001188 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4808      	ldr	r0, [pc, #32]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b5e:	f005 ff5d 	bl	8006a1c <HAL_UARTEx_SetRxFifoThreshold>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000b68:	f000 fb0e 	bl	8001188 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	@ (8000b80 <MX_UART4_Init+0x90>)
 8000b6e:	f005 fede 	bl	800692e <HAL_UARTEx_DisableFifoMode>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000b78:	f000 fb06 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2000027c 	.word	0x2000027c
 8000b84:	40004c00 	.word	0x40004c00

08000b88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000b8e:	4a23      	ldr	r2, [pc, #140]	@ (8000c1c <MX_USART1_UART_Init+0x94>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b92:	4b21      	ldr	r3, [pc, #132]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bca:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd0:	4811      	ldr	r0, [pc, #68]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bd2:	f005 f8b9 	bl	8005d48 <HAL_UART_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bdc:	f000 fad4 	bl	8001188 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be0:	2100      	movs	r1, #0
 8000be2:	480d      	ldr	r0, [pc, #52]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000be4:	f005 fedc 	bl	80069a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bee:	f000 facb 	bl	8001188 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4808      	ldr	r0, [pc, #32]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bf6:	f005 ff11 	bl	8006a1c <HAL_UARTEx_SetRxFifoThreshold>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c00:	f000 fac2 	bl	8001188 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	@ (8000c18 <MX_USART1_UART_Init+0x90>)
 8000c06:	f005 fe92 	bl	800692e <HAL_UARTEx_DisableFifoMode>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c10:	f000 faba 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000310 	.word	0x20000310
 8000c1c:	40013800 	.word	0x40013800

08000c20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c24:	4b23      	ldr	r3, [pc, #140]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c26:	4a24      	ldr	r2, [pc, #144]	@ (8000cb8 <MX_USART2_UART_Init+0x98>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c2a:	4b22      	ldr	r3, [pc, #136]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b20      	ldr	r3, [pc, #128]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c4c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c50:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c52:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c58:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c64:	4b13      	ldr	r3, [pc, #76]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c6a:	4812      	ldr	r0, [pc, #72]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c6c:	f005 f86c 	bl	8005d48 <HAL_UART_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000c76:	f000 fa87 	bl	8001188 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	480d      	ldr	r0, [pc, #52]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c7e:	f005 fe8f 	bl	80069a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000c88:	f000 fa7e 	bl	8001188 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4809      	ldr	r0, [pc, #36]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c90:	f005 fec4 	bl	8006a1c <HAL_UARTEx_SetRxFifoThreshold>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000c9a:	f000 fa75 	bl	8001188 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000ca0:	f005 fe45 	bl	800692e <HAL_UARTEx_DisableFifoMode>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000caa:	f000 fa6d 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200003a4 	.word	0x200003a4
 8000cb8:	40004400 	.word	0x40004400

08000cbc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cc2:	4a23      	ldr	r2, [pc, #140]	@ (8000d50 <MX_USART3_UART_Init+0x94>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d04:	4811      	ldr	r0, [pc, #68]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d06:	f005 f81f 	bl	8005d48 <HAL_UART_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d10:	f000 fa3a 	bl	8001188 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d14:	2100      	movs	r1, #0
 8000d16:	480d      	ldr	r0, [pc, #52]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d18:	f005 fe42 	bl	80069a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d22:	f000 fa31 	bl	8001188 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d26:	2100      	movs	r1, #0
 8000d28:	4808      	ldr	r0, [pc, #32]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d2a:	f005 fe77 	bl	8006a1c <HAL_UARTEx_SetRxFifoThreshold>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d34:	f000 fa28 	bl	8001188 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d38:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d3a:	f005 fdf8 	bl	800692e <HAL_UARTEx_DisableFifoMode>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d44:	f000 fa20 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000438 	.word	0x20000438
 8000d50:	40004800 	.word	0x40004800

08000d54 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08c      	sub	sp, #48	@ 0x30
 8000d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d7a:	4b9f      	ldr	r3, [pc, #636]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7e:	4a9e      	ldr	r2, [pc, #632]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000d80:	f043 0310 	orr.w	r3, r3, #16
 8000d84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d86:	4b9c      	ldr	r3, [pc, #624]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8a:	f003 0310 	and.w	r3, r3, #16
 8000d8e:	61bb      	str	r3, [r7, #24]
 8000d90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d92:	4b99      	ldr	r3, [pc, #612]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d96:	4a98      	ldr	r2, [pc, #608]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d9e:	4b96      	ldr	r3, [pc, #600]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000daa:	4b93      	ldr	r3, [pc, #588]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dae:	4a92      	ldr	r2, [pc, #584]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000db4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db6:	4b90      	ldr	r3, [pc, #576]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	4b8d      	ldr	r3, [pc, #564]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc6:	4a8c      	ldr	r2, [pc, #560]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dce:	4b8a      	ldr	r3, [pc, #552]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	4b87      	ldr	r3, [pc, #540]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dde:	4a86      	ldr	r2, [pc, #536]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de6:	4b84      	ldr	r3, [pc, #528]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df2:	4b81      	ldr	r3, [pc, #516]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	4a80      	ldr	r2, [pc, #512]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000df8:	f043 0308 	orr.w	r3, r3, #8
 8000dfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dfe:	4b7e      	ldr	r3, [pc, #504]	@ (8000ff8 <MX_GPIO_Init+0x294>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f240 1105 	movw	r1, #261	@ 0x105
 8000e10:	487a      	ldr	r0, [pc, #488]	@ (8000ffc <MX_GPIO_Init+0x298>)
 8000e12:	f002 f8df 	bl	8002fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|GPIO_PIN_5
 8000e16:	2200      	movs	r2, #0
 8000e18:	f248 113c 	movw	r1, #33084	@ 0x813c
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e20:	f002 f8d8 	bl	8002fd4 <HAL_GPIO_WritePin>
                          |SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e24:	2200      	movs	r2, #0
 8000e26:	f24f 0134 	movw	r1, #61492	@ 0xf034
 8000e2a:	4875      	ldr	r0, [pc, #468]	@ (8001000 <MX_GPIO_Init+0x29c>)
 8000e2c:	f002 f8d2 	bl	8002fd4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f242 0183 	movw	r1, #8323	@ 0x2083
 8000e36:	4873      	ldr	r0, [pc, #460]	@ (8001004 <MX_GPIO_Init+0x2a0>)
 8000e38:	f002 f8cc 	bl	8002fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000e42:	4871      	ldr	r0, [pc, #452]	@ (8001008 <MX_GPIO_Init+0x2a4>)
 8000e44:	f002 f8c6 	bl	8002fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000e48:	f240 1305 	movw	r3, #261	@ 0x105
 8000e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4866      	ldr	r0, [pc, #408]	@ (8000ffc <MX_GPIO_Init+0x298>)
 8000e62:	f001 ff25 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8000e66:	237a      	movs	r3, #122	@ 0x7a
 8000e68:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e6a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4860      	ldr	r0, [pc, #384]	@ (8000ffc <MX_GPIO_Init+0x298>)
 8000e7c:	f001 ff18 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000e80:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e86:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	485c      	ldr	r0, [pc, #368]	@ (8001008 <MX_GPIO_Init+0x2a4>)
 8000e98:	f001 ff0a 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin PA5
                           SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|GPIO_PIN_5
 8000e9c:	f248 133c 	movw	r3, #33084	@ 0x813c
 8000ea0:	61fb      	str	r3, [r7, #28]
                          |SPBTLE_RF_RST_Pin|ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb8:	f001 fefa 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000ebc:	23c0      	movs	r3, #192	@ 0xc0
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ecc:	2305      	movs	r3, #5
 8000ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eda:	f001 fee9 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ee2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4843      	ldr	r0, [pc, #268]	@ (8001000 <MX_GPIO_Init+0x29c>)
 8000ef4:	f001 fedc 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	483b      	ldr	r0, [pc, #236]	@ (8001000 <MX_GPIO_Init+0x29c>)
 8000f14:	f001 fecc 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f18:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000f1c:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4833      	ldr	r0, [pc, #204]	@ (8001000 <MX_GPIO_Init+0x29c>)
 8000f32:	f001 febd 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8000f36:	f64d 4304 	movw	r3, #56324	@ 0xdc04
 8000f3a:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f3c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	482d      	ldr	r0, [pc, #180]	@ (8001004 <MX_GPIO_Init+0x2a0>)
 8000f4e:	f001 feaf 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000f52:	f242 0383 	movw	r3, #8323	@ 0x2083
 8000f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4826      	ldr	r0, [pc, #152]	@ (8001004 <MX_GPIO_Init+0x2a0>)
 8000f6c:	f001 fea0 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000f70:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	4619      	mov	r1, r3
 8000f88:	481f      	ldr	r0, [pc, #124]	@ (8001008 <MX_GPIO_Init+0x2a4>)
 8000f8a:	f001 fe91 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000f8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa6:	f001 fe83 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000faa:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fbc:	230a      	movs	r3, #10
 8000fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fca:	f001 fe71 	bl	8002cb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2105      	movs	r1, #5
 8000fd2:	2017      	movs	r0, #23
 8000fd4:	f001 fd36 	bl	8002a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fd8:	2017      	movs	r0, #23
 8000fda:	f001 fd4f 	bl	8002a7c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2105      	movs	r1, #5
 8000fe2:	2028      	movs	r0, #40	@ 0x28
 8000fe4:	f001 fd2e 	bl	8002a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fe8:	2028      	movs	r0, #40	@ 0x28
 8000fea:	f001 fd47 	bl	8002a7c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fee:	bf00      	nop
 8000ff0:	3730      	adds	r7, #48	@ 0x30
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	48001000 	.word	0x48001000
 8001000:	48000400 	.word	0x48000400
 8001004:	48000c00 	.word	0x48000c00
 8001008:	48000800 	.word	0x48000800

0800100c <StartMyLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMyLedTask */
void StartMyLedTask(void *argument)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	2120      	movs	r1, #32
 8001018:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800101c:	f001 ffda 	bl	8002fd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001026:	4821      	ldr	r0, [pc, #132]	@ (80010ac <StartMyLedTask+0xa0>)
 8001028:	f001 ffd4 	bl	8002fd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001032:	481f      	ldr	r0, [pc, #124]	@ (80010b0 <StartMyLedTask+0xa4>)
 8001034:	f001 ffce 	bl	8002fd4 <HAL_GPIO_WritePin>
  static GPIO_PinState led_1_2_state = GPIO_PIN_RESET;
  for(;;)
  {
  if(led_1_2_state == GPIO_PIN_SET)
 8001038:	4b1e      	ldr	r3, [pc, #120]	@ (80010b4 <StartMyLedTask+0xa8>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d103      	bne.n	8001048 <StartMyLedTask+0x3c>
	  led_1_2_state = GPIO_PIN_RESET;
 8001040:	4b1c      	ldr	r3, [pc, #112]	@ (80010b4 <StartMyLedTask+0xa8>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	e002      	b.n	800104e <StartMyLedTask+0x42>
  else led_1_2_state = GPIO_PIN_SET;
 8001048:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <StartMyLedTask+0xa8>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
	osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 800104e:	4b1a      	ldr	r3, [pc, #104]	@ (80010b8 <StartMyLedTask+0xac>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f04f 31ff 	mov.w	r1, #4294967295
 8001056:	4618      	mov	r0, r3
 8001058:	f005 ff30 	bl	8006ebc <osSemaphoreAcquire>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, led_1_2_state);
 800105c:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <StartMyLedTask+0xa8>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	2120      	movs	r1, #32
 8001064:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001068:	f001 ffb4 	bl	8002fd4 <HAL_GPIO_WritePin>
	if(acquisition_activated == 0)
 800106c:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <StartMyLedTask+0xb0>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d107      	bne.n	8001084 <StartMyLedTask+0x78>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, led_1_2_state); // Toggle LED 2
 8001074:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <StartMyLedTask+0xa8>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800107e:	480c      	ldr	r0, [pc, #48]	@ (80010b0 <StartMyLedTask+0xa4>)
 8001080:	f001 ffa8 	bl	8002fd4 <HAL_GPIO_WritePin>

	if(queue_overflow_detected == 0)
 8001084:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <StartMyLedTask+0xb4>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d105      	bne.n	8001098 <StartMyLedTask+0x8c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800108c:	2201      	movs	r2, #1
 800108e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001092:	4806      	ldr	r0, [pc, #24]	@ (80010ac <StartMyLedTask+0xa0>)
 8001094:	f001 ff9e 	bl	8002fd4 <HAL_GPIO_WritePin>

	osSemaphoreRelease(myBinarySem01Handle);
 8001098:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <StartMyLedTask+0xac>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f005 ff5f 	bl	8006f60 <osSemaphoreRelease>
	osDelay(100);  //1sec delay
 80010a2:	2064      	movs	r0, #100	@ 0x64
 80010a4:	f005 fe66 	bl	8006d74 <osDelay>
  if(led_1_2_state == GPIO_PIN_SET)
 80010a8:	e7c6      	b.n	8001038 <StartMyLedTask+0x2c>
 80010aa:	bf00      	nop
 80010ac:	48000800 	.word	0x48000800
 80010b0:	48000400 	.word	0x48000400
 80010b4:	200004e3 	.word	0x200004e3
 80010b8:	200004dc 	.word	0x200004dc
 80010bc:	200004e2 	.word	0x200004e2
 80010c0:	20000000 	.word	0x20000000

080010c4 <StartMyUartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMyUartTask */
void StartMyUartTask(void *argument)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMyUartTask */
  /* Infinite loop */
  for(;;)
  {
	uint16_t dataOut;
	osStatus_t result = osMessageQueueGet(myDataQueueHandle, &dataOut, NULL, osWaitForever);
 80010cc:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <StartMyUartTask+0x5c>)
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	f107 0112 	add.w	r1, r7, #18
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295
 80010d8:	2200      	movs	r2, #0
 80010da:	f006 f859 	bl	8007190 <osMessageQueueGet>
 80010de:	6178      	str	r0, [r7, #20]
	if(result == osOK)
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f2      	bne.n	80010cc <StartMyUartTask+0x8>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80010e6:	2120      	movs	r1, #32
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ec:	f001 ff8a 	bl	8003004 <HAL_GPIO_TogglePin>
		uint8_t buffer[5]="";
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	2300      	movs	r3, #0
 80010f6:	743b      	strb	r3, [r7, #16]
		sprintf((char *)buffer, "%d\n\r", dataOut);
 80010f8:	8a7b      	ldrh	r3, [r7, #18]
 80010fa:	461a      	mov	r2, r3
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	4908      	ldr	r1, [pc, #32]	@ (8001124 <StartMyUartTask+0x60>)
 8001102:	4618      	mov	r0, r3
 8001104:	f009 f988 	bl	800a418 <siprintf>
		HAL_UART_Transmit (&huart1, buffer, sizeof(buffer), 10);
 8001108:	f107 010c 	add.w	r1, r7, #12
 800110c:	230a      	movs	r3, #10
 800110e:	2205      	movs	r2, #5
 8001110:	4805      	ldr	r0, [pc, #20]	@ (8001128 <StartMyUartTask+0x64>)
 8001112:	f004 fe69 	bl	8005de8 <HAL_UART_Transmit>
	    osDelay(1);
 8001116:	2001      	movs	r0, #1
 8001118:	f005 fe2c 	bl	8006d74 <osDelay>
  {
 800111c:	e7d6      	b.n	80010cc <StartMyUartTask+0x8>
 800111e:	bf00      	nop
 8001120:	200004d8 	.word	0x200004d8
 8001124:	0800ae60 	.word	0x0800ae60
 8001128:	20000310 	.word	0x20000310

0800112c <StartMyCounterTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMyCounterTask */
void StartMyCounterTask(void *argument)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMyCounterTask */
  /* Infinite loop */
  for(;;)
  {
	counter++;
 8001134:	4b09      	ldr	r3, [pc, #36]	@ (800115c <StartMyCounterTask+0x30>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	b29a      	uxth	r2, r3
 800113c:	4b07      	ldr	r3, [pc, #28]	@ (800115c <StartMyCounterTask+0x30>)
 800113e:	801a      	strh	r2, [r3, #0]
	osMessageQueuePut(myDataQueueHandle, &counter, 1, osWaitForever);
 8001140:	4b07      	ldr	r3, [pc, #28]	@ (8001160 <StartMyCounterTask+0x34>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
 8001148:	2201      	movs	r2, #1
 800114a:	4904      	ldr	r1, [pc, #16]	@ (800115c <StartMyCounterTask+0x30>)
 800114c:	f005 ffc0 	bl	80070d0 <osMessageQueuePut>
	osDelay(5000);
 8001150:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001154:	f005 fe0e 	bl	8006d74 <osDelay>
	counter++;
 8001158:	bf00      	nop
 800115a:	e7eb      	b.n	8001134 <StartMyCounterTask+0x8>
 800115c:	200004e0 	.word	0x200004e0
 8001160:	200004d8 	.word	0x200004d8

08001164 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a04      	ldr	r2, [pc, #16]	@ (8001184 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001176:	f000 fcab 	bl	8001ad0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40001000 	.word	0x40001000

08001188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800118c:	b672      	cpsid	i
}
 800118e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <Error_Handler+0x8>

08001194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <HAL_MspInit+0x4c>)
 800119c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800119e:	4a10      	ldr	r2, [pc, #64]	@ (80011e0 <HAL_MspInit+0x4c>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80011a6:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <HAL_MspInit+0x4c>)
 80011a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <HAL_MspInit+0x4c>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b6:	4a0a      	ldr	r2, [pc, #40]	@ (80011e0 <HAL_MspInit+0x4c>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80011be:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <HAL_MspInit+0x4c>)
 80011c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	210f      	movs	r1, #15
 80011ce:	f06f 0001 	mvn.w	r0, #1
 80011d2:	f001 fc37 	bl	8002a44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000

080011e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	@ 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a15      	ldr	r2, [pc, #84]	@ (8001258 <HAL_ADC_MspInit+0x74>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d123      	bne.n	800124e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001206:	4b15      	ldr	r3, [pc, #84]	@ (800125c <HAL_ADC_MspInit+0x78>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	4a14      	ldr	r2, [pc, #80]	@ (800125c <HAL_ADC_MspInit+0x78>)
 800120c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001212:	4b12      	ldr	r3, [pc, #72]	@ (800125c <HAL_ADC_MspInit+0x78>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <HAL_ADC_MspInit+0x78>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	4a0e      	ldr	r2, [pc, #56]	@ (800125c <HAL_ADC_MspInit+0x78>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122a:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <HAL_ADC_MspInit+0x78>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001236:	233f      	movs	r3, #63	@ 0x3f
 8001238:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800123a:	230b      	movs	r3, #11
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	@ (8001260 <HAL_ADC_MspInit+0x7c>)
 800124a:	f001 fd31 	bl	8002cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	@ 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	50040000 	.word	0x50040000
 800125c:	40021000 	.word	0x40021000
 8001260:	48000800 	.word	0x48000800

08001264 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b0ae      	sub	sp, #184	@ 0xb8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	2294      	movs	r2, #148	@ 0x94
 8001282:	2100      	movs	r1, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f009 f8e7 	bl	800a458 <memset>
  if(DFSDM1_Init == 0)
 800128a:	4b25      	ldr	r3, [pc, #148]	@ (8001320 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d142      	bne.n	8001318 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001292:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001296:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800129e:	f107 0310 	add.w	r3, r7, #16
 80012a2:	4618      	mov	r0, r3
 80012a4:	f003 fcd2 	bl	8004c4c <HAL_RCCEx_PeriphCLKConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80012ae:	f7ff ff6b 	bl	8001188 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80012b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001324 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012b6:	4a1b      	ldr	r2, [pc, #108]	@ (8001324 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80012be:	4b19      	ldr	r3, [pc, #100]	@ (8001324 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ca:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ce:	4a15      	ldr	r2, [pc, #84]	@ (8001324 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012d0:	f043 0310 	orr.w	r3, r3, #16
 80012d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d6:	4b13      	ldr	r3, [pc, #76]	@ (8001324 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012da:	f003 0310 	and.w	r3, r3, #16
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80012e2:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80012e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80012fc:	2306      	movs	r3, #6
 80012fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001302:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001306:	4619      	mov	r1, r3
 8001308:	4807      	ldr	r0, [pc, #28]	@ (8001328 <HAL_DFSDM_ChannelMspInit+0xc4>)
 800130a:	f001 fcd1 	bl	8002cb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800130e:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	4a02      	ldr	r2, [pc, #8]	@ (8001320 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001316:	6013      	str	r3, [r2, #0]
  }

}
 8001318:	bf00      	nop
 800131a:	37b8      	adds	r7, #184	@ 0xb8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	200004e4 	.word	0x200004e4
 8001324:	40021000 	.word	0x40021000
 8001328:	48001000 	.word	0x48001000

0800132c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b0b0      	sub	sp, #192	@ 0xc0
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001344:	f107 0318 	add.w	r3, r7, #24
 8001348:	2294      	movs	r2, #148	@ 0x94
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f009 f883 	bl	800a458 <memset>
  if(hi2c->Instance==I2C1)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a42      	ldr	r2, [pc, #264]	@ (8001460 <HAL_I2C_MspInit+0x134>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d13c      	bne.n	80013d6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800135c:	2340      	movs	r3, #64	@ 0x40
 800135e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001360:	2300      	movs	r3, #0
 8001362:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001364:	f107 0318 	add.w	r3, r7, #24
 8001368:	4618      	mov	r0, r3
 800136a:	f003 fc6f 	bl	8004c4c <HAL_RCCEx_PeriphCLKConfig>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001374:	f7ff ff08 	bl	8001188 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001378:	4b3a      	ldr	r3, [pc, #232]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 800137a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137c:	4a39      	ldr	r2, [pc, #228]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001384:	4b37      	ldr	r3, [pc, #220]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 8001386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001390:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001394:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001398:	2312      	movs	r3, #18
 800139a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800139e:	2301      	movs	r3, #1
 80013a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013aa:	2304      	movs	r3, #4
 80013ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013b4:	4619      	mov	r1, r3
 80013b6:	482c      	ldr	r0, [pc, #176]	@ (8001468 <HAL_I2C_MspInit+0x13c>)
 80013b8:	f001 fc7a 	bl	8002cb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013bc:	4b29      	ldr	r3, [pc, #164]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 80013be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c0:	4a28      	ldr	r2, [pc, #160]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 80013c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80013c8:	4b26      	ldr	r3, [pc, #152]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 80013ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013d4:	e040      	b.n	8001458 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a24      	ldr	r2, [pc, #144]	@ (800146c <HAL_I2C_MspInit+0x140>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d13b      	bne.n	8001458 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80013e0:	2380      	movs	r3, #128	@ 0x80
 80013e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e8:	f107 0318 	add.w	r3, r7, #24
 80013ec:	4618      	mov	r0, r3
 80013ee:	f003 fc2d 	bl	8004c4c <HAL_RCCEx_PeriphCLKConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80013f8:	f7ff fec6 	bl	8001188 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fc:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001400:	4a18      	ldr	r2, [pc, #96]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 8001402:	f043 0302 	orr.w	r3, r3, #2
 8001406:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001408:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001414:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001418:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141c:	2312      	movs	r3, #18
 800141e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001422:	2301      	movs	r3, #1
 8001424:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800142e:	2304      	movs	r3, #4
 8001430:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001438:	4619      	mov	r1, r3
 800143a:	480b      	ldr	r0, [pc, #44]	@ (8001468 <HAL_I2C_MspInit+0x13c>)
 800143c:	f001 fc38 	bl	8002cb0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001440:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 8001442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001444:	4a07      	ldr	r2, [pc, #28]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 8001446:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800144a:	6593      	str	r3, [r2, #88]	@ 0x58
 800144c:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 800144e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001450:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
}
 8001458:	bf00      	nop
 800145a:	37c0      	adds	r7, #192	@ 0xc0
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40005400 	.word	0x40005400
 8001464:	40021000 	.word	0x40021000
 8001468:	48000400 	.word	0x48000400
 800146c:	40005800 	.word	0x40005800

08001470 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b0b0      	sub	sp, #192	@ 0xc0
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001488:	f107 0318 	add.w	r3, r7, #24
 800148c:	2294      	movs	r2, #148	@ 0x94
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f008 ffe1 	bl	800a458 <memset>
  if(hospi->Instance==OCTOSPI1)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a28      	ldr	r2, [pc, #160]	@ (800153c <HAL_OSPI_MspInit+0xcc>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d149      	bne.n	8001534 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80014a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ac:	f107 0318 	add.w	r3, r7, #24
 80014b0:	4618      	mov	r0, r3
 80014b2:	f003 fbcb 	bl	8004c4c <HAL_RCCEx_PeriphCLKConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 80014bc:	f7ff fe64 	bl	8001188 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 80014c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001540 <HAL_OSPI_MspInit+0xd0>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001540 <HAL_OSPI_MspInit+0xd0>)
 80014c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80014ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001540 <HAL_OSPI_MspInit+0xd0>)
 80014ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80014d8:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <HAL_OSPI_MspInit+0xd0>)
 80014da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014dc:	4a18      	ldr	r2, [pc, #96]	@ (8001540 <HAL_OSPI_MspInit+0xd0>)
 80014de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80014e4:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <HAL_OSPI_MspInit+0xd0>)
 80014e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014f0:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <HAL_OSPI_MspInit+0xd0>)
 80014f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f4:	4a12      	ldr	r2, [pc, #72]	@ (8001540 <HAL_OSPI_MspInit+0xd0>)
 80014f6:	f043 0310 	orr.w	r3, r3, #16
 80014fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fc:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <HAL_OSPI_MspInit+0xd0>)
 80014fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001500:	f003 0310 	and.w	r3, r3, #16
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001508:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800150c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001522:	230a      	movs	r3, #10
 8001524:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001528:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800152c:	4619      	mov	r1, r3
 800152e:	4805      	ldr	r0, [pc, #20]	@ (8001544 <HAL_OSPI_MspInit+0xd4>)
 8001530:	f001 fbbe 	bl	8002cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001534:	bf00      	nop
 8001536:	37c0      	adds	r7, #192	@ 0xc0
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	a0001000 	.word	0xa0001000
 8001540:	40021000 	.word	0x40021000
 8001544:	48001000 	.word	0x48001000

08001548 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	@ 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a17      	ldr	r2, [pc, #92]	@ (80015c4 <HAL_SPI_MspInit+0x7c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d128      	bne.n	80015bc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800156a:	4b17      	ldr	r3, [pc, #92]	@ (80015c8 <HAL_SPI_MspInit+0x80>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156e:	4a16      	ldr	r2, [pc, #88]	@ (80015c8 <HAL_SPI_MspInit+0x80>)
 8001570:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001574:	6593      	str	r3, [r2, #88]	@ 0x58
 8001576:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <HAL_SPI_MspInit+0x80>)
 8001578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <HAL_SPI_MspInit+0x80>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	4a10      	ldr	r2, [pc, #64]	@ (80015c8 <HAL_SPI_MspInit+0x80>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <HAL_SPI_MspInit+0x80>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800159a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800159e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a8:	2303      	movs	r3, #3
 80015aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015ac:	2306      	movs	r3, #6
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4619      	mov	r1, r3
 80015b6:	4805      	ldr	r0, [pc, #20]	@ (80015cc <HAL_SPI_MspInit+0x84>)
 80015b8:	f001 fb7a 	bl	8002cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015bc:	bf00      	nop
 80015be:	3728      	adds	r7, #40	@ 0x28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40003c00 	.word	0x40003c00
 80015c8:	40021000 	.word	0x40021000
 80015cc:	48000800 	.word	0x48000800

080015d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b0b4      	sub	sp, #208	@ 0xd0
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015ec:	2294      	movs	r2, #148	@ 0x94
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f008 ff31 	bl	800a458 <memset>
  if(huart->Instance==UART4)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a83      	ldr	r2, [pc, #524]	@ (8001808 <HAL_UART_MspInit+0x238>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d13c      	bne.n	800167a <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001600:	2308      	movs	r3, #8
 8001602:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001604:	2300      	movs	r3, #0
 8001606:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001608:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800160c:	4618      	mov	r0, r3
 800160e:	f003 fb1d 	bl	8004c4c <HAL_RCCEx_PeriphCLKConfig>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001618:	f7ff fdb6 	bl	8001188 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800161c:	4b7b      	ldr	r3, [pc, #492]	@ (800180c <HAL_UART_MspInit+0x23c>)
 800161e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001620:	4a7a      	ldr	r2, [pc, #488]	@ (800180c <HAL_UART_MspInit+0x23c>)
 8001622:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001626:	6593      	str	r3, [r2, #88]	@ 0x58
 8001628:	4b78      	ldr	r3, [pc, #480]	@ (800180c <HAL_UART_MspInit+0x23c>)
 800162a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001630:	627b      	str	r3, [r7, #36]	@ 0x24
 8001632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001634:	4b75      	ldr	r3, [pc, #468]	@ (800180c <HAL_UART_MspInit+0x23c>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001638:	4a74      	ldr	r2, [pc, #464]	@ (800180c <HAL_UART_MspInit+0x23c>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001640:	4b72      	ldr	r3, [pc, #456]	@ (800180c <HAL_UART_MspInit+0x23c>)
 8001642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	623b      	str	r3, [r7, #32]
 800164a:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800164c:	2303      	movs	r3, #3
 800164e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165e:	2303      	movs	r3, #3
 8001660:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001664:	2308      	movs	r3, #8
 8001666:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800166e:	4619      	mov	r1, r3
 8001670:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001674:	f001 fb1c 	bl	8002cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001678:	e0c2      	b.n	8001800 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a64      	ldr	r2, [pc, #400]	@ (8001810 <HAL_UART_MspInit+0x240>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d13b      	bne.n	80016fc <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001684:	2301      	movs	r3, #1
 8001686:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001688:	2300      	movs	r3, #0
 800168a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800168c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001690:	4618      	mov	r0, r3
 8001692:	f003 fadb 	bl	8004c4c <HAL_RCCEx_PeriphCLKConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 800169c:	f7ff fd74 	bl	8001188 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80016a0:	4b5a      	ldr	r3, [pc, #360]	@ (800180c <HAL_UART_MspInit+0x23c>)
 80016a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016a4:	4a59      	ldr	r2, [pc, #356]	@ (800180c <HAL_UART_MspInit+0x23c>)
 80016a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80016ac:	4b57      	ldr	r3, [pc, #348]	@ (800180c <HAL_UART_MspInit+0x23c>)
 80016ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b8:	4b54      	ldr	r3, [pc, #336]	@ (800180c <HAL_UART_MspInit+0x23c>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016bc:	4a53      	ldr	r2, [pc, #332]	@ (800180c <HAL_UART_MspInit+0x23c>)
 80016be:	f043 0302 	orr.w	r3, r3, #2
 80016c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c4:	4b51      	ldr	r3, [pc, #324]	@ (800180c <HAL_UART_MspInit+0x23c>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	61bb      	str	r3, [r7, #24]
 80016ce:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80016d0:	23c0      	movs	r3, #192	@ 0xc0
 80016d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016e8:	2307      	movs	r3, #7
 80016ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ee:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80016f2:	4619      	mov	r1, r3
 80016f4:	4847      	ldr	r0, [pc, #284]	@ (8001814 <HAL_UART_MspInit+0x244>)
 80016f6:	f001 fadb 	bl	8002cb0 <HAL_GPIO_Init>
}
 80016fa:	e081      	b.n	8001800 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a45      	ldr	r2, [pc, #276]	@ (8001818 <HAL_UART_MspInit+0x248>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d13b      	bne.n	800177e <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001706:	2302      	movs	r3, #2
 8001708:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800170a:	2300      	movs	r3, #0
 800170c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800170e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001712:	4618      	mov	r0, r3
 8001714:	f003 fa9a 	bl	8004c4c <HAL_RCCEx_PeriphCLKConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_UART_MspInit+0x152>
      Error_Handler();
 800171e:	f7ff fd33 	bl	8001188 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001722:	4b3a      	ldr	r3, [pc, #232]	@ (800180c <HAL_UART_MspInit+0x23c>)
 8001724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001726:	4a39      	ldr	r2, [pc, #228]	@ (800180c <HAL_UART_MspInit+0x23c>)
 8001728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800172c:	6593      	str	r3, [r2, #88]	@ 0x58
 800172e:	4b37      	ldr	r3, [pc, #220]	@ (800180c <HAL_UART_MspInit+0x23c>)
 8001730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800173a:	4b34      	ldr	r3, [pc, #208]	@ (800180c <HAL_UART_MspInit+0x23c>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173e:	4a33      	ldr	r2, [pc, #204]	@ (800180c <HAL_UART_MspInit+0x23c>)
 8001740:	f043 0308 	orr.w	r3, r3, #8
 8001744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001746:	4b31      	ldr	r3, [pc, #196]	@ (800180c <HAL_UART_MspInit+0x23c>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001752:	2378      	movs	r3, #120	@ 0x78
 8001754:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800176a:	2307      	movs	r3, #7
 800176c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001770:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001774:	4619      	mov	r1, r3
 8001776:	4829      	ldr	r0, [pc, #164]	@ (800181c <HAL_UART_MspInit+0x24c>)
 8001778:	f001 fa9a 	bl	8002cb0 <HAL_GPIO_Init>
}
 800177c:	e040      	b.n	8001800 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a27      	ldr	r2, [pc, #156]	@ (8001820 <HAL_UART_MspInit+0x250>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d13b      	bne.n	8001800 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001788:	2304      	movs	r3, #4
 800178a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800178c:	2300      	movs	r3, #0
 800178e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001790:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001794:	4618      	mov	r0, r3
 8001796:	f003 fa59 	bl	8004c4c <HAL_RCCEx_PeriphCLKConfig>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 80017a0:	f7ff fcf2 	bl	8001188 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017a4:	4b19      	ldr	r3, [pc, #100]	@ (800180c <HAL_UART_MspInit+0x23c>)
 80017a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a8:	4a18      	ldr	r2, [pc, #96]	@ (800180c <HAL_UART_MspInit+0x23c>)
 80017aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80017b0:	4b16      	ldr	r3, [pc, #88]	@ (800180c <HAL_UART_MspInit+0x23c>)
 80017b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017bc:	4b13      	ldr	r3, [pc, #76]	@ (800180c <HAL_UART_MspInit+0x23c>)
 80017be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c0:	4a12      	ldr	r2, [pc, #72]	@ (800180c <HAL_UART_MspInit+0x23c>)
 80017c2:	f043 0308 	orr.w	r3, r3, #8
 80017c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017c8:	4b10      	ldr	r3, [pc, #64]	@ (800180c <HAL_UART_MspInit+0x23c>)
 80017ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80017d4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	2303      	movs	r3, #3
 80017ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017ee:	2307      	movs	r3, #7
 80017f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017f4:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80017f8:	4619      	mov	r1, r3
 80017fa:	4808      	ldr	r0, [pc, #32]	@ (800181c <HAL_UART_MspInit+0x24c>)
 80017fc:	f001 fa58 	bl	8002cb0 <HAL_GPIO_Init>
}
 8001800:	bf00      	nop
 8001802:	37d0      	adds	r7, #208	@ 0xd0
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40004c00 	.word	0x40004c00
 800180c:	40021000 	.word	0x40021000
 8001810:	40013800 	.word	0x40013800
 8001814:	48000400 	.word	0x48000400
 8001818:	40004400 	.word	0x40004400
 800181c:	48000c00 	.word	0x48000c00
 8001820:	40004800 	.word	0x40004800

08001824 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08e      	sub	sp, #56	@ 0x38
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001832:	4b34      	ldr	r3, [pc, #208]	@ (8001904 <HAL_InitTick+0xe0>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001836:	4a33      	ldr	r2, [pc, #204]	@ (8001904 <HAL_InitTick+0xe0>)
 8001838:	f043 0310 	orr.w	r3, r3, #16
 800183c:	6593      	str	r3, [r2, #88]	@ 0x58
 800183e:	4b31      	ldr	r3, [pc, #196]	@ (8001904 <HAL_InitTick+0xe0>)
 8001840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800184a:	f107 0210 	add.w	r2, r7, #16
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f003 f907 	bl	8004a68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800185e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001860:	2b00      	cmp	r3, #0
 8001862:	d103      	bne.n	800186c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001864:	f003 f8d4 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 8001868:	6378      	str	r0, [r7, #52]	@ 0x34
 800186a:	e004      	b.n	8001876 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800186c:	f003 f8d0 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 8001870:	4603      	mov	r3, r0
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001878:	4a23      	ldr	r2, [pc, #140]	@ (8001908 <HAL_InitTick+0xe4>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	0c9b      	lsrs	r3, r3, #18
 8001880:	3b01      	subs	r3, #1
 8001882:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001884:	4b21      	ldr	r3, [pc, #132]	@ (800190c <HAL_InitTick+0xe8>)
 8001886:	4a22      	ldr	r2, [pc, #136]	@ (8001910 <HAL_InitTick+0xec>)
 8001888:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800188a:	4b20      	ldr	r3, [pc, #128]	@ (800190c <HAL_InitTick+0xe8>)
 800188c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001890:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001892:	4a1e      	ldr	r2, [pc, #120]	@ (800190c <HAL_InitTick+0xe8>)
 8001894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001896:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001898:	4b1c      	ldr	r3, [pc, #112]	@ (800190c <HAL_InitTick+0xe8>)
 800189a:	2200      	movs	r2, #0
 800189c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189e:	4b1b      	ldr	r3, [pc, #108]	@ (800190c <HAL_InitTick+0xe8>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a4:	4b19      	ldr	r3, [pc, #100]	@ (800190c <HAL_InitTick+0xe8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80018aa:	4818      	ldr	r0, [pc, #96]	@ (800190c <HAL_InitTick+0xe8>)
 80018ac:	f003 ff99 	bl	80057e2 <HAL_TIM_Base_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80018b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d11b      	bne.n	80018f6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80018be:	4813      	ldr	r0, [pc, #76]	@ (800190c <HAL_InitTick+0xe8>)
 80018c0:	f003 fff0 	bl	80058a4 <HAL_TIM_Base_Start_IT>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80018ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d111      	bne.n	80018f6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018d2:	2036      	movs	r0, #54	@ 0x36
 80018d4:	f001 f8d2 	bl	8002a7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b0f      	cmp	r3, #15
 80018dc:	d808      	bhi.n	80018f0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80018de:	2200      	movs	r2, #0
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	2036      	movs	r0, #54	@ 0x36
 80018e4:	f001 f8ae 	bl	8002a44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001914 <HAL_InitTick+0xf0>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e002      	b.n	80018f6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80018f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3738      	adds	r7, #56	@ 0x38
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000
 8001908:	431bde83 	.word	0x431bde83
 800190c:	200004e8 	.word	0x200004e8
 8001910:	40001000 	.word	0x40001000
 8001914:	20000008 	.word	0x20000008

08001918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <NMI_Handler+0x4>

08001920 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <HardFault_Handler+0x4>

08001928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <MemManage_Handler+0x4>

08001930 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <BusFault_Handler+0x4>

08001938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <UsageFault_Handler+0x4>

08001940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001952:	2020      	movs	r0, #32
 8001954:	f001 fb70 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001958:	2040      	movs	r0, #64	@ 0x40
 800195a:	f001 fb6d 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800195e:	2080      	movs	r0, #128	@ 0x80
 8001960:	f001 fb6a 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001964:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001968:	f001 fb66 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8001974:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001978:	f001 fb5e 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800197c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001980:	f001 fb5a 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8001984:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001988:	f001 fb56 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800198c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001990:	f001 fb52 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001994:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001998:	f001 fb4e 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800199c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80019a0:	f001 fb4a 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019ac:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <TIM6_DAC_IRQHandler+0x10>)
 80019ae:	f003 ffe9 	bl	8005984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200004e8 	.word	0x200004e8

080019bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c4:	4a14      	ldr	r2, [pc, #80]	@ (8001a18 <_sbrk+0x5c>)
 80019c6:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <_sbrk+0x60>)
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d0:	4b13      	ldr	r3, [pc, #76]	@ (8001a20 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d102      	bne.n	80019de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d8:	4b11      	ldr	r3, [pc, #68]	@ (8001a20 <_sbrk+0x64>)
 80019da:	4a12      	ldr	r2, [pc, #72]	@ (8001a24 <_sbrk+0x68>)
 80019dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019de:	4b10      	ldr	r3, [pc, #64]	@ (8001a20 <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d207      	bcs.n	80019fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ec:	f008 fd92 	bl	800a514 <__errno>
 80019f0:	4603      	mov	r3, r0
 80019f2:	220c      	movs	r2, #12
 80019f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295
 80019fa:	e009      	b.n	8001a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019fc:	4b08      	ldr	r3, [pc, #32]	@ (8001a20 <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a02:	4b07      	ldr	r3, [pc, #28]	@ (8001a20 <_sbrk+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	4a05      	ldr	r2, [pc, #20]	@ (8001a20 <_sbrk+0x64>)
 8001a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	200a0000 	.word	0x200a0000
 8001a1c:	00000400 	.word	0x00000400
 8001a20:	20000534 	.word	0x20000534
 8001a24:	20002048 	.word	0x20002048

08001a28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a2c:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <SystemInit+0x20>)
 8001a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a32:	4a05      	ldr	r2, [pc, #20]	@ (8001a48 <SystemInit+0x20>)
 8001a34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a50:	f7ff ffea 	bl	8001a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a54:	480c      	ldr	r0, [pc, #48]	@ (8001a88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a56:	490d      	ldr	r1, [pc, #52]	@ (8001a8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a58:	4a0d      	ldr	r2, [pc, #52]	@ (8001a90 <LoopForever+0xe>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a5c:	e002      	b.n	8001a64 <LoopCopyDataInit>

08001a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a62:	3304      	adds	r3, #4

08001a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a68:	d3f9      	bcc.n	8001a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a98 <LoopForever+0x16>)
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a70:	e001      	b.n	8001a76 <LoopFillZerobss>

08001a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a74:	3204      	adds	r2, #4

08001a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a78:	d3fb      	bcc.n	8001a72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a7a:	f008 fd51 	bl	800a520 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a7e:	f7fe fd87 	bl	8000590 <main>

08001a82 <LoopForever>:

LoopForever:
    b LoopForever
 8001a82:	e7fe      	b.n	8001a82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a84:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a8c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001a90:	0800afc8 	.word	0x0800afc8
  ldr r2, =_sbss
 8001a94:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001a98:	20002048 	.word	0x20002048

08001a9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a9c:	e7fe      	b.n	8001a9c <ADC1_IRQHandler>

08001a9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa8:	2003      	movs	r0, #3
 8001aaa:	f000 ffc0 	bl	8002a2e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aae:	200f      	movs	r0, #15
 8001ab0:	f7ff feb8 	bl	8001824 <HAL_InitTick>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	71fb      	strb	r3, [r7, #7]
 8001abe:	e001      	b.n	8001ac4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ac0:	f7ff fb68 	bl	8001194 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <HAL_IncTick+0x20>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <HAL_IncTick+0x24>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4413      	add	r3, r2
 8001ae0:	4a04      	ldr	r2, [pc, #16]	@ (8001af4 <HAL_IncTick+0x24>)
 8001ae2:	6013      	str	r3, [r2, #0]
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	2000000c 	.word	0x2000000c
 8001af4:	20000538 	.word	0x20000538

08001af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return uwTick;
 8001afc:	4b03      	ldr	r3, [pc, #12]	@ (8001b0c <HAL_GetTick+0x14>)
 8001afe:	681b      	ldr	r3, [r3, #0]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000538 	.word	0x20000538

08001b10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	609a      	str	r2, [r3, #8]
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
 8001b84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	3360      	adds	r3, #96	@ 0x60
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <LL_ADC_SetOffset+0x44>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001bb0:	bf00      	nop
 8001bb2:	371c      	adds	r7, #28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	03fff000 	.word	0x03fff000

08001bc0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3360      	adds	r3, #96	@ 0x60
 8001bce:	461a      	mov	r2, r3
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3360      	adds	r3, #96	@ 0x60
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	431a      	orrs	r2, r3
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c16:	bf00      	nop
 8001c18:	371c      	adds	r7, #28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	615a      	str	r2, [r3, #20]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b087      	sub	sp, #28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	3330      	adds	r3, #48	@ 0x30
 8001c58:	461a      	mov	r2, r3
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	0a1b      	lsrs	r3, r3, #8
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	f003 030c 	and.w	r3, r3, #12
 8001c64:	4413      	add	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	211f      	movs	r1, #31
 8001c74:	fa01 f303 	lsl.w	r3, r1, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	0e9b      	lsrs	r3, r3, #26
 8001c80:	f003 011f 	and.w	r1, r3, #31
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c94:	bf00      	nop
 8001c96:	371c      	adds	r7, #28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	3314      	adds	r3, #20
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	0e5b      	lsrs	r3, r3, #25
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	4413      	add	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	0d1b      	lsrs	r3, r3, #20
 8001cc8:	f003 031f 	and.w	r3, r3, #31
 8001ccc:	2107      	movs	r1, #7
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	0d1b      	lsrs	r3, r3, #20
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cea:	bf00      	nop
 8001cec:	371c      	adds	r7, #28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d10:	43db      	mvns	r3, r3
 8001d12:	401a      	ands	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 0318 	and.w	r3, r3, #24
 8001d1a:	4908      	ldr	r1, [pc, #32]	@ (8001d3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d1c:	40d9      	lsrs	r1, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	400b      	ands	r3, r1
 8001d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d26:	431a      	orrs	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d2e:	bf00      	nop
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	0007ffff 	.word	0x0007ffff

08001d40 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001d50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6093      	str	r3, [r2, #8]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d78:	d101      	bne.n	8001d7e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001d9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001da0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001dc8:	d101      	bne.n	8001dce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <LL_ADC_IsEnabled+0x18>
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <LL_ADC_IsEnabled+0x1a>
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d101      	bne.n	8001e1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d101      	bne.n	8001e40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e129      	b.n	80020be <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d109      	bne.n	8001e8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff f9b3 	bl	80011e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff67 	bl	8001d64 <LL_ADC_IsDeepPowerDownEnabled>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d004      	beq.n	8001ea6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff4d 	bl	8001d40 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff ff82 	bl	8001db4 <LL_ADC_IsInternalRegulatorEnabled>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d115      	bne.n	8001ee2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ff66 	bl	8001d8c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ec0:	4b81      	ldr	r3, [pc, #516]	@ (80020c8 <HAL_ADC_Init+0x278>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	099b      	lsrs	r3, r3, #6
 8001ec6:	4a81      	ldr	r2, [pc, #516]	@ (80020cc <HAL_ADC_Init+0x27c>)
 8001ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ecc:	099b      	lsrs	r3, r3, #6
 8001ece:	3301      	adds	r3, #1
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ed4:	e002      	b.n	8001edc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f9      	bne.n	8001ed6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff ff64 	bl	8001db4 <LL_ADC_IsInternalRegulatorEnabled>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10d      	bne.n	8001f0e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef6:	f043 0210 	orr.w	r2, r3, #16
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f02:	f043 0201 	orr.w	r2, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ff75 	bl	8001e02 <LL_ADC_REG_IsConversionOngoing>
 8001f18:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f040 80c2 	bne.w	80020ac <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f040 80be 	bne.w	80020ac <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f34:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f38:	f043 0202 	orr.w	r2, r3, #2
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff49 	bl	8001ddc <LL_ADC_IsEnabled>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10b      	bne.n	8001f68 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f50:	485f      	ldr	r0, [pc, #380]	@ (80020d0 <HAL_ADC_Init+0x280>)
 8001f52:	f7ff ff43 	bl	8001ddc <LL_ADC_IsEnabled>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d105      	bne.n	8001f68 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4619      	mov	r1, r3
 8001f62:	485c      	ldr	r0, [pc, #368]	@ (80020d4 <HAL_ADC_Init+0x284>)
 8001f64:	f7ff fdd4 	bl	8001b10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	7e5b      	ldrb	r3, [r3, #25]
 8001f6c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f72:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f78:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f7e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f86:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d106      	bne.n	8001fa4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	045b      	lsls	r3, r3, #17
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d009      	beq.n	8001fc0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	4b44      	ldr	r3, [pc, #272]	@ (80020d8 <HAL_ADC_Init+0x288>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	69b9      	ldr	r1, [r7, #24]
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff25 	bl	8001e28 <LL_ADC_INJ_IsConversionOngoing>
 8001fde:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d140      	bne.n	8002068 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d13d      	bne.n	8002068 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	7e1b      	ldrb	r3, [r3, #24]
 8001ff4:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ff6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ffe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800200e:	f023 0306 	bic.w	r3, r3, #6
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	69b9      	ldr	r1, [r7, #24]
 8002018:	430b      	orrs	r3, r1
 800201a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002022:	2b01      	cmp	r3, #1
 8002024:	d118      	bne.n	8002058 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002030:	f023 0304 	bic.w	r3, r3, #4
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800203c:	4311      	orrs	r1, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002042:	4311      	orrs	r1, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002048:	430a      	orrs	r2, r1
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0201 	orr.w	r2, r2, #1
 8002054:	611a      	str	r2, [r3, #16]
 8002056:	e007      	b.n	8002068 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0201 	bic.w	r2, r2, #1
 8002066:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d10c      	bne.n	800208a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	f023 010f 	bic.w	r1, r3, #15
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	1e5a      	subs	r2, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	631a      	str	r2, [r3, #48]	@ 0x30
 8002088:	e007      	b.n	800209a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 020f 	bic.w	r2, r2, #15
 8002098:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209e:	f023 0303 	bic.w	r3, r3, #3
 80020a2:	f043 0201 	orr.w	r2, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80020aa:	e007      	b.n	80020bc <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b0:	f043 0210 	orr.w	r2, r3, #16
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3720      	adds	r7, #32
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000004 	.word	0x20000004
 80020cc:	053e2d63 	.word	0x053e2d63
 80020d0:	50040000 	.word	0x50040000
 80020d4:	50040300 	.word	0x50040300
 80020d8:	fff0c007 	.word	0xfff0c007

080020dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b0b6      	sub	sp, #216	@ 0xd8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d101      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x22>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e3d5      	b.n	80028aa <HAL_ADC_ConfigChannel+0x7ce>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fe79 	bl	8001e02 <LL_ADC_REG_IsConversionOngoing>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	f040 83ba 	bne.w	800288c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b05      	cmp	r3, #5
 8002126:	d824      	bhi.n	8002172 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	3b02      	subs	r3, #2
 800212e:	2b03      	cmp	r3, #3
 8002130:	d81b      	bhi.n	800216a <HAL_ADC_ConfigChannel+0x8e>
 8002132:	a201      	add	r2, pc, #4	@ (adr r2, 8002138 <HAL_ADC_ConfigChannel+0x5c>)
 8002134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002138:	08002149 	.word	0x08002149
 800213c:	08002151 	.word	0x08002151
 8002140:	08002159 	.word	0x08002159
 8002144:	08002161 	.word	0x08002161
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002148:	230c      	movs	r3, #12
 800214a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800214e:	e010      	b.n	8002172 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002150:	2312      	movs	r3, #18
 8002152:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002156:	e00c      	b.n	8002172 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002158:	2318      	movs	r3, #24
 800215a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800215e:	e008      	b.n	8002172 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002160:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002164:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002168:	e003      	b.n	8002172 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800216a:	2306      	movs	r3, #6
 800216c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002170:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002180:	f7ff fd62 	bl	8001c48 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fe3a 	bl	8001e02 <LL_ADC_REG_IsConversionOngoing>
 800218e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fe46 	bl	8001e28 <LL_ADC_INJ_IsConversionOngoing>
 800219c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f040 81bf 	bne.w	8002528 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f040 81ba 	bne.w	8002528 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80021bc:	d10f      	bne.n	80021de <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2200      	movs	r2, #0
 80021c8:	4619      	mov	r1, r3
 80021ca:	f7ff fd69 	bl	8001ca0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fd23 	bl	8001c22 <LL_ADC_SetSamplingTimeCommonConfig>
 80021dc:	e00e      	b.n	80021fc <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6818      	ldr	r0, [r3, #0]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	6819      	ldr	r1, [r3, #0]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	461a      	mov	r2, r3
 80021ec:	f7ff fd58 	bl	8001ca0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2100      	movs	r1, #0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fd13 	bl	8001c22 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	08db      	lsrs	r3, r3, #3
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b04      	cmp	r3, #4
 800221c:	d00a      	beq.n	8002234 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	6919      	ldr	r1, [r3, #16]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800222e:	f7ff fca3 	bl	8001b78 <LL_ADC_SetOffset>
 8002232:	e179      	b.n	8002528 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2100      	movs	r1, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff fcc0 	bl	8001bc0 <LL_ADC_GetOffsetChannel>
 8002240:	4603      	mov	r3, r0
 8002242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10a      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x184>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fcb5 	bl	8001bc0 <LL_ADC_GetOffsetChannel>
 8002256:	4603      	mov	r3, r0
 8002258:	0e9b      	lsrs	r3, r3, #26
 800225a:	f003 021f 	and.w	r2, r3, #31
 800225e:	e01e      	b.n	800229e <HAL_ADC_ConfigChannel+0x1c2>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2100      	movs	r1, #0
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff fcaa 	bl	8001bc0 <LL_ADC_GetOffsetChannel>
 800226c:	4603      	mov	r3, r0
 800226e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800227e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002282:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002286:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800228e:	2320      	movs	r3, #32
 8002290:	e004      	b.n	800229c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002292:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002296:	fab3 f383 	clz	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d105      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x1da>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	0e9b      	lsrs	r3, r3, #26
 80022b0:	f003 031f 	and.w	r3, r3, #31
 80022b4:	e018      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x20c>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80022ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80022d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80022da:	2320      	movs	r3, #32
 80022dc:	e004      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80022de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d106      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2200      	movs	r2, #0
 80022f2:	2100      	movs	r1, #0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fc79 	bl	8001bec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2101      	movs	r1, #1
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fc5d 	bl	8001bc0 <LL_ADC_GetOffsetChannel>
 8002306:	4603      	mov	r3, r0
 8002308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10a      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x24a>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2101      	movs	r1, #1
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fc52 	bl	8001bc0 <LL_ADC_GetOffsetChannel>
 800231c:	4603      	mov	r3, r0
 800231e:	0e9b      	lsrs	r3, r3, #26
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	e01e      	b.n	8002364 <HAL_ADC_ConfigChannel+0x288>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2101      	movs	r1, #1
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fc47 	bl	8001bc0 <LL_ADC_GetOffsetChannel>
 8002332:	4603      	mov	r3, r0
 8002334:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002338:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800233c:	fa93 f3a3 	rbit	r3, r3
 8002340:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002344:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002348:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800234c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002354:	2320      	movs	r3, #32
 8002356:	e004      	b.n	8002362 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002358:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236c:	2b00      	cmp	r3, #0
 800236e:	d105      	bne.n	800237c <HAL_ADC_ConfigChannel+0x2a0>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	0e9b      	lsrs	r3, r3, #26
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	e018      	b.n	80023ae <HAL_ADC_ConfigChannel+0x2d2>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002388:	fa93 f3a3 	rbit	r3, r3
 800238c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002390:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002394:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002398:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80023a0:	2320      	movs	r3, #32
 80023a2:	e004      	b.n	80023ae <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80023a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023a8:	fab3 f383 	clz	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d106      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2200      	movs	r2, #0
 80023b8:	2101      	movs	r1, #1
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fc16 	bl	8001bec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2102      	movs	r1, #2
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff fbfa 	bl	8001bc0 <LL_ADC_GetOffsetChannel>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10a      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x310>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2102      	movs	r1, #2
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fbef 	bl	8001bc0 <LL_ADC_GetOffsetChannel>
 80023e2:	4603      	mov	r3, r0
 80023e4:	0e9b      	lsrs	r3, r3, #26
 80023e6:	f003 021f 	and.w	r2, r3, #31
 80023ea:	e01e      	b.n	800242a <HAL_ADC_ConfigChannel+0x34e>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2102      	movs	r1, #2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fbe4 	bl	8001bc0 <LL_ADC_GetOffsetChannel>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800240a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800240e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002412:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800241a:	2320      	movs	r3, #32
 800241c:	e004      	b.n	8002428 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800241e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002432:	2b00      	cmp	r3, #0
 8002434:	d105      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x366>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	0e9b      	lsrs	r3, r3, #26
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	e014      	b.n	800246c <HAL_ADC_ConfigChannel+0x390>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002450:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002452:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002456:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800245e:	2320      	movs	r3, #32
 8002460:	e004      	b.n	800246c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002462:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800246c:	429a      	cmp	r2, r3
 800246e:	d106      	bne.n	800247e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2200      	movs	r2, #0
 8002476:	2102      	movs	r1, #2
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fbb7 	bl	8001bec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2103      	movs	r1, #3
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fb9b 	bl	8001bc0 <LL_ADC_GetOffsetChannel>
 800248a:	4603      	mov	r3, r0
 800248c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10a      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x3ce>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2103      	movs	r1, #3
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fb90 	bl	8001bc0 <LL_ADC_GetOffsetChannel>
 80024a0:	4603      	mov	r3, r0
 80024a2:	0e9b      	lsrs	r3, r3, #26
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	e017      	b.n	80024da <HAL_ADC_ConfigChannel+0x3fe>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2103      	movs	r1, #3
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fb85 	bl	8001bc0 <LL_ADC_GetOffsetChannel>
 80024b6:	4603      	mov	r3, r0
 80024b8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024bc:	fa93 f3a3 	rbit	r3, r3
 80024c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80024c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024c4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80024c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80024cc:	2320      	movs	r3, #32
 80024ce:	e003      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80024d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d105      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x416>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	0e9b      	lsrs	r3, r3, #26
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	e011      	b.n	8002516 <HAL_ADC_ConfigChannel+0x43a>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002500:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002502:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002504:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800250a:	2320      	movs	r3, #32
 800250c:	e003      	b.n	8002516 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800250e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002510:	fab3 f383 	clz	r3, r3
 8002514:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002516:	429a      	cmp	r2, r3
 8002518:	d106      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2200      	movs	r2, #0
 8002520:	2103      	movs	r1, #3
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fb62 	bl	8001bec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fc55 	bl	8001ddc <LL_ADC_IsEnabled>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	f040 813f 	bne.w	80027b8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	6819      	ldr	r1, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	461a      	mov	r2, r3
 8002548:	f7ff fbd6 	bl	8001cf8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4a8e      	ldr	r2, [pc, #568]	@ (800278c <HAL_ADC_ConfigChannel+0x6b0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	f040 8130 	bne.w	80027b8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10b      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x4a4>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0e9b      	lsrs	r3, r3, #26
 800256e:	3301      	adds	r3, #1
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2b09      	cmp	r3, #9
 8002576:	bf94      	ite	ls
 8002578:	2301      	movls	r3, #1
 800257a:	2300      	movhi	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	e019      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x4d8>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800258e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002590:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002592:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002598:	2320      	movs	r3, #32
 800259a:	e003      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800259c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	3301      	adds	r3, #1
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	2b09      	cmp	r3, #9
 80025ac:	bf94      	ite	ls
 80025ae:	2301      	movls	r3, #1
 80025b0:	2300      	movhi	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d079      	beq.n	80026ac <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d107      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x4f8>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0e9b      	lsrs	r3, r3, #26
 80025ca:	3301      	adds	r3, #1
 80025cc:	069b      	lsls	r3, r3, #26
 80025ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025d2:	e015      	b.n	8002600 <HAL_ADC_ConfigChannel+0x524>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80025e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025e4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80025e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80025ec:	2320      	movs	r3, #32
 80025ee:	e003      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80025f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	3301      	adds	r3, #1
 80025fa:	069b      	lsls	r3, r3, #26
 80025fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002608:	2b00      	cmp	r3, #0
 800260a:	d109      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x544>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	0e9b      	lsrs	r3, r3, #26
 8002612:	3301      	adds	r3, #1
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	2101      	movs	r1, #1
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	e017      	b.n	8002650 <HAL_ADC_ConfigChannel+0x574>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800262e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002630:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002632:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002638:	2320      	movs	r3, #32
 800263a:	e003      	b.n	8002644 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800263c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	3301      	adds	r3, #1
 8002646:	f003 031f 	and.w	r3, r3, #31
 800264a:	2101      	movs	r1, #1
 800264c:	fa01 f303 	lsl.w	r3, r1, r3
 8002650:	ea42 0103 	orr.w	r1, r2, r3
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10a      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x59a>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	0e9b      	lsrs	r3, r3, #26
 8002666:	3301      	adds	r3, #1
 8002668:	f003 021f 	and.w	r2, r3, #31
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	051b      	lsls	r3, r3, #20
 8002674:	e018      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x5cc>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002686:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800268e:	2320      	movs	r3, #32
 8002690:	e003      	b.n	800269a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	3301      	adds	r3, #1
 800269c:	f003 021f 	and.w	r2, r3, #31
 80026a0:	4613      	mov	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026a8:	430b      	orrs	r3, r1
 80026aa:	e080      	b.n	80027ae <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d107      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x5ec>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	0e9b      	lsrs	r3, r3, #26
 80026be:	3301      	adds	r3, #1
 80026c0:	069b      	lsls	r3, r3, #26
 80026c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026c6:	e015      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x618>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80026da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80026e0:	2320      	movs	r3, #32
 80026e2:	e003      	b.n	80026ec <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80026e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	069b      	lsls	r3, r3, #26
 80026f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d109      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x638>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	0e9b      	lsrs	r3, r3, #26
 8002706:	3301      	adds	r3, #1
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	e017      	b.n	8002744 <HAL_ADC_ConfigChannel+0x668>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	61bb      	str	r3, [r7, #24]
  return result;
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800272c:	2320      	movs	r3, #32
 800272e:	e003      	b.n	8002738 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	3301      	adds	r3, #1
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	2101      	movs	r1, #1
 8002740:	fa01 f303 	lsl.w	r3, r1, r3
 8002744:	ea42 0103 	orr.w	r1, r2, r3
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10d      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x694>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	0e9b      	lsrs	r3, r3, #26
 800275a:	3301      	adds	r3, #1
 800275c:	f003 021f 	and.w	r2, r3, #31
 8002760:	4613      	mov	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4413      	add	r3, r2
 8002766:	3b1e      	subs	r3, #30
 8002768:	051b      	lsls	r3, r3, #20
 800276a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800276e:	e01d      	b.n	80027ac <HAL_ADC_ConfigChannel+0x6d0>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	60fb      	str	r3, [r7, #12]
  return result;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d103      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002788:	2320      	movs	r3, #32
 800278a:	e005      	b.n	8002798 <HAL_ADC_ConfigChannel+0x6bc>
 800278c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	fab3 f383 	clz	r3, r3
 8002796:	b2db      	uxtb	r3, r3
 8002798:	3301      	adds	r3, #1
 800279a:	f003 021f 	and.w	r2, r3, #31
 800279e:	4613      	mov	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	3b1e      	subs	r3, #30
 80027a6:	051b      	lsls	r3, r3, #20
 80027a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027b2:	4619      	mov	r1, r3
 80027b4:	f7ff fa74 	bl	8001ca0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b3d      	ldr	r3, [pc, #244]	@ (80028b4 <HAL_ADC_ConfigChannel+0x7d8>)
 80027be:	4013      	ands	r3, r2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d06c      	beq.n	800289e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027c4:	483c      	ldr	r0, [pc, #240]	@ (80028b8 <HAL_ADC_ConfigChannel+0x7dc>)
 80027c6:	f7ff f9c9 	bl	8001b5c <LL_ADC_GetCommonPathInternalCh>
 80027ca:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a3a      	ldr	r2, [pc, #232]	@ (80028bc <HAL_ADC_ConfigChannel+0x7e0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d127      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d121      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a35      	ldr	r2, [pc, #212]	@ (80028c0 <HAL_ADC_ConfigChannel+0x7e4>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d157      	bne.n	800289e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027f6:	4619      	mov	r1, r3
 80027f8:	482f      	ldr	r0, [pc, #188]	@ (80028b8 <HAL_ADC_ConfigChannel+0x7dc>)
 80027fa:	f7ff f99c 	bl	8001b36 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027fe:	4b31      	ldr	r3, [pc, #196]	@ (80028c4 <HAL_ADC_ConfigChannel+0x7e8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	099b      	lsrs	r3, r3, #6
 8002804:	4a30      	ldr	r2, [pc, #192]	@ (80028c8 <HAL_ADC_ConfigChannel+0x7ec>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	099b      	lsrs	r3, r3, #6
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	4613      	mov	r3, r2
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002818:	e002      	b.n	8002820 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	3b01      	subs	r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f9      	bne.n	800281a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002826:	e03a      	b.n	800289e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a27      	ldr	r2, [pc, #156]	@ (80028cc <HAL_ADC_ConfigChannel+0x7f0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d113      	bne.n	800285a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002832:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002836:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10d      	bne.n	800285a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1f      	ldr	r2, [pc, #124]	@ (80028c0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d12a      	bne.n	800289e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002848:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800284c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002850:	4619      	mov	r1, r3
 8002852:	4819      	ldr	r0, [pc, #100]	@ (80028b8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002854:	f7ff f96f 	bl	8001b36 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002858:	e021      	b.n	800289e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1c      	ldr	r2, [pc, #112]	@ (80028d0 <HAL_ADC_ConfigChannel+0x7f4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d11c      	bne.n	800289e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002864:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002868:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d116      	bne.n	800289e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a12      	ldr	r2, [pc, #72]	@ (80028c0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d111      	bne.n	800289e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800287a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800287e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002882:	4619      	mov	r1, r3
 8002884:	480c      	ldr	r0, [pc, #48]	@ (80028b8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002886:	f7ff f956 	bl	8001b36 <LL_ADC_SetCommonPathInternalCh>
 800288a:	e008      	b.n	800289e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002890:	f043 0220 	orr.w	r2, r3, #32
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80028a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	37d8      	adds	r7, #216	@ 0xd8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	80080000 	.word	0x80080000
 80028b8:	50040300 	.word	0x50040300
 80028bc:	c7520000 	.word	0xc7520000
 80028c0:	50040000 	.word	0x50040000
 80028c4:	20000004 	.word	0x20000004
 80028c8:	053e2d63 	.word	0x053e2d63
 80028cc:	cb840000 	.word	0xcb840000
 80028d0:	80000001 	.word	0x80000001

080028d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028f0:	4013      	ands	r3, r2
 80028f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002906:	4a04      	ldr	r2, [pc, #16]	@ (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	60d3      	str	r3, [r2, #12]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002920:	4b04      	ldr	r3, [pc, #16]	@ (8002934 <__NVIC_GetPriorityGrouping+0x18>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	f003 0307 	and.w	r3, r3, #7
}
 800292a:	4618      	mov	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	2b00      	cmp	r3, #0
 8002948:	db0b      	blt.n	8002962 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	f003 021f 	and.w	r2, r3, #31
 8002950:	4907      	ldr	r1, [pc, #28]	@ (8002970 <__NVIC_EnableIRQ+0x38>)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	2001      	movs	r0, #1
 800295a:	fa00 f202 	lsl.w	r2, r0, r2
 800295e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	e000e100 	.word	0xe000e100

08002974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	6039      	str	r1, [r7, #0]
 800297e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002984:	2b00      	cmp	r3, #0
 8002986:	db0a      	blt.n	800299e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	490c      	ldr	r1, [pc, #48]	@ (80029c0 <__NVIC_SetPriority+0x4c>)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	0112      	lsls	r2, r2, #4
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	440b      	add	r3, r1
 8002998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800299c:	e00a      	b.n	80029b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	4908      	ldr	r1, [pc, #32]	@ (80029c4 <__NVIC_SetPriority+0x50>)
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	3b04      	subs	r3, #4
 80029ac:	0112      	lsls	r2, r2, #4
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	440b      	add	r3, r1
 80029b2:	761a      	strb	r2, [r3, #24]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000e100 	.word	0xe000e100
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b089      	sub	sp, #36	@ 0x24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f1c3 0307 	rsb	r3, r3, #7
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	bf28      	it	cs
 80029e6:	2304      	movcs	r3, #4
 80029e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3304      	adds	r3, #4
 80029ee:	2b06      	cmp	r3, #6
 80029f0:	d902      	bls.n	80029f8 <NVIC_EncodePriority+0x30>
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3b03      	subs	r3, #3
 80029f6:	e000      	b.n	80029fa <NVIC_EncodePriority+0x32>
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43da      	mvns	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a10:	f04f 31ff 	mov.w	r1, #4294967295
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	43d9      	mvns	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a20:	4313      	orrs	r3, r2
         );
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3724      	adds	r7, #36	@ 0x24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff ff4c 	bl	80028d4 <__NVIC_SetPriorityGrouping>
}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a56:	f7ff ff61 	bl	800291c <__NVIC_GetPriorityGrouping>
 8002a5a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	68b9      	ldr	r1, [r7, #8]
 8002a60:	6978      	ldr	r0, [r7, #20]
 8002a62:	f7ff ffb1 	bl	80029c8 <NVIC_EncodePriority>
 8002a66:	4602      	mov	r2, r0
 8002a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff ff80 	bl	8002974 <__NVIC_SetPriority>
}
 8002a74:	bf00      	nop
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff ff54 	bl	8002938 <__NVIC_EnableIRQ>
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e0ac      	b.n	8002c04 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 f8b2 	bl	8002c18 <DFSDM_GetChannelFromInstance>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	4a55      	ldr	r2, [pc, #340]	@ (8002c0c <HAL_DFSDM_ChannelInit+0x174>)
 8002ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e09f      	b.n	8002c04 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7fe fbcd 	bl	8001264 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002aca:	4b51      	ldr	r3, [pc, #324]	@ (8002c10 <HAL_DFSDM_ChannelInit+0x178>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	4a4f      	ldr	r2, [pc, #316]	@ (8002c10 <HAL_DFSDM_ChannelInit+0x178>)
 8002ad2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002ad4:	4b4e      	ldr	r3, [pc, #312]	@ (8002c10 <HAL_DFSDM_ChannelInit+0x178>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d125      	bne.n	8002b28 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002adc:	4b4d      	ldr	r3, [pc, #308]	@ (8002c14 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a4c      	ldr	r2, [pc, #304]	@ (8002c14 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ae2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002ae6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002ae8:	4b4a      	ldr	r3, [pc, #296]	@ (8002c14 <HAL_DFSDM_ChannelInit+0x17c>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	4948      	ldr	r1, [pc, #288]	@ (8002c14 <HAL_DFSDM_ChannelInit+0x17c>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002af6:	4b47      	ldr	r3, [pc, #284]	@ (8002c14 <HAL_DFSDM_ChannelInit+0x17c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a46      	ldr	r2, [pc, #280]	@ (8002c14 <HAL_DFSDM_ChannelInit+0x17c>)
 8002afc:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8002b00:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	791b      	ldrb	r3, [r3, #4]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d108      	bne.n	8002b1c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002b0a:	4b42      	ldr	r3, [pc, #264]	@ (8002c14 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	041b      	lsls	r3, r3, #16
 8002b16:	493f      	ldr	r1, [pc, #252]	@ (8002c14 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002b1c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c14 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a3c      	ldr	r2, [pc, #240]	@ (8002c14 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b26:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8002b36:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6819      	ldr	r1, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b46:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002b4c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 020f 	bic.w	r2, r2, #15
 8002b64:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6819      	ldr	r1, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8002b8c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6899      	ldr	r1, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f002 0207 	and.w	r2, r2, #7
 8002bb8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6859      	ldr	r1, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002be4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 f810 	bl	8002c18 <DFSDM_GetChannelFromInstance>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	4904      	ldr	r1, [pc, #16]	@ (8002c0c <HAL_DFSDM_ChannelInit+0x174>)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20000540 	.word	0x20000540
 8002c10:	2000053c 	.word	0x2000053c
 8002c14:	40016000 	.word	0x40016000

08002c18 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a1c      	ldr	r2, [pc, #112]	@ (8002c94 <DFSDM_GetChannelFromInstance+0x7c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d102      	bne.n	8002c2e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	e02b      	b.n	8002c86 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a19      	ldr	r2, [pc, #100]	@ (8002c98 <DFSDM_GetChannelFromInstance+0x80>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d102      	bne.n	8002c3c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002c36:	2301      	movs	r3, #1
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	e024      	b.n	8002c86 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a17      	ldr	r2, [pc, #92]	@ (8002c9c <DFSDM_GetChannelFromInstance+0x84>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d102      	bne.n	8002c4a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002c44:	2302      	movs	r3, #2
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	e01d      	b.n	8002c86 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a14      	ldr	r2, [pc, #80]	@ (8002ca0 <DFSDM_GetChannelFromInstance+0x88>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d102      	bne.n	8002c58 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002c52:	2304      	movs	r3, #4
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	e016      	b.n	8002c86 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ca4 <DFSDM_GetChannelFromInstance+0x8c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d102      	bne.n	8002c66 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002c60:	2305      	movs	r3, #5
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	e00f      	b.n	8002c86 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a0f      	ldr	r2, [pc, #60]	@ (8002ca8 <DFSDM_GetChannelFromInstance+0x90>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d102      	bne.n	8002c74 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002c6e:	2306      	movs	r3, #6
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	e008      	b.n	8002c86 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a0d      	ldr	r2, [pc, #52]	@ (8002cac <DFSDM_GetChannelFromInstance+0x94>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d102      	bne.n	8002c82 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002c7c:	2307      	movs	r3, #7
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	e001      	b.n	8002c86 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002c82:	2303      	movs	r3, #3
 8002c84:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002c86:	68fb      	ldr	r3, [r7, #12]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	40016000 	.word	0x40016000
 8002c98:	40016020 	.word	0x40016020
 8002c9c:	40016040 	.word	0x40016040
 8002ca0:	40016080 	.word	0x40016080
 8002ca4:	400160a0 	.word	0x400160a0
 8002ca8:	400160c0 	.word	0x400160c0
 8002cac:	400160e0 	.word	0x400160e0

08002cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cbe:	e166      	b.n	8002f8e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ccc:	4013      	ands	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 8158 	beq.w	8002f88 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d005      	beq.n	8002cf0 <HAL_GPIO_Init+0x40>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d130      	bne.n	8002d52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4013      	ands	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d26:	2201      	movs	r2, #1
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4013      	ands	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	091b      	lsrs	r3, r3, #4
 8002d3c:	f003 0201 	and.w	r2, r3, #1
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	d017      	beq.n	8002d8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	2203      	movs	r2, #3
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4013      	ands	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d123      	bne.n	8002de2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	08da      	lsrs	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3208      	adds	r2, #8
 8002da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	220f      	movs	r2, #15
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	691a      	ldr	r2, [r3, #16]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	08da      	lsrs	r2, r3, #3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3208      	adds	r2, #8
 8002ddc:	6939      	ldr	r1, [r7, #16]
 8002dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	2203      	movs	r2, #3
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43db      	mvns	r3, r3
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4013      	ands	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 0203 	and.w	r2, r3, #3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80b2 	beq.w	8002f88 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e24:	4b61      	ldr	r3, [pc, #388]	@ (8002fac <HAL_GPIO_Init+0x2fc>)
 8002e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e28:	4a60      	ldr	r2, [pc, #384]	@ (8002fac <HAL_GPIO_Init+0x2fc>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e30:	4b5e      	ldr	r3, [pc, #376]	@ (8002fac <HAL_GPIO_Init+0x2fc>)
 8002e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e3c:	4a5c      	ldr	r2, [pc, #368]	@ (8002fb0 <HAL_GPIO_Init+0x300>)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	089b      	lsrs	r3, r3, #2
 8002e42:	3302      	adds	r3, #2
 8002e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	220f      	movs	r2, #15
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e66:	d02b      	beq.n	8002ec0 <HAL_GPIO_Init+0x210>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a52      	ldr	r2, [pc, #328]	@ (8002fb4 <HAL_GPIO_Init+0x304>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d025      	beq.n	8002ebc <HAL_GPIO_Init+0x20c>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a51      	ldr	r2, [pc, #324]	@ (8002fb8 <HAL_GPIO_Init+0x308>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d01f      	beq.n	8002eb8 <HAL_GPIO_Init+0x208>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a50      	ldr	r2, [pc, #320]	@ (8002fbc <HAL_GPIO_Init+0x30c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d019      	beq.n	8002eb4 <HAL_GPIO_Init+0x204>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a4f      	ldr	r2, [pc, #316]	@ (8002fc0 <HAL_GPIO_Init+0x310>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d013      	beq.n	8002eb0 <HAL_GPIO_Init+0x200>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a4e      	ldr	r2, [pc, #312]	@ (8002fc4 <HAL_GPIO_Init+0x314>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00d      	beq.n	8002eac <HAL_GPIO_Init+0x1fc>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a4d      	ldr	r2, [pc, #308]	@ (8002fc8 <HAL_GPIO_Init+0x318>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d007      	beq.n	8002ea8 <HAL_GPIO_Init+0x1f8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a4c      	ldr	r2, [pc, #304]	@ (8002fcc <HAL_GPIO_Init+0x31c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d101      	bne.n	8002ea4 <HAL_GPIO_Init+0x1f4>
 8002ea0:	2307      	movs	r3, #7
 8002ea2:	e00e      	b.n	8002ec2 <HAL_GPIO_Init+0x212>
 8002ea4:	2308      	movs	r3, #8
 8002ea6:	e00c      	b.n	8002ec2 <HAL_GPIO_Init+0x212>
 8002ea8:	2306      	movs	r3, #6
 8002eaa:	e00a      	b.n	8002ec2 <HAL_GPIO_Init+0x212>
 8002eac:	2305      	movs	r3, #5
 8002eae:	e008      	b.n	8002ec2 <HAL_GPIO_Init+0x212>
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	e006      	b.n	8002ec2 <HAL_GPIO_Init+0x212>
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e004      	b.n	8002ec2 <HAL_GPIO_Init+0x212>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e002      	b.n	8002ec2 <HAL_GPIO_Init+0x212>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <HAL_GPIO_Init+0x212>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	f002 0203 	and.w	r2, r2, #3
 8002ec8:	0092      	lsls	r2, r2, #2
 8002eca:	4093      	lsls	r3, r2
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ed2:	4937      	ldr	r1, [pc, #220]	@ (8002fb0 <HAL_GPIO_Init+0x300>)
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	089b      	lsrs	r3, r3, #2
 8002ed8:	3302      	adds	r3, #2
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ee0:	4b3b      	ldr	r3, [pc, #236]	@ (8002fd0 <HAL_GPIO_Init+0x320>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f04:	4a32      	ldr	r2, [pc, #200]	@ (8002fd0 <HAL_GPIO_Init+0x320>)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f0a:	4b31      	ldr	r3, [pc, #196]	@ (8002fd0 <HAL_GPIO_Init+0x320>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	43db      	mvns	r3, r3
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4013      	ands	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f2e:	4a28      	ldr	r2, [pc, #160]	@ (8002fd0 <HAL_GPIO_Init+0x320>)
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f34:	4b26      	ldr	r3, [pc, #152]	@ (8002fd0 <HAL_GPIO_Init+0x320>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4013      	ands	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f58:	4a1d      	ldr	r2, [pc, #116]	@ (8002fd0 <HAL_GPIO_Init+0x320>)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8002fd0 <HAL_GPIO_Init+0x320>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	43db      	mvns	r3, r3
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f82:	4a13      	ldr	r2, [pc, #76]	@ (8002fd0 <HAL_GPIO_Init+0x320>)
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f47f ae91 	bne.w	8002cc0 <HAL_GPIO_Init+0x10>
  }
}
 8002f9e:	bf00      	nop
 8002fa0:	bf00      	nop
 8002fa2:	371c      	adds	r7, #28
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40010000 	.word	0x40010000
 8002fb4:	48000400 	.word	0x48000400
 8002fb8:	48000800 	.word	0x48000800
 8002fbc:	48000c00 	.word	0x48000c00
 8002fc0:	48001000 	.word	0x48001000
 8002fc4:	48001400 	.word	0x48001400
 8002fc8:	48001800 	.word	0x48001800
 8002fcc:	48001c00 	.word	0x48001c00
 8002fd0:	40010400 	.word	0x40010400

08002fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	807b      	strh	r3, [r7, #2]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fe4:	787b      	ldrb	r3, [r7, #1]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fea:	887a      	ldrh	r2, [r7, #2]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ff0:	e002      	b.n	8002ff8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ff2:	887a      	ldrh	r2, [r7, #2]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003016:	887a      	ldrh	r2, [r7, #2]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4013      	ands	r3, r2
 800301c:	041a      	lsls	r2, r3, #16
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	43d9      	mvns	r1, r3
 8003022:	887b      	ldrh	r3, [r7, #2]
 8003024:	400b      	ands	r3, r1
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	619a      	str	r2, [r3, #24]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003042:	4b08      	ldr	r3, [pc, #32]	@ (8003064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	88fb      	ldrh	r3, [r7, #6]
 8003048:	4013      	ands	r3, r2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d006      	beq.n	800305c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800304e:	4a05      	ldr	r2, [pc, #20]	@ (8003064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	4618      	mov	r0, r3
 8003058:	f000 f806 	bl	8003068 <HAL_GPIO_EXTI_Callback>
  }
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40010400 	.word	0x40010400

08003068 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e08d      	b.n	80031ac <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d106      	bne.n	80030aa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7fe f941 	bl	800132c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2224      	movs	r2, #36	@ 0x24
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0201 	bic.w	r2, r2, #1
 80030c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d107      	bne.n	80030f8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030f4:	609a      	str	r2, [r3, #8]
 80030f6:	e006      	b.n	8003106 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003104:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d108      	bne.n	8003120 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	e007      	b.n	8003130 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800312e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6812      	ldr	r2, [r2, #0]
 800313a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800313e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003142:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003152:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69d9      	ldr	r1, [r3, #28]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1a      	ldr	r2, [r3, #32]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f042 0201 	orr.w	r2, r2, #1
 800318c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b20      	cmp	r3, #32
 80031c8:	d138      	bne.n	800323c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e032      	b.n	800323e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2224      	movs	r2, #36	@ 0x24
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003206:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6819      	ldr	r1, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	e000      	b.n	800323e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800323c:	2302      	movs	r3, #2
  }
}
 800323e:	4618      	mov	r0, r3
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800324a:	b480      	push	{r7}
 800324c:	b085      	sub	sp, #20
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b20      	cmp	r3, #32
 800325e:	d139      	bne.n	80032d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800326a:	2302      	movs	r3, #2
 800326c:	e033      	b.n	80032d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2224      	movs	r2, #36	@ 0x24
 800327a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800329c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	021b      	lsls	r3, r3, #8
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	e000      	b.n	80032d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032d4:	2302      	movs	r3, #2
  }
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af02      	add	r7, sp, #8
 80032ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80032f0:	f7fe fc02 	bl	8001af8 <HAL_GetTick>
 80032f4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d102      	bne.n	8003302 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	73fb      	strb	r3, [r7, #15]
 8003300:	e092      	b.n	8003428 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330c:	2b00      	cmp	r3, #0
 800330e:	f040 808b 	bne.w	8003428 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fe f8ac 	bl	8001470 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003318:	f241 3188 	movw	r1, #5000	@ 0x1388
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f88b 	bl	8003438 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	4b42      	ldr	r3, [pc, #264]	@ (8003434 <HAL_OSPI_Init+0x150>)
 800332a:	4013      	ands	r3, r2
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	68d1      	ldr	r1, [r2, #12]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6912      	ldr	r2, [r2, #16]
 8003334:	3a01      	subs	r2, #1
 8003336:	0412      	lsls	r2, r2, #16
 8003338:	4311      	orrs	r1, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6952      	ldr	r2, [r2, #20]
 800333e:	3a01      	subs	r2, #1
 8003340:	0212      	lsls	r2, r2, #8
 8003342:	4311      	orrs	r1, r2
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003348:	4311      	orrs	r1, r2
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	69d2      	ldr	r2, [r2, #28]
 800334e:	4311      	orrs	r1, r2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	430b      	orrs	r3, r1
 8003356:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	0412      	lsls	r2, r2, #16
 8003362:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	3b01      	subs	r3, #1
 8003374:	021a      	lsls	r2, r3, #8
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2200      	movs	r2, #0
 8003388:	2120      	movs	r1, #32
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fb98 	bl	8003ac0 <OSPI_WaitFlagStateUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d146      	bne.n	8003428 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	1e5a      	subs	r2, r3, #1
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80033d0:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d107      	bne.n	8003410 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0202 	orr.w	r2, r2, #2
 800340e:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003418:	d103      	bne.n	8003422 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003420:	e002      	b.n	8003428 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2202      	movs	r2, #2
 8003426:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003428:	7bfb      	ldrb	r3, [r7, #15]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	f8e0f8f4 	.word	0xf8e0f8f4

08003438 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	64da      	str	r2, [r3, #76]	@ 0x4c
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
	...

08003458 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b092      	sub	sp, #72	@ 0x48
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a08      	ldr	r2, [pc, #32]	@ (8003498 <HAL_OSPIM_Config+0x40>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d105      	bne.n	8003486 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 1U;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8003484:	e004      	b.n	8003490 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003486:	2301      	movs	r3, #1
 8003488:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003490:	2300      	movs	r3, #0
 8003492:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003496:	e01f      	b.n	80034d8 <HAL_OSPIM_Config+0x80>
 8003498:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 800349c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80034a0:	3301      	adds	r3, #1
 80034a2:	b2d8      	uxtb	r0, r3
 80034a4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80034a8:	f107 0114 	add.w	r1, r7, #20
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	4619      	mov	r1, r3
 80034b8:	f000 fb3a 	bl	8003b30 <OSPIM_GetConfig>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d005      	beq.n	80034ce <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2208      	movs	r2, #8
 80034cc:	649a      	str	r2, [r3, #72]	@ 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80034ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80034d2:	3301      	adds	r3, #1
 80034d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80034d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d9dd      	bls.n	800349c <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80034e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f040 82de 	bne.w	8003aa6 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80034ea:	4bc6      	ldr	r3, [pc, #792]	@ (8003804 <HAL_OSPIM_Config+0x3ac>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00b      	beq.n	800350e <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80034f6:	4bc3      	ldr	r3, [pc, #780]	@ (8003804 <HAL_OSPIM_Config+0x3ac>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4ac2      	ldr	r2, [pc, #776]	@ (8003804 <HAL_OSPIM_Config+0x3ac>)
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003502:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800350e:	4bbe      	ldr	r3, [pc, #760]	@ (8003808 <HAL_OSPIM_Config+0x3b0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800351a:	4bbb      	ldr	r3, [pc, #748]	@ (8003808 <HAL_OSPIM_Config+0x3b0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4aba      	ldr	r2, [pc, #744]	@ (8003808 <HAL_OSPIM_Config+0x3b0>)
 8003520:	f023 0301 	bic.w	r3, r3, #1
 8003524:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003526:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800352a:	f043 0302 	orr.w	r3, r3, #2
 800352e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003532:	49b6      	ldr	r1, [pc, #728]	@ (800380c <HAL_OSPIM_Config+0x3b4>)
 8003534:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	3348      	adds	r3, #72	@ 0x48
 8003540:	443b      	add	r3, r7
 8003542:	3b2c      	subs	r3, #44	@ 0x2c
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	3b01      	subs	r3, #1
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	6859      	ldr	r1, [r3, #4]
 800354e:	48af      	ldr	r0, [pc, #700]	@ (800380c <HAL_OSPIM_Config+0x3b4>)
 8003550:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003552:	4613      	mov	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	3348      	adds	r3, #72	@ 0x48
 800355c:	443b      	add	r3, r7
 800355e:	3b2c      	subs	r3, #44	@ 0x2c
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3b01      	subs	r3, #1
 8003564:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4403      	add	r3, r0
 800356c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 800356e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	3348      	adds	r3, #72	@ 0x48
 800357a:	443b      	add	r3, r7
 800357c:	3b34      	subs	r3, #52	@ 0x34
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 80a1 	beq.w	80036c8 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003586:	49a1      	ldr	r1, [pc, #644]	@ (800380c <HAL_OSPIM_Config+0x3b4>)
 8003588:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	3348      	adds	r3, #72	@ 0x48
 8003594:	443b      	add	r3, r7
 8003596:	3b34      	subs	r3, #52	@ 0x34
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3b01      	subs	r3, #1
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	6859      	ldr	r1, [r3, #4]
 80035a2:	489a      	ldr	r0, [pc, #616]	@ (800380c <HAL_OSPIM_Config+0x3b4>)
 80035a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	3348      	adds	r3, #72	@ 0x48
 80035b0:	443b      	add	r3, r7
 80035b2:	3b34      	subs	r3, #52	@ 0x34
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	f021 0201 	bic.w	r2, r1, #1
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4403      	add	r3, r0
 80035c0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80035c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	3348      	adds	r3, #72	@ 0x48
 80035ce:	443b      	add	r3, r7
 80035d0:	3b30      	subs	r3, #48	@ 0x30
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d01d      	beq.n	8003614 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80035d8:	498c      	ldr	r1, [pc, #560]	@ (800380c <HAL_OSPIM_Config+0x3b4>)
 80035da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	3348      	adds	r3, #72	@ 0x48
 80035e6:	443b      	add	r3, r7
 80035e8:	3b30      	subs	r3, #48	@ 0x30
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	6859      	ldr	r1, [r3, #4]
 80035f4:	4885      	ldr	r0, [pc, #532]	@ (800380c <HAL_OSPIM_Config+0x3b4>)
 80035f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	3348      	adds	r3, #72	@ 0x48
 8003602:	443b      	add	r3, r7
 8003604:	3b30      	subs	r3, #48	@ 0x30
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3b01      	subs	r3, #1
 800360a:	f021 0210 	bic.w	r2, r1, #16
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4403      	add	r3, r0
 8003612:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003614:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	3348      	adds	r3, #72	@ 0x48
 8003620:	443b      	add	r3, r7
 8003622:	3b28      	subs	r3, #40	@ 0x28
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d021      	beq.n	800366e <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800362a:	4978      	ldr	r1, [pc, #480]	@ (800380c <HAL_OSPIM_Config+0x3b4>)
 800362c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	3348      	adds	r3, #72	@ 0x48
 8003638:	443b      	add	r3, r7
 800363a:	3b28      	subs	r3, #40	@ 0x28
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3b01      	subs	r3, #1
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	6859      	ldr	r1, [r3, #4]
 800364a:	4870      	ldr	r0, [pc, #448]	@ (800380c <HAL_OSPIM_Config+0x3b4>)
 800364c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	3348      	adds	r3, #72	@ 0x48
 8003658:	443b      	add	r3, r7
 800365a:	3b28      	subs	r3, #40	@ 0x28
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	3b01      	subs	r3, #1
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4403      	add	r3, r0
 800366c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800366e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	3348      	adds	r3, #72	@ 0x48
 800367a:	443b      	add	r3, r7
 800367c:	3b24      	subs	r3, #36	@ 0x24
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d021      	beq.n	80036c8 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003684:	4961      	ldr	r1, [pc, #388]	@ (800380c <HAL_OSPIM_Config+0x3b4>)
 8003686:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	3348      	adds	r3, #72	@ 0x48
 8003692:	443b      	add	r3, r7
 8003694:	3b24      	subs	r3, #36	@ 0x24
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3b01      	subs	r3, #1
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	6859      	ldr	r1, [r3, #4]
 80036a4:	4859      	ldr	r0, [pc, #356]	@ (800380c <HAL_OSPIM_Config+0x3b4>)
 80036a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	3348      	adds	r3, #72	@ 0x48
 80036b2:	443b      	add	r3, r7
 80036b4:	3b24      	subs	r3, #36	@ 0x24
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4403      	add	r3, r0
 80036c6:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	6819      	ldr	r1, [r3, #0]
 80036cc:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	3348      	adds	r3, #72	@ 0x48
 80036da:	443b      	add	r3, r7
 80036dc:	3b34      	subs	r3, #52	@ 0x34
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4299      	cmp	r1, r3
 80036e2:	d038      	beq.n	8003756 <HAL_OSPIM_Config+0x2fe>
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	6859      	ldr	r1, [r3, #4]
 80036e8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	3348      	adds	r3, #72	@ 0x48
 80036f6:	443b      	add	r3, r7
 80036f8:	3b30      	subs	r3, #48	@ 0x30
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4299      	cmp	r1, r3
 80036fe:	d02a      	beq.n	8003756 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	6899      	ldr	r1, [r3, #8]
 8003704:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	3348      	adds	r3, #72	@ 0x48
 8003712:	443b      	add	r3, r7
 8003714:	3b2c      	subs	r3, #44	@ 0x2c
 8003716:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003718:	4299      	cmp	r1, r3
 800371a:	d01c      	beq.n	8003756 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	68d9      	ldr	r1, [r3, #12]
 8003720:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	3348      	adds	r3, #72	@ 0x48
 800372e:	443b      	add	r3, r7
 8003730:	3b28      	subs	r3, #40	@ 0x28
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4299      	cmp	r1, r3
 8003736:	d00e      	beq.n	8003756 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	6919      	ldr	r1, [r3, #16]
 800373c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	3348      	adds	r3, #72	@ 0x48
 800374a:	443b      	add	r3, r7
 800374c:	3b24      	subs	r3, #36	@ 0x24
 800374e:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003750:	4299      	cmp	r1, r3
 8003752:	f040 80d3 	bne.w	80038fc <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003756:	492d      	ldr	r1, [pc, #180]	@ (800380c <HAL_OSPIM_Config+0x3b4>)
 8003758:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	3348      	adds	r3, #72	@ 0x48
 8003766:	443b      	add	r3, r7
 8003768:	3b34      	subs	r3, #52	@ 0x34
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3b01      	subs	r3, #1
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	6859      	ldr	r1, [r3, #4]
 8003774:	4825      	ldr	r0, [pc, #148]	@ (800380c <HAL_OSPIM_Config+0x3b4>)
 8003776:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	3348      	adds	r3, #72	@ 0x48
 8003784:	443b      	add	r3, r7
 8003786:	3b34      	subs	r3, #52	@ 0x34
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3b01      	subs	r3, #1
 800378c:	f021 0201 	bic.w	r2, r1, #1
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4403      	add	r3, r0
 8003794:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003796:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	3348      	adds	r3, #72	@ 0x48
 80037a4:	443b      	add	r3, r7
 80037a6:	3b30      	subs	r3, #48	@ 0x30
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d01f      	beq.n	80037ee <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80037ae:	4917      	ldr	r1, [pc, #92]	@ (800380c <HAL_OSPIM_Config+0x3b4>)
 80037b0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	3348      	adds	r3, #72	@ 0x48
 80037be:	443b      	add	r3, r7
 80037c0:	3b30      	subs	r3, #48	@ 0x30
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	6859      	ldr	r1, [r3, #4]
 80037cc:	480f      	ldr	r0, [pc, #60]	@ (800380c <HAL_OSPIM_Config+0x3b4>)
 80037ce:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	3348      	adds	r3, #72	@ 0x48
 80037dc:	443b      	add	r3, r7
 80037de:	3b30      	subs	r3, #48	@ 0x30
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	f021 0210 	bic.w	r2, r1, #16
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4403      	add	r3, r0
 80037ec:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80037ee:	4907      	ldr	r1, [pc, #28]	@ (800380c <HAL_OSPIM_Config+0x3b4>)
 80037f0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	3348      	adds	r3, #72	@ 0x48
 80037fe:	443b      	add	r3, r7
 8003800:	3b2c      	subs	r3, #44	@ 0x2c
 8003802:	e005      	b.n	8003810 <HAL_OSPIM_Config+0x3b8>
 8003804:	a0001000 	.word	0xa0001000
 8003808:	a0001400 	.word	0xa0001400
 800380c:	50061c00 	.word	0x50061c00
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3b01      	subs	r3, #1
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	6859      	ldr	r1, [r3, #4]
 800381a:	48a6      	ldr	r0, [pc, #664]	@ (8003ab4 <HAL_OSPIM_Config+0x65c>)
 800381c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003820:	4613      	mov	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	3348      	adds	r3, #72	@ 0x48
 800382a:	443b      	add	r3, r7
 800382c:	3b2c      	subs	r3, #44	@ 0x2c
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3b01      	subs	r3, #1
 8003832:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4403      	add	r3, r0
 800383a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800383c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	3348      	adds	r3, #72	@ 0x48
 800384a:	443b      	add	r3, r7
 800384c:	3b28      	subs	r3, #40	@ 0x28
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d023      	beq.n	800389c <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003854:	4997      	ldr	r1, [pc, #604]	@ (8003ab4 <HAL_OSPIM_Config+0x65c>)
 8003856:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	3348      	adds	r3, #72	@ 0x48
 8003864:	443b      	add	r3, r7
 8003866:	3b28      	subs	r3, #40	@ 0x28
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3b01      	subs	r3, #1
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	6859      	ldr	r1, [r3, #4]
 8003876:	488f      	ldr	r0, [pc, #572]	@ (8003ab4 <HAL_OSPIM_Config+0x65c>)
 8003878:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	3348      	adds	r3, #72	@ 0x48
 8003886:	443b      	add	r3, r7
 8003888:	3b28      	subs	r3, #40	@ 0x28
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3b01      	subs	r3, #1
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4403      	add	r3, r0
 800389a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800389c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	3348      	adds	r3, #72	@ 0x48
 80038aa:	443b      	add	r3, r7
 80038ac:	3b24      	subs	r3, #36	@ 0x24
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d023      	beq.n	80038fc <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80038b4:	497f      	ldr	r1, [pc, #508]	@ (8003ab4 <HAL_OSPIM_Config+0x65c>)
 80038b6:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	3348      	adds	r3, #72	@ 0x48
 80038c4:	443b      	add	r3, r7
 80038c6:	3b24      	subs	r3, #36	@ 0x24
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	6859      	ldr	r1, [r3, #4]
 80038d6:	4877      	ldr	r0, [pc, #476]	@ (8003ab4 <HAL_OSPIM_Config+0x65c>)
 80038d8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	3348      	adds	r3, #72	@ 0x48
 80038e6:	443b      	add	r3, r7
 80038e8:	3b24      	subs	r3, #36	@ 0x24
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4403      	add	r3, r0
 80038fa:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80038fc:	4a6d      	ldr	r2, [pc, #436]	@ (8003ab4 <HAL_OSPIM_Config+0x65c>)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	3b01      	subs	r3, #1
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800390e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003910:	025b      	lsls	r3, r3, #9
 8003912:	431a      	orrs	r2, r3
 8003914:	4967      	ldr	r1, [pc, #412]	@ (8003ab4 <HAL_OSPIM_Config+0x65c>)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	3b01      	subs	r3, #1
 800391c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003926:	4a63      	ldr	r2, [pc, #396]	@ (8003ab4 <HAL_OSPIM_Config+0x65c>)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3b01      	subs	r3, #1
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f023 0203 	bic.w	r2, r3, #3
 8003938:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	431a      	orrs	r2, r3
 800393e:	495d      	ldr	r1, [pc, #372]	@ (8003ab4 <HAL_OSPIM_Config+0x65c>)
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3b01      	subs	r3, #1
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d014      	beq.n	8003982 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003958:	4a56      	ldr	r2, [pc, #344]	@ (8003ab4 <HAL_OSPIM_Config+0x65c>)
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	3b01      	subs	r3, #1
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800396a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800396c:	015b      	lsls	r3, r3, #5
 800396e:	431a      	orrs	r2, r3
 8003970:	4950      	ldr	r1, [pc, #320]	@ (8003ab4 <HAL_OSPIM_Config+0x65c>)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	3b01      	subs	r3, #1
 8003978:	f042 0210 	orr.w	r2, r2, #16
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d019      	beq.n	80039c2 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800398e:	4a49      	ldr	r2, [pc, #292]	@ (8003ab4 <HAL_OSPIM_Config+0x65c>)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	3b01      	subs	r3, #1
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80039a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039a6:	049b      	lsls	r3, r3, #18
 80039a8:	431a      	orrs	r2, r3
 80039aa:	4942      	ldr	r1, [pc, #264]	@ (8003ab4 <HAL_OSPIM_Config+0x65c>)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	3b01      	subs	r3, #1
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	605a      	str	r2, [r3, #4]
 80039c0:	e01c      	b.n	80039fc <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d018      	beq.n	80039fc <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80039ca:	4a3a      	ldr	r2, [pc, #232]	@ (8003ab4 <HAL_OSPIM_Config+0x65c>)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80039e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039e2:	069b      	lsls	r3, r3, #26
 80039e4:	431a      	orrs	r2, r3
 80039e6:	4933      	ldr	r1, [pc, #204]	@ (8003ab4 <HAL_OSPIM_Config+0x65c>)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	3b01      	subs	r3, #1
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d019      	beq.n	8003a3c <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003a08:	4a2a      	ldr	r2, [pc, #168]	@ (8003ab4 <HAL_OSPIM_Config+0x65c>)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a20:	049b      	lsls	r3, r3, #18
 8003a22:	431a      	orrs	r2, r3
 8003a24:	4923      	ldr	r1, [pc, #140]	@ (8003ab4 <HAL_OSPIM_Config+0x65c>)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	e01c      	b.n	8003a76 <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d018      	beq.n	8003a76 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003a44:	4a1b      	ldr	r2, [pc, #108]	@ (8003ab4 <HAL_OSPIM_Config+0x65c>)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003a5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a5c:	069b      	lsls	r3, r3, #26
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	4914      	ldr	r1, [pc, #80]	@ (8003ab4 <HAL_OSPIM_Config+0x65c>)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003a76:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d005      	beq.n	8003a8e <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003a82:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab8 <HAL_OSPIM_Config+0x660>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a0c      	ldr	r2, [pc, #48]	@ (8003ab8 <HAL_OSPIM_Config+0x660>)
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003a8e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003a9a:	4b08      	ldr	r3, [pc, #32]	@ (8003abc <HAL_OSPIM_Config+0x664>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a07      	ldr	r2, [pc, #28]	@ (8003abc <HAL_OSPIM_Config+0x664>)
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003aa6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3748      	adds	r7, #72	@ 0x48
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	50061c00 	.word	0x50061c00
 8003ab8:	a0001000 	.word	0xa0001000
 8003abc:	a0001400 	.word	0xa0001400

08003ac0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	4613      	mov	r3, r2
 8003ace:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003ad0:	e01a      	b.n	8003b08 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad8:	d016      	beq.n	8003b08 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ada:	f7fe f80d 	bl	8001af8 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d302      	bcc.n	8003af0 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10b      	bne.n	8003b08 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003af6:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003afc:	f043 0201 	orr.w	r2, r3, #1
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	649a      	str	r2, [r3, #72]	@ 0x48

        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e00e      	b.n	8003b26 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6a1a      	ldr	r2, [r3, #32]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	4013      	ands	r3, r2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bf14      	ite	ne
 8003b16:	2301      	movne	r3, #1
 8003b18:	2300      	moveq	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	79fb      	ldrb	r3, [r7, #7]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d1d6      	bne.n	8003ad2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	6039      	str	r1, [r7, #0]
 8003b3a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <OSPIM_GetConfig+0x26>
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d802      	bhi.n	8003b56 <OSPIM_GetConfig+0x26>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d102      	bne.n	8003b5c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	75fb      	strb	r3, [r7, #23]
 8003b5a:	e08e      	b.n	8003c7a <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2200      	movs	r2, #0
 8003b66:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2200      	movs	r2, #0
 8003b72:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2200      	movs	r2, #0
 8003b78:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d101      	bne.n	8003b84 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003b80:	4b41      	ldr	r3, [pc, #260]	@ (8003c88 <OSPIM_GetConfig+0x158>)
 8003b82:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003b84:	2300      	movs	r3, #0
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	e074      	b.n	8003c74 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8003b8a:	4a40      	ldr	r2, [pc, #256]	@ (8003c8c <OSPIM_GetConfig+0x15c>)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	4053      	eors	r3, r2
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d103      	bne.n	8003bb6 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	4053      	eors	r3, r2
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d103      	bne.n	8003bd6 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4053      	eors	r3, r2
 8003be6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d103      	bne.n	8003bf6 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d018      	beq.n	8003c32 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4053      	eors	r3, r2
 8003c06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d111      	bne.n	8003c32 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d106      	bne.n	8003c26 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	60da      	str	r2, [r3, #12]
 8003c24:	e005      	b.n	8003c32 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d018      	beq.n	8003c6e <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4053      	eors	r3, r2
 8003c42:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d111      	bne.n	8003c6e <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d106      	bne.n	8003c62 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	3301      	adds	r3, #1
 8003c58:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	611a      	str	r2, [r3, #16]
 8003c60:	e005      	b.n	8003c6e <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	3301      	adds	r3, #1
 8003c66:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	3301      	adds	r3, #1
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d987      	bls.n	8003b8a <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8003c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	04040222 	.word	0x04040222
 8003c8c:	50061c00 	.word	0x50061c00

08003c90 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c94:	4b05      	ldr	r3, [pc, #20]	@ (8003cac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a04      	ldr	r2, [pc, #16]	@ (8003cac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c9e:	6013      	str	r3, [r2, #0]
}
 8003ca0:	bf00      	nop
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40007000 	.word	0x40007000

08003cb0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8003cec <HAL_PWREx_GetVoltageRange+0x3c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc0:	d102      	bne.n	8003cc8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003cc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cc6:	e00b      	b.n	8003ce0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003cc8:	4b08      	ldr	r3, [pc, #32]	@ (8003cec <HAL_PWREx_GetVoltageRange+0x3c>)
 8003cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cd6:	d102      	bne.n	8003cde <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003cd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003cdc:	e000      	b.n	8003ce0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003cde:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40007000 	.word	0x40007000

08003cf0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d141      	bne.n	8003d82 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cfe:	4b4b      	ldr	r3, [pc, #300]	@ (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d0a:	d131      	bne.n	8003d70 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d0c:	4b47      	ldr	r3, [pc, #284]	@ (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d12:	4a46      	ldr	r2, [pc, #280]	@ (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d1c:	4b43      	ldr	r3, [pc, #268]	@ (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d24:	4a41      	ldr	r2, [pc, #260]	@ (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d2c:	4b40      	ldr	r3, [pc, #256]	@ (8003e30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2232      	movs	r2, #50	@ 0x32
 8003d32:	fb02 f303 	mul.w	r3, r2, r3
 8003d36:	4a3f      	ldr	r2, [pc, #252]	@ (8003e34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d38:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3c:	0c9b      	lsrs	r3, r3, #18
 8003d3e:	3301      	adds	r3, #1
 8003d40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d42:	e002      	b.n	8003d4a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d4a:	4b38      	ldr	r3, [pc, #224]	@ (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d56:	d102      	bne.n	8003d5e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f2      	bne.n	8003d44 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d5e:	4b33      	ldr	r3, [pc, #204]	@ (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d6a:	d158      	bne.n	8003e1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e057      	b.n	8003e20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d70:	4b2e      	ldr	r3, [pc, #184]	@ (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d76:	4a2d      	ldr	r2, [pc, #180]	@ (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003d80:	e04d      	b.n	8003e1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d88:	d141      	bne.n	8003e0e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d8a:	4b28      	ldr	r3, [pc, #160]	@ (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d96:	d131      	bne.n	8003dfc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d98:	4b24      	ldr	r3, [pc, #144]	@ (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d9e:	4a23      	ldr	r2, [pc, #140]	@ (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003da8:	4b20      	ldr	r3, [pc, #128]	@ (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003db0:	4a1e      	ldr	r2, [pc, #120]	@ (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003db6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003db8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2232      	movs	r2, #50	@ 0x32
 8003dbe:	fb02 f303 	mul.w	r3, r2, r3
 8003dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8003e34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc8:	0c9b      	lsrs	r3, r3, #18
 8003dca:	3301      	adds	r3, #1
 8003dcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dce:	e002      	b.n	8003dd6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd6:	4b15      	ldr	r3, [pc, #84]	@ (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003de2:	d102      	bne.n	8003dea <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f2      	bne.n	8003dd0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dea:	4b10      	ldr	r3, [pc, #64]	@ (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003df6:	d112      	bne.n	8003e1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e011      	b.n	8003e20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e02:	4a0a      	ldr	r2, [pc, #40]	@ (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003e0c:	e007      	b.n	8003e1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e0e:	4b07      	ldr	r3, [pc, #28]	@ (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e16:	4a05      	ldr	r2, [pc, #20]	@ (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e1c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	40007000 	.word	0x40007000
 8003e30:	20000004 	.word	0x20000004
 8003e34:	431bde83 	.word	0x431bde83

08003e38 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d102      	bne.n	8003e4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	f000 bc08 	b.w	800465c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e4c:	4b96      	ldr	r3, [pc, #600]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 030c 	and.w	r3, r3, #12
 8003e54:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e56:	4b94      	ldr	r3, [pc, #592]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0310 	and.w	r3, r3, #16
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 80e4 	beq.w	8004036 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d007      	beq.n	8003e84 <HAL_RCC_OscConfig+0x4c>
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	2b0c      	cmp	r3, #12
 8003e78:	f040 808b 	bne.w	8003f92 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	f040 8087 	bne.w	8003f92 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e84:	4b88      	ldr	r3, [pc, #544]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_RCC_OscConfig+0x64>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e3df      	b.n	800465c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a1a      	ldr	r2, [r3, #32]
 8003ea0:	4b81      	ldr	r3, [pc, #516]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d004      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x7e>
 8003eac:	4b7e      	ldr	r3, [pc, #504]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003eb4:	e005      	b.n	8003ec2 <HAL_RCC_OscConfig+0x8a>
 8003eb6:	4b7c      	ldr	r3, [pc, #496]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d223      	bcs.n	8003f0e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fdfe 	bl	8004acc <RCC_SetFlashLatencyFromMSIRange>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e3c0      	b.n	800465c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eda:	4b73      	ldr	r3, [pc, #460]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a72      	ldr	r2, [pc, #456]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003ee0:	f043 0308 	orr.w	r3, r3, #8
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	4b70      	ldr	r3, [pc, #448]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	496d      	ldr	r1, [pc, #436]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ef8:	4b6b      	ldr	r3, [pc, #428]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	021b      	lsls	r3, r3, #8
 8003f06:	4968      	ldr	r1, [pc, #416]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	604b      	str	r3, [r1, #4]
 8003f0c:	e025      	b.n	8003f5a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f0e:	4b66      	ldr	r3, [pc, #408]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a65      	ldr	r2, [pc, #404]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f14:	f043 0308 	orr.w	r3, r3, #8
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	4b63      	ldr	r3, [pc, #396]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	4960      	ldr	r1, [pc, #384]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f2c:	4b5e      	ldr	r3, [pc, #376]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	021b      	lsls	r3, r3, #8
 8003f3a:	495b      	ldr	r1, [pc, #364]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d109      	bne.n	8003f5a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fdbe 	bl	8004acc <RCC_SetFlashLatencyFromMSIRange>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e380      	b.n	800465c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f5a:	f000 fcc1 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	4b51      	ldr	r3, [pc, #324]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	091b      	lsrs	r3, r3, #4
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	4950      	ldr	r1, [pc, #320]	@ (80040ac <HAL_RCC_OscConfig+0x274>)
 8003f6c:	5ccb      	ldrb	r3, [r1, r3]
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	fa22 f303 	lsr.w	r3, r2, r3
 8003f76:	4a4e      	ldr	r2, [pc, #312]	@ (80040b0 <HAL_RCC_OscConfig+0x278>)
 8003f78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f7a:	4b4e      	ldr	r3, [pc, #312]	@ (80040b4 <HAL_RCC_OscConfig+0x27c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fd fc50 	bl	8001824 <HAL_InitTick>
 8003f84:	4603      	mov	r3, r0
 8003f86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d052      	beq.n	8004034 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
 8003f90:	e364      	b.n	800465c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d032      	beq.n	8004000 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f9a:	4b43      	ldr	r3, [pc, #268]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a42      	ldr	r2, [pc, #264]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fa6:	f7fd fda7 	bl	8001af8 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fae:	f7fd fda3 	bl	8001af8 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e34d      	b.n	800465c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fc0:	4b39      	ldr	r3, [pc, #228]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0f0      	beq.n	8003fae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fcc:	4b36      	ldr	r3, [pc, #216]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a35      	ldr	r2, [pc, #212]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003fd2:	f043 0308 	orr.w	r3, r3, #8
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	4b33      	ldr	r3, [pc, #204]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	4930      	ldr	r1, [pc, #192]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fea:	4b2f      	ldr	r3, [pc, #188]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	492b      	ldr	r1, [pc, #172]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	604b      	str	r3, [r1, #4]
 8003ffe:	e01a      	b.n	8004036 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004000:	4b29      	ldr	r3, [pc, #164]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a28      	ldr	r2, [pc, #160]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800400c:	f7fd fd74 	bl	8001af8 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004014:	f7fd fd70 	bl	8001af8 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e31a      	b.n	800465c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004026:	4b20      	ldr	r3, [pc, #128]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f0      	bne.n	8004014 <HAL_RCC_OscConfig+0x1dc>
 8004032:	e000      	b.n	8004036 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004034:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d073      	beq.n	800412a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b08      	cmp	r3, #8
 8004046:	d005      	beq.n	8004054 <HAL_RCC_OscConfig+0x21c>
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	2b0c      	cmp	r3, #12
 800404c:	d10e      	bne.n	800406c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2b03      	cmp	r3, #3
 8004052:	d10b      	bne.n	800406c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004054:	4b14      	ldr	r3, [pc, #80]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d063      	beq.n	8004128 <HAL_RCC_OscConfig+0x2f0>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d15f      	bne.n	8004128 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e2f7      	b.n	800465c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004074:	d106      	bne.n	8004084 <HAL_RCC_OscConfig+0x24c>
 8004076:	4b0c      	ldr	r3, [pc, #48]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a0b      	ldr	r2, [pc, #44]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 800407c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	e025      	b.n	80040d0 <HAL_RCC_OscConfig+0x298>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800408c:	d114      	bne.n	80040b8 <HAL_RCC_OscConfig+0x280>
 800408e:	4b06      	ldr	r3, [pc, #24]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a05      	ldr	r2, [pc, #20]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 8004094:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	4b03      	ldr	r3, [pc, #12]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a02      	ldr	r2, [pc, #8]	@ (80040a8 <HAL_RCC_OscConfig+0x270>)
 80040a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	e013      	b.n	80040d0 <HAL_RCC_OscConfig+0x298>
 80040a8:	40021000 	.word	0x40021000
 80040ac:	0800af14 	.word	0x0800af14
 80040b0:	20000004 	.word	0x20000004
 80040b4:	20000008 	.word	0x20000008
 80040b8:	4ba0      	ldr	r3, [pc, #640]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a9f      	ldr	r2, [pc, #636]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 80040be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	4b9d      	ldr	r3, [pc, #628]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a9c      	ldr	r2, [pc, #624]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 80040ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d013      	beq.n	8004100 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fd fd0e 	bl	8001af8 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e0:	f7fd fd0a 	bl	8001af8 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	@ 0x64
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e2b4      	b.n	800465c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040f2:	4b92      	ldr	r3, [pc, #584]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCC_OscConfig+0x2a8>
 80040fe:	e014      	b.n	800412a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fd fcfa 	bl	8001af8 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004108:	f7fd fcf6 	bl	8001af8 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b64      	cmp	r3, #100	@ 0x64
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e2a0      	b.n	800465c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800411a:	4b88      	ldr	r3, [pc, #544]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x2d0>
 8004126:	e000      	b.n	800412a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d060      	beq.n	80041f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	2b04      	cmp	r3, #4
 800413a:	d005      	beq.n	8004148 <HAL_RCC_OscConfig+0x310>
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2b0c      	cmp	r3, #12
 8004140:	d119      	bne.n	8004176 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2b02      	cmp	r3, #2
 8004146:	d116      	bne.n	8004176 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004148:	4b7c      	ldr	r3, [pc, #496]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <HAL_RCC_OscConfig+0x328>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e27d      	b.n	800465c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004160:	4b76      	ldr	r3, [pc, #472]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	061b      	lsls	r3, r3, #24
 800416e:	4973      	ldr	r1, [pc, #460]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 8004170:	4313      	orrs	r3, r2
 8004172:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004174:	e040      	b.n	80041f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d023      	beq.n	80041c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800417e:	4b6f      	ldr	r3, [pc, #444]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a6e      	ldr	r2, [pc, #440]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 8004184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418a:	f7fd fcb5 	bl	8001af8 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004192:	f7fd fcb1 	bl	8001af8 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e25b      	b.n	800465c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041a4:	4b65      	ldr	r3, [pc, #404]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b0:	4b62      	ldr	r3, [pc, #392]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	061b      	lsls	r3, r3, #24
 80041be:	495f      	ldr	r1, [pc, #380]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	604b      	str	r3, [r1, #4]
 80041c4:	e018      	b.n	80041f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c6:	4b5d      	ldr	r3, [pc, #372]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a5c      	ldr	r2, [pc, #368]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 80041cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d2:	f7fd fc91 	bl	8001af8 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041da:	f7fd fc8d 	bl	8001af8 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e237      	b.n	800465c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041ec:	4b53      	ldr	r3, [pc, #332]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1f0      	bne.n	80041da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d03c      	beq.n	800427e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01c      	beq.n	8004246 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800420c:	4b4b      	ldr	r3, [pc, #300]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 800420e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004212:	4a4a      	ldr	r2, [pc, #296]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421c:	f7fd fc6c 	bl	8001af8 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004224:	f7fd fc68 	bl	8001af8 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e212      	b.n	800465c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004236:	4b41      	ldr	r3, [pc, #260]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 8004238:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0ef      	beq.n	8004224 <HAL_RCC_OscConfig+0x3ec>
 8004244:	e01b      	b.n	800427e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004246:	4b3d      	ldr	r3, [pc, #244]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 8004248:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800424c:	4a3b      	ldr	r2, [pc, #236]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 800424e:	f023 0301 	bic.w	r3, r3, #1
 8004252:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004256:	f7fd fc4f 	bl	8001af8 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800425e:	f7fd fc4b 	bl	8001af8 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e1f5      	b.n	800465c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004270:	4b32      	ldr	r3, [pc, #200]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 8004272:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1ef      	bne.n	800425e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 80a6 	beq.w	80043d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800428c:	2300      	movs	r3, #0
 800428e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004290:	4b2a      	ldr	r3, [pc, #168]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 8004292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10d      	bne.n	80042b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800429c:	4b27      	ldr	r3, [pc, #156]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 800429e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a0:	4a26      	ldr	r2, [pc, #152]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 80042a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80042a8:	4b24      	ldr	r3, [pc, #144]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 80042aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042b4:	2301      	movs	r3, #1
 80042b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b8:	4b21      	ldr	r3, [pc, #132]	@ (8004340 <HAL_RCC_OscConfig+0x508>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d118      	bne.n	80042f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004340 <HAL_RCC_OscConfig+0x508>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004340 <HAL_RCC_OscConfig+0x508>)
 80042ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042d0:	f7fd fc12 	bl	8001af8 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d8:	f7fd fc0e 	bl	8001af8 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e1b8      	b.n	800465c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042ea:	4b15      	ldr	r3, [pc, #84]	@ (8004340 <HAL_RCC_OscConfig+0x508>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f0      	beq.n	80042d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d108      	bne.n	8004310 <HAL_RCC_OscConfig+0x4d8>
 80042fe:	4b0f      	ldr	r3, [pc, #60]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 8004300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004304:	4a0d      	ldr	r2, [pc, #52]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 8004306:	f043 0301 	orr.w	r3, r3, #1
 800430a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800430e:	e029      	b.n	8004364 <HAL_RCC_OscConfig+0x52c>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b05      	cmp	r3, #5
 8004316:	d115      	bne.n	8004344 <HAL_RCC_OscConfig+0x50c>
 8004318:	4b08      	ldr	r3, [pc, #32]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800431e:	4a07      	ldr	r2, [pc, #28]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 8004320:	f043 0304 	orr.w	r3, r3, #4
 8004324:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004328:	4b04      	ldr	r3, [pc, #16]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432e:	4a03      	ldr	r2, [pc, #12]	@ (800433c <HAL_RCC_OscConfig+0x504>)
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004338:	e014      	b.n	8004364 <HAL_RCC_OscConfig+0x52c>
 800433a:	bf00      	nop
 800433c:	40021000 	.word	0x40021000
 8004340:	40007000 	.word	0x40007000
 8004344:	4b9d      	ldr	r3, [pc, #628]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800434a:	4a9c      	ldr	r2, [pc, #624]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 800434c:	f023 0301 	bic.w	r3, r3, #1
 8004350:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004354:	4b99      	ldr	r3, [pc, #612]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800435a:	4a98      	ldr	r2, [pc, #608]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 800435c:	f023 0304 	bic.w	r3, r3, #4
 8004360:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d016      	beq.n	800439a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436c:	f7fd fbc4 	bl	8001af8 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004372:	e00a      	b.n	800438a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004374:	f7fd fbc0 	bl	8001af8 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e168      	b.n	800465c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800438a:	4b8c      	ldr	r3, [pc, #560]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 800438c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0ed      	beq.n	8004374 <HAL_RCC_OscConfig+0x53c>
 8004398:	e015      	b.n	80043c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439a:	f7fd fbad 	bl	8001af8 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043a0:	e00a      	b.n	80043b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a2:	f7fd fba9 	bl	8001af8 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e151      	b.n	800465c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043b8:	4b80      	ldr	r3, [pc, #512]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 80043ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1ed      	bne.n	80043a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043c6:	7ffb      	ldrb	r3, [r7, #31]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d105      	bne.n	80043d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043cc:	4b7b      	ldr	r3, [pc, #492]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 80043ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d0:	4a7a      	ldr	r2, [pc, #488]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 80043d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043d6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d03c      	beq.n	800445e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01c      	beq.n	8004426 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043ec:	4b73      	ldr	r3, [pc, #460]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 80043ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043f2:	4a72      	ldr	r2, [pc, #456]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fc:	f7fd fb7c 	bl	8001af8 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004404:	f7fd fb78 	bl	8001af8 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e122      	b.n	800465c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004416:	4b69      	ldr	r3, [pc, #420]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 8004418:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0ef      	beq.n	8004404 <HAL_RCC_OscConfig+0x5cc>
 8004424:	e01b      	b.n	800445e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004426:	4b65      	ldr	r3, [pc, #404]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 8004428:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800442c:	4a63      	ldr	r2, [pc, #396]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 800442e:	f023 0301 	bic.w	r3, r3, #1
 8004432:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004436:	f7fd fb5f 	bl	8001af8 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800443e:	f7fd fb5b 	bl	8001af8 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e105      	b.n	800465c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004450:	4b5a      	ldr	r3, [pc, #360]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 8004452:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1ef      	bne.n	800443e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 80f9 	beq.w	800465a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446c:	2b02      	cmp	r3, #2
 800446e:	f040 80cf 	bne.w	8004610 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004472:	4b52      	ldr	r3, [pc, #328]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f003 0203 	and.w	r2, r3, #3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004482:	429a      	cmp	r2, r3
 8004484:	d12c      	bne.n	80044e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004490:	3b01      	subs	r3, #1
 8004492:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004494:	429a      	cmp	r2, r3
 8004496:	d123      	bne.n	80044e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d11b      	bne.n	80044e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d113      	bne.n	80044e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c2:	085b      	lsrs	r3, r3, #1
 80044c4:	3b01      	subs	r3, #1
 80044c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d109      	bne.n	80044e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	085b      	lsrs	r3, r3, #1
 80044d8:	3b01      	subs	r3, #1
 80044da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044dc:	429a      	cmp	r2, r3
 80044de:	d071      	beq.n	80045c4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	2b0c      	cmp	r3, #12
 80044e4:	d068      	beq.n	80045b8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044e6:	4b35      	ldr	r3, [pc, #212]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d105      	bne.n	80044fe <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80044f2:	4b32      	ldr	r3, [pc, #200]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e0ac      	b.n	800465c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004502:	4b2e      	ldr	r3, [pc, #184]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a2d      	ldr	r2, [pc, #180]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 8004508:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800450c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800450e:	f7fd faf3 	bl	8001af8 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004516:	f7fd faef 	bl	8001af8 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e099      	b.n	800465c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004528:	4b24      	ldr	r3, [pc, #144]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1f0      	bne.n	8004516 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004534:	4b21      	ldr	r3, [pc, #132]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	4b21      	ldr	r3, [pc, #132]	@ (80045c0 <HAL_RCC_OscConfig+0x788>)
 800453a:	4013      	ands	r3, r2
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004544:	3a01      	subs	r2, #1
 8004546:	0112      	lsls	r2, r2, #4
 8004548:	4311      	orrs	r1, r2
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800454e:	0212      	lsls	r2, r2, #8
 8004550:	4311      	orrs	r1, r2
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004556:	0852      	lsrs	r2, r2, #1
 8004558:	3a01      	subs	r2, #1
 800455a:	0552      	lsls	r2, r2, #21
 800455c:	4311      	orrs	r1, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004562:	0852      	lsrs	r2, r2, #1
 8004564:	3a01      	subs	r2, #1
 8004566:	0652      	lsls	r2, r2, #25
 8004568:	4311      	orrs	r1, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800456e:	06d2      	lsls	r2, r2, #27
 8004570:	430a      	orrs	r2, r1
 8004572:	4912      	ldr	r1, [pc, #72]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 8004574:	4313      	orrs	r3, r2
 8004576:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004578:	4b10      	ldr	r3, [pc, #64]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a0f      	ldr	r2, [pc, #60]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 800457e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004582:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004584:	4b0d      	ldr	r3, [pc, #52]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	4a0c      	ldr	r2, [pc, #48]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 800458a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800458e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004590:	f7fd fab2 	bl	8001af8 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004598:	f7fd faae 	bl	8001af8 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e058      	b.n	800465c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045aa:	4b04      	ldr	r3, [pc, #16]	@ (80045bc <HAL_RCC_OscConfig+0x784>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045b6:	e050      	b.n	800465a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e04f      	b.n	800465c <HAL_RCC_OscConfig+0x824>
 80045bc:	40021000 	.word	0x40021000
 80045c0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045c4:	4b27      	ldr	r3, [pc, #156]	@ (8004664 <HAL_RCC_OscConfig+0x82c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d144      	bne.n	800465a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045d0:	4b24      	ldr	r3, [pc, #144]	@ (8004664 <HAL_RCC_OscConfig+0x82c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a23      	ldr	r2, [pc, #140]	@ (8004664 <HAL_RCC_OscConfig+0x82c>)
 80045d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045dc:	4b21      	ldr	r3, [pc, #132]	@ (8004664 <HAL_RCC_OscConfig+0x82c>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	4a20      	ldr	r2, [pc, #128]	@ (8004664 <HAL_RCC_OscConfig+0x82c>)
 80045e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045e8:	f7fd fa86 	bl	8001af8 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f0:	f7fd fa82 	bl	8001af8 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e02c      	b.n	800465c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004602:	4b18      	ldr	r3, [pc, #96]	@ (8004664 <HAL_RCC_OscConfig+0x82c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0f0      	beq.n	80045f0 <HAL_RCC_OscConfig+0x7b8>
 800460e:	e024      	b.n	800465a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	2b0c      	cmp	r3, #12
 8004614:	d01f      	beq.n	8004656 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004616:	4b13      	ldr	r3, [pc, #76]	@ (8004664 <HAL_RCC_OscConfig+0x82c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a12      	ldr	r2, [pc, #72]	@ (8004664 <HAL_RCC_OscConfig+0x82c>)
 800461c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004622:	f7fd fa69 	bl	8001af8 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800462a:	f7fd fa65 	bl	8001af8 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e00f      	b.n	800465c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800463c:	4b09      	ldr	r3, [pc, #36]	@ (8004664 <HAL_RCC_OscConfig+0x82c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1f0      	bne.n	800462a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004648:	4b06      	ldr	r3, [pc, #24]	@ (8004664 <HAL_RCC_OscConfig+0x82c>)
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	4905      	ldr	r1, [pc, #20]	@ (8004664 <HAL_RCC_OscConfig+0x82c>)
 800464e:	4b06      	ldr	r3, [pc, #24]	@ (8004668 <HAL_RCC_OscConfig+0x830>)
 8004650:	4013      	ands	r3, r2
 8004652:	60cb      	str	r3, [r1, #12]
 8004654:	e001      	b.n	800465a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3720      	adds	r7, #32
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40021000 	.word	0x40021000
 8004668:	feeefffc 	.word	0xfeeefffc

0800466c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e11d      	b.n	80048c0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004684:	4b90      	ldr	r3, [pc, #576]	@ (80048c8 <HAL_RCC_ClockConfig+0x25c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d910      	bls.n	80046b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004692:	4b8d      	ldr	r3, [pc, #564]	@ (80048c8 <HAL_RCC_ClockConfig+0x25c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f023 020f 	bic.w	r2, r3, #15
 800469a:	498b      	ldr	r1, [pc, #556]	@ (80048c8 <HAL_RCC_ClockConfig+0x25c>)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	4313      	orrs	r3, r2
 80046a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a2:	4b89      	ldr	r3, [pc, #548]	@ (80048c8 <HAL_RCC_ClockConfig+0x25c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d001      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e105      	b.n	80048c0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d010      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	4b81      	ldr	r3, [pc, #516]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d908      	bls.n	80046e2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046d0:	4b7e      	ldr	r3, [pc, #504]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	497b      	ldr	r1, [pc, #492]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d079      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b03      	cmp	r3, #3
 80046f4:	d11e      	bne.n	8004734 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046f6:	4b75      	ldr	r3, [pc, #468]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e0dc      	b.n	80048c0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004706:	f000 fa3b 	bl	8004b80 <RCC_GetSysClockFreqFromPLLSource>
 800470a:	4603      	mov	r3, r0
 800470c:	4a70      	ldr	r2, [pc, #448]	@ (80048d0 <HAL_RCC_ClockConfig+0x264>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d946      	bls.n	80047a0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004712:	4b6e      	ldr	r3, [pc, #440]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d140      	bne.n	80047a0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800471e:	4b6b      	ldr	r3, [pc, #428]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004726:	4a69      	ldr	r2, [pc, #420]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 8004728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800472c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800472e:	2380      	movs	r3, #128	@ 0x80
 8004730:	617b      	str	r3, [r7, #20]
 8004732:	e035      	b.n	80047a0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b02      	cmp	r3, #2
 800473a:	d107      	bne.n	800474c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800473c:	4b63      	ldr	r3, [pc, #396]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d115      	bne.n	8004774 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e0b9      	b.n	80048c0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d107      	bne.n	8004764 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004754:	4b5d      	ldr	r3, [pc, #372]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d109      	bne.n	8004774 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e0ad      	b.n	80048c0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004764:	4b59      	ldr	r3, [pc, #356]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e0a5      	b.n	80048c0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004774:	f000 f8b4 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 8004778:	4603      	mov	r3, r0
 800477a:	4a55      	ldr	r2, [pc, #340]	@ (80048d0 <HAL_RCC_ClockConfig+0x264>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d90f      	bls.n	80047a0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004780:	4b52      	ldr	r3, [pc, #328]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d109      	bne.n	80047a0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800478c:	4b4f      	ldr	r3, [pc, #316]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004794:	4a4d      	ldr	r2, [pc, #308]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 8004796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800479a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800479c:	2380      	movs	r3, #128	@ 0x80
 800479e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047a0:	4b4a      	ldr	r3, [pc, #296]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f023 0203 	bic.w	r2, r3, #3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	4947      	ldr	r1, [pc, #284]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047b2:	f7fd f9a1 	bl	8001af8 <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b8:	e00a      	b.n	80047d0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ba:	f7fd f99d 	bl	8001af8 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e077      	b.n	80048c0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d0:	4b3e      	ldr	r3, [pc, #248]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f003 020c 	and.w	r2, r3, #12
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	429a      	cmp	r2, r3
 80047e0:	d1eb      	bne.n	80047ba <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b80      	cmp	r3, #128	@ 0x80
 80047e6:	d105      	bne.n	80047f4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80047e8:	4b38      	ldr	r3, [pc, #224]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	4a37      	ldr	r2, [pc, #220]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 80047ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047f2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d010      	beq.n	8004822 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	4b31      	ldr	r3, [pc, #196]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800480c:	429a      	cmp	r2, r3
 800480e:	d208      	bcs.n	8004822 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004810:	4b2e      	ldr	r3, [pc, #184]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	492b      	ldr	r1, [pc, #172]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 800481e:	4313      	orrs	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004822:	4b29      	ldr	r3, [pc, #164]	@ (80048c8 <HAL_RCC_ClockConfig+0x25c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d210      	bcs.n	8004852 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004830:	4b25      	ldr	r3, [pc, #148]	@ (80048c8 <HAL_RCC_ClockConfig+0x25c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f023 020f 	bic.w	r2, r3, #15
 8004838:	4923      	ldr	r1, [pc, #140]	@ (80048c8 <HAL_RCC_ClockConfig+0x25c>)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	4313      	orrs	r3, r2
 800483e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004840:	4b21      	ldr	r3, [pc, #132]	@ (80048c8 <HAL_RCC_ClockConfig+0x25c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d001      	beq.n	8004852 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e036      	b.n	80048c0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	d008      	beq.n	8004870 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800485e:	4b1b      	ldr	r3, [pc, #108]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	4918      	ldr	r1, [pc, #96]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 800486c:	4313      	orrs	r3, r2
 800486e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	d009      	beq.n	8004890 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800487c:	4b13      	ldr	r3, [pc, #76]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	4910      	ldr	r1, [pc, #64]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 800488c:	4313      	orrs	r3, r2
 800488e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004890:	f000 f826 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 8004894:	4602      	mov	r2, r0
 8004896:	4b0d      	ldr	r3, [pc, #52]	@ (80048cc <HAL_RCC_ClockConfig+0x260>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	091b      	lsrs	r3, r3, #4
 800489c:	f003 030f 	and.w	r3, r3, #15
 80048a0:	490c      	ldr	r1, [pc, #48]	@ (80048d4 <HAL_RCC_ClockConfig+0x268>)
 80048a2:	5ccb      	ldrb	r3, [r1, r3]
 80048a4:	f003 031f 	and.w	r3, r3, #31
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
 80048ac:	4a0a      	ldr	r2, [pc, #40]	@ (80048d8 <HAL_RCC_ClockConfig+0x26c>)
 80048ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048b0:	4b0a      	ldr	r3, [pc, #40]	@ (80048dc <HAL_RCC_ClockConfig+0x270>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fc ffb5 	bl	8001824 <HAL_InitTick>
 80048ba:	4603      	mov	r3, r0
 80048bc:	73fb      	strb	r3, [r7, #15]

  return status;
 80048be:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40022000 	.word	0x40022000
 80048cc:	40021000 	.word	0x40021000
 80048d0:	04c4b400 	.word	0x04c4b400
 80048d4:	0800af14 	.word	0x0800af14
 80048d8:	20000004 	.word	0x20000004
 80048dc:	20000008 	.word	0x20000008

080048e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b089      	sub	sp, #36	@ 0x24
 80048e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	61fb      	str	r3, [r7, #28]
 80048ea:	2300      	movs	r3, #0
 80048ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ee:	4b3e      	ldr	r3, [pc, #248]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 030c 	and.w	r3, r3, #12
 80048f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048f8:	4b3b      	ldr	r3, [pc, #236]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_RCC_GetSysClockFreq+0x34>
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	2b0c      	cmp	r3, #12
 800490c:	d121      	bne.n	8004952 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d11e      	bne.n	8004952 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004914:	4b34      	ldr	r3, [pc, #208]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b00      	cmp	r3, #0
 800491e:	d107      	bne.n	8004930 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004920:	4b31      	ldr	r3, [pc, #196]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004922:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004926:	0a1b      	lsrs	r3, r3, #8
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	61fb      	str	r3, [r7, #28]
 800492e:	e005      	b.n	800493c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004930:	4b2d      	ldr	r3, [pc, #180]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	091b      	lsrs	r3, r3, #4
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800493c:	4a2b      	ldr	r2, [pc, #172]	@ (80049ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004944:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10d      	bne.n	8004968 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004950:	e00a      	b.n	8004968 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b04      	cmp	r3, #4
 8004956:	d102      	bne.n	800495e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004958:	4b25      	ldr	r3, [pc, #148]	@ (80049f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800495a:	61bb      	str	r3, [r7, #24]
 800495c:	e004      	b.n	8004968 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2b08      	cmp	r3, #8
 8004962:	d101      	bne.n	8004968 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004964:	4b23      	ldr	r3, [pc, #140]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004966:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	2b0c      	cmp	r3, #12
 800496c:	d134      	bne.n	80049d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800496e:	4b1e      	ldr	r3, [pc, #120]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d003      	beq.n	8004986 <HAL_RCC_GetSysClockFreq+0xa6>
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b03      	cmp	r3, #3
 8004982:	d003      	beq.n	800498c <HAL_RCC_GetSysClockFreq+0xac>
 8004984:	e005      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004986:	4b1a      	ldr	r3, [pc, #104]	@ (80049f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004988:	617b      	str	r3, [r7, #20]
      break;
 800498a:	e005      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800498c:	4b19      	ldr	r3, [pc, #100]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800498e:	617b      	str	r3, [r7, #20]
      break;
 8004990:	e002      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	617b      	str	r3, [r7, #20]
      break;
 8004996:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004998:	4b13      	ldr	r3, [pc, #76]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	091b      	lsrs	r3, r3, #4
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	3301      	adds	r3, #1
 80049a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049a6:	4b10      	ldr	r3, [pc, #64]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	0a1b      	lsrs	r3, r3, #8
 80049ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	fb03 f202 	mul.w	r2, r3, r2
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049be:	4b0a      	ldr	r3, [pc, #40]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	0e5b      	lsrs	r3, r3, #25
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	3301      	adds	r3, #1
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80049d8:	69bb      	ldr	r3, [r7, #24]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3724      	adds	r7, #36	@ 0x24
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40021000 	.word	0x40021000
 80049ec:	0800af2c 	.word	0x0800af2c
 80049f0:	00f42400 	.word	0x00f42400
 80049f4:	007a1200 	.word	0x007a1200

080049f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049fc:	4b03      	ldr	r3, [pc, #12]	@ (8004a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80049fe:	681b      	ldr	r3, [r3, #0]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	20000004 	.word	0x20000004

08004a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a14:	f7ff fff0 	bl	80049f8 <HAL_RCC_GetHCLKFreq>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	4b06      	ldr	r3, [pc, #24]	@ (8004a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	0a1b      	lsrs	r3, r3, #8
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	4904      	ldr	r1, [pc, #16]	@ (8004a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a26:	5ccb      	ldrb	r3, [r1, r3]
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40021000 	.word	0x40021000
 8004a38:	0800af24 	.word	0x0800af24

08004a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a40:	f7ff ffda 	bl	80049f8 <HAL_RCC_GetHCLKFreq>
 8004a44:	4602      	mov	r2, r0
 8004a46:	4b06      	ldr	r3, [pc, #24]	@ (8004a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	0adb      	lsrs	r3, r3, #11
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	4904      	ldr	r1, [pc, #16]	@ (8004a64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a52:	5ccb      	ldrb	r3, [r1, r3]
 8004a54:	f003 031f 	and.w	r3, r3, #31
 8004a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40021000 	.word	0x40021000
 8004a64:	0800af24 	.word	0x0800af24

08004a68 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	220f      	movs	r2, #15
 8004a76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004a78:	4b12      	ldr	r3, [pc, #72]	@ (8004ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 0203 	and.w	r2, r3, #3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004a84:	4b0f      	ldr	r3, [pc, #60]	@ (8004ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004a90:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004a9c:	4b09      	ldr	r3, [pc, #36]	@ (8004ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	08db      	lsrs	r3, r3, #3
 8004aa2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004aaa:	4b07      	ldr	r3, [pc, #28]	@ (8004ac8 <HAL_RCC_GetClockConfig+0x60>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 020f 	and.w	r2, r3, #15
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	601a      	str	r2, [r3, #0]
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	40022000 	.word	0x40022000

08004acc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ad8:	4b27      	ldr	r3, [pc, #156]	@ (8004b78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004adc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ae4:	f7ff f8e4 	bl	8003cb0 <HAL_PWREx_GetVoltageRange>
 8004ae8:	6178      	str	r0, [r7, #20]
 8004aea:	e014      	b.n	8004b16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aec:	4b22      	ldr	r3, [pc, #136]	@ (8004b78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004af0:	4a21      	ldr	r2, [pc, #132]	@ (8004b78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004af2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004af6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004af8:	4b1f      	ldr	r3, [pc, #124]	@ (8004b78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004afc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b04:	f7ff f8d4 	bl	8003cb0 <HAL_PWREx_GetVoltageRange>
 8004b08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8004b78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b0e:	4a1a      	ldr	r2, [pc, #104]	@ (8004b78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b14:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b1c:	d10b      	bne.n	8004b36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b80      	cmp	r3, #128	@ 0x80
 8004b22:	d913      	bls.n	8004b4c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2ba0      	cmp	r3, #160	@ 0xa0
 8004b28:	d902      	bls.n	8004b30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	e00d      	b.n	8004b4c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b30:	2301      	movs	r3, #1
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	e00a      	b.n	8004b4c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b3a:	d902      	bls.n	8004b42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	613b      	str	r3, [r7, #16]
 8004b40:	e004      	b.n	8004b4c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b70      	cmp	r3, #112	@ 0x70
 8004b46:	d101      	bne.n	8004b4c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b48:	2301      	movs	r3, #1
 8004b4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b7c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f023 020f 	bic.w	r2, r3, #15
 8004b54:	4909      	ldr	r1, [pc, #36]	@ (8004b7c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b5c:	4b07      	ldr	r3, [pc, #28]	@ (8004b7c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 030f 	and.w	r3, r3, #15
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d001      	beq.n	8004b6e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e000      	b.n	8004b70 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	40022000 	.word	0x40022000

08004b80 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b86:	4b2d      	ldr	r3, [pc, #180]	@ (8004c3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f003 0303 	and.w	r3, r3, #3
 8004b8e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b03      	cmp	r3, #3
 8004b94:	d00b      	beq.n	8004bae <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d825      	bhi.n	8004be8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d008      	beq.n	8004bb4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d11f      	bne.n	8004be8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004ba8:	4b25      	ldr	r3, [pc, #148]	@ (8004c40 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004baa:	613b      	str	r3, [r7, #16]
    break;
 8004bac:	e01f      	b.n	8004bee <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004bae:	4b25      	ldr	r3, [pc, #148]	@ (8004c44 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004bb0:	613b      	str	r3, [r7, #16]
    break;
 8004bb2:	e01c      	b.n	8004bee <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004bb4:	4b21      	ldr	r3, [pc, #132]	@ (8004c3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d107      	bne.n	8004bd0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8004c3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bc6:	0a1b      	lsrs	r3, r3, #8
 8004bc8:	f003 030f 	and.w	r3, r3, #15
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	e005      	b.n	8004bdc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8004c3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	091b      	lsrs	r3, r3, #4
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8004c48 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be4:	613b      	str	r3, [r7, #16]
    break;
 8004be6:	e002      	b.n	8004bee <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	613b      	str	r3, [r7, #16]
    break;
 8004bec:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bee:	4b13      	ldr	r3, [pc, #76]	@ (8004c3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	091b      	lsrs	r3, r3, #4
 8004bf4:	f003 030f 	and.w	r3, r3, #15
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8004c3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	0a1b      	lsrs	r3, r3, #8
 8004c02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	fb03 f202 	mul.w	r2, r3, r2
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c12:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c14:	4b09      	ldr	r3, [pc, #36]	@ (8004c3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	0e5b      	lsrs	r3, r3, #25
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	3301      	adds	r3, #1
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004c2e:	683b      	ldr	r3, [r7, #0]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	371c      	adds	r7, #28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	00f42400 	.word	0x00f42400
 8004c44:	007a1200 	.word	0x007a1200
 8004c48:	0800af2c 	.word	0x0800af2c

08004c4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c54:	2300      	movs	r3, #0
 8004c56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c58:	2300      	movs	r3, #0
 8004c5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d040      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c6c:	2b80      	cmp	r3, #128	@ 0x80
 8004c6e:	d02a      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004c70:	2b80      	cmp	r3, #128	@ 0x80
 8004c72:	d825      	bhi.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c74:	2b60      	cmp	r3, #96	@ 0x60
 8004c76:	d026      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004c78:	2b60      	cmp	r3, #96	@ 0x60
 8004c7a:	d821      	bhi.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c7c:	2b40      	cmp	r3, #64	@ 0x40
 8004c7e:	d006      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004c80:	2b40      	cmp	r3, #64	@ 0x40
 8004c82:	d81d      	bhi.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d009      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004c88:	2b20      	cmp	r3, #32
 8004c8a:	d010      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004c8c:	e018      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c8e:	4b89      	ldr	r3, [pc, #548]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	4a88      	ldr	r2, [pc, #544]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c98:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c9a:	e015      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fb12 	bl	80052cc <RCCEx_PLLSAI1_Config>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cac:	e00c      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3320      	adds	r3, #32
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fbfd 	bl	80054b4 <RCCEx_PLLSAI2_Config>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cbe:	e003      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	74fb      	strb	r3, [r7, #19]
      break;
 8004cc4:	e000      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cc8:	7cfb      	ldrb	r3, [r7, #19]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10b      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cce:	4b79      	ldr	r3, [pc, #484]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cd4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cdc:	4975      	ldr	r1, [pc, #468]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004ce4:	e001      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce6:	7cfb      	ldrb	r3, [r7, #19]
 8004ce8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d047      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cfe:	d030      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004d00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d04:	d82a      	bhi.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d0a:	d02a      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004d0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d10:	d824      	bhi.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d16:	d008      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004d18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d1c:	d81e      	bhi.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00a      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004d22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d26:	d010      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004d28:	e018      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d2a:	4b62      	ldr	r3, [pc, #392]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	4a61      	ldr	r2, [pc, #388]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d34:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d36:	e015      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 fac4 	bl	80052cc <RCCEx_PLLSAI1_Config>
 8004d44:	4603      	mov	r3, r0
 8004d46:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d48:	e00c      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	3320      	adds	r3, #32
 8004d4e:	2100      	movs	r1, #0
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fbaf 	bl	80054b4 <RCCEx_PLLSAI2_Config>
 8004d56:	4603      	mov	r3, r0
 8004d58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d5a:	e003      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	74fb      	strb	r3, [r7, #19]
      break;
 8004d60:	e000      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004d62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d64:	7cfb      	ldrb	r3, [r7, #19]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10b      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d6a:	4b52      	ldr	r3, [pc, #328]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d78:	494e      	ldr	r1, [pc, #312]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004d80:	e001      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d82:	7cfb      	ldrb	r3, [r7, #19]
 8004d84:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 809f 	beq.w	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d94:	2300      	movs	r3, #0
 8004d96:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d98:	4b46      	ldr	r3, [pc, #280]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e000      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004da8:	2300      	movs	r3, #0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00d      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dae:	4b41      	ldr	r3, [pc, #260]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db2:	4a40      	ldr	r2, [pc, #256]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004db8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dba:	4b3e      	ldr	r3, [pc, #248]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dc2:	60bb      	str	r3, [r7, #8]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dca:	4b3b      	ldr	r3, [pc, #236]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a3a      	ldr	r2, [pc, #232]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dd6:	f7fc fe8f 	bl	8001af8 <HAL_GetTick>
 8004dda:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ddc:	e009      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dde:	f7fc fe8b 	bl	8001af8 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d902      	bls.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	74fb      	strb	r3, [r7, #19]
        break;
 8004df0:	e005      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004df2:	4b31      	ldr	r3, [pc, #196]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0ef      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004dfe:	7cfb      	ldrb	r3, [r7, #19]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d15b      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e04:	4b2b      	ldr	r3, [pc, #172]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e0e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d01f      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d019      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e22:	4b24      	ldr	r3, [pc, #144]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e2e:	4b21      	ldr	r3, [pc, #132]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e34:	4a1f      	ldr	r2, [pc, #124]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e44:	4a1b      	ldr	r2, [pc, #108]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e4e:	4a19      	ldr	r2, [pc, #100]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d016      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e60:	f7fc fe4a 	bl	8001af8 <HAL_GetTick>
 8004e64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e66:	e00b      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e68:	f7fc fe46 	bl	8001af8 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d902      	bls.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	74fb      	strb	r3, [r7, #19]
            break;
 8004e7e:	e006      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e80:	4b0c      	ldr	r3, [pc, #48]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0ec      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004e8e:	7cfb      	ldrb	r3, [r7, #19]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10c      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e94:	4b07      	ldr	r3, [pc, #28]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea4:	4903      	ldr	r1, [pc, #12]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004eac:	e008      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004eae:	7cfb      	ldrb	r3, [r7, #19]
 8004eb0:	74bb      	strb	r3, [r7, #18]
 8004eb2:	e005      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ebc:	7cfb      	ldrb	r3, [r7, #19]
 8004ebe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ec0:	7c7b      	ldrb	r3, [r7, #17]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d105      	bne.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ec6:	4ba0      	ldr	r3, [pc, #640]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eca:	4a9f      	ldr	r2, [pc, #636]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ecc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ed0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ede:	4b9a      	ldr	r3, [pc, #616]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee4:	f023 0203 	bic.w	r2, r3, #3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eec:	4996      	ldr	r1, [pc, #600]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00a      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f00:	4b91      	ldr	r3, [pc, #580]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f06:	f023 020c 	bic.w	r2, r3, #12
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0e:	498e      	ldr	r1, [pc, #568]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0304 	and.w	r3, r3, #4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f22:	4b89      	ldr	r3, [pc, #548]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f30:	4985      	ldr	r1, [pc, #532]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00a      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f44:	4b80      	ldr	r3, [pc, #512]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f52:	497d      	ldr	r1, [pc, #500]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0310 	and.w	r3, r3, #16
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f66:	4b78      	ldr	r3, [pc, #480]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f74:	4974      	ldr	r1, [pc, #464]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0320 	and.w	r3, r3, #32
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00a      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f88:	4b6f      	ldr	r3, [pc, #444]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f96:	496c      	ldr	r1, [pc, #432]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004faa:	4b67      	ldr	r3, [pc, #412]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fb8:	4963      	ldr	r1, [pc, #396]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00a      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fcc:	4b5e      	ldr	r3, [pc, #376]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fda:	495b      	ldr	r1, [pc, #364]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fee:	4b56      	ldr	r3, [pc, #344]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ffc:	4952      	ldr	r1, [pc, #328]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00a      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005010:	4b4d      	ldr	r3, [pc, #308]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005016:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800501e:	494a      	ldr	r1, [pc, #296]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005020:	4313      	orrs	r3, r2
 8005022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005032:	4b45      	ldr	r3, [pc, #276]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005038:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005040:	4941      	ldr	r1, [pc, #260]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00a      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005054:	4b3c      	ldr	r3, [pc, #240]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005056:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800505a:	f023 0203 	bic.w	r2, r3, #3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005062:	4939      	ldr	r1, [pc, #228]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005064:	4313      	orrs	r3, r2
 8005066:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d028      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005076:	4b34      	ldr	r3, [pc, #208]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800507c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005084:	4930      	ldr	r1, [pc, #192]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005086:	4313      	orrs	r3, r2
 8005088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005090:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005094:	d106      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005096:	4b2c      	ldr	r3, [pc, #176]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	4a2b      	ldr	r2, [pc, #172]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800509c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050a0:	60d3      	str	r3, [r2, #12]
 80050a2:	e011      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050ac:	d10c      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3304      	adds	r3, #4
 80050b2:	2101      	movs	r1, #1
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 f909 	bl	80052cc <RCCEx_PLLSAI1_Config>
 80050ba:	4603      	mov	r3, r0
 80050bc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80050be:	7cfb      	ldrb	r3, [r7, #19]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80050c4:	7cfb      	ldrb	r3, [r7, #19]
 80050c6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d04d      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050dc:	d108      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80050de:	4b1a      	ldr	r3, [pc, #104]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050e4:	4a18      	ldr	r2, [pc, #96]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050ea:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80050ee:	e012      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80050f0:	4b15      	ldr	r3, [pc, #84]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050f6:	4a14      	ldr	r2, [pc, #80]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050fc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005100:	4b11      	ldr	r3, [pc, #68]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005106:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800510e:	490e      	ldr	r1, [pc, #56]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005110:	4313      	orrs	r3, r2
 8005112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800511a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800511e:	d106      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005120:	4b09      	ldr	r3, [pc, #36]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	4a08      	ldr	r2, [pc, #32]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005126:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800512a:	60d3      	str	r3, [r2, #12]
 800512c:	e020      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005132:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005136:	d109      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005138:	4b03      	ldr	r3, [pc, #12]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	4a02      	ldr	r2, [pc, #8]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800513e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005142:	60d3      	str	r3, [r2, #12]
 8005144:	e014      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005146:	bf00      	nop
 8005148:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005150:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005154:	d10c      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	3304      	adds	r3, #4
 800515a:	2101      	movs	r1, #1
 800515c:	4618      	mov	r0, r3
 800515e:	f000 f8b5 	bl	80052cc <RCCEx_PLLSAI1_Config>
 8005162:	4603      	mov	r3, r0
 8005164:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005166:	7cfb      	ldrb	r3, [r7, #19]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800516c:	7cfb      	ldrb	r3, [r7, #19]
 800516e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d028      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800517c:	4b4a      	ldr	r3, [pc, #296]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800517e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005182:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800518a:	4947      	ldr	r1, [pc, #284]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005196:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800519a:	d106      	bne.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800519c:	4b42      	ldr	r3, [pc, #264]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	4a41      	ldr	r2, [pc, #260]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051a6:	60d3      	str	r3, [r2, #12]
 80051a8:	e011      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051b2:	d10c      	bne.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3304      	adds	r3, #4
 80051b8:	2101      	movs	r1, #1
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 f886 	bl	80052cc <RCCEx_PLLSAI1_Config>
 80051c0:	4603      	mov	r3, r0
 80051c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051c4:	7cfb      	ldrb	r3, [r7, #19]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80051ca:	7cfb      	ldrb	r3, [r7, #19]
 80051cc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d01e      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051da:	4b33      	ldr	r3, [pc, #204]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051ea:	492f      	ldr	r1, [pc, #188]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051fc:	d10c      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3304      	adds	r3, #4
 8005202:	2102      	movs	r1, #2
 8005204:	4618      	mov	r0, r3
 8005206:	f000 f861 	bl	80052cc <RCCEx_PLLSAI1_Config>
 800520a:	4603      	mov	r3, r0
 800520c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800520e:	7cfb      	ldrb	r3, [r7, #19]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005214:	7cfb      	ldrb	r3, [r7, #19]
 8005216:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00b      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005224:	4b20      	ldr	r3, [pc, #128]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005226:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800522a:	f023 0204 	bic.w	r2, r3, #4
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005234:	491c      	ldr	r1, [pc, #112]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00b      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005248:	4b17      	ldr	r3, [pc, #92]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800524a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800524e:	f023 0218 	bic.w	r2, r3, #24
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005258:	4913      	ldr	r1, [pc, #76]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800525a:	4313      	orrs	r3, r2
 800525c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d017      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800526c:	4b0e      	ldr	r3, [pc, #56]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800526e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005272:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800527c:	490a      	ldr	r1, [pc, #40]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800528a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800528e:	d105      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005290:	4b05      	ldr	r3, [pc, #20]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	4a04      	ldr	r2, [pc, #16]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005296:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800529a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800529c:	7cbb      	ldrb	r3, [r7, #18]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	40021000 	.word	0x40021000

080052ac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80052b0:	4b05      	ldr	r3, [pc, #20]	@ (80052c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a04      	ldr	r2, [pc, #16]	@ (80052c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80052b6:	f043 0304 	orr.w	r3, r3, #4
 80052ba:	6013      	str	r3, [r2, #0]
}
 80052bc:	bf00      	nop
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40021000 	.word	0x40021000

080052cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052da:	4b72      	ldr	r3, [pc, #456]	@ (80054a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f003 0303 	and.w	r3, r3, #3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00e      	beq.n	8005304 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052e6:	4b6f      	ldr	r3, [pc, #444]	@ (80054a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f003 0203 	and.w	r2, r3, #3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d103      	bne.n	80052fe <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
       ||
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d142      	bne.n	8005384 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	73fb      	strb	r3, [r7, #15]
 8005302:	e03f      	b.n	8005384 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b03      	cmp	r3, #3
 800530a:	d018      	beq.n	800533e <RCCEx_PLLSAI1_Config+0x72>
 800530c:	2b03      	cmp	r3, #3
 800530e:	d825      	bhi.n	800535c <RCCEx_PLLSAI1_Config+0x90>
 8005310:	2b01      	cmp	r3, #1
 8005312:	d002      	beq.n	800531a <RCCEx_PLLSAI1_Config+0x4e>
 8005314:	2b02      	cmp	r3, #2
 8005316:	d009      	beq.n	800532c <RCCEx_PLLSAI1_Config+0x60>
 8005318:	e020      	b.n	800535c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800531a:	4b62      	ldr	r3, [pc, #392]	@ (80054a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d11d      	bne.n	8005362 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800532a:	e01a      	b.n	8005362 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800532c:	4b5d      	ldr	r3, [pc, #372]	@ (80054a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005334:	2b00      	cmp	r3, #0
 8005336:	d116      	bne.n	8005366 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800533c:	e013      	b.n	8005366 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800533e:	4b59      	ldr	r3, [pc, #356]	@ (80054a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10f      	bne.n	800536a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800534a:	4b56      	ldr	r3, [pc, #344]	@ (80054a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d109      	bne.n	800536a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800535a:	e006      	b.n	800536a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	73fb      	strb	r3, [r7, #15]
      break;
 8005360:	e004      	b.n	800536c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005362:	bf00      	nop
 8005364:	e002      	b.n	800536c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005366:	bf00      	nop
 8005368:	e000      	b.n	800536c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800536a:	bf00      	nop
    }

    if(status == HAL_OK)
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d108      	bne.n	8005384 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005372:	4b4c      	ldr	r3, [pc, #304]	@ (80054a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f023 0203 	bic.w	r2, r3, #3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4949      	ldr	r1, [pc, #292]	@ (80054a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005380:	4313      	orrs	r3, r2
 8005382:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005384:	7bfb      	ldrb	r3, [r7, #15]
 8005386:	2b00      	cmp	r3, #0
 8005388:	f040 8086 	bne.w	8005498 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800538c:	4b45      	ldr	r3, [pc, #276]	@ (80054a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a44      	ldr	r2, [pc, #272]	@ (80054a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005392:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005396:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005398:	f7fc fbae 	bl	8001af8 <HAL_GetTick>
 800539c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800539e:	e009      	b.n	80053b4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053a0:	f7fc fbaa 	bl	8001af8 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d902      	bls.n	80053b4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	73fb      	strb	r3, [r7, #15]
        break;
 80053b2:	e005      	b.n	80053c0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053b4:	4b3b      	ldr	r3, [pc, #236]	@ (80054a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1ef      	bne.n	80053a0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d168      	bne.n	8005498 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d113      	bne.n	80053f4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053cc:	4b35      	ldr	r3, [pc, #212]	@ (80054a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053ce:	691a      	ldr	r2, [r3, #16]
 80053d0:	4b35      	ldr	r3, [pc, #212]	@ (80054a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053d2:	4013      	ands	r3, r2
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6892      	ldr	r2, [r2, #8]
 80053d8:	0211      	lsls	r1, r2, #8
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	68d2      	ldr	r2, [r2, #12]
 80053de:	06d2      	lsls	r2, r2, #27
 80053e0:	4311      	orrs	r1, r2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6852      	ldr	r2, [r2, #4]
 80053e6:	3a01      	subs	r2, #1
 80053e8:	0112      	lsls	r2, r2, #4
 80053ea:	430a      	orrs	r2, r1
 80053ec:	492d      	ldr	r1, [pc, #180]	@ (80054a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	610b      	str	r3, [r1, #16]
 80053f2:	e02d      	b.n	8005450 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d115      	bne.n	8005426 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053fa:	4b2a      	ldr	r3, [pc, #168]	@ (80054a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053fc:	691a      	ldr	r2, [r3, #16]
 80053fe:	4b2b      	ldr	r3, [pc, #172]	@ (80054ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005400:	4013      	ands	r3, r2
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6892      	ldr	r2, [r2, #8]
 8005406:	0211      	lsls	r1, r2, #8
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6912      	ldr	r2, [r2, #16]
 800540c:	0852      	lsrs	r2, r2, #1
 800540e:	3a01      	subs	r2, #1
 8005410:	0552      	lsls	r2, r2, #21
 8005412:	4311      	orrs	r1, r2
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6852      	ldr	r2, [r2, #4]
 8005418:	3a01      	subs	r2, #1
 800541a:	0112      	lsls	r2, r2, #4
 800541c:	430a      	orrs	r2, r1
 800541e:	4921      	ldr	r1, [pc, #132]	@ (80054a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005420:	4313      	orrs	r3, r2
 8005422:	610b      	str	r3, [r1, #16]
 8005424:	e014      	b.n	8005450 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005426:	4b1f      	ldr	r3, [pc, #124]	@ (80054a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005428:	691a      	ldr	r2, [r3, #16]
 800542a:	4b21      	ldr	r3, [pc, #132]	@ (80054b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800542c:	4013      	ands	r3, r2
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6892      	ldr	r2, [r2, #8]
 8005432:	0211      	lsls	r1, r2, #8
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6952      	ldr	r2, [r2, #20]
 8005438:	0852      	lsrs	r2, r2, #1
 800543a:	3a01      	subs	r2, #1
 800543c:	0652      	lsls	r2, r2, #25
 800543e:	4311      	orrs	r1, r2
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6852      	ldr	r2, [r2, #4]
 8005444:	3a01      	subs	r2, #1
 8005446:	0112      	lsls	r2, r2, #4
 8005448:	430a      	orrs	r2, r1
 800544a:	4916      	ldr	r1, [pc, #88]	@ (80054a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800544c:	4313      	orrs	r3, r2
 800544e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005450:	4b14      	ldr	r3, [pc, #80]	@ (80054a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a13      	ldr	r2, [pc, #76]	@ (80054a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005456:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800545a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800545c:	f7fc fb4c 	bl	8001af8 <HAL_GetTick>
 8005460:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005462:	e009      	b.n	8005478 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005464:	f7fc fb48 	bl	8001af8 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d902      	bls.n	8005478 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	73fb      	strb	r3, [r7, #15]
          break;
 8005476:	e005      	b.n	8005484 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005478:	4b0a      	ldr	r3, [pc, #40]	@ (80054a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0ef      	beq.n	8005464 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005484:	7bfb      	ldrb	r3, [r7, #15]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d106      	bne.n	8005498 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800548a:	4b06      	ldr	r3, [pc, #24]	@ (80054a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800548c:	691a      	ldr	r2, [r3, #16]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	4904      	ldr	r1, [pc, #16]	@ (80054a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005494:	4313      	orrs	r3, r2
 8005496:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005498:	7bfb      	ldrb	r3, [r7, #15]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	40021000 	.word	0x40021000
 80054a8:	07ff800f 	.word	0x07ff800f
 80054ac:	ff9f800f 	.word	0xff9f800f
 80054b0:	f9ff800f 	.word	0xf9ff800f

080054b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054c2:	4b72      	ldr	r3, [pc, #456]	@ (800568c <RCCEx_PLLSAI2_Config+0x1d8>)
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00e      	beq.n	80054ec <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80054ce:	4b6f      	ldr	r3, [pc, #444]	@ (800568c <RCCEx_PLLSAI2_Config+0x1d8>)
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f003 0203 	and.w	r2, r3, #3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d103      	bne.n	80054e6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
       ||
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d142      	bne.n	800556c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	73fb      	strb	r3, [r7, #15]
 80054ea:	e03f      	b.n	800556c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d018      	beq.n	8005526 <RCCEx_PLLSAI2_Config+0x72>
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	d825      	bhi.n	8005544 <RCCEx_PLLSAI2_Config+0x90>
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d002      	beq.n	8005502 <RCCEx_PLLSAI2_Config+0x4e>
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d009      	beq.n	8005514 <RCCEx_PLLSAI2_Config+0x60>
 8005500:	e020      	b.n	8005544 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005502:	4b62      	ldr	r3, [pc, #392]	@ (800568c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d11d      	bne.n	800554a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005512:	e01a      	b.n	800554a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005514:	4b5d      	ldr	r3, [pc, #372]	@ (800568c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800551c:	2b00      	cmp	r3, #0
 800551e:	d116      	bne.n	800554e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005524:	e013      	b.n	800554e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005526:	4b59      	ldr	r3, [pc, #356]	@ (800568c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10f      	bne.n	8005552 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005532:	4b56      	ldr	r3, [pc, #344]	@ (800568c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d109      	bne.n	8005552 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005542:	e006      	b.n	8005552 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	73fb      	strb	r3, [r7, #15]
      break;
 8005548:	e004      	b.n	8005554 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800554a:	bf00      	nop
 800554c:	e002      	b.n	8005554 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800554e:	bf00      	nop
 8005550:	e000      	b.n	8005554 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005552:	bf00      	nop
    }

    if(status == HAL_OK)
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d108      	bne.n	800556c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800555a:	4b4c      	ldr	r3, [pc, #304]	@ (800568c <RCCEx_PLLSAI2_Config+0x1d8>)
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f023 0203 	bic.w	r2, r3, #3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4949      	ldr	r1, [pc, #292]	@ (800568c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005568:	4313      	orrs	r3, r2
 800556a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800556c:	7bfb      	ldrb	r3, [r7, #15]
 800556e:	2b00      	cmp	r3, #0
 8005570:	f040 8086 	bne.w	8005680 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005574:	4b45      	ldr	r3, [pc, #276]	@ (800568c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a44      	ldr	r2, [pc, #272]	@ (800568c <RCCEx_PLLSAI2_Config+0x1d8>)
 800557a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800557e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005580:	f7fc faba 	bl	8001af8 <HAL_GetTick>
 8005584:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005586:	e009      	b.n	800559c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005588:	f7fc fab6 	bl	8001af8 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d902      	bls.n	800559c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	73fb      	strb	r3, [r7, #15]
        break;
 800559a:	e005      	b.n	80055a8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800559c:	4b3b      	ldr	r3, [pc, #236]	@ (800568c <RCCEx_PLLSAI2_Config+0x1d8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1ef      	bne.n	8005588 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d168      	bne.n	8005680 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d113      	bne.n	80055dc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055b4:	4b35      	ldr	r3, [pc, #212]	@ (800568c <RCCEx_PLLSAI2_Config+0x1d8>)
 80055b6:	695a      	ldr	r2, [r3, #20]
 80055b8:	4b35      	ldr	r3, [pc, #212]	@ (8005690 <RCCEx_PLLSAI2_Config+0x1dc>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6892      	ldr	r2, [r2, #8]
 80055c0:	0211      	lsls	r1, r2, #8
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	68d2      	ldr	r2, [r2, #12]
 80055c6:	06d2      	lsls	r2, r2, #27
 80055c8:	4311      	orrs	r1, r2
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	6852      	ldr	r2, [r2, #4]
 80055ce:	3a01      	subs	r2, #1
 80055d0:	0112      	lsls	r2, r2, #4
 80055d2:	430a      	orrs	r2, r1
 80055d4:	492d      	ldr	r1, [pc, #180]	@ (800568c <RCCEx_PLLSAI2_Config+0x1d8>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	614b      	str	r3, [r1, #20]
 80055da:	e02d      	b.n	8005638 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d115      	bne.n	800560e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055e2:	4b2a      	ldr	r3, [pc, #168]	@ (800568c <RCCEx_PLLSAI2_Config+0x1d8>)
 80055e4:	695a      	ldr	r2, [r3, #20]
 80055e6:	4b2b      	ldr	r3, [pc, #172]	@ (8005694 <RCCEx_PLLSAI2_Config+0x1e0>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6892      	ldr	r2, [r2, #8]
 80055ee:	0211      	lsls	r1, r2, #8
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6912      	ldr	r2, [r2, #16]
 80055f4:	0852      	lsrs	r2, r2, #1
 80055f6:	3a01      	subs	r2, #1
 80055f8:	0552      	lsls	r2, r2, #21
 80055fa:	4311      	orrs	r1, r2
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6852      	ldr	r2, [r2, #4]
 8005600:	3a01      	subs	r2, #1
 8005602:	0112      	lsls	r2, r2, #4
 8005604:	430a      	orrs	r2, r1
 8005606:	4921      	ldr	r1, [pc, #132]	@ (800568c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005608:	4313      	orrs	r3, r2
 800560a:	614b      	str	r3, [r1, #20]
 800560c:	e014      	b.n	8005638 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800560e:	4b1f      	ldr	r3, [pc, #124]	@ (800568c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005610:	695a      	ldr	r2, [r3, #20]
 8005612:	4b21      	ldr	r3, [pc, #132]	@ (8005698 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005614:	4013      	ands	r3, r2
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6892      	ldr	r2, [r2, #8]
 800561a:	0211      	lsls	r1, r2, #8
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6952      	ldr	r2, [r2, #20]
 8005620:	0852      	lsrs	r2, r2, #1
 8005622:	3a01      	subs	r2, #1
 8005624:	0652      	lsls	r2, r2, #25
 8005626:	4311      	orrs	r1, r2
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6852      	ldr	r2, [r2, #4]
 800562c:	3a01      	subs	r2, #1
 800562e:	0112      	lsls	r2, r2, #4
 8005630:	430a      	orrs	r2, r1
 8005632:	4916      	ldr	r1, [pc, #88]	@ (800568c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005634:	4313      	orrs	r3, r2
 8005636:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005638:	4b14      	ldr	r3, [pc, #80]	@ (800568c <RCCEx_PLLSAI2_Config+0x1d8>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a13      	ldr	r2, [pc, #76]	@ (800568c <RCCEx_PLLSAI2_Config+0x1d8>)
 800563e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005642:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005644:	f7fc fa58 	bl	8001af8 <HAL_GetTick>
 8005648:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800564a:	e009      	b.n	8005660 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800564c:	f7fc fa54 	bl	8001af8 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d902      	bls.n	8005660 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	73fb      	strb	r3, [r7, #15]
          break;
 800565e:	e005      	b.n	800566c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005660:	4b0a      	ldr	r3, [pc, #40]	@ (800568c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0ef      	beq.n	800564c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d106      	bne.n	8005680 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005672:	4b06      	ldr	r3, [pc, #24]	@ (800568c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005674:	695a      	ldr	r2, [r3, #20]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	4904      	ldr	r1, [pc, #16]	@ (800568c <RCCEx_PLLSAI2_Config+0x1d8>)
 800567c:	4313      	orrs	r3, r2
 800567e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005680:	7bfb      	ldrb	r3, [r7, #15]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	40021000 	.word	0x40021000
 8005690:	07ff800f 	.word	0x07ff800f
 8005694:	ff9f800f 	.word	0xff9f800f
 8005698:	f9ff800f 	.word	0xf9ff800f

0800569c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e095      	b.n	80057da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d108      	bne.n	80056c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056be:	d009      	beq.n	80056d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	61da      	str	r2, [r3, #28]
 80056c6:	e005      	b.n	80056d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7fb ff2a 	bl	8001548 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800570a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005714:	d902      	bls.n	800571c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	e002      	b.n	8005722 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800571c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005720:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800572a:	d007      	beq.n	800573c <HAL_SPI_Init+0xa0>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005734:	d002      	beq.n	800573c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800574c:	431a      	orrs	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	431a      	orrs	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005774:	431a      	orrs	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800577e:	ea42 0103 	orr.w	r1, r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005786:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	0c1b      	lsrs	r3, r3, #16
 8005798:	f003 0204 	and.w	r2, r3, #4
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a0:	f003 0310 	and.w	r3, r3, #16
 80057a4:	431a      	orrs	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057aa:	f003 0308 	and.w	r3, r3, #8
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80057b8:	ea42 0103 	orr.w	r1, r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b082      	sub	sp, #8
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e049      	b.n	8005888 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d106      	bne.n	800580e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f841 	bl	8005890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2202      	movs	r2, #2
 8005812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	3304      	adds	r3, #4
 800581e:	4619      	mov	r1, r3
 8005820:	4610      	mov	r0, r2
 8005822:	f000 f9d9 	bl	8005bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d001      	beq.n	80058bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e04f      	b.n	800595c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68da      	ldr	r2, [r3, #12]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0201 	orr.w	r2, r2, #1
 80058d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a23      	ldr	r2, [pc, #140]	@ (8005968 <HAL_TIM_Base_Start_IT+0xc4>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d01d      	beq.n	800591a <HAL_TIM_Base_Start_IT+0x76>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e6:	d018      	beq.n	800591a <HAL_TIM_Base_Start_IT+0x76>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a1f      	ldr	r2, [pc, #124]	@ (800596c <HAL_TIM_Base_Start_IT+0xc8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d013      	beq.n	800591a <HAL_TIM_Base_Start_IT+0x76>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005970 <HAL_TIM_Base_Start_IT+0xcc>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00e      	beq.n	800591a <HAL_TIM_Base_Start_IT+0x76>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a1c      	ldr	r2, [pc, #112]	@ (8005974 <HAL_TIM_Base_Start_IT+0xd0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d009      	beq.n	800591a <HAL_TIM_Base_Start_IT+0x76>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a1b      	ldr	r2, [pc, #108]	@ (8005978 <HAL_TIM_Base_Start_IT+0xd4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d004      	beq.n	800591a <HAL_TIM_Base_Start_IT+0x76>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a19      	ldr	r2, [pc, #100]	@ (800597c <HAL_TIM_Base_Start_IT+0xd8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d115      	bne.n	8005946 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	4b17      	ldr	r3, [pc, #92]	@ (8005980 <HAL_TIM_Base_Start_IT+0xdc>)
 8005922:	4013      	ands	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b06      	cmp	r3, #6
 800592a:	d015      	beq.n	8005958 <HAL_TIM_Base_Start_IT+0xb4>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005932:	d011      	beq.n	8005958 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 0201 	orr.w	r2, r2, #1
 8005942:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005944:	e008      	b.n	8005958 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f042 0201 	orr.w	r2, r2, #1
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	e000      	b.n	800595a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005958:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	40012c00 	.word	0x40012c00
 800596c:	40000400 	.word	0x40000400
 8005970:	40000800 	.word	0x40000800
 8005974:	40000c00 	.word	0x40000c00
 8005978:	40013400 	.word	0x40013400
 800597c:	40014000 	.word	0x40014000
 8005980:	00010007 	.word	0x00010007

08005984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d020      	beq.n	80059e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d01b      	beq.n	80059e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0202 	mvn.w	r2, #2
 80059b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f8e4 	bl	8005b9c <HAL_TIM_IC_CaptureCallback>
 80059d4:	e005      	b.n	80059e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f8d6 	bl	8005b88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f8e7 	bl	8005bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d020      	beq.n	8005a34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01b      	beq.n	8005a34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0204 	mvn.w	r2, #4
 8005a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2202      	movs	r2, #2
 8005a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f8be 	bl	8005b9c <HAL_TIM_IC_CaptureCallback>
 8005a20:	e005      	b.n	8005a2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f8b0 	bl	8005b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f8c1 	bl	8005bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f003 0308 	and.w	r3, r3, #8
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d020      	beq.n	8005a80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d01b      	beq.n	8005a80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f06f 0208 	mvn.w	r2, #8
 8005a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2204      	movs	r2, #4
 8005a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f898 	bl	8005b9c <HAL_TIM_IC_CaptureCallback>
 8005a6c:	e005      	b.n	8005a7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f88a 	bl	8005b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f89b 	bl	8005bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f003 0310 	and.w	r3, r3, #16
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d020      	beq.n	8005acc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f003 0310 	and.w	r3, r3, #16
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d01b      	beq.n	8005acc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0210 	mvn.w	r2, #16
 8005a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2208      	movs	r2, #8
 8005aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f872 	bl	8005b9c <HAL_TIM_IC_CaptureCallback>
 8005ab8:	e005      	b.n	8005ac6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f864 	bl	8005b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f875 	bl	8005bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00c      	beq.n	8005af0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d007      	beq.n	8005af0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f06f 0201 	mvn.w	r2, #1
 8005ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fb fb3a 	bl	8001164 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00c      	beq.n	8005b14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d007      	beq.n	8005b14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f906 	bl	8005d20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00c      	beq.n	8005b38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d007      	beq.n	8005b38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f8fe 	bl	8005d34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00c      	beq.n	8005b5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d007      	beq.n	8005b5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f834 	bl	8005bc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00c      	beq.n	8005b80 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f003 0320 	and.w	r3, r3, #32
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d007      	beq.n	8005b80 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0220 	mvn.w	r2, #32
 8005b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f8c6 	bl	8005d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b80:	bf00      	nop
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a40      	ldr	r2, [pc, #256]	@ (8005cec <TIM_Base_SetConfig+0x114>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d013      	beq.n	8005c18 <TIM_Base_SetConfig+0x40>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bf6:	d00f      	beq.n	8005c18 <TIM_Base_SetConfig+0x40>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a3d      	ldr	r2, [pc, #244]	@ (8005cf0 <TIM_Base_SetConfig+0x118>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d00b      	beq.n	8005c18 <TIM_Base_SetConfig+0x40>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a3c      	ldr	r2, [pc, #240]	@ (8005cf4 <TIM_Base_SetConfig+0x11c>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d007      	beq.n	8005c18 <TIM_Base_SetConfig+0x40>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a3b      	ldr	r2, [pc, #236]	@ (8005cf8 <TIM_Base_SetConfig+0x120>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d003      	beq.n	8005c18 <TIM_Base_SetConfig+0x40>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a3a      	ldr	r2, [pc, #232]	@ (8005cfc <TIM_Base_SetConfig+0x124>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d108      	bne.n	8005c2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a2f      	ldr	r2, [pc, #188]	@ (8005cec <TIM_Base_SetConfig+0x114>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d01f      	beq.n	8005c72 <TIM_Base_SetConfig+0x9a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c38:	d01b      	beq.n	8005c72 <TIM_Base_SetConfig+0x9a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a2c      	ldr	r2, [pc, #176]	@ (8005cf0 <TIM_Base_SetConfig+0x118>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d017      	beq.n	8005c72 <TIM_Base_SetConfig+0x9a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a2b      	ldr	r2, [pc, #172]	@ (8005cf4 <TIM_Base_SetConfig+0x11c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d013      	beq.n	8005c72 <TIM_Base_SetConfig+0x9a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a2a      	ldr	r2, [pc, #168]	@ (8005cf8 <TIM_Base_SetConfig+0x120>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00f      	beq.n	8005c72 <TIM_Base_SetConfig+0x9a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a29      	ldr	r2, [pc, #164]	@ (8005cfc <TIM_Base_SetConfig+0x124>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00b      	beq.n	8005c72 <TIM_Base_SetConfig+0x9a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a28      	ldr	r2, [pc, #160]	@ (8005d00 <TIM_Base_SetConfig+0x128>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d007      	beq.n	8005c72 <TIM_Base_SetConfig+0x9a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a27      	ldr	r2, [pc, #156]	@ (8005d04 <TIM_Base_SetConfig+0x12c>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d003      	beq.n	8005c72 <TIM_Base_SetConfig+0x9a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a26      	ldr	r2, [pc, #152]	@ (8005d08 <TIM_Base_SetConfig+0x130>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d108      	bne.n	8005c84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a10      	ldr	r2, [pc, #64]	@ (8005cec <TIM_Base_SetConfig+0x114>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00f      	beq.n	8005cd0 <TIM_Base_SetConfig+0xf8>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a12      	ldr	r2, [pc, #72]	@ (8005cfc <TIM_Base_SetConfig+0x124>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d00b      	beq.n	8005cd0 <TIM_Base_SetConfig+0xf8>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a11      	ldr	r2, [pc, #68]	@ (8005d00 <TIM_Base_SetConfig+0x128>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d007      	beq.n	8005cd0 <TIM_Base_SetConfig+0xf8>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a10      	ldr	r2, [pc, #64]	@ (8005d04 <TIM_Base_SetConfig+0x12c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d003      	beq.n	8005cd0 <TIM_Base_SetConfig+0xf8>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a0f      	ldr	r2, [pc, #60]	@ (8005d08 <TIM_Base_SetConfig+0x130>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d103      	bne.n	8005cd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	691a      	ldr	r2, [r3, #16]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	615a      	str	r2, [r3, #20]
}
 8005cde:	bf00      	nop
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	40012c00 	.word	0x40012c00
 8005cf0:	40000400 	.word	0x40000400
 8005cf4:	40000800 	.word	0x40000800
 8005cf8:	40000c00 	.word	0x40000c00
 8005cfc:	40013400 	.word	0x40013400
 8005d00:	40014000 	.word	0x40014000
 8005d04:	40014400 	.word	0x40014400
 8005d08:	40014800 	.word	0x40014800

08005d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e042      	b.n	8005de0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d106      	bne.n	8005d72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7fb fc2f 	bl	80015d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2224      	movs	r2, #36	@ 0x24
 8005d76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0201 	bic.w	r2, r2, #1
 8005d88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fbb2 	bl	80064fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f8b3 	bl	8005f04 <UART_SetConfig>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d101      	bne.n	8005da8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e01b      	b.n	8005de0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005db6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689a      	ldr	r2, [r3, #8]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005dc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0201 	orr.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fc31 	bl	8006640 <UART_CheckIdleState>
 8005dde:	4603      	mov	r3, r0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08a      	sub	sp, #40	@ 0x28
 8005dec:	af02      	add	r7, sp, #8
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	603b      	str	r3, [r7, #0]
 8005df4:	4613      	mov	r3, r2
 8005df6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dfe:	2b20      	cmp	r3, #32
 8005e00:	d17b      	bne.n	8005efa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <HAL_UART_Transmit+0x26>
 8005e08:	88fb      	ldrh	r3, [r7, #6]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e074      	b.n	8005efc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2221      	movs	r2, #33	@ 0x21
 8005e1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e22:	f7fb fe69 	bl	8001af8 <HAL_GetTick>
 8005e26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	88fa      	ldrh	r2, [r7, #6]
 8005e2c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	88fa      	ldrh	r2, [r7, #6]
 8005e34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e40:	d108      	bne.n	8005e54 <HAL_UART_Transmit+0x6c>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d104      	bne.n	8005e54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	61bb      	str	r3, [r7, #24]
 8005e52:	e003      	b.n	8005e5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e5c:	e030      	b.n	8005ec0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2200      	movs	r2, #0
 8005e66:	2180      	movs	r1, #128	@ 0x80
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 fc93 	bl	8006794 <UART_WaitOnFlagUntilTimeout>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e03d      	b.n	8005efc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10b      	bne.n	8005e9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	881a      	ldrh	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e92:	b292      	uxth	r2, r2
 8005e94:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	3302      	adds	r3, #2
 8005e9a:	61bb      	str	r3, [r7, #24]
 8005e9c:	e007      	b.n	8005eae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	781a      	ldrb	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1c8      	bne.n	8005e5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	2140      	movs	r1, #64	@ 0x40
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 fc5c 	bl	8006794 <UART_WaitOnFlagUntilTimeout>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d005      	beq.n	8005eee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e006      	b.n	8005efc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	e000      	b.n	8005efc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005efa:	2302      	movs	r3, #2
  }
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3720      	adds	r7, #32
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f08:	b08c      	sub	sp, #48	@ 0x30
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	431a      	orrs	r2, r3
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	4baa      	ldr	r3, [pc, #680]	@ (80061dc <UART_SetConfig+0x2d8>)
 8005f34:	4013      	ands	r3, r2
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	6812      	ldr	r2, [r2, #0]
 8005f3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f3c:	430b      	orrs	r3, r1
 8005f3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a9f      	ldr	r2, [pc, #636]	@ (80061e0 <UART_SetConfig+0x2dc>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d004      	beq.n	8005f70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005f7a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	6812      	ldr	r2, [r2, #0]
 8005f82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f84:	430b      	orrs	r3, r1
 8005f86:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f8e:	f023 010f 	bic.w	r1, r3, #15
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a90      	ldr	r2, [pc, #576]	@ (80061e4 <UART_SetConfig+0x2e0>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d125      	bne.n	8005ff4 <UART_SetConfig+0xf0>
 8005fa8:	4b8f      	ldr	r3, [pc, #572]	@ (80061e8 <UART_SetConfig+0x2e4>)
 8005faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d81a      	bhi.n	8005fec <UART_SetConfig+0xe8>
 8005fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fbc <UART_SetConfig+0xb8>)
 8005fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbc:	08005fcd 	.word	0x08005fcd
 8005fc0:	08005fdd 	.word	0x08005fdd
 8005fc4:	08005fd5 	.word	0x08005fd5
 8005fc8:	08005fe5 	.word	0x08005fe5
 8005fcc:	2301      	movs	r3, #1
 8005fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fd2:	e116      	b.n	8006202 <UART_SetConfig+0x2fe>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fda:	e112      	b.n	8006202 <UART_SetConfig+0x2fe>
 8005fdc:	2304      	movs	r3, #4
 8005fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fe2:	e10e      	b.n	8006202 <UART_SetConfig+0x2fe>
 8005fe4:	2308      	movs	r3, #8
 8005fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fea:	e10a      	b.n	8006202 <UART_SetConfig+0x2fe>
 8005fec:	2310      	movs	r3, #16
 8005fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ff2:	e106      	b.n	8006202 <UART_SetConfig+0x2fe>
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a7c      	ldr	r2, [pc, #496]	@ (80061ec <UART_SetConfig+0x2e8>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d138      	bne.n	8006070 <UART_SetConfig+0x16c>
 8005ffe:	4b7a      	ldr	r3, [pc, #488]	@ (80061e8 <UART_SetConfig+0x2e4>)
 8006000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006004:	f003 030c 	and.w	r3, r3, #12
 8006008:	2b0c      	cmp	r3, #12
 800600a:	d82d      	bhi.n	8006068 <UART_SetConfig+0x164>
 800600c:	a201      	add	r2, pc, #4	@ (adr r2, 8006014 <UART_SetConfig+0x110>)
 800600e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006012:	bf00      	nop
 8006014:	08006049 	.word	0x08006049
 8006018:	08006069 	.word	0x08006069
 800601c:	08006069 	.word	0x08006069
 8006020:	08006069 	.word	0x08006069
 8006024:	08006059 	.word	0x08006059
 8006028:	08006069 	.word	0x08006069
 800602c:	08006069 	.word	0x08006069
 8006030:	08006069 	.word	0x08006069
 8006034:	08006051 	.word	0x08006051
 8006038:	08006069 	.word	0x08006069
 800603c:	08006069 	.word	0x08006069
 8006040:	08006069 	.word	0x08006069
 8006044:	08006061 	.word	0x08006061
 8006048:	2300      	movs	r3, #0
 800604a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800604e:	e0d8      	b.n	8006202 <UART_SetConfig+0x2fe>
 8006050:	2302      	movs	r3, #2
 8006052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006056:	e0d4      	b.n	8006202 <UART_SetConfig+0x2fe>
 8006058:	2304      	movs	r3, #4
 800605a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800605e:	e0d0      	b.n	8006202 <UART_SetConfig+0x2fe>
 8006060:	2308      	movs	r3, #8
 8006062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006066:	e0cc      	b.n	8006202 <UART_SetConfig+0x2fe>
 8006068:	2310      	movs	r3, #16
 800606a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800606e:	e0c8      	b.n	8006202 <UART_SetConfig+0x2fe>
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a5e      	ldr	r2, [pc, #376]	@ (80061f0 <UART_SetConfig+0x2ec>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d125      	bne.n	80060c6 <UART_SetConfig+0x1c2>
 800607a:	4b5b      	ldr	r3, [pc, #364]	@ (80061e8 <UART_SetConfig+0x2e4>)
 800607c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006080:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006084:	2b30      	cmp	r3, #48	@ 0x30
 8006086:	d016      	beq.n	80060b6 <UART_SetConfig+0x1b2>
 8006088:	2b30      	cmp	r3, #48	@ 0x30
 800608a:	d818      	bhi.n	80060be <UART_SetConfig+0x1ba>
 800608c:	2b20      	cmp	r3, #32
 800608e:	d00a      	beq.n	80060a6 <UART_SetConfig+0x1a2>
 8006090:	2b20      	cmp	r3, #32
 8006092:	d814      	bhi.n	80060be <UART_SetConfig+0x1ba>
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <UART_SetConfig+0x19a>
 8006098:	2b10      	cmp	r3, #16
 800609a:	d008      	beq.n	80060ae <UART_SetConfig+0x1aa>
 800609c:	e00f      	b.n	80060be <UART_SetConfig+0x1ba>
 800609e:	2300      	movs	r3, #0
 80060a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060a4:	e0ad      	b.n	8006202 <UART_SetConfig+0x2fe>
 80060a6:	2302      	movs	r3, #2
 80060a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ac:	e0a9      	b.n	8006202 <UART_SetConfig+0x2fe>
 80060ae:	2304      	movs	r3, #4
 80060b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060b4:	e0a5      	b.n	8006202 <UART_SetConfig+0x2fe>
 80060b6:	2308      	movs	r3, #8
 80060b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060bc:	e0a1      	b.n	8006202 <UART_SetConfig+0x2fe>
 80060be:	2310      	movs	r3, #16
 80060c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060c4:	e09d      	b.n	8006202 <UART_SetConfig+0x2fe>
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a4a      	ldr	r2, [pc, #296]	@ (80061f4 <UART_SetConfig+0x2f0>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d125      	bne.n	800611c <UART_SetConfig+0x218>
 80060d0:	4b45      	ldr	r3, [pc, #276]	@ (80061e8 <UART_SetConfig+0x2e4>)
 80060d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80060da:	2bc0      	cmp	r3, #192	@ 0xc0
 80060dc:	d016      	beq.n	800610c <UART_SetConfig+0x208>
 80060de:	2bc0      	cmp	r3, #192	@ 0xc0
 80060e0:	d818      	bhi.n	8006114 <UART_SetConfig+0x210>
 80060e2:	2b80      	cmp	r3, #128	@ 0x80
 80060e4:	d00a      	beq.n	80060fc <UART_SetConfig+0x1f8>
 80060e6:	2b80      	cmp	r3, #128	@ 0x80
 80060e8:	d814      	bhi.n	8006114 <UART_SetConfig+0x210>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d002      	beq.n	80060f4 <UART_SetConfig+0x1f0>
 80060ee:	2b40      	cmp	r3, #64	@ 0x40
 80060f0:	d008      	beq.n	8006104 <UART_SetConfig+0x200>
 80060f2:	e00f      	b.n	8006114 <UART_SetConfig+0x210>
 80060f4:	2300      	movs	r3, #0
 80060f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060fa:	e082      	b.n	8006202 <UART_SetConfig+0x2fe>
 80060fc:	2302      	movs	r3, #2
 80060fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006102:	e07e      	b.n	8006202 <UART_SetConfig+0x2fe>
 8006104:	2304      	movs	r3, #4
 8006106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800610a:	e07a      	b.n	8006202 <UART_SetConfig+0x2fe>
 800610c:	2308      	movs	r3, #8
 800610e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006112:	e076      	b.n	8006202 <UART_SetConfig+0x2fe>
 8006114:	2310      	movs	r3, #16
 8006116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800611a:	e072      	b.n	8006202 <UART_SetConfig+0x2fe>
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a35      	ldr	r2, [pc, #212]	@ (80061f8 <UART_SetConfig+0x2f4>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d12a      	bne.n	800617c <UART_SetConfig+0x278>
 8006126:	4b30      	ldr	r3, [pc, #192]	@ (80061e8 <UART_SetConfig+0x2e4>)
 8006128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800612c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006130:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006134:	d01a      	beq.n	800616c <UART_SetConfig+0x268>
 8006136:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800613a:	d81b      	bhi.n	8006174 <UART_SetConfig+0x270>
 800613c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006140:	d00c      	beq.n	800615c <UART_SetConfig+0x258>
 8006142:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006146:	d815      	bhi.n	8006174 <UART_SetConfig+0x270>
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <UART_SetConfig+0x250>
 800614c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006150:	d008      	beq.n	8006164 <UART_SetConfig+0x260>
 8006152:	e00f      	b.n	8006174 <UART_SetConfig+0x270>
 8006154:	2300      	movs	r3, #0
 8006156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800615a:	e052      	b.n	8006202 <UART_SetConfig+0x2fe>
 800615c:	2302      	movs	r3, #2
 800615e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006162:	e04e      	b.n	8006202 <UART_SetConfig+0x2fe>
 8006164:	2304      	movs	r3, #4
 8006166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800616a:	e04a      	b.n	8006202 <UART_SetConfig+0x2fe>
 800616c:	2308      	movs	r3, #8
 800616e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006172:	e046      	b.n	8006202 <UART_SetConfig+0x2fe>
 8006174:	2310      	movs	r3, #16
 8006176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800617a:	e042      	b.n	8006202 <UART_SetConfig+0x2fe>
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a17      	ldr	r2, [pc, #92]	@ (80061e0 <UART_SetConfig+0x2dc>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d13a      	bne.n	80061fc <UART_SetConfig+0x2f8>
 8006186:	4b18      	ldr	r3, [pc, #96]	@ (80061e8 <UART_SetConfig+0x2e4>)
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800618c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006190:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006194:	d01a      	beq.n	80061cc <UART_SetConfig+0x2c8>
 8006196:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800619a:	d81b      	bhi.n	80061d4 <UART_SetConfig+0x2d0>
 800619c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061a0:	d00c      	beq.n	80061bc <UART_SetConfig+0x2b8>
 80061a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061a6:	d815      	bhi.n	80061d4 <UART_SetConfig+0x2d0>
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <UART_SetConfig+0x2b0>
 80061ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061b0:	d008      	beq.n	80061c4 <UART_SetConfig+0x2c0>
 80061b2:	e00f      	b.n	80061d4 <UART_SetConfig+0x2d0>
 80061b4:	2300      	movs	r3, #0
 80061b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ba:	e022      	b.n	8006202 <UART_SetConfig+0x2fe>
 80061bc:	2302      	movs	r3, #2
 80061be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061c2:	e01e      	b.n	8006202 <UART_SetConfig+0x2fe>
 80061c4:	2304      	movs	r3, #4
 80061c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ca:	e01a      	b.n	8006202 <UART_SetConfig+0x2fe>
 80061cc:	2308      	movs	r3, #8
 80061ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061d2:	e016      	b.n	8006202 <UART_SetConfig+0x2fe>
 80061d4:	2310      	movs	r3, #16
 80061d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061da:	e012      	b.n	8006202 <UART_SetConfig+0x2fe>
 80061dc:	cfff69f3 	.word	0xcfff69f3
 80061e0:	40008000 	.word	0x40008000
 80061e4:	40013800 	.word	0x40013800
 80061e8:	40021000 	.word	0x40021000
 80061ec:	40004400 	.word	0x40004400
 80061f0:	40004800 	.word	0x40004800
 80061f4:	40004c00 	.word	0x40004c00
 80061f8:	40005000 	.word	0x40005000
 80061fc:	2310      	movs	r3, #16
 80061fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4aae      	ldr	r2, [pc, #696]	@ (80064c0 <UART_SetConfig+0x5bc>)
 8006208:	4293      	cmp	r3, r2
 800620a:	f040 8097 	bne.w	800633c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800620e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006212:	2b08      	cmp	r3, #8
 8006214:	d823      	bhi.n	800625e <UART_SetConfig+0x35a>
 8006216:	a201      	add	r2, pc, #4	@ (adr r2, 800621c <UART_SetConfig+0x318>)
 8006218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621c:	08006241 	.word	0x08006241
 8006220:	0800625f 	.word	0x0800625f
 8006224:	08006249 	.word	0x08006249
 8006228:	0800625f 	.word	0x0800625f
 800622c:	0800624f 	.word	0x0800624f
 8006230:	0800625f 	.word	0x0800625f
 8006234:	0800625f 	.word	0x0800625f
 8006238:	0800625f 	.word	0x0800625f
 800623c:	08006257 	.word	0x08006257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006240:	f7fe fbe6 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 8006244:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006246:	e010      	b.n	800626a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006248:	4b9e      	ldr	r3, [pc, #632]	@ (80064c4 <UART_SetConfig+0x5c0>)
 800624a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800624c:	e00d      	b.n	800626a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800624e:	f7fe fb47 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 8006252:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006254:	e009      	b.n	800626a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006256:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800625a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800625c:	e005      	b.n	800626a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006268:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 8130 	beq.w	80064d2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006276:	4a94      	ldr	r2, [pc, #592]	@ (80064c8 <UART_SetConfig+0x5c4>)
 8006278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800627c:	461a      	mov	r2, r3
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	fbb3 f3f2 	udiv	r3, r3, r2
 8006284:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	4613      	mov	r3, r2
 800628c:	005b      	lsls	r3, r3, #1
 800628e:	4413      	add	r3, r2
 8006290:	69ba      	ldr	r2, [r7, #24]
 8006292:	429a      	cmp	r2, r3
 8006294:	d305      	bcc.n	80062a2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d903      	bls.n	80062aa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80062a8:	e113      	b.n	80064d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ac:	2200      	movs	r2, #0
 80062ae:	60bb      	str	r3, [r7, #8]
 80062b0:	60fa      	str	r2, [r7, #12]
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b6:	4a84      	ldr	r2, [pc, #528]	@ (80064c8 <UART_SetConfig+0x5c4>)
 80062b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	2200      	movs	r2, #0
 80062c0:	603b      	str	r3, [r7, #0]
 80062c2:	607a      	str	r2, [r7, #4]
 80062c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80062cc:	f7f9 ffe8 	bl	80002a0 <__aeabi_uldivmod>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4610      	mov	r0, r2
 80062d6:	4619      	mov	r1, r3
 80062d8:	f04f 0200 	mov.w	r2, #0
 80062dc:	f04f 0300 	mov.w	r3, #0
 80062e0:	020b      	lsls	r3, r1, #8
 80062e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80062e6:	0202      	lsls	r2, r0, #8
 80062e8:	6979      	ldr	r1, [r7, #20]
 80062ea:	6849      	ldr	r1, [r1, #4]
 80062ec:	0849      	lsrs	r1, r1, #1
 80062ee:	2000      	movs	r0, #0
 80062f0:	460c      	mov	r4, r1
 80062f2:	4605      	mov	r5, r0
 80062f4:	eb12 0804 	adds.w	r8, r2, r4
 80062f8:	eb43 0905 	adc.w	r9, r3, r5
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	469a      	mov	sl, r3
 8006304:	4693      	mov	fp, r2
 8006306:	4652      	mov	r2, sl
 8006308:	465b      	mov	r3, fp
 800630a:	4640      	mov	r0, r8
 800630c:	4649      	mov	r1, r9
 800630e:	f7f9 ffc7 	bl	80002a0 <__aeabi_uldivmod>
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	4613      	mov	r3, r2
 8006318:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006320:	d308      	bcc.n	8006334 <UART_SetConfig+0x430>
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006328:	d204      	bcs.n	8006334 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6a3a      	ldr	r2, [r7, #32]
 8006330:	60da      	str	r2, [r3, #12]
 8006332:	e0ce      	b.n	80064d2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800633a:	e0ca      	b.n	80064d2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006344:	d166      	bne.n	8006414 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006346:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800634a:	2b08      	cmp	r3, #8
 800634c:	d827      	bhi.n	800639e <UART_SetConfig+0x49a>
 800634e:	a201      	add	r2, pc, #4	@ (adr r2, 8006354 <UART_SetConfig+0x450>)
 8006350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006354:	08006379 	.word	0x08006379
 8006358:	08006381 	.word	0x08006381
 800635c:	08006389 	.word	0x08006389
 8006360:	0800639f 	.word	0x0800639f
 8006364:	0800638f 	.word	0x0800638f
 8006368:	0800639f 	.word	0x0800639f
 800636c:	0800639f 	.word	0x0800639f
 8006370:	0800639f 	.word	0x0800639f
 8006374:	08006397 	.word	0x08006397
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006378:	f7fe fb4a 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 800637c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800637e:	e014      	b.n	80063aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006380:	f7fe fb5c 	bl	8004a3c <HAL_RCC_GetPCLK2Freq>
 8006384:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006386:	e010      	b.n	80063aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006388:	4b4e      	ldr	r3, [pc, #312]	@ (80064c4 <UART_SetConfig+0x5c0>)
 800638a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800638c:	e00d      	b.n	80063aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800638e:	f7fe faa7 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 8006392:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006394:	e009      	b.n	80063aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006396:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800639a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800639c:	e005      	b.n	80063aa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800639e:	2300      	movs	r3, #0
 80063a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80063a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 8090 	beq.w	80064d2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b6:	4a44      	ldr	r2, [pc, #272]	@ (80064c8 <UART_SetConfig+0x5c4>)
 80063b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063bc:	461a      	mov	r2, r3
 80063be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80063c4:	005a      	lsls	r2, r3, #1
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	085b      	lsrs	r3, r3, #1
 80063cc:	441a      	add	r2, r3
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	2b0f      	cmp	r3, #15
 80063dc:	d916      	bls.n	800640c <UART_SetConfig+0x508>
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063e4:	d212      	bcs.n	800640c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	f023 030f 	bic.w	r3, r3, #15
 80063ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	085b      	lsrs	r3, r3, #1
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	8bfb      	ldrh	r3, [r7, #30]
 80063fe:	4313      	orrs	r3, r2
 8006400:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	8bfa      	ldrh	r2, [r7, #30]
 8006408:	60da      	str	r2, [r3, #12]
 800640a:	e062      	b.n	80064d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006412:	e05e      	b.n	80064d2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006414:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006418:	2b08      	cmp	r3, #8
 800641a:	d828      	bhi.n	800646e <UART_SetConfig+0x56a>
 800641c:	a201      	add	r2, pc, #4	@ (adr r2, 8006424 <UART_SetConfig+0x520>)
 800641e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006422:	bf00      	nop
 8006424:	08006449 	.word	0x08006449
 8006428:	08006451 	.word	0x08006451
 800642c:	08006459 	.word	0x08006459
 8006430:	0800646f 	.word	0x0800646f
 8006434:	0800645f 	.word	0x0800645f
 8006438:	0800646f 	.word	0x0800646f
 800643c:	0800646f 	.word	0x0800646f
 8006440:	0800646f 	.word	0x0800646f
 8006444:	08006467 	.word	0x08006467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006448:	f7fe fae2 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 800644c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800644e:	e014      	b.n	800647a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006450:	f7fe faf4 	bl	8004a3c <HAL_RCC_GetPCLK2Freq>
 8006454:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006456:	e010      	b.n	800647a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006458:	4b1a      	ldr	r3, [pc, #104]	@ (80064c4 <UART_SetConfig+0x5c0>)
 800645a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800645c:	e00d      	b.n	800647a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800645e:	f7fe fa3f 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 8006462:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006464:	e009      	b.n	800647a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800646a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800646c:	e005      	b.n	800647a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006478:	bf00      	nop
    }

    if (pclk != 0U)
 800647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647c:	2b00      	cmp	r3, #0
 800647e:	d028      	beq.n	80064d2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006484:	4a10      	ldr	r2, [pc, #64]	@ (80064c8 <UART_SetConfig+0x5c4>)
 8006486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800648a:	461a      	mov	r2, r3
 800648c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	085b      	lsrs	r3, r3, #1
 8006498:	441a      	add	r2, r3
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	2b0f      	cmp	r3, #15
 80064a8:	d910      	bls.n	80064cc <UART_SetConfig+0x5c8>
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064b0:	d20c      	bcs.n	80064cc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	60da      	str	r2, [r3, #12]
 80064bc:	e009      	b.n	80064d2 <UART_SetConfig+0x5ce>
 80064be:	bf00      	nop
 80064c0:	40008000 	.word	0x40008000
 80064c4:	00f42400 	.word	0x00f42400
 80064c8:	0800af5c 	.word	0x0800af5c
      }
      else
      {
        ret = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2201      	movs	r2, #1
 80064de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2200      	movs	r2, #0
 80064e6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	2200      	movs	r2, #0
 80064ec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80064ee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3730      	adds	r7, #48	@ 0x30
 80064f6:	46bd      	mov	sp, r7
 80064f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080064fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006508:	f003 0308 	and.w	r3, r3, #8
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00a      	beq.n	8006526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00a      	beq.n	800656a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656e:	f003 0304 	and.w	r3, r3, #4
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00a      	beq.n	800658c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006590:	f003 0310 	and.w	r3, r3, #16
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00a      	beq.n	80065ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b2:	f003 0320 	and.w	r3, r3, #32
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00a      	beq.n	80065d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d01a      	beq.n	8006612 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065fa:	d10a      	bne.n	8006612 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00a      	beq.n	8006634 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	430a      	orrs	r2, r1
 8006632:	605a      	str	r2, [r3, #4]
  }
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b098      	sub	sp, #96	@ 0x60
 8006644:	af02      	add	r7, sp, #8
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006650:	f7fb fa52 	bl	8001af8 <HAL_GetTick>
 8006654:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0308 	and.w	r3, r3, #8
 8006660:	2b08      	cmp	r3, #8
 8006662:	d12f      	bne.n	80066c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006664:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800666c:	2200      	movs	r2, #0
 800666e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f88e 	bl	8006794 <UART_WaitOnFlagUntilTimeout>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d022      	beq.n	80066c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006686:	e853 3f00 	ldrex	r3, [r3]
 800668a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800668c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800668e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006692:	653b      	str	r3, [r7, #80]	@ 0x50
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	461a      	mov	r2, r3
 800669a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800669c:	647b      	str	r3, [r7, #68]	@ 0x44
 800669e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066a4:	e841 2300 	strex	r3, r2, [r1]
 80066a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1e6      	bne.n	800667e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e063      	b.n	800678c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0304 	and.w	r3, r3, #4
 80066ce:	2b04      	cmp	r3, #4
 80066d0:	d149      	bne.n	8006766 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066da:	2200      	movs	r2, #0
 80066dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f857 	bl	8006794 <UART_WaitOnFlagUntilTimeout>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d03c      	beq.n	8006766 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f4:	e853 3f00 	ldrex	r3, [r3]
 80066f8:	623b      	str	r3, [r7, #32]
   return(result);
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006700:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800670a:	633b      	str	r3, [r7, #48]	@ 0x30
 800670c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006710:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006712:	e841 2300 	strex	r3, r2, [r1]
 8006716:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1e6      	bne.n	80066ec <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3308      	adds	r3, #8
 8006724:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	e853 3f00 	ldrex	r3, [r3]
 800672c:	60fb      	str	r3, [r7, #12]
   return(result);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f023 0301 	bic.w	r3, r3, #1
 8006734:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3308      	adds	r3, #8
 800673c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800673e:	61fa      	str	r2, [r7, #28]
 8006740:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	69b9      	ldr	r1, [r7, #24]
 8006744:	69fa      	ldr	r2, [r7, #28]
 8006746:	e841 2300 	strex	r3, r2, [r1]
 800674a:	617b      	str	r3, [r7, #20]
   return(result);
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e5      	bne.n	800671e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2220      	movs	r2, #32
 8006756:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e012      	b.n	800678c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2220      	movs	r2, #32
 800676a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2220      	movs	r2, #32
 8006772:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3758      	adds	r7, #88	@ 0x58
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	603b      	str	r3, [r7, #0]
 80067a0:	4613      	mov	r3, r2
 80067a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a4:	e049      	b.n	800683a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ac:	d045      	beq.n	800683a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ae:	f7fb f9a3 	bl	8001af8 <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d302      	bcc.n	80067c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e048      	b.n	800685a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0304 	and.w	r3, r3, #4
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d031      	beq.n	800683a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	f003 0308 	and.w	r3, r3, #8
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d110      	bne.n	8006806 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2208      	movs	r2, #8
 80067ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 f838 	bl	8006862 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2208      	movs	r2, #8
 80067f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e029      	b.n	800685a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006810:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006814:	d111      	bne.n	800683a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800681e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f000 f81e 	bl	8006862 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2220      	movs	r2, #32
 800682a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e00f      	b.n	800685a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69da      	ldr	r2, [r3, #28]
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	4013      	ands	r3, r2
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	429a      	cmp	r2, r3
 8006848:	bf0c      	ite	eq
 800684a:	2301      	moveq	r3, #1
 800684c:	2300      	movne	r3, #0
 800684e:	b2db      	uxtb	r3, r3
 8006850:	461a      	mov	r2, r3
 8006852:	79fb      	ldrb	r3, [r7, #7]
 8006854:	429a      	cmp	r2, r3
 8006856:	d0a6      	beq.n	80067a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006862:	b480      	push	{r7}
 8006864:	b095      	sub	sp, #84	@ 0x54
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006872:	e853 3f00 	ldrex	r3, [r3]
 8006876:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800687e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	461a      	mov	r2, r3
 8006886:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006888:	643b      	str	r3, [r7, #64]	@ 0x40
 800688a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800688e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006890:	e841 2300 	strex	r3, r2, [r1]
 8006894:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1e6      	bne.n	800686a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3308      	adds	r3, #8
 80068a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	e853 3f00 	ldrex	r3, [r3]
 80068aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068b2:	f023 0301 	bic.w	r3, r3, #1
 80068b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3308      	adds	r3, #8
 80068be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e3      	bne.n	800689c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d118      	bne.n	800690e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	f023 0310 	bic.w	r3, r3, #16
 80068f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068fa:	61bb      	str	r3, [r7, #24]
 80068fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	6979      	ldr	r1, [r7, #20]
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	613b      	str	r3, [r7, #16]
   return(result);
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e6      	bne.n	80068dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2220      	movs	r2, #32
 8006912:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006922:	bf00      	nop
 8006924:	3754      	adds	r7, #84	@ 0x54
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800692e:	b480      	push	{r7}
 8006930:	b085      	sub	sp, #20
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800693c:	2b01      	cmp	r3, #1
 800693e:	d101      	bne.n	8006944 <HAL_UARTEx_DisableFifoMode+0x16>
 8006940:	2302      	movs	r3, #2
 8006942:	e027      	b.n	8006994 <HAL_UARTEx_DisableFifoMode+0x66>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2224      	movs	r2, #36	@ 0x24
 8006950:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 0201 	bic.w	r2, r2, #1
 800696a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006972:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2220      	movs	r2, #32
 8006986:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d101      	bne.n	80069b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e02d      	b.n	8006a14 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2224      	movs	r2, #36	@ 0x24
 80069c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0201 	bic.w	r2, r2, #1
 80069de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	430a      	orrs	r2, r1
 80069f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f84f 	bl	8006a98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d101      	bne.n	8006a34 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a30:	2302      	movs	r3, #2
 8006a32:	e02d      	b.n	8006a90 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2224      	movs	r2, #36	@ 0x24
 8006a40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0201 	bic.w	r2, r2, #1
 8006a5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f811 	bl	8006a98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2220      	movs	r2, #32
 8006a82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d108      	bne.n	8006aba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ab8:	e031      	b.n	8006b1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006aba:	2308      	movs	r3, #8
 8006abc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006abe:	2308      	movs	r3, #8
 8006ac0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	0e5b      	lsrs	r3, r3, #25
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	f003 0307 	and.w	r3, r3, #7
 8006ad0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	0f5b      	lsrs	r3, r3, #29
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	f003 0307 	and.w	r3, r3, #7
 8006ae0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ae2:	7bbb      	ldrb	r3, [r7, #14]
 8006ae4:	7b3a      	ldrb	r2, [r7, #12]
 8006ae6:	4911      	ldr	r1, [pc, #68]	@ (8006b2c <UARTEx_SetNbDataToProcess+0x94>)
 8006ae8:	5c8a      	ldrb	r2, [r1, r2]
 8006aea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006aee:	7b3a      	ldrb	r2, [r7, #12]
 8006af0:	490f      	ldr	r1, [pc, #60]	@ (8006b30 <UARTEx_SetNbDataToProcess+0x98>)
 8006af2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006af4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	7b7a      	ldrb	r2, [r7, #13]
 8006b04:	4909      	ldr	r1, [pc, #36]	@ (8006b2c <UARTEx_SetNbDataToProcess+0x94>)
 8006b06:	5c8a      	ldrb	r2, [r1, r2]
 8006b08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b0c:	7b7a      	ldrb	r2, [r7, #13]
 8006b0e:	4908      	ldr	r1, [pc, #32]	@ (8006b30 <UARTEx_SetNbDataToProcess+0x98>)
 8006b10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b12:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006b1e:	bf00      	nop
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	0800af74 	.word	0x0800af74
 8006b30:	0800af7c 	.word	0x0800af7c

08006b34 <__NVIC_SetPriority>:
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	6039      	str	r1, [r7, #0]
 8006b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	db0a      	blt.n	8006b5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	490c      	ldr	r1, [pc, #48]	@ (8006b80 <__NVIC_SetPriority+0x4c>)
 8006b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b52:	0112      	lsls	r2, r2, #4
 8006b54:	b2d2      	uxtb	r2, r2
 8006b56:	440b      	add	r3, r1
 8006b58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006b5c:	e00a      	b.n	8006b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	4908      	ldr	r1, [pc, #32]	@ (8006b84 <__NVIC_SetPriority+0x50>)
 8006b64:	79fb      	ldrb	r3, [r7, #7]
 8006b66:	f003 030f 	and.w	r3, r3, #15
 8006b6a:	3b04      	subs	r3, #4
 8006b6c:	0112      	lsls	r2, r2, #4
 8006b6e:	b2d2      	uxtb	r2, r2
 8006b70:	440b      	add	r3, r1
 8006b72:	761a      	strb	r2, [r3, #24]
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	e000e100 	.word	0xe000e100
 8006b84:	e000ed00 	.word	0xe000ed00

08006b88 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006b8c:	4b05      	ldr	r3, [pc, #20]	@ (8006ba4 <SysTick_Handler+0x1c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006b90:	f002 fac8 	bl	8009124 <xTaskGetSchedulerState>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d001      	beq.n	8006b9e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006b9a:	f003 f9bd 	bl	8009f18 <xPortSysTickHandler>
  }
}
 8006b9e:	bf00      	nop
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	e000e010 	.word	0xe000e010

08006ba8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006bac:	2100      	movs	r1, #0
 8006bae:	f06f 0004 	mvn.w	r0, #4
 8006bb2:	f7ff ffbf 	bl	8006b34 <__NVIC_SetPriority>
#endif
}
 8006bb6:	bf00      	nop
 8006bb8:	bd80      	pop	{r7, pc}
	...

08006bbc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bc2:	f3ef 8305 	mrs	r3, IPSR
 8006bc6:	603b      	str	r3, [r7, #0]
  return(result);
 8006bc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006bce:	f06f 0305 	mvn.w	r3, #5
 8006bd2:	607b      	str	r3, [r7, #4]
 8006bd4:	e00c      	b.n	8006bf0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8006c00 <osKernelInitialize+0x44>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d105      	bne.n	8006bea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006bde:	4b08      	ldr	r3, [pc, #32]	@ (8006c00 <osKernelInitialize+0x44>)
 8006be0:	2201      	movs	r2, #1
 8006be2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006be4:	2300      	movs	r3, #0
 8006be6:	607b      	str	r3, [r7, #4]
 8006be8:	e002      	b.n	8006bf0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006bea:	f04f 33ff 	mov.w	r3, #4294967295
 8006bee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006bf0:	687b      	ldr	r3, [r7, #4]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	20000560 	.word	0x20000560

08006c04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c0a:	f3ef 8305 	mrs	r3, IPSR
 8006c0e:	603b      	str	r3, [r7, #0]
  return(result);
 8006c10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006c16:	f06f 0305 	mvn.w	r3, #5
 8006c1a:	607b      	str	r3, [r7, #4]
 8006c1c:	e010      	b.n	8006c40 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8006c4c <osKernelStart+0x48>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d109      	bne.n	8006c3a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006c26:	f7ff ffbf 	bl	8006ba8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006c2a:	4b08      	ldr	r3, [pc, #32]	@ (8006c4c <osKernelStart+0x48>)
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006c30:	f001 fe14 	bl	800885c <vTaskStartScheduler>
      stat = osOK;
 8006c34:	2300      	movs	r3, #0
 8006c36:	607b      	str	r3, [r7, #4]
 8006c38:	e002      	b.n	8006c40 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006c40:	687b      	ldr	r3, [r7, #4]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20000560 	.word	0x20000560

08006c50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b08e      	sub	sp, #56	@ 0x38
 8006c54:	af04      	add	r7, sp, #16
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c60:	f3ef 8305 	mrs	r3, IPSR
 8006c64:	617b      	str	r3, [r7, #20]
  return(result);
 8006c66:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d17e      	bne.n	8006d6a <osThreadNew+0x11a>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d07b      	beq.n	8006d6a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006c72:	2380      	movs	r3, #128	@ 0x80
 8006c74:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006c76:	2318      	movs	r3, #24
 8006c78:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d045      	beq.n	8006d16 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <osThreadNew+0x48>
        name = attr->name;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d008      	beq.n	8006cbe <osThreadNew+0x6e>
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	2b38      	cmp	r3, #56	@ 0x38
 8006cb0:	d805      	bhi.n	8006cbe <osThreadNew+0x6e>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <osThreadNew+0x72>
        return (NULL);
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e054      	b.n	8006d6c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	089b      	lsrs	r3, r3, #2
 8006cd0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00e      	beq.n	8006cf8 <osThreadNew+0xa8>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	2ba7      	cmp	r3, #167	@ 0xa7
 8006ce0:	d90a      	bls.n	8006cf8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d006      	beq.n	8006cf8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d002      	beq.n	8006cf8 <osThreadNew+0xa8>
        mem = 1;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	61bb      	str	r3, [r7, #24]
 8006cf6:	e010      	b.n	8006d1a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10c      	bne.n	8006d1a <osThreadNew+0xca>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d108      	bne.n	8006d1a <osThreadNew+0xca>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d104      	bne.n	8006d1a <osThreadNew+0xca>
          mem = 0;
 8006d10:	2300      	movs	r3, #0
 8006d12:	61bb      	str	r3, [r7, #24]
 8006d14:	e001      	b.n	8006d1a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d110      	bne.n	8006d42 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d28:	9202      	str	r2, [sp, #8]
 8006d2a:	9301      	str	r3, [sp, #4]
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	6a3a      	ldr	r2, [r7, #32]
 8006d34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f001 fb9c 	bl	8008474 <xTaskCreateStatic>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	613b      	str	r3, [r7, #16]
 8006d40:	e013      	b.n	8006d6a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d110      	bne.n	8006d6a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	f107 0310 	add.w	r3, r7, #16
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f001 fbea 	bl	8008534 <xTaskCreate>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d001      	beq.n	8006d6a <osThreadNew+0x11a>
            hTask = NULL;
 8006d66:	2300      	movs	r3, #0
 8006d68:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006d6a:	693b      	ldr	r3, [r7, #16]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3728      	adds	r7, #40	@ 0x28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d7c:	f3ef 8305 	mrs	r3, IPSR
 8006d80:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d82:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d003      	beq.n	8006d90 <osDelay+0x1c>
    stat = osErrorISR;
 8006d88:	f06f 0305 	mvn.w	r3, #5
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	e007      	b.n	8006da0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d002      	beq.n	8006da0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 fd28 	bl	80087f0 <vTaskDelay>
    }
  }

  return (stat);
 8006da0:	68fb      	ldr	r3, [r7, #12]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b08a      	sub	sp, #40	@ 0x28
 8006dae:	af02      	add	r7, sp, #8
 8006db0:	60f8      	str	r0, [r7, #12]
 8006db2:	60b9      	str	r1, [r7, #8]
 8006db4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006db6:	2300      	movs	r3, #0
 8006db8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dba:	f3ef 8305 	mrs	r3, IPSR
 8006dbe:	613b      	str	r3, [r7, #16]
  return(result);
 8006dc0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d175      	bne.n	8006eb2 <osSemaphoreNew+0x108>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d072      	beq.n	8006eb2 <osSemaphoreNew+0x108>
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d86e      	bhi.n	8006eb2 <osSemaphoreNew+0x108>
    mem = -1;
 8006dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d015      	beq.n	8006e0c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d006      	beq.n	8006df6 <osSemaphoreNew+0x4c>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	2b4f      	cmp	r3, #79	@ 0x4f
 8006dee:	d902      	bls.n	8006df6 <osSemaphoreNew+0x4c>
        mem = 1;
 8006df0:	2301      	movs	r3, #1
 8006df2:	61bb      	str	r3, [r7, #24]
 8006df4:	e00c      	b.n	8006e10 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d108      	bne.n	8006e10 <osSemaphoreNew+0x66>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d104      	bne.n	8006e10 <osSemaphoreNew+0x66>
          mem = 0;
 8006e06:	2300      	movs	r3, #0
 8006e08:	61bb      	str	r3, [r7, #24]
 8006e0a:	e001      	b.n	8006e10 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e16:	d04c      	beq.n	8006eb2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d128      	bne.n	8006e70 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d10a      	bne.n	8006e3a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	2203      	movs	r2, #3
 8006e2a:	9200      	str	r2, [sp, #0]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	2100      	movs	r1, #0
 8006e30:	2001      	movs	r0, #1
 8006e32:	f000 fb5d 	bl	80074f0 <xQueueGenericCreateStatic>
 8006e36:	61f8      	str	r0, [r7, #28]
 8006e38:	e005      	b.n	8006e46 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006e3a:	2203      	movs	r2, #3
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	2001      	movs	r0, #1
 8006e40:	f000 fbd3 	bl	80075ea <xQueueGenericCreate>
 8006e44:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d022      	beq.n	8006e92 <osSemaphoreNew+0xe8>
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d01f      	beq.n	8006e92 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006e52:	2300      	movs	r3, #0
 8006e54:	2200      	movs	r2, #0
 8006e56:	2100      	movs	r1, #0
 8006e58:	69f8      	ldr	r0, [r7, #28]
 8006e5a:	f000 fc93 	bl	8007784 <xQueueGenericSend>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d016      	beq.n	8006e92 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006e64:	69f8      	ldr	r0, [r7, #28]
 8006e66:	f001 f931 	bl	80080cc <vQueueDelete>
            hSemaphore = NULL;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61fb      	str	r3, [r7, #28]
 8006e6e:	e010      	b.n	8006e92 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d108      	bne.n	8006e88 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	68b9      	ldr	r1, [r7, #8]
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f000 fc11 	bl	80076a6 <xQueueCreateCountingSemaphoreStatic>
 8006e84:	61f8      	str	r0, [r7, #28]
 8006e86:	e004      	b.n	8006e92 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 fc44 	bl	8007718 <xQueueCreateCountingSemaphore>
 8006e90:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00c      	beq.n	8006eb2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <osSemaphoreNew+0xfc>
          name = attr->name;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	617b      	str	r3, [r7, #20]
 8006ea4:	e001      	b.n	8006eaa <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006eaa:	6979      	ldr	r1, [r7, #20]
 8006eac:	69f8      	ldr	r0, [r7, #28]
 8006eae:	f001 fa59 	bl	8008364 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006eb2:	69fb      	ldr	r3, [r7, #28]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3720      	adds	r7, #32
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d103      	bne.n	8006edc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006ed4:	f06f 0303 	mvn.w	r3, #3
 8006ed8:	617b      	str	r3, [r7, #20]
 8006eda:	e039      	b.n	8006f50 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006edc:	f3ef 8305 	mrs	r3, IPSR
 8006ee0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d022      	beq.n	8006f2e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006eee:	f06f 0303 	mvn.w	r3, #3
 8006ef2:	617b      	str	r3, [r7, #20]
 8006ef4:	e02c      	b.n	8006f50 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006efa:	f107 0308 	add.w	r3, r7, #8
 8006efe:	461a      	mov	r2, r3
 8006f00:	2100      	movs	r1, #0
 8006f02:	6938      	ldr	r0, [r7, #16]
 8006f04:	f001 f860 	bl	8007fc8 <xQueueReceiveFromISR>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d003      	beq.n	8006f16 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006f0e:	f06f 0302 	mvn.w	r3, #2
 8006f12:	617b      	str	r3, [r7, #20]
 8006f14:	e01c      	b.n	8006f50 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d019      	beq.n	8006f50 <osSemaphoreAcquire+0x94>
 8006f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8006f5c <osSemaphoreAcquire+0xa0>)
 8006f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	e010      	b.n	8006f50 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	6938      	ldr	r0, [r7, #16]
 8006f32:	f000 ff39 	bl	8007da8 <xQueueSemaphoreTake>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d009      	beq.n	8006f50 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006f42:	f06f 0301 	mvn.w	r3, #1
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	e002      	b.n	8006f50 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006f4a:	f06f 0302 	mvn.w	r3, #2
 8006f4e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006f50:	697b      	ldr	r3, [r7, #20]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3718      	adds	r7, #24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	e000ed04 	.word	0xe000ed04

08006f60 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d103      	bne.n	8006f7e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006f76:	f06f 0303 	mvn.w	r3, #3
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	e02c      	b.n	8006fd8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f7e:	f3ef 8305 	mrs	r3, IPSR
 8006f82:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f84:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d01a      	beq.n	8006fc0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006f8e:	f107 0308 	add.w	r3, r7, #8
 8006f92:	4619      	mov	r1, r3
 8006f94:	6938      	ldr	r0, [r7, #16]
 8006f96:	f000 fd95 	bl	8007ac4 <xQueueGiveFromISR>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d003      	beq.n	8006fa8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006fa0:	f06f 0302 	mvn.w	r3, #2
 8006fa4:	617b      	str	r3, [r7, #20]
 8006fa6:	e017      	b.n	8006fd8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d014      	beq.n	8006fd8 <osSemaphoreRelease+0x78>
 8006fae:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe4 <osSemaphoreRelease+0x84>)
 8006fb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	e00b      	b.n	8006fd8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	6938      	ldr	r0, [r7, #16]
 8006fc8:	f000 fbdc 	bl	8007784 <xQueueGenericSend>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d002      	beq.n	8006fd8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006fd2:	f06f 0302 	mvn.w	r3, #2
 8006fd6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006fd8:	697b      	ldr	r3, [r7, #20]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	e000ed04 	.word	0xe000ed04

08006fe8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08a      	sub	sp, #40	@ 0x28
 8006fec:	af02      	add	r7, sp, #8
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ff8:	f3ef 8305 	mrs	r3, IPSR
 8006ffc:	613b      	str	r3, [r7, #16]
  return(result);
 8006ffe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007000:	2b00      	cmp	r3, #0
 8007002:	d15f      	bne.n	80070c4 <osMessageQueueNew+0xdc>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d05c      	beq.n	80070c4 <osMessageQueueNew+0xdc>
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d059      	beq.n	80070c4 <osMessageQueueNew+0xdc>
    mem = -1;
 8007010:	f04f 33ff 	mov.w	r3, #4294967295
 8007014:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d029      	beq.n	8007070 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d012      	beq.n	800704a <osMessageQueueNew+0x62>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	2b4f      	cmp	r3, #79	@ 0x4f
 800702a:	d90e      	bls.n	800704a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00a      	beq.n	800704a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	695a      	ldr	r2, [r3, #20]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	68b9      	ldr	r1, [r7, #8]
 800703c:	fb01 f303 	mul.w	r3, r1, r3
 8007040:	429a      	cmp	r2, r3
 8007042:	d302      	bcc.n	800704a <osMessageQueueNew+0x62>
        mem = 1;
 8007044:	2301      	movs	r3, #1
 8007046:	61bb      	str	r3, [r7, #24]
 8007048:	e014      	b.n	8007074 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d110      	bne.n	8007074 <osMessageQueueNew+0x8c>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10c      	bne.n	8007074 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800705e:	2b00      	cmp	r3, #0
 8007060:	d108      	bne.n	8007074 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d104      	bne.n	8007074 <osMessageQueueNew+0x8c>
          mem = 0;
 800706a:	2300      	movs	r3, #0
 800706c:	61bb      	str	r3, [r7, #24]
 800706e:	e001      	b.n	8007074 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007070:	2300      	movs	r3, #0
 8007072:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d10b      	bne.n	8007092 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691a      	ldr	r2, [r3, #16]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	2100      	movs	r1, #0
 8007084:	9100      	str	r1, [sp, #0]
 8007086:	68b9      	ldr	r1, [r7, #8]
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 fa31 	bl	80074f0 <xQueueGenericCreateStatic>
 800708e:	61f8      	str	r0, [r7, #28]
 8007090:	e008      	b.n	80070a4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d105      	bne.n	80070a4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007098:	2200      	movs	r2, #0
 800709a:	68b9      	ldr	r1, [r7, #8]
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 faa4 	bl	80075ea <xQueueGenericCreate>
 80070a2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00c      	beq.n	80070c4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d003      	beq.n	80070b8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	617b      	str	r3, [r7, #20]
 80070b6:	e001      	b.n	80070bc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80070b8:	2300      	movs	r3, #0
 80070ba:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80070bc:	6979      	ldr	r1, [r7, #20]
 80070be:	69f8      	ldr	r0, [r7, #28]
 80070c0:	f001 f950 	bl	8008364 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80070c4:	69fb      	ldr	r3, [r7, #28]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3720      	adds	r7, #32
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
	...

080070d0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b088      	sub	sp, #32
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	4613      	mov	r3, r2
 80070de:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80070e4:	2300      	movs	r3, #0
 80070e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070e8:	f3ef 8305 	mrs	r3, IPSR
 80070ec:	617b      	str	r3, [r7, #20]
  return(result);
 80070ee:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d028      	beq.n	8007146 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d005      	beq.n	8007106 <osMessageQueuePut+0x36>
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <osMessageQueuePut+0x36>
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d003      	beq.n	800710e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007106:	f06f 0303 	mvn.w	r3, #3
 800710a:	61fb      	str	r3, [r7, #28]
 800710c:	e038      	b.n	8007180 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800710e:	2300      	movs	r3, #0
 8007110:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007112:	f107 0210 	add.w	r2, r7, #16
 8007116:	2300      	movs	r3, #0
 8007118:	68b9      	ldr	r1, [r7, #8]
 800711a:	69b8      	ldr	r0, [r7, #24]
 800711c:	f000 fc34 	bl	8007988 <xQueueGenericSendFromISR>
 8007120:	4603      	mov	r3, r0
 8007122:	2b01      	cmp	r3, #1
 8007124:	d003      	beq.n	800712e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007126:	f06f 0302 	mvn.w	r3, #2
 800712a:	61fb      	str	r3, [r7, #28]
 800712c:	e028      	b.n	8007180 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d025      	beq.n	8007180 <osMessageQueuePut+0xb0>
 8007134:	4b15      	ldr	r3, [pc, #84]	@ (800718c <osMessageQueuePut+0xbc>)
 8007136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	e01c      	b.n	8007180 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d002      	beq.n	8007152 <osMessageQueuePut+0x82>
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d103      	bne.n	800715a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007152:	f06f 0303 	mvn.w	r3, #3
 8007156:	61fb      	str	r3, [r7, #28]
 8007158:	e012      	b.n	8007180 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800715a:	2300      	movs	r3, #0
 800715c:	683a      	ldr	r2, [r7, #0]
 800715e:	68b9      	ldr	r1, [r7, #8]
 8007160:	69b8      	ldr	r0, [r7, #24]
 8007162:	f000 fb0f 	bl	8007784 <xQueueGenericSend>
 8007166:	4603      	mov	r3, r0
 8007168:	2b01      	cmp	r3, #1
 800716a:	d009      	beq.n	8007180 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007172:	f06f 0301 	mvn.w	r3, #1
 8007176:	61fb      	str	r3, [r7, #28]
 8007178:	e002      	b.n	8007180 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800717a:	f06f 0302 	mvn.w	r3, #2
 800717e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007180:	69fb      	ldr	r3, [r7, #28]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3720      	adds	r7, #32
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	e000ed04 	.word	0xe000ed04

08007190 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007190:	b580      	push	{r7, lr}
 8007192:	b088      	sub	sp, #32
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
 800719c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071a6:	f3ef 8305 	mrs	r3, IPSR
 80071aa:	617b      	str	r3, [r7, #20]
  return(result);
 80071ac:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d028      	beq.n	8007204 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d005      	beq.n	80071c4 <osMessageQueueGet+0x34>
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d002      	beq.n	80071c4 <osMessageQueueGet+0x34>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d003      	beq.n	80071cc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80071c4:	f06f 0303 	mvn.w	r3, #3
 80071c8:	61fb      	str	r3, [r7, #28]
 80071ca:	e037      	b.n	800723c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80071cc:	2300      	movs	r3, #0
 80071ce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80071d0:	f107 0310 	add.w	r3, r7, #16
 80071d4:	461a      	mov	r2, r3
 80071d6:	68b9      	ldr	r1, [r7, #8]
 80071d8:	69b8      	ldr	r0, [r7, #24]
 80071da:	f000 fef5 	bl	8007fc8 <xQueueReceiveFromISR>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d003      	beq.n	80071ec <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80071e4:	f06f 0302 	mvn.w	r3, #2
 80071e8:	61fb      	str	r3, [r7, #28]
 80071ea:	e027      	b.n	800723c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d024      	beq.n	800723c <osMessageQueueGet+0xac>
 80071f2:	4b15      	ldr	r3, [pc, #84]	@ (8007248 <osMessageQueueGet+0xb8>)
 80071f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071f8:	601a      	str	r2, [r3, #0]
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	e01b      	b.n	800723c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d002      	beq.n	8007210 <osMessageQueueGet+0x80>
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d103      	bne.n	8007218 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007210:	f06f 0303 	mvn.w	r3, #3
 8007214:	61fb      	str	r3, [r7, #28]
 8007216:	e011      	b.n	800723c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	68b9      	ldr	r1, [r7, #8]
 800721c:	69b8      	ldr	r0, [r7, #24]
 800721e:	f000 fce1 	bl	8007be4 <xQueueReceive>
 8007222:	4603      	mov	r3, r0
 8007224:	2b01      	cmp	r3, #1
 8007226:	d009      	beq.n	800723c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d003      	beq.n	8007236 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800722e:	f06f 0301 	mvn.w	r3, #1
 8007232:	61fb      	str	r3, [r7, #28]
 8007234:	e002      	b.n	800723c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007236:	f06f 0302 	mvn.w	r3, #2
 800723a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800723c:	69fb      	ldr	r3, [r7, #28]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3720      	adds	r7, #32
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	e000ed04 	.word	0xe000ed04

0800724c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	4a07      	ldr	r2, [pc, #28]	@ (8007278 <vApplicationGetIdleTaskMemory+0x2c>)
 800725c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	4a06      	ldr	r2, [pc, #24]	@ (800727c <vApplicationGetIdleTaskMemory+0x30>)
 8007262:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2280      	movs	r2, #128	@ 0x80
 8007268:	601a      	str	r2, [r3, #0]
}
 800726a:	bf00      	nop
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	20000564 	.word	0x20000564
 800727c:	2000060c 	.word	0x2000060c

08007280 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	4a07      	ldr	r2, [pc, #28]	@ (80072ac <vApplicationGetTimerTaskMemory+0x2c>)
 8007290:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	4a06      	ldr	r2, [pc, #24]	@ (80072b0 <vApplicationGetTimerTaskMemory+0x30>)
 8007296:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800729e:	601a      	str	r2, [r3, #0]
}
 80072a0:	bf00      	nop
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	2000080c 	.word	0x2000080c
 80072b0:	200008b4 	.word	0x200008b4

080072b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f103 0208 	add.w	r2, r3, #8
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f04f 32ff 	mov.w	r2, #4294967295
 80072cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f103 0208 	add.w	r2, r3, #8
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f103 0208 	add.w	r2, r3, #8
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007302:	bf00      	nop
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800730e:	b480      	push	{r7}
 8007310:	b085      	sub	sp, #20
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	689a      	ldr	r2, [r3, #8]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	1c5a      	adds	r2, r3, #1
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	601a      	str	r2, [r3, #0]
}
 800734a:	bf00      	nop
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007356:	b480      	push	{r7}
 8007358:	b085      	sub	sp, #20
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736c:	d103      	bne.n	8007376 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	e00c      	b.n	8007390 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	3308      	adds	r3, #8
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	e002      	b.n	8007384 <vListInsert+0x2e>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	60fb      	str	r3, [r7, #12]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	429a      	cmp	r2, r3
 800738e:	d2f6      	bcs.n	800737e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	1c5a      	adds	r2, r3, #1
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	601a      	str	r2, [r3, #0]
}
 80073bc:	bf00      	nop
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	6892      	ldr	r2, [r2, #8]
 80073de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	6852      	ldr	r2, [r2, #4]
 80073e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d103      	bne.n	80073fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	689a      	ldr	r2, [r3, #8]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	1e5a      	subs	r2, r3, #1
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10b      	bne.n	8007448 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007442:	bf00      	nop
 8007444:	bf00      	nop
 8007446:	e7fd      	b.n	8007444 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007448:	f002 fcd6 	bl	8009df8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007454:	68f9      	ldr	r1, [r7, #12]
 8007456:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007458:	fb01 f303 	mul.w	r3, r1, r3
 800745c:	441a      	add	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007478:	3b01      	subs	r3, #1
 800747a:	68f9      	ldr	r1, [r7, #12]
 800747c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800747e:	fb01 f303 	mul.w	r3, r1, r3
 8007482:	441a      	add	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	22ff      	movs	r2, #255	@ 0xff
 800748c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	22ff      	movs	r2, #255	@ 0xff
 8007494:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d114      	bne.n	80074c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d01a      	beq.n	80074dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	3310      	adds	r3, #16
 80074aa:	4618      	mov	r0, r3
 80074ac:	f001 fc74 	bl	8008d98 <xTaskRemoveFromEventList>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d012      	beq.n	80074dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80074b6:	4b0d      	ldr	r3, [pc, #52]	@ (80074ec <xQueueGenericReset+0xd0>)
 80074b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074bc:	601a      	str	r2, [r3, #0]
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	e009      	b.n	80074dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	3310      	adds	r3, #16
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7ff fef1 	bl	80072b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	3324      	adds	r3, #36	@ 0x24
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7ff feec 	bl	80072b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80074dc:	f002 fcbe 	bl	8009e5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80074e0:	2301      	movs	r3, #1
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	e000ed04 	.word	0xe000ed04

080074f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08e      	sub	sp, #56	@ 0x38
 80074f4:	af02      	add	r7, sp, #8
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
 80074fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10b      	bne.n	800751c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007516:	bf00      	nop
 8007518:	bf00      	nop
 800751a:	e7fd      	b.n	8007518 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10b      	bne.n	800753a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007534:	bf00      	nop
 8007536:	bf00      	nop
 8007538:	e7fd      	b.n	8007536 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <xQueueGenericCreateStatic+0x56>
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <xQueueGenericCreateStatic+0x5a>
 8007546:	2301      	movs	r3, #1
 8007548:	e000      	b.n	800754c <xQueueGenericCreateStatic+0x5c>
 800754a:	2300      	movs	r3, #0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10b      	bne.n	8007568 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	623b      	str	r3, [r7, #32]
}
 8007562:	bf00      	nop
 8007564:	bf00      	nop
 8007566:	e7fd      	b.n	8007564 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d102      	bne.n	8007574 <xQueueGenericCreateStatic+0x84>
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <xQueueGenericCreateStatic+0x88>
 8007574:	2301      	movs	r3, #1
 8007576:	e000      	b.n	800757a <xQueueGenericCreateStatic+0x8a>
 8007578:	2300      	movs	r3, #0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10b      	bne.n	8007596 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	61fb      	str	r3, [r7, #28]
}
 8007590:	bf00      	nop
 8007592:	bf00      	nop
 8007594:	e7fd      	b.n	8007592 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007596:	2350      	movs	r3, #80	@ 0x50
 8007598:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	2b50      	cmp	r3, #80	@ 0x50
 800759e:	d00b      	beq.n	80075b8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80075a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a4:	f383 8811 	msr	BASEPRI, r3
 80075a8:	f3bf 8f6f 	isb	sy
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	61bb      	str	r3, [r7, #24]
}
 80075b2:	bf00      	nop
 80075b4:	bf00      	nop
 80075b6:	e7fd      	b.n	80075b4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80075b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80075be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00d      	beq.n	80075e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80075c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80075cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80075d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	4613      	mov	r3, r2
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	68b9      	ldr	r1, [r7, #8]
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 f840 	bl	8007660 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80075e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3730      	adds	r7, #48	@ 0x30
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b08a      	sub	sp, #40	@ 0x28
 80075ee:	af02      	add	r7, sp, #8
 80075f0:	60f8      	str	r0, [r7, #12]
 80075f2:	60b9      	str	r1, [r7, #8]
 80075f4:	4613      	mov	r3, r2
 80075f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10b      	bne.n	8007616 <xQueueGenericCreate+0x2c>
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	613b      	str	r3, [r7, #16]
}
 8007610:	bf00      	nop
 8007612:	bf00      	nop
 8007614:	e7fd      	b.n	8007612 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	fb02 f303 	mul.w	r3, r2, r3
 800761e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	3350      	adds	r3, #80	@ 0x50
 8007624:	4618      	mov	r0, r3
 8007626:	f002 fd09 	bl	800a03c <pvPortMalloc>
 800762a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d011      	beq.n	8007656 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	3350      	adds	r3, #80	@ 0x50
 800763a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007644:	79fa      	ldrb	r2, [r7, #7]
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	4613      	mov	r3, r2
 800764c:	697a      	ldr	r2, [r7, #20]
 800764e:	68b9      	ldr	r1, [r7, #8]
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f000 f805 	bl	8007660 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007656:	69bb      	ldr	r3, [r7, #24]
	}
 8007658:	4618      	mov	r0, r3
 800765a:	3720      	adds	r7, #32
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d103      	bne.n	800767c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	69ba      	ldr	r2, [r7, #24]
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	e002      	b.n	8007682 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800768e:	2101      	movs	r1, #1
 8007690:	69b8      	ldr	r0, [r7, #24]
 8007692:	f7ff fec3 	bl	800741c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	78fa      	ldrb	r2, [r7, #3]
 800769a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800769e:	bf00      	nop
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b08a      	sub	sp, #40	@ 0x28
 80076aa:	af02      	add	r7, sp, #8
 80076ac:	60f8      	str	r0, [r7, #12]
 80076ae:	60b9      	str	r1, [r7, #8]
 80076b0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10b      	bne.n	80076d0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80076b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	61bb      	str	r3, [r7, #24]
}
 80076ca:	bf00      	nop
 80076cc:	bf00      	nop
 80076ce:	e7fd      	b.n	80076cc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d90b      	bls.n	80076f0 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80076d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	617b      	str	r3, [r7, #20]
}
 80076ea:	bf00      	nop
 80076ec:	bf00      	nop
 80076ee:	e7fd      	b.n	80076ec <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80076f0:	2302      	movs	r3, #2
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	2100      	movs	r1, #0
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f7ff fef8 	bl	80074f0 <xQueueGenericCreateStatic>
 8007700:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800770e:	69fb      	ldr	r3, [r7, #28]
	}
 8007710:	4618      	mov	r0, r3
 8007712:	3720      	adds	r7, #32
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10b      	bne.n	8007740 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8007728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772c:	f383 8811 	msr	BASEPRI, r3
 8007730:	f3bf 8f6f 	isb	sy
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	613b      	str	r3, [r7, #16]
}
 800773a:	bf00      	nop
 800773c:	bf00      	nop
 800773e:	e7fd      	b.n	800773c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	429a      	cmp	r2, r3
 8007746:	d90b      	bls.n	8007760 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8007748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	60fb      	str	r3, [r7, #12]
}
 800775a:	bf00      	nop
 800775c:	bf00      	nop
 800775e:	e7fd      	b.n	800775c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007760:	2202      	movs	r2, #2
 8007762:	2100      	movs	r1, #0
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f7ff ff40 	bl	80075ea <xQueueGenericCreate>
 800776a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d002      	beq.n	8007778 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007778:	697b      	ldr	r3, [r7, #20]
	}
 800777a:	4618      	mov	r0, r3
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
	...

08007784 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b08e      	sub	sp, #56	@ 0x38
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
 8007790:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007792:	2300      	movs	r3, #0
 8007794:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800779a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10b      	bne.n	80077b8 <xQueueGenericSend+0x34>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80077b2:	bf00      	nop
 80077b4:	bf00      	nop
 80077b6:	e7fd      	b.n	80077b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d103      	bne.n	80077c6 <xQueueGenericSend+0x42>
 80077be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <xQueueGenericSend+0x46>
 80077c6:	2301      	movs	r3, #1
 80077c8:	e000      	b.n	80077cc <xQueueGenericSend+0x48>
 80077ca:	2300      	movs	r3, #0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10b      	bne.n	80077e8 <xQueueGenericSend+0x64>
	__asm volatile
 80077d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d4:	f383 8811 	msr	BASEPRI, r3
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80077e2:	bf00      	nop
 80077e4:	bf00      	nop
 80077e6:	e7fd      	b.n	80077e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d103      	bne.n	80077f6 <xQueueGenericSend+0x72>
 80077ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d101      	bne.n	80077fa <xQueueGenericSend+0x76>
 80077f6:	2301      	movs	r3, #1
 80077f8:	e000      	b.n	80077fc <xQueueGenericSend+0x78>
 80077fa:	2300      	movs	r3, #0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10b      	bne.n	8007818 <xQueueGenericSend+0x94>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	623b      	str	r3, [r7, #32]
}
 8007812:	bf00      	nop
 8007814:	bf00      	nop
 8007816:	e7fd      	b.n	8007814 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007818:	f001 fc84 	bl	8009124 <xTaskGetSchedulerState>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d102      	bne.n	8007828 <xQueueGenericSend+0xa4>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d101      	bne.n	800782c <xQueueGenericSend+0xa8>
 8007828:	2301      	movs	r3, #1
 800782a:	e000      	b.n	800782e <xQueueGenericSend+0xaa>
 800782c:	2300      	movs	r3, #0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10b      	bne.n	800784a <xQueueGenericSend+0xc6>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	61fb      	str	r3, [r7, #28]
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop
 8007848:	e7fd      	b.n	8007846 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800784a:	f002 fad5 	bl	8009df8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800784e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007850:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007856:	429a      	cmp	r2, r3
 8007858:	d302      	bcc.n	8007860 <xQueueGenericSend+0xdc>
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b02      	cmp	r3, #2
 800785e:	d129      	bne.n	80078b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	68b9      	ldr	r1, [r7, #8]
 8007864:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007866:	f000 fc6d 	bl	8008144 <prvCopyDataToQueue>
 800786a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800786c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800786e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007870:	2b00      	cmp	r3, #0
 8007872:	d010      	beq.n	8007896 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007876:	3324      	adds	r3, #36	@ 0x24
 8007878:	4618      	mov	r0, r3
 800787a:	f001 fa8d 	bl	8008d98 <xTaskRemoveFromEventList>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d013      	beq.n	80078ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007884:	4b3f      	ldr	r3, [pc, #252]	@ (8007984 <xQueueGenericSend+0x200>)
 8007886:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800788a:	601a      	str	r2, [r3, #0]
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	e00a      	b.n	80078ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007898:	2b00      	cmp	r3, #0
 800789a:	d007      	beq.n	80078ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800789c:	4b39      	ldr	r3, [pc, #228]	@ (8007984 <xQueueGenericSend+0x200>)
 800789e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80078ac:	f002 fad6 	bl	8009e5c <vPortExitCritical>
				return pdPASS;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e063      	b.n	800797c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d103      	bne.n	80078c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078ba:	f002 facf 	bl	8009e5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80078be:	2300      	movs	r3, #0
 80078c0:	e05c      	b.n	800797c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d106      	bne.n	80078d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078c8:	f107 0314 	add.w	r3, r7, #20
 80078cc:	4618      	mov	r0, r3
 80078ce:	f001 fac7 	bl	8008e60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078d2:	2301      	movs	r3, #1
 80078d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078d6:	f002 fac1 	bl	8009e5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078da:	f001 f82f 	bl	800893c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078de:	f002 fa8b 	bl	8009df8 <vPortEnterCritical>
 80078e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078e8:	b25b      	sxtb	r3, r3
 80078ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ee:	d103      	bne.n	80078f8 <xQueueGenericSend+0x174>
 80078f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078fe:	b25b      	sxtb	r3, r3
 8007900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007904:	d103      	bne.n	800790e <xQueueGenericSend+0x18a>
 8007906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800790e:	f002 faa5 	bl	8009e5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007912:	1d3a      	adds	r2, r7, #4
 8007914:	f107 0314 	add.w	r3, r7, #20
 8007918:	4611      	mov	r1, r2
 800791a:	4618      	mov	r0, r3
 800791c:	f001 fab6 	bl	8008e8c <xTaskCheckForTimeOut>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d124      	bne.n	8007970 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007926:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007928:	f000 fd04 	bl	8008334 <prvIsQueueFull>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d018      	beq.n	8007964 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007934:	3310      	adds	r3, #16
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	4611      	mov	r1, r2
 800793a:	4618      	mov	r0, r3
 800793c:	f001 f9da 	bl	8008cf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007940:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007942:	f000 fc8f 	bl	8008264 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007946:	f001 f807 	bl	8008958 <xTaskResumeAll>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	f47f af7c 	bne.w	800784a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007952:	4b0c      	ldr	r3, [pc, #48]	@ (8007984 <xQueueGenericSend+0x200>)
 8007954:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007958:	601a      	str	r2, [r3, #0]
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	e772      	b.n	800784a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007964:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007966:	f000 fc7d 	bl	8008264 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800796a:	f000 fff5 	bl	8008958 <xTaskResumeAll>
 800796e:	e76c      	b.n	800784a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007970:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007972:	f000 fc77 	bl	8008264 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007976:	f000 ffef 	bl	8008958 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800797a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800797c:	4618      	mov	r0, r3
 800797e:	3738      	adds	r7, #56	@ 0x38
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	e000ed04 	.word	0xe000ed04

08007988 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b090      	sub	sp, #64	@ 0x40
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
 8007994:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800799a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10b      	bne.n	80079b8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80079a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80079b2:	bf00      	nop
 80079b4:	bf00      	nop
 80079b6:	e7fd      	b.n	80079b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d103      	bne.n	80079c6 <xQueueGenericSendFromISR+0x3e>
 80079be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <xQueueGenericSendFromISR+0x42>
 80079c6:	2301      	movs	r3, #1
 80079c8:	e000      	b.n	80079cc <xQueueGenericSendFromISR+0x44>
 80079ca:	2300      	movs	r3, #0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10b      	bne.n	80079e8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80079e2:	bf00      	nop
 80079e4:	bf00      	nop
 80079e6:	e7fd      	b.n	80079e4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d103      	bne.n	80079f6 <xQueueGenericSendFromISR+0x6e>
 80079ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d101      	bne.n	80079fa <xQueueGenericSendFromISR+0x72>
 80079f6:	2301      	movs	r3, #1
 80079f8:	e000      	b.n	80079fc <xQueueGenericSendFromISR+0x74>
 80079fa:	2300      	movs	r3, #0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10b      	bne.n	8007a18 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	623b      	str	r3, [r7, #32]
}
 8007a12:	bf00      	nop
 8007a14:	bf00      	nop
 8007a16:	e7fd      	b.n	8007a14 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a18:	f002 face 	bl	8009fb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a1c:	f3ef 8211 	mrs	r2, BASEPRI
 8007a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	61fa      	str	r2, [r7, #28]
 8007a32:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a34:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a36:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d302      	bcc.n	8007a4a <xQueueGenericSendFromISR+0xc2>
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d12f      	bne.n	8007aaa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	68b9      	ldr	r1, [r7, #8]
 8007a5e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007a60:	f000 fb70 	bl	8008144 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a64:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6c:	d112      	bne.n	8007a94 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d016      	beq.n	8007aa4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a78:	3324      	adds	r3, #36	@ 0x24
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f001 f98c 	bl	8008d98 <xTaskRemoveFromEventList>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00e      	beq.n	8007aa4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00b      	beq.n	8007aa4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	601a      	str	r2, [r3, #0]
 8007a92:	e007      	b.n	8007aa4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007a98:	3301      	adds	r3, #1
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	b25a      	sxtb	r2, r3
 8007a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007aa8:	e001      	b.n	8007aae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ab0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007ab8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3740      	adds	r7, #64	@ 0x40
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b08e      	sub	sp, #56	@ 0x38
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10b      	bne.n	8007af0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007adc:	f383 8811 	msr	BASEPRI, r3
 8007ae0:	f3bf 8f6f 	isb	sy
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	623b      	str	r3, [r7, #32]
}
 8007aea:	bf00      	nop
 8007aec:	bf00      	nop
 8007aee:	e7fd      	b.n	8007aec <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00b      	beq.n	8007b10 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007afc:	f383 8811 	msr	BASEPRI, r3
 8007b00:	f3bf 8f6f 	isb	sy
 8007b04:	f3bf 8f4f 	dsb	sy
 8007b08:	61fb      	str	r3, [r7, #28]
}
 8007b0a:	bf00      	nop
 8007b0c:	bf00      	nop
 8007b0e:	e7fd      	b.n	8007b0c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d103      	bne.n	8007b20 <xQueueGiveFromISR+0x5c>
 8007b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <xQueueGiveFromISR+0x60>
 8007b20:	2301      	movs	r3, #1
 8007b22:	e000      	b.n	8007b26 <xQueueGiveFromISR+0x62>
 8007b24:	2300      	movs	r3, #0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10b      	bne.n	8007b42 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	61bb      	str	r3, [r7, #24]
}
 8007b3c:	bf00      	nop
 8007b3e:	bf00      	nop
 8007b40:	e7fd      	b.n	8007b3e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b42:	f002 fa39 	bl	8009fb8 <vPortValidateInterruptPriority>
	__asm volatile
 8007b46:	f3ef 8211 	mrs	r2, BASEPRI
 8007b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	617a      	str	r2, [r7, #20]
 8007b5c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007b5e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b66:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d22b      	bcs.n	8007bca <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b7e:	1c5a      	adds	r2, r3, #1
 8007b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b82:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b84:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8c:	d112      	bne.n	8007bb4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d016      	beq.n	8007bc4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b98:	3324      	adds	r3, #36	@ 0x24
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f001 f8fc 	bl	8008d98 <xTaskRemoveFromEventList>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00e      	beq.n	8007bc4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00b      	beq.n	8007bc4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	601a      	str	r2, [r3, #0]
 8007bb2:	e007      	b.n	8007bc4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bb8:	3301      	adds	r3, #1
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	b25a      	sxtb	r2, r3
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bc8:	e001      	b.n	8007bce <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bd0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f383 8811 	msr	BASEPRI, r3
}
 8007bd8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3738      	adds	r7, #56	@ 0x38
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b08c      	sub	sp, #48	@ 0x30
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10b      	bne.n	8007c16 <xQueueReceive+0x32>
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	623b      	str	r3, [r7, #32]
}
 8007c10:	bf00      	nop
 8007c12:	bf00      	nop
 8007c14:	e7fd      	b.n	8007c12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d103      	bne.n	8007c24 <xQueueReceive+0x40>
 8007c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <xQueueReceive+0x44>
 8007c24:	2301      	movs	r3, #1
 8007c26:	e000      	b.n	8007c2a <xQueueReceive+0x46>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10b      	bne.n	8007c46 <xQueueReceive+0x62>
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	61fb      	str	r3, [r7, #28]
}
 8007c40:	bf00      	nop
 8007c42:	bf00      	nop
 8007c44:	e7fd      	b.n	8007c42 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c46:	f001 fa6d 	bl	8009124 <xTaskGetSchedulerState>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d102      	bne.n	8007c56 <xQueueReceive+0x72>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <xQueueReceive+0x76>
 8007c56:	2301      	movs	r3, #1
 8007c58:	e000      	b.n	8007c5c <xQueueReceive+0x78>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10b      	bne.n	8007c78 <xQueueReceive+0x94>
	__asm volatile
 8007c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	61bb      	str	r3, [r7, #24]
}
 8007c72:	bf00      	nop
 8007c74:	bf00      	nop
 8007c76:	e7fd      	b.n	8007c74 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c78:	f002 f8be 	bl	8009df8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c80:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d01f      	beq.n	8007cc8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c88:	68b9      	ldr	r1, [r7, #8]
 8007c8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c8c:	f000 fac4 	bl	8008218 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c92:	1e5a      	subs	r2, r3, #1
 8007c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c96:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00f      	beq.n	8007cc0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca2:	3310      	adds	r3, #16
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f001 f877 	bl	8008d98 <xTaskRemoveFromEventList>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d007      	beq.n	8007cc0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007cb0:	4b3c      	ldr	r3, [pc, #240]	@ (8007da4 <xQueueReceive+0x1c0>)
 8007cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cb6:	601a      	str	r2, [r3, #0]
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007cc0:	f002 f8cc 	bl	8009e5c <vPortExitCritical>
				return pdPASS;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e069      	b.n	8007d9c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d103      	bne.n	8007cd6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007cce:	f002 f8c5 	bl	8009e5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	e062      	b.n	8007d9c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d106      	bne.n	8007cea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cdc:	f107 0310 	add.w	r3, r7, #16
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f001 f8bd 	bl	8008e60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007cea:	f002 f8b7 	bl	8009e5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007cee:	f000 fe25 	bl	800893c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007cf2:	f002 f881 	bl	8009df8 <vPortEnterCritical>
 8007cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007cfc:	b25b      	sxtb	r3, r3
 8007cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d02:	d103      	bne.n	8007d0c <xQueueReceive+0x128>
 8007d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d12:	b25b      	sxtb	r3, r3
 8007d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d18:	d103      	bne.n	8007d22 <xQueueReceive+0x13e>
 8007d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d22:	f002 f89b 	bl	8009e5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d26:	1d3a      	adds	r2, r7, #4
 8007d28:	f107 0310 	add.w	r3, r7, #16
 8007d2c:	4611      	mov	r1, r2
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f001 f8ac 	bl	8008e8c <xTaskCheckForTimeOut>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d123      	bne.n	8007d82 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d3c:	f000 fae4 	bl	8008308 <prvIsQueueEmpty>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d017      	beq.n	8007d76 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d48:	3324      	adds	r3, #36	@ 0x24
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 ffd0 	bl	8008cf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d56:	f000 fa85 	bl	8008264 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d5a:	f000 fdfd 	bl	8008958 <xTaskResumeAll>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d189      	bne.n	8007c78 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007d64:	4b0f      	ldr	r3, [pc, #60]	@ (8007da4 <xQueueReceive+0x1c0>)
 8007d66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d6a:	601a      	str	r2, [r3, #0]
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	e780      	b.n	8007c78 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d78:	f000 fa74 	bl	8008264 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d7c:	f000 fdec 	bl	8008958 <xTaskResumeAll>
 8007d80:	e77a      	b.n	8007c78 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007d82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d84:	f000 fa6e 	bl	8008264 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d88:	f000 fde6 	bl	8008958 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d8e:	f000 fabb 	bl	8008308 <prvIsQueueEmpty>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f43f af6f 	beq.w	8007c78 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3730      	adds	r7, #48	@ 0x30
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	e000ed04 	.word	0xe000ed04

08007da8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08e      	sub	sp, #56	@ 0x38
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007db2:	2300      	movs	r3, #0
 8007db4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10b      	bne.n	8007ddc <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	623b      	str	r3, [r7, #32]
}
 8007dd6:	bf00      	nop
 8007dd8:	bf00      	nop
 8007dda:	e7fd      	b.n	8007dd8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00b      	beq.n	8007dfc <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	61fb      	str	r3, [r7, #28]
}
 8007df6:	bf00      	nop
 8007df8:	bf00      	nop
 8007dfa:	e7fd      	b.n	8007df8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007dfc:	f001 f992 	bl	8009124 <xTaskGetSchedulerState>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d102      	bne.n	8007e0c <xQueueSemaphoreTake+0x64>
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d101      	bne.n	8007e10 <xQueueSemaphoreTake+0x68>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e000      	b.n	8007e12 <xQueueSemaphoreTake+0x6a>
 8007e10:	2300      	movs	r3, #0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10b      	bne.n	8007e2e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	61bb      	str	r3, [r7, #24]
}
 8007e28:	bf00      	nop
 8007e2a:	bf00      	nop
 8007e2c:	e7fd      	b.n	8007e2a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e2e:	f001 ffe3 	bl	8009df8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e36:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d024      	beq.n	8007e88 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e40:	1e5a      	subs	r2, r3, #1
 8007e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e44:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d104      	bne.n	8007e58 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007e4e:	f001 fae3 	bl	8009418 <pvTaskIncrementMutexHeldCount>
 8007e52:	4602      	mov	r2, r0
 8007e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e56:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00f      	beq.n	8007e80 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e62:	3310      	adds	r3, #16
 8007e64:	4618      	mov	r0, r3
 8007e66:	f000 ff97 	bl	8008d98 <xTaskRemoveFromEventList>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d007      	beq.n	8007e80 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e70:	4b54      	ldr	r3, [pc, #336]	@ (8007fc4 <xQueueSemaphoreTake+0x21c>)
 8007e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e80:	f001 ffec 	bl	8009e5c <vPortExitCritical>
				return pdPASS;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e098      	b.n	8007fba <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d112      	bne.n	8007eb4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00b      	beq.n	8007eac <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	617b      	str	r3, [r7, #20]
}
 8007ea6:	bf00      	nop
 8007ea8:	bf00      	nop
 8007eaa:	e7fd      	b.n	8007ea8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007eac:	f001 ffd6 	bl	8009e5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	e082      	b.n	8007fba <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d106      	bne.n	8007ec8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007eba:	f107 030c 	add.w	r3, r7, #12
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 ffce 	bl	8008e60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ec8:	f001 ffc8 	bl	8009e5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ecc:	f000 fd36 	bl	800893c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ed0:	f001 ff92 	bl	8009df8 <vPortEnterCritical>
 8007ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007eda:	b25b      	sxtb	r3, r3
 8007edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee0:	d103      	bne.n	8007eea <xQueueSemaphoreTake+0x142>
 8007ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ef0:	b25b      	sxtb	r3, r3
 8007ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef6:	d103      	bne.n	8007f00 <xQueueSemaphoreTake+0x158>
 8007ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f00:	f001 ffac 	bl	8009e5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f04:	463a      	mov	r2, r7
 8007f06:	f107 030c 	add.w	r3, r7, #12
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 ffbd 	bl	8008e8c <xTaskCheckForTimeOut>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d132      	bne.n	8007f7e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f1a:	f000 f9f5 	bl	8008308 <prvIsQueueEmpty>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d026      	beq.n	8007f72 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d109      	bne.n	8007f40 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007f2c:	f001 ff64 	bl	8009df8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f001 f913 	bl	8009160 <xTaskPriorityInherit>
 8007f3a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007f3c:	f001 ff8e 	bl	8009e5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f42:	3324      	adds	r3, #36	@ 0x24
 8007f44:	683a      	ldr	r2, [r7, #0]
 8007f46:	4611      	mov	r1, r2
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 fed3 	bl	8008cf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f50:	f000 f988 	bl	8008264 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f54:	f000 fd00 	bl	8008958 <xTaskResumeAll>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f47f af67 	bne.w	8007e2e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007f60:	4b18      	ldr	r3, [pc, #96]	@ (8007fc4 <xQueueSemaphoreTake+0x21c>)
 8007f62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	e75d      	b.n	8007e2e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007f72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f74:	f000 f976 	bl	8008264 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f78:	f000 fcee 	bl	8008958 <xTaskResumeAll>
 8007f7c:	e757      	b.n	8007e2e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007f7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f80:	f000 f970 	bl	8008264 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f84:	f000 fce8 	bl	8008958 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f8a:	f000 f9bd 	bl	8008308 <prvIsQueueEmpty>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f43f af4c 	beq.w	8007e2e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00d      	beq.n	8007fb8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007f9c:	f001 ff2c 	bl	8009df8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007fa0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007fa2:	f000 f8b7 	bl	8008114 <prvGetDisinheritPriorityAfterTimeout>
 8007fa6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f001 f9ae 	bl	8009310 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007fb4:	f001 ff52 	bl	8009e5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007fb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3738      	adds	r7, #56	@ 0x38
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	e000ed04 	.word	0xe000ed04

08007fc8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b08e      	sub	sp, #56	@ 0x38
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10b      	bne.n	8007ff6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	623b      	str	r3, [r7, #32]
}
 8007ff0:	bf00      	nop
 8007ff2:	bf00      	nop
 8007ff4:	e7fd      	b.n	8007ff2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d103      	bne.n	8008004 <xQueueReceiveFromISR+0x3c>
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008000:	2b00      	cmp	r3, #0
 8008002:	d101      	bne.n	8008008 <xQueueReceiveFromISR+0x40>
 8008004:	2301      	movs	r3, #1
 8008006:	e000      	b.n	800800a <xQueueReceiveFromISR+0x42>
 8008008:	2300      	movs	r3, #0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10b      	bne.n	8008026 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	61fb      	str	r3, [r7, #28]
}
 8008020:	bf00      	nop
 8008022:	bf00      	nop
 8008024:	e7fd      	b.n	8008022 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008026:	f001 ffc7 	bl	8009fb8 <vPortValidateInterruptPriority>
	__asm volatile
 800802a:	f3ef 8211 	mrs	r2, BASEPRI
 800802e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	61ba      	str	r2, [r7, #24]
 8008040:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008042:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008044:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800804a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800804c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804e:	2b00      	cmp	r3, #0
 8008050:	d02f      	beq.n	80080b2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008054:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800805c:	68b9      	ldr	r1, [r7, #8]
 800805e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008060:	f000 f8da 	bl	8008218 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008066:	1e5a      	subs	r2, r3, #1
 8008068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800806c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008074:	d112      	bne.n	800809c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d016      	beq.n	80080ac <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800807e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008080:	3310      	adds	r3, #16
 8008082:	4618      	mov	r0, r3
 8008084:	f000 fe88 	bl	8008d98 <xTaskRemoveFromEventList>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00e      	beq.n	80080ac <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00b      	beq.n	80080ac <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	e007      	b.n	80080ac <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800809c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080a0:	3301      	adds	r3, #1
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	b25a      	sxtb	r2, r3
 80080a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80080ac:	2301      	movs	r3, #1
 80080ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80080b0:	e001      	b.n	80080b6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80080b2:	2300      	movs	r3, #0
 80080b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80080b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	f383 8811 	msr	BASEPRI, r3
}
 80080c0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3738      	adds	r7, #56	@ 0x38
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d10b      	bne.n	80080f6 <vQueueDelete+0x2a>
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	60bb      	str	r3, [r7, #8]
}
 80080f0:	bf00      	nop
 80080f2:	bf00      	nop
 80080f4:	e7fd      	b.n	80080f2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f000 f95e 	bl	80083b8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008102:	2b00      	cmp	r3, #0
 8008104:	d102      	bne.n	800810c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f002 f866 	bl	800a1d8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800810c:	bf00      	nop
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008120:	2b00      	cmp	r3, #0
 8008122:	d006      	beq.n	8008132 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	e001      	b.n	8008136 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008132:	2300      	movs	r3, #0
 8008134:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008136:	68fb      	ldr	r3, [r7, #12]
	}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b086      	sub	sp, #24
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008150:	2300      	movs	r3, #0
 8008152:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008158:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10d      	bne.n	800817e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d14d      	bne.n	8008206 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	4618      	mov	r0, r3
 8008170:	f001 f85e 	bl	8009230 <xTaskPriorityDisinherit>
 8008174:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	609a      	str	r2, [r3, #8]
 800817c:	e043      	b.n	8008206 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d119      	bne.n	80081b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6858      	ldr	r0, [r3, #4]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800818c:	461a      	mov	r2, r3
 800818e:	68b9      	ldr	r1, [r7, #8]
 8008190:	f002 f9ec 	bl	800a56c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800819c:	441a      	add	r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d32b      	bcc.n	8008206 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	605a      	str	r2, [r3, #4]
 80081b6:	e026      	b.n	8008206 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	68d8      	ldr	r0, [r3, #12]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c0:	461a      	mov	r2, r3
 80081c2:	68b9      	ldr	r1, [r7, #8]
 80081c4:	f002 f9d2 	bl	800a56c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	68da      	ldr	r2, [r3, #12]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081d0:	425b      	negs	r3, r3
 80081d2:	441a      	add	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	68da      	ldr	r2, [r3, #12]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d207      	bcs.n	80081f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	689a      	ldr	r2, [r3, #8]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ec:	425b      	negs	r3, r3
 80081ee:	441a      	add	r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d105      	bne.n	8008206 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d002      	beq.n	8008206 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	3b01      	subs	r3, #1
 8008204:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	1c5a      	adds	r2, r3, #1
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800820e:	697b      	ldr	r3, [r7, #20]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3718      	adds	r7, #24
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008226:	2b00      	cmp	r3, #0
 8008228:	d018      	beq.n	800825c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	68da      	ldr	r2, [r3, #12]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008232:	441a      	add	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	68da      	ldr	r2, [r3, #12]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	429a      	cmp	r2, r3
 8008242:	d303      	bcc.n	800824c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	68d9      	ldr	r1, [r3, #12]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008254:	461a      	mov	r2, r3
 8008256:	6838      	ldr	r0, [r7, #0]
 8008258:	f002 f988 	bl	800a56c <memcpy>
	}
}
 800825c:	bf00      	nop
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800826c:	f001 fdc4 	bl	8009df8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008276:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008278:	e011      	b.n	800829e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800827e:	2b00      	cmp	r3, #0
 8008280:	d012      	beq.n	80082a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	3324      	adds	r3, #36	@ 0x24
 8008286:	4618      	mov	r0, r3
 8008288:	f000 fd86 	bl	8008d98 <xTaskRemoveFromEventList>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d001      	beq.n	8008296 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008292:	f000 fe5f 	bl	8008f54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008296:	7bfb      	ldrb	r3, [r7, #15]
 8008298:	3b01      	subs	r3, #1
 800829a:	b2db      	uxtb	r3, r3
 800829c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800829e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	dce9      	bgt.n	800827a <prvUnlockQueue+0x16>
 80082a6:	e000      	b.n	80082aa <prvUnlockQueue+0x46>
					break;
 80082a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	22ff      	movs	r2, #255	@ 0xff
 80082ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80082b2:	f001 fdd3 	bl	8009e5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082b6:	f001 fd9f 	bl	8009df8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082c2:	e011      	b.n	80082e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d012      	beq.n	80082f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	3310      	adds	r3, #16
 80082d0:	4618      	mov	r0, r3
 80082d2:	f000 fd61 	bl	8008d98 <xTaskRemoveFromEventList>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d001      	beq.n	80082e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80082dc:	f000 fe3a 	bl	8008f54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
 80082e2:	3b01      	subs	r3, #1
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	dce9      	bgt.n	80082c4 <prvUnlockQueue+0x60>
 80082f0:	e000      	b.n	80082f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80082f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	22ff      	movs	r2, #255	@ 0xff
 80082f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80082fc:	f001 fdae 	bl	8009e5c <vPortExitCritical>
}
 8008300:	bf00      	nop
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008310:	f001 fd72 	bl	8009df8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008318:	2b00      	cmp	r3, #0
 800831a:	d102      	bne.n	8008322 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800831c:	2301      	movs	r3, #1
 800831e:	60fb      	str	r3, [r7, #12]
 8008320:	e001      	b.n	8008326 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008322:	2300      	movs	r3, #0
 8008324:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008326:	f001 fd99 	bl	8009e5c <vPortExitCritical>

	return xReturn;
 800832a:	68fb      	ldr	r3, [r7, #12]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800833c:	f001 fd5c 	bl	8009df8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008348:	429a      	cmp	r2, r3
 800834a:	d102      	bne.n	8008352 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800834c:	2301      	movs	r3, #1
 800834e:	60fb      	str	r3, [r7, #12]
 8008350:	e001      	b.n	8008356 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008352:	2300      	movs	r3, #0
 8008354:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008356:	f001 fd81 	bl	8009e5c <vPortExitCritical>

	return xReturn;
 800835a:	68fb      	ldr	r3, [r7, #12]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800836e:	2300      	movs	r3, #0
 8008370:	60fb      	str	r3, [r7, #12]
 8008372:	e014      	b.n	800839e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008374:	4a0f      	ldr	r2, [pc, #60]	@ (80083b4 <vQueueAddToRegistry+0x50>)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10b      	bne.n	8008398 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008380:	490c      	ldr	r1, [pc, #48]	@ (80083b4 <vQueueAddToRegistry+0x50>)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	683a      	ldr	r2, [r7, #0]
 8008386:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800838a:	4a0a      	ldr	r2, [pc, #40]	@ (80083b4 <vQueueAddToRegistry+0x50>)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	00db      	lsls	r3, r3, #3
 8008390:	4413      	add	r3, r2
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008396:	e006      	b.n	80083a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	3301      	adds	r3, #1
 800839c:	60fb      	str	r3, [r7, #12]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2b07      	cmp	r3, #7
 80083a2:	d9e7      	bls.n	8008374 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083a4:	bf00      	nop
 80083a6:	bf00      	nop
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	20000cb4 	.word	0x20000cb4

080083b8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083c0:	2300      	movs	r3, #0
 80083c2:	60fb      	str	r3, [r7, #12]
 80083c4:	e016      	b.n	80083f4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80083c6:	4a10      	ldr	r2, [pc, #64]	@ (8008408 <vQueueUnregisterQueue+0x50>)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	4413      	add	r3, r2
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d10b      	bne.n	80083ee <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80083d6:	4a0c      	ldr	r2, [pc, #48]	@ (8008408 <vQueueUnregisterQueue+0x50>)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2100      	movs	r1, #0
 80083dc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80083e0:	4a09      	ldr	r2, [pc, #36]	@ (8008408 <vQueueUnregisterQueue+0x50>)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	00db      	lsls	r3, r3, #3
 80083e6:	4413      	add	r3, r2
 80083e8:	2200      	movs	r2, #0
 80083ea:	605a      	str	r2, [r3, #4]
				break;
 80083ec:	e006      	b.n	80083fc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	3301      	adds	r3, #1
 80083f2:	60fb      	str	r3, [r7, #12]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2b07      	cmp	r3, #7
 80083f8:	d9e5      	bls.n	80083c6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80083fa:	bf00      	nop
 80083fc:	bf00      	nop
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr
 8008408:	20000cb4 	.word	0x20000cb4

0800840c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800841c:	f001 fcec 	bl	8009df8 <vPortEnterCritical>
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008426:	b25b      	sxtb	r3, r3
 8008428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842c:	d103      	bne.n	8008436 <vQueueWaitForMessageRestricted+0x2a>
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	2200      	movs	r2, #0
 8008432:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800843c:	b25b      	sxtb	r3, r3
 800843e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008442:	d103      	bne.n	800844c <vQueueWaitForMessageRestricted+0x40>
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800844c:	f001 fd06 	bl	8009e5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008454:	2b00      	cmp	r3, #0
 8008456:	d106      	bne.n	8008466 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	3324      	adds	r3, #36	@ 0x24
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	68b9      	ldr	r1, [r7, #8]
 8008460:	4618      	mov	r0, r3
 8008462:	f000 fc6d 	bl	8008d40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008466:	6978      	ldr	r0, [r7, #20]
 8008468:	f7ff fefc 	bl	8008264 <prvUnlockQueue>
	}
 800846c:	bf00      	nop
 800846e:	3718      	adds	r7, #24
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008474:	b580      	push	{r7, lr}
 8008476:	b08e      	sub	sp, #56	@ 0x38
 8008478:	af04      	add	r7, sp, #16
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
 8008480:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10b      	bne.n	80084a0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800848c:	f383 8811 	msr	BASEPRI, r3
 8008490:	f3bf 8f6f 	isb	sy
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	623b      	str	r3, [r7, #32]
}
 800849a:	bf00      	nop
 800849c:	bf00      	nop
 800849e:	e7fd      	b.n	800849c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80084a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10b      	bne.n	80084be <xTaskCreateStatic+0x4a>
	__asm volatile
 80084a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084aa:	f383 8811 	msr	BASEPRI, r3
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	61fb      	str	r3, [r7, #28]
}
 80084b8:	bf00      	nop
 80084ba:	bf00      	nop
 80084bc:	e7fd      	b.n	80084ba <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084be:	23a8      	movs	r3, #168	@ 0xa8
 80084c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	2ba8      	cmp	r3, #168	@ 0xa8
 80084c6:	d00b      	beq.n	80084e0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80084c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	61bb      	str	r3, [r7, #24]
}
 80084da:	bf00      	nop
 80084dc:	bf00      	nop
 80084de:	e7fd      	b.n	80084dc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d01e      	beq.n	8008526 <xTaskCreateStatic+0xb2>
 80084e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d01b      	beq.n	8008526 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084f6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fa:	2202      	movs	r2, #2
 80084fc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008500:	2300      	movs	r3, #0
 8008502:	9303      	str	r3, [sp, #12]
 8008504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008506:	9302      	str	r3, [sp, #8]
 8008508:	f107 0314 	add.w	r3, r7, #20
 800850c:	9301      	str	r3, [sp, #4]
 800850e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	68b9      	ldr	r1, [r7, #8]
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f000 f851 	bl	80085c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800851e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008520:	f000 f8f6 	bl	8008710 <prvAddNewTaskToReadyList>
 8008524:	e001      	b.n	800852a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008526:	2300      	movs	r3, #0
 8008528:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800852a:	697b      	ldr	r3, [r7, #20]
	}
 800852c:	4618      	mov	r0, r3
 800852e:	3728      	adds	r7, #40	@ 0x28
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008534:	b580      	push	{r7, lr}
 8008536:	b08c      	sub	sp, #48	@ 0x30
 8008538:	af04      	add	r7, sp, #16
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	603b      	str	r3, [r7, #0]
 8008540:	4613      	mov	r3, r2
 8008542:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008544:	88fb      	ldrh	r3, [r7, #6]
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	4618      	mov	r0, r3
 800854a:	f001 fd77 	bl	800a03c <pvPortMalloc>
 800854e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00e      	beq.n	8008574 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008556:	20a8      	movs	r0, #168	@ 0xa8
 8008558:	f001 fd70 	bl	800a03c <pvPortMalloc>
 800855c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d003      	beq.n	800856c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	631a      	str	r2, [r3, #48]	@ 0x30
 800856a:	e005      	b.n	8008578 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800856c:	6978      	ldr	r0, [r7, #20]
 800856e:	f001 fe33 	bl	800a1d8 <vPortFree>
 8008572:	e001      	b.n	8008578 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008574:	2300      	movs	r3, #0
 8008576:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d017      	beq.n	80085ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	2200      	movs	r2, #0
 8008582:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008586:	88fa      	ldrh	r2, [r7, #6]
 8008588:	2300      	movs	r3, #0
 800858a:	9303      	str	r3, [sp, #12]
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	9302      	str	r3, [sp, #8]
 8008590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008592:	9301      	str	r3, [sp, #4]
 8008594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	68b9      	ldr	r1, [r7, #8]
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 f80f 	bl	80085c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085a2:	69f8      	ldr	r0, [r7, #28]
 80085a4:	f000 f8b4 	bl	8008710 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085a8:	2301      	movs	r3, #1
 80085aa:	61bb      	str	r3, [r7, #24]
 80085ac:	e002      	b.n	80085b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085ae:	f04f 33ff 	mov.w	r3, #4294967295
 80085b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085b4:	69bb      	ldr	r3, [r7, #24]
	}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3720      	adds	r7, #32
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
	...

080085c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b088      	sub	sp, #32
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
 80085cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	461a      	mov	r2, r3
 80085d8:	21a5      	movs	r1, #165	@ 0xa5
 80085da:	f001 ff3d 	bl	800a458 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80085e8:	3b01      	subs	r3, #1
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4413      	add	r3, r2
 80085ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	f023 0307 	bic.w	r3, r3, #7
 80085f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	f003 0307 	and.w	r3, r3, #7
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00b      	beq.n	800861a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	617b      	str	r3, [r7, #20]
}
 8008614:	bf00      	nop
 8008616:	bf00      	nop
 8008618:	e7fd      	b.n	8008616 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d01f      	beq.n	8008660 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008620:	2300      	movs	r3, #0
 8008622:	61fb      	str	r3, [r7, #28]
 8008624:	e012      	b.n	800864c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	4413      	add	r3, r2
 800862c:	7819      	ldrb	r1, [r3, #0]
 800862e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	4413      	add	r3, r2
 8008634:	3334      	adds	r3, #52	@ 0x34
 8008636:	460a      	mov	r2, r1
 8008638:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	4413      	add	r3, r2
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d006      	beq.n	8008654 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	3301      	adds	r3, #1
 800864a:	61fb      	str	r3, [r7, #28]
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	2b0f      	cmp	r3, #15
 8008650:	d9e9      	bls.n	8008626 <prvInitialiseNewTask+0x66>
 8008652:	e000      	b.n	8008656 <prvInitialiseNewTask+0x96>
			{
				break;
 8008654:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800865e:	e003      	b.n	8008668 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866a:	2b37      	cmp	r3, #55	@ 0x37
 800866c:	d901      	bls.n	8008672 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800866e:	2337      	movs	r3, #55	@ 0x37
 8008670:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008674:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008676:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800867c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800867e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008680:	2200      	movs	r2, #0
 8008682:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008686:	3304      	adds	r3, #4
 8008688:	4618      	mov	r0, r3
 800868a:	f7fe fe33 	bl	80072f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800868e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008690:	3318      	adds	r3, #24
 8008692:	4618      	mov	r0, r3
 8008694:	f7fe fe2e 	bl	80072f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800869c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800869e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80086a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086ac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b0:	2200      	movs	r2, #0
 80086b2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c0:	3354      	adds	r3, #84	@ 0x54
 80086c2:	224c      	movs	r2, #76	@ 0x4c
 80086c4:	2100      	movs	r1, #0
 80086c6:	4618      	mov	r0, r3
 80086c8:	f001 fec6 	bl	800a458 <memset>
 80086cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ce:	4a0d      	ldr	r2, [pc, #52]	@ (8008704 <prvInitialiseNewTask+0x144>)
 80086d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80086d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d4:	4a0c      	ldr	r2, [pc, #48]	@ (8008708 <prvInitialiseNewTask+0x148>)
 80086d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80086d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086da:	4a0c      	ldr	r2, [pc, #48]	@ (800870c <prvInitialiseNewTask+0x14c>)
 80086dc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	68f9      	ldr	r1, [r7, #12]
 80086e2:	69b8      	ldr	r0, [r7, #24]
 80086e4:	f001 fa5a 	bl	8009b9c <pxPortInitialiseStack>
 80086e8:	4602      	mov	r2, r0
 80086ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086fa:	bf00      	nop
 80086fc:	3720      	adds	r7, #32
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	20001f00 	.word	0x20001f00
 8008708:	20001f68 	.word	0x20001f68
 800870c:	20001fd0 	.word	0x20001fd0

08008710 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008718:	f001 fb6e 	bl	8009df8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800871c:	4b2d      	ldr	r3, [pc, #180]	@ (80087d4 <prvAddNewTaskToReadyList+0xc4>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3301      	adds	r3, #1
 8008722:	4a2c      	ldr	r2, [pc, #176]	@ (80087d4 <prvAddNewTaskToReadyList+0xc4>)
 8008724:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008726:	4b2c      	ldr	r3, [pc, #176]	@ (80087d8 <prvAddNewTaskToReadyList+0xc8>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d109      	bne.n	8008742 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800872e:	4a2a      	ldr	r2, [pc, #168]	@ (80087d8 <prvAddNewTaskToReadyList+0xc8>)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008734:	4b27      	ldr	r3, [pc, #156]	@ (80087d4 <prvAddNewTaskToReadyList+0xc4>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d110      	bne.n	800875e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800873c:	f000 fc2e 	bl	8008f9c <prvInitialiseTaskLists>
 8008740:	e00d      	b.n	800875e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008742:	4b26      	ldr	r3, [pc, #152]	@ (80087dc <prvAddNewTaskToReadyList+0xcc>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d109      	bne.n	800875e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800874a:	4b23      	ldr	r3, [pc, #140]	@ (80087d8 <prvAddNewTaskToReadyList+0xc8>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008754:	429a      	cmp	r2, r3
 8008756:	d802      	bhi.n	800875e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008758:	4a1f      	ldr	r2, [pc, #124]	@ (80087d8 <prvAddNewTaskToReadyList+0xc8>)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800875e:	4b20      	ldr	r3, [pc, #128]	@ (80087e0 <prvAddNewTaskToReadyList+0xd0>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3301      	adds	r3, #1
 8008764:	4a1e      	ldr	r2, [pc, #120]	@ (80087e0 <prvAddNewTaskToReadyList+0xd0>)
 8008766:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008768:	4b1d      	ldr	r3, [pc, #116]	@ (80087e0 <prvAddNewTaskToReadyList+0xd0>)
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008774:	4b1b      	ldr	r3, [pc, #108]	@ (80087e4 <prvAddNewTaskToReadyList+0xd4>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	429a      	cmp	r2, r3
 800877a:	d903      	bls.n	8008784 <prvAddNewTaskToReadyList+0x74>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008780:	4a18      	ldr	r2, [pc, #96]	@ (80087e4 <prvAddNewTaskToReadyList+0xd4>)
 8008782:	6013      	str	r3, [r2, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008788:	4613      	mov	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4413      	add	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4a15      	ldr	r2, [pc, #84]	@ (80087e8 <prvAddNewTaskToReadyList+0xd8>)
 8008792:	441a      	add	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	3304      	adds	r3, #4
 8008798:	4619      	mov	r1, r3
 800879a:	4610      	mov	r0, r2
 800879c:	f7fe fdb7 	bl	800730e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80087a0:	f001 fb5c 	bl	8009e5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80087a4:	4b0d      	ldr	r3, [pc, #52]	@ (80087dc <prvAddNewTaskToReadyList+0xcc>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00e      	beq.n	80087ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087ac:	4b0a      	ldr	r3, [pc, #40]	@ (80087d8 <prvAddNewTaskToReadyList+0xc8>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d207      	bcs.n	80087ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087ba:	4b0c      	ldr	r3, [pc, #48]	@ (80087ec <prvAddNewTaskToReadyList+0xdc>)
 80087bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087c0:	601a      	str	r2, [r3, #0]
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087ca:	bf00      	nop
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	200011c8 	.word	0x200011c8
 80087d8:	20000cf4 	.word	0x20000cf4
 80087dc:	200011d4 	.word	0x200011d4
 80087e0:	200011e4 	.word	0x200011e4
 80087e4:	200011d0 	.word	0x200011d0
 80087e8:	20000cf8 	.word	0x20000cf8
 80087ec:	e000ed04 	.word	0xe000ed04

080087f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087f8:	2300      	movs	r3, #0
 80087fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d018      	beq.n	8008834 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008802:	4b14      	ldr	r3, [pc, #80]	@ (8008854 <vTaskDelay+0x64>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00b      	beq.n	8008822 <vTaskDelay+0x32>
	__asm volatile
 800880a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800880e:	f383 8811 	msr	BASEPRI, r3
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	60bb      	str	r3, [r7, #8]
}
 800881c:	bf00      	nop
 800881e:	bf00      	nop
 8008820:	e7fd      	b.n	800881e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008822:	f000 f88b 	bl	800893c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008826:	2100      	movs	r1, #0
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 fe09 	bl	8009440 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800882e:	f000 f893 	bl	8008958 <xTaskResumeAll>
 8008832:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d107      	bne.n	800884a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800883a:	4b07      	ldr	r3, [pc, #28]	@ (8008858 <vTaskDelay+0x68>)
 800883c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800884a:	bf00      	nop
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	200011f0 	.word	0x200011f0
 8008858:	e000ed04 	.word	0xe000ed04

0800885c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b08a      	sub	sp, #40	@ 0x28
 8008860:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008862:	2300      	movs	r3, #0
 8008864:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008866:	2300      	movs	r3, #0
 8008868:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800886a:	463a      	mov	r2, r7
 800886c:	1d39      	adds	r1, r7, #4
 800886e:	f107 0308 	add.w	r3, r7, #8
 8008872:	4618      	mov	r0, r3
 8008874:	f7fe fcea 	bl	800724c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	9202      	str	r2, [sp, #8]
 8008880:	9301      	str	r3, [sp, #4]
 8008882:	2300      	movs	r3, #0
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	2300      	movs	r3, #0
 8008888:	460a      	mov	r2, r1
 800888a:	4924      	ldr	r1, [pc, #144]	@ (800891c <vTaskStartScheduler+0xc0>)
 800888c:	4824      	ldr	r0, [pc, #144]	@ (8008920 <vTaskStartScheduler+0xc4>)
 800888e:	f7ff fdf1 	bl	8008474 <xTaskCreateStatic>
 8008892:	4603      	mov	r3, r0
 8008894:	4a23      	ldr	r2, [pc, #140]	@ (8008924 <vTaskStartScheduler+0xc8>)
 8008896:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008898:	4b22      	ldr	r3, [pc, #136]	@ (8008924 <vTaskStartScheduler+0xc8>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d002      	beq.n	80088a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80088a0:	2301      	movs	r3, #1
 80088a2:	617b      	str	r3, [r7, #20]
 80088a4:	e001      	b.n	80088aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80088a6:	2300      	movs	r3, #0
 80088a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d102      	bne.n	80088b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80088b0:	f000 fe1a 	bl	80094e8 <xTimerCreateTimerTask>
 80088b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d11b      	bne.n	80088f4 <vTaskStartScheduler+0x98>
	__asm volatile
 80088bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c0:	f383 8811 	msr	BASEPRI, r3
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	613b      	str	r3, [r7, #16]
}
 80088ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80088d0:	4b15      	ldr	r3, [pc, #84]	@ (8008928 <vTaskStartScheduler+0xcc>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	3354      	adds	r3, #84	@ 0x54
 80088d6:	4a15      	ldr	r2, [pc, #84]	@ (800892c <vTaskStartScheduler+0xd0>)
 80088d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088da:	4b15      	ldr	r3, [pc, #84]	@ (8008930 <vTaskStartScheduler+0xd4>)
 80088dc:	f04f 32ff 	mov.w	r2, #4294967295
 80088e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088e2:	4b14      	ldr	r3, [pc, #80]	@ (8008934 <vTaskStartScheduler+0xd8>)
 80088e4:	2201      	movs	r2, #1
 80088e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088e8:	4b13      	ldr	r3, [pc, #76]	@ (8008938 <vTaskStartScheduler+0xdc>)
 80088ea:	2200      	movs	r2, #0
 80088ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088ee:	f001 f9df 	bl	8009cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088f2:	e00f      	b.n	8008914 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088fa:	d10b      	bne.n	8008914 <vTaskStartScheduler+0xb8>
	__asm volatile
 80088fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008900:	f383 8811 	msr	BASEPRI, r3
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	60fb      	str	r3, [r7, #12]
}
 800890e:	bf00      	nop
 8008910:	bf00      	nop
 8008912:	e7fd      	b.n	8008910 <vTaskStartScheduler+0xb4>
}
 8008914:	bf00      	nop
 8008916:	3718      	adds	r7, #24
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	0800ae68 	.word	0x0800ae68
 8008920:	08008f6d 	.word	0x08008f6d
 8008924:	200011ec 	.word	0x200011ec
 8008928:	20000cf4 	.word	0x20000cf4
 800892c:	20000014 	.word	0x20000014
 8008930:	200011e8 	.word	0x200011e8
 8008934:	200011d4 	.word	0x200011d4
 8008938:	200011cc 	.word	0x200011cc

0800893c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800893c:	b480      	push	{r7}
 800893e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008940:	4b04      	ldr	r3, [pc, #16]	@ (8008954 <vTaskSuspendAll+0x18>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3301      	adds	r3, #1
 8008946:	4a03      	ldr	r2, [pc, #12]	@ (8008954 <vTaskSuspendAll+0x18>)
 8008948:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800894a:	bf00      	nop
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr
 8008954:	200011f0 	.word	0x200011f0

08008958 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800895e:	2300      	movs	r3, #0
 8008960:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008962:	2300      	movs	r3, #0
 8008964:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008966:	4b42      	ldr	r3, [pc, #264]	@ (8008a70 <xTaskResumeAll+0x118>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10b      	bne.n	8008986 <xTaskResumeAll+0x2e>
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	603b      	str	r3, [r7, #0]
}
 8008980:	bf00      	nop
 8008982:	bf00      	nop
 8008984:	e7fd      	b.n	8008982 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008986:	f001 fa37 	bl	8009df8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800898a:	4b39      	ldr	r3, [pc, #228]	@ (8008a70 <xTaskResumeAll+0x118>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	3b01      	subs	r3, #1
 8008990:	4a37      	ldr	r2, [pc, #220]	@ (8008a70 <xTaskResumeAll+0x118>)
 8008992:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008994:	4b36      	ldr	r3, [pc, #216]	@ (8008a70 <xTaskResumeAll+0x118>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d162      	bne.n	8008a62 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800899c:	4b35      	ldr	r3, [pc, #212]	@ (8008a74 <xTaskResumeAll+0x11c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d05e      	beq.n	8008a62 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089a4:	e02f      	b.n	8008a06 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089a6:	4b34      	ldr	r3, [pc, #208]	@ (8008a78 <xTaskResumeAll+0x120>)
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	3318      	adds	r3, #24
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fe fd08 	bl	80073c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	3304      	adds	r3, #4
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fe fd03 	bl	80073c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089c6:	4b2d      	ldr	r3, [pc, #180]	@ (8008a7c <xTaskResumeAll+0x124>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d903      	bls.n	80089d6 <xTaskResumeAll+0x7e>
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d2:	4a2a      	ldr	r2, [pc, #168]	@ (8008a7c <xTaskResumeAll+0x124>)
 80089d4:	6013      	str	r3, [r2, #0]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089da:	4613      	mov	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4a27      	ldr	r2, [pc, #156]	@ (8008a80 <xTaskResumeAll+0x128>)
 80089e4:	441a      	add	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	3304      	adds	r3, #4
 80089ea:	4619      	mov	r1, r3
 80089ec:	4610      	mov	r0, r2
 80089ee:	f7fe fc8e 	bl	800730e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089f6:	4b23      	ldr	r3, [pc, #140]	@ (8008a84 <xTaskResumeAll+0x12c>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d302      	bcc.n	8008a06 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008a00:	4b21      	ldr	r3, [pc, #132]	@ (8008a88 <xTaskResumeAll+0x130>)
 8008a02:	2201      	movs	r2, #1
 8008a04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a06:	4b1c      	ldr	r3, [pc, #112]	@ (8008a78 <xTaskResumeAll+0x120>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1cb      	bne.n	80089a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a14:	f000 fb66 	bl	80090e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008a18:	4b1c      	ldr	r3, [pc, #112]	@ (8008a8c <xTaskResumeAll+0x134>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d010      	beq.n	8008a46 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a24:	f000 f846 	bl	8008ab4 <xTaskIncrementTick>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d002      	beq.n	8008a34 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008a2e:	4b16      	ldr	r3, [pc, #88]	@ (8008a88 <xTaskResumeAll+0x130>)
 8008a30:	2201      	movs	r2, #1
 8008a32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	3b01      	subs	r3, #1
 8008a38:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1f1      	bne.n	8008a24 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008a40:	4b12      	ldr	r3, [pc, #72]	@ (8008a8c <xTaskResumeAll+0x134>)
 8008a42:	2200      	movs	r2, #0
 8008a44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a46:	4b10      	ldr	r3, [pc, #64]	@ (8008a88 <xTaskResumeAll+0x130>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d009      	beq.n	8008a62 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a52:	4b0f      	ldr	r3, [pc, #60]	@ (8008a90 <xTaskResumeAll+0x138>)
 8008a54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a58:	601a      	str	r2, [r3, #0]
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a62:	f001 f9fb 	bl	8009e5c <vPortExitCritical>

	return xAlreadyYielded;
 8008a66:	68bb      	ldr	r3, [r7, #8]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	200011f0 	.word	0x200011f0
 8008a74:	200011c8 	.word	0x200011c8
 8008a78:	20001188 	.word	0x20001188
 8008a7c:	200011d0 	.word	0x200011d0
 8008a80:	20000cf8 	.word	0x20000cf8
 8008a84:	20000cf4 	.word	0x20000cf4
 8008a88:	200011dc 	.word	0x200011dc
 8008a8c:	200011d8 	.word	0x200011d8
 8008a90:	e000ed04 	.word	0xe000ed04

08008a94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a9a:	4b05      	ldr	r3, [pc, #20]	@ (8008ab0 <xTaskGetTickCount+0x1c>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008aa0:	687b      	ldr	r3, [r7, #4]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	370c      	adds	r7, #12
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	200011cc 	.word	0x200011cc

08008ab4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008aba:	2300      	movs	r3, #0
 8008abc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008abe:	4b4f      	ldr	r3, [pc, #316]	@ (8008bfc <xTaskIncrementTick+0x148>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f040 8090 	bne.w	8008be8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ac8:	4b4d      	ldr	r3, [pc, #308]	@ (8008c00 <xTaskIncrementTick+0x14c>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	3301      	adds	r3, #1
 8008ace:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ad0:	4a4b      	ldr	r2, [pc, #300]	@ (8008c00 <xTaskIncrementTick+0x14c>)
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d121      	bne.n	8008b20 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008adc:	4b49      	ldr	r3, [pc, #292]	@ (8008c04 <xTaskIncrementTick+0x150>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00b      	beq.n	8008afe <xTaskIncrementTick+0x4a>
	__asm volatile
 8008ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aea:	f383 8811 	msr	BASEPRI, r3
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	603b      	str	r3, [r7, #0]
}
 8008af8:	bf00      	nop
 8008afa:	bf00      	nop
 8008afc:	e7fd      	b.n	8008afa <xTaskIncrementTick+0x46>
 8008afe:	4b41      	ldr	r3, [pc, #260]	@ (8008c04 <xTaskIncrementTick+0x150>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	60fb      	str	r3, [r7, #12]
 8008b04:	4b40      	ldr	r3, [pc, #256]	@ (8008c08 <xTaskIncrementTick+0x154>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a3e      	ldr	r2, [pc, #248]	@ (8008c04 <xTaskIncrementTick+0x150>)
 8008b0a:	6013      	str	r3, [r2, #0]
 8008b0c:	4a3e      	ldr	r2, [pc, #248]	@ (8008c08 <xTaskIncrementTick+0x154>)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6013      	str	r3, [r2, #0]
 8008b12:	4b3e      	ldr	r3, [pc, #248]	@ (8008c0c <xTaskIncrementTick+0x158>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	3301      	adds	r3, #1
 8008b18:	4a3c      	ldr	r2, [pc, #240]	@ (8008c0c <xTaskIncrementTick+0x158>)
 8008b1a:	6013      	str	r3, [r2, #0]
 8008b1c:	f000 fae2 	bl	80090e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b20:	4b3b      	ldr	r3, [pc, #236]	@ (8008c10 <xTaskIncrementTick+0x15c>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d349      	bcc.n	8008bbe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b2a:	4b36      	ldr	r3, [pc, #216]	@ (8008c04 <xTaskIncrementTick+0x150>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d104      	bne.n	8008b3e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b34:	4b36      	ldr	r3, [pc, #216]	@ (8008c10 <xTaskIncrementTick+0x15c>)
 8008b36:	f04f 32ff 	mov.w	r2, #4294967295
 8008b3a:	601a      	str	r2, [r3, #0]
					break;
 8008b3c:	e03f      	b.n	8008bbe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b3e:	4b31      	ldr	r3, [pc, #196]	@ (8008c04 <xTaskIncrementTick+0x150>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d203      	bcs.n	8008b5e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b56:	4a2e      	ldr	r2, [pc, #184]	@ (8008c10 <xTaskIncrementTick+0x15c>)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b5c:	e02f      	b.n	8008bbe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	3304      	adds	r3, #4
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fe fc30 	bl	80073c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d004      	beq.n	8008b7a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	3318      	adds	r3, #24
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fe fc27 	bl	80073c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b7e:	4b25      	ldr	r3, [pc, #148]	@ (8008c14 <xTaskIncrementTick+0x160>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d903      	bls.n	8008b8e <xTaskIncrementTick+0xda>
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b8a:	4a22      	ldr	r2, [pc, #136]	@ (8008c14 <xTaskIncrementTick+0x160>)
 8008b8c:	6013      	str	r3, [r2, #0]
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b92:	4613      	mov	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4413      	add	r3, r2
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8008c18 <xTaskIncrementTick+0x164>)
 8008b9c:	441a      	add	r2, r3
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	3304      	adds	r3, #4
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	4610      	mov	r0, r2
 8008ba6:	f7fe fbb2 	bl	800730e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bae:	4b1b      	ldr	r3, [pc, #108]	@ (8008c1c <xTaskIncrementTick+0x168>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d3b8      	bcc.n	8008b2a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bbc:	e7b5      	b.n	8008b2a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008bbe:	4b17      	ldr	r3, [pc, #92]	@ (8008c1c <xTaskIncrementTick+0x168>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bc4:	4914      	ldr	r1, [pc, #80]	@ (8008c18 <xTaskIncrementTick+0x164>)
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	440b      	add	r3, r1
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d901      	bls.n	8008bda <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008bda:	4b11      	ldr	r3, [pc, #68]	@ (8008c20 <xTaskIncrementTick+0x16c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d007      	beq.n	8008bf2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008be2:	2301      	movs	r3, #1
 8008be4:	617b      	str	r3, [r7, #20]
 8008be6:	e004      	b.n	8008bf2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008be8:	4b0e      	ldr	r3, [pc, #56]	@ (8008c24 <xTaskIncrementTick+0x170>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	3301      	adds	r3, #1
 8008bee:	4a0d      	ldr	r2, [pc, #52]	@ (8008c24 <xTaskIncrementTick+0x170>)
 8008bf0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008bf2:	697b      	ldr	r3, [r7, #20]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3718      	adds	r7, #24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	200011f0 	.word	0x200011f0
 8008c00:	200011cc 	.word	0x200011cc
 8008c04:	20001180 	.word	0x20001180
 8008c08:	20001184 	.word	0x20001184
 8008c0c:	200011e0 	.word	0x200011e0
 8008c10:	200011e8 	.word	0x200011e8
 8008c14:	200011d0 	.word	0x200011d0
 8008c18:	20000cf8 	.word	0x20000cf8
 8008c1c:	20000cf4 	.word	0x20000cf4
 8008c20:	200011dc 	.word	0x200011dc
 8008c24:	200011d8 	.word	0x200011d8

08008c28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8008cdc <vTaskSwitchContext+0xb4>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d003      	beq.n	8008c3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c36:	4b2a      	ldr	r3, [pc, #168]	@ (8008ce0 <vTaskSwitchContext+0xb8>)
 8008c38:	2201      	movs	r2, #1
 8008c3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c3c:	e047      	b.n	8008cce <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008c3e:	4b28      	ldr	r3, [pc, #160]	@ (8008ce0 <vTaskSwitchContext+0xb8>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c44:	4b27      	ldr	r3, [pc, #156]	@ (8008ce4 <vTaskSwitchContext+0xbc>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	60fb      	str	r3, [r7, #12]
 8008c4a:	e011      	b.n	8008c70 <vTaskSwitchContext+0x48>
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10b      	bne.n	8008c6a <vTaskSwitchContext+0x42>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	607b      	str	r3, [r7, #4]
}
 8008c64:	bf00      	nop
 8008c66:	bf00      	nop
 8008c68:	e7fd      	b.n	8008c66 <vTaskSwitchContext+0x3e>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	60fb      	str	r3, [r7, #12]
 8008c70:	491d      	ldr	r1, [pc, #116]	@ (8008ce8 <vTaskSwitchContext+0xc0>)
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	4613      	mov	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	4413      	add	r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	440b      	add	r3, r1
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d0e3      	beq.n	8008c4c <vTaskSwitchContext+0x24>
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	4613      	mov	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	4413      	add	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4a16      	ldr	r2, [pc, #88]	@ (8008ce8 <vTaskSwitchContext+0xc0>)
 8008c90:	4413      	add	r3, r2
 8008c92:	60bb      	str	r3, [r7, #8]
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	685a      	ldr	r2, [r3, #4]
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	605a      	str	r2, [r3, #4]
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	685a      	ldr	r2, [r3, #4]
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	3308      	adds	r3, #8
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d104      	bne.n	8008cb4 <vTaskSwitchContext+0x8c>
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	685a      	ldr	r2, [r3, #4]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	605a      	str	r2, [r3, #4]
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	4a0c      	ldr	r2, [pc, #48]	@ (8008cec <vTaskSwitchContext+0xc4>)
 8008cbc:	6013      	str	r3, [r2, #0]
 8008cbe:	4a09      	ldr	r2, [pc, #36]	@ (8008ce4 <vTaskSwitchContext+0xbc>)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008cc4:	4b09      	ldr	r3, [pc, #36]	@ (8008cec <vTaskSwitchContext+0xc4>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3354      	adds	r3, #84	@ 0x54
 8008cca:	4a09      	ldr	r2, [pc, #36]	@ (8008cf0 <vTaskSwitchContext+0xc8>)
 8008ccc:	6013      	str	r3, [r2, #0]
}
 8008cce:	bf00      	nop
 8008cd0:	3714      	adds	r7, #20
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	200011f0 	.word	0x200011f0
 8008ce0:	200011dc 	.word	0x200011dc
 8008ce4:	200011d0 	.word	0x200011d0
 8008ce8:	20000cf8 	.word	0x20000cf8
 8008cec:	20000cf4 	.word	0x20000cf4
 8008cf0:	20000014 	.word	0x20000014

08008cf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d10b      	bne.n	8008d1c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d08:	f383 8811 	msr	BASEPRI, r3
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	60fb      	str	r3, [r7, #12]
}
 8008d16:	bf00      	nop
 8008d18:	bf00      	nop
 8008d1a:	e7fd      	b.n	8008d18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d1c:	4b07      	ldr	r3, [pc, #28]	@ (8008d3c <vTaskPlaceOnEventList+0x48>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3318      	adds	r3, #24
 8008d22:	4619      	mov	r1, r3
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7fe fb16 	bl	8007356 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d2a:	2101      	movs	r1, #1
 8008d2c:	6838      	ldr	r0, [r7, #0]
 8008d2e:	f000 fb87 	bl	8009440 <prvAddCurrentTaskToDelayedList>
}
 8008d32:	bf00      	nop
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	20000cf4 	.word	0x20000cf4

08008d40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10b      	bne.n	8008d6a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d56:	f383 8811 	msr	BASEPRI, r3
 8008d5a:	f3bf 8f6f 	isb	sy
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	617b      	str	r3, [r7, #20]
}
 8008d64:	bf00      	nop
 8008d66:	bf00      	nop
 8008d68:	e7fd      	b.n	8008d66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8008d94 <vTaskPlaceOnEventListRestricted+0x54>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	3318      	adds	r3, #24
 8008d70:	4619      	mov	r1, r3
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f7fe facb 	bl	800730e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d002      	beq.n	8008d84 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d82:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d84:	6879      	ldr	r1, [r7, #4]
 8008d86:	68b8      	ldr	r0, [r7, #8]
 8008d88:	f000 fb5a 	bl	8009440 <prvAddCurrentTaskToDelayedList>
	}
 8008d8c:	bf00      	nop
 8008d8e:	3718      	adds	r7, #24
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	20000cf4 	.word	0x20000cf4

08008d98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10b      	bne.n	8008dc6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	60fb      	str	r3, [r7, #12]
}
 8008dc0:	bf00      	nop
 8008dc2:	bf00      	nop
 8008dc4:	e7fd      	b.n	8008dc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	3318      	adds	r3, #24
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7fe fafc 	bl	80073c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8008e48 <xTaskRemoveFromEventList+0xb0>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d11d      	bne.n	8008e14 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	3304      	adds	r3, #4
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7fe faf3 	bl	80073c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008de6:	4b19      	ldr	r3, [pc, #100]	@ (8008e4c <xTaskRemoveFromEventList+0xb4>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d903      	bls.n	8008df6 <xTaskRemoveFromEventList+0x5e>
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df2:	4a16      	ldr	r2, [pc, #88]	@ (8008e4c <xTaskRemoveFromEventList+0xb4>)
 8008df4:	6013      	str	r3, [r2, #0]
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	4413      	add	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4a13      	ldr	r2, [pc, #76]	@ (8008e50 <xTaskRemoveFromEventList+0xb8>)
 8008e04:	441a      	add	r2, r3
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	3304      	adds	r3, #4
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	f7fe fa7e 	bl	800730e <vListInsertEnd>
 8008e12:	e005      	b.n	8008e20 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	3318      	adds	r3, #24
 8008e18:	4619      	mov	r1, r3
 8008e1a:	480e      	ldr	r0, [pc, #56]	@ (8008e54 <xTaskRemoveFromEventList+0xbc>)
 8008e1c:	f7fe fa77 	bl	800730e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e24:	4b0c      	ldr	r3, [pc, #48]	@ (8008e58 <xTaskRemoveFromEventList+0xc0>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d905      	bls.n	8008e3a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e32:	4b0a      	ldr	r3, [pc, #40]	@ (8008e5c <xTaskRemoveFromEventList+0xc4>)
 8008e34:	2201      	movs	r2, #1
 8008e36:	601a      	str	r2, [r3, #0]
 8008e38:	e001      	b.n	8008e3e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e3e:	697b      	ldr	r3, [r7, #20]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3718      	adds	r7, #24
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	200011f0 	.word	0x200011f0
 8008e4c:	200011d0 	.word	0x200011d0
 8008e50:	20000cf8 	.word	0x20000cf8
 8008e54:	20001188 	.word	0x20001188
 8008e58:	20000cf4 	.word	0x20000cf4
 8008e5c:	200011dc 	.word	0x200011dc

08008e60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e68:	4b06      	ldr	r3, [pc, #24]	@ (8008e84 <vTaskInternalSetTimeOutState+0x24>)
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e70:	4b05      	ldr	r3, [pc, #20]	@ (8008e88 <vTaskInternalSetTimeOutState+0x28>)
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	605a      	str	r2, [r3, #4]
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr
 8008e84:	200011e0 	.word	0x200011e0
 8008e88:	200011cc 	.word	0x200011cc

08008e8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b088      	sub	sp, #32
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10b      	bne.n	8008eb4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea0:	f383 8811 	msr	BASEPRI, r3
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	613b      	str	r3, [r7, #16]
}
 8008eae:	bf00      	nop
 8008eb0:	bf00      	nop
 8008eb2:	e7fd      	b.n	8008eb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10b      	bne.n	8008ed2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ebe:	f383 8811 	msr	BASEPRI, r3
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	60fb      	str	r3, [r7, #12]
}
 8008ecc:	bf00      	nop
 8008ece:	bf00      	nop
 8008ed0:	e7fd      	b.n	8008ece <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008ed2:	f000 ff91 	bl	8009df8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8008f4c <xTaskCheckForTimeOut+0xc0>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	69ba      	ldr	r2, [r7, #24]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eee:	d102      	bne.n	8008ef6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	61fb      	str	r3, [r7, #28]
 8008ef4:	e023      	b.n	8008f3e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	4b15      	ldr	r3, [pc, #84]	@ (8008f50 <xTaskCheckForTimeOut+0xc4>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d007      	beq.n	8008f12 <xTaskCheckForTimeOut+0x86>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	69ba      	ldr	r2, [r7, #24]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d302      	bcc.n	8008f12 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	61fb      	str	r3, [r7, #28]
 8008f10:	e015      	b.n	8008f3e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d20b      	bcs.n	8008f34 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	1ad2      	subs	r2, r2, r3
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f7ff ff99 	bl	8008e60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	61fb      	str	r3, [r7, #28]
 8008f32:	e004      	b.n	8008f3e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	2200      	movs	r2, #0
 8008f38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f3e:	f000 ff8d 	bl	8009e5c <vPortExitCritical>

	return xReturn;
 8008f42:	69fb      	ldr	r3, [r7, #28]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3720      	adds	r7, #32
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	200011cc 	.word	0x200011cc
 8008f50:	200011e0 	.word	0x200011e0

08008f54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f54:	b480      	push	{r7}
 8008f56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f58:	4b03      	ldr	r3, [pc, #12]	@ (8008f68 <vTaskMissedYield+0x14>)
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	601a      	str	r2, [r3, #0]
}
 8008f5e:	bf00      	nop
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr
 8008f68:	200011dc 	.word	0x200011dc

08008f6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f74:	f000 f852 	bl	800901c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f78:	4b06      	ldr	r3, [pc, #24]	@ (8008f94 <prvIdleTask+0x28>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d9f9      	bls.n	8008f74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f80:	4b05      	ldr	r3, [pc, #20]	@ (8008f98 <prvIdleTask+0x2c>)
 8008f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f90:	e7f0      	b.n	8008f74 <prvIdleTask+0x8>
 8008f92:	bf00      	nop
 8008f94:	20000cf8 	.word	0x20000cf8
 8008f98:	e000ed04 	.word	0xe000ed04

08008f9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	607b      	str	r3, [r7, #4]
 8008fa6:	e00c      	b.n	8008fc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	4613      	mov	r3, r2
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	4413      	add	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4a12      	ldr	r2, [pc, #72]	@ (8008ffc <prvInitialiseTaskLists+0x60>)
 8008fb4:	4413      	add	r3, r2
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fe f97c 	bl	80072b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	607b      	str	r3, [r7, #4]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2b37      	cmp	r3, #55	@ 0x37
 8008fc6:	d9ef      	bls.n	8008fa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008fc8:	480d      	ldr	r0, [pc, #52]	@ (8009000 <prvInitialiseTaskLists+0x64>)
 8008fca:	f7fe f973 	bl	80072b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008fce:	480d      	ldr	r0, [pc, #52]	@ (8009004 <prvInitialiseTaskLists+0x68>)
 8008fd0:	f7fe f970 	bl	80072b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008fd4:	480c      	ldr	r0, [pc, #48]	@ (8009008 <prvInitialiseTaskLists+0x6c>)
 8008fd6:	f7fe f96d 	bl	80072b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008fda:	480c      	ldr	r0, [pc, #48]	@ (800900c <prvInitialiseTaskLists+0x70>)
 8008fdc:	f7fe f96a 	bl	80072b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008fe0:	480b      	ldr	r0, [pc, #44]	@ (8009010 <prvInitialiseTaskLists+0x74>)
 8008fe2:	f7fe f967 	bl	80072b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8009014 <prvInitialiseTaskLists+0x78>)
 8008fe8:	4a05      	ldr	r2, [pc, #20]	@ (8009000 <prvInitialiseTaskLists+0x64>)
 8008fea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008fec:	4b0a      	ldr	r3, [pc, #40]	@ (8009018 <prvInitialiseTaskLists+0x7c>)
 8008fee:	4a05      	ldr	r2, [pc, #20]	@ (8009004 <prvInitialiseTaskLists+0x68>)
 8008ff0:	601a      	str	r2, [r3, #0]
}
 8008ff2:	bf00      	nop
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	20000cf8 	.word	0x20000cf8
 8009000:	20001158 	.word	0x20001158
 8009004:	2000116c 	.word	0x2000116c
 8009008:	20001188 	.word	0x20001188
 800900c:	2000119c 	.word	0x2000119c
 8009010:	200011b4 	.word	0x200011b4
 8009014:	20001180 	.word	0x20001180
 8009018:	20001184 	.word	0x20001184

0800901c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009022:	e019      	b.n	8009058 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009024:	f000 fee8 	bl	8009df8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009028:	4b10      	ldr	r3, [pc, #64]	@ (800906c <prvCheckTasksWaitingTermination+0x50>)
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	3304      	adds	r3, #4
 8009034:	4618      	mov	r0, r3
 8009036:	f7fe f9c7 	bl	80073c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800903a:	4b0d      	ldr	r3, [pc, #52]	@ (8009070 <prvCheckTasksWaitingTermination+0x54>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3b01      	subs	r3, #1
 8009040:	4a0b      	ldr	r2, [pc, #44]	@ (8009070 <prvCheckTasksWaitingTermination+0x54>)
 8009042:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009044:	4b0b      	ldr	r3, [pc, #44]	@ (8009074 <prvCheckTasksWaitingTermination+0x58>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	3b01      	subs	r3, #1
 800904a:	4a0a      	ldr	r2, [pc, #40]	@ (8009074 <prvCheckTasksWaitingTermination+0x58>)
 800904c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800904e:	f000 ff05 	bl	8009e5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f810 	bl	8009078 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009058:	4b06      	ldr	r3, [pc, #24]	@ (8009074 <prvCheckTasksWaitingTermination+0x58>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d1e1      	bne.n	8009024 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009060:	bf00      	nop
 8009062:	bf00      	nop
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	2000119c 	.word	0x2000119c
 8009070:	200011c8 	.word	0x200011c8
 8009074:	200011b0 	.word	0x200011b0

08009078 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	3354      	adds	r3, #84	@ 0x54
 8009084:	4618      	mov	r0, r3
 8009086:	f001 f9ef 	bl	800a468 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009090:	2b00      	cmp	r3, #0
 8009092:	d108      	bne.n	80090a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009098:	4618      	mov	r0, r3
 800909a:	f001 f89d 	bl	800a1d8 <vPortFree>
				vPortFree( pxTCB );
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f001 f89a 	bl	800a1d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090a4:	e019      	b.n	80090da <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d103      	bne.n	80090b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f001 f891 	bl	800a1d8 <vPortFree>
	}
 80090b6:	e010      	b.n	80090da <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d00b      	beq.n	80090da <prvDeleteTCB+0x62>
	__asm volatile
 80090c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c6:	f383 8811 	msr	BASEPRI, r3
 80090ca:	f3bf 8f6f 	isb	sy
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	60fb      	str	r3, [r7, #12]
}
 80090d4:	bf00      	nop
 80090d6:	bf00      	nop
 80090d8:	e7fd      	b.n	80090d6 <prvDeleteTCB+0x5e>
	}
 80090da:	bf00      	nop
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090ea:	4b0c      	ldr	r3, [pc, #48]	@ (800911c <prvResetNextTaskUnblockTime+0x38>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d104      	bne.n	80090fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80090f4:	4b0a      	ldr	r3, [pc, #40]	@ (8009120 <prvResetNextTaskUnblockTime+0x3c>)
 80090f6:	f04f 32ff 	mov.w	r2, #4294967295
 80090fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80090fc:	e008      	b.n	8009110 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090fe:	4b07      	ldr	r3, [pc, #28]	@ (800911c <prvResetNextTaskUnblockTime+0x38>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	4a04      	ldr	r2, [pc, #16]	@ (8009120 <prvResetNextTaskUnblockTime+0x3c>)
 800910e:	6013      	str	r3, [r2, #0]
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	20001180 	.word	0x20001180
 8009120:	200011e8 	.word	0x200011e8

08009124 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800912a:	4b0b      	ldr	r3, [pc, #44]	@ (8009158 <xTaskGetSchedulerState+0x34>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d102      	bne.n	8009138 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009132:	2301      	movs	r3, #1
 8009134:	607b      	str	r3, [r7, #4]
 8009136:	e008      	b.n	800914a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009138:	4b08      	ldr	r3, [pc, #32]	@ (800915c <xTaskGetSchedulerState+0x38>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d102      	bne.n	8009146 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009140:	2302      	movs	r3, #2
 8009142:	607b      	str	r3, [r7, #4]
 8009144:	e001      	b.n	800914a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009146:	2300      	movs	r3, #0
 8009148:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800914a:	687b      	ldr	r3, [r7, #4]
	}
 800914c:	4618      	mov	r0, r3
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr
 8009158:	200011d4 	.word	0x200011d4
 800915c:	200011f0 	.word	0x200011f0

08009160 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800916c:	2300      	movs	r3, #0
 800916e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d051      	beq.n	800921a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800917a:	4b2a      	ldr	r3, [pc, #168]	@ (8009224 <xTaskPriorityInherit+0xc4>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009180:	429a      	cmp	r2, r3
 8009182:	d241      	bcs.n	8009208 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	2b00      	cmp	r3, #0
 800918a:	db06      	blt.n	800919a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800918c:	4b25      	ldr	r3, [pc, #148]	@ (8009224 <xTaskPriorityInherit+0xc4>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009192:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	6959      	ldr	r1, [r3, #20]
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091a2:	4613      	mov	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	4a1f      	ldr	r2, [pc, #124]	@ (8009228 <xTaskPriorityInherit+0xc8>)
 80091ac:	4413      	add	r3, r2
 80091ae:	4299      	cmp	r1, r3
 80091b0:	d122      	bne.n	80091f8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	3304      	adds	r3, #4
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7fe f906 	bl	80073c8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091bc:	4b19      	ldr	r3, [pc, #100]	@ (8009224 <xTaskPriorityInherit+0xc4>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ca:	4b18      	ldr	r3, [pc, #96]	@ (800922c <xTaskPriorityInherit+0xcc>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d903      	bls.n	80091da <xTaskPriorityInherit+0x7a>
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d6:	4a15      	ldr	r2, [pc, #84]	@ (800922c <xTaskPriorityInherit+0xcc>)
 80091d8:	6013      	str	r3, [r2, #0]
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091de:	4613      	mov	r3, r2
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	4413      	add	r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	4a10      	ldr	r2, [pc, #64]	@ (8009228 <xTaskPriorityInherit+0xc8>)
 80091e8:	441a      	add	r2, r3
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	3304      	adds	r3, #4
 80091ee:	4619      	mov	r1, r3
 80091f0:	4610      	mov	r0, r2
 80091f2:	f7fe f88c 	bl	800730e <vListInsertEnd>
 80091f6:	e004      	b.n	8009202 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009224 <xTaskPriorityInherit+0xc4>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009202:	2301      	movs	r3, #1
 8009204:	60fb      	str	r3, [r7, #12]
 8009206:	e008      	b.n	800921a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800920c:	4b05      	ldr	r3, [pc, #20]	@ (8009224 <xTaskPriorityInherit+0xc4>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009212:	429a      	cmp	r2, r3
 8009214:	d201      	bcs.n	800921a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009216:	2301      	movs	r3, #1
 8009218:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800921a:	68fb      	ldr	r3, [r7, #12]
	}
 800921c:	4618      	mov	r0, r3
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	20000cf4 	.word	0x20000cf4
 8009228:	20000cf8 	.word	0x20000cf8
 800922c:	200011d0 	.word	0x200011d0

08009230 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800923c:	2300      	movs	r3, #0
 800923e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d058      	beq.n	80092f8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009246:	4b2f      	ldr	r3, [pc, #188]	@ (8009304 <xTaskPriorityDisinherit+0xd4>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	429a      	cmp	r2, r3
 800924e:	d00b      	beq.n	8009268 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	60fb      	str	r3, [r7, #12]
}
 8009262:	bf00      	nop
 8009264:	bf00      	nop
 8009266:	e7fd      	b.n	8009264 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800926c:	2b00      	cmp	r3, #0
 800926e:	d10b      	bne.n	8009288 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	60bb      	str	r3, [r7, #8]
}
 8009282:	bf00      	nop
 8009284:	bf00      	nop
 8009286:	e7fd      	b.n	8009284 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800928c:	1e5a      	subs	r2, r3, #1
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800929a:	429a      	cmp	r2, r3
 800929c:	d02c      	beq.n	80092f8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d128      	bne.n	80092f8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	3304      	adds	r3, #4
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fe f88c 	bl	80073c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092c8:	4b0f      	ldr	r3, [pc, #60]	@ (8009308 <xTaskPriorityDisinherit+0xd8>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d903      	bls.n	80092d8 <xTaskPriorityDisinherit+0xa8>
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d4:	4a0c      	ldr	r2, [pc, #48]	@ (8009308 <xTaskPriorityDisinherit+0xd8>)
 80092d6:	6013      	str	r3, [r2, #0]
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092dc:	4613      	mov	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	4413      	add	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4a09      	ldr	r2, [pc, #36]	@ (800930c <xTaskPriorityDisinherit+0xdc>)
 80092e6:	441a      	add	r2, r3
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	3304      	adds	r3, #4
 80092ec:	4619      	mov	r1, r3
 80092ee:	4610      	mov	r0, r2
 80092f0:	f7fe f80d 	bl	800730e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80092f4:	2301      	movs	r3, #1
 80092f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80092f8:	697b      	ldr	r3, [r7, #20]
	}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3718      	adds	r7, #24
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	20000cf4 	.word	0x20000cf4
 8009308:	200011d0 	.word	0x200011d0
 800930c:	20000cf8 	.word	0x20000cf8

08009310 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009310:	b580      	push	{r7, lr}
 8009312:	b088      	sub	sp, #32
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800931e:	2301      	movs	r3, #1
 8009320:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d06c      	beq.n	8009402 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10b      	bne.n	8009348 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009334:	f383 8811 	msr	BASEPRI, r3
 8009338:	f3bf 8f6f 	isb	sy
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	60fb      	str	r3, [r7, #12]
}
 8009342:	bf00      	nop
 8009344:	bf00      	nop
 8009346:	e7fd      	b.n	8009344 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	429a      	cmp	r2, r3
 8009350:	d902      	bls.n	8009358 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	61fb      	str	r3, [r7, #28]
 8009356:	e002      	b.n	800935e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800935c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009362:	69fa      	ldr	r2, [r7, #28]
 8009364:	429a      	cmp	r2, r3
 8009366:	d04c      	beq.n	8009402 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800936c:	697a      	ldr	r2, [r7, #20]
 800936e:	429a      	cmp	r2, r3
 8009370:	d147      	bne.n	8009402 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009372:	4b26      	ldr	r3, [pc, #152]	@ (800940c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	69ba      	ldr	r2, [r7, #24]
 8009378:	429a      	cmp	r2, r3
 800937a:	d10b      	bne.n	8009394 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800937c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009380:	f383 8811 	msr	BASEPRI, r3
 8009384:	f3bf 8f6f 	isb	sy
 8009388:	f3bf 8f4f 	dsb	sy
 800938c:	60bb      	str	r3, [r7, #8]
}
 800938e:	bf00      	nop
 8009390:	bf00      	nop
 8009392:	e7fd      	b.n	8009390 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009398:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	69fa      	ldr	r2, [r7, #28]
 800939e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	db04      	blt.n	80093b2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	6959      	ldr	r1, [r3, #20]
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	4613      	mov	r3, r2
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	4413      	add	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4a13      	ldr	r2, [pc, #76]	@ (8009410 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80093c2:	4413      	add	r3, r2
 80093c4:	4299      	cmp	r1, r3
 80093c6:	d11c      	bne.n	8009402 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	3304      	adds	r3, #4
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fd fffb 	bl	80073c8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009414 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d903      	bls.n	80093e6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e2:	4a0c      	ldr	r2, [pc, #48]	@ (8009414 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80093e4:	6013      	str	r3, [r2, #0]
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093ea:	4613      	mov	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4413      	add	r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4a07      	ldr	r2, [pc, #28]	@ (8009410 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80093f4:	441a      	add	r2, r3
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	3304      	adds	r3, #4
 80093fa:	4619      	mov	r1, r3
 80093fc:	4610      	mov	r0, r2
 80093fe:	f7fd ff86 	bl	800730e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009402:	bf00      	nop
 8009404:	3720      	adds	r7, #32
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	20000cf4 	.word	0x20000cf4
 8009410:	20000cf8 	.word	0x20000cf8
 8009414:	200011d0 	.word	0x200011d0

08009418 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009418:	b480      	push	{r7}
 800941a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800941c:	4b07      	ldr	r3, [pc, #28]	@ (800943c <pvTaskIncrementMutexHeldCount+0x24>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d004      	beq.n	800942e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009424:	4b05      	ldr	r3, [pc, #20]	@ (800943c <pvTaskIncrementMutexHeldCount+0x24>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800942a:	3201      	adds	r2, #1
 800942c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800942e:	4b03      	ldr	r3, [pc, #12]	@ (800943c <pvTaskIncrementMutexHeldCount+0x24>)
 8009430:	681b      	ldr	r3, [r3, #0]
	}
 8009432:	4618      	mov	r0, r3
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr
 800943c:	20000cf4 	.word	0x20000cf4

08009440 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800944a:	4b21      	ldr	r3, [pc, #132]	@ (80094d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009450:	4b20      	ldr	r3, [pc, #128]	@ (80094d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	3304      	adds	r3, #4
 8009456:	4618      	mov	r0, r3
 8009458:	f7fd ffb6 	bl	80073c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009462:	d10a      	bne.n	800947a <prvAddCurrentTaskToDelayedList+0x3a>
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d007      	beq.n	800947a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800946a:	4b1a      	ldr	r3, [pc, #104]	@ (80094d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	3304      	adds	r3, #4
 8009470:	4619      	mov	r1, r3
 8009472:	4819      	ldr	r0, [pc, #100]	@ (80094d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009474:	f7fd ff4b 	bl	800730e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009478:	e026      	b.n	80094c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4413      	add	r3, r2
 8009480:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009482:	4b14      	ldr	r3, [pc, #80]	@ (80094d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	429a      	cmp	r2, r3
 8009490:	d209      	bcs.n	80094a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009492:	4b12      	ldr	r3, [pc, #72]	@ (80094dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	4b0f      	ldr	r3, [pc, #60]	@ (80094d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	3304      	adds	r3, #4
 800949c:	4619      	mov	r1, r3
 800949e:	4610      	mov	r0, r2
 80094a0:	f7fd ff59 	bl	8007356 <vListInsert>
}
 80094a4:	e010      	b.n	80094c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094a6:	4b0e      	ldr	r3, [pc, #56]	@ (80094e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	4b0a      	ldr	r3, [pc, #40]	@ (80094d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	3304      	adds	r3, #4
 80094b0:	4619      	mov	r1, r3
 80094b2:	4610      	mov	r0, r2
 80094b4:	f7fd ff4f 	bl	8007356 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80094b8:	4b0a      	ldr	r3, [pc, #40]	@ (80094e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d202      	bcs.n	80094c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80094c2:	4a08      	ldr	r2, [pc, #32]	@ (80094e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	6013      	str	r3, [r2, #0]
}
 80094c8:	bf00      	nop
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	200011cc 	.word	0x200011cc
 80094d4:	20000cf4 	.word	0x20000cf4
 80094d8:	200011b4 	.word	0x200011b4
 80094dc:	20001184 	.word	0x20001184
 80094e0:	20001180 	.word	0x20001180
 80094e4:	200011e8 	.word	0x200011e8

080094e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b08a      	sub	sp, #40	@ 0x28
 80094ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80094ee:	2300      	movs	r3, #0
 80094f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80094f2:	f000 fb13 	bl	8009b1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80094f6:	4b1d      	ldr	r3, [pc, #116]	@ (800956c <xTimerCreateTimerTask+0x84>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d021      	beq.n	8009542 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80094fe:	2300      	movs	r3, #0
 8009500:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009502:	2300      	movs	r3, #0
 8009504:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009506:	1d3a      	adds	r2, r7, #4
 8009508:	f107 0108 	add.w	r1, r7, #8
 800950c:	f107 030c 	add.w	r3, r7, #12
 8009510:	4618      	mov	r0, r3
 8009512:	f7fd feb5 	bl	8007280 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009516:	6879      	ldr	r1, [r7, #4]
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	9202      	str	r2, [sp, #8]
 800951e:	9301      	str	r3, [sp, #4]
 8009520:	2302      	movs	r3, #2
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	2300      	movs	r3, #0
 8009526:	460a      	mov	r2, r1
 8009528:	4911      	ldr	r1, [pc, #68]	@ (8009570 <xTimerCreateTimerTask+0x88>)
 800952a:	4812      	ldr	r0, [pc, #72]	@ (8009574 <xTimerCreateTimerTask+0x8c>)
 800952c:	f7fe ffa2 	bl	8008474 <xTaskCreateStatic>
 8009530:	4603      	mov	r3, r0
 8009532:	4a11      	ldr	r2, [pc, #68]	@ (8009578 <xTimerCreateTimerTask+0x90>)
 8009534:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009536:	4b10      	ldr	r3, [pc, #64]	@ (8009578 <xTimerCreateTimerTask+0x90>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800953e:	2301      	movs	r3, #1
 8009540:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d10b      	bne.n	8009560 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800954c:	f383 8811 	msr	BASEPRI, r3
 8009550:	f3bf 8f6f 	isb	sy
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	613b      	str	r3, [r7, #16]
}
 800955a:	bf00      	nop
 800955c:	bf00      	nop
 800955e:	e7fd      	b.n	800955c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009560:	697b      	ldr	r3, [r7, #20]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3718      	adds	r7, #24
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	20001224 	.word	0x20001224
 8009570:	0800ae70 	.word	0x0800ae70
 8009574:	080096b5 	.word	0x080096b5
 8009578:	20001228 	.word	0x20001228

0800957c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b08a      	sub	sp, #40	@ 0x28
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
 8009588:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800958a:	2300      	movs	r3, #0
 800958c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10b      	bne.n	80095ac <xTimerGenericCommand+0x30>
	__asm volatile
 8009594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	623b      	str	r3, [r7, #32]
}
 80095a6:	bf00      	nop
 80095a8:	bf00      	nop
 80095aa:	e7fd      	b.n	80095a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80095ac:	4b19      	ldr	r3, [pc, #100]	@ (8009614 <xTimerGenericCommand+0x98>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d02a      	beq.n	800960a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	2b05      	cmp	r3, #5
 80095c4:	dc18      	bgt.n	80095f8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095c6:	f7ff fdad 	bl	8009124 <xTaskGetSchedulerState>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d109      	bne.n	80095e4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095d0:	4b10      	ldr	r3, [pc, #64]	@ (8009614 <xTimerGenericCommand+0x98>)
 80095d2:	6818      	ldr	r0, [r3, #0]
 80095d4:	f107 0110 	add.w	r1, r7, #16
 80095d8:	2300      	movs	r3, #0
 80095da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095dc:	f7fe f8d2 	bl	8007784 <xQueueGenericSend>
 80095e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80095e2:	e012      	b.n	800960a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80095e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009614 <xTimerGenericCommand+0x98>)
 80095e6:	6818      	ldr	r0, [r3, #0]
 80095e8:	f107 0110 	add.w	r1, r7, #16
 80095ec:	2300      	movs	r3, #0
 80095ee:	2200      	movs	r2, #0
 80095f0:	f7fe f8c8 	bl	8007784 <xQueueGenericSend>
 80095f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80095f6:	e008      	b.n	800960a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80095f8:	4b06      	ldr	r3, [pc, #24]	@ (8009614 <xTimerGenericCommand+0x98>)
 80095fa:	6818      	ldr	r0, [r3, #0]
 80095fc:	f107 0110 	add.w	r1, r7, #16
 8009600:	2300      	movs	r3, #0
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	f7fe f9c0 	bl	8007988 <xQueueGenericSendFromISR>
 8009608:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800960a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800960c:	4618      	mov	r0, r3
 800960e:	3728      	adds	r7, #40	@ 0x28
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	20001224 	.word	0x20001224

08009618 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b088      	sub	sp, #32
 800961c:	af02      	add	r7, sp, #8
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009622:	4b23      	ldr	r3, [pc, #140]	@ (80096b0 <prvProcessExpiredTimer+0x98>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	3304      	adds	r3, #4
 8009630:	4618      	mov	r0, r3
 8009632:	f7fd fec9 	bl	80073c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800963c:	f003 0304 	and.w	r3, r3, #4
 8009640:	2b00      	cmp	r3, #0
 8009642:	d023      	beq.n	800968c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	699a      	ldr	r2, [r3, #24]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	18d1      	adds	r1, r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	683a      	ldr	r2, [r7, #0]
 8009650:	6978      	ldr	r0, [r7, #20]
 8009652:	f000 f8d5 	bl	8009800 <prvInsertTimerInActiveList>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d020      	beq.n	800969e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800965c:	2300      	movs	r3, #0
 800965e:	9300      	str	r3, [sp, #0]
 8009660:	2300      	movs	r3, #0
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	2100      	movs	r1, #0
 8009666:	6978      	ldr	r0, [r7, #20]
 8009668:	f7ff ff88 	bl	800957c <xTimerGenericCommand>
 800966c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d114      	bne.n	800969e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	60fb      	str	r3, [r7, #12]
}
 8009686:	bf00      	nop
 8009688:	bf00      	nop
 800968a:	e7fd      	b.n	8009688 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009692:	f023 0301 	bic.w	r3, r3, #1
 8009696:	b2da      	uxtb	r2, r3
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	6a1b      	ldr	r3, [r3, #32]
 80096a2:	6978      	ldr	r0, [r7, #20]
 80096a4:	4798      	blx	r3
}
 80096a6:	bf00      	nop
 80096a8:	3718      	adds	r7, #24
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	2000121c 	.word	0x2000121c

080096b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096bc:	f107 0308 	add.w	r3, r7, #8
 80096c0:	4618      	mov	r0, r3
 80096c2:	f000 f859 	bl	8009778 <prvGetNextExpireTime>
 80096c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	4619      	mov	r1, r3
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f000 f805 	bl	80096dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80096d2:	f000 f8d7 	bl	8009884 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096d6:	bf00      	nop
 80096d8:	e7f0      	b.n	80096bc <prvTimerTask+0x8>
	...

080096dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80096e6:	f7ff f929 	bl	800893c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096ea:	f107 0308 	add.w	r3, r7, #8
 80096ee:	4618      	mov	r0, r3
 80096f0:	f000 f866 	bl	80097c0 <prvSampleTimeNow>
 80096f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d130      	bne.n	800975e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d10a      	bne.n	8009718 <prvProcessTimerOrBlockTask+0x3c>
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	429a      	cmp	r2, r3
 8009708:	d806      	bhi.n	8009718 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800970a:	f7ff f925 	bl	8008958 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800970e:	68f9      	ldr	r1, [r7, #12]
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f7ff ff81 	bl	8009618 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009716:	e024      	b.n	8009762 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d008      	beq.n	8009730 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800971e:	4b13      	ldr	r3, [pc, #76]	@ (800976c <prvProcessTimerOrBlockTask+0x90>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d101      	bne.n	800972c <prvProcessTimerOrBlockTask+0x50>
 8009728:	2301      	movs	r3, #1
 800972a:	e000      	b.n	800972e <prvProcessTimerOrBlockTask+0x52>
 800972c:	2300      	movs	r3, #0
 800972e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009730:	4b0f      	ldr	r3, [pc, #60]	@ (8009770 <prvProcessTimerOrBlockTask+0x94>)
 8009732:	6818      	ldr	r0, [r3, #0]
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	683a      	ldr	r2, [r7, #0]
 800973c:	4619      	mov	r1, r3
 800973e:	f7fe fe65 	bl	800840c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009742:	f7ff f909 	bl	8008958 <xTaskResumeAll>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10a      	bne.n	8009762 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800974c:	4b09      	ldr	r3, [pc, #36]	@ (8009774 <prvProcessTimerOrBlockTask+0x98>)
 800974e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009752:	601a      	str	r2, [r3, #0]
 8009754:	f3bf 8f4f 	dsb	sy
 8009758:	f3bf 8f6f 	isb	sy
}
 800975c:	e001      	b.n	8009762 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800975e:	f7ff f8fb 	bl	8008958 <xTaskResumeAll>
}
 8009762:	bf00      	nop
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	20001220 	.word	0x20001220
 8009770:	20001224 	.word	0x20001224
 8009774:	e000ed04 	.word	0xe000ed04

08009778 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009780:	4b0e      	ldr	r3, [pc, #56]	@ (80097bc <prvGetNextExpireTime+0x44>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <prvGetNextExpireTime+0x16>
 800978a:	2201      	movs	r2, #1
 800978c:	e000      	b.n	8009790 <prvGetNextExpireTime+0x18>
 800978e:	2200      	movs	r2, #0
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d105      	bne.n	80097a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800979c:	4b07      	ldr	r3, [pc, #28]	@ (80097bc <prvGetNextExpireTime+0x44>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	60fb      	str	r3, [r7, #12]
 80097a6:	e001      	b.n	80097ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80097a8:	2300      	movs	r3, #0
 80097aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80097ac:	68fb      	ldr	r3, [r7, #12]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3714      	adds	r7, #20
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	2000121c 	.word	0x2000121c

080097c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80097c8:	f7ff f964 	bl	8008a94 <xTaskGetTickCount>
 80097cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80097ce:	4b0b      	ldr	r3, [pc, #44]	@ (80097fc <prvSampleTimeNow+0x3c>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d205      	bcs.n	80097e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80097d8:	f000 f93a 	bl	8009a50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	601a      	str	r2, [r3, #0]
 80097e2:	e002      	b.n	80097ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80097ea:	4a04      	ldr	r2, [pc, #16]	@ (80097fc <prvSampleTimeNow+0x3c>)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80097f0:	68fb      	ldr	r3, [r7, #12]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	2000122c 	.word	0x2000122c

08009800 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
 800980c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800980e:	2300      	movs	r3, #0
 8009810:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	429a      	cmp	r2, r3
 8009824:	d812      	bhi.n	800984c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	1ad2      	subs	r2, r2, r3
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	429a      	cmp	r2, r3
 8009832:	d302      	bcc.n	800983a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009834:	2301      	movs	r3, #1
 8009836:	617b      	str	r3, [r7, #20]
 8009838:	e01b      	b.n	8009872 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800983a:	4b10      	ldr	r3, [pc, #64]	@ (800987c <prvInsertTimerInActiveList+0x7c>)
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	3304      	adds	r3, #4
 8009842:	4619      	mov	r1, r3
 8009844:	4610      	mov	r0, r2
 8009846:	f7fd fd86 	bl	8007356 <vListInsert>
 800984a:	e012      	b.n	8009872 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	429a      	cmp	r2, r3
 8009852:	d206      	bcs.n	8009862 <prvInsertTimerInActiveList+0x62>
 8009854:	68ba      	ldr	r2, [r7, #8]
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	429a      	cmp	r2, r3
 800985a:	d302      	bcc.n	8009862 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800985c:	2301      	movs	r3, #1
 800985e:	617b      	str	r3, [r7, #20]
 8009860:	e007      	b.n	8009872 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009862:	4b07      	ldr	r3, [pc, #28]	@ (8009880 <prvInsertTimerInActiveList+0x80>)
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	3304      	adds	r3, #4
 800986a:	4619      	mov	r1, r3
 800986c:	4610      	mov	r0, r2
 800986e:	f7fd fd72 	bl	8007356 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009872:	697b      	ldr	r3, [r7, #20]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3718      	adds	r7, #24
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	20001220 	.word	0x20001220
 8009880:	2000121c 	.word	0x2000121c

08009884 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b08e      	sub	sp, #56	@ 0x38
 8009888:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800988a:	e0ce      	b.n	8009a2a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	da19      	bge.n	80098c6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009892:	1d3b      	adds	r3, r7, #4
 8009894:	3304      	adds	r3, #4
 8009896:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800989a:	2b00      	cmp	r3, #0
 800989c:	d10b      	bne.n	80098b6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800989e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a2:	f383 8811 	msr	BASEPRI, r3
 80098a6:	f3bf 8f6f 	isb	sy
 80098aa:	f3bf 8f4f 	dsb	sy
 80098ae:	61fb      	str	r3, [r7, #28]
}
 80098b0:	bf00      	nop
 80098b2:	bf00      	nop
 80098b4:	e7fd      	b.n	80098b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80098b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098bc:	6850      	ldr	r0, [r2, #4]
 80098be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098c0:	6892      	ldr	r2, [r2, #8]
 80098c2:	4611      	mov	r1, r2
 80098c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f2c0 80ae 	blt.w	8009a2a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80098d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d004      	beq.n	80098e4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098dc:	3304      	adds	r3, #4
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fd fd72 	bl	80073c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098e4:	463b      	mov	r3, r7
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7ff ff6a 	bl	80097c0 <prvSampleTimeNow>
 80098ec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2b09      	cmp	r3, #9
 80098f2:	f200 8097 	bhi.w	8009a24 <prvProcessReceivedCommands+0x1a0>
 80098f6:	a201      	add	r2, pc, #4	@ (adr r2, 80098fc <prvProcessReceivedCommands+0x78>)
 80098f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fc:	08009925 	.word	0x08009925
 8009900:	08009925 	.word	0x08009925
 8009904:	08009925 	.word	0x08009925
 8009908:	0800999b 	.word	0x0800999b
 800990c:	080099af 	.word	0x080099af
 8009910:	080099fb 	.word	0x080099fb
 8009914:	08009925 	.word	0x08009925
 8009918:	08009925 	.word	0x08009925
 800991c:	0800999b 	.word	0x0800999b
 8009920:	080099af 	.word	0x080099af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009926:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800992a:	f043 0301 	orr.w	r3, r3, #1
 800992e:	b2da      	uxtb	r2, r3
 8009930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009932:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009936:	68ba      	ldr	r2, [r7, #8]
 8009938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800993a:	699b      	ldr	r3, [r3, #24]
 800993c:	18d1      	adds	r1, r2, r3
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009942:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009944:	f7ff ff5c 	bl	8009800 <prvInsertTimerInActiveList>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d06c      	beq.n	8009a28 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800994e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009954:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009958:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800995c:	f003 0304 	and.w	r3, r3, #4
 8009960:	2b00      	cmp	r3, #0
 8009962:	d061      	beq.n	8009a28 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	441a      	add	r2, r3
 800996c:	2300      	movs	r3, #0
 800996e:	9300      	str	r3, [sp, #0]
 8009970:	2300      	movs	r3, #0
 8009972:	2100      	movs	r1, #0
 8009974:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009976:	f7ff fe01 	bl	800957c <xTimerGenericCommand>
 800997a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800997c:	6a3b      	ldr	r3, [r7, #32]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d152      	bne.n	8009a28 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009986:	f383 8811 	msr	BASEPRI, r3
 800998a:	f3bf 8f6f 	isb	sy
 800998e:	f3bf 8f4f 	dsb	sy
 8009992:	61bb      	str	r3, [r7, #24]
}
 8009994:	bf00      	nop
 8009996:	bf00      	nop
 8009998:	e7fd      	b.n	8009996 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800999a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800999c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099a0:	f023 0301 	bic.w	r3, r3, #1
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80099ac:	e03d      	b.n	8009a2a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099b4:	f043 0301 	orr.w	r3, r3, #1
 80099b8:	b2da      	uxtb	r2, r3
 80099ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80099c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c8:	699b      	ldr	r3, [r3, #24]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10b      	bne.n	80099e6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80099ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d2:	f383 8811 	msr	BASEPRI, r3
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	617b      	str	r3, [r7, #20]
}
 80099e0:	bf00      	nop
 80099e2:	bf00      	nop
 80099e4:	e7fd      	b.n	80099e2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80099e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e8:	699a      	ldr	r2, [r3, #24]
 80099ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ec:	18d1      	adds	r1, r2, r3
 80099ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099f4:	f7ff ff04 	bl	8009800 <prvInsertTimerInActiveList>
					break;
 80099f8:	e017      	b.n	8009a2a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80099fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a00:	f003 0302 	and.w	r3, r3, #2
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d103      	bne.n	8009a10 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009a08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a0a:	f000 fbe5 	bl	800a1d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a0e:	e00c      	b.n	8009a2a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a16:	f023 0301 	bic.w	r3, r3, #1
 8009a1a:	b2da      	uxtb	r2, r3
 8009a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009a22:	e002      	b.n	8009a2a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009a24:	bf00      	nop
 8009a26:	e000      	b.n	8009a2a <prvProcessReceivedCommands+0x1a6>
					break;
 8009a28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a2a:	4b08      	ldr	r3, [pc, #32]	@ (8009a4c <prvProcessReceivedCommands+0x1c8>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	1d39      	adds	r1, r7, #4
 8009a30:	2200      	movs	r2, #0
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7fe f8d6 	bl	8007be4 <xQueueReceive>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f47f af26 	bne.w	800988c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009a40:	bf00      	nop
 8009a42:	bf00      	nop
 8009a44:	3730      	adds	r7, #48	@ 0x30
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	20001224 	.word	0x20001224

08009a50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b088      	sub	sp, #32
 8009a54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a56:	e049      	b.n	8009aec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a58:	4b2e      	ldr	r3, [pc, #184]	@ (8009b14 <prvSwitchTimerLists+0xc4>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a62:	4b2c      	ldr	r3, [pc, #176]	@ (8009b14 <prvSwitchTimerLists+0xc4>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	3304      	adds	r3, #4
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7fd fca9 	bl	80073c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6a1b      	ldr	r3, [r3, #32]
 8009a7a:	68f8      	ldr	r0, [r7, #12]
 8009a7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a84:	f003 0304 	and.w	r3, r3, #4
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d02f      	beq.n	8009aec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	699b      	ldr	r3, [r3, #24]
 8009a90:	693a      	ldr	r2, [r7, #16]
 8009a92:	4413      	add	r3, r2
 8009a94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d90e      	bls.n	8009abc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	68fa      	ldr	r2, [r7, #12]
 8009aa8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8009b14 <prvSwitchTimerLists+0xc4>)
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	3304      	adds	r3, #4
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	4610      	mov	r0, r2
 8009ab6:	f7fd fc4e 	bl	8007356 <vListInsert>
 8009aba:	e017      	b.n	8009aec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009abc:	2300      	movs	r3, #0
 8009abe:	9300      	str	r3, [sp, #0]
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	693a      	ldr	r2, [r7, #16]
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f7ff fd58 	bl	800957c <xTimerGenericCommand>
 8009acc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10b      	bne.n	8009aec <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad8:	f383 8811 	msr	BASEPRI, r3
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	603b      	str	r3, [r7, #0]
}
 8009ae6:	bf00      	nop
 8009ae8:	bf00      	nop
 8009aea:	e7fd      	b.n	8009ae8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009aec:	4b09      	ldr	r3, [pc, #36]	@ (8009b14 <prvSwitchTimerLists+0xc4>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1b0      	bne.n	8009a58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009af6:	4b07      	ldr	r3, [pc, #28]	@ (8009b14 <prvSwitchTimerLists+0xc4>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009afc:	4b06      	ldr	r3, [pc, #24]	@ (8009b18 <prvSwitchTimerLists+0xc8>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a04      	ldr	r2, [pc, #16]	@ (8009b14 <prvSwitchTimerLists+0xc4>)
 8009b02:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b04:	4a04      	ldr	r2, [pc, #16]	@ (8009b18 <prvSwitchTimerLists+0xc8>)
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	6013      	str	r3, [r2, #0]
}
 8009b0a:	bf00      	nop
 8009b0c:	3718      	adds	r7, #24
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	2000121c 	.word	0x2000121c
 8009b18:	20001220 	.word	0x20001220

08009b1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b22:	f000 f969 	bl	8009df8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b26:	4b15      	ldr	r3, [pc, #84]	@ (8009b7c <prvCheckForValidListAndQueue+0x60>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d120      	bne.n	8009b70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b2e:	4814      	ldr	r0, [pc, #80]	@ (8009b80 <prvCheckForValidListAndQueue+0x64>)
 8009b30:	f7fd fbc0 	bl	80072b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b34:	4813      	ldr	r0, [pc, #76]	@ (8009b84 <prvCheckForValidListAndQueue+0x68>)
 8009b36:	f7fd fbbd 	bl	80072b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b3a:	4b13      	ldr	r3, [pc, #76]	@ (8009b88 <prvCheckForValidListAndQueue+0x6c>)
 8009b3c:	4a10      	ldr	r2, [pc, #64]	@ (8009b80 <prvCheckForValidListAndQueue+0x64>)
 8009b3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b40:	4b12      	ldr	r3, [pc, #72]	@ (8009b8c <prvCheckForValidListAndQueue+0x70>)
 8009b42:	4a10      	ldr	r2, [pc, #64]	@ (8009b84 <prvCheckForValidListAndQueue+0x68>)
 8009b44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b46:	2300      	movs	r3, #0
 8009b48:	9300      	str	r3, [sp, #0]
 8009b4a:	4b11      	ldr	r3, [pc, #68]	@ (8009b90 <prvCheckForValidListAndQueue+0x74>)
 8009b4c:	4a11      	ldr	r2, [pc, #68]	@ (8009b94 <prvCheckForValidListAndQueue+0x78>)
 8009b4e:	2110      	movs	r1, #16
 8009b50:	200a      	movs	r0, #10
 8009b52:	f7fd fccd 	bl	80074f0 <xQueueGenericCreateStatic>
 8009b56:	4603      	mov	r3, r0
 8009b58:	4a08      	ldr	r2, [pc, #32]	@ (8009b7c <prvCheckForValidListAndQueue+0x60>)
 8009b5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b5c:	4b07      	ldr	r3, [pc, #28]	@ (8009b7c <prvCheckForValidListAndQueue+0x60>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d005      	beq.n	8009b70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b64:	4b05      	ldr	r3, [pc, #20]	@ (8009b7c <prvCheckForValidListAndQueue+0x60>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	490b      	ldr	r1, [pc, #44]	@ (8009b98 <prvCheckForValidListAndQueue+0x7c>)
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fe fbfa 	bl	8008364 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b70:	f000 f974 	bl	8009e5c <vPortExitCritical>
}
 8009b74:	bf00      	nop
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	20001224 	.word	0x20001224
 8009b80:	200011f4 	.word	0x200011f4
 8009b84:	20001208 	.word	0x20001208
 8009b88:	2000121c 	.word	0x2000121c
 8009b8c:	20001220 	.word	0x20001220
 8009b90:	200012d0 	.word	0x200012d0
 8009b94:	20001230 	.word	0x20001230
 8009b98:	0800ae78 	.word	0x0800ae78

08009b9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	3b04      	subs	r3, #4
 8009bac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009bb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	3b04      	subs	r3, #4
 8009bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	f023 0201 	bic.w	r2, r3, #1
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	3b04      	subs	r3, #4
 8009bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009bcc:	4a0c      	ldr	r2, [pc, #48]	@ (8009c00 <pxPortInitialiseStack+0x64>)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	3b14      	subs	r3, #20
 8009bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	3b04      	subs	r3, #4
 8009be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f06f 0202 	mvn.w	r2, #2
 8009bea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	3b20      	subs	r3, #32
 8009bf0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3714      	adds	r7, #20
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr
 8009c00:	08009c05 	.word	0x08009c05

08009c04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c0e:	4b13      	ldr	r3, [pc, #76]	@ (8009c5c <prvTaskExitError+0x58>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c16:	d00b      	beq.n	8009c30 <prvTaskExitError+0x2c>
	__asm volatile
 8009c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1c:	f383 8811 	msr	BASEPRI, r3
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	f3bf 8f4f 	dsb	sy
 8009c28:	60fb      	str	r3, [r7, #12]
}
 8009c2a:	bf00      	nop
 8009c2c:	bf00      	nop
 8009c2e:	e7fd      	b.n	8009c2c <prvTaskExitError+0x28>
	__asm volatile
 8009c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c34:	f383 8811 	msr	BASEPRI, r3
 8009c38:	f3bf 8f6f 	isb	sy
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	60bb      	str	r3, [r7, #8]
}
 8009c42:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c44:	bf00      	nop
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d0fc      	beq.n	8009c46 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c4c:	bf00      	nop
 8009c4e:	bf00      	nop
 8009c50:	3714      	adds	r7, #20
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	20000010 	.word	0x20000010

08009c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c60:	4b07      	ldr	r3, [pc, #28]	@ (8009c80 <pxCurrentTCBConst2>)
 8009c62:	6819      	ldr	r1, [r3, #0]
 8009c64:	6808      	ldr	r0, [r1, #0]
 8009c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c6a:	f380 8809 	msr	PSP, r0
 8009c6e:	f3bf 8f6f 	isb	sy
 8009c72:	f04f 0000 	mov.w	r0, #0
 8009c76:	f380 8811 	msr	BASEPRI, r0
 8009c7a:	4770      	bx	lr
 8009c7c:	f3af 8000 	nop.w

08009c80 <pxCurrentTCBConst2>:
 8009c80:	20000cf4 	.word	0x20000cf4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c84:	bf00      	nop
 8009c86:	bf00      	nop

08009c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c88:	4808      	ldr	r0, [pc, #32]	@ (8009cac <prvPortStartFirstTask+0x24>)
 8009c8a:	6800      	ldr	r0, [r0, #0]
 8009c8c:	6800      	ldr	r0, [r0, #0]
 8009c8e:	f380 8808 	msr	MSP, r0
 8009c92:	f04f 0000 	mov.w	r0, #0
 8009c96:	f380 8814 	msr	CONTROL, r0
 8009c9a:	b662      	cpsie	i
 8009c9c:	b661      	cpsie	f
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	f3bf 8f6f 	isb	sy
 8009ca6:	df00      	svc	0
 8009ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009caa:	bf00      	nop
 8009cac:	e000ed08 	.word	0xe000ed08

08009cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009cb6:	4b47      	ldr	r3, [pc, #284]	@ (8009dd4 <xPortStartScheduler+0x124>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a47      	ldr	r2, [pc, #284]	@ (8009dd8 <xPortStartScheduler+0x128>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d10b      	bne.n	8009cd8 <xPortStartScheduler+0x28>
	__asm volatile
 8009cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	613b      	str	r3, [r7, #16]
}
 8009cd2:	bf00      	nop
 8009cd4:	bf00      	nop
 8009cd6:	e7fd      	b.n	8009cd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8009dd4 <xPortStartScheduler+0x124>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a3f      	ldr	r2, [pc, #252]	@ (8009ddc <xPortStartScheduler+0x12c>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d10b      	bne.n	8009cfa <xPortStartScheduler+0x4a>
	__asm volatile
 8009ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce6:	f383 8811 	msr	BASEPRI, r3
 8009cea:	f3bf 8f6f 	isb	sy
 8009cee:	f3bf 8f4f 	dsb	sy
 8009cf2:	60fb      	str	r3, [r7, #12]
}
 8009cf4:	bf00      	nop
 8009cf6:	bf00      	nop
 8009cf8:	e7fd      	b.n	8009cf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009cfa:	4b39      	ldr	r3, [pc, #228]	@ (8009de0 <xPortStartScheduler+0x130>)
 8009cfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	22ff      	movs	r2, #255	@ 0xff
 8009d0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d14:	78fb      	ldrb	r3, [r7, #3]
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009d1c:	b2da      	uxtb	r2, r3
 8009d1e:	4b31      	ldr	r3, [pc, #196]	@ (8009de4 <xPortStartScheduler+0x134>)
 8009d20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d22:	4b31      	ldr	r3, [pc, #196]	@ (8009de8 <xPortStartScheduler+0x138>)
 8009d24:	2207      	movs	r2, #7
 8009d26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d28:	e009      	b.n	8009d3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8009de8 <xPortStartScheduler+0x138>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	4a2d      	ldr	r2, [pc, #180]	@ (8009de8 <xPortStartScheduler+0x138>)
 8009d32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d34:	78fb      	ldrb	r3, [r7, #3]
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d3e:	78fb      	ldrb	r3, [r7, #3]
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d46:	2b80      	cmp	r3, #128	@ 0x80
 8009d48:	d0ef      	beq.n	8009d2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d4a:	4b27      	ldr	r3, [pc, #156]	@ (8009de8 <xPortStartScheduler+0x138>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f1c3 0307 	rsb	r3, r3, #7
 8009d52:	2b04      	cmp	r3, #4
 8009d54:	d00b      	beq.n	8009d6e <xPortStartScheduler+0xbe>
	__asm volatile
 8009d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d5a:	f383 8811 	msr	BASEPRI, r3
 8009d5e:	f3bf 8f6f 	isb	sy
 8009d62:	f3bf 8f4f 	dsb	sy
 8009d66:	60bb      	str	r3, [r7, #8]
}
 8009d68:	bf00      	nop
 8009d6a:	bf00      	nop
 8009d6c:	e7fd      	b.n	8009d6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8009de8 <xPortStartScheduler+0x138>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	021b      	lsls	r3, r3, #8
 8009d74:	4a1c      	ldr	r2, [pc, #112]	@ (8009de8 <xPortStartScheduler+0x138>)
 8009d76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d78:	4b1b      	ldr	r3, [pc, #108]	@ (8009de8 <xPortStartScheduler+0x138>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009d80:	4a19      	ldr	r2, [pc, #100]	@ (8009de8 <xPortStartScheduler+0x138>)
 8009d82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	b2da      	uxtb	r2, r3
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d8c:	4b17      	ldr	r3, [pc, #92]	@ (8009dec <xPortStartScheduler+0x13c>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a16      	ldr	r2, [pc, #88]	@ (8009dec <xPortStartScheduler+0x13c>)
 8009d92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009d96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d98:	4b14      	ldr	r3, [pc, #80]	@ (8009dec <xPortStartScheduler+0x13c>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a13      	ldr	r2, [pc, #76]	@ (8009dec <xPortStartScheduler+0x13c>)
 8009d9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009da2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009da4:	f000 f8da 	bl	8009f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009da8:	4b11      	ldr	r3, [pc, #68]	@ (8009df0 <xPortStartScheduler+0x140>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009dae:	f000 f8f9 	bl	8009fa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009db2:	4b10      	ldr	r3, [pc, #64]	@ (8009df4 <xPortStartScheduler+0x144>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a0f      	ldr	r2, [pc, #60]	@ (8009df4 <xPortStartScheduler+0x144>)
 8009db8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009dbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009dbe:	f7ff ff63 	bl	8009c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009dc2:	f7fe ff31 	bl	8008c28 <vTaskSwitchContext>
	prvTaskExitError();
 8009dc6:	f7ff ff1d 	bl	8009c04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3718      	adds	r7, #24
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	e000ed00 	.word	0xe000ed00
 8009dd8:	410fc271 	.word	0x410fc271
 8009ddc:	410fc270 	.word	0x410fc270
 8009de0:	e000e400 	.word	0xe000e400
 8009de4:	20001320 	.word	0x20001320
 8009de8:	20001324 	.word	0x20001324
 8009dec:	e000ed20 	.word	0xe000ed20
 8009df0:	20000010 	.word	0x20000010
 8009df4:	e000ef34 	.word	0xe000ef34

08009df8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	607b      	str	r3, [r7, #4]
}
 8009e10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e12:	4b10      	ldr	r3, [pc, #64]	@ (8009e54 <vPortEnterCritical+0x5c>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	3301      	adds	r3, #1
 8009e18:	4a0e      	ldr	r2, [pc, #56]	@ (8009e54 <vPortEnterCritical+0x5c>)
 8009e1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8009e54 <vPortEnterCritical+0x5c>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d110      	bne.n	8009e46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e24:	4b0c      	ldr	r3, [pc, #48]	@ (8009e58 <vPortEnterCritical+0x60>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00b      	beq.n	8009e46 <vPortEnterCritical+0x4e>
	__asm volatile
 8009e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e32:	f383 8811 	msr	BASEPRI, r3
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	603b      	str	r3, [r7, #0]
}
 8009e40:	bf00      	nop
 8009e42:	bf00      	nop
 8009e44:	e7fd      	b.n	8009e42 <vPortEnterCritical+0x4a>
	}
}
 8009e46:	bf00      	nop
 8009e48:	370c      	adds	r7, #12
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	20000010 	.word	0x20000010
 8009e58:	e000ed04 	.word	0xe000ed04

08009e5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e62:	4b12      	ldr	r3, [pc, #72]	@ (8009eac <vPortExitCritical+0x50>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10b      	bne.n	8009e82 <vPortExitCritical+0x26>
	__asm volatile
 8009e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e6e:	f383 8811 	msr	BASEPRI, r3
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	607b      	str	r3, [r7, #4]
}
 8009e7c:	bf00      	nop
 8009e7e:	bf00      	nop
 8009e80:	e7fd      	b.n	8009e7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e82:	4b0a      	ldr	r3, [pc, #40]	@ (8009eac <vPortExitCritical+0x50>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	3b01      	subs	r3, #1
 8009e88:	4a08      	ldr	r2, [pc, #32]	@ (8009eac <vPortExitCritical+0x50>)
 8009e8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e8c:	4b07      	ldr	r3, [pc, #28]	@ (8009eac <vPortExitCritical+0x50>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d105      	bne.n	8009ea0 <vPortExitCritical+0x44>
 8009e94:	2300      	movs	r3, #0
 8009e96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	f383 8811 	msr	BASEPRI, r3
}
 8009e9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ea0:	bf00      	nop
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	20000010 	.word	0x20000010

08009eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009eb0:	f3ef 8009 	mrs	r0, PSP
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	4b15      	ldr	r3, [pc, #84]	@ (8009f10 <pxCurrentTCBConst>)
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	f01e 0f10 	tst.w	lr, #16
 8009ec0:	bf08      	it	eq
 8009ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eca:	6010      	str	r0, [r2, #0]
 8009ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ed0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009ed4:	f380 8811 	msr	BASEPRI, r0
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	f3bf 8f6f 	isb	sy
 8009ee0:	f7fe fea2 	bl	8008c28 <vTaskSwitchContext>
 8009ee4:	f04f 0000 	mov.w	r0, #0
 8009ee8:	f380 8811 	msr	BASEPRI, r0
 8009eec:	bc09      	pop	{r0, r3}
 8009eee:	6819      	ldr	r1, [r3, #0]
 8009ef0:	6808      	ldr	r0, [r1, #0]
 8009ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef6:	f01e 0f10 	tst.w	lr, #16
 8009efa:	bf08      	it	eq
 8009efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f00:	f380 8809 	msr	PSP, r0
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	f3af 8000 	nop.w

08009f10 <pxCurrentTCBConst>:
 8009f10:	20000cf4 	.word	0x20000cf4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f14:	bf00      	nop
 8009f16:	bf00      	nop

08009f18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f22:	f383 8811 	msr	BASEPRI, r3
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	607b      	str	r3, [r7, #4]
}
 8009f30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f32:	f7fe fdbf 	bl	8008ab4 <xTaskIncrementTick>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d003      	beq.n	8009f44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f3c:	4b06      	ldr	r3, [pc, #24]	@ (8009f58 <xPortSysTickHandler+0x40>)
 8009f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	2300      	movs	r3, #0
 8009f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	f383 8811 	msr	BASEPRI, r3
}
 8009f4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f50:	bf00      	nop
 8009f52:	3708      	adds	r7, #8
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	e000ed04 	.word	0xe000ed04

08009f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f60:	4b0b      	ldr	r3, [pc, #44]	@ (8009f90 <vPortSetupTimerInterrupt+0x34>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f66:	4b0b      	ldr	r3, [pc, #44]	@ (8009f94 <vPortSetupTimerInterrupt+0x38>)
 8009f68:	2200      	movs	r2, #0
 8009f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f98 <vPortSetupTimerInterrupt+0x3c>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a0a      	ldr	r2, [pc, #40]	@ (8009f9c <vPortSetupTimerInterrupt+0x40>)
 8009f72:	fba2 2303 	umull	r2, r3, r2, r3
 8009f76:	099b      	lsrs	r3, r3, #6
 8009f78:	4a09      	ldr	r2, [pc, #36]	@ (8009fa0 <vPortSetupTimerInterrupt+0x44>)
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f7e:	4b04      	ldr	r3, [pc, #16]	@ (8009f90 <vPortSetupTimerInterrupt+0x34>)
 8009f80:	2207      	movs	r2, #7
 8009f82:	601a      	str	r2, [r3, #0]
}
 8009f84:	bf00      	nop
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	e000e010 	.word	0xe000e010
 8009f94:	e000e018 	.word	0xe000e018
 8009f98:	20000004 	.word	0x20000004
 8009f9c:	10624dd3 	.word	0x10624dd3
 8009fa0:	e000e014 	.word	0xe000e014

08009fa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009fb4 <vPortEnableVFP+0x10>
 8009fa8:	6801      	ldr	r1, [r0, #0]
 8009faa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009fae:	6001      	str	r1, [r0, #0]
 8009fb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009fb2:	bf00      	nop
 8009fb4:	e000ed88 	.word	0xe000ed88

08009fb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009fb8:	b480      	push	{r7}
 8009fba:	b085      	sub	sp, #20
 8009fbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009fbe:	f3ef 8305 	mrs	r3, IPSR
 8009fc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2b0f      	cmp	r3, #15
 8009fc8:	d915      	bls.n	8009ff6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009fca:	4a18      	ldr	r2, [pc, #96]	@ (800a02c <vPortValidateInterruptPriority+0x74>)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	4413      	add	r3, r2
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009fd4:	4b16      	ldr	r3, [pc, #88]	@ (800a030 <vPortValidateInterruptPriority+0x78>)
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	7afa      	ldrb	r2, [r7, #11]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d20b      	bcs.n	8009ff6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe2:	f383 8811 	msr	BASEPRI, r3
 8009fe6:	f3bf 8f6f 	isb	sy
 8009fea:	f3bf 8f4f 	dsb	sy
 8009fee:	607b      	str	r3, [r7, #4]
}
 8009ff0:	bf00      	nop
 8009ff2:	bf00      	nop
 8009ff4:	e7fd      	b.n	8009ff2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ff6:	4b0f      	ldr	r3, [pc, #60]	@ (800a034 <vPortValidateInterruptPriority+0x7c>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009ffe:	4b0e      	ldr	r3, [pc, #56]	@ (800a038 <vPortValidateInterruptPriority+0x80>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	429a      	cmp	r2, r3
 800a004:	d90b      	bls.n	800a01e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a00a:	f383 8811 	msr	BASEPRI, r3
 800a00e:	f3bf 8f6f 	isb	sy
 800a012:	f3bf 8f4f 	dsb	sy
 800a016:	603b      	str	r3, [r7, #0]
}
 800a018:	bf00      	nop
 800a01a:	bf00      	nop
 800a01c:	e7fd      	b.n	800a01a <vPortValidateInterruptPriority+0x62>
	}
 800a01e:	bf00      	nop
 800a020:	3714      	adds	r7, #20
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop
 800a02c:	e000e3f0 	.word	0xe000e3f0
 800a030:	20001320 	.word	0x20001320
 800a034:	e000ed0c 	.word	0xe000ed0c
 800a038:	20001324 	.word	0x20001324

0800a03c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b08a      	sub	sp, #40	@ 0x28
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a044:	2300      	movs	r3, #0
 800a046:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a048:	f7fe fc78 	bl	800893c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a04c:	4b5c      	ldr	r3, [pc, #368]	@ (800a1c0 <pvPortMalloc+0x184>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d101      	bne.n	800a058 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a054:	f000 f924 	bl	800a2a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a058:	4b5a      	ldr	r3, [pc, #360]	@ (800a1c4 <pvPortMalloc+0x188>)
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	4013      	ands	r3, r2
 800a060:	2b00      	cmp	r3, #0
 800a062:	f040 8095 	bne.w	800a190 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d01e      	beq.n	800a0aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a06c:	2208      	movs	r2, #8
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4413      	add	r3, r2
 800a072:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f003 0307 	and.w	r3, r3, #7
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d015      	beq.n	800a0aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f023 0307 	bic.w	r3, r3, #7
 800a084:	3308      	adds	r3, #8
 800a086:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f003 0307 	and.w	r3, r3, #7
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00b      	beq.n	800a0aa <pvPortMalloc+0x6e>
	__asm volatile
 800a092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a096:	f383 8811 	msr	BASEPRI, r3
 800a09a:	f3bf 8f6f 	isb	sy
 800a09e:	f3bf 8f4f 	dsb	sy
 800a0a2:	617b      	str	r3, [r7, #20]
}
 800a0a4:	bf00      	nop
 800a0a6:	bf00      	nop
 800a0a8:	e7fd      	b.n	800a0a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d06f      	beq.n	800a190 <pvPortMalloc+0x154>
 800a0b0:	4b45      	ldr	r3, [pc, #276]	@ (800a1c8 <pvPortMalloc+0x18c>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d86a      	bhi.n	800a190 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a0ba:	4b44      	ldr	r3, [pc, #272]	@ (800a1cc <pvPortMalloc+0x190>)
 800a0bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a0be:	4b43      	ldr	r3, [pc, #268]	@ (800a1cc <pvPortMalloc+0x190>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0c4:	e004      	b.n	800a0d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d903      	bls.n	800a0e2 <pvPortMalloc+0xa6>
 800a0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1f1      	bne.n	800a0c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a0e2:	4b37      	ldr	r3, [pc, #220]	@ (800a1c0 <pvPortMalloc+0x184>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d051      	beq.n	800a190 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a0ec:	6a3b      	ldr	r3, [r7, #32]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2208      	movs	r2, #8
 800a0f2:	4413      	add	r3, r2
 800a0f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	6a3b      	ldr	r3, [r7, #32]
 800a0fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	1ad2      	subs	r2, r2, r3
 800a106:	2308      	movs	r3, #8
 800a108:	005b      	lsls	r3, r3, #1
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d920      	bls.n	800a150 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a10e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4413      	add	r3, r2
 800a114:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	f003 0307 	and.w	r3, r3, #7
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00b      	beq.n	800a138 <pvPortMalloc+0xfc>
	__asm volatile
 800a120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a124:	f383 8811 	msr	BASEPRI, r3
 800a128:	f3bf 8f6f 	isb	sy
 800a12c:	f3bf 8f4f 	dsb	sy
 800a130:	613b      	str	r3, [r7, #16]
}
 800a132:	bf00      	nop
 800a134:	bf00      	nop
 800a136:	e7fd      	b.n	800a134 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a13a:	685a      	ldr	r2, [r3, #4]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	1ad2      	subs	r2, r2, r3
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a14a:	69b8      	ldr	r0, [r7, #24]
 800a14c:	f000 f90a 	bl	800a364 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a150:	4b1d      	ldr	r3, [pc, #116]	@ (800a1c8 <pvPortMalloc+0x18c>)
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	4a1b      	ldr	r2, [pc, #108]	@ (800a1c8 <pvPortMalloc+0x18c>)
 800a15c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a15e:	4b1a      	ldr	r3, [pc, #104]	@ (800a1c8 <pvPortMalloc+0x18c>)
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	4b1b      	ldr	r3, [pc, #108]	@ (800a1d0 <pvPortMalloc+0x194>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	429a      	cmp	r2, r3
 800a168:	d203      	bcs.n	800a172 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a16a:	4b17      	ldr	r3, [pc, #92]	@ (800a1c8 <pvPortMalloc+0x18c>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a18      	ldr	r2, [pc, #96]	@ (800a1d0 <pvPortMalloc+0x194>)
 800a170:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a174:	685a      	ldr	r2, [r3, #4]
 800a176:	4b13      	ldr	r3, [pc, #76]	@ (800a1c4 <pvPortMalloc+0x188>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	431a      	orrs	r2, r3
 800a17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a17e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a182:	2200      	movs	r2, #0
 800a184:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a186:	4b13      	ldr	r3, [pc, #76]	@ (800a1d4 <pvPortMalloc+0x198>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	3301      	adds	r3, #1
 800a18c:	4a11      	ldr	r2, [pc, #68]	@ (800a1d4 <pvPortMalloc+0x198>)
 800a18e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a190:	f7fe fbe2 	bl	8008958 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	f003 0307 	and.w	r3, r3, #7
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d00b      	beq.n	800a1b6 <pvPortMalloc+0x17a>
	__asm volatile
 800a19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a2:	f383 8811 	msr	BASEPRI, r3
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	60fb      	str	r3, [r7, #12]
}
 800a1b0:	bf00      	nop
 800a1b2:	bf00      	nop
 800a1b4:	e7fd      	b.n	800a1b2 <pvPortMalloc+0x176>
	return pvReturn;
 800a1b6:	69fb      	ldr	r3, [r7, #28]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3728      	adds	r7, #40	@ 0x28
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	20001ee8 	.word	0x20001ee8
 800a1c4:	20001efc 	.word	0x20001efc
 800a1c8:	20001eec 	.word	0x20001eec
 800a1cc:	20001ee0 	.word	0x20001ee0
 800a1d0:	20001ef0 	.word	0x20001ef0
 800a1d4:	20001ef4 	.word	0x20001ef4

0800a1d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d04f      	beq.n	800a28a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a1ea:	2308      	movs	r3, #8
 800a1ec:	425b      	negs	r3, r3
 800a1ee:	697a      	ldr	r2, [r7, #20]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	685a      	ldr	r2, [r3, #4]
 800a1fc:	4b25      	ldr	r3, [pc, #148]	@ (800a294 <vPortFree+0xbc>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4013      	ands	r3, r2
 800a202:	2b00      	cmp	r3, #0
 800a204:	d10b      	bne.n	800a21e <vPortFree+0x46>
	__asm volatile
 800a206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a20a:	f383 8811 	msr	BASEPRI, r3
 800a20e:	f3bf 8f6f 	isb	sy
 800a212:	f3bf 8f4f 	dsb	sy
 800a216:	60fb      	str	r3, [r7, #12]
}
 800a218:	bf00      	nop
 800a21a:	bf00      	nop
 800a21c:	e7fd      	b.n	800a21a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00b      	beq.n	800a23e <vPortFree+0x66>
	__asm volatile
 800a226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a22a:	f383 8811 	msr	BASEPRI, r3
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	60bb      	str	r3, [r7, #8]
}
 800a238:	bf00      	nop
 800a23a:	bf00      	nop
 800a23c:	e7fd      	b.n	800a23a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	685a      	ldr	r2, [r3, #4]
 800a242:	4b14      	ldr	r3, [pc, #80]	@ (800a294 <vPortFree+0xbc>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4013      	ands	r3, r2
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d01e      	beq.n	800a28a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d11a      	bne.n	800a28a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	685a      	ldr	r2, [r3, #4]
 800a258:	4b0e      	ldr	r3, [pc, #56]	@ (800a294 <vPortFree+0xbc>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	43db      	mvns	r3, r3
 800a25e:	401a      	ands	r2, r3
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a264:	f7fe fb6a 	bl	800893c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	685a      	ldr	r2, [r3, #4]
 800a26c:	4b0a      	ldr	r3, [pc, #40]	@ (800a298 <vPortFree+0xc0>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4413      	add	r3, r2
 800a272:	4a09      	ldr	r2, [pc, #36]	@ (800a298 <vPortFree+0xc0>)
 800a274:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a276:	6938      	ldr	r0, [r7, #16]
 800a278:	f000 f874 	bl	800a364 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a27c:	4b07      	ldr	r3, [pc, #28]	@ (800a29c <vPortFree+0xc4>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	3301      	adds	r3, #1
 800a282:	4a06      	ldr	r2, [pc, #24]	@ (800a29c <vPortFree+0xc4>)
 800a284:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a286:	f7fe fb67 	bl	8008958 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a28a:	bf00      	nop
 800a28c:	3718      	adds	r7, #24
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	20001efc 	.word	0x20001efc
 800a298:	20001eec 	.word	0x20001eec
 800a29c:	20001ef8 	.word	0x20001ef8

0800a2a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2a6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800a2aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2ac:	4b27      	ldr	r3, [pc, #156]	@ (800a34c <prvHeapInit+0xac>)
 800a2ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f003 0307 	and.w	r3, r3, #7
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00c      	beq.n	800a2d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	3307      	adds	r3, #7
 800a2be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f023 0307 	bic.w	r3, r3, #7
 800a2c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a2c8:	68ba      	ldr	r2, [r7, #8]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	1ad3      	subs	r3, r2, r3
 800a2ce:	4a1f      	ldr	r2, [pc, #124]	@ (800a34c <prvHeapInit+0xac>)
 800a2d0:	4413      	add	r3, r2
 800a2d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a350 <prvHeapInit+0xb0>)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a2de:	4b1c      	ldr	r3, [pc, #112]	@ (800a350 <prvHeapInit+0xb0>)
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	68ba      	ldr	r2, [r7, #8]
 800a2e8:	4413      	add	r3, r2
 800a2ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a2ec:	2208      	movs	r2, #8
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	1a9b      	subs	r3, r3, r2
 800a2f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f023 0307 	bic.w	r3, r3, #7
 800a2fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	4a15      	ldr	r2, [pc, #84]	@ (800a354 <prvHeapInit+0xb4>)
 800a300:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a302:	4b14      	ldr	r3, [pc, #80]	@ (800a354 <prvHeapInit+0xb4>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2200      	movs	r2, #0
 800a308:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a30a:	4b12      	ldr	r3, [pc, #72]	@ (800a354 <prvHeapInit+0xb4>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2200      	movs	r2, #0
 800a310:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	1ad2      	subs	r2, r2, r3
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a320:	4b0c      	ldr	r3, [pc, #48]	@ (800a354 <prvHeapInit+0xb4>)
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	4a0a      	ldr	r2, [pc, #40]	@ (800a358 <prvHeapInit+0xb8>)
 800a32e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	4a09      	ldr	r2, [pc, #36]	@ (800a35c <prvHeapInit+0xbc>)
 800a336:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a338:	4b09      	ldr	r3, [pc, #36]	@ (800a360 <prvHeapInit+0xc0>)
 800a33a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a33e:	601a      	str	r2, [r3, #0]
}
 800a340:	bf00      	nop
 800a342:	3714      	adds	r7, #20
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	20001328 	.word	0x20001328
 800a350:	20001ee0 	.word	0x20001ee0
 800a354:	20001ee8 	.word	0x20001ee8
 800a358:	20001ef0 	.word	0x20001ef0
 800a35c:	20001eec 	.word	0x20001eec
 800a360:	20001efc 	.word	0x20001efc

0800a364 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a36c:	4b28      	ldr	r3, [pc, #160]	@ (800a410 <prvInsertBlockIntoFreeList+0xac>)
 800a36e:	60fb      	str	r3, [r7, #12]
 800a370:	e002      	b.n	800a378 <prvInsertBlockIntoFreeList+0x14>
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	60fb      	str	r3, [r7, #12]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d8f7      	bhi.n	800a372 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	68ba      	ldr	r2, [r7, #8]
 800a38c:	4413      	add	r3, r2
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	429a      	cmp	r2, r3
 800a392:	d108      	bne.n	800a3a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	685a      	ldr	r2, [r3, #4]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	441a      	add	r2, r3
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	441a      	add	r2, r3
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d118      	bne.n	800a3ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	4b15      	ldr	r3, [pc, #84]	@ (800a414 <prvInsertBlockIntoFreeList+0xb0>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d00d      	beq.n	800a3e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	685a      	ldr	r2, [r3, #4]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	441a      	add	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	601a      	str	r2, [r3, #0]
 800a3e0:	e008      	b.n	800a3f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a3e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a414 <prvInsertBlockIntoFreeList+0xb0>)
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	601a      	str	r2, [r3, #0]
 800a3ea:	e003      	b.n	800a3f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d002      	beq.n	800a402 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a402:	bf00      	nop
 800a404:	3714      	adds	r7, #20
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	20001ee0 	.word	0x20001ee0
 800a414:	20001ee8 	.word	0x20001ee8

0800a418 <siprintf>:
 800a418:	b40e      	push	{r1, r2, r3}
 800a41a:	b500      	push	{lr}
 800a41c:	b09c      	sub	sp, #112	@ 0x70
 800a41e:	ab1d      	add	r3, sp, #116	@ 0x74
 800a420:	9002      	str	r0, [sp, #8]
 800a422:	9006      	str	r0, [sp, #24]
 800a424:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a428:	4809      	ldr	r0, [pc, #36]	@ (800a450 <siprintf+0x38>)
 800a42a:	9107      	str	r1, [sp, #28]
 800a42c:	9104      	str	r1, [sp, #16]
 800a42e:	4909      	ldr	r1, [pc, #36]	@ (800a454 <siprintf+0x3c>)
 800a430:	f853 2b04 	ldr.w	r2, [r3], #4
 800a434:	9105      	str	r1, [sp, #20]
 800a436:	6800      	ldr	r0, [r0, #0]
 800a438:	9301      	str	r3, [sp, #4]
 800a43a:	a902      	add	r1, sp, #8
 800a43c:	f000 f9f8 	bl	800a830 <_svfiprintf_r>
 800a440:	9b02      	ldr	r3, [sp, #8]
 800a442:	2200      	movs	r2, #0
 800a444:	701a      	strb	r2, [r3, #0]
 800a446:	b01c      	add	sp, #112	@ 0x70
 800a448:	f85d eb04 	ldr.w	lr, [sp], #4
 800a44c:	b003      	add	sp, #12
 800a44e:	4770      	bx	lr
 800a450:	20000014 	.word	0x20000014
 800a454:	ffff0208 	.word	0xffff0208

0800a458 <memset>:
 800a458:	4402      	add	r2, r0
 800a45a:	4603      	mov	r3, r0
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d100      	bne.n	800a462 <memset+0xa>
 800a460:	4770      	bx	lr
 800a462:	f803 1b01 	strb.w	r1, [r3], #1
 800a466:	e7f9      	b.n	800a45c <memset+0x4>

0800a468 <_reclaim_reent>:
 800a468:	4b29      	ldr	r3, [pc, #164]	@ (800a510 <_reclaim_reent+0xa8>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4283      	cmp	r3, r0
 800a46e:	b570      	push	{r4, r5, r6, lr}
 800a470:	4604      	mov	r4, r0
 800a472:	d04b      	beq.n	800a50c <_reclaim_reent+0xa4>
 800a474:	69c3      	ldr	r3, [r0, #28]
 800a476:	b1ab      	cbz	r3, 800a4a4 <_reclaim_reent+0x3c>
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	b16b      	cbz	r3, 800a498 <_reclaim_reent+0x30>
 800a47c:	2500      	movs	r5, #0
 800a47e:	69e3      	ldr	r3, [r4, #28]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	5959      	ldr	r1, [r3, r5]
 800a484:	2900      	cmp	r1, #0
 800a486:	d13b      	bne.n	800a500 <_reclaim_reent+0x98>
 800a488:	3504      	adds	r5, #4
 800a48a:	2d80      	cmp	r5, #128	@ 0x80
 800a48c:	d1f7      	bne.n	800a47e <_reclaim_reent+0x16>
 800a48e:	69e3      	ldr	r3, [r4, #28]
 800a490:	4620      	mov	r0, r4
 800a492:	68d9      	ldr	r1, [r3, #12]
 800a494:	f000 f878 	bl	800a588 <_free_r>
 800a498:	69e3      	ldr	r3, [r4, #28]
 800a49a:	6819      	ldr	r1, [r3, #0]
 800a49c:	b111      	cbz	r1, 800a4a4 <_reclaim_reent+0x3c>
 800a49e:	4620      	mov	r0, r4
 800a4a0:	f000 f872 	bl	800a588 <_free_r>
 800a4a4:	6961      	ldr	r1, [r4, #20]
 800a4a6:	b111      	cbz	r1, 800a4ae <_reclaim_reent+0x46>
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f000 f86d 	bl	800a588 <_free_r>
 800a4ae:	69e1      	ldr	r1, [r4, #28]
 800a4b0:	b111      	cbz	r1, 800a4b8 <_reclaim_reent+0x50>
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f000 f868 	bl	800a588 <_free_r>
 800a4b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a4ba:	b111      	cbz	r1, 800a4c2 <_reclaim_reent+0x5a>
 800a4bc:	4620      	mov	r0, r4
 800a4be:	f000 f863 	bl	800a588 <_free_r>
 800a4c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4c4:	b111      	cbz	r1, 800a4cc <_reclaim_reent+0x64>
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	f000 f85e 	bl	800a588 <_free_r>
 800a4cc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a4ce:	b111      	cbz	r1, 800a4d6 <_reclaim_reent+0x6e>
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f000 f859 	bl	800a588 <_free_r>
 800a4d6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a4d8:	b111      	cbz	r1, 800a4e0 <_reclaim_reent+0x78>
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f000 f854 	bl	800a588 <_free_r>
 800a4e0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a4e2:	b111      	cbz	r1, 800a4ea <_reclaim_reent+0x82>
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	f000 f84f 	bl	800a588 <_free_r>
 800a4ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a4ec:	b111      	cbz	r1, 800a4f4 <_reclaim_reent+0x8c>
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f000 f84a 	bl	800a588 <_free_r>
 800a4f4:	6a23      	ldr	r3, [r4, #32]
 800a4f6:	b14b      	cbz	r3, 800a50c <_reclaim_reent+0xa4>
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a4fe:	4718      	bx	r3
 800a500:	680e      	ldr	r6, [r1, #0]
 800a502:	4620      	mov	r0, r4
 800a504:	f000 f840 	bl	800a588 <_free_r>
 800a508:	4631      	mov	r1, r6
 800a50a:	e7bb      	b.n	800a484 <_reclaim_reent+0x1c>
 800a50c:	bd70      	pop	{r4, r5, r6, pc}
 800a50e:	bf00      	nop
 800a510:	20000014 	.word	0x20000014

0800a514 <__errno>:
 800a514:	4b01      	ldr	r3, [pc, #4]	@ (800a51c <__errno+0x8>)
 800a516:	6818      	ldr	r0, [r3, #0]
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	20000014 	.word	0x20000014

0800a520 <__libc_init_array>:
 800a520:	b570      	push	{r4, r5, r6, lr}
 800a522:	4d0d      	ldr	r5, [pc, #52]	@ (800a558 <__libc_init_array+0x38>)
 800a524:	4c0d      	ldr	r4, [pc, #52]	@ (800a55c <__libc_init_array+0x3c>)
 800a526:	1b64      	subs	r4, r4, r5
 800a528:	10a4      	asrs	r4, r4, #2
 800a52a:	2600      	movs	r6, #0
 800a52c:	42a6      	cmp	r6, r4
 800a52e:	d109      	bne.n	800a544 <__libc_init_array+0x24>
 800a530:	4d0b      	ldr	r5, [pc, #44]	@ (800a560 <__libc_init_array+0x40>)
 800a532:	4c0c      	ldr	r4, [pc, #48]	@ (800a564 <__libc_init_array+0x44>)
 800a534:	f000 fc66 	bl	800ae04 <_init>
 800a538:	1b64      	subs	r4, r4, r5
 800a53a:	10a4      	asrs	r4, r4, #2
 800a53c:	2600      	movs	r6, #0
 800a53e:	42a6      	cmp	r6, r4
 800a540:	d105      	bne.n	800a54e <__libc_init_array+0x2e>
 800a542:	bd70      	pop	{r4, r5, r6, pc}
 800a544:	f855 3b04 	ldr.w	r3, [r5], #4
 800a548:	4798      	blx	r3
 800a54a:	3601      	adds	r6, #1
 800a54c:	e7ee      	b.n	800a52c <__libc_init_array+0xc>
 800a54e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a552:	4798      	blx	r3
 800a554:	3601      	adds	r6, #1
 800a556:	e7f2      	b.n	800a53e <__libc_init_array+0x1e>
 800a558:	0800afc0 	.word	0x0800afc0
 800a55c:	0800afc0 	.word	0x0800afc0
 800a560:	0800afc0 	.word	0x0800afc0
 800a564:	0800afc4 	.word	0x0800afc4

0800a568 <__retarget_lock_acquire_recursive>:
 800a568:	4770      	bx	lr

0800a56a <__retarget_lock_release_recursive>:
 800a56a:	4770      	bx	lr

0800a56c <memcpy>:
 800a56c:	440a      	add	r2, r1
 800a56e:	4291      	cmp	r1, r2
 800a570:	f100 33ff 	add.w	r3, r0, #4294967295
 800a574:	d100      	bne.n	800a578 <memcpy+0xc>
 800a576:	4770      	bx	lr
 800a578:	b510      	push	{r4, lr}
 800a57a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a57e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a582:	4291      	cmp	r1, r2
 800a584:	d1f9      	bne.n	800a57a <memcpy+0xe>
 800a586:	bd10      	pop	{r4, pc}

0800a588 <_free_r>:
 800a588:	b538      	push	{r3, r4, r5, lr}
 800a58a:	4605      	mov	r5, r0
 800a58c:	2900      	cmp	r1, #0
 800a58e:	d041      	beq.n	800a614 <_free_r+0x8c>
 800a590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a594:	1f0c      	subs	r4, r1, #4
 800a596:	2b00      	cmp	r3, #0
 800a598:	bfb8      	it	lt
 800a59a:	18e4      	addlt	r4, r4, r3
 800a59c:	f000 f8e0 	bl	800a760 <__malloc_lock>
 800a5a0:	4a1d      	ldr	r2, [pc, #116]	@ (800a618 <_free_r+0x90>)
 800a5a2:	6813      	ldr	r3, [r2, #0]
 800a5a4:	b933      	cbnz	r3, 800a5b4 <_free_r+0x2c>
 800a5a6:	6063      	str	r3, [r4, #4]
 800a5a8:	6014      	str	r4, [r2, #0]
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5b0:	f000 b8dc 	b.w	800a76c <__malloc_unlock>
 800a5b4:	42a3      	cmp	r3, r4
 800a5b6:	d908      	bls.n	800a5ca <_free_r+0x42>
 800a5b8:	6820      	ldr	r0, [r4, #0]
 800a5ba:	1821      	adds	r1, r4, r0
 800a5bc:	428b      	cmp	r3, r1
 800a5be:	bf01      	itttt	eq
 800a5c0:	6819      	ldreq	r1, [r3, #0]
 800a5c2:	685b      	ldreq	r3, [r3, #4]
 800a5c4:	1809      	addeq	r1, r1, r0
 800a5c6:	6021      	streq	r1, [r4, #0]
 800a5c8:	e7ed      	b.n	800a5a6 <_free_r+0x1e>
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	b10b      	cbz	r3, 800a5d4 <_free_r+0x4c>
 800a5d0:	42a3      	cmp	r3, r4
 800a5d2:	d9fa      	bls.n	800a5ca <_free_r+0x42>
 800a5d4:	6811      	ldr	r1, [r2, #0]
 800a5d6:	1850      	adds	r0, r2, r1
 800a5d8:	42a0      	cmp	r0, r4
 800a5da:	d10b      	bne.n	800a5f4 <_free_r+0x6c>
 800a5dc:	6820      	ldr	r0, [r4, #0]
 800a5de:	4401      	add	r1, r0
 800a5e0:	1850      	adds	r0, r2, r1
 800a5e2:	4283      	cmp	r3, r0
 800a5e4:	6011      	str	r1, [r2, #0]
 800a5e6:	d1e0      	bne.n	800a5aa <_free_r+0x22>
 800a5e8:	6818      	ldr	r0, [r3, #0]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	6053      	str	r3, [r2, #4]
 800a5ee:	4408      	add	r0, r1
 800a5f0:	6010      	str	r0, [r2, #0]
 800a5f2:	e7da      	b.n	800a5aa <_free_r+0x22>
 800a5f4:	d902      	bls.n	800a5fc <_free_r+0x74>
 800a5f6:	230c      	movs	r3, #12
 800a5f8:	602b      	str	r3, [r5, #0]
 800a5fa:	e7d6      	b.n	800a5aa <_free_r+0x22>
 800a5fc:	6820      	ldr	r0, [r4, #0]
 800a5fe:	1821      	adds	r1, r4, r0
 800a600:	428b      	cmp	r3, r1
 800a602:	bf04      	itt	eq
 800a604:	6819      	ldreq	r1, [r3, #0]
 800a606:	685b      	ldreq	r3, [r3, #4]
 800a608:	6063      	str	r3, [r4, #4]
 800a60a:	bf04      	itt	eq
 800a60c:	1809      	addeq	r1, r1, r0
 800a60e:	6021      	streq	r1, [r4, #0]
 800a610:	6054      	str	r4, [r2, #4]
 800a612:	e7ca      	b.n	800a5aa <_free_r+0x22>
 800a614:	bd38      	pop	{r3, r4, r5, pc}
 800a616:	bf00      	nop
 800a618:	20002044 	.word	0x20002044

0800a61c <sbrk_aligned>:
 800a61c:	b570      	push	{r4, r5, r6, lr}
 800a61e:	4e0f      	ldr	r6, [pc, #60]	@ (800a65c <sbrk_aligned+0x40>)
 800a620:	460c      	mov	r4, r1
 800a622:	6831      	ldr	r1, [r6, #0]
 800a624:	4605      	mov	r5, r0
 800a626:	b911      	cbnz	r1, 800a62e <sbrk_aligned+0x12>
 800a628:	f000 fba6 	bl	800ad78 <_sbrk_r>
 800a62c:	6030      	str	r0, [r6, #0]
 800a62e:	4621      	mov	r1, r4
 800a630:	4628      	mov	r0, r5
 800a632:	f000 fba1 	bl	800ad78 <_sbrk_r>
 800a636:	1c43      	adds	r3, r0, #1
 800a638:	d103      	bne.n	800a642 <sbrk_aligned+0x26>
 800a63a:	f04f 34ff 	mov.w	r4, #4294967295
 800a63e:	4620      	mov	r0, r4
 800a640:	bd70      	pop	{r4, r5, r6, pc}
 800a642:	1cc4      	adds	r4, r0, #3
 800a644:	f024 0403 	bic.w	r4, r4, #3
 800a648:	42a0      	cmp	r0, r4
 800a64a:	d0f8      	beq.n	800a63e <sbrk_aligned+0x22>
 800a64c:	1a21      	subs	r1, r4, r0
 800a64e:	4628      	mov	r0, r5
 800a650:	f000 fb92 	bl	800ad78 <_sbrk_r>
 800a654:	3001      	adds	r0, #1
 800a656:	d1f2      	bne.n	800a63e <sbrk_aligned+0x22>
 800a658:	e7ef      	b.n	800a63a <sbrk_aligned+0x1e>
 800a65a:	bf00      	nop
 800a65c:	20002040 	.word	0x20002040

0800a660 <_malloc_r>:
 800a660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a664:	1ccd      	adds	r5, r1, #3
 800a666:	f025 0503 	bic.w	r5, r5, #3
 800a66a:	3508      	adds	r5, #8
 800a66c:	2d0c      	cmp	r5, #12
 800a66e:	bf38      	it	cc
 800a670:	250c      	movcc	r5, #12
 800a672:	2d00      	cmp	r5, #0
 800a674:	4606      	mov	r6, r0
 800a676:	db01      	blt.n	800a67c <_malloc_r+0x1c>
 800a678:	42a9      	cmp	r1, r5
 800a67a:	d904      	bls.n	800a686 <_malloc_r+0x26>
 800a67c:	230c      	movs	r3, #12
 800a67e:	6033      	str	r3, [r6, #0]
 800a680:	2000      	movs	r0, #0
 800a682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a686:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a75c <_malloc_r+0xfc>
 800a68a:	f000 f869 	bl	800a760 <__malloc_lock>
 800a68e:	f8d8 3000 	ldr.w	r3, [r8]
 800a692:	461c      	mov	r4, r3
 800a694:	bb44      	cbnz	r4, 800a6e8 <_malloc_r+0x88>
 800a696:	4629      	mov	r1, r5
 800a698:	4630      	mov	r0, r6
 800a69a:	f7ff ffbf 	bl	800a61c <sbrk_aligned>
 800a69e:	1c43      	adds	r3, r0, #1
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	d158      	bne.n	800a756 <_malloc_r+0xf6>
 800a6a4:	f8d8 4000 	ldr.w	r4, [r8]
 800a6a8:	4627      	mov	r7, r4
 800a6aa:	2f00      	cmp	r7, #0
 800a6ac:	d143      	bne.n	800a736 <_malloc_r+0xd6>
 800a6ae:	2c00      	cmp	r4, #0
 800a6b0:	d04b      	beq.n	800a74a <_malloc_r+0xea>
 800a6b2:	6823      	ldr	r3, [r4, #0]
 800a6b4:	4639      	mov	r1, r7
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	eb04 0903 	add.w	r9, r4, r3
 800a6bc:	f000 fb5c 	bl	800ad78 <_sbrk_r>
 800a6c0:	4581      	cmp	r9, r0
 800a6c2:	d142      	bne.n	800a74a <_malloc_r+0xea>
 800a6c4:	6821      	ldr	r1, [r4, #0]
 800a6c6:	1a6d      	subs	r5, r5, r1
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	4630      	mov	r0, r6
 800a6cc:	f7ff ffa6 	bl	800a61c <sbrk_aligned>
 800a6d0:	3001      	adds	r0, #1
 800a6d2:	d03a      	beq.n	800a74a <_malloc_r+0xea>
 800a6d4:	6823      	ldr	r3, [r4, #0]
 800a6d6:	442b      	add	r3, r5
 800a6d8:	6023      	str	r3, [r4, #0]
 800a6da:	f8d8 3000 	ldr.w	r3, [r8]
 800a6de:	685a      	ldr	r2, [r3, #4]
 800a6e0:	bb62      	cbnz	r2, 800a73c <_malloc_r+0xdc>
 800a6e2:	f8c8 7000 	str.w	r7, [r8]
 800a6e6:	e00f      	b.n	800a708 <_malloc_r+0xa8>
 800a6e8:	6822      	ldr	r2, [r4, #0]
 800a6ea:	1b52      	subs	r2, r2, r5
 800a6ec:	d420      	bmi.n	800a730 <_malloc_r+0xd0>
 800a6ee:	2a0b      	cmp	r2, #11
 800a6f0:	d917      	bls.n	800a722 <_malloc_r+0xc2>
 800a6f2:	1961      	adds	r1, r4, r5
 800a6f4:	42a3      	cmp	r3, r4
 800a6f6:	6025      	str	r5, [r4, #0]
 800a6f8:	bf18      	it	ne
 800a6fa:	6059      	strne	r1, [r3, #4]
 800a6fc:	6863      	ldr	r3, [r4, #4]
 800a6fe:	bf08      	it	eq
 800a700:	f8c8 1000 	streq.w	r1, [r8]
 800a704:	5162      	str	r2, [r4, r5]
 800a706:	604b      	str	r3, [r1, #4]
 800a708:	4630      	mov	r0, r6
 800a70a:	f000 f82f 	bl	800a76c <__malloc_unlock>
 800a70e:	f104 000b 	add.w	r0, r4, #11
 800a712:	1d23      	adds	r3, r4, #4
 800a714:	f020 0007 	bic.w	r0, r0, #7
 800a718:	1ac2      	subs	r2, r0, r3
 800a71a:	bf1c      	itt	ne
 800a71c:	1a1b      	subne	r3, r3, r0
 800a71e:	50a3      	strne	r3, [r4, r2]
 800a720:	e7af      	b.n	800a682 <_malloc_r+0x22>
 800a722:	6862      	ldr	r2, [r4, #4]
 800a724:	42a3      	cmp	r3, r4
 800a726:	bf0c      	ite	eq
 800a728:	f8c8 2000 	streq.w	r2, [r8]
 800a72c:	605a      	strne	r2, [r3, #4]
 800a72e:	e7eb      	b.n	800a708 <_malloc_r+0xa8>
 800a730:	4623      	mov	r3, r4
 800a732:	6864      	ldr	r4, [r4, #4]
 800a734:	e7ae      	b.n	800a694 <_malloc_r+0x34>
 800a736:	463c      	mov	r4, r7
 800a738:	687f      	ldr	r7, [r7, #4]
 800a73a:	e7b6      	b.n	800a6aa <_malloc_r+0x4a>
 800a73c:	461a      	mov	r2, r3
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	42a3      	cmp	r3, r4
 800a742:	d1fb      	bne.n	800a73c <_malloc_r+0xdc>
 800a744:	2300      	movs	r3, #0
 800a746:	6053      	str	r3, [r2, #4]
 800a748:	e7de      	b.n	800a708 <_malloc_r+0xa8>
 800a74a:	230c      	movs	r3, #12
 800a74c:	6033      	str	r3, [r6, #0]
 800a74e:	4630      	mov	r0, r6
 800a750:	f000 f80c 	bl	800a76c <__malloc_unlock>
 800a754:	e794      	b.n	800a680 <_malloc_r+0x20>
 800a756:	6005      	str	r5, [r0, #0]
 800a758:	e7d6      	b.n	800a708 <_malloc_r+0xa8>
 800a75a:	bf00      	nop
 800a75c:	20002044 	.word	0x20002044

0800a760 <__malloc_lock>:
 800a760:	4801      	ldr	r0, [pc, #4]	@ (800a768 <__malloc_lock+0x8>)
 800a762:	f7ff bf01 	b.w	800a568 <__retarget_lock_acquire_recursive>
 800a766:	bf00      	nop
 800a768:	2000203c 	.word	0x2000203c

0800a76c <__malloc_unlock>:
 800a76c:	4801      	ldr	r0, [pc, #4]	@ (800a774 <__malloc_unlock+0x8>)
 800a76e:	f7ff befc 	b.w	800a56a <__retarget_lock_release_recursive>
 800a772:	bf00      	nop
 800a774:	2000203c 	.word	0x2000203c

0800a778 <__ssputs_r>:
 800a778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a77c:	688e      	ldr	r6, [r1, #8]
 800a77e:	461f      	mov	r7, r3
 800a780:	42be      	cmp	r6, r7
 800a782:	680b      	ldr	r3, [r1, #0]
 800a784:	4682      	mov	sl, r0
 800a786:	460c      	mov	r4, r1
 800a788:	4690      	mov	r8, r2
 800a78a:	d82d      	bhi.n	800a7e8 <__ssputs_r+0x70>
 800a78c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a790:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a794:	d026      	beq.n	800a7e4 <__ssputs_r+0x6c>
 800a796:	6965      	ldr	r5, [r4, #20]
 800a798:	6909      	ldr	r1, [r1, #16]
 800a79a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a79e:	eba3 0901 	sub.w	r9, r3, r1
 800a7a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7a6:	1c7b      	adds	r3, r7, #1
 800a7a8:	444b      	add	r3, r9
 800a7aa:	106d      	asrs	r5, r5, #1
 800a7ac:	429d      	cmp	r5, r3
 800a7ae:	bf38      	it	cc
 800a7b0:	461d      	movcc	r5, r3
 800a7b2:	0553      	lsls	r3, r2, #21
 800a7b4:	d527      	bpl.n	800a806 <__ssputs_r+0x8e>
 800a7b6:	4629      	mov	r1, r5
 800a7b8:	f7ff ff52 	bl	800a660 <_malloc_r>
 800a7bc:	4606      	mov	r6, r0
 800a7be:	b360      	cbz	r0, 800a81a <__ssputs_r+0xa2>
 800a7c0:	6921      	ldr	r1, [r4, #16]
 800a7c2:	464a      	mov	r2, r9
 800a7c4:	f7ff fed2 	bl	800a56c <memcpy>
 800a7c8:	89a3      	ldrh	r3, [r4, #12]
 800a7ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a7ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7d2:	81a3      	strh	r3, [r4, #12]
 800a7d4:	6126      	str	r6, [r4, #16]
 800a7d6:	6165      	str	r5, [r4, #20]
 800a7d8:	444e      	add	r6, r9
 800a7da:	eba5 0509 	sub.w	r5, r5, r9
 800a7de:	6026      	str	r6, [r4, #0]
 800a7e0:	60a5      	str	r5, [r4, #8]
 800a7e2:	463e      	mov	r6, r7
 800a7e4:	42be      	cmp	r6, r7
 800a7e6:	d900      	bls.n	800a7ea <__ssputs_r+0x72>
 800a7e8:	463e      	mov	r6, r7
 800a7ea:	6820      	ldr	r0, [r4, #0]
 800a7ec:	4632      	mov	r2, r6
 800a7ee:	4641      	mov	r1, r8
 800a7f0:	f000 faa8 	bl	800ad44 <memmove>
 800a7f4:	68a3      	ldr	r3, [r4, #8]
 800a7f6:	1b9b      	subs	r3, r3, r6
 800a7f8:	60a3      	str	r3, [r4, #8]
 800a7fa:	6823      	ldr	r3, [r4, #0]
 800a7fc:	4433      	add	r3, r6
 800a7fe:	6023      	str	r3, [r4, #0]
 800a800:	2000      	movs	r0, #0
 800a802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a806:	462a      	mov	r2, r5
 800a808:	f000 fac6 	bl	800ad98 <_realloc_r>
 800a80c:	4606      	mov	r6, r0
 800a80e:	2800      	cmp	r0, #0
 800a810:	d1e0      	bne.n	800a7d4 <__ssputs_r+0x5c>
 800a812:	6921      	ldr	r1, [r4, #16]
 800a814:	4650      	mov	r0, sl
 800a816:	f7ff feb7 	bl	800a588 <_free_r>
 800a81a:	230c      	movs	r3, #12
 800a81c:	f8ca 3000 	str.w	r3, [sl]
 800a820:	89a3      	ldrh	r3, [r4, #12]
 800a822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a826:	81a3      	strh	r3, [r4, #12]
 800a828:	f04f 30ff 	mov.w	r0, #4294967295
 800a82c:	e7e9      	b.n	800a802 <__ssputs_r+0x8a>
	...

0800a830 <_svfiprintf_r>:
 800a830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a834:	4698      	mov	r8, r3
 800a836:	898b      	ldrh	r3, [r1, #12]
 800a838:	061b      	lsls	r3, r3, #24
 800a83a:	b09d      	sub	sp, #116	@ 0x74
 800a83c:	4607      	mov	r7, r0
 800a83e:	460d      	mov	r5, r1
 800a840:	4614      	mov	r4, r2
 800a842:	d510      	bpl.n	800a866 <_svfiprintf_r+0x36>
 800a844:	690b      	ldr	r3, [r1, #16]
 800a846:	b973      	cbnz	r3, 800a866 <_svfiprintf_r+0x36>
 800a848:	2140      	movs	r1, #64	@ 0x40
 800a84a:	f7ff ff09 	bl	800a660 <_malloc_r>
 800a84e:	6028      	str	r0, [r5, #0]
 800a850:	6128      	str	r0, [r5, #16]
 800a852:	b930      	cbnz	r0, 800a862 <_svfiprintf_r+0x32>
 800a854:	230c      	movs	r3, #12
 800a856:	603b      	str	r3, [r7, #0]
 800a858:	f04f 30ff 	mov.w	r0, #4294967295
 800a85c:	b01d      	add	sp, #116	@ 0x74
 800a85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a862:	2340      	movs	r3, #64	@ 0x40
 800a864:	616b      	str	r3, [r5, #20]
 800a866:	2300      	movs	r3, #0
 800a868:	9309      	str	r3, [sp, #36]	@ 0x24
 800a86a:	2320      	movs	r3, #32
 800a86c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a870:	f8cd 800c 	str.w	r8, [sp, #12]
 800a874:	2330      	movs	r3, #48	@ 0x30
 800a876:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aa14 <_svfiprintf_r+0x1e4>
 800a87a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a87e:	f04f 0901 	mov.w	r9, #1
 800a882:	4623      	mov	r3, r4
 800a884:	469a      	mov	sl, r3
 800a886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a88a:	b10a      	cbz	r2, 800a890 <_svfiprintf_r+0x60>
 800a88c:	2a25      	cmp	r2, #37	@ 0x25
 800a88e:	d1f9      	bne.n	800a884 <_svfiprintf_r+0x54>
 800a890:	ebba 0b04 	subs.w	fp, sl, r4
 800a894:	d00b      	beq.n	800a8ae <_svfiprintf_r+0x7e>
 800a896:	465b      	mov	r3, fp
 800a898:	4622      	mov	r2, r4
 800a89a:	4629      	mov	r1, r5
 800a89c:	4638      	mov	r0, r7
 800a89e:	f7ff ff6b 	bl	800a778 <__ssputs_r>
 800a8a2:	3001      	adds	r0, #1
 800a8a4:	f000 80a7 	beq.w	800a9f6 <_svfiprintf_r+0x1c6>
 800a8a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8aa:	445a      	add	r2, fp
 800a8ac:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f000 809f 	beq.w	800a9f6 <_svfiprintf_r+0x1c6>
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a8be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8c2:	f10a 0a01 	add.w	sl, sl, #1
 800a8c6:	9304      	str	r3, [sp, #16]
 800a8c8:	9307      	str	r3, [sp, #28]
 800a8ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a8ce:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8d0:	4654      	mov	r4, sl
 800a8d2:	2205      	movs	r2, #5
 800a8d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8d8:	484e      	ldr	r0, [pc, #312]	@ (800aa14 <_svfiprintf_r+0x1e4>)
 800a8da:	f7f5 fc91 	bl	8000200 <memchr>
 800a8de:	9a04      	ldr	r2, [sp, #16]
 800a8e0:	b9d8      	cbnz	r0, 800a91a <_svfiprintf_r+0xea>
 800a8e2:	06d0      	lsls	r0, r2, #27
 800a8e4:	bf44      	itt	mi
 800a8e6:	2320      	movmi	r3, #32
 800a8e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8ec:	0711      	lsls	r1, r2, #28
 800a8ee:	bf44      	itt	mi
 800a8f0:	232b      	movmi	r3, #43	@ 0x2b
 800a8f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8f6:	f89a 3000 	ldrb.w	r3, [sl]
 800a8fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8fc:	d015      	beq.n	800a92a <_svfiprintf_r+0xfa>
 800a8fe:	9a07      	ldr	r2, [sp, #28]
 800a900:	4654      	mov	r4, sl
 800a902:	2000      	movs	r0, #0
 800a904:	f04f 0c0a 	mov.w	ip, #10
 800a908:	4621      	mov	r1, r4
 800a90a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a90e:	3b30      	subs	r3, #48	@ 0x30
 800a910:	2b09      	cmp	r3, #9
 800a912:	d94b      	bls.n	800a9ac <_svfiprintf_r+0x17c>
 800a914:	b1b0      	cbz	r0, 800a944 <_svfiprintf_r+0x114>
 800a916:	9207      	str	r2, [sp, #28]
 800a918:	e014      	b.n	800a944 <_svfiprintf_r+0x114>
 800a91a:	eba0 0308 	sub.w	r3, r0, r8
 800a91e:	fa09 f303 	lsl.w	r3, r9, r3
 800a922:	4313      	orrs	r3, r2
 800a924:	9304      	str	r3, [sp, #16]
 800a926:	46a2      	mov	sl, r4
 800a928:	e7d2      	b.n	800a8d0 <_svfiprintf_r+0xa0>
 800a92a:	9b03      	ldr	r3, [sp, #12]
 800a92c:	1d19      	adds	r1, r3, #4
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	9103      	str	r1, [sp, #12]
 800a932:	2b00      	cmp	r3, #0
 800a934:	bfbb      	ittet	lt
 800a936:	425b      	neglt	r3, r3
 800a938:	f042 0202 	orrlt.w	r2, r2, #2
 800a93c:	9307      	strge	r3, [sp, #28]
 800a93e:	9307      	strlt	r3, [sp, #28]
 800a940:	bfb8      	it	lt
 800a942:	9204      	strlt	r2, [sp, #16]
 800a944:	7823      	ldrb	r3, [r4, #0]
 800a946:	2b2e      	cmp	r3, #46	@ 0x2e
 800a948:	d10a      	bne.n	800a960 <_svfiprintf_r+0x130>
 800a94a:	7863      	ldrb	r3, [r4, #1]
 800a94c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a94e:	d132      	bne.n	800a9b6 <_svfiprintf_r+0x186>
 800a950:	9b03      	ldr	r3, [sp, #12]
 800a952:	1d1a      	adds	r2, r3, #4
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	9203      	str	r2, [sp, #12]
 800a958:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a95c:	3402      	adds	r4, #2
 800a95e:	9305      	str	r3, [sp, #20]
 800a960:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aa24 <_svfiprintf_r+0x1f4>
 800a964:	7821      	ldrb	r1, [r4, #0]
 800a966:	2203      	movs	r2, #3
 800a968:	4650      	mov	r0, sl
 800a96a:	f7f5 fc49 	bl	8000200 <memchr>
 800a96e:	b138      	cbz	r0, 800a980 <_svfiprintf_r+0x150>
 800a970:	9b04      	ldr	r3, [sp, #16]
 800a972:	eba0 000a 	sub.w	r0, r0, sl
 800a976:	2240      	movs	r2, #64	@ 0x40
 800a978:	4082      	lsls	r2, r0
 800a97a:	4313      	orrs	r3, r2
 800a97c:	3401      	adds	r4, #1
 800a97e:	9304      	str	r3, [sp, #16]
 800a980:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a984:	4824      	ldr	r0, [pc, #144]	@ (800aa18 <_svfiprintf_r+0x1e8>)
 800a986:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a98a:	2206      	movs	r2, #6
 800a98c:	f7f5 fc38 	bl	8000200 <memchr>
 800a990:	2800      	cmp	r0, #0
 800a992:	d036      	beq.n	800aa02 <_svfiprintf_r+0x1d2>
 800a994:	4b21      	ldr	r3, [pc, #132]	@ (800aa1c <_svfiprintf_r+0x1ec>)
 800a996:	bb1b      	cbnz	r3, 800a9e0 <_svfiprintf_r+0x1b0>
 800a998:	9b03      	ldr	r3, [sp, #12]
 800a99a:	3307      	adds	r3, #7
 800a99c:	f023 0307 	bic.w	r3, r3, #7
 800a9a0:	3308      	adds	r3, #8
 800a9a2:	9303      	str	r3, [sp, #12]
 800a9a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9a6:	4433      	add	r3, r6
 800a9a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9aa:	e76a      	b.n	800a882 <_svfiprintf_r+0x52>
 800a9ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9b0:	460c      	mov	r4, r1
 800a9b2:	2001      	movs	r0, #1
 800a9b4:	e7a8      	b.n	800a908 <_svfiprintf_r+0xd8>
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	3401      	adds	r4, #1
 800a9ba:	9305      	str	r3, [sp, #20]
 800a9bc:	4619      	mov	r1, r3
 800a9be:	f04f 0c0a 	mov.w	ip, #10
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9c8:	3a30      	subs	r2, #48	@ 0x30
 800a9ca:	2a09      	cmp	r2, #9
 800a9cc:	d903      	bls.n	800a9d6 <_svfiprintf_r+0x1a6>
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d0c6      	beq.n	800a960 <_svfiprintf_r+0x130>
 800a9d2:	9105      	str	r1, [sp, #20]
 800a9d4:	e7c4      	b.n	800a960 <_svfiprintf_r+0x130>
 800a9d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9da:	4604      	mov	r4, r0
 800a9dc:	2301      	movs	r3, #1
 800a9de:	e7f0      	b.n	800a9c2 <_svfiprintf_r+0x192>
 800a9e0:	ab03      	add	r3, sp, #12
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	462a      	mov	r2, r5
 800a9e6:	4b0e      	ldr	r3, [pc, #56]	@ (800aa20 <_svfiprintf_r+0x1f0>)
 800a9e8:	a904      	add	r1, sp, #16
 800a9ea:	4638      	mov	r0, r7
 800a9ec:	f3af 8000 	nop.w
 800a9f0:	1c42      	adds	r2, r0, #1
 800a9f2:	4606      	mov	r6, r0
 800a9f4:	d1d6      	bne.n	800a9a4 <_svfiprintf_r+0x174>
 800a9f6:	89ab      	ldrh	r3, [r5, #12]
 800a9f8:	065b      	lsls	r3, r3, #25
 800a9fa:	f53f af2d 	bmi.w	800a858 <_svfiprintf_r+0x28>
 800a9fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa00:	e72c      	b.n	800a85c <_svfiprintf_r+0x2c>
 800aa02:	ab03      	add	r3, sp, #12
 800aa04:	9300      	str	r3, [sp, #0]
 800aa06:	462a      	mov	r2, r5
 800aa08:	4b05      	ldr	r3, [pc, #20]	@ (800aa20 <_svfiprintf_r+0x1f0>)
 800aa0a:	a904      	add	r1, sp, #16
 800aa0c:	4638      	mov	r0, r7
 800aa0e:	f000 f879 	bl	800ab04 <_printf_i>
 800aa12:	e7ed      	b.n	800a9f0 <_svfiprintf_r+0x1c0>
 800aa14:	0800af84 	.word	0x0800af84
 800aa18:	0800af8e 	.word	0x0800af8e
 800aa1c:	00000000 	.word	0x00000000
 800aa20:	0800a779 	.word	0x0800a779
 800aa24:	0800af8a 	.word	0x0800af8a

0800aa28 <_printf_common>:
 800aa28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa2c:	4616      	mov	r6, r2
 800aa2e:	4698      	mov	r8, r3
 800aa30:	688a      	ldr	r2, [r1, #8]
 800aa32:	690b      	ldr	r3, [r1, #16]
 800aa34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	bfb8      	it	lt
 800aa3c:	4613      	movlt	r3, r2
 800aa3e:	6033      	str	r3, [r6, #0]
 800aa40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aa44:	4607      	mov	r7, r0
 800aa46:	460c      	mov	r4, r1
 800aa48:	b10a      	cbz	r2, 800aa4e <_printf_common+0x26>
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	6033      	str	r3, [r6, #0]
 800aa4e:	6823      	ldr	r3, [r4, #0]
 800aa50:	0699      	lsls	r1, r3, #26
 800aa52:	bf42      	ittt	mi
 800aa54:	6833      	ldrmi	r3, [r6, #0]
 800aa56:	3302      	addmi	r3, #2
 800aa58:	6033      	strmi	r3, [r6, #0]
 800aa5a:	6825      	ldr	r5, [r4, #0]
 800aa5c:	f015 0506 	ands.w	r5, r5, #6
 800aa60:	d106      	bne.n	800aa70 <_printf_common+0x48>
 800aa62:	f104 0a19 	add.w	sl, r4, #25
 800aa66:	68e3      	ldr	r3, [r4, #12]
 800aa68:	6832      	ldr	r2, [r6, #0]
 800aa6a:	1a9b      	subs	r3, r3, r2
 800aa6c:	42ab      	cmp	r3, r5
 800aa6e:	dc26      	bgt.n	800aabe <_printf_common+0x96>
 800aa70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aa74:	6822      	ldr	r2, [r4, #0]
 800aa76:	3b00      	subs	r3, #0
 800aa78:	bf18      	it	ne
 800aa7a:	2301      	movne	r3, #1
 800aa7c:	0692      	lsls	r2, r2, #26
 800aa7e:	d42b      	bmi.n	800aad8 <_printf_common+0xb0>
 800aa80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa84:	4641      	mov	r1, r8
 800aa86:	4638      	mov	r0, r7
 800aa88:	47c8      	blx	r9
 800aa8a:	3001      	adds	r0, #1
 800aa8c:	d01e      	beq.n	800aacc <_printf_common+0xa4>
 800aa8e:	6823      	ldr	r3, [r4, #0]
 800aa90:	6922      	ldr	r2, [r4, #16]
 800aa92:	f003 0306 	and.w	r3, r3, #6
 800aa96:	2b04      	cmp	r3, #4
 800aa98:	bf02      	ittt	eq
 800aa9a:	68e5      	ldreq	r5, [r4, #12]
 800aa9c:	6833      	ldreq	r3, [r6, #0]
 800aa9e:	1aed      	subeq	r5, r5, r3
 800aaa0:	68a3      	ldr	r3, [r4, #8]
 800aaa2:	bf0c      	ite	eq
 800aaa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aaa8:	2500      	movne	r5, #0
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	bfc4      	itt	gt
 800aaae:	1a9b      	subgt	r3, r3, r2
 800aab0:	18ed      	addgt	r5, r5, r3
 800aab2:	2600      	movs	r6, #0
 800aab4:	341a      	adds	r4, #26
 800aab6:	42b5      	cmp	r5, r6
 800aab8:	d11a      	bne.n	800aaf0 <_printf_common+0xc8>
 800aaba:	2000      	movs	r0, #0
 800aabc:	e008      	b.n	800aad0 <_printf_common+0xa8>
 800aabe:	2301      	movs	r3, #1
 800aac0:	4652      	mov	r2, sl
 800aac2:	4641      	mov	r1, r8
 800aac4:	4638      	mov	r0, r7
 800aac6:	47c8      	blx	r9
 800aac8:	3001      	adds	r0, #1
 800aaca:	d103      	bne.n	800aad4 <_printf_common+0xac>
 800aacc:	f04f 30ff 	mov.w	r0, #4294967295
 800aad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aad4:	3501      	adds	r5, #1
 800aad6:	e7c6      	b.n	800aa66 <_printf_common+0x3e>
 800aad8:	18e1      	adds	r1, r4, r3
 800aada:	1c5a      	adds	r2, r3, #1
 800aadc:	2030      	movs	r0, #48	@ 0x30
 800aade:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aae2:	4422      	add	r2, r4
 800aae4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aae8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aaec:	3302      	adds	r3, #2
 800aaee:	e7c7      	b.n	800aa80 <_printf_common+0x58>
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	4622      	mov	r2, r4
 800aaf4:	4641      	mov	r1, r8
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	47c8      	blx	r9
 800aafa:	3001      	adds	r0, #1
 800aafc:	d0e6      	beq.n	800aacc <_printf_common+0xa4>
 800aafe:	3601      	adds	r6, #1
 800ab00:	e7d9      	b.n	800aab6 <_printf_common+0x8e>
	...

0800ab04 <_printf_i>:
 800ab04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab08:	7e0f      	ldrb	r7, [r1, #24]
 800ab0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ab0c:	2f78      	cmp	r7, #120	@ 0x78
 800ab0e:	4691      	mov	r9, r2
 800ab10:	4680      	mov	r8, r0
 800ab12:	460c      	mov	r4, r1
 800ab14:	469a      	mov	sl, r3
 800ab16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ab1a:	d807      	bhi.n	800ab2c <_printf_i+0x28>
 800ab1c:	2f62      	cmp	r7, #98	@ 0x62
 800ab1e:	d80a      	bhi.n	800ab36 <_printf_i+0x32>
 800ab20:	2f00      	cmp	r7, #0
 800ab22:	f000 80d2 	beq.w	800acca <_printf_i+0x1c6>
 800ab26:	2f58      	cmp	r7, #88	@ 0x58
 800ab28:	f000 80b9 	beq.w	800ac9e <_printf_i+0x19a>
 800ab2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab34:	e03a      	b.n	800abac <_printf_i+0xa8>
 800ab36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab3a:	2b15      	cmp	r3, #21
 800ab3c:	d8f6      	bhi.n	800ab2c <_printf_i+0x28>
 800ab3e:	a101      	add	r1, pc, #4	@ (adr r1, 800ab44 <_printf_i+0x40>)
 800ab40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab44:	0800ab9d 	.word	0x0800ab9d
 800ab48:	0800abb1 	.word	0x0800abb1
 800ab4c:	0800ab2d 	.word	0x0800ab2d
 800ab50:	0800ab2d 	.word	0x0800ab2d
 800ab54:	0800ab2d 	.word	0x0800ab2d
 800ab58:	0800ab2d 	.word	0x0800ab2d
 800ab5c:	0800abb1 	.word	0x0800abb1
 800ab60:	0800ab2d 	.word	0x0800ab2d
 800ab64:	0800ab2d 	.word	0x0800ab2d
 800ab68:	0800ab2d 	.word	0x0800ab2d
 800ab6c:	0800ab2d 	.word	0x0800ab2d
 800ab70:	0800acb1 	.word	0x0800acb1
 800ab74:	0800abdb 	.word	0x0800abdb
 800ab78:	0800ac6b 	.word	0x0800ac6b
 800ab7c:	0800ab2d 	.word	0x0800ab2d
 800ab80:	0800ab2d 	.word	0x0800ab2d
 800ab84:	0800acd3 	.word	0x0800acd3
 800ab88:	0800ab2d 	.word	0x0800ab2d
 800ab8c:	0800abdb 	.word	0x0800abdb
 800ab90:	0800ab2d 	.word	0x0800ab2d
 800ab94:	0800ab2d 	.word	0x0800ab2d
 800ab98:	0800ac73 	.word	0x0800ac73
 800ab9c:	6833      	ldr	r3, [r6, #0]
 800ab9e:	1d1a      	adds	r2, r3, #4
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	6032      	str	r2, [r6, #0]
 800aba4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aba8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800abac:	2301      	movs	r3, #1
 800abae:	e09d      	b.n	800acec <_printf_i+0x1e8>
 800abb0:	6833      	ldr	r3, [r6, #0]
 800abb2:	6820      	ldr	r0, [r4, #0]
 800abb4:	1d19      	adds	r1, r3, #4
 800abb6:	6031      	str	r1, [r6, #0]
 800abb8:	0606      	lsls	r6, r0, #24
 800abba:	d501      	bpl.n	800abc0 <_printf_i+0xbc>
 800abbc:	681d      	ldr	r5, [r3, #0]
 800abbe:	e003      	b.n	800abc8 <_printf_i+0xc4>
 800abc0:	0645      	lsls	r5, r0, #25
 800abc2:	d5fb      	bpl.n	800abbc <_printf_i+0xb8>
 800abc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800abc8:	2d00      	cmp	r5, #0
 800abca:	da03      	bge.n	800abd4 <_printf_i+0xd0>
 800abcc:	232d      	movs	r3, #45	@ 0x2d
 800abce:	426d      	negs	r5, r5
 800abd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abd4:	4859      	ldr	r0, [pc, #356]	@ (800ad3c <_printf_i+0x238>)
 800abd6:	230a      	movs	r3, #10
 800abd8:	e011      	b.n	800abfe <_printf_i+0xfa>
 800abda:	6821      	ldr	r1, [r4, #0]
 800abdc:	6833      	ldr	r3, [r6, #0]
 800abde:	0608      	lsls	r0, r1, #24
 800abe0:	f853 5b04 	ldr.w	r5, [r3], #4
 800abe4:	d402      	bmi.n	800abec <_printf_i+0xe8>
 800abe6:	0649      	lsls	r1, r1, #25
 800abe8:	bf48      	it	mi
 800abea:	b2ad      	uxthmi	r5, r5
 800abec:	2f6f      	cmp	r7, #111	@ 0x6f
 800abee:	4853      	ldr	r0, [pc, #332]	@ (800ad3c <_printf_i+0x238>)
 800abf0:	6033      	str	r3, [r6, #0]
 800abf2:	bf14      	ite	ne
 800abf4:	230a      	movne	r3, #10
 800abf6:	2308      	moveq	r3, #8
 800abf8:	2100      	movs	r1, #0
 800abfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800abfe:	6866      	ldr	r6, [r4, #4]
 800ac00:	60a6      	str	r6, [r4, #8]
 800ac02:	2e00      	cmp	r6, #0
 800ac04:	bfa2      	ittt	ge
 800ac06:	6821      	ldrge	r1, [r4, #0]
 800ac08:	f021 0104 	bicge.w	r1, r1, #4
 800ac0c:	6021      	strge	r1, [r4, #0]
 800ac0e:	b90d      	cbnz	r5, 800ac14 <_printf_i+0x110>
 800ac10:	2e00      	cmp	r6, #0
 800ac12:	d04b      	beq.n	800acac <_printf_i+0x1a8>
 800ac14:	4616      	mov	r6, r2
 800ac16:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac1a:	fb03 5711 	mls	r7, r3, r1, r5
 800ac1e:	5dc7      	ldrb	r7, [r0, r7]
 800ac20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac24:	462f      	mov	r7, r5
 800ac26:	42bb      	cmp	r3, r7
 800ac28:	460d      	mov	r5, r1
 800ac2a:	d9f4      	bls.n	800ac16 <_printf_i+0x112>
 800ac2c:	2b08      	cmp	r3, #8
 800ac2e:	d10b      	bne.n	800ac48 <_printf_i+0x144>
 800ac30:	6823      	ldr	r3, [r4, #0]
 800ac32:	07df      	lsls	r7, r3, #31
 800ac34:	d508      	bpl.n	800ac48 <_printf_i+0x144>
 800ac36:	6923      	ldr	r3, [r4, #16]
 800ac38:	6861      	ldr	r1, [r4, #4]
 800ac3a:	4299      	cmp	r1, r3
 800ac3c:	bfde      	ittt	le
 800ac3e:	2330      	movle	r3, #48	@ 0x30
 800ac40:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac44:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac48:	1b92      	subs	r2, r2, r6
 800ac4a:	6122      	str	r2, [r4, #16]
 800ac4c:	f8cd a000 	str.w	sl, [sp]
 800ac50:	464b      	mov	r3, r9
 800ac52:	aa03      	add	r2, sp, #12
 800ac54:	4621      	mov	r1, r4
 800ac56:	4640      	mov	r0, r8
 800ac58:	f7ff fee6 	bl	800aa28 <_printf_common>
 800ac5c:	3001      	adds	r0, #1
 800ac5e:	d14a      	bne.n	800acf6 <_printf_i+0x1f2>
 800ac60:	f04f 30ff 	mov.w	r0, #4294967295
 800ac64:	b004      	add	sp, #16
 800ac66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac6a:	6823      	ldr	r3, [r4, #0]
 800ac6c:	f043 0320 	orr.w	r3, r3, #32
 800ac70:	6023      	str	r3, [r4, #0]
 800ac72:	4833      	ldr	r0, [pc, #204]	@ (800ad40 <_printf_i+0x23c>)
 800ac74:	2778      	movs	r7, #120	@ 0x78
 800ac76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ac7a:	6823      	ldr	r3, [r4, #0]
 800ac7c:	6831      	ldr	r1, [r6, #0]
 800ac7e:	061f      	lsls	r7, r3, #24
 800ac80:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac84:	d402      	bmi.n	800ac8c <_printf_i+0x188>
 800ac86:	065f      	lsls	r7, r3, #25
 800ac88:	bf48      	it	mi
 800ac8a:	b2ad      	uxthmi	r5, r5
 800ac8c:	6031      	str	r1, [r6, #0]
 800ac8e:	07d9      	lsls	r1, r3, #31
 800ac90:	bf44      	itt	mi
 800ac92:	f043 0320 	orrmi.w	r3, r3, #32
 800ac96:	6023      	strmi	r3, [r4, #0]
 800ac98:	b11d      	cbz	r5, 800aca2 <_printf_i+0x19e>
 800ac9a:	2310      	movs	r3, #16
 800ac9c:	e7ac      	b.n	800abf8 <_printf_i+0xf4>
 800ac9e:	4827      	ldr	r0, [pc, #156]	@ (800ad3c <_printf_i+0x238>)
 800aca0:	e7e9      	b.n	800ac76 <_printf_i+0x172>
 800aca2:	6823      	ldr	r3, [r4, #0]
 800aca4:	f023 0320 	bic.w	r3, r3, #32
 800aca8:	6023      	str	r3, [r4, #0]
 800acaa:	e7f6      	b.n	800ac9a <_printf_i+0x196>
 800acac:	4616      	mov	r6, r2
 800acae:	e7bd      	b.n	800ac2c <_printf_i+0x128>
 800acb0:	6833      	ldr	r3, [r6, #0]
 800acb2:	6825      	ldr	r5, [r4, #0]
 800acb4:	6961      	ldr	r1, [r4, #20]
 800acb6:	1d18      	adds	r0, r3, #4
 800acb8:	6030      	str	r0, [r6, #0]
 800acba:	062e      	lsls	r6, r5, #24
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	d501      	bpl.n	800acc4 <_printf_i+0x1c0>
 800acc0:	6019      	str	r1, [r3, #0]
 800acc2:	e002      	b.n	800acca <_printf_i+0x1c6>
 800acc4:	0668      	lsls	r0, r5, #25
 800acc6:	d5fb      	bpl.n	800acc0 <_printf_i+0x1bc>
 800acc8:	8019      	strh	r1, [r3, #0]
 800acca:	2300      	movs	r3, #0
 800accc:	6123      	str	r3, [r4, #16]
 800acce:	4616      	mov	r6, r2
 800acd0:	e7bc      	b.n	800ac4c <_printf_i+0x148>
 800acd2:	6833      	ldr	r3, [r6, #0]
 800acd4:	1d1a      	adds	r2, r3, #4
 800acd6:	6032      	str	r2, [r6, #0]
 800acd8:	681e      	ldr	r6, [r3, #0]
 800acda:	6862      	ldr	r2, [r4, #4]
 800acdc:	2100      	movs	r1, #0
 800acde:	4630      	mov	r0, r6
 800ace0:	f7f5 fa8e 	bl	8000200 <memchr>
 800ace4:	b108      	cbz	r0, 800acea <_printf_i+0x1e6>
 800ace6:	1b80      	subs	r0, r0, r6
 800ace8:	6060      	str	r0, [r4, #4]
 800acea:	6863      	ldr	r3, [r4, #4]
 800acec:	6123      	str	r3, [r4, #16]
 800acee:	2300      	movs	r3, #0
 800acf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acf4:	e7aa      	b.n	800ac4c <_printf_i+0x148>
 800acf6:	6923      	ldr	r3, [r4, #16]
 800acf8:	4632      	mov	r2, r6
 800acfa:	4649      	mov	r1, r9
 800acfc:	4640      	mov	r0, r8
 800acfe:	47d0      	blx	sl
 800ad00:	3001      	adds	r0, #1
 800ad02:	d0ad      	beq.n	800ac60 <_printf_i+0x15c>
 800ad04:	6823      	ldr	r3, [r4, #0]
 800ad06:	079b      	lsls	r3, r3, #30
 800ad08:	d413      	bmi.n	800ad32 <_printf_i+0x22e>
 800ad0a:	68e0      	ldr	r0, [r4, #12]
 800ad0c:	9b03      	ldr	r3, [sp, #12]
 800ad0e:	4298      	cmp	r0, r3
 800ad10:	bfb8      	it	lt
 800ad12:	4618      	movlt	r0, r3
 800ad14:	e7a6      	b.n	800ac64 <_printf_i+0x160>
 800ad16:	2301      	movs	r3, #1
 800ad18:	4632      	mov	r2, r6
 800ad1a:	4649      	mov	r1, r9
 800ad1c:	4640      	mov	r0, r8
 800ad1e:	47d0      	blx	sl
 800ad20:	3001      	adds	r0, #1
 800ad22:	d09d      	beq.n	800ac60 <_printf_i+0x15c>
 800ad24:	3501      	adds	r5, #1
 800ad26:	68e3      	ldr	r3, [r4, #12]
 800ad28:	9903      	ldr	r1, [sp, #12]
 800ad2a:	1a5b      	subs	r3, r3, r1
 800ad2c:	42ab      	cmp	r3, r5
 800ad2e:	dcf2      	bgt.n	800ad16 <_printf_i+0x212>
 800ad30:	e7eb      	b.n	800ad0a <_printf_i+0x206>
 800ad32:	2500      	movs	r5, #0
 800ad34:	f104 0619 	add.w	r6, r4, #25
 800ad38:	e7f5      	b.n	800ad26 <_printf_i+0x222>
 800ad3a:	bf00      	nop
 800ad3c:	0800af95 	.word	0x0800af95
 800ad40:	0800afa6 	.word	0x0800afa6

0800ad44 <memmove>:
 800ad44:	4288      	cmp	r0, r1
 800ad46:	b510      	push	{r4, lr}
 800ad48:	eb01 0402 	add.w	r4, r1, r2
 800ad4c:	d902      	bls.n	800ad54 <memmove+0x10>
 800ad4e:	4284      	cmp	r4, r0
 800ad50:	4623      	mov	r3, r4
 800ad52:	d807      	bhi.n	800ad64 <memmove+0x20>
 800ad54:	1e43      	subs	r3, r0, #1
 800ad56:	42a1      	cmp	r1, r4
 800ad58:	d008      	beq.n	800ad6c <memmove+0x28>
 800ad5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad62:	e7f8      	b.n	800ad56 <memmove+0x12>
 800ad64:	4402      	add	r2, r0
 800ad66:	4601      	mov	r1, r0
 800ad68:	428a      	cmp	r2, r1
 800ad6a:	d100      	bne.n	800ad6e <memmove+0x2a>
 800ad6c:	bd10      	pop	{r4, pc}
 800ad6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad76:	e7f7      	b.n	800ad68 <memmove+0x24>

0800ad78 <_sbrk_r>:
 800ad78:	b538      	push	{r3, r4, r5, lr}
 800ad7a:	4d06      	ldr	r5, [pc, #24]	@ (800ad94 <_sbrk_r+0x1c>)
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	4604      	mov	r4, r0
 800ad80:	4608      	mov	r0, r1
 800ad82:	602b      	str	r3, [r5, #0]
 800ad84:	f7f6 fe1a 	bl	80019bc <_sbrk>
 800ad88:	1c43      	adds	r3, r0, #1
 800ad8a:	d102      	bne.n	800ad92 <_sbrk_r+0x1a>
 800ad8c:	682b      	ldr	r3, [r5, #0]
 800ad8e:	b103      	cbz	r3, 800ad92 <_sbrk_r+0x1a>
 800ad90:	6023      	str	r3, [r4, #0]
 800ad92:	bd38      	pop	{r3, r4, r5, pc}
 800ad94:	20002038 	.word	0x20002038

0800ad98 <_realloc_r>:
 800ad98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad9c:	4680      	mov	r8, r0
 800ad9e:	4615      	mov	r5, r2
 800ada0:	460c      	mov	r4, r1
 800ada2:	b921      	cbnz	r1, 800adae <_realloc_r+0x16>
 800ada4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ada8:	4611      	mov	r1, r2
 800adaa:	f7ff bc59 	b.w	800a660 <_malloc_r>
 800adae:	b92a      	cbnz	r2, 800adbc <_realloc_r+0x24>
 800adb0:	f7ff fbea 	bl	800a588 <_free_r>
 800adb4:	2400      	movs	r4, #0
 800adb6:	4620      	mov	r0, r4
 800adb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adbc:	f000 f81a 	bl	800adf4 <_malloc_usable_size_r>
 800adc0:	4285      	cmp	r5, r0
 800adc2:	4606      	mov	r6, r0
 800adc4:	d802      	bhi.n	800adcc <_realloc_r+0x34>
 800adc6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800adca:	d8f4      	bhi.n	800adb6 <_realloc_r+0x1e>
 800adcc:	4629      	mov	r1, r5
 800adce:	4640      	mov	r0, r8
 800add0:	f7ff fc46 	bl	800a660 <_malloc_r>
 800add4:	4607      	mov	r7, r0
 800add6:	2800      	cmp	r0, #0
 800add8:	d0ec      	beq.n	800adb4 <_realloc_r+0x1c>
 800adda:	42b5      	cmp	r5, r6
 800addc:	462a      	mov	r2, r5
 800adde:	4621      	mov	r1, r4
 800ade0:	bf28      	it	cs
 800ade2:	4632      	movcs	r2, r6
 800ade4:	f7ff fbc2 	bl	800a56c <memcpy>
 800ade8:	4621      	mov	r1, r4
 800adea:	4640      	mov	r0, r8
 800adec:	f7ff fbcc 	bl	800a588 <_free_r>
 800adf0:	463c      	mov	r4, r7
 800adf2:	e7e0      	b.n	800adb6 <_realloc_r+0x1e>

0800adf4 <_malloc_usable_size_r>:
 800adf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adf8:	1f18      	subs	r0, r3, #4
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	bfbc      	itt	lt
 800adfe:	580b      	ldrlt	r3, [r1, r0]
 800ae00:	18c0      	addlt	r0, r0, r3
 800ae02:	4770      	bx	lr

0800ae04 <_init>:
 800ae04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae06:	bf00      	nop
 800ae08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae0a:	bc08      	pop	{r3}
 800ae0c:	469e      	mov	lr, r3
 800ae0e:	4770      	bx	lr

0800ae10 <_fini>:
 800ae10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae12:	bf00      	nop
 800ae14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae16:	bc08      	pop	{r3}
 800ae18:	469e      	mov	lr, r3
 800ae1a:	4770      	bx	lr
